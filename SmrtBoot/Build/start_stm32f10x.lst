   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"Ap_ST32BL.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.Ap_ST32BL_Init,"ax",%progbits
  19              		.align	2
  20              		.global	Ap_ST32BL_Init
  21              		.thumb
  22              		.thumb_func
  24              	Ap_ST32BL_Init:
  25              	.LFB0:
  26              		.file 1 "../LIB_AP/Lib/Ap_ST32BL.c"
   1:../LIB_AP/Lib/Ap_ST32BL.c **** //----------------------------------------------------------------------------
   2:../LIB_AP/Lib/Ap_ST32BL.c **** //    프로그램명 	: ST32BL 관련 함수
   3:../LIB_AP/Lib/Ap_ST32BL.c **** //
   4:../LIB_AP/Lib/Ap_ST32BL.c **** //    만든이     	: 
   5:../LIB_AP/Lib/Ap_ST32BL.c **** //
   6:../LIB_AP/Lib/Ap_ST32BL.c **** //    날  짜     	: 
   7:../LIB_AP/Lib/Ap_ST32BL.c **** //    
   8:../LIB_AP/Lib/Ap_ST32BL.c **** //    최종 수정  	: 
   9:../LIB_AP/Lib/Ap_ST32BL.c **** //
  10:../LIB_AP/Lib/Ap_ST32BL.c **** //    MPU_Type 		:
  11:../LIB_AP/Lib/Ap_ST32BL.c **** //
  12:../LIB_AP/Lib/Ap_ST32BL.c **** //    파일명     	: AP_ST32BL.c
  13:../LIB_AP/Lib/Ap_ST32BL.c **** //----------------------------------------------------------------------------
  14:../LIB_AP/Lib/Ap_ST32BL.c **** 
  15:../LIB_AP/Lib/Ap_ST32BL.c **** 
  16:../LIB_AP/Lib/Ap_ST32BL.c **** 
  17:../LIB_AP/Lib/Ap_ST32BL.c **** 
  18:../LIB_AP/Lib/Ap_ST32BL.c **** 
  19:../LIB_AP/Lib/Ap_ST32BL.c **** //----- 헤더파일 열기
  20:../LIB_AP/Lib/Ap_ST32BL.c **** //
  21:../LIB_AP/Lib/Ap_ST32BL.c **** #define  AP_ST32BL_LOCAL  
  22:../LIB_AP/Lib/Ap_ST32BL.c **** 
  23:../LIB_AP/Lib/Ap_ST32BL.c **** #include "Ap_ST32BL.h"
  24:../LIB_AP/Lib/Ap_ST32BL.c **** #include "stm32f10x_flash.h"
  25:../LIB_AP/Lib/Ap_ST32BL.c **** 
  26:../LIB_AP/Lib/Ap_ST32BL.c **** #include <ctype.h>
  27:../LIB_AP/Lib/Ap_ST32BL.c **** #include <string.h>
  28:../LIB_AP/Lib/Ap_ST32BL.c **** 
  29:../LIB_AP/Lib/Ap_ST32BL.c **** 
  30:../LIB_AP/Lib/Ap_ST32BL.c **** //-- 내부 선언
  31:../LIB_AP/Lib/Ap_ST32BL.c **** //
  32:../LIB_AP/Lib/Ap_ST32BL.c **** 
  33:../LIB_AP/Lib/Ap_ST32BL.c **** #define HW_ST32BL_USE_DEBUG				0
  34:../LIB_AP/Lib/Ap_ST32BL.c **** 
  35:../LIB_AP/Lib/Ap_ST32BL.c **** 
  36:../LIB_AP/Lib/Ap_ST32BL.c **** 
  37:../LIB_AP/Lib/Ap_ST32BL.c **** #define HW_ST32BL_FLASH_START_ADDRESS 	((u32)0x08003000)
  38:../LIB_AP/Lib/Ap_ST32BL.c **** #define HW_ST32BL_FLASH_PAGE_SIZE    	((u16)0x00000400)
  39:../LIB_AP/Lib/Ap_ST32BL.c **** #define HW_ST32BL_FLASH_END_ADDRESS		((u32)0x08020000)
  40:../LIB_AP/Lib/Ap_ST32BL.c **** //#define HW_ST32BL_FLASH_END_ADDRESS	((u32)0x0800FFFF)
  41:../LIB_AP/Lib/Ap_ST32BL.c **** 
  42:../LIB_AP/Lib/Ap_ST32BL.c **** #define HW_ST32BL_FLASH_ADDRESS_OFFSET 	((u32)0x0003000)
  43:../LIB_AP/Lib/Ap_ST32BL.c **** 
  44:../LIB_AP/Lib/Ap_ST32BL.c **** 
  45:../LIB_AP/Lib/Ap_ST32BL.c **** #define HW_STM32_WRITE_BUFSIZE			256
  46:../LIB_AP/Lib/Ap_ST32BL.c **** 
  47:../LIB_AP/Lib/Ap_ST32BL.c **** 
  48:../LIB_AP/Lib/Ap_ST32BL.c **** //-- 내부 변수
  49:../LIB_AP/Lib/Ap_ST32BL.c **** //
  50:../LIB_AP/Lib/Ap_ST32BL.c **** 
  51:../LIB_AP/Lib/Ap_ST32BL.c **** u8	Ap_ST32BL_EraseSectorFlag[128];
  52:../LIB_AP/Lib/Ap_ST32BL.c **** 
  53:../LIB_AP/Lib/Ap_ST32BL.c **** 
  54:../LIB_AP/Lib/Ap_ST32BL.c **** typedef  void (*pFunction)(void);
  55:../LIB_AP/Lib/Ap_ST32BL.c **** 
  56:../LIB_AP/Lib/Ap_ST32BL.c **** 
  57:../LIB_AP/Lib/Ap_ST32BL.c **** 
  58:../LIB_AP/Lib/Ap_ST32BL.c **** void Ap_ST32BL_SendByte( u8 ByteData );
  59:../LIB_AP/Lib/Ap_ST32BL.c **** u8 	 Ap_ST32BL_WaitCmd( void );
  60:../LIB_AP/Lib/Ap_ST32BL.c **** u8   Ap_ST32BL_CheckFlashSector( u32 Address );
  61:../LIB_AP/Lib/Ap_ST32BL.c **** 
  62:../LIB_AP/Lib/Ap_ST32BL.c **** 
  63:../LIB_AP/Lib/Ap_ST32BL.c **** 
  64:../LIB_AP/Lib/Ap_ST32BL.c **** 
  65:../LIB_AP/Lib/Ap_ST32BL.c **** 
  66:../LIB_AP/Lib/Ap_ST32BL.c **** /*---------------------------------------------------------------------------
  67:../LIB_AP/Lib/Ap_ST32BL.c ****      TITLE   : Ap_ST32BL_Init
  68:../LIB_AP/Lib/Ap_ST32BL.c ****      WORK    : 
  69:../LIB_AP/Lib/Ap_ST32BL.c ****      ARG     : void
  70:../LIB_AP/Lib/Ap_ST32BL.c ****      RET     : void   
  71:../LIB_AP/Lib/Ap_ST32BL.c **** ---------------------------------------------------------------------------*/
  72:../LIB_AP/Lib/Ap_ST32BL.c **** void Ap_ST32BL_Init( void )
  73:../LIB_AP/Lib/Ap_ST32BL.c **** {
  27              		.loc 1 73 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  74:../LIB_AP/Lib/Ap_ST32BL.c **** 	u32 i;
  75:../LIB_AP/Lib/Ap_ST32BL.c **** 
  76:../LIB_AP/Lib/Ap_ST32BL.c **** 
  77:../LIB_AP/Lib/Ap_ST32BL.c **** 	REG_GPIOB_CRL &= ~(0x0F << (0));	// Clear
  32              		.loc 1 77 0
  33 0000 4FF44063 		mov	r3, #3072
  34 0004 C4F20103 		movt	r3, 16385
  35 0008 1968     		ldr	r1, [r3, #0]
  78:../LIB_AP/Lib/Ap_ST32BL.c **** 	REG_GPIOB_CRL |=  (0x00 << (0));	// MODE, PB.0 Input Mode
  79:../LIB_AP/Lib/Ap_ST32BL.c **** 	REG_GPIOB_CRL |=  (0x02 << (2));	// CNF,  PB.0 input	pull-up/pull-down
  80:../LIB_AP/Lib/Ap_ST32BL.c **** 		
  81:../LIB_AP/Lib/Ap_ST32BL.c **** 	CLR_BIT( REG_GPIOB_ODR, 0 );
  36              		.loc 1 81 0
  37 000a 40F60C42 		movw	r2, #3084
  77:../LIB_AP/Lib/Ap_ST32BL.c **** 	REG_GPIOB_CRL &= ~(0x0F << (0));	// Clear
  38              		.loc 1 77 0
  39 000e 21F00F00 		bic	r0, r1, #15
  40 0012 1860     		str	r0, [r3, #0]
  78:../LIB_AP/Lib/Ap_ST32BL.c **** 	REG_GPIOB_CRL |=  (0x00 << (0));	// MODE, PB.0 Input Mode
  41              		.loc 1 78 0
  42 0014 1968     		ldr	r1, [r3, #0]
  43              		.loc 1 81 0
  44 0016 C4F20102 		movt	r2, 16385
  78:../LIB_AP/Lib/Ap_ST32BL.c **** 	REG_GPIOB_CRL |=  (0x00 << (0));	// MODE, PB.0 Input Mode
  45              		.loc 1 78 0
  46 001a 1960     		str	r1, [r3, #0]
  79:../LIB_AP/Lib/Ap_ST32BL.c **** 	REG_GPIOB_CRL |=  (0x02 << (2));	// CNF,  PB.0 input	pull-up/pull-down
  47              		.loc 1 79 0
  48 001c 1868     		ldr	r0, [r3, #0]
  82:../LIB_AP/Lib/Ap_ST32BL.c **** 
  83:../LIB_AP/Lib/Ap_ST32BL.c **** 
  84:../LIB_AP/Lib/Ap_ST32BL.c **** 	if( IS_SET_BIT(REG_GPIOB_IDR, 0) )
  49              		.loc 1 84 0
  50 001e 40F60841 		movw	r1, #3080
  79:../LIB_AP/Lib/Ap_ST32BL.c **** 	REG_GPIOB_CRL |=  (0x02 << (2));	// CNF,  PB.0 input	pull-up/pull-down
  51              		.loc 1 79 0
  52 0022 40F00800 		orr	r0, r0, #8
  53 0026 1860     		str	r0, [r3, #0]
  81:../LIB_AP/Lib/Ap_ST32BL.c **** 	CLR_BIT( REG_GPIOB_ODR, 0 );
  54              		.loc 1 81 0
  55 0028 1368     		ldr	r3, [r2, #0]
  56              		.loc 1 84 0
  57 002a C4F20101 		movt	r1, 16385
  81:../LIB_AP/Lib/Ap_ST32BL.c **** 	CLR_BIT( REG_GPIOB_ODR, 0 );
  58              		.loc 1 81 0
  59 002e 23F00100 		bic	r0, r3, #1
  60 0032 1060     		str	r0, [r2, #0]
  61              		.loc 1 84 0
  62 0034 0A68     		ldr	r2, [r1, #0]
  63 0036 12F00101 		ands	r1, r2, #1
  64 003a 10D0     		beq	.L2
  85:../LIB_AP/Lib/Ap_ST32BL.c **** 	{
  86:../LIB_AP/Lib/Ap_ST32BL.c **** 		Ap_ST32BL_RunBoot = TRUE;
  65              		.loc 1 86 0
  66 003c 094A     		ldr	r2, .L8
  67 003e 0120     		movs	r0, #1
  68 0040 1070     		strb	r0, [r2, #0]
  69              	.L3:
  70              	.LVL0:
  71 0042 094B     		ldr	r3, .L8+4
  87:../LIB_AP/Lib/Ap_ST32BL.c **** 	}
  88:../LIB_AP/Lib/Ap_ST32BL.c **** 	else
  89:../LIB_AP/Lib/Ap_ST32BL.c **** 	{
  90:../LIB_AP/Lib/Ap_ST32BL.c **** 		Ap_ST32BL_RunBoot = FALSE;
  91:../LIB_AP/Lib/Ap_ST32BL.c **** 	}
  92:../LIB_AP/Lib/Ap_ST32BL.c **** 
  93:../LIB_AP/Lib/Ap_ST32BL.c **** 	for( i=0; i<128; i++ )
  94:../LIB_AP/Lib/Ap_ST32BL.c **** 	{
  95:../LIB_AP/Lib/Ap_ST32BL.c **** 		Ap_ST32BL_EraseSectorFlag[i] = FALSE;
  72              		.loc 1 95 0 discriminator 1
  73 0044 0021     		movs	r1, #0
  72:../LIB_AP/Lib/Ap_ST32BL.c **** void Ap_ST32BL_Init( void )
  74              		.loc 1 72 0 discriminator 1
  75 0046 03F18000 		add	r0, r3, #128
  76              	.LVL1:
  77              	.L4:
  78 004a 5A1C     		adds	r2, r3, #1
  79              		.loc 1 95 0 discriminator 2
  80 004c 5970     		strb	r1, [r3, #1]
  81 004e 0233     		adds	r3, r3, #2
  93:../LIB_AP/Lib/Ap_ST32BL.c **** 	for( i=0; i<128; i++ )
  82              		.loc 1 93 0 discriminator 2
  83 0050 8342     		cmp	r3, r0
  84              		.loc 1 95 0 discriminator 2
  85 0052 5170     		strb	r1, [r2, #1]
  93:../LIB_AP/Lib/Ap_ST32BL.c **** 	for( i=0; i<128; i++ )
  86              		.loc 1 93 0 discriminator 2
  87 0054 F9D1     		bne	.L4
  96:../LIB_AP/Lib/Ap_ST32BL.c **** 	}
  97:../LIB_AP/Lib/Ap_ST32BL.c **** 
  98:../LIB_AP/Lib/Ap_ST32BL.c **** 	Ap_ST32BL_UartPort = HW_UART_COM1;	
  88              		.loc 1 98 0
  89 0056 0548     		ldr	r0, .L8+8
  90 0058 0021     		movs	r1, #0
  91 005a 0170     		strb	r1, [r0, #0]
  92 005c 7047     		bx	lr
  93              	.L2:
  90:../LIB_AP/Lib/Ap_ST32BL.c **** 		Ap_ST32BL_RunBoot = FALSE;
  94              		.loc 1 90 0
  95 005e 014B     		ldr	r3, .L8
  96 0060 1970     		strb	r1, [r3, #0]
  97 0062 EEE7     		b	.L3
  98              	.L9:
  99              		.align	2
 100              	.L8:
 101 0064 00000000 		.word	Ap_ST32BL_RunBoot
 102 0068 FFFFFFFF 		.word	Ap_ST32BL_EraseSectorFlag-1
 103 006c 00000000 		.word	Ap_ST32BL_UartPort
 104              		.cfi_endproc
 105              	.LFE0:
 107              		.section	.text.Ap_ST32BL_SendByte,"ax",%progbits
 108              		.align	2
 109              		.global	Ap_ST32BL_SendByte
 110              		.thumb
 111              		.thumb_func
 113              	Ap_ST32BL_SendByte:
 114              	.LFB3:
  99:../LIB_AP/Lib/Ap_ST32BL.c **** }
 100:../LIB_AP/Lib/Ap_ST32BL.c **** 
 101:../LIB_AP/Lib/Ap_ST32BL.c **** 
 102:../LIB_AP/Lib/Ap_ST32BL.c **** 
 103:../LIB_AP/Lib/Ap_ST32BL.c **** 
 104:../LIB_AP/Lib/Ap_ST32BL.c **** 
 105:../LIB_AP/Lib/Ap_ST32BL.c **** 
 106:../LIB_AP/Lib/Ap_ST32BL.c **** 
 107:../LIB_AP/Lib/Ap_ST32BL.c **** 
 108:../LIB_AP/Lib/Ap_ST32BL.c **** 
 109:../LIB_AP/Lib/Ap_ST32BL.c **** 
 110:../LIB_AP/Lib/Ap_ST32BL.c **** /*---------------------------------------------------------------------------
 111:../LIB_AP/Lib/Ap_ST32BL.c ****      TITLE   : Ap_ST32BL_Main
 112:../LIB_AP/Lib/Ap_ST32BL.c ****      WORK    : 
 113:../LIB_AP/Lib/Ap_ST32BL.c ****      ARG     : void
 114:../LIB_AP/Lib/Ap_ST32BL.c ****      RET     : void   
 115:../LIB_AP/Lib/Ap_ST32BL.c **** ---------------------------------------------------------------------------*/
 116:../LIB_AP/Lib/Ap_ST32BL.c **** void Ap_ST32BL_Main( void )
 117:../LIB_AP/Lib/Ap_ST32BL.c **** {
 118:../LIB_AP/Lib/Ap_ST32BL.c **** 	u8 	Cmd;
 119:../LIB_AP/Lib/Ap_ST32BL.c **** 	u8 	Resp[300];
 120:../LIB_AP/Lib/Ap_ST32BL.c **** 	u32 Length;
 121:../LIB_AP/Lib/Ap_ST32BL.c **** 	u32 Address;
 122:../LIB_AP/Lib/Ap_ST32BL.c **** 
 123:../LIB_AP/Lib/Ap_ST32BL.c **** 	u32 i;
 124:../LIB_AP/Lib/Ap_ST32BL.c **** 	u8  CheckSum;
 125:../LIB_AP/Lib/Ap_ST32BL.c **** 	u8  CheckSumCalc;
 126:../LIB_AP/Lib/Ap_ST32BL.c **** 	u8  Ret;
 127:../LIB_AP/Lib/Ap_ST32BL.c **** 
 128:../LIB_AP/Lib/Ap_ST32BL.c **** 	while(1)
 129:../LIB_AP/Lib/Ap_ST32BL.c **** 	{
 130:../LIB_AP/Lib/Ap_ST32BL.c **** 		//Hw_Uart_Printf(HW_UART_VCOM, "ST32BL\n");
 131:../LIB_AP/Lib/Ap_ST32BL.c **** 		//Hw_Timer_Delay_ms(500);
 132:../LIB_AP/Lib/Ap_ST32BL.c **** 
 133:../LIB_AP/Lib/Ap_ST32BL.c **** 		Cmd = Ap_ST32BL_WaitCmd();
 134:../LIB_AP/Lib/Ap_ST32BL.c **** 
 135:../LIB_AP/Lib/Ap_ST32BL.c **** 		if( Cmd == STM32_CMD_INIT )
 136:../LIB_AP/Lib/Ap_ST32BL.c **** 		{
 137:../LIB_AP/Lib/Ap_ST32BL.c **** 
 138:../LIB_AP/Lib/Ap_ST32BL.c **** 		}
 139:../LIB_AP/Lib/Ap_ST32BL.c **** 
 140:../LIB_AP/Lib/Ap_ST32BL.c **** 
 141:../LIB_AP/Lib/Ap_ST32BL.c **** 		if( Cmd == STM32_CMD_GET_COMMAND )
 142:../LIB_AP/Lib/Ap_ST32BL.c **** 		{
 143:../LIB_AP/Lib/Ap_ST32BL.c **** 			Ap_ST32BL_SendByte(0x00);
 144:../LIB_AP/Lib/Ap_ST32BL.c **** 			Ap_ST32BL_SendByte(0x22);
 145:../LIB_AP/Lib/Ap_ST32BL.c **** 			Ap_ST32BL_SendByte(STM32_COMM_ACK);
 146:../LIB_AP/Lib/Ap_ST32BL.c **** 		}
 147:../LIB_AP/Lib/Ap_ST32BL.c **** 
 148:../LIB_AP/Lib/Ap_ST32BL.c **** 
 149:../LIB_AP/Lib/Ap_ST32BL.c **** 		if( Cmd == STM32_CMD_GET_ID )
 150:../LIB_AP/Lib/Ap_ST32BL.c **** 		{
 151:../LIB_AP/Lib/Ap_ST32BL.c **** 			Ap_ST32BL_SendByte(0x01);
 152:../LIB_AP/Lib/Ap_ST32BL.c **** 			Ap_ST32BL_SendByte(0x04);
 153:../LIB_AP/Lib/Ap_ST32BL.c **** 			Ap_ST32BL_SendByte(0x10);
 154:../LIB_AP/Lib/Ap_ST32BL.c **** 			Ap_ST32BL_SendByte(STM32_COMM_ACK);			
 155:../LIB_AP/Lib/Ap_ST32BL.c **** 		}
 156:../LIB_AP/Lib/Ap_ST32BL.c **** 
 157:../LIB_AP/Lib/Ap_ST32BL.c **** 
 158:../LIB_AP/Lib/Ap_ST32BL.c **** 		if( Cmd == STM32_CMD_ERASE_FLASH )
 159:../LIB_AP/Lib/Ap_ST32BL.c **** 		{
 160:../LIB_AP/Lib/Ap_ST32BL.c **** 			Resp[0] = Ap_ST32BL_ReceiveByte();
 161:../LIB_AP/Lib/Ap_ST32BL.c **** 			Resp[1] = Ap_ST32BL_ReceiveByte();
 162:../LIB_AP/Lib/Ap_ST32BL.c **** 
 163:../LIB_AP/Lib/Ap_ST32BL.c **** 
 164:../LIB_AP/Lib/Ap_ST32BL.c **** 			if( Ap_ST32BL_EraseFlash() == TRUE )	Ap_ST32BL_SendByte(STM32_COMM_ACK);
 165:../LIB_AP/Lib/Ap_ST32BL.c **** 			else									Ap_ST32BL_SendByte(STM32_COMM_NACK);
 166:../LIB_AP/Lib/Ap_ST32BL.c **** 
 167:../LIB_AP/Lib/Ap_ST32BL.c **** 			#if HW_ST32BL_USE_DEBUG == 1
 168:../LIB_AP/Lib/Ap_ST32BL.c **** 			Hw_Uart_Printf(HW_UART_COM1, "Erase %x %x \r\n", Resp[0], Resp[1] );
 169:../LIB_AP/Lib/Ap_ST32BL.c **** 			#endif			
 170:../LIB_AP/Lib/Ap_ST32BL.c **** 		}
 171:../LIB_AP/Lib/Ap_ST32BL.c **** 
 172:../LIB_AP/Lib/Ap_ST32BL.c **** 
 173:../LIB_AP/Lib/Ap_ST32BL.c **** 
 174:../LIB_AP/Lib/Ap_ST32BL.c **** 
 175:../LIB_AP/Lib/Ap_ST32BL.c **** 		if( Cmd == STM32_CMD_WRITE_FLASH )
 176:../LIB_AP/Lib/Ap_ST32BL.c **** 		{
 177:../LIB_AP/Lib/Ap_ST32BL.c **** 
 178:../LIB_AP/Lib/Ap_ST32BL.c **** 			//-- Receive Address 
 179:../LIB_AP/Lib/Ap_ST32BL.c **** 			//
 180:../LIB_AP/Lib/Ap_ST32BL.c **** 			CheckSumCalc = 0;
 181:../LIB_AP/Lib/Ap_ST32BL.c **** 			for( i=0; i<4; i++ )
 182:../LIB_AP/Lib/Ap_ST32BL.c **** 			{
 183:../LIB_AP/Lib/Ap_ST32BL.c **** 				Resp[i] = Ap_ST32BL_ReceiveByte();
 184:../LIB_AP/Lib/Ap_ST32BL.c **** 				CheckSumCalc ^= Resp[i];	
 185:../LIB_AP/Lib/Ap_ST32BL.c **** 			}
 186:../LIB_AP/Lib/Ap_ST32BL.c **** 			CheckSum = Ap_ST32BL_ReceiveByte();
 187:../LIB_AP/Lib/Ap_ST32BL.c **** 
 188:../LIB_AP/Lib/Ap_ST32BL.c **** 			Address  = Resp[0] << 24;
 189:../LIB_AP/Lib/Ap_ST32BL.c **** 			Address |= Resp[1] << 16;
 190:../LIB_AP/Lib/Ap_ST32BL.c **** 			Address |= Resp[2] <<  8;
 191:../LIB_AP/Lib/Ap_ST32BL.c **** 			Address |= Resp[3] <<  0;
 192:../LIB_AP/Lib/Ap_ST32BL.c **** 
 193:../LIB_AP/Lib/Ap_ST32BL.c **** 
 194:../LIB_AP/Lib/Ap_ST32BL.c **** 
 195:../LIB_AP/Lib/Ap_ST32BL.c **** 			#if HW_ST32BL_USE_DEBUG == 1
 196:../LIB_AP/Lib/Ap_ST32BL.c **** 			Hw_Uart_Printf(HW_UART_COM1, "Addrr %x %x %x %x %x %x\r\n", Resp[0], Resp[1], Resp[2], Resp[3], 
 197:../LIB_AP/Lib/Ap_ST32BL.c **** 			#endif		
 198:../LIB_AP/Lib/Ap_ST32BL.c **** 
 199:../LIB_AP/Lib/Ap_ST32BL.c **** 			if( CheckSum == CheckSumCalc )
 200:../LIB_AP/Lib/Ap_ST32BL.c **** 			{
 201:../LIB_AP/Lib/Ap_ST32BL.c **** 				Ap_ST32BL_SendByte(STM32_COMM_ACK);
 202:../LIB_AP/Lib/Ap_ST32BL.c **** 				#if HW_ST32BL_USE_DEBUG == 1
 203:../LIB_AP/Lib/Ap_ST32BL.c **** 				Hw_Uart_Printf(HW_UART_COM1, "ACK\r\n");
 204:../LIB_AP/Lib/Ap_ST32BL.c **** 				#endif	
 205:../LIB_AP/Lib/Ap_ST32BL.c **** 			}
 206:../LIB_AP/Lib/Ap_ST32BL.c **** 			else
 207:../LIB_AP/Lib/Ap_ST32BL.c **** 			{
 208:../LIB_AP/Lib/Ap_ST32BL.c **** 				Ap_ST32BL_SendByte(STM32_COMM_NACK);	
 209:../LIB_AP/Lib/Ap_ST32BL.c **** 				#if HW_ST32BL_USE_DEBUG == 1
 210:../LIB_AP/Lib/Ap_ST32BL.c **** 				Hw_Uart_Printf(HW_UART_COM1, "NACK\r\n");
 211:../LIB_AP/Lib/Ap_ST32BL.c **** 				#endif	
 212:../LIB_AP/Lib/Ap_ST32BL.c **** 			}	
 213:../LIB_AP/Lib/Ap_ST32BL.c **** 
 214:../LIB_AP/Lib/Ap_ST32BL.c **** 
 215:../LIB_AP/Lib/Ap_ST32BL.c **** 			//-- Receive Data
 216:../LIB_AP/Lib/Ap_ST32BL.c **** 			//
 217:../LIB_AP/Lib/Ap_ST32BL.c **** 			CheckSumCalc = 0;
 218:../LIB_AP/Lib/Ap_ST32BL.c **** 			Length  = Ap_ST32BL_ReceiveByte();
 219:../LIB_AP/Lib/Ap_ST32BL.c **** 			CheckSumCalc ^= Length;
 220:../LIB_AP/Lib/Ap_ST32BL.c **** 			Length++;
 221:../LIB_AP/Lib/Ap_ST32BL.c **** 
 222:../LIB_AP/Lib/Ap_ST32BL.c **** 			#if HW_ST32BL_USE_DEBUG == 1
 223:../LIB_AP/Lib/Ap_ST32BL.c **** 			Hw_Uart_Printf(HW_UART_COM1, "Length %d \r\n", Length );
 224:../LIB_AP/Lib/Ap_ST32BL.c **** 			#endif	
 225:../LIB_AP/Lib/Ap_ST32BL.c **** 
 226:../LIB_AP/Lib/Ap_ST32BL.c **** 			for( i=0; i<Length; i++ )
 227:../LIB_AP/Lib/Ap_ST32BL.c **** 			{
 228:../LIB_AP/Lib/Ap_ST32BL.c **** 				Resp[i] = Ap_ST32BL_ReceiveByte();
 229:../LIB_AP/Lib/Ap_ST32BL.c **** 				CheckSumCalc ^= Resp[i];					
 230:../LIB_AP/Lib/Ap_ST32BL.c **** 			}
 231:../LIB_AP/Lib/Ap_ST32BL.c **** 			CheckSum = Ap_ST32BL_ReceiveByte();
 232:../LIB_AP/Lib/Ap_ST32BL.c **** 
 233:../LIB_AP/Lib/Ap_ST32BL.c **** 
 234:../LIB_AP/Lib/Ap_ST32BL.c **** 			#if HW_ST32BL_USE_DEBUG == 1
 235:../LIB_AP/Lib/Ap_ST32BL.c **** 			Hw_Uart_Printf(HW_UART_COM1, "Receive Data %d %x %x\r\n", Length, CheckSum, CheckSumCalc );
 236:../LIB_AP/Lib/Ap_ST32BL.c **** 			#endif		
 237:../LIB_AP/Lib/Ap_ST32BL.c **** 
 238:../LIB_AP/Lib/Ap_ST32BL.c **** 
 239:../LIB_AP/Lib/Ap_ST32BL.c **** 			//-- Flash Write
 240:../LIB_AP/Lib/Ap_ST32BL.c **** 			//
 241:../LIB_AP/Lib/Ap_ST32BL.c **** 
 242:../LIB_AP/Lib/Ap_ST32BL.c **** 			Ret = Ap_ST32BL_WriteFlash( Address + HW_ST32BL_FLASH_ADDRESS_OFFSET, Resp, Length );
 243:../LIB_AP/Lib/Ap_ST32BL.c **** 
 244:../LIB_AP/Lib/Ap_ST32BL.c **** 		
 245:../LIB_AP/Lib/Ap_ST32BL.c **** 			if( CheckSum == CheckSumCalc && Ret == TRUE ) 	
 246:../LIB_AP/Lib/Ap_ST32BL.c **** 			{
 247:../LIB_AP/Lib/Ap_ST32BL.c **** 				Ap_ST32BL_SendByte(STM32_COMM_ACK);
 248:../LIB_AP/Lib/Ap_ST32BL.c **** 			}
 249:../LIB_AP/Lib/Ap_ST32BL.c **** 			else							
 250:../LIB_AP/Lib/Ap_ST32BL.c **** 			{
 251:../LIB_AP/Lib/Ap_ST32BL.c **** 				Ap_ST32BL_SendByte(STM32_COMM_NACK);
 252:../LIB_AP/Lib/Ap_ST32BL.c **** 			}
 253:../LIB_AP/Lib/Ap_ST32BL.c **** 
 254:../LIB_AP/Lib/Ap_ST32BL.c **** 		}
 255:../LIB_AP/Lib/Ap_ST32BL.c **** 		
 256:../LIB_AP/Lib/Ap_ST32BL.c **** 
 257:../LIB_AP/Lib/Ap_ST32BL.c **** 		//-- Go Command
 258:../LIB_AP/Lib/Ap_ST32BL.c **** 		//
 259:../LIB_AP/Lib/Ap_ST32BL.c **** 		if( Cmd == STM32_CMD_GO )
 260:../LIB_AP/Lib/Ap_ST32BL.c **** 		{
 261:../LIB_AP/Lib/Ap_ST32BL.c **** 			//-- Receive Address 
 262:../LIB_AP/Lib/Ap_ST32BL.c **** 			//
 263:../LIB_AP/Lib/Ap_ST32BL.c **** 			CheckSumCalc = 0;
 264:../LIB_AP/Lib/Ap_ST32BL.c **** 			for( i=0; i<4; i++ )
 265:../LIB_AP/Lib/Ap_ST32BL.c **** 			{
 266:../LIB_AP/Lib/Ap_ST32BL.c **** 				Resp[i] = Ap_ST32BL_ReceiveByte();
 267:../LIB_AP/Lib/Ap_ST32BL.c **** 				CheckSumCalc ^= Resp[i];	
 268:../LIB_AP/Lib/Ap_ST32BL.c **** 			}
 269:../LIB_AP/Lib/Ap_ST32BL.c **** 			CheckSum = Ap_ST32BL_ReceiveByte();
 270:../LIB_AP/Lib/Ap_ST32BL.c **** 
 271:../LIB_AP/Lib/Ap_ST32BL.c **** 			Address  = Resp[0] << 24;
 272:../LIB_AP/Lib/Ap_ST32BL.c **** 			Address |= Resp[1] << 16;
 273:../LIB_AP/Lib/Ap_ST32BL.c **** 			Address |= Resp[2] <<  8;
 274:../LIB_AP/Lib/Ap_ST32BL.c **** 			Address |= Resp[3] <<  0;	
 275:../LIB_AP/Lib/Ap_ST32BL.c **** 			
 276:../LIB_AP/Lib/Ap_ST32BL.c **** 
 277:../LIB_AP/Lib/Ap_ST32BL.c **** 			Ap_ST32BL_SendByte(STM32_COMM_ACK);	
 278:../LIB_AP/Lib/Ap_ST32BL.c **** 
 279:../LIB_AP/Lib/Ap_ST32BL.c **** 			Hw_Timer_Delay_ms(100);
 280:../LIB_AP/Lib/Ap_ST32BL.c **** 
 281:../LIB_AP/Lib/Ap_ST32BL.c **** 			//-- Go
 282:../LIB_AP/Lib/Ap_ST32BL.c **** 			//
 283:../LIB_AP/Lib/Ap_ST32BL.c **** 			Ap_ST32BL_JumpToApp( Address );
 284:../LIB_AP/Lib/Ap_ST32BL.c **** 
 285:../LIB_AP/Lib/Ap_ST32BL.c **** 					
 286:../LIB_AP/Lib/Ap_ST32BL.c **** 		}
 287:../LIB_AP/Lib/Ap_ST32BL.c **** 	}
 288:../LIB_AP/Lib/Ap_ST32BL.c **** 
 289:../LIB_AP/Lib/Ap_ST32BL.c **** }
 290:../LIB_AP/Lib/Ap_ST32BL.c **** 
 291:../LIB_AP/Lib/Ap_ST32BL.c **** 
 292:../LIB_AP/Lib/Ap_ST32BL.c **** 
 293:../LIB_AP/Lib/Ap_ST32BL.c **** 
 294:../LIB_AP/Lib/Ap_ST32BL.c **** 
 295:../LIB_AP/Lib/Ap_ST32BL.c **** /*---------------------------------------------------------------------------
 296:../LIB_AP/Lib/Ap_ST32BL.c ****      TITLE   : Ap_ST32BL_WaitCmd
 297:../LIB_AP/Lib/Ap_ST32BL.c ****      WORK    : 
 298:../LIB_AP/Lib/Ap_ST32BL.c ****      ARG     : void
 299:../LIB_AP/Lib/Ap_ST32BL.c ****      RET     : void   
 300:../LIB_AP/Lib/Ap_ST32BL.c **** ---------------------------------------------------------------------------*/
 301:../LIB_AP/Lib/Ap_ST32BL.c **** u8 Ap_ST32BL_WaitCmd( void )
 302:../LIB_AP/Lib/Ap_ST32BL.c **** {
 303:../LIB_AP/Lib/Ap_ST32BL.c **** 	u8 Ch;
 304:../LIB_AP/Lib/Ap_ST32BL.c **** 	u8 Cmd = 0xFF;
 305:../LIB_AP/Lib/Ap_ST32BL.c **** 	u8 CmdC;
 306:../LIB_AP/Lib/Ap_ST32BL.c **** 
 307:../LIB_AP/Lib/Ap_ST32BL.c **** 	Cmd = Ap_ST32BL_ReceiveByte();
 308:../LIB_AP/Lib/Ap_ST32BL.c **** 
 309:../LIB_AP/Lib/Ap_ST32BL.c **** 	switch( Cmd )
 310:../LIB_AP/Lib/Ap_ST32BL.c **** 	{
 311:../LIB_AP/Lib/Ap_ST32BL.c **** 		case STM32_CMD_INIT:
 312:../LIB_AP/Lib/Ap_ST32BL.c **** 			Ap_ST32BL_SendByte(STM32_COMM_ACK);
 313:../LIB_AP/Lib/Ap_ST32BL.c **** 			break;
 314:../LIB_AP/Lib/Ap_ST32BL.c **** 
 315:../LIB_AP/Lib/Ap_ST32BL.c **** 		case STM32_CMD_GET_COMMAND:
 316:../LIB_AP/Lib/Ap_ST32BL.c **** 		case STM32_CMD_ERASE_FLASH:
 317:../LIB_AP/Lib/Ap_ST32BL.c **** 		case STM32_CMD_EXTENDED_ERASE_FLASH:
 318:../LIB_AP/Lib/Ap_ST32BL.c **** 		case STM32_CMD_GET_ID:
 319:../LIB_AP/Lib/Ap_ST32BL.c **** 		case STM32_CMD_WRITE_FLASH:
 320:../LIB_AP/Lib/Ap_ST32BL.c **** 		case STM32_CMD_WRITE_UNPROTECT:
 321:../LIB_AP/Lib/Ap_ST32BL.c **** 		case STM32_CMD_READ_FLASH:
 322:../LIB_AP/Lib/Ap_ST32BL.c **** 		case STM32_CMD_GO:
 323:../LIB_AP/Lib/Ap_ST32BL.c **** 		case 0xFF:
 324:../LIB_AP/Lib/Ap_ST32BL.c **** 			CmdC = Ap_ST32BL_ReceiveByte();
 325:../LIB_AP/Lib/Ap_ST32BL.c **** 
 326:../LIB_AP/Lib/Ap_ST32BL.c **** 			Ap_ST32BL_SendByte(STM32_COMM_ACK);				
 327:../LIB_AP/Lib/Ap_ST32BL.c **** 			break;
 328:../LIB_AP/Lib/Ap_ST32BL.c **** 
 329:../LIB_AP/Lib/Ap_ST32BL.c **** 		default:
 330:../LIB_AP/Lib/Ap_ST32BL.c **** 			Ap_ST32BL_SendByte(STM32_COMM_NACK);
 331:../LIB_AP/Lib/Ap_ST32BL.c **** 			break;
 332:../LIB_AP/Lib/Ap_ST32BL.c **** 	}
 333:../LIB_AP/Lib/Ap_ST32BL.c **** 
 334:../LIB_AP/Lib/Ap_ST32BL.c **** 
 335:../LIB_AP/Lib/Ap_ST32BL.c **** 	return Cmd;
 336:../LIB_AP/Lib/Ap_ST32BL.c **** }
 337:../LIB_AP/Lib/Ap_ST32BL.c **** 
 338:../LIB_AP/Lib/Ap_ST32BL.c **** 
 339:../LIB_AP/Lib/Ap_ST32BL.c **** 
 340:../LIB_AP/Lib/Ap_ST32BL.c **** 
 341:../LIB_AP/Lib/Ap_ST32BL.c **** 
 342:../LIB_AP/Lib/Ap_ST32BL.c **** /*---------------------------------------------------------------------------
 343:../LIB_AP/Lib/Ap_ST32BL.c ****      TITLE   : Ap_ST32BL_SendByte
 344:../LIB_AP/Lib/Ap_ST32BL.c ****      WORK    : 
 345:../LIB_AP/Lib/Ap_ST32BL.c ****      ARG     : void
 346:../LIB_AP/Lib/Ap_ST32BL.c ****      RET     : void   
 347:../LIB_AP/Lib/Ap_ST32BL.c **** ---------------------------------------------------------------------------*/
 348:../LIB_AP/Lib/Ap_ST32BL.c **** void Ap_ST32BL_SendByte( u8 ByteData )
 349:../LIB_AP/Lib/Ap_ST32BL.c **** {
 115              		.loc 1 349 0
 116              		.cfi_startproc
 117              		@ args = 0, pretend = 0, frame = 0
 118              		@ frame_needed = 0, uses_anonymous_args = 0
 119              	.LVL2:
 120 0000 08B5     		push	{r3, lr}
 121              	.LCFI0:
 122              		.cfi_def_cfa_offset 8
 123              		.cfi_offset 3, -8
 124              		.cfi_offset 14, -4
 350:../LIB_AP/Lib/Ap_ST32BL.c **** 	Hw_Uart_Putch( Ap_ST32BL_UartPort, ByteData );
 125              		.loc 1 350 0
 126 0002 40F20002 		movw	r2, #:lower16:Ap_ST32BL_UartPort
 127 0006 C0F20002 		movt	r2, #:upper16:Ap_ST32BL_UartPort
 128 000a 40F20003 		movw	r3, #:lower16:Hw_Uart_Putch
 349:../LIB_AP/Lib/Ap_ST32BL.c **** {
 129              		.loc 1 349 0
 130 000e 0146     		mov	r1, r0
 131              		.loc 1 350 0
 132 0010 C0F20003 		movt	r3, #:upper16:Hw_Uart_Putch
 133 0014 1078     		ldrb	r0, [r2, #0]	@ zero_extendqisi2
 134              	.LVL3:
 135 0016 9847     		blx	r3
 136              	.LVL4:
 137 0018 08BD     		pop	{r3, pc}
 138              		.cfi_endproc
 139              	.LFE3:
 141 001a 00BF     		.section	.text.Ap_ST32BL_ReceiveByte,"ax",%progbits
 142              		.align	2
 143              		.global	Ap_ST32BL_ReceiveByte
 144              		.thumb
 145              		.thumb_func
 147              	Ap_ST32BL_ReceiveByte:
 148              	.LFB4:
 351:../LIB_AP/Lib/Ap_ST32BL.c **** }
 352:../LIB_AP/Lib/Ap_ST32BL.c **** 
 353:../LIB_AP/Lib/Ap_ST32BL.c **** 
 354:../LIB_AP/Lib/Ap_ST32BL.c **** 
 355:../LIB_AP/Lib/Ap_ST32BL.c **** 
 356:../LIB_AP/Lib/Ap_ST32BL.c **** 
 357:../LIB_AP/Lib/Ap_ST32BL.c **** /*---------------------------------------------------------------------------
 358:../LIB_AP/Lib/Ap_ST32BL.c ****      TITLE   : Ap_ST32BL_ReceiveByte
 359:../LIB_AP/Lib/Ap_ST32BL.c ****      WORK    : 
 360:../LIB_AP/Lib/Ap_ST32BL.c ****      ARG     : void
 361:../LIB_AP/Lib/Ap_ST32BL.c ****      RET     : void   
 362:../LIB_AP/Lib/Ap_ST32BL.c **** ---------------------------------------------------------------------------*/
 363:../LIB_AP/Lib/Ap_ST32BL.c **** u8 Ap_ST32BL_ReceiveByte( void )
 364:../LIB_AP/Lib/Ap_ST32BL.c **** {
 149              		.loc 1 364 0
 150              		.cfi_startproc
 151              		@ args = 0, pretend = 0, frame = 0
 152              		@ frame_needed = 0, uses_anonymous_args = 0
 153 0000 08B5     		push	{r3, lr}
 154              	.LCFI1:
 155              		.cfi_def_cfa_offset 8
 156              		.cfi_offset 3, -8
 157              		.cfi_offset 14, -4
 365:../LIB_AP/Lib/Ap_ST32BL.c **** 	Hw_Uart_Getch( Ap_ST32BL_UartPort );
 158              		.loc 1 365 0
 159 0002 40F20002 		movw	r2, #:lower16:Ap_ST32BL_UartPort
 160 0006 C0F20002 		movt	r2, #:upper16:Ap_ST32BL_UartPort
 161 000a 40F20003 		movw	r3, #:lower16:Hw_Uart_Getch
 162 000e 1078     		ldrb	r0, [r2, #0]	@ zero_extendqisi2
 163 0010 C0F20003 		movt	r3, #:upper16:Hw_Uart_Getch
 164 0014 9847     		blx	r3
 165              	.LVL5:
 366:../LIB_AP/Lib/Ap_ST32BL.c **** }
 166              		.loc 1 366 0
 167 0016 08BD     		pop	{r3, pc}
 168              		.cfi_endproc
 169              	.LFE4:
 171              		.section	.text.Ap_ST32BL_WaitCmd,"ax",%progbits
 172              		.align	2
 173              		.global	Ap_ST32BL_WaitCmd
 174              		.thumb
 175              		.thumb_func
 177              	Ap_ST32BL_WaitCmd:
 178              	.LFB2:
 302:../LIB_AP/Lib/Ap_ST32BL.c **** {
 179              		.loc 1 302 0
 180              		.cfi_startproc
 181              		@ args = 0, pretend = 0, frame = 0
 182              		@ frame_needed = 0, uses_anonymous_args = 0
 183              	.LVL6:
 184 0000 38B5     		push	{r3, r4, r5, lr}
 185              	.LCFI2:
 186              		.cfi_def_cfa_offset 16
 187              		.cfi_offset 3, -16
 188              		.cfi_offset 4, -12
 189              		.cfi_offset 5, -8
 190              		.cfi_offset 14, -4
 307:../LIB_AP/Lib/Ap_ST32BL.c **** 	Cmd = Ap_ST32BL_ReceiveByte();
 191              		.loc 1 307 0
 192 0002 134D     		ldr	r5, .L45
 193 0004 A847     		blx	r5
 194              	.LVL7:
 309:../LIB_AP/Lib/Ap_ST32BL.c **** 	switch( Cmd )
 195              		.loc 1 309 0
 196 0006 3128     		cmp	r0, #49
 307:../LIB_AP/Lib/Ap_ST32BL.c **** 	Cmd = Ap_ST32BL_ReceiveByte();
 197              		.loc 1 307 0
 198 0008 0446     		mov	r4, r0
 199              	.LVL8:
 309:../LIB_AP/Lib/Ap_ST32BL.c **** 	switch( Cmd )
 200              		.loc 1 309 0
 201 000a 07D0     		beq	.L14
 202 000c 0CD9     		bls	.L42
 203 000e 7328     		cmp	r0, #115
 204 0010 04D0     		beq	.L14
 205 0012 11D9     		bls	.L43
 206 0014 7F28     		cmp	r0, #127
 207 0016 02D0     		beq	.L41
 208 0018 FF28     		cmp	r0, #255
 209 001a 11D1     		bne	.L13
 210              	.L14:
 324:../LIB_AP/Lib/Ap_ST32BL.c **** 			CmdC = Ap_ST32BL_ReceiveByte();
 211              		.loc 1 324 0
 212 001c A847     		blx	r5
 213              	.LVL9:
 214              	.L41:
 326:../LIB_AP/Lib/Ap_ST32BL.c **** 			Ap_ST32BL_SendByte(STM32_COMM_ACK);				
 215              		.loc 1 326 0
 216 001e 7920     		movs	r0, #121
 217 0020 0C4A     		ldr	r2, .L45+4
 218 0022 9047     		blx	r2
 219              	.LVL10:
 336:../LIB_AP/Lib/Ap_ST32BL.c **** }
 220              		.loc 1 336 0
 221 0024 2046     		mov	r0, r4
 222 0026 38BD     		pop	{r3, r4, r5, pc}
 223              	.LVL11:
 224              	.L42:
 309:../LIB_AP/Lib/Ap_ST32BL.c **** 	switch( Cmd )
 225              		.loc 1 309 0
 226 0028 0228     		cmp	r0, #2
 227 002a F7D0     		beq	.L14
 228 002c 0DD9     		bls	.L44
 229 002e 1128     		cmp	r0, #17
 230 0030 F4D0     		beq	.L14
 231 0032 2128     		cmp	r0, #33
 232 0034 04D1     		bne	.L13
 233 0036 F1E7     		b	.L14
 234              	.L43:
 235 0038 A0F14303 		sub	r3, r0, #67
 236 003c 012B     		cmp	r3, #1
 237 003e EDD9     		bls	.L14
 238              	.L13:
 330:../LIB_AP/Lib/Ap_ST32BL.c **** 			Ap_ST32BL_SendByte(STM32_COMM_NACK);
 239              		.loc 1 330 0
 240 0040 1F20     		movs	r0, #31
 241              	.LVL12:
 242 0042 0449     		ldr	r1, .L45+4
 243 0044 8847     		blx	r1
 244              	.LVL13:
 336:../LIB_AP/Lib/Ap_ST32BL.c **** }
 245              		.loc 1 336 0
 246 0046 2046     		mov	r0, r4
 247 0048 38BD     		pop	{r3, r4, r5, pc}
 248              	.LVL14:
 249              	.L44:
 309:../LIB_AP/Lib/Ap_ST32BL.c **** 	switch( Cmd )
 250              		.loc 1 309 0
 251 004a 0028     		cmp	r0, #0
 252 004c E6D0     		beq	.L14
 253 004e F7E7     		b	.L13
 254              	.L46:
 255              		.align	2
 256              	.L45:
 257 0050 00000000 		.word	Ap_ST32BL_ReceiveByte
 258 0054 00000000 		.word	Ap_ST32BL_SendByte
 259              		.cfi_endproc
 260              	.LFE2:
 262              		.section	.text.Ap_ST32BL_EraseFlash,"ax",%progbits
 263              		.align	2
 264              		.global	Ap_ST32BL_EraseFlash
 265              		.thumb
 266              		.thumb_func
 268              	Ap_ST32BL_EraseFlash:
 269              	.LFB5:
 367:../LIB_AP/Lib/Ap_ST32BL.c **** 
 368:../LIB_AP/Lib/Ap_ST32BL.c **** 
 369:../LIB_AP/Lib/Ap_ST32BL.c **** 
 370:../LIB_AP/Lib/Ap_ST32BL.c **** 
 371:../LIB_AP/Lib/Ap_ST32BL.c **** /*---------------------------------------------------------------------------
 372:../LIB_AP/Lib/Ap_ST32BL.c ****      TITLE   : Ap_ST32BL_EraseFlash
 373:../LIB_AP/Lib/Ap_ST32BL.c ****      WORK    : 
 374:../LIB_AP/Lib/Ap_ST32BL.c ****      ARG     : void
 375:../LIB_AP/Lib/Ap_ST32BL.c ****      RET     : void   
 376:../LIB_AP/Lib/Ap_ST32BL.c **** ---------------------------------------------------------------------------*/
 377:../LIB_AP/Lib/Ap_ST32BL.c **** u8 Ap_ST32BL_EraseFlash( void )
 378:../LIB_AP/Lib/Ap_ST32BL.c **** {
 270              		.loc 1 378 0
 271              		.cfi_startproc
 272              		@ args = 0, pretend = 0, frame = 8
 273              		@ frame_needed = 0, uses_anonymous_args = 0
 274              	.LVL15:
 275 0000 00B5     		push	{lr}
 276              	.LCFI3:
 277              		.cfi_def_cfa_offset 4
 278              		.cfi_offset 14, -4
 379:../LIB_AP/Lib/Ap_ST32BL.c **** 	u8  Ret = TRUE;
 380:../LIB_AP/Lib/Ap_ST32BL.c **** 	u32 PageCount;
 381:../LIB_AP/Lib/Ap_ST32BL.c **** 	u32 i;
 382:../LIB_AP/Lib/Ap_ST32BL.c **** 
 383:../LIB_AP/Lib/Ap_ST32BL.c **** 	
 384:../LIB_AP/Lib/Ap_ST32BL.c **** 	volatile FLASH_Status FLASHStatus;
 385:../LIB_AP/Lib/Ap_ST32BL.c **** 
 386:../LIB_AP/Lib/Ap_ST32BL.c **** 	FLASHStatus = FLASH_COMPLETE;
 279              		.loc 1 386 0
 280 0002 0423     		movs	r3, #4
 378:../LIB_AP/Lib/Ap_ST32BL.c **** {
 281              		.loc 1 378 0
 282 0004 83B0     		sub	sp, sp, #12
 283              	.LCFI4:
 284              		.cfi_def_cfa_offset 16
 387:../LIB_AP/Lib/Ap_ST32BL.c **** 
 388:../LIB_AP/Lib/Ap_ST32BL.c **** 	FLASH_Unlock();
 285              		.loc 1 388 0
 286 0006 1248     		ldr	r0, .L53
 386:../LIB_AP/Lib/Ap_ST32BL.c **** 	FLASHStatus = FLASH_COMPLETE;
 287              		.loc 1 386 0
 288 0008 8DF80730 		strb	r3, [sp, #7]
 289              	.LVL16:
 290              		.loc 1 388 0
 291 000c 8047     		blx	r0
 292              	.LVL17:
 389:../LIB_AP/Lib/Ap_ST32BL.c **** 	FLASH_ClearFlag(FLASH_FLAG_BSY | FLASH_FLAG_EOP | FLASH_FLAG_PGERR | FLASH_FLAG_WRPRTERR);
 293              		.loc 1 389 0
 294 000e 3520     		movs	r0, #53
 295 0010 1049     		ldr	r1, .L53+4
 296 0012 8847     		blx	r1
 297              	.LVL18:
 298 0014 104B     		ldr	r3, .L53+8
 390:../LIB_AP/Lib/Ap_ST32BL.c **** 
 391:../LIB_AP/Lib/Ap_ST32BL.c **** 
 392:../LIB_AP/Lib/Ap_ST32BL.c **** 	for( i=0; i<128; i++ )
 393:../LIB_AP/Lib/Ap_ST32BL.c **** 	{
 394:../LIB_AP/Lib/Ap_ST32BL.c **** 		Ap_ST32BL_EraseSectorFlag[i] = FALSE;
 299              		.loc 1 394 0
 300 0016 0021     		movs	r1, #0
 377:../LIB_AP/Lib/Ap_ST32BL.c **** u8 Ap_ST32BL_EraseFlash( void )
 301              		.loc 1 377 0
 302 0018 03F18000 		add	r0, r3, #128
 303              	.LVL19:
 304              	.L48:
 305 001c 5A1C     		adds	r2, r3, #1
 306              		.loc 1 394 0 discriminator 2
 307 001e 5970     		strb	r1, [r3, #1]
 308 0020 0233     		adds	r3, r3, #2
 392:../LIB_AP/Lib/Ap_ST32BL.c **** 	for( i=0; i<128; i++ )
 309              		.loc 1 392 0 discriminator 2
 310 0022 8342     		cmp	r3, r0
 311              		.loc 1 394 0 discriminator 2
 312 0024 5170     		strb	r1, [r2, #1]
 392:../LIB_AP/Lib/Ap_ST32BL.c **** 	for( i=0; i<128; i++ )
 313              		.loc 1 392 0 discriminator 2
 314 0026 F9D1     		bne	.L48
 315              	.LVL20:
 395:../LIB_AP/Lib/Ap_ST32BL.c **** 	}
 396:../LIB_AP/Lib/Ap_ST32BL.c **** 
 397:../LIB_AP/Lib/Ap_ST32BL.c **** 	PageCount = 0;
 398:../LIB_AP/Lib/Ap_ST32BL.c **** 
 399:../LIB_AP/Lib/Ap_ST32BL.c **** 
 400:../LIB_AP/Lib/Ap_ST32BL.c **** 	FLASHStatus = FLASH_ErasePage(HW_ST32BL_FLASH_START_ADDRESS);
 316              		.loc 1 400 0
 317 0028 4FF44050 		mov	r0, #12288
 318 002c C0F60000 		movt	r0, 2048
 319 0030 0A49     		ldr	r1, .L53+12
 320 0032 8847     		blx	r1
 321              	.LVL21:
 322 0034 8DF80700 		strb	r0, [sp, #7]
 401:../LIB_AP/Lib/Ap_ST32BL.c **** 
 402:../LIB_AP/Lib/Ap_ST32BL.c **** 	Ap_ST32BL_EraseSectorFlag[PageCount] = TRUE;
 403:../LIB_AP/Lib/Ap_ST32BL.c **** 
 404:../LIB_AP/Lib/Ap_ST32BL.c **** 	if( FLASHStatus != FLASH_COMPLETE )
 323              		.loc 1 404 0
 324 0038 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 325              	.LVL22:
 402:../LIB_AP/Lib/Ap_ST32BL.c **** 	Ap_ST32BL_EraseSectorFlag[PageCount] = TRUE;
 326              		.loc 1 402 0
 327 003c 084A     		ldr	r2, .L53+16
 328 003e 0120     		movs	r0, #1
 329              		.loc 1 404 0
 330 0040 042B     		cmp	r3, #4
 402:../LIB_AP/Lib/Ap_ST32BL.c **** 	Ap_ST32BL_EraseSectorFlag[PageCount] = TRUE;
 331              		.loc 1 402 0
 332 0042 1070     		strb	r0, [r2, #0]
 333              		.loc 1 404 0
 334 0044 02D0     		beq	.L49
 405:../LIB_AP/Lib/Ap_ST32BL.c **** 	{
 406:../LIB_AP/Lib/Ap_ST32BL.c **** 		FLASH_Lock();
 335              		.loc 1 406 0
 336 0046 0748     		ldr	r0, .L53+20
 337 0048 8047     		blx	r0
 338              	.LVL23:
 407:../LIB_AP/Lib/Ap_ST32BL.c **** 		Ret = FALSE;
 339              		.loc 1 407 0
 340 004a 0020     		movs	r0, #0
 341              	.LVL24:
 342              	.L49:
 408:../LIB_AP/Lib/Ap_ST32BL.c **** 	}
 409:../LIB_AP/Lib/Ap_ST32BL.c **** 
 410:../LIB_AP/Lib/Ap_ST32BL.c **** 	return Ret;
 411:../LIB_AP/Lib/Ap_ST32BL.c **** }
 343              		.loc 1 411 0
 344 004c 03B0     		add	sp, sp, #12
 345 004e 00BD     		pop	{pc}
 346              	.L54:
 347              		.align	2
 348              	.L53:
 349 0050 00000000 		.word	FLASH_Unlock
 350 0054 00000000 		.word	FLASH_ClearFlag
 351 0058 FFFFFFFF 		.word	Ap_ST32BL_EraseSectorFlag-1
 352 005c 00000000 		.word	FLASH_ErasePage
 353 0060 00000000 		.word	Ap_ST32BL_EraseSectorFlag
 354 0064 00000000 		.word	FLASH_Lock
 355              		.cfi_endproc
 356              	.LFE5:
 358              		.section	.text.Ap_ST32BL_CheckFlashSector,"ax",%progbits
 359              		.align	2
 360              		.global	Ap_ST32BL_CheckFlashSector
 361              		.thumb
 362              		.thumb_func
 364              	Ap_ST32BL_CheckFlashSector:
 365              	.LFB6:
 412:../LIB_AP/Lib/Ap_ST32BL.c **** 
 413:../LIB_AP/Lib/Ap_ST32BL.c **** #if 0
 414:../LIB_AP/Lib/Ap_ST32BL.c **** u8 Ap_ST32BL_EraseFlash( void )
 415:../LIB_AP/Lib/Ap_ST32BL.c **** {
 416:../LIB_AP/Lib/Ap_ST32BL.c **** 	u8   Ret = TRUE;
 417:../LIB_AP/Lib/Ap_ST32BL.c **** 
 418:../LIB_AP/Lib/Ap_ST32BL.c **** 	vu32 PageCount    = 0;
 419:../LIB_AP/Lib/Ap_ST32BL.c **** 	u32  i;
 420:../LIB_AP/Lib/Ap_ST32BL.c **** 
 421:../LIB_AP/Lib/Ap_ST32BL.c **** 	volatile FLASH_Status FLASHStatus;
 422:../LIB_AP/Lib/Ap_ST32BL.c **** 
 423:../LIB_AP/Lib/Ap_ST32BL.c **** 
 424:../LIB_AP/Lib/Ap_ST32BL.c **** 	FLASHStatus = FLASH_COMPLETE;
 425:../LIB_AP/Lib/Ap_ST32BL.c **** 
 426:../LIB_AP/Lib/Ap_ST32BL.c **** 
 427:../LIB_AP/Lib/Ap_ST32BL.c **** 
 428:../LIB_AP/Lib/Ap_ST32BL.c **** 	FLASH_Unlock();
 429:../LIB_AP/Lib/Ap_ST32BL.c **** 	FLASH_ClearFlag(FLASH_FLAG_BSY | FLASH_FLAG_EOP | FLASH_FLAG_PGERR | FLASH_FLAG_WRPRTERR);
 430:../LIB_AP/Lib/Ap_ST32BL.c **** 
 431:../LIB_AP/Lib/Ap_ST32BL.c **** 
 432:../LIB_AP/Lib/Ap_ST32BL.c **** 	PageCount = ((HW_ST32BL_FLASH_END_ADDRESS - HW_ST32BL_FLASH_START_ADDRESS) / HW_ST32BL_FLASH_PAGE_
 433:../LIB_AP/Lib/Ap_ST32BL.c **** 
 434:../LIB_AP/Lib/Ap_ST32BL.c **** 
 435:../LIB_AP/Lib/Ap_ST32BL.c **** 	for( i=0; (i < PageCount) && (FLASHStatus == FLASH_COMPLETE); i++ )
 436:../LIB_AP/Lib/Ap_ST32BL.c **** 	{
 437:../LIB_AP/Lib/Ap_ST32BL.c **** 		FLASHStatus = FLASH_ErasePage(HW_ST32BL_FLASH_START_ADDRESS + (HW_ST32BL_FLASH_PAGE_SIZE * i));
 438:../LIB_AP/Lib/Ap_ST32BL.c **** 
 439:../LIB_AP/Lib/Ap_ST32BL.c **** 		#if HW_ST32BL_USE_DEBUG == 1
 440:../LIB_AP/Lib/Ap_ST32BL.c **** 		//Hw_Uart_Printf(HW_UART_COM1, "Erase %d %x\r\n", i, FLASHStatus );
 441:../LIB_AP/Lib/Ap_ST32BL.c **** 		#endif			
 442:../LIB_AP/Lib/Ap_ST32BL.c **** 	}
 443:../LIB_AP/Lib/Ap_ST32BL.c **** 
 444:../LIB_AP/Lib/Ap_ST32BL.c **** 	#if HW_ST32BL_USE_DEBUG == 1
 445:../LIB_AP/Lib/Ap_ST32BL.c **** 	Hw_Uart_Printf(HW_UART_COM1, "Erase End %x\r\n", FLASHStatus );
 446:../LIB_AP/Lib/Ap_ST32BL.c **** 	#endif	
 447:../LIB_AP/Lib/Ap_ST32BL.c **** 
 448:../LIB_AP/Lib/Ap_ST32BL.c **** 	if( FLASHStatus != FLASH_COMPLETE )
 449:../LIB_AP/Lib/Ap_ST32BL.c **** 	{
 450:../LIB_AP/Lib/Ap_ST32BL.c **** 		FLASH_Lock();
 451:../LIB_AP/Lib/Ap_ST32BL.c **** 		Ret = FALSE;
 452:../LIB_AP/Lib/Ap_ST32BL.c **** 	}
 453:../LIB_AP/Lib/Ap_ST32BL.c **** 
 454:../LIB_AP/Lib/Ap_ST32BL.c **** 	return Ret;
 455:../LIB_AP/Lib/Ap_ST32BL.c **** }
 456:../LIB_AP/Lib/Ap_ST32BL.c **** #endif
 457:../LIB_AP/Lib/Ap_ST32BL.c **** 
 458:../LIB_AP/Lib/Ap_ST32BL.c **** 
 459:../LIB_AP/Lib/Ap_ST32BL.c **** 
 460:../LIB_AP/Lib/Ap_ST32BL.c **** 
 461:../LIB_AP/Lib/Ap_ST32BL.c **** 
 462:../LIB_AP/Lib/Ap_ST32BL.c **** /*---------------------------------------------------------------------------
 463:../LIB_AP/Lib/Ap_ST32BL.c ****      TITLE   : Ap_ST32BL_CheckFlashSector
 464:../LIB_AP/Lib/Ap_ST32BL.c ****      WORK    : 
 465:../LIB_AP/Lib/Ap_ST32BL.c ****      ARG     : void
 466:../LIB_AP/Lib/Ap_ST32BL.c ****      RET     : void   
 467:../LIB_AP/Lib/Ap_ST32BL.c **** ---------------------------------------------------------------------------*/
 468:../LIB_AP/Lib/Ap_ST32BL.c **** u8 Ap_ST32BL_CheckFlashSector( u32 Address )
 469:../LIB_AP/Lib/Ap_ST32BL.c **** {
 366              		.loc 1 469 0
 367              		.cfi_startproc
 368              		@ args = 0, pretend = 0, frame = 8
 369              		@ frame_needed = 0, uses_anonymous_args = 0
 370              	.LVL25:
 371 0000 70B5     		push	{r4, r5, r6, lr}
 372              	.LCFI5:
 373              		.cfi_def_cfa_offset 16
 374              		.cfi_offset 4, -16
 375              		.cfi_offset 5, -12
 376              		.cfi_offset 6, -8
 377              		.cfi_offset 14, -4
 470:../LIB_AP/Lib/Ap_ST32BL.c **** 	u8  Ret = TRUE;
 471:../LIB_AP/Lib/Ap_ST32BL.c **** 	u32 PageCount;
 472:../LIB_AP/Lib/Ap_ST32BL.c **** 
 473:../LIB_AP/Lib/Ap_ST32BL.c **** 	volatile FLASH_Status FLASHStatus;
 474:../LIB_AP/Lib/Ap_ST32BL.c **** 
 475:../LIB_AP/Lib/Ap_ST32BL.c **** 	FLASHStatus = FLASH_COMPLETE;
 476:../LIB_AP/Lib/Ap_ST32BL.c **** 
 477:../LIB_AP/Lib/Ap_ST32BL.c **** 
 478:../LIB_AP/Lib/Ap_ST32BL.c **** 	if( Address < HW_ST32BL_FLASH_START_ADDRESS	) return FALSE;
 378              		.loc 1 478 0
 379 0002 42F6FF73 		movw	r3, #12287
 380 0006 C0F60003 		movt	r3, 2048
 475:../LIB_AP/Lib/Ap_ST32BL.c **** 	FLASHStatus = FLASH_COMPLETE;
 381              		.loc 1 475 0
 382 000a 0422     		movs	r2, #4
 469:../LIB_AP/Lib/Ap_ST32BL.c **** {
 383              		.loc 1 469 0
 384 000c 82B0     		sub	sp, sp, #8
 385              	.LCFI6:
 386              		.cfi_def_cfa_offset 24
 387              		.loc 1 478 0
 388 000e 9842     		cmp	r0, r3
 475:../LIB_AP/Lib/Ap_ST32BL.c **** 	FLASHStatus = FLASH_COMPLETE;
 389              		.loc 1 475 0
 390 0010 8DF80720 		strb	r2, [sp, #7]
 391              	.LVL26:
 392              		.loc 1 478 0
 393 0014 0AD9     		bls	.L59
 479:../LIB_AP/Lib/Ap_ST32BL.c **** 
 480:../LIB_AP/Lib/Ap_ST32BL.c **** 
 481:../LIB_AP/Lib/Ap_ST32BL.c **** 	PageCount = (Address - HW_ST32BL_FLASH_START_ADDRESS) / HW_ST32BL_FLASH_PAGE_SIZE;
 394              		.loc 1 481 0
 395 0016 00F17844 		add	r4, r0, #-134217728
 396 001a A4F54050 		sub	r0, r4, #12288
 397              	.LVL27:
 482:../LIB_AP/Lib/Ap_ST32BL.c **** 
 483:../LIB_AP/Lib/Ap_ST32BL.c **** 
 484:../LIB_AP/Lib/Ap_ST32BL.c **** 	if( Ap_ST32BL_EraseSectorFlag[PageCount] == FALSE )
 398              		.loc 1 484 0
 399 001e 0D4D     		ldr	r5, .L63
 481:../LIB_AP/Lib/Ap_ST32BL.c **** 	PageCount = (Address - HW_ST32BL_FLASH_START_ADDRESS) / HW_ST32BL_FLASH_PAGE_SIZE;
 400              		.loc 1 481 0
 401 0020 840A     		lsrs	r4, r0, #10
 402              	.LVL28:
 403              		.loc 1 484 0
 404 0022 2E5D     		ldrb	r6, [r5, r4]	@ zero_extendqisi2
 405 0024 26B1     		cbz	r6, .L57
 406              	.LVL29:
 407              	.L58:
 470:../LIB_AP/Lib/Ap_ST32BL.c **** 	u8  Ret = TRUE;
 408              		.loc 1 470 0
 409 0026 0120     		movs	r0, #1
 410              	.LVL30:
 411              	.L56:
 485:../LIB_AP/Lib/Ap_ST32BL.c **** 	{
 486:../LIB_AP/Lib/Ap_ST32BL.c **** 		FLASHStatus = FLASH_ErasePage(HW_ST32BL_FLASH_START_ADDRESS + (HW_ST32BL_FLASH_PAGE_SIZE * PageCo
 487:../LIB_AP/Lib/Ap_ST32BL.c **** 
 488:../LIB_AP/Lib/Ap_ST32BL.c **** 		Ap_ST32BL_EraseSectorFlag[PageCount] = TRUE;
 489:../LIB_AP/Lib/Ap_ST32BL.c **** 
 490:../LIB_AP/Lib/Ap_ST32BL.c **** 		if( FLASHStatus != FLASH_COMPLETE )
 491:../LIB_AP/Lib/Ap_ST32BL.c **** 		{
 492:../LIB_AP/Lib/Ap_ST32BL.c **** 			FLASH_Lock();
 493:../LIB_AP/Lib/Ap_ST32BL.c **** 			Ret = FALSE;
 494:../LIB_AP/Lib/Ap_ST32BL.c **** 		}
 495:../LIB_AP/Lib/Ap_ST32BL.c **** 	}
 496:../LIB_AP/Lib/Ap_ST32BL.c **** 
 497:../LIB_AP/Lib/Ap_ST32BL.c **** 
 498:../LIB_AP/Lib/Ap_ST32BL.c **** 	return Ret;
 499:../LIB_AP/Lib/Ap_ST32BL.c **** }
 412              		.loc 1 499 0
 413 0028 02B0     		add	sp, sp, #8
 414 002a 70BD     		pop	{r4, r5, r6, pc}
 415              	.LVL31:
 416              	.L59:
 478:../LIB_AP/Lib/Ap_ST32BL.c **** 	if( Address < HW_ST32BL_FLASH_START_ADDRESS	) return FALSE;
 417              		.loc 1 478 0
 418 002c 0020     		movs	r0, #0
 419              	.LVL32:
 420 002e FBE7     		b	.L56
 421              	.LVL33:
 422              	.L57:
 486:../LIB_AP/Lib/Ap_ST32BL.c **** 		FLASHStatus = FLASH_ErasePage(HW_ST32BL_FLASH_START_ADDRESS + (HW_ST32BL_FLASH_PAGE_SIZE * PageCo
 423              		.loc 1 486 0
 424 0030 04F50031 		add	r1, r4, #131072
 425 0034 0C31     		adds	r1, r1, #12
 426 0036 8802     		lsls	r0, r1, #10
 427 0038 074B     		ldr	r3, .L63+4
 428 003a 9847     		blx	r3
 429              	.LVL34:
 430 003c 8DF80700 		strb	r0, [sp, #7]
 490:../LIB_AP/Lib/Ap_ST32BL.c **** 		if( FLASHStatus != FLASH_COMPLETE )
 431              		.loc 1 490 0
 432 0040 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 433              	.LVL35:
 488:../LIB_AP/Lib/Ap_ST32BL.c **** 		Ap_ST32BL_EraseSectorFlag[PageCount] = TRUE;
 434              		.loc 1 488 0
 435 0044 0122     		movs	r2, #1
 490:../LIB_AP/Lib/Ap_ST32BL.c **** 		if( FLASHStatus != FLASH_COMPLETE )
 436              		.loc 1 490 0
 437 0046 0428     		cmp	r0, #4
 488:../LIB_AP/Lib/Ap_ST32BL.c **** 		Ap_ST32BL_EraseSectorFlag[PageCount] = TRUE;
 438              		.loc 1 488 0
 439 0048 2A55     		strb	r2, [r5, r4]
 490:../LIB_AP/Lib/Ap_ST32BL.c **** 		if( FLASHStatus != FLASH_COMPLETE )
 440              		.loc 1 490 0
 441 004a ECD0     		beq	.L58
 492:../LIB_AP/Lib/Ap_ST32BL.c **** 			FLASH_Lock();
 442              		.loc 1 492 0
 443 004c 0349     		ldr	r1, .L63+8
 444 004e 8847     		blx	r1
 445              	.LVL36:
 493:../LIB_AP/Lib/Ap_ST32BL.c **** 			Ret = FALSE;
 446              		.loc 1 493 0
 447 0050 3046     		mov	r0, r6
 448 0052 E9E7     		b	.L56
 449              	.L64:
 450              		.align	2
 451              	.L63:
 452 0054 00000000 		.word	Ap_ST32BL_EraseSectorFlag
 453 0058 00000000 		.word	FLASH_ErasePage
 454 005c 00000000 		.word	FLASH_Lock
 455              		.cfi_endproc
 456              	.LFE6:
 458              		.section	.text.Ap_ST32BL_WriteFlash,"ax",%progbits
 459              		.align	2
 460              		.global	Ap_ST32BL_WriteFlash
 461              		.thumb
 462              		.thumb_func
 464              	Ap_ST32BL_WriteFlash:
 465              	.LFB7:
 500:../LIB_AP/Lib/Ap_ST32BL.c **** 
 501:../LIB_AP/Lib/Ap_ST32BL.c **** 
 502:../LIB_AP/Lib/Ap_ST32BL.c **** 
 503:../LIB_AP/Lib/Ap_ST32BL.c **** /*---------------------------------------------------------------------------
 504:../LIB_AP/Lib/Ap_ST32BL.c ****      TITLE   : Ap_ST32BL_WriteFlash
 505:../LIB_AP/Lib/Ap_ST32BL.c ****      WORK    : 
 506:../LIB_AP/Lib/Ap_ST32BL.c ****      ARG     : void
 507:../LIB_AP/Lib/Ap_ST32BL.c ****      RET     : void   
 508:../LIB_AP/Lib/Ap_ST32BL.c **** ---------------------------------------------------------------------------*/
 509:../LIB_AP/Lib/Ap_ST32BL.c **** u8 Ap_ST32BL_WriteFlash( u32 Address, u8 *pData, u32 DataSize )
 510:../LIB_AP/Lib/Ap_ST32BL.c **** {
 466              		.loc 1 510 0
 467              		.cfi_startproc
 468              		@ args = 0, pretend = 0, frame = 8
 469              		@ frame_needed = 0, uses_anonymous_args = 0
 470              	.LVL37:
 471 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 472              	.LCFI7:
 473              		.cfi_def_cfa_offset 28
 474              		.cfi_offset 4, -28
 475              		.cfi_offset 5, -24
 476              		.cfi_offset 6, -20
 477              		.cfi_offset 7, -16
 478              		.cfi_offset 8, -12
 479              		.cfi_offset 9, -8
 480              		.cfi_offset 14, -4
 511:../LIB_AP/Lib/Ap_ST32BL.c **** 	u32 StartAddress = Address;
 512:../LIB_AP/Lib/Ap_ST32BL.c **** 	u32 WriteSize;
 513:../LIB_AP/Lib/Ap_ST32BL.c **** 	u32 WriteData;
 514:../LIB_AP/Lib/Ap_ST32BL.c **** 	u32 i;
 515:../LIB_AP/Lib/Ap_ST32BL.c **** 	u32 DataIndex;
 516:../LIB_AP/Lib/Ap_ST32BL.c **** 	u8	Ret = TRUE;
 517:../LIB_AP/Lib/Ap_ST32BL.c **** 	volatile FLASH_Status FLASHStatus;
 518:../LIB_AP/Lib/Ap_ST32BL.c **** 
 519:../LIB_AP/Lib/Ap_ST32BL.c **** 
 520:../LIB_AP/Lib/Ap_ST32BL.c **** 	WriteSize = DataSize / 4;	// 32Bit로 변경 
 481              		.loc 1 520 0
 482 0004 9708     		lsrs	r7, r2, #2
 521:../LIB_AP/Lib/Ap_ST32BL.c **** 
 522:../LIB_AP/Lib/Ap_ST32BL.c **** 	if( (WriteSize%4) > 0 ) WriteSize++;
 483              		.loc 1 522 0
 484 0006 BB07     		lsls	r3, r7, #30
 510:../LIB_AP/Lib/Ap_ST32BL.c **** {
 485              		.loc 1 510 0
 486 0008 83B0     		sub	sp, sp, #12
 487              	.LCFI8:
 488              		.cfi_def_cfa_offset 40
 523:../LIB_AP/Lib/Ap_ST32BL.c **** 
 524:../LIB_AP/Lib/Ap_ST32BL.c **** 
 525:../LIB_AP/Lib/Ap_ST32BL.c **** 	//-- 섹터가 지워졌는지 검사
 526:../LIB_AP/Lib/Ap_ST32BL.c **** 	//
 527:../LIB_AP/Lib/Ap_ST32BL.c **** 	if( Ap_ST32BL_CheckFlashSector(Address) == FALSE )
 489              		.loc 1 527 0
 490 000a 384B     		ldr	r3, .L86
 522:../LIB_AP/Lib/Ap_ST32BL.c **** 	if( (WriteSize%4) > 0 ) WriteSize++;
 491              		.loc 1 522 0
 492 000c 18BF     		it	ne
 493 000e 0137     		addne	r7, r7, #1
 510:../LIB_AP/Lib/Ap_ST32BL.c **** {
 494              		.loc 1 510 0
 495 0010 8046     		mov	r8, r0
 496              	.LVL38:
 497 0012 0C46     		mov	r4, r1
 498              		.loc 1 527 0
 499 0014 9847     		blx	r3
 500              	.LVL39:
 501 0016 0028     		cmp	r0, #0
 502 0018 64D0     		beq	.L70
 503              	.LVL40:
 528:../LIB_AP/Lib/Ap_ST32BL.c **** 	{
 529:../LIB_AP/Lib/Ap_ST32BL.c **** 		return FALSE;
 530:../LIB_AP/Lib/Ap_ST32BL.c **** 	}
 531:../LIB_AP/Lib/Ap_ST32BL.c **** 
 532:../LIB_AP/Lib/Ap_ST32BL.c **** 
 533:../LIB_AP/Lib/Ap_ST32BL.c **** 	DataIndex = 0;
 534:../LIB_AP/Lib/Ap_ST32BL.c **** 
 535:../LIB_AP/Lib/Ap_ST32BL.c **** 	for( i=0; i<WriteSize; i++ )
 504              		.loc 1 535 0 discriminator 1
 505 001a AFB3     		cbz	r7, .L72
 536:../LIB_AP/Lib/Ap_ST32BL.c **** 	{
 537:../LIB_AP/Lib/Ap_ST32BL.c **** 		WriteData  = pData[ DataIndex++ ] << 0;
 538:../LIB_AP/Lib/Ap_ST32BL.c **** 		WriteData |= pData[ DataIndex++ ] << 8;
 506              		.loc 1 538 0
 507 001c 6278     		ldrb	r2, [r4, #1]	@ zero_extendqisi2
 537:../LIB_AP/Lib/Ap_ST32BL.c **** 		WriteData  = pData[ DataIndex++ ] << 0;
 508              		.loc 1 537 0
 509 001e 2578     		ldrb	r5, [r4, #0]	@ zero_extendqisi2
 510              	.LVL41:
 539:../LIB_AP/Lib/Ap_ST32BL.c **** 		WriteData |= pData[ DataIndex++ ] << 16;
 511              		.loc 1 539 0
 512 0020 A078     		ldrb	r0, [r4, #2]	@ zero_extendqisi2
 540:../LIB_AP/Lib/Ap_ST32BL.c **** 		WriteData |= pData[ DataIndex++ ] << 24;
 513              		.loc 1 540 0
 514 0022 E178     		ldrb	r1, [r4, #3]	@ zero_extendqisi2
 538:../LIB_AP/Lib/Ap_ST32BL.c **** 		WriteData |= pData[ DataIndex++ ] << 8;
 515              		.loc 1 538 0
 516 0024 1302     		lsls	r3, r2, #8
 517              	.LVL42:
 518 0026 43EA0042 		orr	r2, r3, r0, lsl #16
 519              	.LVL43:
 539:../LIB_AP/Lib/Ap_ST32BL.c **** 		WriteData |= pData[ DataIndex++ ] << 16;
 520              		.loc 1 539 0
 521 002a 45EA0161 		orr	r1, r5, r1, lsl #24
 522              	.LVL44:
 523 002e C4EB0808 		rsb	r8, r4, r8
 524              	.LVL45:
 525 0032 DFF8BC90 		ldr	r9, .L86+4
 541:../LIB_AP/Lib/Ap_ST32BL.c **** 
 542:../LIB_AP/Lib/Ap_ST32BL.c **** 		FLASHStatus = FLASH_ProgramWord(StartAddress+i*4, WriteData);
 526              		.loc 1 542 0
 527 0036 04EB0800 		add	r0, r4, r8
 528 003a 1143     		orrs	r1, r1, r2
 529              	.LVL46:
 530 003c C847     		blx	r9
 531              	.LVL47:
 532 003e 8DF80700 		strb	r0, [sp, #7]
 533              	.LVL48:
 543:../LIB_AP/Lib/Ap_ST32BL.c **** 
 544:../LIB_AP/Lib/Ap_ST32BL.c **** 		if( FLASHStatus != FLASH_COMPLETE )
 534              		.loc 1 544 0
 535 0042 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 536              	.LVL49:
 537 0046 7D1E     		subs	r5, r7, #1
 538 0048 0428     		cmp	r0, #4
 539 004a 05F00105 		and	r5, r5, #1
 540 004e 49D1     		bne	.L70
 535:../LIB_AP/Lib/Ap_ST32BL.c **** 	for( i=0; i<WriteSize; i++ )
 541              		.loc 1 535 0
 542 0050 0126     		movs	r6, #1
 543              	.LVL50:
 544 0052 0434     		adds	r4, r4, #4
 545              	.LVL51:
 546 0054 BE42     		cmp	r6, r7
 547 0056 17D0     		beq	.L72
 548 0058 65B3     		cbz	r5, .L71
 538:../LIB_AP/Lib/Ap_ST32BL.c **** 		WriteData |= pData[ DataIndex++ ] << 8;
 549              		.loc 1 538 0
 550 005a 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 537:../LIB_AP/Lib/Ap_ST32BL.c **** 		WriteData  = pData[ DataIndex++ ] << 0;
 551              		.loc 1 537 0
 552 005c 2278     		ldrb	r2, [r4, #0]	@ zero_extendqisi2
 539:../LIB_AP/Lib/Ap_ST32BL.c **** 		WriteData |= pData[ DataIndex++ ] << 16;
 553              		.loc 1 539 0
 554 005e A078     		ldrb	r0, [r4, #2]	@ zero_extendqisi2
 555              	.LVL52:
 540:../LIB_AP/Lib/Ap_ST32BL.c **** 		WriteData |= pData[ DataIndex++ ] << 24;
 556              		.loc 1 540 0
 557 0060 E178     		ldrb	r1, [r4, #3]	@ zero_extendqisi2
 538:../LIB_AP/Lib/Ap_ST32BL.c **** 		WriteData |= pData[ DataIndex++ ] << 8;
 558              		.loc 1 538 0
 559 0062 1B02     		lsls	r3, r3, #8
 560 0064 43EA0043 		orr	r3, r3, r0, lsl #16
 539:../LIB_AP/Lib/Ap_ST32BL.c **** 		WriteData |= pData[ DataIndex++ ] << 16;
 561              		.loc 1 539 0
 562 0068 42EA0161 		orr	r1, r2, r1, lsl #24
 542:../LIB_AP/Lib/Ap_ST32BL.c **** 		FLASHStatus = FLASH_ProgramWord(StartAddress+i*4, WriteData);
 563              		.loc 1 542 0
 564 006c 08EB0400 		add	r0, r8, r4
 565 0070 1943     		orrs	r1, r1, r3
 566 0072 C847     		blx	r9
 567              	.LVL53:
 568 0074 8DF80700 		strb	r0, [sp, #7]
 569              	.LVL54:
 570              		.loc 1 544 0
 571 0078 9DF80720 		ldrb	r2, [sp, #7]	@ zero_extendqisi2
 572              	.LVL55:
 573 007c 042A     		cmp	r2, #4
 574 007e 31D1     		bne	.L70
 535:../LIB_AP/Lib/Ap_ST32BL.c **** 	for( i=0; i<WriteSize; i++ )
 575              		.loc 1 535 0
 576 0080 0226     		movs	r6, #2
 577 0082 0434     		adds	r4, r4, #4
 578              	.LVL56:
 579 0084 BE42     		cmp	r6, r7
 580 0086 15D1     		bne	.L71
 581              	.LVL57:
 582              	.L72:
 516:../LIB_AP/Lib/Ap_ST32BL.c **** 	u8	Ret = TRUE;
 583              		.loc 1 516 0
 584 0088 0120     		movs	r0, #1
 585              	.LVL58:
 586 008a 2CE0     		b	.L68
 587              	.LVL59:
 588              	.L85:
 538:../LIB_AP/Lib/Ap_ST32BL.c **** 		WriteData |= pData[ DataIndex++ ] << 8;
 589              		.loc 1 538 0
 590 008c 6379     		ldrb	r3, [r4, #5]	@ zero_extendqisi2
 537:../LIB_AP/Lib/Ap_ST32BL.c **** 		WriteData  = pData[ DataIndex++ ] << 0;
 591              		.loc 1 537 0
 592 008e 2279     		ldrb	r2, [r4, #4]	@ zero_extendqisi2
 540:../LIB_AP/Lib/Ap_ST32BL.c **** 		WriteData |= pData[ DataIndex++ ] << 24;
 593              		.loc 1 540 0
 594 0090 E978     		ldrb	r1, [r5, #3]	@ zero_extendqisi2
 595              	.LVL60:
 539:../LIB_AP/Lib/Ap_ST32BL.c **** 		WriteData |= pData[ DataIndex++ ] << 16;
 596              		.loc 1 539 0
 597 0092 A479     		ldrb	r4, [r4, #6]	@ zero_extendqisi2
 538:../LIB_AP/Lib/Ap_ST32BL.c **** 		WriteData |= pData[ DataIndex++ ] << 8;
 598              		.loc 1 538 0
 599 0094 1B02     		lsls	r3, r3, #8
 600 0096 43EA0444 		orr	r4, r3, r4, lsl #16
 539:../LIB_AP/Lib/Ap_ST32BL.c **** 		WriteData |= pData[ DataIndex++ ] << 16;
 601              		.loc 1 539 0
 602 009a 42EA0161 		orr	r1, r2, r1, lsl #24
 542:../LIB_AP/Lib/Ap_ST32BL.c **** 		FLASHStatus = FLASH_ProgramWord(StartAddress+i*4, WriteData);
 603              		.loc 1 542 0
 604 009e 2143     		orrs	r1, r1, r4
 605 00a0 C847     		blx	r9
 606              	.LVL61:
 607 00a2 8DF80700 		strb	r0, [sp, #7]
 608              	.LVL62:
 609              		.loc 1 544 0
 610 00a6 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 611              	.LVL63:
 612 00aa 2C1D     		adds	r4, r5, #4
 613 00ac 0428     		cmp	r0, #4
 614 00ae 19D1     		bne	.L70
 535:../LIB_AP/Lib/Ap_ST32BL.c **** 	for( i=0; i<WriteSize; i++ )
 615              		.loc 1 535 0
 616 00b0 BE42     		cmp	r6, r7
 617 00b2 E9D0     		beq	.L72
 618              	.L71:
 538:../LIB_AP/Lib/Ap_ST32BL.c **** 		WriteData |= pData[ DataIndex++ ] << 8;
 619              		.loc 1 538 0
 620 00b4 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 537:../LIB_AP/Lib/Ap_ST32BL.c **** 		WriteData  = pData[ DataIndex++ ] << 0;
 621              		.loc 1 537 0
 622 00b6 2278     		ldrb	r2, [r4, #0]	@ zero_extendqisi2
 539:../LIB_AP/Lib/Ap_ST32BL.c **** 		WriteData |= pData[ DataIndex++ ] << 16;
 623              		.loc 1 539 0
 624 00b8 A078     		ldrb	r0, [r4, #2]	@ zero_extendqisi2
 625              	.LVL64:
 540:../LIB_AP/Lib/Ap_ST32BL.c **** 		WriteData |= pData[ DataIndex++ ] << 24;
 626              		.loc 1 540 0
 627 00ba E178     		ldrb	r1, [r4, #3]	@ zero_extendqisi2
 538:../LIB_AP/Lib/Ap_ST32BL.c **** 		WriteData |= pData[ DataIndex++ ] << 8;
 628              		.loc 1 538 0
 629 00bc 1B02     		lsls	r3, r3, #8
 630 00be 43EA0043 		orr	r3, r3, r0, lsl #16
 539:../LIB_AP/Lib/Ap_ST32BL.c **** 		WriteData |= pData[ DataIndex++ ] << 16;
 631              		.loc 1 539 0
 632 00c2 42EA0161 		orr	r1, r2, r1, lsl #24
 542:../LIB_AP/Lib/Ap_ST32BL.c **** 		FLASHStatus = FLASH_ProgramWord(StartAddress+i*4, WriteData);
 633              		.loc 1 542 0
 634 00c6 1943     		orrs	r1, r1, r3
 635 00c8 08EB0400 		add	r0, r8, r4
 636 00cc C847     		blx	r9
 637              	.LVL65:
 638 00ce 0246     		mov	r2, r0
 639 00d0 8DF80720 		strb	r2, [sp, #7]
 640              	.LVL66:
 641              		.loc 1 544 0
 642 00d4 9DF80710 		ldrb	r1, [sp, #7]	@ zero_extendqisi2
 643              	.LVL67:
 644 00d8 251D     		adds	r5, r4, #4
 535:../LIB_AP/Lib/Ap_ST32BL.c **** 	for( i=0; i<WriteSize; i++ )
 645              		.loc 1 535 0
 646 00da 0236     		adds	r6, r6, #2
 647              		.loc 1 544 0
 648 00dc 0429     		cmp	r1, #4
 542:../LIB_AP/Lib/Ap_ST32BL.c **** 		FLASHStatus = FLASH_ProgramWord(StartAddress+i*4, WriteData);
 649              		.loc 1 542 0
 650 00de 08EB0500 		add	r0, r8, r5
 651              		.loc 1 544 0
 652 00e2 D3D0     		beq	.L85
 653              	.LVL68:
 654              	.L70:
 529:../LIB_AP/Lib/Ap_ST32BL.c **** 		return FALSE;
 655              		.loc 1 529 0
 656 00e4 0020     		movs	r0, #0
 657              	.LVL69:
 658              	.L68:
 545:../LIB_AP/Lib/Ap_ST32BL.c **** 		{
 546:../LIB_AP/Lib/Ap_ST32BL.c **** 			Ret = FALSE;
 547:../LIB_AP/Lib/Ap_ST32BL.c **** 			break;
 548:../LIB_AP/Lib/Ap_ST32BL.c **** 		}
 549:../LIB_AP/Lib/Ap_ST32BL.c **** 	}
 550:../LIB_AP/Lib/Ap_ST32BL.c **** 
 551:../LIB_AP/Lib/Ap_ST32BL.c **** 	return Ret;
 552:../LIB_AP/Lib/Ap_ST32BL.c **** }
 659              		.loc 1 552 0
 660 00e6 03B0     		add	sp, sp, #12
 661 00e8 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 662              	.L87:
 663              		.align	2
 664              	.L86:
 665 00ec 00000000 		.word	Ap_ST32BL_CheckFlashSector
 666 00f0 00000000 		.word	FLASH_ProgramWord
 667              		.cfi_endproc
 668              	.LFE7:
 670              		.section	.text.Ap_ST32BL_Main,"ax",%progbits
 671              		.align	2
 672              		.global	Ap_ST32BL_Main
 673              		.thumb
 674              		.thumb_func
 676              	Ap_ST32BL_Main:
 677              	.LFB1:
 117:../LIB_AP/Lib/Ap_ST32BL.c **** {
 678              		.loc 1 117 0
 679              		.cfi_startproc
 680              		@ args = 0, pretend = 0, frame = 336
 681              		@ frame_needed = 0, uses_anonymous_args = 0
 682 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 683              	.LCFI9:
 684              		.cfi_def_cfa_offset 36
 685              		.cfi_offset 4, -36
 686              		.cfi_offset 5, -32
 687              		.cfi_offset 6, -28
 688              		.cfi_offset 7, -24
 689              		.cfi_offset 8, -20
 690              		.cfi_offset 9, -16
 691              		.cfi_offset 10, -12
 692              		.cfi_offset 11, -8
 693              		.cfi_offset 14, -4
 694              	.LBB4:
 695              	.LBB5:
 553:../LIB_AP/Lib/Ap_ST32BL.c **** 
 554:../LIB_AP/Lib/Ap_ST32BL.c **** 
 555:../LIB_AP/Lib/Ap_ST32BL.c **** 
 556:../LIB_AP/Lib/Ap_ST32BL.c **** 
 557:../LIB_AP/Lib/Ap_ST32BL.c **** 
 558:../LIB_AP/Lib/Ap_ST32BL.c **** /*---------------------------------------------------------------------------
 559:../LIB_AP/Lib/Ap_ST32BL.c ****      TITLE   : Ap_ST32BL_JumpToApp
 560:../LIB_AP/Lib/Ap_ST32BL.c ****      WORK    : 
 561:../LIB_AP/Lib/Ap_ST32BL.c ****      ARG     : void
 562:../LIB_AP/Lib/Ap_ST32BL.c ****      RET     : void   
 563:../LIB_AP/Lib/Ap_ST32BL.c **** ---------------------------------------------------------------------------*/
 564:../LIB_AP/Lib/Ap_ST32BL.c **** void Ap_ST32BL_JumpToApp( u32 Address )
 565:../LIB_AP/Lib/Ap_ST32BL.c **** {
 566:../LIB_AP/Lib/Ap_ST32BL.c **** 	pFunction JumpToApp;
 567:../LIB_AP/Lib/Ap_ST32BL.c **** 	u32 	  JumpAddress;
 568:../LIB_AP/Lib/Ap_ST32BL.c **** 	u32 	  RegData;
 569:../LIB_AP/Lib/Ap_ST32BL.c **** 
 570:../LIB_AP/Lib/Ap_ST32BL.c **** 	//JumpToAddress = (pFunction)(HW_ST32BL_FLASH_START_ADDRESS + 4);
 571:../LIB_AP/Lib/Ap_ST32BL.c **** 
 572:../LIB_AP/Lib/Ap_ST32BL.c **** 
 573:../LIB_AP/Lib/Ap_ST32BL.c **** 	JumpAddress =  *(u32 *)(HW_ST32BL_FLASH_START_ADDRESS + 4);
 696              		.loc 1 573 0
 697 0004 43F20403 		movw	r3, #12292
 698              	.LBE5:
 699              	.LBE4:
 117:../LIB_AP/Lib/Ap_ST32BL.c **** {
 700              		.loc 1 117 0
 701 0008 D5B0     		sub	sp, sp, #340
 702              	.LCFI10:
 703              		.cfi_def_cfa_offset 376
 704              	.LBB8:
 705              	.LBB6:
 706              		.loc 1 573 0
 707 000a C0F60003 		movt	r3, 2048
 708 000e 0293     		str	r3, [sp, #8]
 574:../LIB_AP/Lib/Ap_ST32BL.c **** 	
 575:../LIB_AP/Lib/Ap_ST32BL.c **** 
 576:../LIB_AP/Lib/Ap_ST32BL.c **** 	JumpToApp = (pFunction) JumpAddress;
 577:../LIB_AP/Lib/Ap_ST32BL.c **** 
 578:../LIB_AP/Lib/Ap_ST32BL.c **** 
 579:../LIB_AP/Lib/Ap_ST32BL.c **** 	REG_RCC_AHBENR  = 0x00000014;
 709              		.loc 1 579 0
 710 0010 41F21400 		movw	r0, #4116
 580:../LIB_AP/Lib/Ap_ST32BL.c **** 	REG_RCC_APB1ENR = 0x00000000;
 711              		.loc 1 580 0
 712 0014 41F21C01 		movw	r1, #4124
 581:../LIB_AP/Lib/Ap_ST32BL.c **** 	REG_RCC_APB2ENR = 0x00000000;	
 713              		.loc 1 581 0
 714 0018 41F21802 		movw	r2, #4120
 582:../LIB_AP/Lib/Ap_ST32BL.c **** 
 583:../LIB_AP/Lib/Ap_ST32BL.c **** 
 584:../LIB_AP/Lib/Ap_ST32BL.c **** 	RegData = 0xFFFFFFFF;
 585:../LIB_AP/Lib/Ap_ST32BL.c **** 
 586:../LIB_AP/Lib/Ap_ST32BL.c **** 	CLR_BIT(RegData, 17);			// UART2
 587:../LIB_AP/Lib/Ap_ST32BL.c **** 	CLR_BIT(RegData, 18);			// UART3
 588:../LIB_AP/Lib/Ap_ST32BL.c **** 	CLR_BIT(RegData, 19);			// UART4
 589:../LIB_AP/Lib/Ap_ST32BL.c **** 	CLR_BIT(RegData, 20);			// UART5
 590:../LIB_AP/Lib/Ap_ST32BL.c **** 
 591:../LIB_AP/Lib/Ap_ST32BL.c **** 	REG_RCC_APB1RSTR = RegData;
 715              		.loc 1 591 0
 716 001c 41F21006 		movw	r6, #4112
 592:../LIB_AP/Lib/Ap_ST32BL.c **** 
 593:../LIB_AP/Lib/Ap_ST32BL.c **** 
 594:../LIB_AP/Lib/Ap_ST32BL.c **** 	RegData = 0xFFFFFFFF;
 595:../LIB_AP/Lib/Ap_ST32BL.c **** 
 596:../LIB_AP/Lib/Ap_ST32BL.c **** 	CLR_BIT(RegData, 14);			// UART1
 597:../LIB_AP/Lib/Ap_ST32BL.c **** 	
 598:../LIB_AP/Lib/Ap_ST32BL.c **** 	REG_RCC_APB2RSTR = RegData;
 717              		.loc 1 598 0
 718 0020 41F20C03 		movw	r3, #4108
 579:../LIB_AP/Lib/Ap_ST32BL.c **** 	REG_RCC_AHBENR  = 0x00000014;
 719              		.loc 1 579 0
 720 0024 C4F20200 		movt	r0, 16386
 580:../LIB_AP/Lib/Ap_ST32BL.c **** 	REG_RCC_APB1ENR = 0x00000000;
 721              		.loc 1 580 0
 722 0028 C4F20201 		movt	r1, 16386
 581:../LIB_AP/Lib/Ap_ST32BL.c **** 	REG_RCC_APB2ENR = 0x00000000;	
 723              		.loc 1 581 0
 724 002c C4F20202 		movt	r2, 16386
 591:../LIB_AP/Lib/Ap_ST32BL.c **** 	REG_RCC_APB1RSTR = RegData;
 725              		.loc 1 591 0
 726 0030 C4F20206 		movt	r6, 16386
 727              		.loc 1 598 0
 728 0034 C4F20203 		movt	r3, 16386
 729 0038 DFF87881 		ldr	r8, .L126+8
 730 003c 5B4F     		ldr	r7, .L126
 731 003e 5C4D     		ldr	r5, .L126+4
 732 0040 09AC     		add	r4, sp, #36
 579:../LIB_AP/Lib/Ap_ST32BL.c **** 	REG_RCC_AHBENR  = 0x00000014;
 733              		.loc 1 579 0
 734 0042 0390     		str	r0, [sp, #12]
 580:../LIB_AP/Lib/Ap_ST32BL.c **** 	REG_RCC_APB1ENR = 0x00000000;
 735              		.loc 1 580 0
 736 0044 0491     		str	r1, [sp, #16]
 581:../LIB_AP/Lib/Ap_ST32BL.c **** 	REG_RCC_APB2ENR = 0x00000000;	
 737              		.loc 1 581 0
 738 0046 0592     		str	r2, [sp, #20]
 591:../LIB_AP/Lib/Ap_ST32BL.c **** 	REG_RCC_APB1RSTR = RegData;
 739              		.loc 1 591 0
 740 0048 0696     		str	r6, [sp, #24]
 741              		.loc 1 598 0
 742 004a 0793     		str	r3, [sp, #28]
 743              	.L115:
 744              	.LBE6:
 745              	.LBE8:
 133:../LIB_AP/Lib/Ap_ST32BL.c **** 		Cmd = Ap_ST32BL_WaitCmd();
 746              		.loc 1 133 0
 747 004c C047     		blx	r8
 748              	.LVL70:
 141:../LIB_AP/Lib/Ap_ST32BL.c **** 		if( Cmd == STM32_CMD_GET_COMMAND )
 749              		.loc 1 141 0
 750 004e 0028     		cmp	r0, #0
 751 0050 64D0     		beq	.L121
 752              	.L91:
 149:../LIB_AP/Lib/Ap_ST32BL.c **** 		if( Cmd == STM32_CMD_GET_ID )
 753              		.loc 1 149 0
 754 0052 0228     		cmp	r0, #2
 755 0054 00F08F80 		beq	.L122
 158:../LIB_AP/Lib/Ap_ST32BL.c **** 		if( Cmd == STM32_CMD_ERASE_FLASH )
 756              		.loc 1 158 0
 757 0058 4328     		cmp	r0, #67
 758 005a 00F09580 		beq	.L123
 175:../LIB_AP/Lib/Ap_ST32BL.c **** 		if( Cmd == STM32_CMD_WRITE_FLASH )
 759              		.loc 1 175 0
 760 005e 3128     		cmp	r0, #49
 761 0060 62D1     		bne	.L97
 183:../LIB_AP/Lib/Ap_ST32BL.c **** 				Resp[i] = Ap_ST32BL_ReceiveByte();
 762              		.loc 1 183 0
 763 0062 A847     		blx	r5
 764              	.LVL71:
 765 0064 0646     		mov	r6, r0
 766 0066 2070     		strb	r0, [r4, #0]
 767              	.LVL72:
 768 0068 A847     		blx	r5
 769              	.LVL73:
 184:../LIB_AP/Lib/Ap_ST32BL.c **** 				CheckSumCalc ^= Resp[i];	
 770              		.loc 1 184 0
 771 006a 4640     		eors	r6, r6, r0
 772              	.LVL74:
 183:../LIB_AP/Lib/Ap_ST32BL.c **** 				Resp[i] = Ap_ST32BL_ReceiveByte();
 773              		.loc 1 183 0
 774 006c 6070     		strb	r0, [r4, #1]
 775 006e A847     		blx	r5
 776              	.LVL75:
 184:../LIB_AP/Lib/Ap_ST32BL.c **** 				CheckSumCalc ^= Resp[i];	
 777              		.loc 1 184 0
 778 0070 4640     		eors	r6, r6, r0
 779              	.LVL76:
 183:../LIB_AP/Lib/Ap_ST32BL.c **** 				Resp[i] = Ap_ST32BL_ReceiveByte();
 780              		.loc 1 183 0
 781 0072 A070     		strb	r0, [r4, #2]
 782 0074 A847     		blx	r5
 783              	.LVL77:
 184:../LIB_AP/Lib/Ap_ST32BL.c **** 				CheckSumCalc ^= Resp[i];	
 784              		.loc 1 184 0
 785 0076 4640     		eors	r6, r6, r0
 786              	.LVL78:
 183:../LIB_AP/Lib/Ap_ST32BL.c **** 				Resp[i] = Ap_ST32BL_ReceiveByte();
 787              		.loc 1 183 0
 788 0078 E070     		strb	r0, [r4, #3]
 186:../LIB_AP/Lib/Ap_ST32BL.c **** 			CheckSum = Ap_ST32BL_ReceiveByte();
 789              		.loc 1 186 0
 790 007a A847     		blx	r5
 791              	.LVL79:
 188:../LIB_AP/Lib/Ap_ST32BL.c **** 			Address  = Resp[0] << 24;
 792              		.loc 1 188 0
 793 007c 2178     		ldrb	r1, [r4, #0]	@ zero_extendqisi2
 189:../LIB_AP/Lib/Ap_ST32BL.c **** 			Address |= Resp[1] << 16;
 794              		.loc 1 189 0
 795 007e 6278     		ldrb	r2, [r4, #1]	@ zero_extendqisi2
 188:../LIB_AP/Lib/Ap_ST32BL.c **** 			Address  = Resp[0] << 24;
 796              		.loc 1 188 0
 797 0080 0B06     		lsls	r3, r1, #24
 190:../LIB_AP/Lib/Ap_ST32BL.c **** 			Address |= Resp[2] <<  8;
 798              		.loc 1 190 0
 799 0082 94F802B0 		ldrb	fp, [r4, #2]	@ zero_extendqisi2
 189:../LIB_AP/Lib/Ap_ST32BL.c **** 			Address |= Resp[1] << 16;
 800              		.loc 1 189 0
 801 0086 43EA0241 		orr	r1, r3, r2, lsl #16
 191:../LIB_AP/Lib/Ap_ST32BL.c **** 			Address |= Resp[3] <<  0;
 802              		.loc 1 191 0
 803 008a E278     		ldrb	r2, [r4, #3]	@ zero_extendqisi2
 190:../LIB_AP/Lib/Ap_ST32BL.c **** 			Address |= Resp[2] <<  8;
 804              		.loc 1 190 0
 805 008c 41EA0B23 		orr	r3, r1, fp, lsl #8
 806              	.LVL80:
 191:../LIB_AP/Lib/Ap_ST32BL.c **** 			Address |= Resp[3] <<  0;
 807              		.loc 1 191 0
 808 0090 43EA0201 		orr	r1, r3, r2
 199:../LIB_AP/Lib/Ap_ST32BL.c **** 			if( CheckSum == CheckSumCalc )
 809              		.loc 1 199 0
 810 0094 8642     		cmp	r6, r0
 191:../LIB_AP/Lib/Ap_ST32BL.c **** 			Address |= Resp[3] <<  0;
 811              		.loc 1 191 0
 812 0096 0191     		str	r1, [sp, #4]
 813              	.LVL81:
 199:../LIB_AP/Lib/Ap_ST32BL.c **** 			if( CheckSum == CheckSumCalc )
 814              		.loc 1 199 0
 815 0098 00F08480 		beq	.L124
 208:../LIB_AP/Lib/Ap_ST32BL.c **** 				Ap_ST32BL_SendByte(STM32_COMM_NACK);	
 816              		.loc 1 208 0
 817 009c 1F20     		movs	r0, #31
 818              	.LVL82:
 819 009e B847     		blx	r7
 820              	.LVL83:
 821              	.L99:
 218:../LIB_AP/Lib/Ap_ST32BL.c **** 			Length  = Ap_ST32BL_ReceiveByte();
 822              		.loc 1 218 0
 823 00a0 A847     		blx	r5
 824              	.LVL84:
 825 00a2 0646     		mov	r6, r0
 826              	.LVL85:
 228:../LIB_AP/Lib/Ap_ST32BL.c **** 				Resp[i] = Ap_ST32BL_ReceiveByte();
 827              		.loc 1 228 0
 828 00a4 A847     		blx	r5
 829              	.LVL86:
 220:../LIB_AP/Lib/Ap_ST32BL.c **** 			Length++;
 830              		.loc 1 220 0
 831 00a6 06F1010A 		add	sl, r6, #1
 832              	.LVL87:
 229:../LIB_AP/Lib/Ap_ST32BL.c **** 				CheckSumCalc ^= Resp[i];					
 833              		.loc 1 229 0
 834 00aa 86EA0003 		eor	r3, r6, r0
 228:../LIB_AP/Lib/Ap_ST32BL.c **** 				Resp[i] = Ap_ST32BL_ReceiveByte();
 835              		.loc 1 228 0
 836 00ae 2070     		strb	r0, [r4, #0]
 837 00b0 06F00100 		and	r0, r6, #1
 226:../LIB_AP/Lib/Ap_ST32BL.c **** 			for( i=0; i<Length; i++ )
 838              		.loc 1 226 0
 839 00b4 0126     		movs	r6, #1
 840              	.LVL88:
 841 00b6 B245     		cmp	sl, r6
 228:../LIB_AP/Lib/Ap_ST32BL.c **** 				Resp[i] = Ap_ST32BL_ReceiveByte();
 842              		.loc 1 228 0
 843 00b8 3D4A     		ldr	r2, .L126+4
 229:../LIB_AP/Lib/Ap_ST32BL.c **** 				CheckSumCalc ^= Resp[i];					
 844              		.loc 1 229 0
 845 00ba 5FFA83FB 		uxtb	fp, r3
 846              	.LVL89:
 226:../LIB_AP/Lib/Ap_ST32BL.c **** 			for( i=0; i<Length; i++ )
 847              		.loc 1 226 0
 848 00be 18D9     		bls	.L116
 849 00c0 40B1     		cbz	r0, .L100
 228:../LIB_AP/Lib/Ap_ST32BL.c **** 				Resp[i] = Ap_ST32BL_ReceiveByte();
 850              		.loc 1 228 0
 851 00c2 0092     		str	r2, [sp, #0]
 852 00c4 A847     		blx	r5
 853              	.LVL90:
 226:../LIB_AP/Lib/Ap_ST32BL.c **** 			for( i=0; i<Length; i++ )
 854              		.loc 1 226 0
 855 00c6 0226     		movs	r6, #2
 228:../LIB_AP/Lib/Ap_ST32BL.c **** 				Resp[i] = Ap_ST32BL_ReceiveByte();
 856              		.loc 1 228 0
 857 00c8 6070     		strb	r0, [r4, #1]
 226:../LIB_AP/Lib/Ap_ST32BL.c **** 			for( i=0; i<Length; i++ )
 858              		.loc 1 226 0
 859 00ca B245     		cmp	sl, r6
 229:../LIB_AP/Lib/Ap_ST32BL.c **** 				CheckSumCalc ^= Resp[i];					
 860              		.loc 1 229 0
 861 00cc 8BEA000B 		eor	fp, fp, r0
 862              	.LVL91:
 226:../LIB_AP/Lib/Ap_ST32BL.c **** 			for( i=0; i<Length; i++ )
 863              		.loc 1 226 0
 864 00d0 009A     		ldr	r2, [sp, #0]
 865 00d2 0ED9     		bls	.L116
 866              	.L100:
 228:../LIB_AP/Lib/Ap_ST32BL.c **** 				Resp[i] = Ap_ST32BL_ReceiveByte();
 867              		.loc 1 228 0 discriminator 2
 868 00d4 A847     		blx	r5
 869              	.LVL92:
 870 00d6 A055     		strb	r0, [r4, r6]
 229:../LIB_AP/Lib/Ap_ST32BL.c **** 				CheckSumCalc ^= Resp[i];					
 871              		.loc 1 229 0 discriminator 2
 872 00d8 8BEA000B 		eor	fp, fp, r0
 228:../LIB_AP/Lib/Ap_ST32BL.c **** 				Resp[i] = Ap_ST32BL_ReceiveByte();
 873              		.loc 1 228 0 discriminator 2
 874 00dc A847     		blx	r5
 875              	.LVL93:
 226:../LIB_AP/Lib/Ap_ST32BL.c **** 			for( i=0; i<Length; i++ )
 876              		.loc 1 226 0 discriminator 2
 877 00de 06F10109 		add	r9, r6, #1
 878 00e2 0236     		adds	r6, r6, #2
 879 00e4 B245     		cmp	sl, r6
 228:../LIB_AP/Lib/Ap_ST32BL.c **** 				Resp[i] = Ap_ST32BL_ReceiveByte();
 880              		.loc 1 228 0 discriminator 2
 881 00e6 04F80900 		strb	r0, [r4, r9]
 882 00ea 314A     		ldr	r2, .L126+4
 229:../LIB_AP/Lib/Ap_ST32BL.c **** 				CheckSumCalc ^= Resp[i];					
 883              		.loc 1 229 0 discriminator 2
 884 00ec 8BEA000B 		eor	fp, fp, r0
 226:../LIB_AP/Lib/Ap_ST32BL.c **** 			for( i=0; i<Length; i++ )
 885              		.loc 1 226 0 discriminator 2
 886 00f0 F0D8     		bhi	.L100
 887              	.L116:
 231:../LIB_AP/Lib/Ap_ST32BL.c **** 			CheckSum = Ap_ST32BL_ReceiveByte();
 888              		.loc 1 231 0
 889 00f2 9047     		blx	r2
 890              	.LVL94:
 242:../LIB_AP/Lib/Ap_ST32BL.c **** 			Ret = Ap_ST32BL_WriteFlash( Address + HW_ST32BL_FLASH_ADDRESS_OFFSET, Resp, Length );
 891              		.loc 1 242 0
 892 00f4 019B     		ldr	r3, [sp, #4]
 231:../LIB_AP/Lib/Ap_ST32BL.c **** 			CheckSum = Ap_ST32BL_ReceiveByte();
 893              		.loc 1 231 0
 894 00f6 0646     		mov	r6, r0
 895              	.LVL95:
 242:../LIB_AP/Lib/Ap_ST32BL.c **** 			Ret = Ap_ST32BL_WriteFlash( Address + HW_ST32BL_FLASH_ADDRESS_OFFSET, Resp, Length );
 896              		.loc 1 242 0
 897 00f8 03F54050 		add	r0, r3, #12288
 898              	.LVL96:
 899 00fc 40F20003 		movw	r3, #:lower16:Ap_ST32BL_WriteFlash
 900 0100 2146     		mov	r1, r4
 901 0102 5246     		mov	r2, sl
 902 0104 C0F20003 		movt	r3, #:upper16:Ap_ST32BL_WriteFlash
 903 0108 9847     		blx	r3
 904              	.LVL97:
 245:../LIB_AP/Lib/Ap_ST32BL.c **** 			if( CheckSum == CheckSumCalc && Ret == TRUE ) 	
 905              		.loc 1 245 0
 906 010a B345     		cmp	fp, r6
 907 010c 01D1     		bne	.L95
 164:../LIB_AP/Lib/Ap_ST32BL.c **** 			if( Ap_ST32BL_EraseFlash() == TRUE )	Ap_ST32BL_SendByte(STM32_COMM_ACK);
 908              		.loc 1 164 0
 909 010e 0128     		cmp	r0, #1
 910 0110 45D0     		beq	.L125
 911              	.LVL98:
 912              	.L95:
 165:../LIB_AP/Lib/Ap_ST32BL.c **** 			else									Ap_ST32BL_SendByte(STM32_COMM_NACK);
 913              		.loc 1 165 0
 914 0112 1F20     		movs	r0, #31
 915 0114 B847     		blx	r7
 916              	.LVL99:
 133:../LIB_AP/Lib/Ap_ST32BL.c **** 		Cmd = Ap_ST32BL_WaitCmd();
 917              		.loc 1 133 0
 918 0116 C047     		blx	r8
 919              	.LVL100:
 141:../LIB_AP/Lib/Ap_ST32BL.c **** 		if( Cmd == STM32_CMD_GET_COMMAND )
 920              		.loc 1 141 0
 921 0118 0028     		cmp	r0, #0
 922 011a 9AD1     		bne	.L91
 923              	.L121:
 143:../LIB_AP/Lib/Ap_ST32BL.c **** 			Ap_ST32BL_SendByte(0x00);
 924              		.loc 1 143 0
 925 011c B847     		blx	r7
 926              	.LVL101:
 144:../LIB_AP/Lib/Ap_ST32BL.c **** 			Ap_ST32BL_SendByte(0x22);
 927              		.loc 1 144 0
 928 011e 2220     		movs	r0, #34
 929 0120 B847     		blx	r7
 930              	.LVL102:
 145:../LIB_AP/Lib/Ap_ST32BL.c **** 			Ap_ST32BL_SendByte(STM32_COMM_ACK);
 931              		.loc 1 145 0
 932 0122 7920     		movs	r0, #121
 933 0124 B847     		blx	r7
 934              	.LVL103:
 935 0126 91E7     		b	.L115
 936              	.LVL104:
 937              	.L97:
 259:../LIB_AP/Lib/Ap_ST32BL.c **** 		if( Cmd == STM32_CMD_GO )
 938              		.loc 1 259 0
 939 0128 2128     		cmp	r0, #33
 940 012a 8FD1     		bne	.L115
 266:../LIB_AP/Lib/Ap_ST32BL.c **** 				Resp[i] = Ap_ST32BL_ReceiveByte();
 941              		.loc 1 266 0
 942 012c A847     		blx	r5
 943              	.LVL105:
 944 012e 2070     		strb	r0, [r4, #0]
 945              	.LVL106:
 946 0130 A847     		blx	r5
 947              	.LVL107:
 948 0132 6070     		strb	r0, [r4, #1]
 949              	.LVL108:
 950 0134 A847     		blx	r5
 951              	.LVL109:
 952 0136 A070     		strb	r0, [r4, #2]
 953              	.LVL110:
 954 0138 A847     		blx	r5
 955              	.LVL111:
 956 013a E070     		strb	r0, [r4, #3]
 957              	.LVL112:
 269:../LIB_AP/Lib/Ap_ST32BL.c **** 			CheckSum = Ap_ST32BL_ReceiveByte();
 958              		.loc 1 269 0
 959 013c A847     		blx	r5
 960              	.LVL113:
 277:../LIB_AP/Lib/Ap_ST32BL.c **** 			Ap_ST32BL_SendByte(STM32_COMM_ACK);	
 961              		.loc 1 277 0
 962 013e 7920     		movs	r0, #121
 963 0140 B847     		blx	r7
 964              	.LVL114:
 279:../LIB_AP/Lib/Ap_ST32BL.c **** 			Hw_Timer_Delay_ms(100);
 965              		.loc 1 279 0
 966 0142 40F20002 		movw	r2, #:lower16:Hw_Timer_Delay_ms
 967 0146 6420     		movs	r0, #100
 968 0148 C0F20002 		movt	r2, #:upper16:Hw_Timer_Delay_ms
 969 014c 9047     		blx	r2
 970              	.LVL115:
 971              	.LBB9:
 972              	.LBB7:
 576:../LIB_AP/Lib/Ap_ST32BL.c **** 	JumpToApp = (pFunction) JumpAddress;
 973              		.loc 1 576 0
 974 014e 0298     		ldr	r0, [sp, #8]
 579:../LIB_AP/Lib/Ap_ST32BL.c **** 	REG_RCC_AHBENR  = 0x00000014;
 975              		.loc 1 579 0
 976 0150 0399     		ldr	r1, [sp, #12]
 576:../LIB_AP/Lib/Ap_ST32BL.c **** 	JumpToApp = (pFunction) JumpAddress;
 977              		.loc 1 576 0
 978 0152 0268     		ldr	r2, [r0, #0]
 979              	.LVL116:
 579:../LIB_AP/Lib/Ap_ST32BL.c **** 	REG_RCC_AHBENR  = 0x00000014;
 980              		.loc 1 579 0
 981 0154 1423     		movs	r3, #20
 580:../LIB_AP/Lib/Ap_ST32BL.c **** 	REG_RCC_APB1ENR = 0x00000000;
 982              		.loc 1 580 0
 983 0156 0498     		ldr	r0, [sp, #16]
 579:../LIB_AP/Lib/Ap_ST32BL.c **** 	REG_RCC_AHBENR  = 0x00000014;
 984              		.loc 1 579 0
 985 0158 0B60     		str	r3, [r1, #0]
 580:../LIB_AP/Lib/Ap_ST32BL.c **** 	REG_RCC_APB1ENR = 0x00000000;
 986              		.loc 1 580 0
 987 015a 0026     		movs	r6, #0
 581:../LIB_AP/Lib/Ap_ST32BL.c **** 	REG_RCC_APB2ENR = 0x00000000;	
 988              		.loc 1 581 0
 989 015c 059B     		ldr	r3, [sp, #20]
 580:../LIB_AP/Lib/Ap_ST32BL.c **** 	REG_RCC_APB1ENR = 0x00000000;
 990              		.loc 1 580 0
 991 015e 0660     		str	r6, [r0, #0]
 591:../LIB_AP/Lib/Ap_ST32BL.c **** 	REG_RCC_APB1RSTR = RegData;
 992              		.loc 1 591 0
 993 0160 0699     		ldr	r1, [sp, #24]
 994              		.loc 1 598 0
 995 0162 0798     		ldr	r0, [sp, #28]
 581:../LIB_AP/Lib/Ap_ST32BL.c **** 	REG_RCC_APB2ENR = 0x00000000;	
 996              		.loc 1 581 0
 997 0164 1E60     		str	r6, [r3, #0]
 998              	.LVL117:
 591:../LIB_AP/Lib/Ap_ST32BL.c **** 	REG_RCC_APB1RSTR = RegData;
 999              		.loc 1 591 0
 1000 0166 6FF4F016 		mvn	r6, #1966080
 1001              		.loc 1 598 0
 1002 016a 6FF48043 		mvn	r3, #16384
 591:../LIB_AP/Lib/Ap_ST32BL.c **** 	REG_RCC_APB1RSTR = RegData;
 1003              		.loc 1 591 0
 1004 016e 0E60     		str	r6, [r1, #0]
 1005              	.LVL118:
 1006              		.loc 1 598 0
 1007 0170 0360     		str	r3, [r0, #0]
 599:../LIB_AP/Lib/Ap_ST32BL.c **** 
 600:../LIB_AP/Lib/Ap_ST32BL.c **** 
 601:../LIB_AP/Lib/Ap_ST32BL.c **** 	JumpToApp();
 1008              		.loc 1 601 0
 1009 0172 9047     		blx	r2
 1010              	.LVL119:
 1011 0174 6AE7     		b	.L115
 1012              	.LVL120:
 1013              	.L122:
 1014              	.LBE7:
 1015              	.LBE9:
 151:../LIB_AP/Lib/Ap_ST32BL.c **** 			Ap_ST32BL_SendByte(0x01);
 1016              		.loc 1 151 0
 1017 0176 0120     		movs	r0, #1
 1018              	.LVL121:
 1019 0178 B847     		blx	r7
 1020              	.LVL122:
 152:../LIB_AP/Lib/Ap_ST32BL.c **** 			Ap_ST32BL_SendByte(0x04);
 1021              		.loc 1 152 0
 1022 017a 0420     		movs	r0, #4
 1023 017c B847     		blx	r7
 1024              	.LVL123:
 153:../LIB_AP/Lib/Ap_ST32BL.c **** 			Ap_ST32BL_SendByte(0x10);
 1025              		.loc 1 153 0
 1026 017e 1020     		movs	r0, #16
 1027 0180 B847     		blx	r7
 1028              	.LVL124:
 154:../LIB_AP/Lib/Ap_ST32BL.c **** 			Ap_ST32BL_SendByte(STM32_COMM_ACK);			
 1029              		.loc 1 154 0
 1030 0182 7920     		movs	r0, #121
 1031 0184 B847     		blx	r7
 1032              	.LVL125:
 1033 0186 61E7     		b	.L115
 1034              	.LVL126:
 1035              	.L123:
 160:../LIB_AP/Lib/Ap_ST32BL.c **** 			Resp[0] = Ap_ST32BL_ReceiveByte();
 1036              		.loc 1 160 0
 1037 0188 A847     		blx	r5
 1038              	.LVL127:
 1039 018a 2070     		strb	r0, [r4, #0]
 161:../LIB_AP/Lib/Ap_ST32BL.c **** 			Resp[1] = Ap_ST32BL_ReceiveByte();
 1040              		.loc 1 161 0
 1041 018c A847     		blx	r5
 1042              	.LVL128:
 164:../LIB_AP/Lib/Ap_ST32BL.c **** 			if( Ap_ST32BL_EraseFlash() == TRUE )	Ap_ST32BL_SendByte(STM32_COMM_ACK);
 1043              		.loc 1 164 0
 1044 018e 40F20001 		movw	r1, #:lower16:Ap_ST32BL_EraseFlash
 1045 0192 C0F20001 		movt	r1, #:upper16:Ap_ST32BL_EraseFlash
 161:../LIB_AP/Lib/Ap_ST32BL.c **** 			Resp[1] = Ap_ST32BL_ReceiveByte();
 1046              		.loc 1 161 0
 1047 0196 6070     		strb	r0, [r4, #1]
 164:../LIB_AP/Lib/Ap_ST32BL.c **** 			if( Ap_ST32BL_EraseFlash() == TRUE )	Ap_ST32BL_SendByte(STM32_COMM_ACK);
 1048              		.loc 1 164 0
 1049 0198 8847     		blx	r1
 1050              	.LVL129:
 1051 019a 0128     		cmp	r0, #1
 1052 019c B9D1     		bne	.L95
 1053              	.L125:
 164:../LIB_AP/Lib/Ap_ST32BL.c **** 			if( Ap_ST32BL_EraseFlash() == TRUE )	Ap_ST32BL_SendByte(STM32_COMM_ACK);
 1054              		.loc 1 164 0 is_stmt 0 discriminator 1
 1055 019e 7920     		movs	r0, #121
 1056 01a0 B847     		blx	r7
 1057              	.LVL130:
 1058 01a2 53E7     		b	.L115
 1059              	.LVL131:
 1060              	.L124:
 201:../LIB_AP/Lib/Ap_ST32BL.c **** 				Ap_ST32BL_SendByte(STM32_COMM_ACK);
 1061              		.loc 1 201 0 is_stmt 1
 1062 01a4 7920     		movs	r0, #121
 1063              	.LVL132:
 1064 01a6 B847     		blx	r7
 1065              	.LVL133:
 1066 01a8 7AE7     		b	.L99
 1067              	.L127:
 1068 01aa 00BF     		.align	2
 1069              	.L126:
 1070 01ac 00000000 		.word	Ap_ST32BL_SendByte
 1071 01b0 00000000 		.word	Ap_ST32BL_ReceiveByte
 1072 01b4 00000000 		.word	Ap_ST32BL_WaitCmd
 1073              		.cfi_endproc
 1074              	.LFE1:
 1076              		.section	.text.Ap_ST32BL_JumpToApp,"ax",%progbits
 1077              		.align	2
 1078              		.global	Ap_ST32BL_JumpToApp
 1079              		.thumb
 1080              		.thumb_func
 1082              	Ap_ST32BL_JumpToApp:
 1083              	.LFB8:
 565:../LIB_AP/Lib/Ap_ST32BL.c **** {
 1084              		.loc 1 565 0
 1085              		.cfi_startproc
 1086              		@ args = 0, pretend = 0, frame = 0
 1087              		@ frame_needed = 0, uses_anonymous_args = 0
 1088              	.LVL134:
 1089 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1090              	.LCFI11:
 1091              		.cfi_def_cfa_offset 24
 1092              		.cfi_offset 3, -24
 1093              		.cfi_offset 4, -20
 1094              		.cfi_offset 5, -16
 1095              		.cfi_offset 6, -12
 1096              		.cfi_offset 7, -8
 1097              		.cfi_offset 14, -4
 581:../LIB_AP/Lib/Ap_ST32BL.c **** 	REG_RCC_APB2ENR = 0x00000000;	
 1098              		.loc 1 581 0
 1099 0002 41F21801 		movw	r1, #4120
 573:../LIB_AP/Lib/Ap_ST32BL.c **** 	JumpAddress =  *(u32 *)(HW_ST32BL_FLASH_START_ADDRESS + 4);
 1100              		.loc 1 573 0
 1101 0006 43F20406 		movw	r6, #12292
 579:../LIB_AP/Lib/Ap_ST32BL.c **** 	REG_RCC_AHBENR  = 0x00000014;
 1102              		.loc 1 579 0
 1103 000a 41F21405 		movw	r5, #4116
 580:../LIB_AP/Lib/Ap_ST32BL.c **** 	REG_RCC_APB1ENR = 0x00000000;
 1104              		.loc 1 580 0
 1105 000e 41F21C04 		movw	r4, #4124
 1106 0012 0020     		movs	r0, #0
 1107              	.LVL135:
 579:../LIB_AP/Lib/Ap_ST32BL.c **** 	REG_RCC_AHBENR  = 0x00000014;
 1108              		.loc 1 579 0
 1109 0014 C4F20205 		movt	r5, 16386
 580:../LIB_AP/Lib/Ap_ST32BL.c **** 	REG_RCC_APB1ENR = 0x00000000;
 1110              		.loc 1 580 0
 1111 0018 C4F20204 		movt	r4, 16386
 581:../LIB_AP/Lib/Ap_ST32BL.c **** 	REG_RCC_APB2ENR = 0x00000000;	
 1112              		.loc 1 581 0
 1113 001c C4F20201 		movt	r1, 16386
 579:../LIB_AP/Lib/Ap_ST32BL.c **** 	REG_RCC_AHBENR  = 0x00000014;
 1114              		.loc 1 579 0
 1115 0020 1427     		movs	r7, #20
 591:../LIB_AP/Lib/Ap_ST32BL.c **** 	REG_RCC_APB1RSTR = RegData;
 1116              		.loc 1 591 0
 1117 0022 41F21002 		movw	r2, #4112
 573:../LIB_AP/Lib/Ap_ST32BL.c **** 	JumpAddress =  *(u32 *)(HW_ST32BL_FLASH_START_ADDRESS + 4);
 1118              		.loc 1 573 0
 1119 0026 C0F60006 		movt	r6, 2048
 576:../LIB_AP/Lib/Ap_ST32BL.c **** 	JumpToApp = (pFunction) JumpAddress;
 1120              		.loc 1 576 0
 1121 002a 3668     		ldr	r6, [r6, #0]
 1122              	.LVL136:
 591:../LIB_AP/Lib/Ap_ST32BL.c **** 	REG_RCC_APB1RSTR = RegData;
 1123              		.loc 1 591 0
 1124 002c C4F20202 		movt	r2, 16386
 579:../LIB_AP/Lib/Ap_ST32BL.c **** 	REG_RCC_AHBENR  = 0x00000014;
 1125              		.loc 1 579 0
 1126 0030 2F60     		str	r7, [r5, #0]
 598:../LIB_AP/Lib/Ap_ST32BL.c **** 	REG_RCC_APB2RSTR = RegData;
 1127              		.loc 1 598 0
 1128 0032 41F20C03 		movw	r3, #4108
 580:../LIB_AP/Lib/Ap_ST32BL.c **** 	REG_RCC_APB1ENR = 0x00000000;
 1129              		.loc 1 580 0
 1130 0036 2060     		str	r0, [r4, #0]
 581:../LIB_AP/Lib/Ap_ST32BL.c **** 	REG_RCC_APB2ENR = 0x00000000;	
 1131              		.loc 1 581 0
 1132 0038 0860     		str	r0, [r1, #0]
 1133              	.LVL137:
 591:../LIB_AP/Lib/Ap_ST32BL.c **** 	REG_RCC_APB1RSTR = RegData;
 1134              		.loc 1 591 0
 1135 003a 6FF4F011 		mvn	r1, #1966080
 1136 003e 1160     		str	r1, [r2, #0]
 1137              	.LVL138:
 598:../LIB_AP/Lib/Ap_ST32BL.c **** 	REG_RCC_APB2RSTR = RegData;
 1138              		.loc 1 598 0
 1139 0040 C4F20203 		movt	r3, 16386
 1140 0044 6FF48042 		mvn	r2, #16384
 1141 0048 1A60     		str	r2, [r3, #0]
 1142              		.loc 1 601 0
 1143 004a B047     		blx	r6
 1144              	.LVL139:
 1145 004c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1146              		.cfi_endproc
 1147              	.LFE8:
 1149              		.comm	Ap_ST32BL_EraseSectorFlag,128,4
 1150              		.comm	Ap_ST32BL_UartPort,1,1
 1151              		.comm	Ap_ST32BL_RunBoot,1,1
 1152 004e 00BF     		.text
 1153              	.Letext0:
 1154              		.file 2 "../LIB_HW/Core/Hw_Define.h"
 1155              		.file 3 "../LIB_AP/Lib/Ap_ST32BL.h"
 1156              		.file 4 "../LIB_HW/Driver/LIB_ST32/stm32f10x_flash.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 Ap_ST32BL.c
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//cciL8bir.s:19     .text.Ap_ST32BL_Init:0000000000000000 $t
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//cciL8bir.s:24     .text.Ap_ST32BL_Init:0000000000000000 Ap_ST32BL_Init
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//cciL8bir.s:101    .text.Ap_ST32BL_Init:0000000000000064 $d
                            *COM*:0000000000000001 Ap_ST32BL_RunBoot
                            *COM*:0000000000000080 Ap_ST32BL_EraseSectorFlag
                            *COM*:0000000000000001 Ap_ST32BL_UartPort
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//cciL8bir.s:108    .text.Ap_ST32BL_SendByte:0000000000000000 $t
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//cciL8bir.s:113    .text.Ap_ST32BL_SendByte:0000000000000000 Ap_ST32BL_SendByte
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//cciL8bir.s:142    .text.Ap_ST32BL_ReceiveByte:0000000000000000 $t
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//cciL8bir.s:147    .text.Ap_ST32BL_ReceiveByte:0000000000000000 Ap_ST32BL_ReceiveByte
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//cciL8bir.s:172    .text.Ap_ST32BL_WaitCmd:0000000000000000 $t
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//cciL8bir.s:177    .text.Ap_ST32BL_WaitCmd:0000000000000000 Ap_ST32BL_WaitCmd
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//cciL8bir.s:257    .text.Ap_ST32BL_WaitCmd:0000000000000050 $d
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//cciL8bir.s:263    .text.Ap_ST32BL_EraseFlash:0000000000000000 $t
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//cciL8bir.s:268    .text.Ap_ST32BL_EraseFlash:0000000000000000 Ap_ST32BL_EraseFlash
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//cciL8bir.s:349    .text.Ap_ST32BL_EraseFlash:0000000000000050 $d
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//cciL8bir.s:359    .text.Ap_ST32BL_CheckFlashSector:0000000000000000 $t
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//cciL8bir.s:364    .text.Ap_ST32BL_CheckFlashSector:0000000000000000 Ap_ST32BL_CheckFlashSector
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//cciL8bir.s:452    .text.Ap_ST32BL_CheckFlashSector:0000000000000054 $d
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//cciL8bir.s:459    .text.Ap_ST32BL_WriteFlash:0000000000000000 $t
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//cciL8bir.s:464    .text.Ap_ST32BL_WriteFlash:0000000000000000 Ap_ST32BL_WriteFlash
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//cciL8bir.s:665    .text.Ap_ST32BL_WriteFlash:00000000000000ec $d
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//cciL8bir.s:671    .text.Ap_ST32BL_Main:0000000000000000 $t
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//cciL8bir.s:676    .text.Ap_ST32BL_Main:0000000000000000 Ap_ST32BL_Main
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//cciL8bir.s:1070   .text.Ap_ST32BL_Main:00000000000001ac $d
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//cciL8bir.s:1077   .text.Ap_ST32BL_JumpToApp:0000000000000000 $t
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//cciL8bir.s:1082   .text.Ap_ST32BL_JumpToApp:0000000000000000 Ap_ST32BL_JumpToApp
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
Hw_Uart_Putch
Hw_Uart_Getch
FLASH_Unlock
FLASH_ClearFlag
FLASH_ErasePage
FLASH_Lock
FLASH_ProgramWord
Hw_Timer_Delay_ms
