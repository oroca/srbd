
main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002f08  08000000  08000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000e4  20000000  08002f08  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00001160  20000200  08003200  00010200  2**9
                  ALLOC
  3 ._usrstack    00000100  20001360  08004360  00010200  2**0
                  ALLOC
  4 .debug_info   00006b71  00000000  00000000  000100e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000242b  00000000  00000000  00016c55  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_loc    000047a3  00000000  00000000  00019080  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000930  00000000  00000000  0001d823  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000ba0  00000000  00000000  0001e153  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000028d6  00000000  00000000  0001ecf3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000022f6  00000000  00000000  000215c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      00000070  00000000  00000000  000238bf  2**0
                  CONTENTS, READONLY
 12 .ARM.attributes 00000033  00000000  00000000  0002392f  2**0
                  CONTENTS, READONLY
 13 .debug_frame  00001530  00000000  00000000  00023964  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000000 <g_pfnVectors>:
 8000000:	00 50 00 20 25 05 00 08                             .P. %...

08000008 <main>:
     ARG     : 	void
     RET     : 	
     			int
---------------------------------------------------------------------------*/
int main(void)
{
 8000008:	b5f0      	push	{r4, r5, r6, r7, lr}
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Main_Init( void )
{
	Hw_Init();
 800000a:	4b20      	ldr	r3, [pc, #128]	; (800008c <main+0x84>)
     ARG     : 	void
     RET     : 	
     			int
---------------------------------------------------------------------------*/
int main(void)
{
 800000c:	b083      	sub	sp, #12
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Main_Init( void )
{
	Hw_Init();
 800000e:	4798      	blx	r3
	Ap_Init();
 8000010:	481f      	ldr	r0, [pc, #124]	; (8000090 <main+0x88>)
 8000012:	4780      	blx	r0


	Main_Init();


	if( Ap_ST32BL_RunBoot == TRUE )
 8000014:	491f      	ldr	r1, [pc, #124]	; (8000094 <main+0x8c>)
 8000016:	780a      	ldrb	r2, [r1, #0]
 8000018:	2a01      	cmp	r2, #1
 800001a:	d005      	beq.n	8000028 <main+0x20>
		#endif
		Ap_ST32BL_Main();
	}
	else
	{		
		Ap_ST32BL_JumpToApp(0);
 800001c:	2000      	movs	r0, #0
 800001e:	4b1e      	ldr	r3, [pc, #120]	; (8000098 <main+0x90>)
 8000020:	4798      	blx	r3
	}
	#endif

    
    return 0;
}
 8000022:	2000      	movs	r0, #0
 8000024:	b003      	add	sp, #12
 8000026:	bdf0      	pop	{r4, r5, r6, r7, pc}


	if( Ap_ST32BL_RunBoot == TRUE )
	{
		//-- 하드웨어 초기화
		Hw_Uart_Init();
 8000028:	4c1c      	ldr	r4, [pc, #112]	; (800009c <main+0x94>)
		Hw_Timer_Init();
 800002a:	4d1d      	ldr	r5, [pc, #116]	; (80000a0 <main+0x98>)
		Hw_VCom_Init();
 800002c:	4e1d      	ldr	r6, [pc, #116]	; (80000a4 <main+0x9c>)


	if( Ap_ST32BL_RunBoot == TRUE )
	{
		//-- 하드웨어 초기화
		Hw_Uart_Init();
 800002e:	47a0      	blx	r4
				}
			}

			if( HW_UART_Q_VAILD(HW_UART_COM1) > 0 )
			{
				Hw_Uart_Q_Pop( HW_UART_COM1, &Uart_GetData );
 8000030:	4f1d      	ldr	r7, [pc, #116]	; (80000a8 <main+0xa0>)

	if( Ap_ST32BL_RunBoot == TRUE )
	{
		//-- 하드웨어 초기화
		Hw_Uart_Init();
		Hw_Timer_Init();
 8000032:	47a8      	blx	r5
 8000034:	4c1d      	ldr	r4, [pc, #116]	; (80000ac <main+0xa4>)
		Hw_VCom_Init();
 8000036:	47b0      	blx	r6
					Ap_ST32BL_SendByte(STM32_COMM_ACK);
					break;
				}
			}

			if( HW_UART_Q_VAILD(HW_UART_COM1) > 0 )
 8000038:	4d1d      	ldr	r5, [pc, #116]	; (80000b0 <main+0xa8>)
		#if 1
		while(1)
		{
			if( HW_VCOM_Q_VAILD(0) > 0 )
			{
				Hw_VCom_Q_Pop( 0, &Uart_GetData );
 800003a:	4e1e      	ldr	r6, [pc, #120]	; (80000b4 <main+0xac>)
		//-- 먼저 명령을 보낸 포트로 다운로드 시작 
		//
		#if 1
		while(1)
		{
			if( HW_VCOM_Q_VAILD(0) > 0 )
 800003c:	2000      	movs	r0, #0
 800003e:	47a0      	blx	r4
			{
				Hw_VCom_Q_Pop( 0, &Uart_GetData );
 8000040:	f10d 0107 	add.w	r1, sp, #7
		//-- 먼저 명령을 보낸 포트로 다운로드 시작 
		//
		#if 1
		while(1)
		{
			if( HW_VCOM_Q_VAILD(0) > 0 )
 8000044:	b128      	cbz	r0, 8000052 <main+0x4a>
			{
				Hw_VCom_Q_Pop( 0, &Uart_GetData );
 8000046:	2000      	movs	r0, #0
 8000048:	47b0      	blx	r6

				if( Uart_GetData == STM32_CMD_INIT )
 800004a:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800004e:	287f      	cmp	r0, #127	; 0x7f
 8000050:	d012      	beq.n	8000078 <main+0x70>
					Ap_ST32BL_SendByte(STM32_COMM_ACK);
					break;
				}
			}

			if( HW_UART_Q_VAILD(HW_UART_COM1) > 0 )
 8000052:	2000      	movs	r0, #0
 8000054:	47a8      	blx	r5
 8000056:	2800      	cmp	r0, #0
 8000058:	ddf0      	ble.n	800003c <main+0x34>
			{
				Hw_Uart_Q_Pop( HW_UART_COM1, &Uart_GetData );
 800005a:	2000      	movs	r0, #0
 800005c:	f10d 0107 	add.w	r1, sp, #7
 8000060:	47b8      	blx	r7

				if( Uart_GetData == STM32_CMD_INIT )
 8000062:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8000066:	297f      	cmp	r1, #127	; 0x7f
 8000068:	d1e8      	bne.n	800003c <main+0x34>
				{
					Ap_ST32BL_UartPort = HW_UART_COM1;
 800006a:	4b13      	ldr	r3, [pc, #76]	; (80000b8 <main+0xb0>)
 800006c:	2200      	movs	r2, #0
					Ap_ST32BL_SendByte(STM32_COMM_ACK);
 800006e:	2079      	movs	r0, #121	; 0x79
 8000070:	4912      	ldr	r1, [pc, #72]	; (80000bc <main+0xb4>)
			{
				Hw_Uart_Q_Pop( HW_UART_COM1, &Uart_GetData );

				if( Uart_GetData == STM32_CMD_INIT )
				{
					Ap_ST32BL_UartPort = HW_UART_COM1;
 8000072:	701a      	strb	r2, [r3, #0]
					Ap_ST32BL_SendByte(STM32_COMM_ACK);
 8000074:	4788      	blx	r1
					break;
 8000076:	e005      	b.n	8000084 <main+0x7c>
			{
				Hw_VCom_Q_Pop( 0, &Uart_GetData );

				if( Uart_GetData == STM32_CMD_INIT )
				{
					Ap_ST32BL_UartPort = HW_UART_VCOM;
 8000078:	4b0f      	ldr	r3, [pc, #60]	; (80000b8 <main+0xb0>)
 800007a:	2205      	movs	r2, #5
					Ap_ST32BL_SendByte(STM32_COMM_ACK);
 800007c:	2079      	movs	r0, #121	; 0x79
 800007e:	490f      	ldr	r1, [pc, #60]	; (80000bc <main+0xb4>)
			{
				Hw_VCom_Q_Pop( 0, &Uart_GetData );

				if( Uart_GetData == STM32_CMD_INIT )
				{
					Ap_ST32BL_UartPort = HW_UART_VCOM;
 8000080:	701a      	strb	r2, [r3, #0]
					Ap_ST32BL_SendByte(STM32_COMM_ACK);
 8000082:	4788      	blx	r1
					break;
				}
			}	
		}
		#endif
		Ap_ST32BL_Main();
 8000084:	480e      	ldr	r0, [pc, #56]	; (80000c0 <main+0xb8>)
 8000086:	4780      	blx	r0
 8000088:	e7cb      	b.n	8000022 <main+0x1a>
 800008a:	bf00      	nop
 800008c:	080005f1 	.word	0x080005f1
 8000090:	080000c5 	.word	0x080000c5
 8000094:	200002e1 	.word	0x200002e1
 8000098:	0800038d 	.word	0x0800038d
 800009c:	080008b1 	.word	0x080008b1
 80000a0:	08000a81 	.word	0x08000a81
 80000a4:	08000f6d 	.word	0x08000f6d
 80000a8:	08000edd 	.word	0x08000edd
 80000ac:	0800100d 	.word	0x0800100d
 80000b0:	08000e35 	.word	0x08000e35
 80000b4:	080010cd 	.word	0x080010cd
 80000b8:	200002e0 	.word	0x200002e0
 80000bc:	08000145 	.word	0x08000145
 80000c0:	080003b1 	.word	0x080003b1

080000c4 <Ap_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Ap_Init( void )
{
 80000c4:	b508      	push	{r3, lr}
	Ap_ST32BL_Init();
 80000c6:	f240 03d5 	movw	r3, #213	; 0xd5
 80000ca:	f6c0 0300 	movt	r3, #2048	; 0x800
 80000ce:	4798      	blx	r3
 80000d0:	bd08      	pop	{r3, pc}
 80000d2:	bf00      	nop

080000d4 <Ap_ST32BL_Init>:
void Ap_ST32BL_Init( void )
{
	u32 i;


	REG_GPIOB_CRL &= ~(0x0F << (0));	// Clear
 80000d4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80000d8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80000dc:	6819      	ldr	r1, [r3, #0]
	REG_GPIOB_CRL |=  (0x00 << (0));	// MODE, PB.0 Input Mode
	REG_GPIOB_CRL |=  (0x02 << (2));	// CNF,  PB.0 input	pull-up/pull-down
		
	CLR_BIT( REG_GPIOB_ODR, 0 );
 80000de:	f640 420c 	movw	r2, #3084	; 0xc0c
void Ap_ST32BL_Init( void )
{
	u32 i;


	REG_GPIOB_CRL &= ~(0x0F << (0));	// Clear
 80000e2:	f021 000f 	bic.w	r0, r1, #15
 80000e6:	6018      	str	r0, [r3, #0]
	REG_GPIOB_CRL |=  (0x00 << (0));	// MODE, PB.0 Input Mode
 80000e8:	6819      	ldr	r1, [r3, #0]
	REG_GPIOB_CRL |=  (0x02 << (2));	// CNF,  PB.0 input	pull-up/pull-down
		
	CLR_BIT( REG_GPIOB_ODR, 0 );
 80000ea:	f2c4 0201 	movt	r2, #16385	; 0x4001
{
	u32 i;


	REG_GPIOB_CRL &= ~(0x0F << (0));	// Clear
	REG_GPIOB_CRL |=  (0x00 << (0));	// MODE, PB.0 Input Mode
 80000ee:	6019      	str	r1, [r3, #0]
	REG_GPIOB_CRL |=  (0x02 << (2));	// CNF,  PB.0 input	pull-up/pull-down
 80000f0:	6818      	ldr	r0, [r3, #0]
		
	CLR_BIT( REG_GPIOB_ODR, 0 );


	if( IS_SET_BIT(REG_GPIOB_IDR, 0) )
 80000f2:	f640 4108 	movw	r1, #3080	; 0xc08
	u32 i;


	REG_GPIOB_CRL &= ~(0x0F << (0));	// Clear
	REG_GPIOB_CRL |=  (0x00 << (0));	// MODE, PB.0 Input Mode
	REG_GPIOB_CRL |=  (0x02 << (2));	// CNF,  PB.0 input	pull-up/pull-down
 80000f6:	f040 0008 	orr.w	r0, r0, #8
 80000fa:	6018      	str	r0, [r3, #0]
		
	CLR_BIT( REG_GPIOB_ODR, 0 );
 80000fc:	6813      	ldr	r3, [r2, #0]


	if( IS_SET_BIT(REG_GPIOB_IDR, 0) )
 80000fe:	f2c4 0101 	movt	r1, #16385	; 0x4001

	REG_GPIOB_CRL &= ~(0x0F << (0));	// Clear
	REG_GPIOB_CRL |=  (0x00 << (0));	// MODE, PB.0 Input Mode
	REG_GPIOB_CRL |=  (0x02 << (2));	// CNF,  PB.0 input	pull-up/pull-down
		
	CLR_BIT( REG_GPIOB_ODR, 0 );
 8000102:	f023 0001 	bic.w	r0, r3, #1
 8000106:	6010      	str	r0, [r2, #0]


	if( IS_SET_BIT(REG_GPIOB_IDR, 0) )
 8000108:	680a      	ldr	r2, [r1, #0]
 800010a:	f012 0101 	ands.w	r1, r2, #1
 800010e:	d010      	beq.n	8000132 <Ap_ST32BL_Init+0x5e>
	{
		Ap_ST32BL_RunBoot = TRUE;
 8000110:	4a09      	ldr	r2, [pc, #36]	; (8000138 <Ap_ST32BL_Init+0x64>)
 8000112:	2001      	movs	r0, #1
 8000114:	7010      	strb	r0, [r2, #0]
 8000116:	4b09      	ldr	r3, [pc, #36]	; (800013c <Ap_ST32BL_Init+0x68>)
		Ap_ST32BL_RunBoot = FALSE;
	}

	for( i=0; i<128; i++ )
	{
		Ap_ST32BL_EraseSectorFlag[i] = FALSE;
 8000118:	2100      	movs	r1, #0
     TITLE   : Ap_ST32BL_Init
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_ST32BL_Init( void )
 800011a:	f103 0080 	add.w	r0, r3, #128	; 0x80
 800011e:	1c5a      	adds	r2, r3, #1
		Ap_ST32BL_RunBoot = FALSE;
	}

	for( i=0; i<128; i++ )
	{
		Ap_ST32BL_EraseSectorFlag[i] = FALSE;
 8000120:	7059      	strb	r1, [r3, #1]
 8000122:	3302      	adds	r3, #2
	else
	{
		Ap_ST32BL_RunBoot = FALSE;
	}

	for( i=0; i<128; i++ )
 8000124:	4283      	cmp	r3, r0
	{
		Ap_ST32BL_EraseSectorFlag[i] = FALSE;
 8000126:	7051      	strb	r1, [r2, #1]
	else
	{
		Ap_ST32BL_RunBoot = FALSE;
	}

	for( i=0; i<128; i++ )
 8000128:	d1f9      	bne.n	800011e <Ap_ST32BL_Init+0x4a>
	{
		Ap_ST32BL_EraseSectorFlag[i] = FALSE;
	}

	Ap_ST32BL_UartPort = HW_UART_COM1;	
 800012a:	4805      	ldr	r0, [pc, #20]	; (8000140 <Ap_ST32BL_Init+0x6c>)
 800012c:	2100      	movs	r1, #0
 800012e:	7001      	strb	r1, [r0, #0]
 8000130:	4770      	bx	lr
	{
		Ap_ST32BL_RunBoot = TRUE;
	}
	else
	{
		Ap_ST32BL_RunBoot = FALSE;
 8000132:	4b01      	ldr	r3, [pc, #4]	; (8000138 <Ap_ST32BL_Init+0x64>)
 8000134:	7019      	strb	r1, [r3, #0]
 8000136:	e7ee      	b.n	8000116 <Ap_ST32BL_Init+0x42>
 8000138:	200002e1 	.word	0x200002e1
 800013c:	200002e3 	.word	0x200002e3
 8000140:	200002e0 	.word	0x200002e0

08000144 <Ap_ST32BL_SendByte>:
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_ST32BL_SendByte( u8 ByteData )
{
 8000144:	b508      	push	{r3, lr}
	Hw_Uart_Putch( Ap_ST32BL_UartPort, ByteData );
 8000146:	f240 22e0 	movw	r2, #736	; 0x2e0
 800014a:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800014e:	f640 1341 	movw	r3, #2369	; 0x941
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_ST32BL_SendByte( u8 ByteData )
{
 8000152:	4601      	mov	r1, r0
	Hw_Uart_Putch( Ap_ST32BL_UartPort, ByteData );
 8000154:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000158:	7810      	ldrb	r0, [r2, #0]
 800015a:	4798      	blx	r3
 800015c:	bd08      	pop	{r3, pc}
 800015e:	bf00      	nop

08000160 <Ap_ST32BL_ReceiveByte>:
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u8 Ap_ST32BL_ReceiveByte( void )
{
 8000160:	b508      	push	{r3, lr}
	Hw_Uart_Getch( Ap_ST32BL_UartPort );
 8000162:	f240 22e0 	movw	r2, #736	; 0x2e0
 8000166:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800016a:	f640 1301 	movw	r3, #2305	; 0x901
 800016e:	7810      	ldrb	r0, [r2, #0]
 8000170:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000174:	4798      	blx	r3
}
 8000176:	bd08      	pop	{r3, pc}

08000178 <Ap_ST32BL_WaitCmd>:
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u8 Ap_ST32BL_WaitCmd( void )
{
 8000178:	b538      	push	{r3, r4, r5, lr}
	u8 Ch;
	u8 Cmd = 0xFF;
	u8 CmdC;

	Cmd = Ap_ST32BL_ReceiveByte();
 800017a:	4d13      	ldr	r5, [pc, #76]	; (80001c8 <Ap_ST32BL_WaitCmd+0x50>)
 800017c:	47a8      	blx	r5

	switch( Cmd )
 800017e:	2831      	cmp	r0, #49	; 0x31
{
	u8 Ch;
	u8 Cmd = 0xFF;
	u8 CmdC;

	Cmd = Ap_ST32BL_ReceiveByte();
 8000180:	4604      	mov	r4, r0

	switch( Cmd )
 8000182:	d007      	beq.n	8000194 <Ap_ST32BL_WaitCmd+0x1c>
 8000184:	d90c      	bls.n	80001a0 <Ap_ST32BL_WaitCmd+0x28>
 8000186:	2873      	cmp	r0, #115	; 0x73
 8000188:	d004      	beq.n	8000194 <Ap_ST32BL_WaitCmd+0x1c>
 800018a:	d911      	bls.n	80001b0 <Ap_ST32BL_WaitCmd+0x38>
 800018c:	287f      	cmp	r0, #127	; 0x7f
 800018e:	d002      	beq.n	8000196 <Ap_ST32BL_WaitCmd+0x1e>
 8000190:	28ff      	cmp	r0, #255	; 0xff
 8000192:	d111      	bne.n	80001b8 <Ap_ST32BL_WaitCmd+0x40>
		case STM32_CMD_WRITE_FLASH:
		case STM32_CMD_WRITE_UNPROTECT:
		case STM32_CMD_READ_FLASH:
		case STM32_CMD_GO:
		case 0xFF:
			CmdC = Ap_ST32BL_ReceiveByte();
 8000194:	47a8      	blx	r5

			Ap_ST32BL_SendByte(STM32_COMM_ACK);				
 8000196:	2079      	movs	r0, #121	; 0x79
 8000198:	4a0c      	ldr	r2, [pc, #48]	; (80001cc <Ap_ST32BL_WaitCmd+0x54>)
 800019a:	4790      	blx	r2
			break;
	}


	return Cmd;
}
 800019c:	4620      	mov	r0, r4
 800019e:	bd38      	pop	{r3, r4, r5, pc}
	u8 Cmd = 0xFF;
	u8 CmdC;

	Cmd = Ap_ST32BL_ReceiveByte();

	switch( Cmd )
 80001a0:	2802      	cmp	r0, #2
 80001a2:	d0f7      	beq.n	8000194 <Ap_ST32BL_WaitCmd+0x1c>
 80001a4:	d90d      	bls.n	80001c2 <Ap_ST32BL_WaitCmd+0x4a>
 80001a6:	2811      	cmp	r0, #17
 80001a8:	d0f4      	beq.n	8000194 <Ap_ST32BL_WaitCmd+0x1c>
 80001aa:	2821      	cmp	r0, #33	; 0x21
 80001ac:	d104      	bne.n	80001b8 <Ap_ST32BL_WaitCmd+0x40>
 80001ae:	e7f1      	b.n	8000194 <Ap_ST32BL_WaitCmd+0x1c>
 80001b0:	f1a0 0343 	sub.w	r3, r0, #67	; 0x43
 80001b4:	2b01      	cmp	r3, #1
 80001b6:	d9ed      	bls.n	8000194 <Ap_ST32BL_WaitCmd+0x1c>

			Ap_ST32BL_SendByte(STM32_COMM_ACK);				
			break;

		default:
			Ap_ST32BL_SendByte(STM32_COMM_NACK);
 80001b8:	201f      	movs	r0, #31
 80001ba:	4904      	ldr	r1, [pc, #16]	; (80001cc <Ap_ST32BL_WaitCmd+0x54>)
 80001bc:	4788      	blx	r1
			break;
	}


	return Cmd;
}
 80001be:	4620      	mov	r0, r4
 80001c0:	bd38      	pop	{r3, r4, r5, pc}
	u8 Cmd = 0xFF;
	u8 CmdC;

	Cmd = Ap_ST32BL_ReceiveByte();

	switch( Cmd )
 80001c2:	2800      	cmp	r0, #0
 80001c4:	d0e6      	beq.n	8000194 <Ap_ST32BL_WaitCmd+0x1c>
 80001c6:	e7f7      	b.n	80001b8 <Ap_ST32BL_WaitCmd+0x40>
 80001c8:	08000161 	.word	0x08000161
 80001cc:	08000145 	.word	0x08000145

080001d0 <Ap_ST32BL_EraseFlash>:
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u8 Ap_ST32BL_EraseFlash( void )
{
 80001d0:	b500      	push	{lr}
	u32 i;

	
	volatile FLASH_Status FLASHStatus;

	FLASHStatus = FLASH_COMPLETE;
 80001d2:	2304      	movs	r3, #4
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u8 Ap_ST32BL_EraseFlash( void )
{
 80001d4:	b083      	sub	sp, #12
	
	volatile FLASH_Status FLASHStatus;

	FLASHStatus = FLASH_COMPLETE;

	FLASH_Unlock();
 80001d6:	4812      	ldr	r0, [pc, #72]	; (8000220 <Ap_ST32BL_EraseFlash+0x50>)
	u32 i;

	
	volatile FLASH_Status FLASHStatus;

	FLASHStatus = FLASH_COMPLETE;
 80001d8:	f88d 3007 	strb.w	r3, [sp, #7]

	FLASH_Unlock();
 80001dc:	4780      	blx	r0
	FLASH_ClearFlag(FLASH_FLAG_BSY | FLASH_FLAG_EOP | FLASH_FLAG_PGERR | FLASH_FLAG_WRPRTERR);
 80001de:	2035      	movs	r0, #53	; 0x35
 80001e0:	4910      	ldr	r1, [pc, #64]	; (8000224 <Ap_ST32BL_EraseFlash+0x54>)
 80001e2:	4788      	blx	r1
 80001e4:	4b10      	ldr	r3, [pc, #64]	; (8000228 <Ap_ST32BL_EraseFlash+0x58>)


	for( i=0; i<128; i++ )
	{
		Ap_ST32BL_EraseSectorFlag[i] = FALSE;
 80001e6:	2100      	movs	r1, #0
     TITLE   : Ap_ST32BL_EraseFlash
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u8 Ap_ST32BL_EraseFlash( void )
 80001e8:	f103 0080 	add.w	r0, r3, #128	; 0x80
 80001ec:	1c5a      	adds	r2, r3, #1
	FLASH_ClearFlag(FLASH_FLAG_BSY | FLASH_FLAG_EOP | FLASH_FLAG_PGERR | FLASH_FLAG_WRPRTERR);


	for( i=0; i<128; i++ )
	{
		Ap_ST32BL_EraseSectorFlag[i] = FALSE;
 80001ee:	7059      	strb	r1, [r3, #1]
 80001f0:	3302      	adds	r3, #2

	FLASH_Unlock();
	FLASH_ClearFlag(FLASH_FLAG_BSY | FLASH_FLAG_EOP | FLASH_FLAG_PGERR | FLASH_FLAG_WRPRTERR);


	for( i=0; i<128; i++ )
 80001f2:	4283      	cmp	r3, r0
	{
		Ap_ST32BL_EraseSectorFlag[i] = FALSE;
 80001f4:	7051      	strb	r1, [r2, #1]

	FLASH_Unlock();
	FLASH_ClearFlag(FLASH_FLAG_BSY | FLASH_FLAG_EOP | FLASH_FLAG_PGERR | FLASH_FLAG_WRPRTERR);


	for( i=0; i<128; i++ )
 80001f6:	d1f9      	bne.n	80001ec <Ap_ST32BL_EraseFlash+0x1c>
	}

	PageCount = 0;


	FLASHStatus = FLASH_ErasePage(HW_ST32BL_FLASH_START_ADDRESS);
 80001f8:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 80001fc:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000200:	490a      	ldr	r1, [pc, #40]	; (800022c <Ap_ST32BL_EraseFlash+0x5c>)
 8000202:	4788      	blx	r1
 8000204:	f88d 0007 	strb.w	r0, [sp, #7]

	Ap_ST32BL_EraseSectorFlag[PageCount] = TRUE;

	if( FLASHStatus != FLASH_COMPLETE )
 8000208:	f89d 3007 	ldrb.w	r3, [sp, #7]
	PageCount = 0;


	FLASHStatus = FLASH_ErasePage(HW_ST32BL_FLASH_START_ADDRESS);

	Ap_ST32BL_EraseSectorFlag[PageCount] = TRUE;
 800020c:	4a08      	ldr	r2, [pc, #32]	; (8000230 <Ap_ST32BL_EraseFlash+0x60>)
 800020e:	2001      	movs	r0, #1

	if( FLASHStatus != FLASH_COMPLETE )
 8000210:	2b04      	cmp	r3, #4
	PageCount = 0;


	FLASHStatus = FLASH_ErasePage(HW_ST32BL_FLASH_START_ADDRESS);

	Ap_ST32BL_EraseSectorFlag[PageCount] = TRUE;
 8000212:	7010      	strb	r0, [r2, #0]

	if( FLASHStatus != FLASH_COMPLETE )
 8000214:	d002      	beq.n	800021c <Ap_ST32BL_EraseFlash+0x4c>
	{
		FLASH_Lock();
 8000216:	4807      	ldr	r0, [pc, #28]	; (8000234 <Ap_ST32BL_EraseFlash+0x64>)
 8000218:	4780      	blx	r0
		Ret = FALSE;
 800021a:	2000      	movs	r0, #0
	}

	return Ret;
}
 800021c:	b003      	add	sp, #12
 800021e:	bd00      	pop	{pc}
 8000220:	08002d09 	.word	0x08002d09
 8000224:	08002d3d 	.word	0x08002d3d
 8000228:	200002e3 	.word	0x200002e3
 800022c:	08002e09 	.word	0x08002e09
 8000230:	200002e4 	.word	0x200002e4
 8000234:	08002d29 	.word	0x08002d29

08000238 <Ap_ST32BL_CheckFlashSector>:
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u8 Ap_ST32BL_CheckFlashSector( u32 Address )
{
 8000238:	b570      	push	{r4, r5, r6, lr}
	volatile FLASH_Status FLASHStatus;

	FLASHStatus = FLASH_COMPLETE;


	if( Address < HW_ST32BL_FLASH_START_ADDRESS	) return FALSE;
 800023a:	f642 73ff 	movw	r3, #12287	; 0x2fff
 800023e:	f6c0 0300 	movt	r3, #2048	; 0x800
	u8  Ret = TRUE;
	u32 PageCount;

	volatile FLASH_Status FLASHStatus;

	FLASHStatus = FLASH_COMPLETE;
 8000242:	2204      	movs	r2, #4
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u8 Ap_ST32BL_CheckFlashSector( u32 Address )
{
 8000244:	b082      	sub	sp, #8
	volatile FLASH_Status FLASHStatus;

	FLASHStatus = FLASH_COMPLETE;


	if( Address < HW_ST32BL_FLASH_START_ADDRESS	) return FALSE;
 8000246:	4298      	cmp	r0, r3
	u8  Ret = TRUE;
	u32 PageCount;

	volatile FLASH_Status FLASHStatus;

	FLASHStatus = FLASH_COMPLETE;
 8000248:	f88d 2007 	strb.w	r2, [sp, #7]


	if( Address < HW_ST32BL_FLASH_START_ADDRESS	) return FALSE;
 800024c:	d90a      	bls.n	8000264 <Ap_ST32BL_CheckFlashSector+0x2c>


	PageCount = (Address - HW_ST32BL_FLASH_START_ADDRESS) / HW_ST32BL_FLASH_PAGE_SIZE;
 800024e:	f100 4478 	add.w	r4, r0, #4160749568	; 0xf8000000
 8000252:	f5a4 5040 	sub.w	r0, r4, #12288	; 0x3000


	if( Ap_ST32BL_EraseSectorFlag[PageCount] == FALSE )
 8000256:	4d0d      	ldr	r5, [pc, #52]	; (800028c <Ap_ST32BL_CheckFlashSector+0x54>)


	if( Address < HW_ST32BL_FLASH_START_ADDRESS	) return FALSE;


	PageCount = (Address - HW_ST32BL_FLASH_START_ADDRESS) / HW_ST32BL_FLASH_PAGE_SIZE;
 8000258:	0a84      	lsrs	r4, r0, #10


	if( Ap_ST32BL_EraseSectorFlag[PageCount] == FALSE )
 800025a:	5d2e      	ldrb	r6, [r5, r4]
 800025c:	b126      	cbz	r6, 8000268 <Ap_ST32BL_CheckFlashSector+0x30>
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u8 Ap_ST32BL_CheckFlashSector( u32 Address )
{
	u8  Ret = TRUE;
 800025e:	2001      	movs	r0, #1
		}
	}


	return Ret;
}
 8000260:	b002      	add	sp, #8
 8000262:	bd70      	pop	{r4, r5, r6, pc}
	volatile FLASH_Status FLASHStatus;

	FLASHStatus = FLASH_COMPLETE;


	if( Address < HW_ST32BL_FLASH_START_ADDRESS	) return FALSE;
 8000264:	2000      	movs	r0, #0
 8000266:	e7fb      	b.n	8000260 <Ap_ST32BL_CheckFlashSector+0x28>
	PageCount = (Address - HW_ST32BL_FLASH_START_ADDRESS) / HW_ST32BL_FLASH_PAGE_SIZE;


	if( Ap_ST32BL_EraseSectorFlag[PageCount] == FALSE )
	{
		FLASHStatus = FLASH_ErasePage(HW_ST32BL_FLASH_START_ADDRESS + (HW_ST32BL_FLASH_PAGE_SIZE * PageCount));
 8000268:	f504 3100 	add.w	r1, r4, #131072	; 0x20000
 800026c:	310c      	adds	r1, #12
 800026e:	0288      	lsls	r0, r1, #10
 8000270:	4b07      	ldr	r3, [pc, #28]	; (8000290 <Ap_ST32BL_CheckFlashSector+0x58>)
 8000272:	4798      	blx	r3
 8000274:	f88d 0007 	strb.w	r0, [sp, #7]

		Ap_ST32BL_EraseSectorFlag[PageCount] = TRUE;

		if( FLASHStatus != FLASH_COMPLETE )
 8000278:	f89d 0007 	ldrb.w	r0, [sp, #7]

	if( Ap_ST32BL_EraseSectorFlag[PageCount] == FALSE )
	{
		FLASHStatus = FLASH_ErasePage(HW_ST32BL_FLASH_START_ADDRESS + (HW_ST32BL_FLASH_PAGE_SIZE * PageCount));

		Ap_ST32BL_EraseSectorFlag[PageCount] = TRUE;
 800027c:	2201      	movs	r2, #1

		if( FLASHStatus != FLASH_COMPLETE )
 800027e:	2804      	cmp	r0, #4

	if( Ap_ST32BL_EraseSectorFlag[PageCount] == FALSE )
	{
		FLASHStatus = FLASH_ErasePage(HW_ST32BL_FLASH_START_ADDRESS + (HW_ST32BL_FLASH_PAGE_SIZE * PageCount));

		Ap_ST32BL_EraseSectorFlag[PageCount] = TRUE;
 8000280:	552a      	strb	r2, [r5, r4]

		if( FLASHStatus != FLASH_COMPLETE )
 8000282:	d0ec      	beq.n	800025e <Ap_ST32BL_CheckFlashSector+0x26>
		{
			FLASH_Lock();
 8000284:	4903      	ldr	r1, [pc, #12]	; (8000294 <Ap_ST32BL_CheckFlashSector+0x5c>)
 8000286:	4788      	blx	r1
			Ret = FALSE;
 8000288:	4630      	mov	r0, r6
 800028a:	e7e9      	b.n	8000260 <Ap_ST32BL_CheckFlashSector+0x28>
 800028c:	200002e4 	.word	0x200002e4
 8000290:	08002e09 	.word	0x08002e09
 8000294:	08002d29 	.word	0x08002d29

08000298 <Ap_ST32BL_WriteFlash>:
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u8 Ap_ST32BL_WriteFlash( u32 Address, u8 *pData, u32 DataSize )
{
 8000298:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	u32 DataIndex;
	u8	Ret = TRUE;
	volatile FLASH_Status FLASHStatus;


	WriteSize = DataSize / 4;	// 32Bit로 변경 
 800029c:	0897      	lsrs	r7, r2, #2

	if( (WriteSize%4) > 0 ) WriteSize++;
 800029e:	07bb      	lsls	r3, r7, #30
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u8 Ap_ST32BL_WriteFlash( u32 Address, u8 *pData, u32 DataSize )
{
 80002a0:	b083      	sub	sp, #12
	if( (WriteSize%4) > 0 ) WriteSize++;


	//-- 섹터가 지워졌는지 검사
	//
	if( Ap_ST32BL_CheckFlashSector(Address) == FALSE )
 80002a2:	4b38      	ldr	r3, [pc, #224]	; (8000384 <Ap_ST32BL_WriteFlash+0xec>)
	volatile FLASH_Status FLASHStatus;


	WriteSize = DataSize / 4;	// 32Bit로 변경 

	if( (WriteSize%4) > 0 ) WriteSize++;
 80002a4:	bf18      	it	ne
 80002a6:	3701      	addne	r7, #1
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u8 Ap_ST32BL_WriteFlash( u32 Address, u8 *pData, u32 DataSize )
{
 80002a8:	4680      	mov	r8, r0
 80002aa:	460c      	mov	r4, r1
	if( (WriteSize%4) > 0 ) WriteSize++;


	//-- 섹터가 지워졌는지 검사
	//
	if( Ap_ST32BL_CheckFlashSector(Address) == FALSE )
 80002ac:	4798      	blx	r3
 80002ae:	2800      	cmp	r0, #0
 80002b0:	d064      	beq.n	800037c <Ap_ST32BL_WriteFlash+0xe4>
	}


	DataIndex = 0;

	for( i=0; i<WriteSize; i++ )
 80002b2:	b3af      	cbz	r7, 8000320 <Ap_ST32BL_WriteFlash+0x88>
	{
		WriteData  = pData[ DataIndex++ ] << 0;
		WriteData |= pData[ DataIndex++ ] << 8;
 80002b4:	7862      	ldrb	r2, [r4, #1]

	DataIndex = 0;

	for( i=0; i<WriteSize; i++ )
	{
		WriteData  = pData[ DataIndex++ ] << 0;
 80002b6:	7825      	ldrb	r5, [r4, #0]
		WriteData |= pData[ DataIndex++ ] << 8;
		WriteData |= pData[ DataIndex++ ] << 16;
 80002b8:	78a0      	ldrb	r0, [r4, #2]
		WriteData |= pData[ DataIndex++ ] << 24;
 80002ba:	78e1      	ldrb	r1, [r4, #3]
	DataIndex = 0;

	for( i=0; i<WriteSize; i++ )
	{
		WriteData  = pData[ DataIndex++ ] << 0;
		WriteData |= pData[ DataIndex++ ] << 8;
 80002bc:	0213      	lsls	r3, r2, #8
 80002be:	ea43 4200 	orr.w	r2, r3, r0, lsl #16
		WriteData |= pData[ DataIndex++ ] << 16;
 80002c2:	ea45 6101 	orr.w	r1, r5, r1, lsl #24
 80002c6:	ebc4 0808 	rsb	r8, r4, r8
 80002ca:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 8000388 <Ap_ST32BL_WriteFlash+0xf0>
		WriteData |= pData[ DataIndex++ ] << 24;

		FLASHStatus = FLASH_ProgramWord(StartAddress+i*4, WriteData);
 80002ce:	eb04 0008 	add.w	r0, r4, r8
 80002d2:	4311      	orrs	r1, r2
 80002d4:	47c8      	blx	r9
 80002d6:	f88d 0007 	strb.w	r0, [sp, #7]

		if( FLASHStatus != FLASH_COMPLETE )
 80002da:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80002de:	1e7d      	subs	r5, r7, #1
 80002e0:	2804      	cmp	r0, #4
 80002e2:	f005 0501 	and.w	r5, r5, #1
 80002e6:	d149      	bne.n	800037c <Ap_ST32BL_WriteFlash+0xe4>
	}


	DataIndex = 0;

	for( i=0; i<WriteSize; i++ )
 80002e8:	2601      	movs	r6, #1
 80002ea:	3404      	adds	r4, #4
 80002ec:	42be      	cmp	r6, r7
 80002ee:	d017      	beq.n	8000320 <Ap_ST32BL_WriteFlash+0x88>
 80002f0:	b365      	cbz	r5, 800034c <Ap_ST32BL_WriteFlash+0xb4>
	{
		WriteData  = pData[ DataIndex++ ] << 0;
		WriteData |= pData[ DataIndex++ ] << 8;
 80002f2:	7863      	ldrb	r3, [r4, #1]

	DataIndex = 0;

	for( i=0; i<WriteSize; i++ )
	{
		WriteData  = pData[ DataIndex++ ] << 0;
 80002f4:	7822      	ldrb	r2, [r4, #0]
		WriteData |= pData[ DataIndex++ ] << 8;
		WriteData |= pData[ DataIndex++ ] << 16;
 80002f6:	78a0      	ldrb	r0, [r4, #2]
		WriteData |= pData[ DataIndex++ ] << 24;
 80002f8:	78e1      	ldrb	r1, [r4, #3]
	DataIndex = 0;

	for( i=0; i<WriteSize; i++ )
	{
		WriteData  = pData[ DataIndex++ ] << 0;
		WriteData |= pData[ DataIndex++ ] << 8;
 80002fa:	021b      	lsls	r3, r3, #8
 80002fc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
		WriteData |= pData[ DataIndex++ ] << 16;
 8000300:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
		WriteData |= pData[ DataIndex++ ] << 24;

		FLASHStatus = FLASH_ProgramWord(StartAddress+i*4, WriteData);
 8000304:	eb08 0004 	add.w	r0, r8, r4
 8000308:	4319      	orrs	r1, r3
 800030a:	47c8      	blx	r9
 800030c:	f88d 0007 	strb.w	r0, [sp, #7]

		if( FLASHStatus != FLASH_COMPLETE )
 8000310:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8000314:	2a04      	cmp	r2, #4
 8000316:	d131      	bne.n	800037c <Ap_ST32BL_WriteFlash+0xe4>
	}


	DataIndex = 0;

	for( i=0; i<WriteSize; i++ )
 8000318:	2602      	movs	r6, #2
 800031a:	3404      	adds	r4, #4
 800031c:	42be      	cmp	r6, r7
 800031e:	d115      	bne.n	800034c <Ap_ST32BL_WriteFlash+0xb4>
	u32 StartAddress = Address;
	u32 WriteSize;
	u32 WriteData;
	u32 i;
	u32 DataIndex;
	u8	Ret = TRUE;
 8000320:	2001      	movs	r0, #1
 8000322:	e02c      	b.n	800037e <Ap_ST32BL_WriteFlash+0xe6>
	DataIndex = 0;

	for( i=0; i<WriteSize; i++ )
	{
		WriteData  = pData[ DataIndex++ ] << 0;
		WriteData |= pData[ DataIndex++ ] << 8;
 8000324:	7963      	ldrb	r3, [r4, #5]

	DataIndex = 0;

	for( i=0; i<WriteSize; i++ )
	{
		WriteData  = pData[ DataIndex++ ] << 0;
 8000326:	7922      	ldrb	r2, [r4, #4]
		WriteData |= pData[ DataIndex++ ] << 8;
		WriteData |= pData[ DataIndex++ ] << 16;
		WriteData |= pData[ DataIndex++ ] << 24;
 8000328:	78e9      	ldrb	r1, [r5, #3]

	for( i=0; i<WriteSize; i++ )
	{
		WriteData  = pData[ DataIndex++ ] << 0;
		WriteData |= pData[ DataIndex++ ] << 8;
		WriteData |= pData[ DataIndex++ ] << 16;
 800032a:	79a4      	ldrb	r4, [r4, #6]
	DataIndex = 0;

	for( i=0; i<WriteSize; i++ )
	{
		WriteData  = pData[ DataIndex++ ] << 0;
		WriteData |= pData[ DataIndex++ ] << 8;
 800032c:	021b      	lsls	r3, r3, #8
 800032e:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
		WriteData |= pData[ DataIndex++ ] << 16;
 8000332:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
		WriteData |= pData[ DataIndex++ ] << 24;

		FLASHStatus = FLASH_ProgramWord(StartAddress+i*4, WriteData);
 8000336:	4321      	orrs	r1, r4
 8000338:	47c8      	blx	r9
 800033a:	f88d 0007 	strb.w	r0, [sp, #7]

		if( FLASHStatus != FLASH_COMPLETE )
 800033e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8000342:	1d2c      	adds	r4, r5, #4
 8000344:	2804      	cmp	r0, #4
 8000346:	d119      	bne.n	800037c <Ap_ST32BL_WriteFlash+0xe4>
	}


	DataIndex = 0;

	for( i=0; i<WriteSize; i++ )
 8000348:	42be      	cmp	r6, r7
 800034a:	d0e9      	beq.n	8000320 <Ap_ST32BL_WriteFlash+0x88>
	{
		WriteData  = pData[ DataIndex++ ] << 0;
		WriteData |= pData[ DataIndex++ ] << 8;
 800034c:	7863      	ldrb	r3, [r4, #1]

	DataIndex = 0;

	for( i=0; i<WriteSize; i++ )
	{
		WriteData  = pData[ DataIndex++ ] << 0;
 800034e:	7822      	ldrb	r2, [r4, #0]
		WriteData |= pData[ DataIndex++ ] << 8;
		WriteData |= pData[ DataIndex++ ] << 16;
 8000350:	78a0      	ldrb	r0, [r4, #2]
		WriteData |= pData[ DataIndex++ ] << 24;
 8000352:	78e1      	ldrb	r1, [r4, #3]
	DataIndex = 0;

	for( i=0; i<WriteSize; i++ )
	{
		WriteData  = pData[ DataIndex++ ] << 0;
		WriteData |= pData[ DataIndex++ ] << 8;
 8000354:	021b      	lsls	r3, r3, #8
 8000356:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
		WriteData |= pData[ DataIndex++ ] << 16;
 800035a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
		WriteData |= pData[ DataIndex++ ] << 24;

		FLASHStatus = FLASH_ProgramWord(StartAddress+i*4, WriteData);
 800035e:	4319      	orrs	r1, r3
 8000360:	eb08 0004 	add.w	r0, r8, r4
 8000364:	47c8      	blx	r9
 8000366:	4602      	mov	r2, r0
 8000368:	f88d 2007 	strb.w	r2, [sp, #7]

		if( FLASHStatus != FLASH_COMPLETE )
 800036c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8000370:	1d25      	adds	r5, r4, #4
	}


	DataIndex = 0;

	for( i=0; i<WriteSize; i++ )
 8000372:	3602      	adds	r6, #2
		WriteData |= pData[ DataIndex++ ] << 16;
		WriteData |= pData[ DataIndex++ ] << 24;

		FLASHStatus = FLASH_ProgramWord(StartAddress+i*4, WriteData);

		if( FLASHStatus != FLASH_COMPLETE )
 8000374:	2904      	cmp	r1, #4
		WriteData  = pData[ DataIndex++ ] << 0;
		WriteData |= pData[ DataIndex++ ] << 8;
		WriteData |= pData[ DataIndex++ ] << 16;
		WriteData |= pData[ DataIndex++ ] << 24;

		FLASHStatus = FLASH_ProgramWord(StartAddress+i*4, WriteData);
 8000376:	eb08 0005 	add.w	r0, r8, r5

		if( FLASHStatus != FLASH_COMPLETE )
 800037a:	d0d3      	beq.n	8000324 <Ap_ST32BL_WriteFlash+0x8c>

	//-- 섹터가 지워졌는지 검사
	//
	if( Ap_ST32BL_CheckFlashSector(Address) == FALSE )
	{
		return FALSE;
 800037c:	2000      	movs	r0, #0
			break;
		}
	}

	return Ret;
}
 800037e:	b003      	add	sp, #12
 8000380:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000384:	08000239 	.word	0x08000239
 8000388:	08002db9 	.word	0x08002db9

0800038c <Ap_ST32BL_JumpToApp>:
	u32 	  JumpAddress;

	//JumpToAddress = (pFunction)(HW_ST32BL_FLASH_START_ADDRESS + 4);


	JumpAddress =  *(u32 *)(HW_ST32BL_FLASH_START_ADDRESS + 4);
 800038c:	f243 0204 	movw	r2, #12292	; 0x3004
	

	JumpToApp = (pFunction) JumpAddress;


	Hw_Uart_DeInit();
 8000390:	f240 63fd 	movw	r3, #1789	; 0x6fd
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_ST32BL_JumpToApp( u32 Address )
{
 8000394:	b510      	push	{r4, lr}
	u32 	  JumpAddress;

	//JumpToAddress = (pFunction)(HW_ST32BL_FLASH_START_ADDRESS + 4);


	JumpAddress =  *(u32 *)(HW_ST32BL_FLASH_START_ADDRESS + 4);
 8000396:	f6c0 0200 	movt	r2, #2048	; 0x800
	

	JumpToApp = (pFunction) JumpAddress;


	Hw_Uart_DeInit();
 800039a:	f6c0 0300 	movt	r3, #2048	; 0x800


	JumpAddress =  *(u32 *)(HW_ST32BL_FLASH_START_ADDRESS + 4);
	

	JumpToApp = (pFunction) JumpAddress;
 800039e:	6814      	ldr	r4, [r2, #0]


	Hw_Uart_DeInit();
 80003a0:	4798      	blx	r3
	Hw_Timer_DeInit();
 80003a2:	f640 2049 	movw	r0, #2633	; 0xa49
 80003a6:	f6c0 0000 	movt	r0, #2048	; 0x800
 80003aa:	4780      	blx	r0

	//Disable_ISR();

	JumpToApp();
 80003ac:	47a0      	blx	r4
 80003ae:	bd10      	pop	{r4, pc}

080003b0 <Ap_ST32BL_Main>:
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_ST32BL_Main( void )
{
 80003b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80003b4:	f8df 8168 	ldr.w	r8, [pc, #360]	; 8000520 <Ap_ST32BL_Main+0x170>
 80003b8:	b0cf      	sub	sp, #316	; 0x13c
 80003ba:	4f57      	ldr	r7, [pc, #348]	; (8000518 <Ap_ST32BL_Main+0x168>)
 80003bc:	4d57      	ldr	r5, [pc, #348]	; (800051c <Ap_ST32BL_Main+0x16c>)
 80003be:	ac03      	add	r4, sp, #12
	while(1)
	{
		//Hw_Uart_Printf(HW_UART_VCOM, "ST32BL\n");
		//Hw_Timer_Delay_ms(500);

		Cmd = Ap_ST32BL_WaitCmd();
 80003c0:	47c0      	blx	r8
		{

		}


		if( Cmd == STM32_CMD_GET_COMMAND )
 80003c2:	2800      	cmp	r0, #0
 80003c4:	d064      	beq.n	8000490 <Ap_ST32BL_Main+0xe0>
			Ap_ST32BL_SendByte(0x22);
			Ap_ST32BL_SendByte(STM32_COMM_ACK);
		}


		if( Cmd == STM32_CMD_GET_ID )
 80003c6:	2802      	cmp	r0, #2
 80003c8:	f000 808c 	beq.w	80004e4 <Ap_ST32BL_Main+0x134>
			Ap_ST32BL_SendByte(0x10);
			Ap_ST32BL_SendByte(STM32_COMM_ACK);			
		}


		if( Cmd == STM32_CMD_ERASE_FLASH )
 80003cc:	2843      	cmp	r0, #67	; 0x43
 80003ce:	f000 8092 	beq.w	80004f6 <Ap_ST32BL_Main+0x146>
		}




		if( Cmd == STM32_CMD_WRITE_FLASH )
 80003d2:	2831      	cmp	r0, #49	; 0x31
 80003d4:	d162      	bne.n	800049c <Ap_ST32BL_Main+0xec>
			//-- Receive Address 
			//
			CheckSumCalc = 0;
			for( i=0; i<4; i++ )
			{
				Resp[i] = Ap_ST32BL_ReceiveByte();
 80003d6:	47a8      	blx	r5
 80003d8:	4606      	mov	r6, r0
 80003da:	7020      	strb	r0, [r4, #0]
 80003dc:	47a8      	blx	r5
				CheckSumCalc ^= Resp[i];	
 80003de:	4046      	eors	r6, r0
			//-- Receive Address 
			//
			CheckSumCalc = 0;
			for( i=0; i<4; i++ )
			{
				Resp[i] = Ap_ST32BL_ReceiveByte();
 80003e0:	7060      	strb	r0, [r4, #1]
 80003e2:	47a8      	blx	r5
				CheckSumCalc ^= Resp[i];	
 80003e4:	4046      	eors	r6, r0
			//-- Receive Address 
			//
			CheckSumCalc = 0;
			for( i=0; i<4; i++ )
			{
				Resp[i] = Ap_ST32BL_ReceiveByte();
 80003e6:	70a0      	strb	r0, [r4, #2]
 80003e8:	47a8      	blx	r5
				CheckSumCalc ^= Resp[i];	
 80003ea:	4046      	eors	r6, r0
			//-- Receive Address 
			//
			CheckSumCalc = 0;
			for( i=0; i<4; i++ )
			{
				Resp[i] = Ap_ST32BL_ReceiveByte();
 80003ec:	70e0      	strb	r0, [r4, #3]
				CheckSumCalc ^= Resp[i];	
			}
			CheckSum = Ap_ST32BL_ReceiveByte();
 80003ee:	47a8      	blx	r5

			Address  = Resp[0] << 24;
 80003f0:	7823      	ldrb	r3, [r4, #0]
			Address |= Resp[1] << 16;
 80003f2:	7862      	ldrb	r2, [r4, #1]
				Resp[i] = Ap_ST32BL_ReceiveByte();
				CheckSumCalc ^= Resp[i];	
			}
			CheckSum = Ap_ST32BL_ReceiveByte();

			Address  = Resp[0] << 24;
 80003f4:	0619      	lsls	r1, r3, #24
			Address |= Resp[1] << 16;
			Address |= Resp[2] <<  8;
 80003f6:	f894 b002 	ldrb.w	fp, [r4, #2]
				CheckSumCalc ^= Resp[i];	
			}
			CheckSum = Ap_ST32BL_ReceiveByte();

			Address  = Resp[0] << 24;
			Address |= Resp[1] << 16;
 80003fa:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
			Address |= Resp[2] <<  8;
			Address |= Resp[3] <<  0;
 80003fe:	78e3      	ldrb	r3, [r4, #3]
			}
			CheckSum = Ap_ST32BL_ReceiveByte();

			Address  = Resp[0] << 24;
			Address |= Resp[1] << 16;
			Address |= Resp[2] <<  8;
 8000400:	ea42 210b 	orr.w	r1, r2, fp, lsl #8
			Address |= Resp[3] <<  0;
 8000404:	ea41 0203 	orr.w	r2, r1, r3

			#if HW_ST32BL_USE_DEBUG == 1
			Hw_Uart_Printf(HW_UART_COM1, "Addrr %x %x %x %x %x %x\r\n", Resp[0], Resp[1], Resp[2], Resp[3], CheckSum, CheckSumCalc );
			#endif		

			if( CheckSum == CheckSumCalc )
 8000408:	4286      	cmp	r6, r0
			CheckSum = Ap_ST32BL_ReceiveByte();

			Address  = Resp[0] << 24;
			Address |= Resp[1] << 16;
			Address |= Resp[2] <<  8;
			Address |= Resp[3] <<  0;
 800040a:	9201      	str	r2, [sp, #4]

			#if HW_ST32BL_USE_DEBUG == 1
			Hw_Uart_Printf(HW_UART_COM1, "Addrr %x %x %x %x %x %x\r\n", Resp[0], Resp[1], Resp[2], Resp[3], CheckSum, CheckSumCalc );
			#endif		

			if( CheckSum == CheckSumCalc )
 800040c:	f000 8081 	beq.w	8000512 <Ap_ST32BL_Main+0x162>
				Hw_Uart_Printf(HW_UART_COM1, "ACK\r\n");
				#endif	
			}
			else
			{
				Ap_ST32BL_SendByte(STM32_COMM_NACK);	
 8000410:	201f      	movs	r0, #31
 8000412:	47b8      	blx	r7


			//-- Receive Data
			//
			CheckSumCalc = 0;
			Length  = Ap_ST32BL_ReceiveByte();
 8000414:	47a8      	blx	r5
 8000416:	4681      	mov	r9, r0
			Hw_Uart_Printf(HW_UART_COM1, "Length %d \r\n", Length );
			#endif	

			for( i=0; i<Length; i++ )
			{
				Resp[i] = Ap_ST32BL_ReceiveByte();
 8000418:	47a8      	blx	r5

			#if HW_ST32BL_USE_DEBUG == 1
			Hw_Uart_Printf(HW_UART_COM1, "Length %d \r\n", Length );
			#endif	

			for( i=0; i<Length; i++ )
 800041a:	2601      	movs	r6, #1
 800041c:	f109 0a01 	add.w	sl, r9, #1
			{
				Resp[i] = Ap_ST32BL_ReceiveByte();
				CheckSumCalc ^= Resp[i];					
 8000420:	ea89 0300 	eor.w	r3, r9, r0

			#if HW_ST32BL_USE_DEBUG == 1
			Hw_Uart_Printf(HW_UART_COM1, "Length %d \r\n", Length );
			#endif	

			for( i=0; i<Length; i++ )
 8000424:	45b2      	cmp	sl, r6
			{
				Resp[i] = Ap_ST32BL_ReceiveByte();
 8000426:	7020      	strb	r0, [r4, #0]
 8000428:	493c      	ldr	r1, [pc, #240]	; (800051c <Ap_ST32BL_Main+0x16c>)
 800042a:	ea09 0006 	and.w	r0, r9, r6
				CheckSumCalc ^= Resp[i];					
 800042e:	fa5f fb83 	uxtb.w	fp, r3

			#if HW_ST32BL_USE_DEBUG == 1
			Hw_Uart_Printf(HW_UART_COM1, "Length %d \r\n", Length );
			#endif	

			for( i=0; i<Length; i++ )
 8000432:	d918      	bls.n	8000466 <Ap_ST32BL_Main+0xb6>
 8000434:	b140      	cbz	r0, 8000448 <Ap_ST32BL_Main+0x98>
			{
				Resp[i] = Ap_ST32BL_ReceiveByte();
 8000436:	9100      	str	r1, [sp, #0]
 8000438:	47a8      	blx	r5

			#if HW_ST32BL_USE_DEBUG == 1
			Hw_Uart_Printf(HW_UART_COM1, "Length %d \r\n", Length );
			#endif	

			for( i=0; i<Length; i++ )
 800043a:	2602      	movs	r6, #2
			{
				Resp[i] = Ap_ST32BL_ReceiveByte();
 800043c:	7060      	strb	r0, [r4, #1]

			#if HW_ST32BL_USE_DEBUG == 1
			Hw_Uart_Printf(HW_UART_COM1, "Length %d \r\n", Length );
			#endif	

			for( i=0; i<Length; i++ )
 800043e:	45b2      	cmp	sl, r6
			{
				Resp[i] = Ap_ST32BL_ReceiveByte();
				CheckSumCalc ^= Resp[i];					
 8000440:	ea8b 0b00 	eor.w	fp, fp, r0

			#if HW_ST32BL_USE_DEBUG == 1
			Hw_Uart_Printf(HW_UART_COM1, "Length %d \r\n", Length );
			#endif	

			for( i=0; i<Length; i++ )
 8000444:	9900      	ldr	r1, [sp, #0]
 8000446:	d90e      	bls.n	8000466 <Ap_ST32BL_Main+0xb6>
			{
				Resp[i] = Ap_ST32BL_ReceiveByte();
 8000448:	47a8      	blx	r5
 800044a:	55a0      	strb	r0, [r4, r6]
				CheckSumCalc ^= Resp[i];					
 800044c:	ea8b 0b00 	eor.w	fp, fp, r0
			Hw_Uart_Printf(HW_UART_COM1, "Length %d \r\n", Length );
			#endif	

			for( i=0; i<Length; i++ )
			{
				Resp[i] = Ap_ST32BL_ReceiveByte();
 8000450:	47a8      	blx	r5

			#if HW_ST32BL_USE_DEBUG == 1
			Hw_Uart_Printf(HW_UART_COM1, "Length %d \r\n", Length );
			#endif	

			for( i=0; i<Length; i++ )
 8000452:	f106 0901 	add.w	r9, r6, #1
 8000456:	3602      	adds	r6, #2
 8000458:	45b2      	cmp	sl, r6
			{
				Resp[i] = Ap_ST32BL_ReceiveByte();
 800045a:	f804 0009 	strb.w	r0, [r4, r9]
 800045e:	492f      	ldr	r1, [pc, #188]	; (800051c <Ap_ST32BL_Main+0x16c>)
				CheckSumCalc ^= Resp[i];					
 8000460:	ea8b 0b00 	eor.w	fp, fp, r0

			#if HW_ST32BL_USE_DEBUG == 1
			Hw_Uart_Printf(HW_UART_COM1, "Length %d \r\n", Length );
			#endif	

			for( i=0; i<Length; i++ )
 8000464:	d8f0      	bhi.n	8000448 <Ap_ST32BL_Main+0x98>
			{
				Resp[i] = Ap_ST32BL_ReceiveByte();
				CheckSumCalc ^= Resp[i];					
			}
			CheckSum = Ap_ST32BL_ReceiveByte();
 8000466:	4788      	blx	r1


			//-- Flash Write
			//

			Ret = Ap_ST32BL_WriteFlash( Address + HW_ST32BL_FLASH_ADDRESS_OFFSET, Resp, Length );
 8000468:	9a01      	ldr	r2, [sp, #4]
 800046a:	f240 2399 	movw	r3, #665	; 0x299
			for( i=0; i<Length; i++ )
			{
				Resp[i] = Ap_ST32BL_ReceiveByte();
				CheckSumCalc ^= Resp[i];					
			}
			CheckSum = Ap_ST32BL_ReceiveByte();
 800046e:	4606      	mov	r6, r0


			//-- Flash Write
			//

			Ret = Ap_ST32BL_WriteFlash( Address + HW_ST32BL_FLASH_ADDRESS_OFFSET, Resp, Length );
 8000470:	4621      	mov	r1, r4
 8000472:	f502 5040 	add.w	r0, r2, #12288	; 0x3000
 8000476:	f6c0 0300 	movt	r3, #2048	; 0x800
 800047a:	4652      	mov	r2, sl
 800047c:	4798      	blx	r3

		
			if( CheckSum == CheckSumCalc && Ret == TRUE ) 	
 800047e:	45b3      	cmp	fp, r6
 8000480:	d101      	bne.n	8000486 <Ap_ST32BL_Main+0xd6>
		{
			Resp[0] = Ap_ST32BL_ReceiveByte();
			Resp[1] = Ap_ST32BL_ReceiveByte();


			if( Ap_ST32BL_EraseFlash() == TRUE )	Ap_ST32BL_SendByte(STM32_COMM_ACK);
 8000482:	2801      	cmp	r0, #1
 8000484:	d042      	beq.n	800050c <Ap_ST32BL_Main+0x15c>
			else									Ap_ST32BL_SendByte(STM32_COMM_NACK);
 8000486:	201f      	movs	r0, #31
 8000488:	47b8      	blx	r7
	while(1)
	{
		//Hw_Uart_Printf(HW_UART_VCOM, "ST32BL\n");
		//Hw_Timer_Delay_ms(500);

		Cmd = Ap_ST32BL_WaitCmd();
 800048a:	47c0      	blx	r8
		{

		}


		if( Cmd == STM32_CMD_GET_COMMAND )
 800048c:	2800      	cmp	r0, #0
 800048e:	d19a      	bne.n	80003c6 <Ap_ST32BL_Main+0x16>
		{
			Ap_ST32BL_SendByte(0x00);
 8000490:	47b8      	blx	r7
			Ap_ST32BL_SendByte(0x22);
 8000492:	2022      	movs	r0, #34	; 0x22
 8000494:	47b8      	blx	r7
			Ap_ST32BL_SendByte(STM32_COMM_ACK);
 8000496:	2079      	movs	r0, #121	; 0x79
 8000498:	47b8      	blx	r7
 800049a:	e791      	b.n	80003c0 <Ap_ST32BL_Main+0x10>
		}
		

		//-- Go Command
		//
		if( Cmd == STM32_CMD_GO )
 800049c:	2821      	cmp	r0, #33	; 0x21
 800049e:	d18f      	bne.n	80003c0 <Ap_ST32BL_Main+0x10>
			//-- Receive Address 
			//
			CheckSumCalc = 0;
			for( i=0; i<4; i++ )
			{
				Resp[i] = Ap_ST32BL_ReceiveByte();
 80004a0:	47a8      	blx	r5
 80004a2:	7020      	strb	r0, [r4, #0]
 80004a4:	47a8      	blx	r5
 80004a6:	7060      	strb	r0, [r4, #1]
 80004a8:	47a8      	blx	r5
 80004aa:	70a0      	strb	r0, [r4, #2]
 80004ac:	47a8      	blx	r5
 80004ae:	70e0      	strb	r0, [r4, #3]
				CheckSumCalc ^= Resp[i];	
			}
			CheckSum = Ap_ST32BL_ReceiveByte();
 80004b0:	47a8      	blx	r5

			Address  = Resp[0] << 24;
 80004b2:	7820      	ldrb	r0, [r4, #0]
			Address |= Resp[1] << 16;
 80004b4:	7862      	ldrb	r2, [r4, #1]
				Resp[i] = Ap_ST32BL_ReceiveByte();
				CheckSumCalc ^= Resp[i];	
			}
			CheckSum = Ap_ST32BL_ReceiveByte();

			Address  = Resp[0] << 24;
 80004b6:	0601      	lsls	r1, r0, #24
			Address |= Resp[1] << 16;
			Address |= Resp[2] <<  8;
 80004b8:	78a6      	ldrb	r6, [r4, #2]
				CheckSumCalc ^= Resp[i];	
			}
			CheckSum = Ap_ST32BL_ReceiveByte();

			Address  = Resp[0] << 24;
			Address |= Resp[1] << 16;
 80004ba:	ea41 4002 	orr.w	r0, r1, r2, lsl #16
			Address |= Resp[2] <<  8;
			Address |= Resp[3] <<  0;	
 80004be:	78e3      	ldrb	r3, [r4, #3]
			}
			CheckSum = Ap_ST32BL_ReceiveByte();

			Address  = Resp[0] << 24;
			Address |= Resp[1] << 16;
			Address |= Resp[2] <<  8;
 80004c0:	ea40 2606 	orr.w	r6, r0, r6, lsl #8
			Address |= Resp[3] <<  0;	
			

			Ap_ST32BL_SendByte(STM32_COMM_ACK);	
 80004c4:	2079      	movs	r0, #121	; 0x79
			CheckSum = Ap_ST32BL_ReceiveByte();

			Address  = Resp[0] << 24;
			Address |= Resp[1] << 16;
			Address |= Resp[2] <<  8;
			Address |= Resp[3] <<  0;	
 80004c6:	431e      	orrs	r6, r3
			

			Ap_ST32BL_SendByte(STM32_COMM_ACK);	
 80004c8:	47b8      	blx	r7

			Hw_Timer_Delay_ms(100);
 80004ca:	f640 52f1 	movw	r2, #3569	; 0xdf1
 80004ce:	2064      	movs	r0, #100	; 0x64
 80004d0:	f6c0 0200 	movt	r2, #2048	; 0x800
 80004d4:	4790      	blx	r2

			//-- Go
			//
			Ap_ST32BL_JumpToApp( Address );
 80004d6:	f240 318d 	movw	r1, #909	; 0x38d
 80004da:	4630      	mov	r0, r6
 80004dc:	f6c0 0100 	movt	r1, #2048	; 0x800
 80004e0:	4788      	blx	r1
 80004e2:	e76d      	b.n	80003c0 <Ap_ST32BL_Main+0x10>
		}


		if( Cmd == STM32_CMD_GET_ID )
		{
			Ap_ST32BL_SendByte(0x01);
 80004e4:	2001      	movs	r0, #1
 80004e6:	47b8      	blx	r7
			Ap_ST32BL_SendByte(0x04);
 80004e8:	2004      	movs	r0, #4
 80004ea:	47b8      	blx	r7
			Ap_ST32BL_SendByte(0x10);
 80004ec:	2010      	movs	r0, #16
 80004ee:	47b8      	blx	r7
			Ap_ST32BL_SendByte(STM32_COMM_ACK);			
 80004f0:	2079      	movs	r0, #121	; 0x79
 80004f2:	47b8      	blx	r7
 80004f4:	e764      	b.n	80003c0 <Ap_ST32BL_Main+0x10>
		}


		if( Cmd == STM32_CMD_ERASE_FLASH )
		{
			Resp[0] = Ap_ST32BL_ReceiveByte();
 80004f6:	47a8      	blx	r5
 80004f8:	7020      	strb	r0, [r4, #0]
			Resp[1] = Ap_ST32BL_ReceiveByte();
 80004fa:	47a8      	blx	r5
 80004fc:	7060      	strb	r0, [r4, #1]


			if( Ap_ST32BL_EraseFlash() == TRUE )	Ap_ST32BL_SendByte(STM32_COMM_ACK);
 80004fe:	f240 10d1 	movw	r0, #465	; 0x1d1
 8000502:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000506:	4780      	blx	r0
 8000508:	2801      	cmp	r0, #1
 800050a:	d1bc      	bne.n	8000486 <Ap_ST32BL_Main+0xd6>
 800050c:	2079      	movs	r0, #121	; 0x79
 800050e:	47b8      	blx	r7
 8000510:	e756      	b.n	80003c0 <Ap_ST32BL_Main+0x10>
			Hw_Uart_Printf(HW_UART_COM1, "Addrr %x %x %x %x %x %x\r\n", Resp[0], Resp[1], Resp[2], Resp[3], CheckSum, CheckSumCalc );
			#endif		

			if( CheckSum == CheckSumCalc )
			{
				Ap_ST32BL_SendByte(STM32_COMM_ACK);
 8000512:	2079      	movs	r0, #121	; 0x79
 8000514:	47b8      	blx	r7
 8000516:	e77d      	b.n	8000414 <Ap_ST32BL_Main+0x64>
 8000518:	08000145 	.word	0x08000145
 800051c:	08000161 	.word	0x08000161
 8000520:	08000179 	.word	0x08000179

08000524 <Hw_StartUp_Init>:
     			보드 리셋시에 처음 실행되는 함수
     ARG     : 	void
     RET     : 	void
---------------------------------------------------------------------------*/
void Hw_StartUp_Init(void)
{
 8000524:	4668      	mov	r0, sp
 8000526:	f020 0107 	bic.w	r1, r0, #7
 800052a:	468d      	mov	sp, r1
 800052c:	b579      	push	{r0, r3, r4, r5, r6, lr}
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 800052e:	492a      	ldr	r1, [pc, #168]	; (80005d8 <zero_loop+0x62>)
 8000530:	4b2a      	ldr	r3, [pc, #168]	; (80005dc <zero_loop+0x66>)
 8000532:	4299      	cmp	r1, r3
 8000534:	d21b      	bcs.n	800056e <Hw_StartUp_Init+0x4a>
     WORK    :	 
     			보드 리셋시에 처음 실행되는 함수
     ARG     : 	void
     RET     : 	void
---------------------------------------------------------------------------*/
void Hw_StartUp_Init(void)
 8000536:	1cda      	adds	r2, r3, #3
 8000538:	1d0c      	adds	r4, r1, #4
 800053a:	1b15      	subs	r5, r2, r4
 800053c:	4828      	ldr	r0, [pc, #160]	; (80005e0 <zero_loop+0x6a>)
 800053e:	f025 0203 	bic.w	r2, r5, #3
 8000542:	1d16      	adds	r6, r2, #4
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
	{
		*(pulDest++) = *(pulSrc++);
 8000544:	6805      	ldr	r5, [r0, #0]
 8000546:	2304      	movs	r3, #4
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 8000548:	42b3      	cmp	r3, r6
	{
		*(pulDest++) = *(pulSrc++);
 800054a:	600d      	str	r5, [r1, #0]
 800054c:	f3c2 0280 	ubfx	r2, r2, #2, #1
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 8000550:	d00d      	beq.n	800056e <Hw_StartUp_Init+0x4a>
 8000552:	b122      	cbz	r2, 800055e <Hw_StartUp_Init+0x3a>
	{
		*(pulDest++) = *(pulSrc++);
 8000554:	6842      	ldr	r2, [r0, #4]
 8000556:	2308      	movs	r3, #8
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 8000558:	42b3      	cmp	r3, r6
	{
		*(pulDest++) = *(pulSrc++);
 800055a:	6022      	str	r2, [r4, #0]
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 800055c:	d007      	beq.n	800056e <Hw_StartUp_Init+0x4a>
	{
		*(pulDest++) = *(pulSrc++);
 800055e:	581d      	ldr	r5, [r3, r0]
 8000560:	1d1a      	adds	r2, r3, #4
 8000562:	505d      	str	r5, [r3, r1]
 8000564:	5884      	ldr	r4, [r0, r2]
 8000566:	3308      	adds	r3, #8
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 8000568:	42b3      	cmp	r3, r6
	{
		*(pulDest++) = *(pulSrc++);
 800056a:	508c      	str	r4, [r1, r2]
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 800056c:	d1f7      	bne.n	800055e <Hw_StartUp_Init+0x3a>
		*(pulDest++) = *(pulSrc++);
	}
  
	/* Zero fill the bss segment.  This is done with inline assembly since this
	   will clear the value of pulDest if it is not kept in a register. */
	__asm("  ldr     r0, =_sbss\n"
 800056e:	481e      	ldr	r0, [pc, #120]	; (80005e8 <zero_loop+0x72>)
 8000570:	491e      	ldr	r1, [pc, #120]	; (80005ec <zero_loop+0x76>)
 8000572:	f04f 0200 	mov.w	r2, #0

08000576 <zero_loop>:
 8000576:	4288      	cmp	r0, r1
 8000578:	bfb8      	it	lt
 800057a:	f840 2b04 	strlt.w	r2, [r0], #4
 800057e:	f6ff affa 	blt.w	8000576 <zero_loop>
	
    // HSI or HSE 선택
            
    //-- CR_HSEON_Set
    //
	REG_RCC_CR |= (1<<16);	
 8000582:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000586:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800058a:	6811      	ldr	r1, [r2, #0]
 800058c:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000590:	f441 3080 	orr.w	r0, r1, #65536	; 0x10000
 8000594:	6010      	str	r0, [r2, #0]
 8000596:	e004      	b.n	80005a2 <zero_loop+0x2c>
		
	//-- 설정된 clock 이 설정 되었는지 확인
	//
	do
	{	
		HSEStatus = REG_RCC_CR & (1<<17);	// HSE 인경우
 8000598:	6810      	ldr	r0, [r2, #0]
		TimeOutCnt++;		
	} while( (HSEStatus == 0) && (TimeOutCnt < 1280) );
 800059a:	0381      	lsls	r1, r0, #14
 800059c:	d405      	bmi.n	80005aa <zero_loop+0x34>
 800059e:	3b01      	subs	r3, #1
 80005a0:	d003      	beq.n	80005aa <zero_loop+0x34>
		
	//-- 설정된 clock 이 설정 되었는지 확인
	//
	do
	{	
		HSEStatus = REG_RCC_CR & (1<<17);	// HSE 인경우
 80005a2:	6811      	ldr	r1, [r2, #0]
 80005a4:	3b01      	subs	r3, #1
		TimeOutCnt++;		
	} while( (HSEStatus == 0) && (TimeOutCnt < 1280) );
 80005a6:	0388      	lsls	r0, r1, #14
 80005a8:	d5f6      	bpl.n	8000598 <zero_loop+0x22>
  

	//-- FLASH Access 타이밍 설정
	//
	REG_FLASH_ACR |=  (1<<4);	// Prefetch buffer enable
 80005aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005ae:	f2c4 0102 	movt	r1, #16386	; 0x4002
 80005b2:	680a      	ldr	r2, [r1, #0]
 80005b4:	f042 0010 	orr.w	r0, r2, #16
 80005b8:	6008      	str	r0, [r1, #0]
	REG_FLASH_ACR &= ~(3<<0);	// LATENCY Clear
 80005ba:	680b      	ldr	r3, [r1, #0]
 80005bc:	f023 0203 	bic.w	r2, r3, #3
 80005c0:	600a      	str	r2, [r1, #0]
	REG_FLASH_ACR |=  (2<<0);	// LATENCY = two wait
 80005c2:	6808      	ldr	r0, [r1, #0]
 80005c4:	f040 0302 	orr.w	r3, r0, #2
 80005c8:	600b      	str	r3, [r1, #0]


    main();
 80005ca:	4906      	ldr	r1, [pc, #24]	; (80005e4 <zero_loop+0x6e>)
 80005cc:	4788      	blx	r1

}
 80005ce:	e8bd 4079 	ldmia.w	sp!, {r0, r3, r4, r5, r6, lr}
 80005d2:	4685      	mov	sp, r0
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	20000000 	.word	0x20000000
 80005dc:	200000e4 	.word	0x200000e4
 80005e0:	08002f08 	.word	0x08002f08
 80005e4:	08000009 	.word	0x08000009
 80005e8:	20000200 	.word	0x20000200
 80005ec:	20001360 	.word	0x20001360

080005f0 <Hw_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Init( void )
{
 80005f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	//-- PLL 설정
	//
	Hw_PLL_Init();
 80005f2:	f640 1381 	movw	r3, #2433	; 0x981
 80005f6:	f6c0 0300 	movt	r3, #2048	; 0x800
 80005fa:	4798      	blx	r3
	
	
	//-- 인터럽트 관련 초기화
	//
	Hw_ISR_Init();
 80005fc:	f640 2015 	movw	r0, #2581	; 0xa15
 8000600:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000604:	4780      	blx	r0
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
 8000606:	f640 0604 	movw	r6, #2052	; 0x804
	Hw_ISR_Init();
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
 800060a:	f44f 6e00 	mov.w	lr, #2048	; 0x800
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
 800060e:	f243 47b3 	movw	r7, #13491	; 0x34b3
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
 8000612:	f44f 6540 	mov.w	r5, #3072	; 0xc00
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
 8000616:	f640 4404 	movw	r4, #3076	; 0xc04
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
 800061a:	f241 0104 	movw	r1, #4100	; 0x1004
 800061e:	f244 4044 	movw	r0, #17476	; 0x4444
	Hw_ISR_Init();
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
 8000622:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8000626:	f2c4 0e01 	movt	lr, #16385	; 0x4001
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
 800062a:	f2c3 3044 	movt	r0, #13124	; 0x3344
 800062e:	f2c4 0101 	movt	r1, #16385	; 0x4001
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
 8000632:	f2c4 0601 	movt	r6, #16385	; 0x4001
 8000636:	f2c3 3733 	movt	r7, #13107	; 0x3333
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
 800063a:	f2c4 0501 	movt	r5, #16385	; 0x4001
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
 800063e:	f2c4 0401 	movt	r4, #16385	; 0x4001
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
	
	//Hw_DMA_Init();
	Hw_Uart_Init();
 8000642:	f640 03b1 	movw	r3, #2225	; 0x8b1
	Hw_ISR_Init();
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
 8000646:	f8ce 2000 	str.w	r2, [lr]
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
	
	//Hw_DMA_Init();
	Hw_Uart_Init();
 800064a:	f6c0 0300 	movt	r3, #2048	; 0x800
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
 800064e:	6037      	str	r7, [r6, #0]
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
 8000650:	602a      	str	r2, [r5, #0]
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
 8000652:	6022      	str	r2, [r4, #0]
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
 8000654:	6008      	str	r0, [r1, #0]
	
	//Hw_DMA_Init();
	Hw_Uart_Init();
 8000656:	4798      	blx	r3
	Hw_Timer_Init();
 8000658:	f640 2181 	movw	r1, #2689	; 0xa81
 800065c:	f6c0 0100 	movt	r1, #2048	; 0x800
 8000660:	4788      	blx	r1
	Hw_VCom_Init();
 8000662:	f640 706d 	movw	r0, #3949	; 0xf6d
 8000666:	f6c0 0000 	movt	r0, #2048	; 0x800
 800066a:	4780      	blx	r0
	Hw_Led_Init();	
 800066c:	f640 7255 	movw	r2, #3925	; 0xf55
 8000670:	f6c0 0200 	movt	r2, #2048	; 0x800
 8000674:	4790      	blx	r2
 8000676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000678 <Hw_ISR_UART2_Handler>:


//-- UART2 ISR
//
void Hw_ISR_UART2_Handler(void)
{
 8000678:	b500      	push	{lr}
	u8 UartData;
				
	UartData = REG_USART2_DR;
 800067a:	f244 4304 	movw	r3, #17412	; 0x4404
 800067e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000682:	6818      	ldr	r0, [r3, #0]


//-- UART2 ISR
//
void Hw_ISR_UART2_Handler(void)
{
 8000684:	b083      	sub	sp, #12
	u8 UartData;
				
	UartData = REG_USART2_DR;
 8000686:	a902      	add	r1, sp, #8
 8000688:	f801 0d01 	strb.w	r0, [r1, #-1]!
	

	Hw_Uart_Q_Push( 1, &UartData );
 800068c:	4a05      	ldr	r2, [pc, #20]	; (80006a4 <Hw_ISR_UART2_Handler+0x2c>)
 800068e:	2001      	movs	r0, #1
 8000690:	4790      	blx	r2

	if( Hw_Uart_Ch[HW_UART_COM2].ISR_FuncPtr != NULL )
 8000692:	4905      	ldr	r1, [pc, #20]	; (80006a8 <Hw_ISR_UART2_Handler+0x30>)
 8000694:	694b      	ldr	r3, [r1, #20]
 8000696:	b113      	cbz	r3, 800069e <Hw_ISR_UART2_Handler+0x26>
	{
		(*Hw_Uart_Ch[HW_UART_COM2].ISR_FuncPtr)(UartData);	
 8000698:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800069c:	4798      	blx	r3
	} 
}
 800069e:	b003      	add	sp, #12
 80006a0:	bd00      	pop	{pc}
 80006a2:	bf00      	nop
 80006a4:	08000e65 	.word	0x08000e65
 80006a8:	20000364 	.word	0x20000364

080006ac <Hw_ISR_UART1_Handler>:


//-- UART1 ISR
//
void Hw_ISR_UART1_Handler(void)
{
 80006ac:	b500      	push	{lr}
	u8 UartData;
				
	UartData = REG_USART1_DR;
 80006ae:	f643 0304 	movw	r3, #14340	; 0x3804
 80006b2:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80006b6:	6818      	ldr	r0, [r3, #0]


//-- UART1 ISR
//
void Hw_ISR_UART1_Handler(void)
{
 80006b8:	b083      	sub	sp, #12
	u8 UartData;
				
	UartData = REG_USART1_DR;
 80006ba:	a902      	add	r1, sp, #8
 80006bc:	f801 0d01 	strb.w	r0, [r1, #-1]!
	
	Hw_Uart_Q_Push( 0, &UartData );
 80006c0:	4a05      	ldr	r2, [pc, #20]	; (80006d8 <Hw_ISR_UART1_Handler+0x2c>)
 80006c2:	2000      	movs	r0, #0
 80006c4:	4790      	blx	r2

	if( Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr != NULL )
 80006c6:	4905      	ldr	r1, [pc, #20]	; (80006dc <Hw_ISR_UART1_Handler+0x30>)
 80006c8:	688b      	ldr	r3, [r1, #8]
 80006ca:	b113      	cbz	r3, 80006d2 <Hw_ISR_UART1_Handler+0x26>
	{
		(*Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr)(UartData);	
 80006cc:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80006d0:	4798      	blx	r3
	} 
}
 80006d2:	b003      	add	sp, #12
 80006d4:	bd00      	pop	{pc}
 80006d6:	bf00      	nop
 80006d8:	08000e65 	.word	0x08000e65
 80006dc:	20000364 	.word	0x20000364

080006e0 <Hw_Uart_Putch.part.0>:
void Hw_Uart_Putch( u8 Ch,  char Uart_PutData )
{
	switch( Ch )
	{
		case HW_UART_COM1:
		    while( !(REG_USART1_SR & 0x80) );
 80006e0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80006e4:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80006e8:	6813      	ldr	r3, [r2, #0]
 80006ea:	061b      	lsls	r3, r3, #24
 80006ec:	d5fc      	bpl.n	80006e8 <Hw_Uart_Putch.part.0+0x8>
    		REG_USART1_DR = Uart_PutData;
 80006ee:	f643 0104 	movw	r1, #14340	; 0x3804
 80006f2:	f2c4 0101 	movt	r1, #16385	; 0x4001
 80006f6:	6008      	str	r0, [r1, #0]
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop

080006fc <Hw_Uart_DeInit>:
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_DeInit( void )
{
	//-- COM1
	CLR_BIT( REG_RCC_APB2ENR, 14 );				// USART1 Clock Disable
 80006fc:	f241 0318 	movw	r3, #4120	; 0x1018
 8000700:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000704:	6819      	ldr	r1, [r3, #0]
	CLR_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 비활성화
 8000706:	f24e 1204 	movw	r2, #57604	; 0xe104
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_DeInit( void )
{
	//-- COM1
	CLR_BIT( REG_RCC_APB2ENR, 14 );				// USART1 Clock Disable
 800070a:	f421 4080 	bic.w	r0, r1, #16384	; 0x4000
 800070e:	6018      	str	r0, [r3, #0]
	CLR_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 비활성화
 8000710:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8000714:	6811      	ldr	r1, [r2, #0]
	CLR_BIT( REG_USART1_CR1, 5 );				// RX 인터럽트 비활성화
 8000716:	f643 030c 	movw	r3, #14348	; 0x380c
---------------------------------------------------------------------------*/
void Hw_Uart_DeInit( void )
{
	//-- COM1
	CLR_BIT( REG_RCC_APB2ENR, 14 );				// USART1 Clock Disable
	CLR_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 비활성화
 800071a:	f021 0020 	bic.w	r0, r1, #32
 800071e:	6010      	str	r0, [r2, #0]
	CLR_BIT( REG_USART1_CR1, 5 );				// RX 인터럽트 비활성화
 8000720:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000724:	6818      	ldr	r0, [r3, #0]
	CLR_BIT( REG_USART1_CR1, 13 );	    		// USART Disable

	//-- COM2
	CLR_BIT( REG_RCC_APB1ENR, 17 );				// USART2 Clock Disable
 8000726:	f241 011c 	movw	r1, #4124	; 0x101c
void Hw_Uart_DeInit( void )
{
	//-- COM1
	CLR_BIT( REG_RCC_APB2ENR, 14 );				// USART1 Clock Disable
	CLR_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 비활성화
	CLR_BIT( REG_USART1_CR1, 5 );				// RX 인터럽트 비활성화
 800072a:	f020 0020 	bic.w	r0, r0, #32
 800072e:	6018      	str	r0, [r3, #0]
	CLR_BIT( REG_USART1_CR1, 13 );	    		// USART Disable
 8000730:	6818      	ldr	r0, [r3, #0]

	//-- COM2
	CLR_BIT( REG_RCC_APB1ENR, 17 );				// USART2 Clock Disable
 8000732:	f2c4 0102 	movt	r1, #16386	; 0x4002
{
	//-- COM1
	CLR_BIT( REG_RCC_APB2ENR, 14 );				// USART1 Clock Disable
	CLR_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 비활성화
	CLR_BIT( REG_USART1_CR1, 5 );				// RX 인터럽트 비활성화
	CLR_BIT( REG_USART1_CR1, 13 );	    		// USART Disable
 8000736:	f420 5000 	bic.w	r0, r0, #8192	; 0x2000
 800073a:	6018      	str	r0, [r3, #0]

	//-- COM2
	CLR_BIT( REG_RCC_APB1ENR, 17 );				// USART2 Clock Disable
 800073c:	6808      	ldr	r0, [r1, #0]
	CLR_BIT( REG_NVIC_ISER( 38/32 ), 38%32 );	// NVIC 37번 USART1 인터럽트 비활성화
	CLR_BIT( REG_USART2_CR1, 5 );				// RX 인터럽트 비활성화	
 800073e:	f244 430c 	movw	r3, #17420	; 0x440c
	CLR_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 비활성화
	CLR_BIT( REG_USART1_CR1, 5 );				// RX 인터럽트 비활성화
	CLR_BIT( REG_USART1_CR1, 13 );	    		// USART Disable

	//-- COM2
	CLR_BIT( REG_RCC_APB1ENR, 17 );				// USART2 Clock Disable
 8000742:	f420 3000 	bic.w	r0, r0, #131072	; 0x20000
 8000746:	6008      	str	r0, [r1, #0]
	CLR_BIT( REG_NVIC_ISER( 38/32 ), 38%32 );	// NVIC 37번 USART1 인터럽트 비활성화
 8000748:	6811      	ldr	r1, [r2, #0]
	CLR_BIT( REG_USART2_CR1, 5 );				// RX 인터럽트 비활성화	
 800074a:	f2c4 0300 	movt	r3, #16384	; 0x4000
	CLR_BIT( REG_USART1_CR1, 5 );				// RX 인터럽트 비활성화
	CLR_BIT( REG_USART1_CR1, 13 );	    		// USART Disable

	//-- COM2
	CLR_BIT( REG_RCC_APB1ENR, 17 );				// USART2 Clock Disable
	CLR_BIT( REG_NVIC_ISER( 38/32 ), 38%32 );	// NVIC 37번 USART1 인터럽트 비활성화
 800074e:	f021 0040 	bic.w	r0, r1, #64	; 0x40
 8000752:	6010      	str	r0, [r2, #0]
	CLR_BIT( REG_USART2_CR1, 5 );				// RX 인터럽트 비활성화	
 8000754:	681a      	ldr	r2, [r3, #0]
 8000756:	f022 0120 	bic.w	r1, r2, #32
 800075a:	6019      	str	r1, [r3, #0]
	CLR_BIT( REG_USART2_CR1, 13 );	    		// USART Disable
 800075c:	6818      	ldr	r0, [r3, #0]
 800075e:	f420 5200 	bic.w	r2, r0, #8192	; 0x2000
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop

08000768 <Hw_Uart_Open_COM1>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Open_COM1( u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	
 8000768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr = ISR_FuncPtr;
	
	
	//-- Clock Enable
	//
	SET_BIT( REG_RCC_APB2ENR, 14 );		// USART1 Clock Enable
 800076c:	f241 0618 	movw	r6, #4120	; 0x1018
 8000770:	f2c4 0602 	movt	r6, #16386	; 0x4002
 8000774:	6835      	ldr	r5, [r6, #0]
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Open_COM1( u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	

	Hw_Uart_Ch[HW_UART_COM1].Baud 		 = BaudData;
 8000776:	f240 3364 	movw	r3, #868	; 0x364
 800077a:	f2c2 0300 	movt	r3, #8192	; 0x2000
	//
	
	
	//-- USART1 설정
	//	
	REG_USART1_CR1  = 0 
 800077e:	f643 040c 	movw	r4, #14348	; 0x380c
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART1_CR2  = ( 0 << 12 );		// 1 stop bit	
 8000782:	f643 0c10 	movw	ip, #14352	; 0x3810
	REG_USART1_CR3  = 0;
 8000786:	f643 0e14 	movw	lr, #14356	; 0x3814
	
	
	//-- 115200bps로 통신 속도 설정
	//
	REG_USART1_BRR  = 0
 800078a:	f643 0708 	movw	r7, #14344	; 0x3808
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Open_COM1( u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	

	Hw_Uart_Ch[HW_UART_COM1].Baud 		 = BaudData;
 800078e:	6058      	str	r0, [r3, #4]
	Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr = ISR_FuncPtr;
 8000790:	6099      	str	r1, [r3, #8]
	//
	
	
	//-- USART1 설정
	//	
	REG_USART1_CR1  = 0 
 8000792:	f2c4 0401 	movt	r4, #16385	; 0x4001
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART1_CR2  = ( 0 << 12 );		// 1 stop bit	
 8000796:	2200      	movs	r2, #0
	Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr = ISR_FuncPtr;
	
	
	//-- Clock Enable
	//
	SET_BIT( REG_RCC_APB2ENR, 14 );		// USART1 Clock Enable
 8000798:	f445 4880 	orr.w	r8, r5, #16384	; 0x4000
	REG_USART1_CR1  = 0 
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART1_CR2  = ( 0 << 12 );		// 1 stop bit	
 800079c:	f2c4 0c01 	movt	ip, #16385	; 0x4001
	REG_USART1_CR3  = 0;
 80007a0:	f2c4 0e01 	movt	lr, #16385	; 0x4001
	//
	
	
	//-- USART1 설정
	//	
	REG_USART1_CR1  = 0 
 80007a4:	200c      	movs	r0, #12
	REG_USART1_CR3  = 0;
	
	
	//-- 115200bps로 통신 속도 설정
	//
	REG_USART1_BRR  = 0
 80007a6:	f240 2171 	movw	r1, #625	; 0x271
 80007aa:	f2c4 0701 	movt	r7, #16385	; 0x4001
					| (  1 << 0 );		// DIV Fraction
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
 80007ae:	f24e 1504 	movw	r5, #57604	; 0xe104
	Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr = ISR_FuncPtr;
	
	
	//-- Clock Enable
	//
	SET_BIT( REG_RCC_APB2ENR, 14 );		// USART1 Clock Enable
 80007b2:	f8c6 8000 	str.w	r8, [r6]
					| (  1 << 0 );		// DIV Fraction
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
 80007b6:	f2ce 0500 	movt	r5, #57344	; 0xe000
	//
	
	
	//-- USART1 설정
	//	
	REG_USART1_CR1  = 0 
 80007ba:	6020      	str	r0, [r4, #0]
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART1_CR2  = ( 0 << 12 );		// 1 stop bit	
 80007bc:	f8cc 2000 	str.w	r2, [ip]
	REG_USART1_CR3  = 0;
 80007c0:	f8ce 2000 	str.w	r2, [lr]
	
	
	//-- 115200bps로 통신 속도 설정
	//
	REG_USART1_BRR  = 0
 80007c4:	6039      	str	r1, [r7, #0]
					| (  1 << 0 );		// DIV Fraction
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
 80007c6:	682b      	ldr	r3, [r5, #0]
 80007c8:	f043 0020 	orr.w	r0, r3, #32
 80007cc:	6028      	str	r0, [r5, #0]
	SET_BIT( REG_USART1_CR1, 5 );				// RX 인터럽트 활성화
 80007ce:	6821      	ldr	r1, [r4, #0]
	
	Hw_ISR_SetIRQFunc( 37, (u32)Hw_ISR_UART1_Handler, 0 );
 80007d0:	f640 2329 	movw	r3, #2601	; 0xa29
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
	SET_BIT( REG_USART1_CR1, 5 );				// RX 인터럽트 활성화
 80007d4:	f041 0020 	orr.w	r0, r1, #32
	
	Hw_ISR_SetIRQFunc( 37, (u32)Hw_ISR_UART1_Handler, 0 );
 80007d8:	f240 61ad 	movw	r1, #1709	; 0x6ad
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
	SET_BIT( REG_USART1_CR1, 5 );				// RX 인터럽트 활성화
 80007dc:	6020      	str	r0, [r4, #0]
	
	Hw_ISR_SetIRQFunc( 37, (u32)Hw_ISR_UART1_Handler, 0 );
 80007de:	f6c0 0100 	movt	r1, #2048	; 0x800
 80007e2:	2025      	movs	r0, #37	; 0x25
 80007e4:	f6c0 0300 	movt	r3, #2048	; 0x800
 80007e8:	4798      	blx	r3
	
	REG_USART1_CR1 |= ( 1 << 13 );	    // USART Enable
 80007ea:	6822      	ldr	r2, [r4, #0]
 80007ec:	f442 5100 	orr.w	r1, r2, #8192	; 0x2000
 80007f0:	6021      	str	r1, [r4, #0]
 80007f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80007f6:	bf00      	nop

080007f8 <Hw_Uart_Open_COM2>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Open_COM2( u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	
 80007f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	Hw_Uart_Ch[HW_UART_COM2].ISR_FuncPtr = ISR_FuncPtr;
	
	
	//-- Clock Enable
	//
	SET_BIT( REG_RCC_APB1ENR, 17 );		// USART2 Clock Enable	PCLK2 = 72Mhz
 80007fa:	f241 041c 	movw	r4, #4124	; 0x101c
 80007fe:	f2c4 0402 	movt	r4, #16386	; 0x4002
 8000802:	6825      	ldr	r5, [r4, #0]
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Open_COM2( u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	

	Hw_Uart_Ch[HW_UART_COM2].Baud 		 = BaudData;
 8000804:	f240 3264 	movw	r2, #868	; 0x364
 8000808:	f2c2 0200 	movt	r2, #8192	; 0x2000
	Hw_Uart_Ch[HW_UART_COM2].ISR_FuncPtr = ISR_FuncPtr;
	
	
	//-- Clock Enable
	//
	SET_BIT( REG_RCC_APB1ENR, 17 );		// USART2 Clock Enable	PCLK2 = 72Mhz
 800080c:	f445 3600 	orr.w	r6, r5, #131072	; 0x20000
	
	//-- I/O Port 설정
	//
	
	// PA2 - TX
	REG_GPIOA_CRL &= ~(0x0F << ( 8));	// Clear
 8000810:	f44f 6300 	mov.w	r3, #2048	; 0x800
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Open_COM2( u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	

	Hw_Uart_Ch[HW_UART_COM2].Baud 		 = BaudData;
 8000814:	6110      	str	r0, [r2, #16]
	Hw_Uart_Ch[HW_UART_COM2].ISR_FuncPtr = ISR_FuncPtr;
 8000816:	6151      	str	r1, [r2, #20]
	
	//-- I/O Port 설정
	//
	
	// PA2 - TX
	REG_GPIOA_CRL &= ~(0x0F << ( 8));	// Clear
 8000818:	f2c4 0301 	movt	r3, #16385	; 0x4001
	Hw_Uart_Ch[HW_UART_COM2].ISR_FuncPtr = ISR_FuncPtr;
	
	
	//-- Clock Enable
	//
	SET_BIT( REG_RCC_APB1ENR, 17 );		// USART2 Clock Enable	PCLK2 = 72Mhz
 800081c:	6026      	str	r6, [r4, #0]
	
	//-- I/O Port 설정
	//
	
	// PA2 - TX
	REG_GPIOA_CRL &= ~(0x0F << ( 8));	// Clear
 800081e:	6818      	ldr	r0, [r3, #0]
	REG_GPIOA_CRL |=  (0x01 << (14));	// CNF    - Floating input	
	

	//-- USART2 설정
	//	
	REG_USART2_CR1  = 0 
 8000820:	f244 440c 	movw	r4, #17420	; 0x440c
	
	//-- I/O Port 설정
	//
	
	// PA2 - TX
	REG_GPIOA_CRL &= ~(0x0F << ( 8));	// Clear
 8000824:	f420 6170 	bic.w	r1, r0, #3840	; 0xf00
 8000828:	6019      	str	r1, [r3, #0]
	REG_GPIOA_CRL |=  (0x03 << ( 8));	// MODE   - Output mode, max speed 50Mhz
 800082a:	681f      	ldr	r7, [r3, #0]
	REG_GPIOA_CRL |=  (0x01 << (14));	// CNF    - Floating input	
	

	//-- USART2 설정
	//	
	REG_USART2_CR1  = 0 
 800082c:	f2c4 0400 	movt	r4, #16384	; 0x4000
	//-- I/O Port 설정
	//
	
	// PA2 - TX
	REG_GPIOA_CRL &= ~(0x0F << ( 8));	// Clear
	REG_GPIOA_CRL |=  (0x03 << ( 8));	// MODE   - Output mode, max speed 50Mhz
 8000830:	f447 7540 	orr.w	r5, r7, #768	; 0x300
 8000834:	601d      	str	r5, [r3, #0]
	REG_GPIOA_CRL |=  (0x02 << (10));	// CNF    - Alternate function output Push-pull
 8000836:	681a      	ldr	r2, [r3, #0]
	REG_USART2_CR1  = 0 
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART2_CR2  = ( 0 << 12 );		// 1 stop bit	
 8000838:	f244 4610 	movw	r6, #17424	; 0x4410
	//
	
	// PA2 - TX
	REG_GPIOA_CRL &= ~(0x0F << ( 8));	// Clear
	REG_GPIOA_CRL |=  (0x03 << ( 8));	// MODE   - Output mode, max speed 50Mhz
	REG_GPIOA_CRL |=  (0x02 << (10));	// CNF    - Alternate function output Push-pull
 800083c:	f442 6000 	orr.w	r0, r2, #2048	; 0x800
 8000840:	6018      	str	r0, [r3, #0]
										     	    	
	// PA3 - RX
	REG_GPIOA_CRL &= ~(0x0F << (12));	// Clear
 8000842:	6819      	ldr	r1, [r3, #0]
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART2_CR2  = ( 0 << 12 );		// 1 stop bit	
	REG_USART2_CR3  = 0;
 8000844:	f244 4514 	movw	r5, #17428	; 0x4414
	REG_GPIOA_CRL &= ~(0x0F << ( 8));	// Clear
	REG_GPIOA_CRL |=  (0x03 << ( 8));	// MODE   - Output mode, max speed 50Mhz
	REG_GPIOA_CRL |=  (0x02 << (10));	// CNF    - Alternate function output Push-pull
										     	    	
	// PA3 - RX
	REG_GPIOA_CRL &= ~(0x0F << (12));	// Clear
 8000848:	f421 4770 	bic.w	r7, r1, #61440	; 0xf000
 800084c:	601f      	str	r7, [r3, #0]
	REG_GPIOA_CRL |=  (0x00 << (12));	// MODE   - Input mode
 800084e:	681a      	ldr	r2, [r3, #0]
	REG_USART2_CR3  = 0;
	
	
	//-- 115200bps로 통신 속도 설정
	//
	REG_USART2_BRR  = 0
 8000850:	f244 4008 	movw	r0, #17416	; 0x4408
	REG_GPIOA_CRL |=  (0x03 << ( 8));	// MODE   - Output mode, max speed 50Mhz
	REG_GPIOA_CRL |=  (0x02 << (10));	// CNF    - Alternate function output Push-pull
										     	    	
	// PA3 - RX
	REG_GPIOA_CRL &= ~(0x0F << (12));	// Clear
	REG_GPIOA_CRL |=  (0x00 << (12));	// MODE   - Input mode
 8000854:	601a      	str	r2, [r3, #0]
	REG_GPIOA_CRL |=  (0x01 << (14));	// CNF    - Floating input	
 8000856:	6819      	ldr	r1, [r3, #0]
	REG_USART2_CR1  = 0 
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART2_CR2  = ( 0 << 12 );		// 1 stop bit	
 8000858:	2200      	movs	r2, #0
	REG_GPIOA_CRL |=  (0x02 << (10));	// CNF    - Alternate function output Push-pull
										     	    	
	// PA3 - RX
	REG_GPIOA_CRL &= ~(0x0F << (12));	// Clear
	REG_GPIOA_CRL |=  (0x00 << (12));	// MODE   - Input mode
	REG_GPIOA_CRL |=  (0x01 << (14));	// CNF    - Floating input	
 800085a:	f441 4780 	orr.w	r7, r1, #16384	; 0x4000
 800085e:	601f      	str	r7, [r3, #0]
	

	//-- USART2 설정
	//	
	REG_USART2_CR1  = 0 
 8000860:	230c      	movs	r3, #12
 8000862:	6023      	str	r3, [r4, #0]
	REG_USART2_CR3  = 0;
	
	
	//-- 115200bps로 통신 속도 설정
	//
	REG_USART2_BRR  = 0
 8000864:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000868:	f44f 739c 	mov.w	r3, #312	; 0x138
	REG_USART2_CR1  = 0 
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART2_CR2  = ( 0 << 12 );		// 1 stop bit	
 800086c:	f2c4 0600 	movt	r6, #16384	; 0x4000
	REG_USART2_CR3  = 0;
 8000870:	f2c4 0500 	movt	r5, #16384	; 0x4000
					| (  8 << 0 );		// DIV Fraction
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 38/32 ), 38%32 );	// NVIC 37번 USART1 인터럽트 활성화
 8000874:	f24e 1104 	movw	r1, #57604	; 0xe104
	REG_USART2_CR1  = 0 
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART2_CR2  = ( 0 << 12 );		// 1 stop bit	
 8000878:	6032      	str	r2, [r6, #0]
					| (  8 << 0 );		// DIV Fraction
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 38/32 ), 38%32 );	// NVIC 37번 USART1 인터럽트 활성화
 800087a:	f2ce 0100 	movt	r1, #57344	; 0xe000
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART2_CR2  = ( 0 << 12 );		// 1 stop bit	
	REG_USART2_CR3  = 0;
 800087e:	602a      	str	r2, [r5, #0]
	
	
	//-- 115200bps로 통신 속도 설정
	//
	REG_USART2_BRR  = 0
 8000880:	6003      	str	r3, [r0, #0]
					| (  8 << 0 );		// DIV Fraction
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 38/32 ), 38%32 );	// NVIC 37번 USART1 인터럽트 활성화
 8000882:	6808      	ldr	r0, [r1, #0]
 8000884:	f040 0340 	orr.w	r3, r0, #64	; 0x40
 8000888:	600b      	str	r3, [r1, #0]
	SET_BIT( REG_USART2_CR1, 5 );				// RX 인터럽트 활성화
 800088a:	6821      	ldr	r1, [r4, #0]
	
	Hw_ISR_SetIRQFunc( 38, (u32)Hw_ISR_UART2_Handler, 0 );
 800088c:	f640 2329 	movw	r3, #2601	; 0xa29
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 38/32 ), 38%32 );	// NVIC 37번 USART1 인터럽트 활성화
	SET_BIT( REG_USART2_CR1, 5 );				// RX 인터럽트 활성화
 8000890:	f041 0020 	orr.w	r0, r1, #32
	
	Hw_ISR_SetIRQFunc( 38, (u32)Hw_ISR_UART2_Handler, 0 );
 8000894:	f240 6179 	movw	r1, #1657	; 0x679
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 38/32 ), 38%32 );	// NVIC 37번 USART1 인터럽트 활성화
	SET_BIT( REG_USART2_CR1, 5 );				// RX 인터럽트 활성화
 8000898:	6020      	str	r0, [r4, #0]
	
	Hw_ISR_SetIRQFunc( 38, (u32)Hw_ISR_UART2_Handler, 0 );
 800089a:	f6c0 0100 	movt	r1, #2048	; 0x800
 800089e:	2026      	movs	r0, #38	; 0x26
 80008a0:	f6c0 0300 	movt	r3, #2048	; 0x800
 80008a4:	4798      	blx	r3
	
	REG_USART2_CR1 |= ( 1 << 13 );	    // USART Enable
 80008a6:	6822      	ldr	r2, [r4, #0]
 80008a8:	f442 5100 	orr.w	r1, r2, #8192	; 0x2000
 80008ac:	6021      	str	r1, [r4, #0]
 80008ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080008b0 <Hw_Uart_Init>:
---------------------------------------------------------------------------*/
void Hw_Uart_Init( void )
{
	u32 i;
	
	Hw_Uart_Q_Init();
 80008b0:	f640 6305 	movw	r3, #3589	; 0xe05
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Init( void )
{
 80008b4:	b510      	push	{r4, lr}
	u32 i;
	
	Hw_Uart_Q_Init();
 80008b6:	f6c0 0300 	movt	r3, #2048	; 0x800
 80008ba:	4798      	blx	r3
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 80008bc:	f240 3364 	movw	r3, #868	; 0x364
 80008c0:	2400      	movs	r4, #0
 80008c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
void Hw_Uart_Open( u8 Ch, u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	
	switch( Ch )
	{
		case HW_UART_COM1:
			Hw_Uart_Open_COM1( BaudData, ISR_FuncPtr );
 80008c6:	f240 7269 	movw	r2, #1897	; 0x769
 80008ca:	4621      	mov	r1, r4
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 80008cc:	605c      	str	r4, [r3, #4]
		Hw_Uart_Ch[i].ISR_FuncPtr = NULL;
 80008ce:	609c      	str	r4, [r3, #8]
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 80008d0:	611c      	str	r4, [r3, #16]
		Hw_Uart_Ch[i].ISR_FuncPtr = NULL;
 80008d2:	615c      	str	r4, [r3, #20]
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 80008d4:	61dc      	str	r4, [r3, #28]
		Hw_Uart_Ch[i].ISR_FuncPtr = NULL;
 80008d6:	621c      	str	r4, [r3, #32]
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 80008d8:	629c      	str	r4, [r3, #40]	; 0x28
		Hw_Uart_Ch[i].ISR_FuncPtr = NULL;
 80008da:	62dc      	str	r4, [r3, #44]	; 0x2c
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 80008dc:	635c      	str	r4, [r3, #52]	; 0x34
		Hw_Uart_Ch[i].ISR_FuncPtr = NULL;
 80008de:	639c      	str	r4, [r3, #56]	; 0x38
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 80008e0:	641c      	str	r4, [r3, #64]	; 0x40
		Hw_Uart_Ch[i].ISR_FuncPtr = NULL;
 80008e2:	645c      	str	r4, [r3, #68]	; 0x44
void Hw_Uart_Open( u8 Ch, u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	
	switch( Ch )
	{
		case HW_UART_COM1:
			Hw_Uart_Open_COM1( BaudData, ISR_FuncPtr );
 80008e4:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 80008e8:	f6c0 0200 	movt	r2, #2048	; 0x800
 80008ec:	4790      	blx	r2
			break;
			
		case HW_UART_COM2:
			Hw_Uart_Open_COM2( BaudData, ISR_FuncPtr );
 80008ee:	f240 73f9 	movw	r3, #2041	; 0x7f9
 80008f2:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 80008f6:	4621      	mov	r1, r4
 80008f8:	f6c0 0300 	movt	r3, #2048	; 0x800
 80008fc:	4798      	blx	r3
 80008fe:	bd10      	pop	{r4, pc}

08000900 <Hw_Uart_Getch>:
			: 시리얼 포트에서 문자 1바이트 읽는다.
     ARG
     RET
---------------------------------------------------------------------------*/
u8 Hw_Uart_Getch( u8 Ch )
{
 8000900:	b530      	push	{r4, r5, lr}
	u8 Uart_GetData = 0;
 8000902:	2300      	movs	r3, #0
			: 시리얼 포트에서 문자 1바이트 읽는다.
     ARG
     RET
---------------------------------------------------------------------------*/
u8 Hw_Uart_Getch( u8 Ch )
{
 8000904:	b083      	sub	sp, #12
	u8 Uart_GetData = 0;

	if( Ch == HW_UART_VCOM )
 8000906:	2805      	cmp	r0, #5
			: 시리얼 포트에서 문자 1바이트 읽는다.
     ARG
     RET
---------------------------------------------------------------------------*/
u8 Hw_Uart_Getch( u8 Ch )
{
 8000908:	4604      	mov	r4, r0
	u8 Uart_GetData = 0;
 800090a:	f88d 3007 	strb.w	r3, [sp, #7]

	if( Ch == HW_UART_VCOM )
 800090e:	d00d      	beq.n	800092c <Hw_Uart_Getch+0x2c>
 8000910:	4d08      	ldr	r5, [pc, #32]	; (8000934 <Hw_Uart_Getch+0x34>)
	}

	while( 1 )
	{
		// 버퍼에 데이터 들어올때까지 기다린다.
		if( HW_UART_Q_VAILD(Ch) > 0 ) break;
 8000912:	4620      	mov	r0, r4
 8000914:	47a8      	blx	r5
 8000916:	2800      	cmp	r0, #0
 8000918:	d0fb      	beq.n	8000912 <Hw_Uart_Getch+0x12>
	}

	Hw_Uart_Q_Pop( Ch, &Uart_GetData );
 800091a:	4620      	mov	r0, r4
 800091c:	f10d 0107 	add.w	r1, sp, #7
 8000920:	4a05      	ldr	r2, [pc, #20]	; (8000938 <Hw_Uart_Getch+0x38>)
 8000922:	4790      	blx	r2

	return Uart_GetData;
 8000924:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8000928:	b003      	add	sp, #12
 800092a:	bd30      	pop	{r4, r5, pc}
{
	u8 Uart_GetData = 0;

	if( Ch == HW_UART_VCOM )
	{
		return Hw_VCom_Getch();
 800092c:	4803      	ldr	r0, [pc, #12]	; (800093c <Hw_Uart_Getch+0x3c>)
 800092e:	4780      	blx	r0
 8000930:	e7fa      	b.n	8000928 <Hw_Uart_Getch+0x28>
 8000932:	bf00      	nop
 8000934:	08000e35 	.word	0x08000e35
 8000938:	08000edd 	.word	0x08000edd
 800093c:	08000fb5 	.word	0x08000fb5

08000940 <Hw_Uart_Putch>:
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Uart_Putch( u8 Ch,  char Uart_PutData )
{
	switch( Ch )
 8000940:	2801      	cmp	r0, #1
			: 시리얼 포트로 문자 1바이트 전송
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Uart_Putch( u8 Ch,  char Uart_PutData )
{
 8000942:	b508      	push	{r3, lr}
	switch( Ch )
 8000944:	d00a      	beq.n	800095c <Hw_Uart_Putch+0x1c>
 8000946:	d305      	bcc.n	8000954 <Hw_Uart_Putch+0x14>
 8000948:	2805      	cmp	r0, #5
 800094a:	d102      	bne.n	8000952 <Hw_Uart_Putch+0x12>

		case HW_UART_COM5:
			break;		

		case HW_UART_VCOM:
			Hw_VCom_Putch( Uart_PutData );
 800094c:	4608      	mov	r0, r1
 800094e:	4b0a      	ldr	r3, [pc, #40]	; (8000978 <Hw_Uart_Putch+0x38>)
 8000950:	4798      	blx	r3
 8000952:	bd08      	pop	{r3, pc}
 8000954:	4608      	mov	r0, r1
 8000956:	4909      	ldr	r1, [pc, #36]	; (800097c <Hw_Uart_Putch+0x3c>)
 8000958:	4788      	blx	r1
 800095a:	bd08      	pop	{r3, pc}
		    while( !(REG_USART1_SR & 0x80) );
    		REG_USART1_DR = Uart_PutData;
			break;
			
		case HW_UART_COM2:
		    while( !(REG_USART2_SR & 0x80) );
 800095c:	f44f 4288 	mov.w	r2, #17408	; 0x4400
 8000960:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8000964:	6810      	ldr	r0, [r2, #0]
 8000966:	0600      	lsls	r0, r0, #24
 8000968:	d5fc      	bpl.n	8000964 <Hw_Uart_Putch+0x24>
    		REG_USART2_DR = Uart_PutData;
 800096a:	f244 4304 	movw	r3, #17412	; 0x4404
 800096e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000972:	6019      	str	r1, [r3, #0]
			break;
 8000974:	bd08      	pop	{r3, pc}
 8000976:	bf00      	nop
 8000978:	08000fe5 	.word	0x08000fe5
 800097c:	080006e1 	.word	0x080006e1

08000980 <Hw_PLL_Init>:
{
	
#if	CLOCK_EXT == 1
	//-- PLL 설정 72Mhz로 설정함
	//
	REG_RCC_CFGR &= ~(0xF<<18 | 0x1<<17 | 0x1<<16 | 0xF<<4);
 8000980:	f241 0304 	movw	r3, #4100	; 0x1004
 8000984:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000988:	681a      	ldr	r2, [r3, #0]
	REG_RCC_CFGR |=  (0x7<<18 | 0x1<<16);			// 8MHz
    REG_RCC_CR   |=  0x01 << 24;                    // PLLON
 800098a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
{
	
#if	CLOCK_EXT == 1
	//-- PLL 설정 72Mhz로 설정함
	//
	REG_RCC_CFGR &= ~(0xF<<18 | 0x1<<17 | 0x1<<16 | 0xF<<4);
 800098e:	f422 107c 	bic.w	r0, r2, #4128768	; 0x3f0000
 8000992:	f020 02f0 	bic.w	r2, r0, #240	; 0xf0
 8000996:	601a      	str	r2, [r3, #0]
	REG_RCC_CFGR |=  (0x7<<18 | 0x1<<16);			// 8MHz
 8000998:	6818      	ldr	r0, [r3, #0]
    REG_RCC_CR   |=  0x01 << 24;                    // PLLON
 800099a:	f2c4 0102 	movt	r1, #16386	; 0x4002
	
#if	CLOCK_EXT == 1
	//-- PLL 설정 72Mhz로 설정함
	//
	REG_RCC_CFGR &= ~(0xF<<18 | 0x1<<17 | 0x1<<16 | 0xF<<4);
	REG_RCC_CFGR |=  (0x7<<18 | 0x1<<16);			// 8MHz
 800099e:	f440 12e8 	orr.w	r2, r0, #1900544	; 0x1d0000
 80009a2:	601a      	str	r2, [r3, #0]
    REG_RCC_CR   |=  0x01 << 24;                    // PLLON
 80009a4:	680b      	ldr	r3, [r1, #0]

	while( (REG_RCC_CR & (1<<25)) == 0 );			// PLLRDY
 80009a6:	4608      	mov	r0, r1
#if	CLOCK_EXT == 1
	//-- PLL 설정 72Mhz로 설정함
	//
	REG_RCC_CFGR &= ~(0xF<<18 | 0x1<<17 | 0x1<<16 | 0xF<<4);
	REG_RCC_CFGR |=  (0x7<<18 | 0x1<<16);			// 8MHz
    REG_RCC_CR   |=  0x01 << 24;                    // PLLON
 80009a8:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80009ac:	600a      	str	r2, [r1, #0]

	while( (REG_RCC_CR & (1<<25)) == 0 );			// PLLRDY
 80009ae:	6801      	ldr	r1, [r0, #0]
 80009b0:	018b      	lsls	r3, r1, #6
 80009b2:	d5fc      	bpl.n	80009ae <Hw_PLL_Init+0x2e>
    /////Bits 1:0 SW : System clock switch
    //00: HSI selected as system clock
    //01: HSE selected as system clock
    //10: PLL selected as system clock   <----------------- 선택됨
    //11: not allowed
	REG_RCC_CFGR &= ~0x3;
 80009b4:	f241 0304 	movw	r3, #4100	; 0x1004
 80009b8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80009bc:	6818      	ldr	r0, [r3, #0]
	//
	REG_RCC_CFGR &= ~(0x7<<11);
	REG_RCC_CFGR |=  (0x0<<11);

    
    while( (REG_RCC_CFGR & 0xC) != 0x08 );
 80009be:	461a      	mov	r2, r3
    /////Bits 1:0 SW : System clock switch
    //00: HSI selected as system clock
    //01: HSE selected as system clock
    //10: PLL selected as system clock   <----------------- 선택됨
    //11: not allowed
	REG_RCC_CFGR &= ~0x3;
 80009c0:	f020 0103 	bic.w	r1, r0, #3
 80009c4:	6019      	str	r1, [r3, #0]
	REG_RCC_CFGR |=  0x2;
 80009c6:	6818      	ldr	r0, [r3, #0]
 80009c8:	f040 0102 	orr.w	r1, r0, #2
 80009cc:	6019      	str	r1, [r3, #0]

	// USB 72M * 2 / 3 = 48Mhz
	//
	CLR_BIT( REG_RCC_CFGR, 22 );
 80009ce:	6818      	ldr	r0, [r3, #0]
 80009d0:	f420 0180 	bic.w	r1, r0, #4194304	; 0x400000
 80009d4:	6019      	str	r1, [r3, #0]

	// APB1 - PCLK1 36Mhz
	//
	REG_RCC_CFGR &= ~(0x7<<8);
 80009d6:	6818      	ldr	r0, [r3, #0]
 80009d8:	f420 61e0 	bic.w	r1, r0, #1792	; 0x700
 80009dc:	6019      	str	r1, [r3, #0]
	REG_RCC_CFGR |=  (0x4<<8);
 80009de:	6818      	ldr	r0, [r3, #0]
 80009e0:	f440 6180 	orr.w	r1, r0, #1024	; 0x400
 80009e4:	6019      	str	r1, [r3, #0]
	
	// APB2 - PCLK2 72Mhz
	//
	REG_RCC_CFGR &= ~(0x7<<11);
 80009e6:	6818      	ldr	r0, [r3, #0]
 80009e8:	f420 5160 	bic.w	r1, r0, #14336	; 0x3800
 80009ec:	6019      	str	r1, [r3, #0]
	REG_RCC_CFGR |=  (0x0<<11);
 80009ee:	6818      	ldr	r0, [r3, #0]
 80009f0:	6018      	str	r0, [r3, #0]

    
    while( (REG_RCC_CFGR & 0xC) != 0x08 );
 80009f2:	6813      	ldr	r3, [r2, #0]
 80009f4:	f003 010c 	and.w	r1, r3, #12
 80009f8:	2908      	cmp	r1, #8
 80009fa:	d1fa      	bne.n	80009f2 <Hw_PLL_Init+0x72>
    
    //APB2에 있는 UART 등 주변장치에 Clock 소스 동작제어
    //UART가 동작되기 위해서는 GPIO와 Alternation Function IO가 동작상태에 있어야 함
	REG_RCC_APB2ENR |= 0  |
 80009fc:	f241 0018 	movw	r0, #4120	; 0x1018
 8000a00:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000a04:	6802      	ldr	r2, [r0, #0]
 8000a06:	f442 4380 	orr.w	r3, r2, #16384	; 0x4000
 8000a0a:	f043 011d 	orr.w	r1, r3, #29
 8000a0e:	6001      	str	r1, [r0, #0]
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <Hw_ISR_Init>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_ISR_Init( void )
{
	REG_SCB_VTOR = (u32)Hw_ISR_VectorTable;
 8000a14:	f240 4300 	movw	r3, #1024	; 0x400
 8000a18:	f64e 5208 	movw	r2, #60680	; 0xed08
 8000a1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000a20:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8000a24:	6013      	str	r3, [r2, #0]
 8000a26:	4770      	bx	lr

08000a28 <Hw_ISR_SetIRQFunc>:
---------------------------------------------------------------------------*/
void Hw_ISR_SetIRQFunc( u8 ISR_Num, u32 FuncAddress, u8 ISR_Priority )
{	
	u32 ISR_StartOffset = 16;
	
	Hw_ISR_VectorTable[ ISR_StartOffset + ISR_Num ] = FuncAddress;	
 8000a28:	f240 4300 	movw	r3, #1024	; 0x400
 8000a2c:	3010      	adds	r0, #16
 8000a2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000a32:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 8000a36:	4770      	bx	lr

08000a38 <Hw_ISR_SetIRQFuncByAddr>:
---------------------------------------------------------------------------*/
void Hw_ISR_SetIRQFuncByAddr( u32 ISR_Addr, u32 FuncAddress, u8 ISR_Priority )
{	
	u32 ISR_StartOffset = ISR_Addr/4;
	
	Hw_ISR_VectorTable[ ISR_StartOffset ] = FuncAddress;	
 8000a38:	f240 4300 	movw	r3, #1024	; 0x400
     			u8  ISR_Priority : 인터럽트 우선순위(작은값이 우선순위 높음)
     RET     : void
---------------------------------------------------------------------------*/
void Hw_ISR_SetIRQFuncByAddr( u32 ISR_Addr, u32 FuncAddress, u8 ISR_Priority )
{	
	u32 ISR_StartOffset = ISR_Addr/4;
 8000a3c:	0880      	lsrs	r0, r0, #2
	
	Hw_ISR_VectorTable[ ISR_StartOffset ] = FuncAddress;	
 8000a3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000a42:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 8000a46:	4770      	bx	lr

08000a48 <Hw_Timer_DeInit>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_DeInit( void )
{
	CLR_BIT( REG_STK_CTRL, 1 );	// 인터럽트 비활성화		
 8000a48:	f24e 0310 	movw	r3, #57360	; 0xe010
 8000a4c:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000a50:	681a      	ldr	r2, [r3, #0]
 8000a52:	f022 0002 	bic.w	r0, r2, #2
 8000a56:	6018      	str	r0, [r3, #0]
	CLR_BIT( REG_STK_CTRL, 0 );	// Counter Enable
 8000a58:	6819      	ldr	r1, [r3, #0]
 8000a5a:	f021 0201 	bic.w	r2, r1, #1
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop

08000a64 <Hw_Timer_SetupISR>:
     	 	 	 타이머 H/W 기능을 초기화 한다.
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_SetupISR( void )
{	
 8000a64:	b508      	push	{r3, lr}
	Hw_ISR_SetIRQFuncByAddr( 0x003C, (u32)Hw_Timer_ISR, 0 );	
 8000a66:	f640 51e1 	movw	r1, #3553	; 0xde1
 8000a6a:	f640 2339 	movw	r3, #2617	; 0xa39
 8000a6e:	203c      	movs	r0, #60	; 0x3c
 8000a70:	f6c0 0100 	movt	r1, #2048	; 0x800
 8000a74:	2200      	movs	r2, #0
 8000a76:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000a7a:	4798      	blx	r3
 8000a7c:	bd08      	pop	{r3, pc}
 8000a7e:	bf00      	nop

08000a80 <Hw_Timer_Init>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_Init( void )
{
 8000a80:	b538      	push	{r3, r4, r5, lr}
	u8 i;
	static u8 Excute = 0;

	
	if( Excute == 1 ) return;  // 이미 한번 실행했다면 정지.
 8000a82:	4d33      	ldr	r5, [pc, #204]	; (8000b50 <Hw_Timer_Init+0xd0>)
 8000a84:	782b      	ldrb	r3, [r5, #0]
 8000a86:	2b01      	cmp	r3, #1
 8000a88:	d061      	beq.n	8000b4e <Hw_Timer_Init+0xce>
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 8000a8a:	4832      	ldr	r0, [pc, #200]	; (8000b54 <Hw_Timer_Init+0xd4>)
 8000a8c:	2400      	movs	r4, #0
 8000a8e:	7004      	strb	r4, [r0, #0]
		Timer_Tbl[i].Timer_Ctn  = 0;
 8000a90:	8044      	strh	r4, [r0, #2]
		Timer_Tbl[i].Timer_Init = 0;
 8000a92:	8084      	strh	r4, [r0, #4]
		Timer_Tbl[i].TmrFnct    = NULL;
 8000a94:	6084      	str	r4, [r0, #8]
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 8000a96:	7404      	strb	r4, [r0, #16]
		Timer_Tbl[i].Timer_Ctn  = 0;
 8000a98:	8244      	strh	r4, [r0, #18]
		Timer_Tbl[i].Timer_Init = 0;
 8000a9a:	8284      	strh	r4, [r0, #20]
		Timer_Tbl[i].TmrFnct    = NULL;
 8000a9c:	6184      	str	r4, [r0, #24]
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 8000a9e:	f880 4020 	strb.w	r4, [r0, #32]
		Timer_Tbl[i].Timer_Ctn  = 0;
 8000aa2:	8444      	strh	r4, [r0, #34]	; 0x22
		Timer_Tbl[i].Timer_Init = 0;
 8000aa4:	8484      	strh	r4, [r0, #36]	; 0x24
		Timer_Tbl[i].TmrFnct    = NULL;
 8000aa6:	6284      	str	r4, [r0, #40]	; 0x28
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 8000aa8:	f880 4030 	strb.w	r4, [r0, #48]	; 0x30
		Timer_Tbl[i].Timer_Ctn  = 0;
 8000aac:	8644      	strh	r4, [r0, #50]	; 0x32
		Timer_Tbl[i].Timer_Init = 0;
 8000aae:	8684      	strh	r4, [r0, #52]	; 0x34
		Timer_Tbl[i].TmrFnct    = NULL;
 8000ab0:	6384      	str	r4, [r0, #56]	; 0x38
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 8000ab2:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
		Timer_Tbl[i].Timer_Ctn  = 0;
 8000ab6:	f8a0 4042 	strh.w	r4, [r0, #66]	; 0x42
		Timer_Tbl[i].Timer_Init = 0;
 8000aba:	f8a0 4044 	strh.w	r4, [r0, #68]	; 0x44
		Timer_Tbl[i].TmrFnct    = NULL;
 8000abe:	6484      	str	r4, [r0, #72]	; 0x48
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 8000ac0:	f880 4050 	strb.w	r4, [r0, #80]	; 0x50
		Timer_Tbl[i].Timer_Ctn  = 0;
 8000ac4:	f8a0 4052 	strh.w	r4, [r0, #82]	; 0x52
		Timer_Tbl[i].Timer_Init = 0;
 8000ac8:	f8a0 4054 	strh.w	r4, [r0, #84]	; 0x54
		Timer_Tbl[i].TmrFnct    = NULL;
 8000acc:	6584      	str	r4, [r0, #88]	; 0x58
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 8000ace:	f880 4060 	strb.w	r4, [r0, #96]	; 0x60
		Timer_Tbl[i].Timer_Ctn  = 0;
 8000ad2:	f8a0 4062 	strh.w	r4, [r0, #98]	; 0x62
		Timer_Tbl[i].Timer_Init = 0;
 8000ad6:	f8a0 4064 	strh.w	r4, [r0, #100]	; 0x64
		Timer_Tbl[i].TmrFnct    = NULL;
 8000ada:	6684      	str	r4, [r0, #104]	; 0x68
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 8000adc:	f880 4070 	strb.w	r4, [r0, #112]	; 0x70
		Timer_Tbl[i].Timer_Ctn  = 0;
 8000ae0:	f8a0 4072 	strh.w	r4, [r0, #114]	; 0x72
		Timer_Tbl[i].Timer_Init = 0;
 8000ae4:	f8a0 4074 	strh.w	r4, [r0, #116]	; 0x74
		Timer_Tbl[i].TmrFnct    = NULL;
 8000ae8:	6784      	str	r4, [r0, #120]	; 0x78
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 8000aea:	f880 4080 	strb.w	r4, [r0, #128]	; 0x80
		Timer_Tbl[i].Timer_Init = 0;
		Timer_Tbl[i].TmrFnct    = NULL;
	}	                   
	
	
	Hw_Timer_SetupISR();
 8000aee:	491a      	ldr	r1, [pc, #104]	; (8000b58 <Hw_Timer_Init+0xd8>)
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
		Timer_Tbl[i].Timer_Ctn  = 0;
 8000af0:	f8a0 4082 	strh.w	r4, [r0, #130]	; 0x82
		Timer_Tbl[i].Timer_Init = 0;
 8000af4:	f8a0 4084 	strh.w	r4, [r0, #132]	; 0x84
		Timer_Tbl[i].TmrFnct    = NULL;
 8000af8:	f8c0 4088 	str.w	r4, [r0, #136]	; 0x88
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 8000afc:	f880 4090 	strb.w	r4, [r0, #144]	; 0x90
		Timer_Tbl[i].Timer_Ctn  = 0;
 8000b00:	f8a0 4092 	strh.w	r4, [r0, #146]	; 0x92
		Timer_Tbl[i].Timer_Init = 0;
 8000b04:	f8a0 4094 	strh.w	r4, [r0, #148]	; 0x94
		Timer_Tbl[i].TmrFnct    = NULL;
 8000b08:	f8c0 4098 	str.w	r4, [r0, #152]	; 0x98
	}	                   
	
	
	Hw_Timer_SetupISR();
 8000b0c:	4788      	blx	r1
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_Setup( void )
{

	REG_STK_LOAD = 72000 - 1;	// 72000000 / 72000 = 1000us = 1ms
 8000b0e:	f24e 0114 	movw	r1, #57364	; 0xe014
 8000b12:	f641 103f 	movw	r0, #6463	; 0x193f
	
	REG_STK_VAL  = 0;	
 8000b16:	f24e 0218 	movw	r2, #57368	; 0xe018
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_Setup( void )
{

	REG_STK_LOAD = 72000 - 1;	// 72000000 / 72000 = 1000us = 1ms
 8000b1a:	f2ce 0100 	movt	r1, #57344	; 0xe000
 8000b1e:	f2c0 0001 	movt	r0, #1
	
	REG_STK_VAL  = 0;	
 8000b22:	f2ce 0200 	movt	r2, #57344	; 0xe000
	
	SET_BIT( REG_STK_CTRL, 2 );	// CLKSOURCE = Processor Clock 72Mhz		
 8000b26:	f24e 0310 	movw	r3, #57360	; 0xe010
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_Setup( void )
{

	REG_STK_LOAD = 72000 - 1;	// 72000000 / 72000 = 1000us = 1ms
 8000b2a:	6008      	str	r0, [r1, #0]
	
	REG_STK_VAL  = 0;	
	
	SET_BIT( REG_STK_CTRL, 2 );	// CLKSOURCE = Processor Clock 72Mhz		
 8000b2c:	f2ce 0300 	movt	r3, #57344	; 0xe000
void Hw_Timer_Setup( void )
{

	REG_STK_LOAD = 72000 - 1;	// 72000000 / 72000 = 1000us = 1ms
	
	REG_STK_VAL  = 0;	
 8000b30:	6014      	str	r4, [r2, #0]
	
	SET_BIT( REG_STK_CTRL, 2 );	// CLKSOURCE = Processor Clock 72Mhz		
 8000b32:	6819      	ldr	r1, [r3, #0]
 8000b34:	f041 0004 	orr.w	r0, r1, #4
 8000b38:	6018      	str	r0, [r3, #0]
	SET_BIT( REG_STK_CTRL, 1 );	// 인터럽트 활성화		
 8000b3a:	681a      	ldr	r2, [r3, #0]
 8000b3c:	f042 0102 	orr.w	r1, r2, #2
 8000b40:	6019      	str	r1, [r3, #0]
	SET_BIT( REG_STK_CTRL, 0 );	// Counter Enable
 8000b42:	6818      	ldr	r0, [r3, #0]
 8000b44:	f040 0201 	orr.w	r2, r0, #1
 8000b48:	601a      	str	r2, [r3, #0]
	
	
	Hw_Timer_SetupISR();
	Hw_Timer_Setup();	

	Excute = 1;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	702b      	strb	r3, [r5, #0]
 8000b4e:	bd38      	pop	{r3, r4, r5, pc}
 8000b50:	20000200 	.word	0x20000200
 8000b54:	20000204 	.word	0x20000204
 8000b58:	08000a65 	.word	0x08000a65

08000b5c <Hw_Timer_Tick>:
void Hw_Timer_Tick(void)
{
	u8 i;

	
	Hw_Timer_Counter++;
 8000b5c:	4a9d      	ldr	r2, [pc, #628]	; (8000dd4 <Hw_Timer_Tick+0x278>)


	if( Tmr_Ctn ) Tmr_Ctn--;
 8000b5e:	4b9e      	ldr	r3, [pc, #632]	; (8000dd8 <Hw_Timer_Tick+0x27c>)
void Hw_Timer_Tick(void)
{
	u8 i;

	
	Hw_Timer_Counter++;
 8000b60:	6811      	ldr	r1, [r2, #0]
			타이머인터럽트 발생시에 실행되는 함수(1ms 혹은 10ms 단위로 실행)
     ARG	: void
     RET	: void
---------------------------------------------------------------------------*/
void Hw_Timer_Tick(void)
{
 8000b62:	b510      	push	{r4, lr}
	u8 i;

	
	Hw_Timer_Counter++;
 8000b64:	1c48      	adds	r0, r1, #1
 8000b66:	6010      	str	r0, [r2, #0]


	if( Tmr_Ctn ) Tmr_Ctn--;
 8000b68:	881c      	ldrh	r4, [r3, #0]
 8000b6a:	b2a2      	uxth	r2, r4
 8000b6c:	b11a      	cbz	r2, 8000b76 <Hw_Timer_Tick+0x1a>
 8000b6e:	8819      	ldrh	r1, [r3, #0]
 8000b70:	1e48      	subs	r0, r1, #1
 8000b72:	b284      	uxth	r4, r0
 8000b74:	801c      	strh	r4, [r3, #0]
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
	{
		if( Timer_Tbl[i].Timer_En == ON)   					// 타이머가 활성화 됬니?
 8000b76:	4c99      	ldr	r4, [pc, #612]	; (8000ddc <Hw_Timer_Tick+0x280>)
 8000b78:	7823      	ldrb	r3, [r4, #0]
 8000b7a:	2b01      	cmp	r3, #1
 8000b7c:	d030      	beq.n	8000be0 <Hw_Timer_Tick+0x84>
 8000b7e:	7c20      	ldrb	r0, [r4, #16]
 8000b80:	4a96      	ldr	r2, [pc, #600]	; (8000ddc <Hw_Timer_Tick+0x280>)
 8000b82:	2801      	cmp	r0, #1
 8000b84:	d03e      	beq.n	8000c04 <Hw_Timer_Tick+0xa8>
 8000b86:	f894 0020 	ldrb.w	r0, [r4, #32]
 8000b8a:	4a94      	ldr	r2, [pc, #592]	; (8000ddc <Hw_Timer_Tick+0x280>)
 8000b8c:	2801      	cmp	r0, #1
 8000b8e:	d04c      	beq.n	8000c2a <Hw_Timer_Tick+0xce>
 8000b90:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
 8000b94:	4a91      	ldr	r2, [pc, #580]	; (8000ddc <Hw_Timer_Tick+0x280>)
 8000b96:	2801      	cmp	r0, #1
 8000b98:	d05b      	beq.n	8000c52 <Hw_Timer_Tick+0xf6>
 8000b9a:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8000b9e:	4a8f      	ldr	r2, [pc, #572]	; (8000ddc <Hw_Timer_Tick+0x280>)
 8000ba0:	2801      	cmp	r0, #1
 8000ba2:	d06a      	beq.n	8000c7a <Hw_Timer_Tick+0x11e>
 8000ba4:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
 8000ba8:	4a8c      	ldr	r2, [pc, #560]	; (8000ddc <Hw_Timer_Tick+0x280>)
 8000baa:	2801      	cmp	r0, #1
 8000bac:	d07d      	beq.n	8000caa <Hw_Timer_Tick+0x14e>
 8000bae:	f894 0060 	ldrb.w	r0, [r4, #96]	; 0x60
 8000bb2:	4a8a      	ldr	r2, [pc, #552]	; (8000ddc <Hw_Timer_Tick+0x280>)
 8000bb4:	2801      	cmp	r0, #1
 8000bb6:	f000 8091 	beq.w	8000cdc <Hw_Timer_Tick+0x180>
 8000bba:	f894 0070 	ldrb.w	r0, [r4, #112]	; 0x70
 8000bbe:	4a87      	ldr	r2, [pc, #540]	; (8000ddc <Hw_Timer_Tick+0x280>)
 8000bc0:	2801      	cmp	r0, #1
 8000bc2:	f000 80a4 	beq.w	8000d0e <Hw_Timer_Tick+0x1b2>
 8000bc6:	f894 0080 	ldrb.w	r0, [r4, #128]	; 0x80
 8000bca:	4a84      	ldr	r2, [pc, #528]	; (8000ddc <Hw_Timer_Tick+0x280>)
 8000bcc:	2801      	cmp	r0, #1
 8000bce:	f000 80b7 	beq.w	8000d40 <Hw_Timer_Tick+0x1e4>
 8000bd2:	f894 0090 	ldrb.w	r0, [r4, #144]	; 0x90
 8000bd6:	4a81      	ldr	r2, [pc, #516]	; (8000ddc <Hw_Timer_Tick+0x280>)
 8000bd8:	2801      	cmp	r0, #1
 8000bda:	f000 80cb 	beq.w	8000d74 <Hw_Timer_Tick+0x218>
 8000bde:	bd10      	pop	{r4, pc}
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소
 8000be0:	8862      	ldrh	r2, [r4, #2]
 8000be2:	1e51      	subs	r1, r2, #1
 8000be4:	b288      	uxth	r0, r1
 8000be6:	8060      	strh	r0, [r4, #2]

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
 8000be8:	2800      	cmp	r0, #0
 8000bea:	d1c8      	bne.n	8000b7e <Hw_Timer_Tick+0x22>
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 8000bec:	7863      	ldrb	r3, [r4, #1]
 8000bee:	2b01      	cmp	r3, #1
 8000bf0:	f000 80d9 	beq.w	8000da6 <Hw_Timer_Tick+0x24a>

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8000bf4:	88a2      	ldrh	r2, [r4, #4]

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8000bf6:	68a1      	ldr	r1, [r4, #8]
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8000bf8:	8062      	strh	r2, [r4, #2]

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8000bfa:	4788      	blx	r1
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
	{
		if( Timer_Tbl[i].Timer_En == ON)   					// 타이머가 활성화 됬니?
 8000bfc:	7c20      	ldrb	r0, [r4, #16]
 8000bfe:	4a77      	ldr	r2, [pc, #476]	; (8000ddc <Hw_Timer_Tick+0x280>)
 8000c00:	2801      	cmp	r0, #1
 8000c02:	d1c0      	bne.n	8000b86 <Hw_Timer_Tick+0x2a>
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소
 8000c04:	8a53      	ldrh	r3, [r2, #18]
 8000c06:	1e59      	subs	r1, r3, #1
 8000c08:	b288      	uxth	r0, r1
 8000c0a:	8250      	strh	r0, [r2, #18]

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
 8000c0c:	2800      	cmp	r0, #0
 8000c0e:	d1ba      	bne.n	8000b86 <Hw_Timer_Tick+0x2a>
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 8000c10:	7c53      	ldrb	r3, [r2, #17]
 8000c12:	2b01      	cmp	r3, #1
 8000c14:	f000 80c5 	beq.w	8000da2 <Hw_Timer_Tick+0x246>

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8000c18:	8aa2      	ldrh	r2, [r4, #20]

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8000c1a:	69a1      	ldr	r1, [r4, #24]
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8000c1c:	8262      	strh	r2, [r4, #18]

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8000c1e:	4788      	blx	r1
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
	{
		if( Timer_Tbl[i].Timer_En == ON)   					// 타이머가 활성화 됬니?
 8000c20:	f894 0020 	ldrb.w	r0, [r4, #32]
 8000c24:	4a6d      	ldr	r2, [pc, #436]	; (8000ddc <Hw_Timer_Tick+0x280>)
 8000c26:	2801      	cmp	r0, #1
 8000c28:	d1b2      	bne.n	8000b90 <Hw_Timer_Tick+0x34>
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소
 8000c2a:	8c53      	ldrh	r3, [r2, #34]	; 0x22
 8000c2c:	1e59      	subs	r1, r3, #1
 8000c2e:	b288      	uxth	r0, r1
 8000c30:	8450      	strh	r0, [r2, #34]	; 0x22

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
 8000c32:	2800      	cmp	r0, #0
 8000c34:	d1ac      	bne.n	8000b90 <Hw_Timer_Tick+0x34>
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 8000c36:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 8000c3a:	2b01      	cmp	r3, #1
 8000c3c:	f000 80c7 	beq.w	8000dce <Hw_Timer_Tick+0x272>

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8000c40:	8ca2      	ldrh	r2, [r4, #36]	; 0x24

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8000c42:	6aa1      	ldr	r1, [r4, #40]	; 0x28
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8000c44:	8462      	strh	r2, [r4, #34]	; 0x22

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8000c46:	4788      	blx	r1
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
	{
		if( Timer_Tbl[i].Timer_En == ON)   					// 타이머가 활성화 됬니?
 8000c48:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
 8000c4c:	4a63      	ldr	r2, [pc, #396]	; (8000ddc <Hw_Timer_Tick+0x280>)
 8000c4e:	2801      	cmp	r0, #1
 8000c50:	d1a3      	bne.n	8000b9a <Hw_Timer_Tick+0x3e>
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소
 8000c52:	8e53      	ldrh	r3, [r2, #50]	; 0x32
 8000c54:	1e59      	subs	r1, r3, #1
 8000c56:	b288      	uxth	r0, r1
 8000c58:	8650      	strh	r0, [r2, #50]	; 0x32

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
 8000c5a:	2800      	cmp	r0, #0
 8000c5c:	d19d      	bne.n	8000b9a <Hw_Timer_Tick+0x3e>
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 8000c5e:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
 8000c62:	2b01      	cmp	r3, #1
 8000c64:	f000 80b0 	beq.w	8000dc8 <Hw_Timer_Tick+0x26c>

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8000c68:	8ea2      	ldrh	r2, [r4, #52]	; 0x34

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8000c6a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8000c6c:	8662      	strh	r2, [r4, #50]	; 0x32

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8000c6e:	4788      	blx	r1
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
	{
		if( Timer_Tbl[i].Timer_En == ON)   					// 타이머가 활성화 됬니?
 8000c70:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8000c74:	4a59      	ldr	r2, [pc, #356]	; (8000ddc <Hw_Timer_Tick+0x280>)
 8000c76:	2801      	cmp	r0, #1
 8000c78:	d194      	bne.n	8000ba4 <Hw_Timer_Tick+0x48>
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소
 8000c7a:	f8b2 3042 	ldrh.w	r3, [r2, #66]	; 0x42
 8000c7e:	1e59      	subs	r1, r3, #1
 8000c80:	b288      	uxth	r0, r1
 8000c82:	f8a2 0042 	strh.w	r0, [r2, #66]	; 0x42

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
 8000c86:	2800      	cmp	r0, #0
 8000c88:	d18c      	bne.n	8000ba4 <Hw_Timer_Tick+0x48>
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 8000c8a:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 8000c8e:	2b01      	cmp	r3, #1
 8000c90:	f000 8097 	beq.w	8000dc2 <Hw_Timer_Tick+0x266>

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8000c94:	f8b4 2044 	ldrh.w	r2, [r4, #68]	; 0x44

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8000c98:	6ca1      	ldr	r1, [r4, #72]	; 0x48
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8000c9a:	f8a4 2042 	strh.w	r2, [r4, #66]	; 0x42

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8000c9e:	4788      	blx	r1
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
	{
		if( Timer_Tbl[i].Timer_En == ON)   					// 타이머가 활성화 됬니?
 8000ca0:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
 8000ca4:	4a4d      	ldr	r2, [pc, #308]	; (8000ddc <Hw_Timer_Tick+0x280>)
 8000ca6:	2801      	cmp	r0, #1
 8000ca8:	d181      	bne.n	8000bae <Hw_Timer_Tick+0x52>
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소
 8000caa:	f8b2 3052 	ldrh.w	r3, [r2, #82]	; 0x52
 8000cae:	1e59      	subs	r1, r3, #1
 8000cb0:	b288      	uxth	r0, r1
 8000cb2:	f8a2 0052 	strh.w	r0, [r2, #82]	; 0x52

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
 8000cb6:	2800      	cmp	r0, #0
 8000cb8:	f47f af79 	bne.w	8000bae <Hw_Timer_Tick+0x52>
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 8000cbc:	f892 3051 	ldrb.w	r3, [r2, #81]	; 0x51
 8000cc0:	2b01      	cmp	r3, #1
 8000cc2:	d07b      	beq.n	8000dbc <Hw_Timer_Tick+0x260>

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8000cc4:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8000cc8:	6da1      	ldr	r1, [r4, #88]	; 0x58
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8000cca:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8000cce:	4788      	blx	r1
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
	{
		if( Timer_Tbl[i].Timer_En == ON)   					// 타이머가 활성화 됬니?
 8000cd0:	f894 0060 	ldrb.w	r0, [r4, #96]	; 0x60
 8000cd4:	4a41      	ldr	r2, [pc, #260]	; (8000ddc <Hw_Timer_Tick+0x280>)
 8000cd6:	2801      	cmp	r0, #1
 8000cd8:	f47f af6f 	bne.w	8000bba <Hw_Timer_Tick+0x5e>
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소
 8000cdc:	f8b2 3062 	ldrh.w	r3, [r2, #98]	; 0x62
 8000ce0:	1e59      	subs	r1, r3, #1
 8000ce2:	b288      	uxth	r0, r1
 8000ce4:	f8a2 0062 	strh.w	r0, [r2, #98]	; 0x62

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
 8000ce8:	2800      	cmp	r0, #0
 8000cea:	f47f af66 	bne.w	8000bba <Hw_Timer_Tick+0x5e>
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 8000cee:	f892 3061 	ldrb.w	r3, [r2, #97]	; 0x61
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d05f      	beq.n	8000db6 <Hw_Timer_Tick+0x25a>

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8000cf6:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8000cfa:	6ea1      	ldr	r1, [r4, #104]	; 0x68
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8000cfc:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8000d00:	4788      	blx	r1
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
	{
		if( Timer_Tbl[i].Timer_En == ON)   					// 타이머가 활성화 됬니?
 8000d02:	f894 0070 	ldrb.w	r0, [r4, #112]	; 0x70
 8000d06:	4a35      	ldr	r2, [pc, #212]	; (8000ddc <Hw_Timer_Tick+0x280>)
 8000d08:	2801      	cmp	r0, #1
 8000d0a:	f47f af5c 	bne.w	8000bc6 <Hw_Timer_Tick+0x6a>
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소
 8000d0e:	f8b2 3072 	ldrh.w	r3, [r2, #114]	; 0x72
 8000d12:	1e59      	subs	r1, r3, #1
 8000d14:	b288      	uxth	r0, r1
 8000d16:	f8a2 0072 	strh.w	r0, [r2, #114]	; 0x72

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
 8000d1a:	2800      	cmp	r0, #0
 8000d1c:	f47f af53 	bne.w	8000bc6 <Hw_Timer_Tick+0x6a>
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 8000d20:	f892 3071 	ldrb.w	r3, [r2, #113]	; 0x71
 8000d24:	2b01      	cmp	r3, #1
 8000d26:	d043      	beq.n	8000db0 <Hw_Timer_Tick+0x254>

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8000d28:	f8b4 2074 	ldrh.w	r2, [r4, #116]	; 0x74

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8000d2c:	6fa1      	ldr	r1, [r4, #120]	; 0x78
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8000d2e:	f8a4 2072 	strh.w	r2, [r4, #114]	; 0x72

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8000d32:	4788      	blx	r1
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
	{
		if( Timer_Tbl[i].Timer_En == ON)   					// 타이머가 활성화 됬니?
 8000d34:	f894 0080 	ldrb.w	r0, [r4, #128]	; 0x80
 8000d38:	4a28      	ldr	r2, [pc, #160]	; (8000ddc <Hw_Timer_Tick+0x280>)
 8000d3a:	2801      	cmp	r0, #1
 8000d3c:	f47f af49 	bne.w	8000bd2 <Hw_Timer_Tick+0x76>
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소
 8000d40:	f8b2 3082 	ldrh.w	r3, [r2, #130]	; 0x82
 8000d44:	1e59      	subs	r1, r3, #1
 8000d46:	b288      	uxth	r0, r1
 8000d48:	f8a2 0082 	strh.w	r0, [r2, #130]	; 0x82

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
 8000d4c:	2800      	cmp	r0, #0
 8000d4e:	f47f af40 	bne.w	8000bd2 <Hw_Timer_Tick+0x76>
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 8000d52:	f892 3081 	ldrb.w	r3, [r2, #129]	; 0x81
 8000d56:	2b01      	cmp	r3, #1
 8000d58:	d027      	beq.n	8000daa <Hw_Timer_Tick+0x24e>

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8000d5a:	f8b4 2084 	ldrh.w	r2, [r4, #132]	; 0x84

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8000d5e:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8000d62:	f8a4 2082 	strh.w	r2, [r4, #130]	; 0x82

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8000d66:	4788      	blx	r1
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
	{
		if( Timer_Tbl[i].Timer_En == ON)   					// 타이머가 활성화 됬니?
 8000d68:	f894 0090 	ldrb.w	r0, [r4, #144]	; 0x90
 8000d6c:	4a1b      	ldr	r2, [pc, #108]	; (8000ddc <Hw_Timer_Tick+0x280>)
 8000d6e:	2801      	cmp	r0, #1
 8000d70:	f47f af35 	bne.w	8000bde <Hw_Timer_Tick+0x82>
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소
 8000d74:	f8b2 3092 	ldrh.w	r3, [r2, #146]	; 0x92
 8000d78:	1e59      	subs	r1, r3, #1
 8000d7a:	b288      	uxth	r0, r1
 8000d7c:	f8a2 0092 	strh.w	r0, [r2, #146]	; 0x92

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
 8000d80:	2800      	cmp	r0, #0
 8000d82:	f47f af2c 	bne.w	8000bde <Hw_Timer_Tick+0x82>
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 8000d86:	f892 3091 	ldrb.w	r3, [r2, #145]	; 0x91

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8000d8a:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 8000d8e:	2b01      	cmp	r3, #1

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.
 8000d90:	bf08      	it	eq
 8000d92:	f882 0090 	strbeq.w	r0, [r2, #144]	; 0x90

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8000d96:	f8b4 2094 	ldrh.w	r2, [r4, #148]	; 0x94
 8000d9a:	f8a4 2092 	strh.w	r2, [r4, #146]	; 0x92

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8000d9e:	4788      	blx	r1
 8000da0:	bd10      	pop	{r4, pc}

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.
 8000da2:	7410      	strb	r0, [r2, #16]
 8000da4:	e738      	b.n	8000c18 <Hw_Timer_Tick+0xbc>
 8000da6:	7020      	strb	r0, [r4, #0]
 8000da8:	e724      	b.n	8000bf4 <Hw_Timer_Tick+0x98>
 8000daa:	f882 0080 	strb.w	r0, [r2, #128]	; 0x80
 8000dae:	e7d4      	b.n	8000d5a <Hw_Timer_Tick+0x1fe>
 8000db0:	f882 0070 	strb.w	r0, [r2, #112]	; 0x70
 8000db4:	e7b8      	b.n	8000d28 <Hw_Timer_Tick+0x1cc>
 8000db6:	f882 0060 	strb.w	r0, [r2, #96]	; 0x60
 8000dba:	e79c      	b.n	8000cf6 <Hw_Timer_Tick+0x19a>
 8000dbc:	f882 0050 	strb.w	r0, [r2, #80]	; 0x50
 8000dc0:	e780      	b.n	8000cc4 <Hw_Timer_Tick+0x168>
 8000dc2:	f882 0040 	strb.w	r0, [r2, #64]	; 0x40
 8000dc6:	e765      	b.n	8000c94 <Hw_Timer_Tick+0x138>
 8000dc8:	f882 0030 	strb.w	r0, [r2, #48]	; 0x30
 8000dcc:	e74c      	b.n	8000c68 <Hw_Timer_Tick+0x10c>
 8000dce:	f882 0020 	strb.w	r0, [r2, #32]
 8000dd2:	e735      	b.n	8000c40 <Hw_Timer_Tick+0xe4>
 8000dd4:	200002a4 	.word	0x200002a4
 8000dd8:	200002a8 	.word	0x200002a8
 8000ddc:	20000204 	.word	0x20000204

08000de0 <Hw_Timer_ISR>:
void Hw_Timer_Setup( void );



void Hw_Timer_ISR(void)
{
 8000de0:	b508      	push	{r3, lr}

	Hw_Timer_Tick();  
 8000de2:	f640 335d 	movw	r3, #2909	; 0xb5d
 8000de6:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000dea:	4798      	blx	r3
 8000dec:	bd08      	pop	{r3, pc}
 8000dee:	bf00      	nop

08000df0 <Hw_Timer_Delay_ms>:
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Timer_Delay_ms( u16 DelayData )
{
	Tmr_Ctn = DelayData;
 8000df0:	4a03      	ldr	r2, [pc, #12]	; (8000e00 <Hw_Timer_Delay_ms+0x10>)
 8000df2:	8010      	strh	r0, [r2, #0]
	
	while( Tmr_Ctn );
 8000df4:	8813      	ldrh	r3, [r2, #0]
 8000df6:	b298      	uxth	r0, r3
 8000df8:	2800      	cmp	r0, #0
 8000dfa:	d1fb      	bne.n	8000df4 <Hw_Timer_Delay_ms+0x4>
}
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	200002a8 	.word	0x200002a8

08000e04 <Hw_Uart_Q_Init>:
{
	u8 i;

	for( i=0; i<HW_UART_Q_CH_MAX; i++ )
	{
		Hw_Uart_Q_Start[i] = Hw_Uart_Q_End[i] = 0;
 8000e04:	f240 6188 	movw	r1, #1672	; 0x688
 8000e08:	f240 6298 	movw	r2, #1688	; 0x698
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8000e12:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000e16:	800b      	strh	r3, [r1, #0]
 8000e18:	8013      	strh	r3, [r2, #0]
 8000e1a:	804b      	strh	r3, [r1, #2]
 8000e1c:	8053      	strh	r3, [r2, #2]
 8000e1e:	808b      	strh	r3, [r1, #4]
 8000e20:	8093      	strh	r3, [r2, #4]
 8000e22:	80cb      	strh	r3, [r1, #6]
 8000e24:	80d3      	strh	r3, [r2, #6]
 8000e26:	810b      	strh	r3, [r1, #8]
 8000e28:	8113      	strh	r3, [r2, #8]
 8000e2a:	814b      	strh	r3, [r1, #10]
 8000e2c:	8153      	strh	r3, [r2, #10]
 8000e2e:	818b      	strh	r3, [r1, #12]
 8000e30:	8193      	strh	r3, [r2, #12]
 8000e32:	4770      	bx	lr

08000e34 <HW_UART_Q_VAILD>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 8000e34:	4b09      	ldr	r3, [pc, #36]	; (8000e5c <HW_UART_Q_VAILD+0x28>)
 8000e36:	490a      	ldr	r1, [pc, #40]	; (8000e60 <HW_UART_Q_VAILD+0x2c>)
 8000e38:	f933 2010 	ldrsh.w	r2, [r3, r0, lsl #1]
 8000e3c:	f931 3010 	ldrsh.w	r3, [r1, r0, lsl #1]
 8000e40:	201f      	movs	r0, #31
 8000e42:	1ad2      	subs	r2, r2, r3
 8000e44:	3220      	adds	r2, #32
 8000e46:	f2c8 0000 	movt	r0, #32768	; 0x8000
 8000e4a:	4010      	ands	r0, r2
 8000e4c:	2800      	cmp	r0, #0
 8000e4e:	db00      	blt.n	8000e52 <HW_UART_Q_VAILD+0x1e>
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_VAILD( u8 Ch )
{
	return HW_UART_Q_SIZE(Ch);
}
 8000e50:	4770      	bx	lr
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 8000e52:	3801      	subs	r0, #1
 8000e54:	f060 011f 	orn	r1, r0, #31
 8000e58:	1c48      	adds	r0, r1, #1
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_VAILD( u8 Ch )
{
	return HW_UART_Q_SIZE(Ch);
}
 8000e5a:	4770      	bx	lr
 8000e5c:	20000698 	.word	0x20000698
 8000e60:	20000688 	.word	0x20000688

08000e64 <Hw_Uart_Q_Push>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 8000e64:	4a1a      	ldr	r2, [pc, #104]	; (8000ed0 <Hw_Uart_Q_Push+0x6c>)
 8000e66:	4b1b      	ldr	r3, [pc, #108]	; (8000ed4 <Hw_Uart_Q_Push+0x70>)
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{
 8000e68:	b4f0      	push	{r4, r5, r6, r7}
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 8000e6a:	f832 5010 	ldrh.w	r5, [r2, r0, lsl #1]
 8000e6e:	f933 6010 	ldrsh.w	r6, [r3, r0, lsl #1]
 8000e72:	b22c      	sxth	r4, r5
 8000e74:	231f      	movs	r3, #31
 8000e76:	1ba6      	subs	r6, r4, r6
 8000e78:	3620      	adds	r6, #32
 8000e7a:	f2c8 0300 	movt	r3, #32768	; 0x8000
 8000e7e:	4033      	ands	r3, r6
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	db18      	blt.n	8000eb6 <Hw_Uart_Q_Push+0x52>
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;
 8000e84:	2b1f      	cmp	r3, #31
 8000e86:	d01c      	beq.n	8000ec2 <Hw_Uart_Q_Push+0x5e>

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
 8000e88:	3501      	adds	r5, #1
 8000e8a:	b2ad      	uxth	r5, r5
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 8000e8c:	231f      	movs	r3, #31
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
 8000e8e:	780e      	ldrb	r6, [r1, #0]
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 8000e90:	f2c8 0300 	movt	r3, #32768	; 0x8000
 8000e94:	b229      	sxth	r1, r5
 8000e96:	400b      	ands	r3, r1
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
 8000e98:	eb00 1740 	add.w	r7, r0, r0, lsl #5
 8000e9c:	490e      	ldr	r1, [pc, #56]	; (8000ed8 <Hw_Uart_Q_Push+0x74>)
 8000e9e:	193c      	adds	r4, r7, r4
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 8000ea0:	2b00      	cmp	r3, #0
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
 8000ea2:	550e      	strb	r6, [r1, r4]
 8000ea4:	f822 5010 	strh.w	r5, [r2, r0, lsl #1]
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 8000ea8:	db0d      	blt.n	8000ec6 <Hw_Uart_Q_Push+0x62>
 8000eaa:	4909      	ldr	r1, [pc, #36]	; (8000ed0 <Hw_Uart_Q_Push+0x6c>)
 8000eac:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]

	return TRUE;
 8000eb0:	2001      	movs	r0, #1
}
 8000eb2:	bcf0      	pop	{r4, r5, r6, r7}
 8000eb4:	4770      	bx	lr
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 8000eb6:	3b01      	subs	r3, #1
 8000eb8:	f063 031f 	orn	r3, r3, #31
 8000ebc:	3301      	adds	r3, #1
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;
 8000ebe:	2b1f      	cmp	r3, #31
 8000ec0:	d1e2      	bne.n	8000e88 <Hw_Uart_Q_Push+0x24>
 8000ec2:	2000      	movs	r0, #0
 8000ec4:	e7f5      	b.n	8000eb2 <Hw_Uart_Q_Push+0x4e>

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 8000ec6:	1e5a      	subs	r2, r3, #1
 8000ec8:	f062 031f 	orn	r3, r2, #31
 8000ecc:	3301      	adds	r3, #1
 8000ece:	e7ec      	b.n	8000eaa <Hw_Uart_Q_Push+0x46>
 8000ed0:	20000698 	.word	0x20000698
 8000ed4:	20000688 	.word	0x20000688
 8000ed8:	20000590 	.word	0x20000590

08000edc <Hw_Uart_Q_Pop>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 8000edc:	4a1a      	ldr	r2, [pc, #104]	; (8000f48 <Hw_Uart_Q_Pop+0x6c>)
 8000ede:	4b1b      	ldr	r3, [pc, #108]	; (8000f4c <Hw_Uart_Q_Pop+0x70>)
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
 8000ee0:	b470      	push	{r4, r5, r6}
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 8000ee2:	f832 5010 	ldrh.w	r5, [r2, r0, lsl #1]
 8000ee6:	f933 6010 	ldrsh.w	r6, [r3, r0, lsl #1]
 8000eea:	b22c      	sxth	r4, r5
 8000eec:	231f      	movs	r3, #31
 8000eee:	1b36      	subs	r6, r6, r4
 8000ef0:	3620      	adds	r6, #32
 8000ef2:	f2c8 0300 	movt	r3, #32768	; 0x8000
 8000ef6:	4033      	ands	r3, r6
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	db17      	blt.n	8000f2c <Hw_Uart_Q_Pop+0x50>
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;
 8000efc:	b1e3      	cbz	r3, 8000f38 <Hw_Uart_Q_Pop+0x5c>

	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];
 8000efe:	eb00 1640 	add.w	r6, r0, r0, lsl #5
 8000f02:	3501      	adds	r5, #1
 8000f04:	1934      	adds	r4, r6, r4
 8000f06:	4e12      	ldr	r6, [pc, #72]	; (8000f50 <Hw_Uart_Q_Pop+0x74>)
 8000f08:	b2ad      	uxth	r5, r5

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;
 8000f0a:	231f      	movs	r3, #31
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;

	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];
 8000f0c:	5d34      	ldrb	r4, [r6, r4]

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;
 8000f0e:	f2c8 0300 	movt	r3, #32768	; 0x8000
 8000f12:	b22e      	sxth	r6, r5
 8000f14:	4033      	ands	r3, r6
 8000f16:	2b00      	cmp	r3, #0
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;

	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];
 8000f18:	700c      	strb	r4, [r1, #0]
 8000f1a:	f822 5010 	strh.w	r5, [r2, r0, lsl #1]

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;
 8000f1e:	db0d      	blt.n	8000f3c <Hw_Uart_Q_Pop+0x60>
 8000f20:	4909      	ldr	r1, [pc, #36]	; (8000f48 <Hw_Uart_Q_Pop+0x6c>)
 8000f22:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]

    return TRUE;
 8000f26:	2001      	movs	r0, #1
}
 8000f28:	bc70      	pop	{r4, r5, r6}
 8000f2a:	4770      	bx	lr
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 8000f2c:	3b01      	subs	r3, #1
 8000f2e:	f063 031f 	orn	r3, r3, #31
 8000f32:	3301      	adds	r3, #1
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d1e2      	bne.n	8000efe <Hw_Uart_Q_Pop+0x22>
 8000f38:	4618      	mov	r0, r3
 8000f3a:	e7f5      	b.n	8000f28 <Hw_Uart_Q_Pop+0x4c>

	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;
 8000f3c:	1e59      	subs	r1, r3, #1
 8000f3e:	f061 021f 	orn	r2, r1, #31
 8000f42:	1c53      	adds	r3, r2, #1
 8000f44:	e7ec      	b.n	8000f20 <Hw_Uart_Q_Pop+0x44>
 8000f46:	bf00      	nop
 8000f48:	20000688 	.word	0x20000688
 8000f4c:	20000698 	.word	0x20000698
 8000f50:	20000590 	.word	0x20000590

08000f54 <Hw_Led_Init>:
{
	u32 PinNum;

	//-- JTAG 핀을 Disable하고 PB3,4를 GPIO로 사용한다.(핀구성에 따라 사용하지 않을수 있음)
	//
	REG_AFIO_MAPR &= ~(0x07 << 24);
 8000f54:	2304      	movs	r3, #4
 8000f56:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	f022 60e0 	bic.w	r0, r2, #117440512	; 0x7000000
 8000f60:	6018      	str	r0, [r3, #0]
	REG_AFIO_MAPR |=  (0x04 << 24);
 8000f62:	6819      	ldr	r1, [r3, #0]
 8000f64:	f041 6280 	orr.w	r2, r1, #67108864	; 0x4000000
 8000f68:	601a      	str	r2, [r3, #0]
 8000f6a:	4770      	bx	lr

08000f6c <Hw_VCom_Init>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_VCom_Init( void )
{
 8000f6c:	b508      	push	{r3, lr}
	Hw_VCom_Q_Init();
 8000f6e:	f640 73f5 	movw	r3, #4085	; 0xff5
 8000f72:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000f76:	4798      	blx	r3


	Hw_VCom_RxdFuncPtr = NULL;
 8000f78:	f240 60a8 	movw	r0, #1704	; 0x6a8
 8000f7c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000f80:	2200      	movs	r2, #0
 8000f82:	6002      	str	r2, [r0, #0]

	Disable_ISR();
 8000f84:	b672      	cpsid	i
	Set_System();
 8000f86:	f641 21a5 	movw	r1, #6821	; 0x1aa5
 8000f8a:	f6c0 0100 	movt	r1, #2048	; 0x800
 8000f8e:	4788      	blx	r1
	Set_USBClock();
 8000f90:	f641 23c5 	movw	r3, #6853	; 0x1ac5
 8000f94:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000f98:	4798      	blx	r3
	USB_Interrupts_Config();
 8000f9a:	f641 3009 	movw	r0, #6921	; 0x1b09
 8000f9e:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000fa2:	4780      	blx	r0
	USB_Init();	
 8000fa4:	f242 7261 	movw	r2, #10081	; 0x2761
 8000fa8:	f6c0 0200 	movt	r2, #2048	; 0x800
 8000fac:	4790      	blx	r2

	Enable_ISR();
 8000fae:	b662      	cpsie	i
 8000fb0:	bd08      	pop	{r3, pc}
 8000fb2:	bf00      	nop

08000fb4 <Hw_VCom_Getch>:
			: 시리얼 포트에서 문자 1바이트 읽는다.
     ARG
     RET
---------------------------------------------------------------------------*/
u8 Hw_VCom_Getch( void )
{
 8000fb4:	b510      	push	{r4, lr}
	u8 Uart_GetData = 0;
 8000fb6:	2300      	movs	r3, #0
			: 시리얼 포트에서 문자 1바이트 읽는다.
     ARG
     RET
---------------------------------------------------------------------------*/
u8 Hw_VCom_Getch( void )
{
 8000fb8:	b082      	sub	sp, #8
 8000fba:	4c08      	ldr	r4, [pc, #32]	; (8000fdc <Hw_VCom_Getch+0x28>)
	u8 Uart_GetData = 0;
 8000fbc:	f88d 3007 	strb.w	r3, [sp, #7]

	while( 1 )
	{
		// 버퍼에 데이터 들어올때까지 기다린다.
		if( HW_VCOM_Q_VAILD(0) > 0 ) break;
 8000fc0:	2000      	movs	r0, #0
 8000fc2:	47a0      	blx	r4
 8000fc4:	2800      	cmp	r0, #0
 8000fc6:	d0fb      	beq.n	8000fc0 <Hw_VCom_Getch+0xc>
	}

	Hw_VCom_Q_Pop( 0, &Uart_GetData );
 8000fc8:	2000      	movs	r0, #0
 8000fca:	f10d 0107 	add.w	r1, sp, #7
 8000fce:	4a04      	ldr	r2, [pc, #16]	; (8000fe0 <Hw_VCom_Getch+0x2c>)
 8000fd0:	4790      	blx	r2

	return Uart_GetData;
}
 8000fd2:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8000fd6:	b002      	add	sp, #8
 8000fd8:	bd10      	pop	{r4, pc}
 8000fda:	bf00      	nop
 8000fdc:	0800100d 	.word	0x0800100d
 8000fe0:	080010cd 	.word	0x080010cd

08000fe4 <Hw_VCom_Putch>:
			: 시리얼 포트로 문자 1바이트 전송
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_VCom_Putch( char Uart_PutData )
{
 8000fe4:	b508      	push	{r3, lr}
	USB_Send_Data( Uart_PutData );
 8000fe6:	f641 5321 	movw	r3, #7457	; 0x1d21
 8000fea:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000fee:	4798      	blx	r3
 8000ff0:	bd08      	pop	{r3, pc}
 8000ff2:	bf00      	nop

08000ff4 <Hw_VCom_Q_Init>:
{
	u8 i;

	for( i=0; i<HW_VCOM_Q_CH_MAX; i++ )
	{
		Hw_VCom_Q_Start[i] = Hw_VCom_Q_End[i] = 0;
 8000ff4:	f640 22b0 	movw	r2, #2736	; 0xab0
 8000ff8:	f640 23b4 	movw	r3, #2740	; 0xab4
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8001002:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001006:	8011      	strh	r1, [r2, #0]
 8001008:	8019      	strh	r1, [r3, #0]
 800100a:	4770      	bx	lr

0800100c <HW_VCOM_Q_VAILD>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_VCOM_Q_SIZE( u8 Ch )
{
	return (Hw_VCom_Q_Start[Ch] - Hw_VCom_Q_End[Ch] + HW_VCOM_Q_BUFFER_MAX) % HW_VCOM_Q_BUFFER_MAX;
 800100c:	4b0b      	ldr	r3, [pc, #44]	; (800103c <HW_VCOM_Q_VAILD+0x30>)
 800100e:	490c      	ldr	r1, [pc, #48]	; (8001040 <HW_VCOM_Q_VAILD+0x34>)
 8001010:	f933 2010 	ldrsh.w	r2, [r3, r0, lsl #1]
 8001014:	f931 3010 	ldrsh.w	r3, [r1, r0, lsl #1]
 8001018:	f240 30ff 	movw	r0, #1023	; 0x3ff
 800101c:	1ad2      	subs	r2, r2, r3
 800101e:	f502 6180 	add.w	r1, r2, #1024	; 0x400
 8001022:	f2c8 0000 	movt	r0, #32768	; 0x8000
 8001026:	4008      	ands	r0, r1
 8001028:	2800      	cmp	r0, #0
 800102a:	db00      	blt.n	800102e <HW_VCOM_Q_VAILD+0x22>
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_VCOM_Q_VAILD( u8 Ch )
{
	return HW_VCOM_Q_SIZE(Ch);
}
 800102c:	4770      	bx	lr
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_VCOM_Q_SIZE( u8 Ch )
{
	return (Hw_VCom_Q_Start[Ch] - Hw_VCom_Q_End[Ch] + HW_VCOM_Q_BUFFER_MAX) % HW_VCOM_Q_BUFFER_MAX;
 800102e:	3801      	subs	r0, #1
 8001030:	ea6f 5380 	mvn.w	r3, r0, lsl #22
 8001034:	ea6f 5293 	mvn.w	r2, r3, lsr #22
 8001038:	1c50      	adds	r0, r2, #1
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_VCOM_Q_VAILD( u8 Ch )
{
	return HW_VCOM_Q_SIZE(Ch);
}
 800103a:	4770      	bx	lr
 800103c:	20000ab4 	.word	0x20000ab4
 8001040:	20000ab0 	.word	0x20000ab0

08001044 <Hw_VCom_Q_Push>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_VCOM_Q_SIZE( u8 Ch )
{
	return (Hw_VCom_Q_Start[Ch] - Hw_VCom_Q_End[Ch] + HW_VCOM_Q_BUFFER_MAX) % HW_VCOM_Q_BUFFER_MAX;
 8001044:	4b1e      	ldr	r3, [pc, #120]	; (80010c0 <Hw_VCom_Q_Push+0x7c>)
 8001046:	4a1f      	ldr	r2, [pc, #124]	; (80010c4 <Hw_VCom_Q_Push+0x80>)
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_VCom_Q_Push( u8 Ch, u8  *PushData )
{
 8001048:	b430      	push	{r4, r5}
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_VCOM_Q_SIZE( u8 Ch )
{
	return (Hw_VCom_Q_Start[Ch] - Hw_VCom_Q_End[Ch] + HW_VCOM_Q_BUFFER_MAX) % HW_VCOM_Q_BUFFER_MAX;
 800104a:	f833 4010 	ldrh.w	r4, [r3, r0, lsl #1]
 800104e:	f932 5010 	ldrsh.w	r5, [r2, r0, lsl #1]
 8001052:	b222      	sxth	r2, r4
 8001054:	1b55      	subs	r5, r2, r5
 8001056:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800105a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800105e:	f2c8 0300 	movt	r3, #32768	; 0x8000
 8001062:	402b      	ands	r3, r5
 8001064:	2b00      	cmp	r3, #0
 8001066:	db17      	blt.n	8001098 <Hw_VCom_Q_Push+0x54>
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_VCom_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_VCOM_Q_SIZE(Ch) == (HW_VCOM_Q_BUFFER_MAX-1)) return FALSE;
 8001068:	f240 35ff 	movw	r5, #1023	; 0x3ff
 800106c:	42ab      	cmp	r3, r5
 800106e:	d01d      	beq.n	80010ac <Hw_VCom_Q_Push+0x68>

	Hw_VCom_Q_Buffer[Ch][Hw_VCom_Q_Start[Ch]++]  = *PushData;
 8001070:	3401      	adds	r4, #1
	Hw_VCom_Q_Start[Ch] 						%= HW_VCOM_Q_BUFFER_MAX;
 8001072:	462b      	mov	r3, r5
 8001074:	b224      	sxth	r4, r4
u8 Hw_VCom_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_VCOM_Q_SIZE(Ch) == (HW_VCOM_Q_BUFFER_MAX-1)) return FALSE;

	Hw_VCom_Q_Buffer[Ch][Hw_VCom_Q_Start[Ch]++]  = *PushData;
 8001076:	780d      	ldrb	r5, [r1, #0]
	Hw_VCom_Q_Start[Ch] 						%= HW_VCOM_Q_BUFFER_MAX;
 8001078:	f2c8 0300 	movt	r3, #32768	; 0x8000
u8 Hw_VCom_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_VCOM_Q_SIZE(Ch) == (HW_VCOM_Q_BUFFER_MAX-1)) return FALSE;

	Hw_VCom_Q_Buffer[Ch][Hw_VCom_Q_Start[Ch]++]  = *PushData;
 800107c:	eb00 2180 	add.w	r1, r0, r0, lsl #10
 8001080:	188a      	adds	r2, r1, r2
	Hw_VCom_Q_Start[Ch] 						%= HW_VCOM_Q_BUFFER_MAX;
 8001082:	4023      	ands	r3, r4
u8 Hw_VCom_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_VCOM_Q_SIZE(Ch) == (HW_VCOM_Q_BUFFER_MAX-1)) return FALSE;

	Hw_VCom_Q_Buffer[Ch][Hw_VCom_Q_Start[Ch]++]  = *PushData;
 8001084:	4910      	ldr	r1, [pc, #64]	; (80010c8 <Hw_VCom_Q_Push+0x84>)
	Hw_VCom_Q_Start[Ch] 						%= HW_VCOM_Q_BUFFER_MAX;
 8001086:	2b00      	cmp	r3, #0
u8 Hw_VCom_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_VCOM_Q_SIZE(Ch) == (HW_VCOM_Q_BUFFER_MAX-1)) return FALSE;

	Hw_VCom_Q_Buffer[Ch][Hw_VCom_Q_Start[Ch]++]  = *PushData;
 8001088:	548d      	strb	r5, [r1, r2]
	Hw_VCom_Q_Start[Ch] 						%= HW_VCOM_Q_BUFFER_MAX;
 800108a:	db11      	blt.n	80010b0 <Hw_VCom_Q_Push+0x6c>
 800108c:	4a0c      	ldr	r2, [pc, #48]	; (80010c0 <Hw_VCom_Q_Push+0x7c>)
 800108e:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]

	return TRUE;
 8001092:	2001      	movs	r0, #1
}
 8001094:	bc30      	pop	{r4, r5}
 8001096:	4770      	bx	lr
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_VCOM_Q_SIZE( u8 Ch )
{
	return (Hw_VCom_Q_Start[Ch] - Hw_VCom_Q_End[Ch] + HW_VCOM_Q_BUFFER_MAX) % HW_VCOM_Q_BUFFER_MAX;
 8001098:	3b01      	subs	r3, #1
 800109a:	ea6f 5583 	mvn.w	r5, r3, lsl #22
 800109e:	ea6f 5395 	mvn.w	r3, r5, lsr #22
 80010a2:	3301      	adds	r3, #1
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_VCom_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_VCOM_Q_SIZE(Ch) == (HW_VCOM_Q_BUFFER_MAX-1)) return FALSE;
 80010a4:	f240 35ff 	movw	r5, #1023	; 0x3ff
 80010a8:	42ab      	cmp	r3, r5
 80010aa:	d1e1      	bne.n	8001070 <Hw_VCom_Q_Push+0x2c>
 80010ac:	2000      	movs	r0, #0
 80010ae:	e7f1      	b.n	8001094 <Hw_VCom_Q_Push+0x50>

	Hw_VCom_Q_Buffer[Ch][Hw_VCom_Q_Start[Ch]++]  = *PushData;
	Hw_VCom_Q_Start[Ch] 						%= HW_VCOM_Q_BUFFER_MAX;
 80010b0:	3b01      	subs	r3, #1
 80010b2:	ea6f 5283 	mvn.w	r2, r3, lsl #22
 80010b6:	ea6f 5192 	mvn.w	r1, r2, lsr #22
 80010ba:	1c4b      	adds	r3, r1, #1
 80010bc:	e7e6      	b.n	800108c <Hw_VCom_Q_Push+0x48>
 80010be:	bf00      	nop
 80010c0:	20000ab4 	.word	0x20000ab4
 80010c4:	20000ab0 	.word	0x20000ab0
 80010c8:	200006ac 	.word	0x200006ac

080010cc <Hw_VCom_Q_Pop>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_VCOM_Q_SIZE( u8 Ch )
{
	return (Hw_VCom_Q_Start[Ch] - Hw_VCom_Q_End[Ch] + HW_VCOM_Q_BUFFER_MAX) % HW_VCOM_Q_BUFFER_MAX;
 80010cc:	4b1c      	ldr	r3, [pc, #112]	; (8001140 <Hw_VCom_Q_Pop+0x74>)
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_VCom_Q_Pop( u8 Ch, u8 *pData )
{
 80010ce:	b430      	push	{r4, r5}
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_VCOM_Q_SIZE( u8 Ch )
{
	return (Hw_VCom_Q_Start[Ch] - Hw_VCom_Q_End[Ch] + HW_VCOM_Q_BUFFER_MAX) % HW_VCOM_Q_BUFFER_MAX;
 80010d0:	4c1c      	ldr	r4, [pc, #112]	; (8001144 <Hw_VCom_Q_Pop+0x78>)
 80010d2:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
 80010d6:	f934 5010 	ldrsh.w	r5, [r4, r0, lsl #1]
 80010da:	b214      	sxth	r4, r2
 80010dc:	1b2d      	subs	r5, r5, r4
 80010de:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80010e2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80010e6:	f2c8 0300 	movt	r3, #32768	; 0x8000
 80010ea:	402b      	ands	r3, r5
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	db15      	blt.n	800111c <Hw_VCom_Q_Pop+0x50>
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_VCom_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_VCOM_Q_SIZE(Ch) == 0) return FALSE;
 80010f0:	b1e3      	cbz	r3, 800112c <Hw_VCom_Q_Pop+0x60>

	*pData = Hw_VCom_Q_Buffer[Ch][Hw_VCom_Q_End[Ch]++];
 80010f2:	eb00 2580 	add.w	r5, r0, r0, lsl #10
 80010f6:	192c      	adds	r4, r5, r4
 80010f8:	3201      	adds	r2, #1

	Hw_VCom_Q_End[Ch] %= HW_VCOM_Q_BUFFER_MAX;
 80010fa:	f240 33ff 	movw	r3, #1023	; 0x3ff
---------------------------------------------------------------------------*/
u8 Hw_VCom_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_VCOM_Q_SIZE(Ch) == 0) return FALSE;

	*pData = Hw_VCom_Q_Buffer[Ch][Hw_VCom_Q_End[Ch]++];
 80010fe:	4d12      	ldr	r5, [pc, #72]	; (8001148 <Hw_VCom_Q_Pop+0x7c>)

	Hw_VCom_Q_End[Ch] %= HW_VCOM_Q_BUFFER_MAX;
 8001100:	b212      	sxth	r2, r2
 8001102:	f2c8 0300 	movt	r3, #32768	; 0x8000
---------------------------------------------------------------------------*/
u8 Hw_VCom_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_VCOM_Q_SIZE(Ch) == 0) return FALSE;

	*pData = Hw_VCom_Q_Buffer[Ch][Hw_VCom_Q_End[Ch]++];
 8001106:	5d2c      	ldrb	r4, [r5, r4]

	Hw_VCom_Q_End[Ch] %= HW_VCOM_Q_BUFFER_MAX;
 8001108:	4013      	ands	r3, r2
 800110a:	2b00      	cmp	r3, #0
---------------------------------------------------------------------------*/
u8 Hw_VCom_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_VCOM_Q_SIZE(Ch) == 0) return FALSE;

	*pData = Hw_VCom_Q_Buffer[Ch][Hw_VCom_Q_End[Ch]++];
 800110c:	700c      	strb	r4, [r1, #0]

	Hw_VCom_Q_End[Ch] %= HW_VCOM_Q_BUFFER_MAX;
 800110e:	db0f      	blt.n	8001130 <Hw_VCom_Q_Pop+0x64>
 8001110:	490b      	ldr	r1, [pc, #44]	; (8001140 <Hw_VCom_Q_Pop+0x74>)
 8001112:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]

    return TRUE;
 8001116:	2001      	movs	r0, #1
}
 8001118:	bc30      	pop	{r4, r5}
 800111a:	4770      	bx	lr
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_VCOM_Q_SIZE( u8 Ch )
{
	return (Hw_VCom_Q_Start[Ch] - Hw_VCom_Q_End[Ch] + HW_VCOM_Q_BUFFER_MAX) % HW_VCOM_Q_BUFFER_MAX;
 800111c:	3b01      	subs	r3, #1
 800111e:	ea6f 5383 	mvn.w	r3, r3, lsl #22
 8001122:	ea6f 5393 	mvn.w	r3, r3, lsr #22
 8001126:	3301      	adds	r3, #1
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_VCom_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_VCOM_Q_SIZE(Ch) == 0) return FALSE;
 8001128:	2b00      	cmp	r3, #0
 800112a:	d1e2      	bne.n	80010f2 <Hw_VCom_Q_Pop+0x26>
 800112c:	4618      	mov	r0, r3
 800112e:	e7f3      	b.n	8001118 <Hw_VCom_Q_Pop+0x4c>

	*pData = Hw_VCom_Q_Buffer[Ch][Hw_VCom_Q_End[Ch]++];

	Hw_VCom_Q_End[Ch] %= HW_VCOM_Q_BUFFER_MAX;
 8001130:	1e59      	subs	r1, r3, #1
 8001132:	ea6f 5381 	mvn.w	r3, r1, lsl #22
 8001136:	ea6f 5293 	mvn.w	r2, r3, lsr #22
 800113a:	1c53      	adds	r3, r2, #1
 800113c:	e7e8      	b.n	8001110 <Hw_VCom_Q_Pop+0x44>
 800113e:	bf00      	nop
 8001140:	20000ab0 	.word	0x20000ab0
 8001144:	20000ab4 	.word	0x20000ab4
 8001148:	200006ac 	.word	0x200006ac

0800114c <EP1_IN_Callback>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void EP1_IN_Callback (void)
{
 800114c:	b538      	push	{r3, r4, r5, lr}
  uint16_t USB_Tx_ptr;
  uint16_t USB_Tx_length;
  
  if (USB_Tx_State == 1)
 800114e:	4b15      	ldr	r3, [pc, #84]	; (80011a4 <EP1_IN_Callback+0x58>)
 8001150:	781a      	ldrb	r2, [r3, #0]
 8001152:	2a01      	cmp	r2, #1
 8001154:	d000      	beq.n	8001158 <EP1_IN_Callback+0xc>
 8001156:	bd38      	pop	{r3, r4, r5, pc}
  {
    if (USART_Rx_length == 0) 
 8001158:	4c13      	ldr	r4, [pc, #76]	; (80011a8 <EP1_IN_Callback+0x5c>)
 800115a:	6820      	ldr	r0, [r4, #0]
 800115c:	b300      	cbz	r0, 80011a0 <EP1_IN_Callback+0x54>
    {
      USB_Tx_State = 0;
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
 800115e:	2840      	cmp	r0, #64	; 0x40
        USB_Tx_ptr = USART_Rx_ptr_out;
 8001160:	4a12      	ldr	r2, [pc, #72]	; (80011ac <EP1_IN_Callback+0x60>)
    {
      USB_Tx_State = 0;
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
 8001162:	d814      	bhi.n	800118e <EP1_IN_Callback+0x42>
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
        USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;    
      }
      else 
      {
        USB_Tx_ptr = USART_Rx_ptr_out;
 8001164:	6811      	ldr	r1, [r2, #0]
        USB_Tx_length = USART_Rx_length;
 8001166:	b285      	uxth	r5, r0
        
        USART_Rx_ptr_out += USART_Rx_length;
 8001168:	1808      	adds	r0, r1, r0
 800116a:	6010      	str	r0, [r2, #0]
        USART_Rx_length = 0;
 800116c:	2200      	movs	r2, #0
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
        USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;    
      }
      else 
      {
        USB_Tx_ptr = USART_Rx_ptr_out;
 800116e:	b28b      	uxth	r3, r1
        USB_Tx_length = USART_Rx_length;
        
        USART_Rx_ptr_out += USART_Rx_length;
        USART_Rx_length = 0;
 8001170:	6022      	str	r2, [r4, #0]
      }
      UserToPMABufferCopy(&USART_Rx_Buffer[USB_Tx_ptr], ENDP1_TXADDR, USB_Tx_length);
 8001172:	480f      	ldr	r0, [pc, #60]	; (80011b0 <EP1_IN_Callback+0x64>)
 8001174:	21c0      	movs	r1, #192	; 0xc0
 8001176:	18c0      	adds	r0, r0, r3
 8001178:	462a      	mov	r2, r5
 800117a:	4b0e      	ldr	r3, [pc, #56]	; (80011b4 <EP1_IN_Callback+0x68>)
 800117c:	4798      	blx	r3
      SetEPTxCount(ENDP1, USB_Tx_length);
 800117e:	2001      	movs	r0, #1
 8001180:	4629      	mov	r1, r5
 8001182:	4a0d      	ldr	r2, [pc, #52]	; (80011b8 <EP1_IN_Callback+0x6c>)
 8001184:	4790      	blx	r2
      SetEPTxValid(ENDP1); 
 8001186:	2001      	movs	r0, #1
 8001188:	490c      	ldr	r1, [pc, #48]	; (80011bc <EP1_IN_Callback+0x70>)
 800118a:	4788      	blx	r1
 800118c:	bd38      	pop	{r3, r4, r5, pc}
      USB_Tx_State = 0;
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
        USB_Tx_ptr = USART_Rx_ptr_out;
 800118e:	6815      	ldr	r5, [r2, #0]
        USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
        
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
        USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;    
 8001190:	3840      	subs	r0, #64	; 0x40
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
        USB_Tx_ptr = USART_Rx_ptr_out;
        USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
        
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
 8001192:	f105 0140 	add.w	r1, r5, #64	; 0x40
      USB_Tx_State = 0;
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
        USB_Tx_ptr = USART_Rx_ptr_out;
 8001196:	b2ab      	uxth	r3, r5
        USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
        
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
        USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;    
 8001198:	6020      	str	r0, [r4, #0]
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
        USB_Tx_ptr = USART_Rx_ptr_out;
        USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
        
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
 800119a:	6011      	str	r1, [r2, #0]
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
        USB_Tx_ptr = USART_Rx_ptr_out;
        USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
 800119c:	2540      	movs	r5, #64	; 0x40
 800119e:	e7e8      	b.n	8001172 <EP1_IN_Callback+0x26>
  
  if (USB_Tx_State == 1)
  {
    if (USART_Rx_length == 0) 
    {
      USB_Tx_State = 0;
 80011a0:	7018      	strb	r0, [r3, #0]
 80011a2:	bd38      	pop	{r3, r4, r5, pc}
 80011a4:	200002cc 	.word	0x200002cc
 80011a8:	200002d8 	.word	0x200002d8
 80011ac:	200002d4 	.word	0x200002d4
 80011b0:	20000b24 	.word	0x20000b24
 80011b4:	080027a5 	.word	0x080027a5
 80011b8:	08002a55 	.word	0x08002a55
 80011bc:	08002919 	.word	0x08002919

080011c0 <EP3_OUT_Callback>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void EP3_OUT_Callback(void)
{
 80011c0:	b510      	push	{r4, lr}
  uint16_t USB_Rx_Cnt;
  
  /* Get the received data buffer and update the counter */
  USB_Rx_Cnt = USB_SIL_Read(EP3_OUT, USB_Rx_Buffer);
 80011c2:	f640 24bc 	movw	r4, #2748	; 0xabc
 80011c6:	f2c2 0400 	movt	r4, #8192	; 0x2000
 80011ca:	f642 3315 	movw	r3, #11029	; 0x2b15
 80011ce:	4621      	mov	r1, r4
 80011d0:	f6c0 0300 	movt	r3, #2048	; 0x800
 80011d4:	2003      	movs	r0, #3
 80011d6:	4798      	blx	r3
  
  /* USB data will be immediately processed, this allow next USB traffic being 
  NAKed till the end of the USART Xfer */
  
  USB_To_USART_Send_Data(USB_Rx_Buffer, USB_Rx_Cnt);
 80011d8:	f641 32d5 	movw	r2, #7125	; 0x1bd5
 80011dc:	b2c1      	uxtb	r1, r0
 80011de:	f6c0 0200 	movt	r2, #2048	; 0x800
 80011e2:	4620      	mov	r0, r4
 80011e4:	4790      	blx	r2


  /* Enable the receive of data on EP3 */
  SetEPRxValid(ENDP3);
 80011e6:	f642 113d 	movw	r1, #10557	; 0x293d
 80011ea:	2003      	movs	r0, #3
 80011ec:	f6c0 0100 	movt	r1, #2048	; 0x800
 80011f0:	4788      	blx	r1
 80011f2:	bd10      	pop	{r4, pc}

080011f4 <SOF_Callback>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SOF_Callback(void)
{
 80011f4:	b508      	push	{r3, lr}
  static uint32_t FrameCount = 0;
  
  if(bDeviceState == CONFIGURED)
 80011f6:	4b08      	ldr	r3, [pc, #32]	; (8001218 <SOF_Callback+0x24>)
 80011f8:	6818      	ldr	r0, [r3, #0]
 80011fa:	2805      	cmp	r0, #5
 80011fc:	d000      	beq.n	8001200 <SOF_Callback+0xc>
 80011fe:	bd08      	pop	{r3, pc}
  {
    if (FrameCount++ == VCOMPORT_IN_FRAME_INTERVAL)
 8001200:	4b06      	ldr	r3, [pc, #24]	; (800121c <SOF_Callback+0x28>)
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	1c51      	adds	r1, r2, #1
 8001206:	2a05      	cmp	r2, #5
 8001208:	6019      	str	r1, [r3, #0]
 800120a:	d1f8      	bne.n	80011fe <SOF_Callback+0xa>
    {
      /* Reset the frame counter */
      FrameCount = 0;
 800120c:	2000      	movs	r0, #0
 800120e:	6018      	str	r0, [r3, #0]
      
      /* Check the data to be sent through IN pipe */
      Handle_USBAsynchXfer();
 8001210:	4b03      	ldr	r3, [pc, #12]	; (8001220 <SOF_Callback+0x2c>)
 8001212:	4798      	blx	r3
 8001214:	e7f3      	b.n	80011fe <SOF_Callback+0xa>
 8001216:	bf00      	nop
 8001218:	200002c0 	.word	0x200002c0
 800121c:	200002ac 	.word	0x200002ac
 8001220:	08001c7d 	.word	0x08001c7d

08001224 <USB_Istr>:
void USB_Istr(void)
{
    uint32_t i=0;
 __IO uint32_t EP[8];
  
  wIstr = _GetISTR();
 8001224:	f645 4244 	movw	r2, #23620	; 0x5c44
 8001228:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800122c:	6813      	ldr	r3, [r2, #0]
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Istr(void)
{
 800122e:	b530      	push	{r4, r5, lr}
    uint32_t i=0;
 __IO uint32_t EP[8];
  
  wIstr = _GetISTR();
 8001230:	4c8f      	ldr	r4, [pc, #572]	; (8001470 <USB_Istr+0x24c>)
 8001232:	b298      	uxth	r0, r3

  //Lb_printf("%x %x %x %x  \r\n", wIstr >> 16, wIstr & 0x0000FFFF, wInterrupt_Mask >> 16, wInterrupt_Mask&0x0000FFFF);

#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
 8001234:	4d8f      	ldr	r5, [pc, #572]	; (8001474 <USB_Istr+0x250>)
void USB_Istr(void)
{
    uint32_t i=0;
 __IO uint32_t EP[8];
  
  wIstr = _GetISTR();
 8001236:	8020      	strh	r0, [r4, #0]

  //Lb_printf("%x %x %x %x  \r\n", wIstr >> 16, wIstr & 0x0000FFFF, wInterrupt_Mask >> 16, wInterrupt_Mask&0x0000FFFF);

#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
 8001238:	8821      	ldrh	r1, [r4, #0]
 800123a:	882b      	ldrh	r3, [r5, #0]
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Istr(void)
{
 800123c:	b089      	sub	sp, #36	; 0x24
  wIstr = _GetISTR();

  //Lb_printf("%x %x %x %x  \r\n", wIstr >> 16, wIstr & 0x0000FFFF, wInterrupt_Mask >> 16, wInterrupt_Mask&0x0000FFFF);

#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
 800123e:	4019      	ands	r1, r3
 8001240:	f401 7000 	and.w	r0, r1, #512	; 0x200
 8001244:	b281      	uxth	r1, r0
 8001246:	2900      	cmp	r1, #0
 8001248:	d168      	bne.n	800131c <USB_Istr+0xf8>
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  
  
#if (IMR_MSK & ISTR_CTR)
  if (wIstr & ISTR_CTR & wInterrupt_Mask)
 800124a:	8822      	ldrh	r2, [r4, #0]
 800124c:	f402 4100 	and.w	r1, r2, #32768	; 0x8000
 8001250:	420b      	tst	r3, r1
 8001252:	d15f      	bne.n	8001314 <USB_Istr+0xf0>
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  
#if (IMR_MSK & ISTR_RESET)
  if (wIstr & ISTR_RESET & wInterrupt_Mask)
 8001254:	8822      	ldrh	r2, [r4, #0]
 8001256:	f402 6180 	and.w	r1, r2, #1024	; 0x400
 800125a:	420b      	tst	r3, r1
 800125c:	d14e      	bne.n	80012fc <USB_Istr+0xd8>
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_ERR)
  if (wIstr & ISTR_ERR & wInterrupt_Mask)
 800125e:	8820      	ldrh	r0, [r4, #0]
 8001260:	f400 5200 	and.w	r2, r0, #8192	; 0x2000
 8001264:	4213      	tst	r3, r2
 8001266:	d006      	beq.n	8001276 <USB_Istr+0x52>
  {
    _SetISTR((uint16_t)CLR_ERR);
 8001268:	f645 4044 	movw	r0, #23620	; 0x5c44
 800126c:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8001270:	f64d 71ff 	movw	r1, #57343	; 0xdfff
 8001274:	6001      	str	r1, [r0, #0]
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_WKUP)
  if (wIstr & ISTR_WKUP & wInterrupt_Mask)
 8001276:	8822      	ldrh	r2, [r4, #0]
 8001278:	f402 5080 	and.w	r0, r2, #4096	; 0x1000
 800127c:	4203      	tst	r3, r0
 800127e:	d131      	bne.n	80012e4 <USB_Istr+0xc0>
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_SUSP)
  if (wIstr & ISTR_SUSP & wInterrupt_Mask)
 8001280:	8820      	ldrh	r0, [r4, #0]
 8001282:	f400 6100 	and.w	r1, r0, #2048	; 0x800
 8001286:	420b      	tst	r3, r1
 8001288:	d00e      	beq.n	80012a8 <USB_Istr+0x84>
  {
	//Lb_printf(" in susp ");
    /* check if SUSPEND is possible */
    if(fSuspendEnabled)
 800128a:	4b7b      	ldr	r3, [pc, #492]	; (8001478 <USB_Istr+0x254>)
 800128c:	781a      	ldrb	r2, [r3, #0]
 800128e:	2a00      	cmp	r2, #0
 8001290:	d125      	bne.n	80012de <USB_Istr+0xba>
    }
    else
    {
      //Lb_printf("l\n");    	
      /* if not possible then resume after xx ms */
      Resume(RESUME_LATER);
 8001292:	2002      	movs	r0, #2
 8001294:	4979      	ldr	r1, [pc, #484]	; (800147c <USB_Istr+0x258>)
 8001296:	4788      	blx	r1
    }
    
    //Lb_printf(" out susp ");
    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    _SetISTR((uint16_t)CLR_SUSP);
 8001298:	f645 4244 	movw	r2, #23620	; 0x5c44
 800129c:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80012a0:	f24f 71ff 	movw	r1, #63487	; 0xf7ff
 80012a4:	882b      	ldrh	r3, [r5, #0]
 80012a6:	6011      	str	r1, [r2, #0]
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/

#if (IMR_MSK & ISTR_ESOF)
  if (wIstr & ISTR_ESOF & wInterrupt_Mask)
 80012a8:	8820      	ldrh	r0, [r4, #0]
 80012aa:	f400 7280 	and.w	r2, r0, #256	; 0x100
 80012ae:	4213      	tst	r3, r2
 80012b0:	d013      	beq.n	80012da <USB_Istr+0xb6>
  {
    /* clear ESOF flag in ISTR */
    _SetISTR((uint16_t)CLR_ESOF);
 80012b2:	f645 4344 	movw	r3, #23620	; 0x5c44
 80012b6:	f2c4 0300 	movt	r3, #16384	; 0x4000
    
    if ((_GetFNR()&FNR_RXDP)!=0)
 80012ba:	f645 4048 	movw	r0, #23624	; 0x5c48

#if (IMR_MSK & ISTR_ESOF)
  if (wIstr & ISTR_ESOF & wInterrupt_Mask)
  {
    /* clear ESOF flag in ISTR */
    _SetISTR((uint16_t)CLR_ESOF);
 80012be:	f64f 61ff 	movw	r1, #65279	; 0xfeff
    
    if ((_GetFNR()&FNR_RXDP)!=0)
 80012c2:	f2c4 0000 	movt	r0, #16384	; 0x4000

#if (IMR_MSK & ISTR_ESOF)
  if (wIstr & ISTR_ESOF & wInterrupt_Mask)
  {
    /* clear ESOF flag in ISTR */
    _SetISTR((uint16_t)CLR_ESOF);
 80012c6:	6019      	str	r1, [r3, #0]
    
    if ((_GetFNR()&FNR_RXDP)!=0)
 80012c8:	6802      	ldr	r2, [r0, #0]
 80012ca:	0410      	lsls	r0, r2, #16
 80012cc:	d432      	bmi.n	8001334 <USB_Istr+0x110>
        esof_counter = 0;
      }
    }
    else
    {
        esof_counter = 0;
 80012ce:	4b6c      	ldr	r3, [pc, #432]	; (8001480 <USB_Istr+0x25c>)
 80012d0:	2000      	movs	r0, #0
 80012d2:	6018      	str	r0, [r3, #0]
    }
    
    /* resume handling timing is made with ESOFs */
    Resume(RESUME_ESOF); /* request without change of the machine state */
 80012d4:	2007      	movs	r0, #7
 80012d6:	4b69      	ldr	r3, [pc, #420]	; (800147c <USB_Istr+0x258>)
 80012d8:	4798      	blx	r3
#ifdef ESOF_CALLBACK
    ESOF_Callback();
#endif
  }
#endif
} /* USB_Istr */
 80012da:	b009      	add	sp, #36	; 0x24
 80012dc:	bd30      	pop	{r4, r5, pc}
	//Lb_printf(" in susp ");
    /* check if SUSPEND is possible */
    if(fSuspendEnabled)
    {
      //Lb_printf("k\n");
      Suspend();
 80012de:	4869      	ldr	r0, [pc, #420]	; (8001484 <USB_Istr+0x260>)
 80012e0:	4780      	blx	r0
 80012e2:	e7d9      	b.n	8001298 <USB_Istr+0x74>
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_WKUP)
  if (wIstr & ISTR_WKUP & wInterrupt_Mask)
  {
    _SetISTR((uint16_t)CLR_WKUP);
 80012e4:	f645 4344 	movw	r3, #23620	; 0x5c44
 80012e8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80012ec:	f64e 71ff 	movw	r1, #61439	; 0xefff
 80012f0:	6019      	str	r1, [r3, #0]
    Resume(RESUME_EXTERNAL);
 80012f2:	2000      	movs	r0, #0
 80012f4:	4a61      	ldr	r2, [pc, #388]	; (800147c <USB_Istr+0x258>)
 80012f6:	4790      	blx	r2
 80012f8:	882b      	ldrh	r3, [r5, #0]
 80012fa:	e7c1      	b.n	8001280 <USB_Istr+0x5c>
  if (wIstr & ISTR_RESET & wInterrupt_Mask)
  {
  	//Lb_printf(" ISTR_RESET ");
  	
    _SetISTR((uint16_t)CLR_RESET);
    Device_Property.Reset();
 80012fc:	4a62      	ldr	r2, [pc, #392]	; (8001488 <USB_Istr+0x264>)
#if (IMR_MSK & ISTR_RESET)
  if (wIstr & ISTR_RESET & wInterrupt_Mask)
  {
  	//Lb_printf(" ISTR_RESET ");
  	
    _SetISTR((uint16_t)CLR_RESET);
 80012fe:	f645 4344 	movw	r3, #23620	; 0x5c44
 8001302:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001306:	f64f 30ff 	movw	r0, #64511	; 0xfbff
 800130a:	6018      	str	r0, [r3, #0]
    Device_Property.Reset();
 800130c:	6851      	ldr	r1, [r2, #4]
 800130e:	4788      	blx	r1
 8001310:	882b      	ldrh	r3, [r5, #0]
 8001312:	e7a4      	b.n	800125e <USB_Istr+0x3a>
#if (IMR_MSK & ISTR_CTR)
  if (wIstr & ISTR_CTR & wInterrupt_Mask)
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    CTR_LP();
 8001314:	485d      	ldr	r0, [pc, #372]	; (800148c <USB_Istr+0x268>)
 8001316:	4780      	blx	r0
 8001318:	882b      	ldrh	r3, [r5, #0]
 800131a:	e79b      	b.n	8001254 <USB_Istr+0x30>
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
  {
	//Lb_printf(" ISTR_SOF ");

    _SetISTR((uint16_t)CLR_SOF);
    bIntPackSOF++;
 800131c:	4b5c      	ldr	r3, [pc, #368]	; (8001490 <USB_Istr+0x26c>)
#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
  {
	//Lb_printf(" ISTR_SOF ");

    _SetISTR((uint16_t)CLR_SOF);
 800131e:	f64f 50ff 	movw	r0, #65023	; 0xfdff
 8001322:	6010      	str	r0, [r2, #0]
    bIntPackSOF++;
 8001324:	781a      	ldrb	r2, [r3, #0]
 8001326:	1c51      	adds	r1, r2, #1
 8001328:	b2c8      	uxtb	r0, r1
 800132a:	7018      	strb	r0, [r3, #0]

#ifdef SOF_CALLBACK
    SOF_Callback();
 800132c:	4b59      	ldr	r3, [pc, #356]	; (8001494 <USB_Istr+0x270>)
 800132e:	4798      	blx	r3
 8001330:	882b      	ldrh	r3, [r5, #0]
 8001332:	e78a      	b.n	800124a <USB_Istr+0x26>
    _SetISTR((uint16_t)CLR_ESOF);
    
    if ((_GetFNR()&FNR_RXDP)!=0)
    {
      /* increment ESOF counter */
      esof_counter ++;
 8001334:	4852      	ldr	r0, [pc, #328]	; (8001480 <USB_Istr+0x25c>)
 8001336:	6801      	ldr	r1, [r0, #0]
 8001338:	1c4a      	adds	r2, r1, #1
 800133a:	6002      	str	r2, [r0, #0]
      
      /* test if we enter in ESOF more than 3 times with FSUSP =0 and RXDP =1=>> possible missing SUSP flag*/
      if ((esof_counter >3)&&((_GetCNTR()&CNTR_FSUSP)==0))
 800133c:	6801      	ldr	r1, [r0, #0]
 800133e:	2903      	cmp	r1, #3
 8001340:	d9c8      	bls.n	80012d4 <USB_Istr+0xb0>
 8001342:	f645 4240 	movw	r2, #23616	; 0x5c40
 8001346:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800134a:	6811      	ldr	r1, [r2, #0]
 800134c:	0709      	lsls	r1, r1, #28
 800134e:	d4c1      	bmi.n	80012d4 <USB_Istr+0xb0>
      {           
        /* this a sequence to apply a force RESET*/
      
        /*Store CNTR value */
        wCNTR = _GetCNTR(); 
 8001350:	6815      	ldr	r5, [r2, #0]
 8001352:	4951      	ldr	r1, [pc, #324]	; (8001498 <USB_Istr+0x274>)
 8001354:	b2ad      	uxth	r5, r5
      
        /*Store endpoints registers status */
        for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 8001356:	f44f 44b8 	mov.w	r4, #23552	; 0x5c00
      if ((esof_counter >3)&&((_GetCNTR()&CNTR_FSUSP)==0))
      {           
        /* this a sequence to apply a force RESET*/
      
        /*Store CNTR value */
        wCNTR = _GetCNTR(); 
 800135a:	600d      	str	r5, [r1, #0]
      
        /*Store endpoints registers status */
        for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 800135c:	f2c4 0400 	movt	r4, #16384	; 0x4000
 8001360:	6825      	ldr	r5, [r4, #0]
 8001362:	f645 4404 	movw	r4, #23556	; 0x5c04
 8001366:	b2ad      	uxth	r5, r5
 8001368:	9500      	str	r5, [sp, #0]
 800136a:	f2c4 0400 	movt	r4, #16384	; 0x4000
 800136e:	6825      	ldr	r5, [r4, #0]
 8001370:	f645 4408 	movw	r4, #23560	; 0x5c08
 8001374:	b2ad      	uxth	r5, r5
 8001376:	9501      	str	r5, [sp, #4]
 8001378:	f2c4 0400 	movt	r4, #16384	; 0x4000
 800137c:	6825      	ldr	r5, [r4, #0]
 800137e:	f645 440c 	movw	r4, #23564	; 0x5c0c
 8001382:	b2ad      	uxth	r5, r5
 8001384:	9502      	str	r5, [sp, #8]
 8001386:	f2c4 0400 	movt	r4, #16384	; 0x4000
 800138a:	6825      	ldr	r5, [r4, #0]
 800138c:	f645 4410 	movw	r4, #23568	; 0x5c10
 8001390:	b2ad      	uxth	r5, r5
 8001392:	9503      	str	r5, [sp, #12]
 8001394:	f2c4 0400 	movt	r4, #16384	; 0x4000
 8001398:	6825      	ldr	r5, [r4, #0]
 800139a:	f645 4414 	movw	r4, #23572	; 0x5c14
 800139e:	b2ad      	uxth	r5, r5
 80013a0:	9504      	str	r5, [sp, #16]
 80013a2:	f2c4 0400 	movt	r4, #16384	; 0x4000
 80013a6:	6825      	ldr	r5, [r4, #0]
 80013a8:	f645 4418 	movw	r4, #23576	; 0x5c18
 80013ac:	b2ad      	uxth	r5, r5
 80013ae:	9505      	str	r5, [sp, #20]
 80013b0:	f2c4 0400 	movt	r4, #16384	; 0x4000
 80013b4:	6825      	ldr	r5, [r4, #0]
 80013b6:	f645 441c 	movw	r4, #23580	; 0x5c1c
 80013ba:	b2ad      	uxth	r5, r5
 80013bc:	9506      	str	r5, [sp, #24]
 80013be:	f2c4 0400 	movt	r4, #16384	; 0x4000
 80013c2:	6824      	ldr	r4, [r4, #0]
 80013c4:	b2a4      	uxth	r4, r4
 80013c6:	9407      	str	r4, [sp, #28]
      
        /*apply FRES */
        wCNTR|=CNTR_FRES;
 80013c8:	680c      	ldr	r4, [r1, #0]
 80013ca:	f044 0401 	orr.w	r4, r4, #1
 80013ce:	600c      	str	r4, [r1, #0]
        _SetCNTR(wCNTR);
 80013d0:	680c      	ldr	r4, [r1, #0]
 80013d2:	b2a4      	uxth	r4, r4
 80013d4:	6014      	str	r4, [r2, #0]
 
        /*clear FRES*/
        wCNTR&=~CNTR_FRES;
 80013d6:	680c      	ldr	r4, [r1, #0]
 80013d8:	f024 0401 	bic.w	r4, r4, #1
 80013dc:	600c      	str	r4, [r1, #0]
        _SetCNTR(wCNTR);
 80013de:	6809      	ldr	r1, [r1, #0]
 80013e0:	b289      	uxth	r1, r1
 80013e2:	6011      	str	r1, [r2, #0]
      
        /*poll for RESET flag in ISTR*/
        while((_GetISTR()&ISTR_RESET) == 0);
 80013e4:	6819      	ldr	r1, [r3, #0]
 80013e6:	f645 4244 	movw	r2, #23620	; 0x5c44
 80013ea:	0549      	lsls	r1, r1, #21
 80013ec:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80013f0:	d5f8      	bpl.n	80013e4 <USB_Istr+0x1c0>
  
        /* clear RESET flag in ISTR */
        _SetISTR((uint16_t)CLR_RESET);
 80013f2:	f64f 33ff 	movw	r3, #64511	; 0xfbff
 80013f6:	6013      	str	r3, [r2, #0]
   
       /*restore Enpoints*/
        for (i=0;i<8;i++)
        _SetENDPOINT(i, EP[i]);
 80013f8:	9900      	ldr	r1, [sp, #0]
 80013fa:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 80013fe:	b28a      	uxth	r2, r1
 8001400:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001404:	601a      	str	r2, [r3, #0]
 8001406:	9901      	ldr	r1, [sp, #4]
 8001408:	f645 4304 	movw	r3, #23556	; 0x5c04
 800140c:	b28a      	uxth	r2, r1
 800140e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	9902      	ldr	r1, [sp, #8]
 8001416:	f645 4308 	movw	r3, #23560	; 0x5c08
 800141a:	b28a      	uxth	r2, r1
 800141c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001420:	601a      	str	r2, [r3, #0]
 8001422:	9903      	ldr	r1, [sp, #12]
 8001424:	f645 430c 	movw	r3, #23564	; 0x5c0c
 8001428:	b28a      	uxth	r2, r1
 800142a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	9904      	ldr	r1, [sp, #16]
 8001432:	f645 4310 	movw	r3, #23568	; 0x5c10
 8001436:	b28a      	uxth	r2, r1
 8001438:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	9905      	ldr	r1, [sp, #20]
 8001440:	f645 4314 	movw	r3, #23572	; 0x5c14
 8001444:	b28a      	uxth	r2, r1
 8001446:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	9906      	ldr	r1, [sp, #24]
 800144e:	f645 4318 	movw	r3, #23576	; 0x5c18
 8001452:	b28a      	uxth	r2, r1
 8001454:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001458:	601a      	str	r2, [r3, #0]
 800145a:	9907      	ldr	r1, [sp, #28]
 800145c:	f645 431c 	movw	r3, #23580	; 0x5c1c
 8001460:	b28a      	uxth	r2, r1
 8001462:	f2c4 0300 	movt	r3, #16384	; 0x4000
      
        esof_counter = 0;
 8001466:	2100      	movs	r1, #0
        /* clear RESET flag in ISTR */
        _SetISTR((uint16_t)CLR_RESET);
   
       /*restore Enpoints*/
        for (i=0;i<8;i++)
        _SetENDPOINT(i, EP[i]);
 8001468:	601a      	str	r2, [r3, #0]
      
        esof_counter = 0;
 800146a:	6001      	str	r1, [r0, #0]
 800146c:	e732      	b.n	80012d4 <USB_Istr+0xb0>
 800146e:	bf00      	nop
 8001470:	20000afc 	.word	0x20000afc
 8001474:	20001358 	.word	0x20001358
 8001478:	200002c4 	.word	0x200002c4
 800147c:	08001951 	.word	0x08001951
 8001480:	200002b8 	.word	0x200002b8
 8001484:	08001781 	.word	0x08001781
 8001488:	2000005c 	.word	0x2000005c
 800148c:	08002b4d 	.word	0x08002b4d
 8001490:	200002b4 	.word	0x200002b4
 8001494:	080011f5 	.word	0x080011f5
 8001498:	200002b0 	.word	0x200002b0

0800149c <Virtual_Com_Port_SetConfiguration>:
*******************************************************************************/
void Virtual_Com_Port_SetConfiguration(void)
{
  DEVICE_INFO *pInfo = &Device_Info;

  if (pInfo->Current_Configuration != 0)
 800149c:	4b03      	ldr	r3, [pc, #12]	; (80014ac <Virtual_Com_Port_SetConfiguration+0x10>)
 800149e:	7a98      	ldrb	r0, [r3, #10]
 80014a0:	b110      	cbz	r0, 80014a8 <Virtual_Com_Port_SetConfiguration+0xc>
  {
    /* Device configured */
    bDeviceState = CONFIGURED;
 80014a2:	4903      	ldr	r1, [pc, #12]	; (80014b0 <Virtual_Com_Port_SetConfiguration+0x14>)
 80014a4:	2205      	movs	r2, #5
 80014a6:	600a      	str	r2, [r1, #0]
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	20001334 	.word	0x20001334
 80014b0:	200002c0 	.word	0x200002c0

080014b4 <Virtual_Com_Port_SetDeviceAddress>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_SetDeviceAddress (void)
{
  bDeviceState = ADDRESSED;
 80014b4:	f240 23c0 	movw	r3, #704	; 0x2c0
 80014b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80014bc:	2204      	movs	r2, #4
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop

080014c4 <Virtual_Com_Port_Status_In>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Status_In(void)
{
  if (Request == SET_LINE_CODING)
 80014c4:	4b03      	ldr	r3, [pc, #12]	; (80014d4 <Virtual_Com_Port_Status_In+0x10>)
 80014c6:	781a      	ldrb	r2, [r3, #0]
 80014c8:	2a20      	cmp	r2, #32
 80014ca:	d101      	bne.n	80014d0 <Virtual_Com_Port_Status_In+0xc>
  {
    //USART_Config();
    Request = 0;
 80014cc:	2000      	movs	r0, #0
 80014ce:	7018      	strb	r0, [r3, #0]
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	200002bc 	.word	0x200002bc

080014d8 <Virtual_Com_Port_Status_Out>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Status_Out(void)
{}
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop

080014dc <Virtual_Com_Port_Data_Setup>:
{
  uint8_t    *(*CopyRoutine)(uint16_t);

  CopyRoutine = NULL;

  if (RequestNo == GET_LINE_CODING)
 80014dc:	2821      	cmp	r0, #33	; 0x21
* Input          : Request Nb.
* Output         : None.
* Return         : USB_UNSUPPORT or USB_SUCCESS.
*******************************************************************************/
RESULT Virtual_Com_Port_Data_Setup(uint8_t RequestNo)
{
 80014de:	b510      	push	{r4, lr}
 80014e0:	4603      	mov	r3, r0
  uint8_t    *(*CopyRoutine)(uint16_t);

  CopyRoutine = NULL;

  if (RequestNo == GET_LINE_CODING)
 80014e2:	d003      	beq.n	80014ec <Virtual_Com_Port_Data_Setup+0x10>
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    {
      CopyRoutine = Virtual_Com_Port_GetLineCoding;
    }
  }
  else if (RequestNo == SET_LINE_CODING)
 80014e4:	2820      	cmp	r0, #32
 80014e6:	d011      	beq.n	800150c <Virtual_Com_Port_Data_Setup+0x30>
    Request = SET_LINE_CODING;
  }

  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
 80014e8:	2002      	movs	r0, #2
 80014ea:	bd10      	pop	{r4, pc}

  CopyRoutine = NULL;

  if (RequestNo == GET_LINE_CODING)
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 80014ec:	4a0f      	ldr	r2, [pc, #60]	; (800152c <Virtual_Com_Port_Data_Setup+0x50>)
 80014ee:	6813      	ldr	r3, [r2, #0]
 80014f0:	7818      	ldrb	r0, [r3, #0]
 80014f2:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 80014f6:	2921      	cmp	r1, #33	; 0x21
 80014f8:	d1f6      	bne.n	80014e8 <Virtual_Com_Port_Data_Setup+0xc>
    {
      CopyRoutine = Virtual_Com_Port_GetLineCoding;
 80014fa:	490d      	ldr	r1, [pc, #52]	; (8001530 <Virtual_Com_Port_Data_Setup+0x54>)
  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
  }

  pInformation->Ctrl_Info.CopyData = CopyRoutine;
 80014fc:	6812      	ldr	r2, [r2, #0]
  pInformation->Ctrl_Info.Usb_wOffset = 0;
 80014fe:	2400      	movs	r4, #0
  (*CopyRoutine)(0);
 8001500:	4620      	mov	r0, r4
  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
  }

  pInformation->Ctrl_Info.CopyData = CopyRoutine;
 8001502:	6191      	str	r1, [r2, #24]
  pInformation->Ctrl_Info.Usb_wOffset = 0;
 8001504:	8254      	strh	r4, [r2, #18]
  (*CopyRoutine)(0);
 8001506:	4788      	blx	r1
  return USB_SUCCESS;
 8001508:	4620      	mov	r0, r4
 800150a:	bd10      	pop	{r4, pc}
      CopyRoutine = Virtual_Com_Port_GetLineCoding;
    }
  }
  else if (RequestNo == SET_LINE_CODING)
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 800150c:	4a07      	ldr	r2, [pc, #28]	; (800152c <Virtual_Com_Port_Data_Setup+0x50>)
 800150e:	6811      	ldr	r1, [r2, #0]
 8001510:	7808      	ldrb	r0, [r1, #0]
 8001512:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 8001516:	2921      	cmp	r1, #33	; 0x21
 8001518:	d003      	beq.n	8001522 <Virtual_Com_Port_Data_Setup+0x46>
    {
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
    }
    Request = SET_LINE_CODING;
 800151a:	4a06      	ldr	r2, [pc, #24]	; (8001534 <Virtual_Com_Port_Data_Setup+0x58>)
  }

  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
 800151c:	2002      	movs	r0, #2
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    {
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
    }
    Request = SET_LINE_CODING;
 800151e:	7013      	strb	r3, [r2, #0]

  pInformation->Ctrl_Info.CopyData = CopyRoutine;
  pInformation->Ctrl_Info.Usb_wOffset = 0;
  (*CopyRoutine)(0);
  return USB_SUCCESS;
}
 8001520:	bd10      	pop	{r4, pc}
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    {
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
    }
    Request = SET_LINE_CODING;
 8001522:	4c04      	ldr	r4, [pc, #16]	; (8001534 <Virtual_Com_Port_Data_Setup+0x58>)
  }
  else if (RequestNo == SET_LINE_CODING)
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    {
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
 8001524:	4904      	ldr	r1, [pc, #16]	; (8001538 <Virtual_Com_Port_Data_Setup+0x5c>)
    }
    Request = SET_LINE_CODING;
 8001526:	7023      	strb	r3, [r4, #0]
 8001528:	e7e8      	b.n	80014fc <Virtual_Com_Port_Data_Setup+0x20>
 800152a:	bf00      	nop
 800152c:	20001354 	.word	0x20001354
 8001530:	08001571 	.word	0x08001571
 8001534:	200002bc 	.word	0x200002bc
 8001538:	08001589 	.word	0x08001589

0800153c <Virtual_Com_Port_NoData_Setup>:
* Return         : USB_UNSUPPORT or USB_SUCCESS.
*******************************************************************************/
RESULT Virtual_Com_Port_NoData_Setup(uint8_t RequestNo)
{

  if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 800153c:	4b07      	ldr	r3, [pc, #28]	; (800155c <Virtual_Com_Port_NoData_Setup+0x20>)
 800153e:	6819      	ldr	r1, [r3, #0]
 8001540:	780a      	ldrb	r2, [r1, #0]
 8001542:	f002 037f 	and.w	r3, r2, #127	; 0x7f
 8001546:	2b21      	cmp	r3, #33	; 0x21
 8001548:	d001      	beq.n	800154e <Virtual_Com_Port_NoData_Setup+0x12>
    {
      return USB_SUCCESS;
    }
  }

  return USB_UNSUPPORT;
 800154a:	2002      	movs	r0, #2
}
 800154c:	4770      	bx	lr
RESULT Virtual_Com_Port_NoData_Setup(uint8_t RequestNo)
{

  if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
  {
    if (RequestNo == SET_COMM_FEATURE)
 800154e:	2802      	cmp	r0, #2
 8001550:	d001      	beq.n	8001556 <Virtual_Com_Port_NoData_Setup+0x1a>
    {
      return USB_SUCCESS;
    }
    else if (RequestNo == SET_CONTROL_LINE_STATE)
 8001552:	2822      	cmp	r0, #34	; 0x22
 8001554:	d1f9      	bne.n	800154a <Virtual_Com_Port_NoData_Setup+0xe>

  if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
  {
    if (RequestNo == SET_COMM_FEATURE)
    {
      return USB_SUCCESS;
 8001556:	2000      	movs	r0, #0
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	20001354 	.word	0x20001354

08001560 <Virtual_Com_Port_Get_Interface_Setting>:
* Output         : None.
* Return         : The address of the string descriptors.
*******************************************************************************/
RESULT Virtual_Com_Port_Get_Interface_Setting(uint8_t Interface, uint8_t AlternateSetting)
{
  if (AlternateSetting > 0)
 8001560:	b109      	cbz	r1, 8001566 <Virtual_Com_Port_Get_Interface_Setting+0x6>
  {
    return USB_UNSUPPORT;
 8001562:	2002      	movs	r0, #2
 8001564:	4770      	bx	lr
  }
  else if (Interface > 1)
 8001566:	2801      	cmp	r0, #1
 8001568:	d8fb      	bhi.n	8001562 <Virtual_Com_Port_Get_Interface_Setting+0x2>
  {
    return USB_UNSUPPORT;
  }
  return USB_SUCCESS;
 800156a:	4608      	mov	r0, r1
}
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop

08001570 <Virtual_Com_Port_GetLineCoding>:
* Output         : None.
* Return         : Linecoding structure base address.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetLineCoding(uint16_t Length)
{
  if (Length == 0)
 8001570:	b108      	cbz	r0, 8001576 <Virtual_Com_Port_GetLineCoding+0x6>
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
    return NULL;
  }
  return(uint8_t *)&linecoding;
 8001572:	4803      	ldr	r0, [pc, #12]	; (8001580 <Virtual_Com_Port_GetLineCoding+0x10>)
}
 8001574:	4770      	bx	lr
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetLineCoding(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
 8001576:	4b03      	ldr	r3, [pc, #12]	; (8001584 <Virtual_Com_Port_GetLineCoding+0x14>)
 8001578:	2208      	movs	r2, #8
 800157a:	6819      	ldr	r1, [r3, #0]
 800157c:	820a      	strh	r2, [r1, #16]
    return NULL;
 800157e:	4770      	bx	lr
 8001580:	200000d8 	.word	0x200000d8
 8001584:	20001354 	.word	0x20001354

08001588 <Virtual_Com_Port_SetLineCoding>:
* Output         : None.
* Return         : Linecoding structure base address.
*******************************************************************************/
uint8_t *Virtual_Com_Port_SetLineCoding(uint16_t Length)
{
  if (Length == 0)
 8001588:	b108      	cbz	r0, 800158e <Virtual_Com_Port_SetLineCoding+0x6>
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
    return NULL;
  }
  return(uint8_t *)&linecoding;
 800158a:	4803      	ldr	r0, [pc, #12]	; (8001598 <Virtual_Com_Port_SetLineCoding+0x10>)
}
 800158c:	4770      	bx	lr
*******************************************************************************/
uint8_t *Virtual_Com_Port_SetLineCoding(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
 800158e:	4b03      	ldr	r3, [pc, #12]	; (800159c <Virtual_Com_Port_SetLineCoding+0x14>)
 8001590:	2208      	movs	r2, #8
 8001592:	6819      	ldr	r1, [r3, #0]
 8001594:	820a      	strh	r2, [r1, #16]
    return NULL;
 8001596:	4770      	bx	lr
 8001598:	200000d8 	.word	0x200000d8
 800159c:	20001354 	.word	0x20001354

080015a0 <Virtual_Com_Port_GetStringDescriptor>:
* Input          : Length.
* Output         : None.
* Return         : The address of the string descriptors.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetStringDescriptor(uint16_t Length)
{
 80015a0:	b508      	push	{r3, lr}
  uint8_t wValue0 = pInformation->USBwValue0;
 80015a2:	4b06      	ldr	r3, [pc, #24]	; (80015bc <Virtual_Com_Port_GetStringDescriptor+0x1c>)
 80015a4:	6819      	ldr	r1, [r3, #0]
 80015a6:	78ca      	ldrb	r2, [r1, #3]
  if (wValue0 > 4)
 80015a8:	2a04      	cmp	r2, #4
 80015aa:	d805      	bhi.n	80015b8 <Virtual_Com_Port_GetStringDescriptor+0x18>
  {
    return NULL;
  }
  else
  {
    return Standard_GetDescriptorData(Length, &String_Descriptor[wValue0]);
 80015ac:	4b04      	ldr	r3, [pc, #16]	; (80015c0 <Virtual_Com_Port_GetStringDescriptor+0x20>)
 80015ae:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 80015b2:	4a04      	ldr	r2, [pc, #16]	; (80015c4 <Virtual_Com_Port_GetStringDescriptor+0x24>)
 80015b4:	4790      	blx	r2
 80015b6:	bd08      	pop	{r3, pc}
uint8_t *Virtual_Com_Port_GetStringDescriptor(uint16_t Length)
{
  uint8_t wValue0 = pInformation->USBwValue0;
  if (wValue0 > 4)
  {
    return NULL;
 80015b8:	2000      	movs	r0, #0
  }
  else
  {
    return Standard_GetDescriptorData(Length, &String_Descriptor[wValue0]);
  }
}
 80015ba:	bd08      	pop	{r3, pc}
 80015bc:	20001354 	.word	0x20001354
 80015c0:	200000b8 	.word	0x200000b8
 80015c4:	0800216d 	.word	0x0800216d

080015c8 <Virtual_Com_Port_GetConfigDescriptor>:
* Input          : Length.
* Output         : None.
* Return         : The address of the configuration descriptor.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetConfigDescriptor(uint16_t Length)
{
 80015c8:	b508      	push	{r3, lr}
  return Standard_GetDescriptorData(Length, &Config_Descriptor);
 80015ca:	f240 0154 	movw	r1, #84	; 0x54
 80015ce:	f242 136d 	movw	r3, #8557	; 0x216d
 80015d2:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80015d6:	f6c0 0300 	movt	r3, #2048	; 0x800
 80015da:	4798      	blx	r3
}
 80015dc:	bd08      	pop	{r3, pc}
 80015de:	bf00      	nop

080015e0 <Virtual_Com_Port_GetDeviceDescriptor>:
* Input          : Length.
* Output         : None.
* Return         : The address of the device descriptor.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetDeviceDescriptor(uint16_t Length)
{
 80015e0:	b508      	push	{r3, lr}
  return Standard_GetDescriptorData(Length, &Device_Descriptor);
 80015e2:	f240 01b0 	movw	r1, #176	; 0xb0
 80015e6:	f242 136d 	movw	r3, #8557	; 0x216d
 80015ea:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80015ee:	f6c0 0300 	movt	r3, #2048	; 0x800
 80015f2:	4798      	blx	r3
}
 80015f4:	bd08      	pop	{r3, pc}
 80015f6:	bf00      	nop

080015f8 <Virtual_Com_Port_Reset>:
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 80015f8:	f241 3254 	movw	r2, #4948	; 0x1354

  /* Current Feature initialization */
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 80015fc:	f642 63c4 	movw	r3, #11972	; 0x2ec4
 8001600:	f6c0 0300 	movt	r3, #2048	; 0x800
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 8001604:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8001608:	6810      	ldr	r0, [r2, #0]

  /* Current Feature initialization */
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 800160a:	79d9      	ldrb	r1, [r3, #7]
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
 800160c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 8001610:	2400      	movs	r4, #0
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];

  /* Set Virtual_Com_Port DEVICE with the default Interface*/
  pInformation->Current_Interface = 0;

  SetBTABLE(BTABLE_ADDRESS);
 8001612:	f642 056d 	movw	r5, #10349	; 0x286d
{
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;

  /* Current Feature initialization */
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 8001616:	7241      	strb	r1, [r0, #9]
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 8001618:	7284      	strb	r4, [r0, #10]

  /* Current Feature initialization */
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];

  /* Set Virtual_Com_Port DEVICE with the default Interface*/
  pInformation->Current_Interface = 0;
 800161a:	72c4      	strb	r4, [r0, #11]

  SetBTABLE(BTABLE_ADDRESS);
 800161c:	f6c0 0500 	movt	r5, #2048	; 0x800
 8001620:	4620      	mov	r0, r4

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
 8001622:	f642 0681 	movw	r6, #10369	; 0x2881
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];

  /* Set Virtual_Com_Port DEVICE with the default Interface*/
  pInformation->Current_Interface = 0;

  SetBTABLE(BTABLE_ADDRESS);
 8001626:	47a8      	blx	r5

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
 8001628:	f6c0 0600 	movt	r6, #2048	; 0x800
 800162c:	4620      	mov	r0, r4
 800162e:	f44f 7100 	mov.w	r1, #512	; 0x200
  SetEPTxStatus(ENDP0, EP_TX_STALL);
 8001632:	f642 0599 	movw	r5, #10393	; 0x2899
  pInformation->Current_Interface = 0;

  SetBTABLE(BTABLE_ADDRESS);

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
 8001636:	47b0      	blx	r6
  SetEPTxStatus(ENDP0, EP_TX_STALL);
 8001638:	f6c0 0500 	movt	r5, #2048	; 0x800
 800163c:	2110      	movs	r1, #16
 800163e:	4620      	mov	r0, r4
  SetEPRxAddr(ENDP0, ENDP0_RXADDR);
 8001640:	f642 1aed 	movw	sl, #10733	; 0x29ed

  SetBTABLE(BTABLE_ADDRESS);

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
  SetEPTxStatus(ENDP0, EP_TX_STALL);
 8001644:	47a8      	blx	r5
  SetEPRxAddr(ENDP0, ENDP0_RXADDR);
 8001646:	f6c0 0a00 	movt	sl, #2048	; 0x800
 800164a:	2140      	movs	r1, #64	; 0x40
 800164c:	4620      	mov	r0, r4
  SetEPTxAddr(ENDP0, ENDP0_TXADDR);
 800164e:	f642 18c9 	movw	r8, #10697	; 0x29c9
  SetBTABLE(BTABLE_ADDRESS);

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
  SetEPTxStatus(ENDP0, EP_TX_STALL);
  SetEPRxAddr(ENDP0, ENDP0_RXADDR);
 8001652:	47d0      	blx	sl
  SetEPTxAddr(ENDP0, ENDP0_TXADDR);
 8001654:	f6c0 0800 	movt	r8, #2048	; 0x800
 8001658:	2180      	movs	r1, #128	; 0x80
 800165a:	4620      	mov	r0, r4
  Clear_Status_Out(ENDP0);
 800165c:	f642 1761 	movw	r7, #10593	; 0x2961

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
  SetEPTxStatus(ENDP0, EP_TX_STALL);
  SetEPRxAddr(ENDP0, ENDP0_RXADDR);
  SetEPTxAddr(ENDP0, ENDP0_TXADDR);
 8001660:	47c0      	blx	r8
  Clear_Status_Out(ENDP0);
 8001662:	f6c0 0700 	movt	r7, #2048	; 0x800
 8001666:	4620      	mov	r0, r4
 8001668:	47b8      	blx	r7
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 800166a:	f240 025c 	movw	r2, #92	; 0x5c
 800166e:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8001672:	f642 2975 	movw	r9, #10869	; 0x2a75
 8001676:	f892 102c 	ldrb.w	r1, [r2, #44]	; 0x2c
 800167a:	f6c0 0900 	movt	r9, #2048	; 0x800
 800167e:	4620      	mov	r0, r4
 8001680:	47c8      	blx	r9
  SetEPRxValid(ENDP0);
 8001682:	f642 133d 	movw	r3, #10557	; 0x293d
 8001686:	f6c0 0300 	movt	r3, #2048	; 0x800
 800168a:	4620      	mov	r0, r4
 800168c:	4798      	blx	r3

  /* Initialize Endpoint 1 */
  SetEPType(ENDP1, EP_BULK);
 800168e:	2001      	movs	r0, #1
 8001690:	4621      	mov	r1, r4
 8001692:	47b0      	blx	r6
  SetEPTxAddr(ENDP1, ENDP1_TXADDR);
 8001694:	2001      	movs	r0, #1
 8001696:	21c0      	movs	r1, #192	; 0xc0
 8001698:	47c0      	blx	r8
  SetEPTxStatus(ENDP1, EP_TX_NAK);
  SetEPRxStatus(ENDP1, EP_RX_DIS);
 800169a:	f642 07d9 	movw	r7, #10457	; 0x28d9
  SetEPRxValid(ENDP0);

  /* Initialize Endpoint 1 */
  SetEPType(ENDP1, EP_BULK);
  SetEPTxAddr(ENDP1, ENDP1_TXADDR);
  SetEPTxStatus(ENDP1, EP_TX_NAK);
 800169e:	2001      	movs	r0, #1
 80016a0:	2120      	movs	r1, #32
 80016a2:	47a8      	blx	r5
  SetEPRxStatus(ENDP1, EP_RX_DIS);
 80016a4:	f6c0 0700 	movt	r7, #2048	; 0x800
 80016a8:	2001      	movs	r0, #1
 80016aa:	4621      	mov	r1, r4
 80016ac:	47b8      	blx	r7

  /* Initialize Endpoint 2 */
  SetEPType(ENDP2, EP_INTERRUPT);
 80016ae:	2002      	movs	r0, #2
 80016b0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80016b4:	47b0      	blx	r6
  SetEPTxAddr(ENDP2, ENDP2_TXADDR);
 80016b6:	2002      	movs	r0, #2
 80016b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016bc:	47c0      	blx	r8
  SetEPRxStatus(ENDP2, EP_RX_DIS);
 80016be:	2002      	movs	r0, #2
 80016c0:	4621      	mov	r1, r4
 80016c2:	47b8      	blx	r7
  SetEPTxStatus(ENDP2, EP_TX_NAK);
 80016c4:	2002      	movs	r0, #2
 80016c6:	2120      	movs	r1, #32
 80016c8:	47a8      	blx	r5

  /* Initialize Endpoint 3 */
  SetEPType(ENDP3, EP_BULK);
 80016ca:	2003      	movs	r0, #3
 80016cc:	4621      	mov	r1, r4
 80016ce:	47b0      	blx	r6
  SetEPRxAddr(ENDP3, ENDP3_RXADDR);
 80016d0:	2003      	movs	r0, #3
 80016d2:	f44f 7188 	mov.w	r1, #272	; 0x110
 80016d6:	47d0      	blx	sl
  SetEPRxCount(ENDP3, VIRTUAL_COM_PORT_DATA_SIZE);
 80016d8:	2003      	movs	r0, #3
 80016da:	2140      	movs	r1, #64	; 0x40
 80016dc:	47c8      	blx	r9
  SetEPRxStatus(ENDP3, EP_RX_VALID);
 80016de:	2003      	movs	r0, #3
 80016e0:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80016e4:	47b8      	blx	r7
  SetEPTxStatus(ENDP3, EP_TX_DIS);
 80016e6:	4621      	mov	r1, r4
 80016e8:	2003      	movs	r0, #3
 80016ea:	47a8      	blx	r5

  /* Set this device to response on default address */
  SetDeviceAddress(0);
 80016ec:	f242 6149 	movw	r1, #9801	; 0x2649
 80016f0:	4620      	mov	r0, r4
 80016f2:	f6c0 0100 	movt	r1, #2048	; 0x800
 80016f6:	4788      	blx	r1
  
  bDeviceState = ATTACHED;
 80016f8:	f240 20c0 	movw	r0, #704	; 0x2c0
 80016fc:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001700:	2201      	movs	r2, #1
 8001702:	6002      	str	r2, [r0, #0]
 8001704:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08001708 <Virtual_Com_Port_init>:
void Virtual_Com_Port_init(void)
{

  /* Update the serial number string descriptor with the data from the unique
  ID*/
  Get_SerialNum();
 8001708:	f641 5359 	movw	r3, #7513	; 0x1d59
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_init(void)
{
 800170c:	b510      	push	{r4, lr}

  /* Update the serial number string descriptor with the data from the unique
  ID*/
  Get_SerialNum();
 800170e:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001712:	4798      	blx	r3

  pInformation->Current_Configuration = 0;
 8001714:	f241 3054 	movw	r0, #4948	; 0x1354
 8001718:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800171c:	6802      	ldr	r2, [r0, #0]
 800171e:	2400      	movs	r4, #0

  /* Connect the device */
  PowerOn();
 8001720:	f241 7145 	movw	r1, #5957	; 0x1745

  /* Update the serial number string descriptor with the data from the unique
  ID*/
  Get_SerialNum();

  pInformation->Current_Configuration = 0;
 8001724:	7294      	strb	r4, [r2, #10]

  /* Connect the device */
  PowerOn();
 8001726:	f6c0 0100 	movt	r1, #2048	; 0x800
 800172a:	4788      	blx	r1

  /* Perform basic device initialization operations */
  USB_SIL_Init();
 800172c:	f642 23e9 	movw	r3, #10985	; 0x2ae9
 8001730:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001734:	4798      	blx	r3

  /* configure the USART to the default settings */
  //USART_Config_Default();

  bDeviceState = UNCONNECTED;
 8001736:	f240 20c0 	movw	r0, #704	; 0x2c0
 800173a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800173e:	6004      	str	r4, [r0, #0]
 8001740:	bd10      	pop	{r4, pc}
 8001742:	bf00      	nop

08001744 <PowerOn>:
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
RESULT PowerOn(void)
{
 8001744:	b538      	push	{r3, r4, r5, lr}
  uint16_t wRegVal;

  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);
 8001746:	f641 33b9 	movw	r3, #7097	; 0x1bb9
 800174a:	2001      	movs	r0, #1
 800174c:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001750:	4798      	blx	r3

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
  /*** Clear pending interrupts ***/
  _SetISTR(0);
 8001752:	f645 4544 	movw	r5, #23620	; 0x5c44
  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);

  /*** CNTR_PWDN = 0 ***/
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);
 8001756:	f645 4340 	movw	r3, #23616	; 0x5c40
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
  /*** Clear pending interrupts ***/
  _SetISTR(0);
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 800175a:	f241 3258 	movw	r2, #4952	; 0x1358
  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);

  /*** CNTR_PWDN = 0 ***/
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);
 800175e:	f2c4 0300 	movt	r3, #16384	; 0x4000

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
 8001762:	2100      	movs	r1, #0
  /*** Clear pending interrupts ***/
  _SetISTR(0);
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 8001764:	f44f 54e0 	mov.w	r4, #7168	; 0x1c00
  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);

  /*** CNTR_PWDN = 0 ***/
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);
 8001768:	2001      	movs	r0, #1

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
  /*** Clear pending interrupts ***/
  _SetISTR(0);
 800176a:	f2c4 0500 	movt	r5, #16384	; 0x4000
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 800176e:	f2c2 0200 	movt	r2, #8192	; 0x2000
  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);

  /*** CNTR_PWDN = 0 ***/
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);
 8001772:	6018      	str	r0, [r3, #0]

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
 8001774:	6019      	str	r1, [r3, #0]
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
  _SetCNTR(wInterrupt_Mask);
  
  return USB_SUCCESS;
}
 8001776:	4608      	mov	r0, r1

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
  /*** Clear pending interrupts ***/
  _SetISTR(0);
 8001778:	6029      	str	r1, [r5, #0]
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 800177a:	8014      	strh	r4, [r2, #0]
  _SetCNTR(wInterrupt_Mask);
 800177c:	601c      	str	r4, [r3, #0]
  
  return USB_SUCCESS;
}
 800177e:	bd38      	pop	{r3, r4, r5, pc}

08001780 <Suspend>:
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
void Suspend(void)
{
 8001780:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t i =0;
	uint16_t wCNTR;
	uint32_t tmpreg = 0;
  __IO uint32_t savePWR_CR=0;
 8001782:	2100      	movs	r1, #0
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
void Suspend(void)
{
 8001784:	b083      	sub	sp, #12
  __IO uint32_t savePWR_CR=0;
	/* suspend preparation */
	/* ... */
	
	/*Store CNTR value */
	wCNTR = _GetCNTR();  
 8001786:	f645 4340 	movw	r3, #23616	; 0x5c40

    /* This a sequence to apply a force RESET to handle a robustness case */
    
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 800178a:	f44f 42b8 	mov.w	r2, #23552	; 0x5c00
void Suspend(void)
{
	uint32_t i =0;
	uint16_t wCNTR;
	uint32_t tmpreg = 0;
  __IO uint32_t savePWR_CR=0;
 800178e:	9101      	str	r1, [sp, #4]
	/* suspend preparation */
	/* ... */
	
	/*Store CNTR value */
	wCNTR = _GetCNTR();  
 8001790:	f2c4 0300 	movt	r3, #16384	; 0x4000

    /* This a sequence to apply a force RESET to handle a robustness case */
    
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 8001794:	f2c4 0200 	movt	r2, #16384	; 0x4000
  __IO uint32_t savePWR_CR=0;
	/* suspend preparation */
	/* ... */
	
	/*Store CNTR value */
	wCNTR = _GetCNTR();  
 8001798:	6818      	ldr	r0, [r3, #0]

    /* This a sequence to apply a force RESET to handle a robustness case */
    
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 800179a:	6814      	ldr	r4, [r2, #0]
 800179c:	4960      	ldr	r1, [pc, #384]	; (8001920 <Suspend+0x1a0>)
 800179e:	b2a5      	uxth	r5, r4
 80017a0:	f645 4604 	movw	r6, #23556	; 0x5c04
 80017a4:	600d      	str	r5, [r1, #0]
 80017a6:	f2c4 0600 	movt	r6, #16384	; 0x4000
 80017aa:	6837      	ldr	r7, [r6, #0]
 80017ac:	f645 4208 	movw	r2, #23560	; 0x5c08
 80017b0:	b2bc      	uxth	r4, r7
 80017b2:	604c      	str	r4, [r1, #4]
 80017b4:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80017b8:	6815      	ldr	r5, [r2, #0]
 80017ba:	f645 460c 	movw	r6, #23564	; 0x5c0c
 80017be:	b2af      	uxth	r7, r5
 80017c0:	608f      	str	r7, [r1, #8]
 80017c2:	f2c4 0600 	movt	r6, #16384	; 0x4000
 80017c6:	6834      	ldr	r4, [r6, #0]
 80017c8:	f645 4210 	movw	r2, #23568	; 0x5c10
 80017cc:	b2a5      	uxth	r5, r4
 80017ce:	60cd      	str	r5, [r1, #12]
 80017d0:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80017d4:	6816      	ldr	r6, [r2, #0]
 80017d6:	f645 4714 	movw	r7, #23572	; 0x5c14
 80017da:	b2b4      	uxth	r4, r6
 80017dc:	610c      	str	r4, [r1, #16]
 80017de:	f2c4 0700 	movt	r7, #16384	; 0x4000
 80017e2:	683d      	ldr	r5, [r7, #0]
 80017e4:	f645 4218 	movw	r2, #23576	; 0x5c18
 80017e8:	b2ae      	uxth	r6, r5
 80017ea:	614e      	str	r6, [r1, #20]
 80017ec:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80017f0:	6817      	ldr	r7, [r2, #0]
 80017f2:	f645 451c 	movw	r5, #23580	; 0x5c1c
 80017f6:	b2bc      	uxth	r4, r7
 80017f8:	618c      	str	r4, [r1, #24]
 80017fa:	f2c4 0500 	movt	r5, #16384	; 0x4000
 80017fe:	682e      	ldr	r6, [r5, #0]
	
	/* unmask RESET flag */
	wCNTR|=CNTR_RESETM;
	_SetCNTR(wCNTR);
 8001800:	b282      	uxth	r2, r0
	/*apply FRES */
	wCNTR|=CNTR_FRES;
	_SetCNTR(wCNTR);
	
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
 8001802:	f64f 74fe 	movw	r4, #65534	; 0xfffe
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
	
	/* unmask RESET flag */
	wCNTR|=CNTR_RESETM;
	_SetCNTR(wCNTR);
 8001806:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
	/*apply FRES */
	wCNTR|=CNTR_FRES;
	_SetCNTR(wCNTR);
	
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
 800180a:	4004      	ands	r4, r0
	wCNTR = _GetCNTR();  

    /* This a sequence to apply a force RESET to handle a robustness case */
    
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 800180c:	b2b7      	uxth	r7, r6
	/*apply FRES */
	wCNTR|=CNTR_FRES;
	_SetCNTR(wCNTR);
	
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
 800180e:	f444 6580 	orr.w	r5, r4, #1024	; 0x400
	wCNTR|=CNTR_RESETM;
	_SetCNTR(wCNTR);
	
	/*apply FRES */
	wCNTR|=CNTR_FRES;
	_SetCNTR(wCNTR);
 8001812:	f042 0601 	orr.w	r6, r2, #1
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
	_SetCNTR(wCNTR);
	
	/*poll for RESET flag in ISTR*/
	while((_GetISTR()&ISTR_RESET) == 0);
 8001816:	f645 4044 	movw	r0, #23620	; 0x5c44
	wCNTR = _GetCNTR();  

    /* This a sequence to apply a force RESET to handle a robustness case */
    
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 800181a:	61cf      	str	r7, [r1, #28]
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
	_SetCNTR(wCNTR);
	
	/*poll for RESET flag in ISTR*/
	while((_GetISTR()&ISTR_RESET) == 0);
 800181c:	f2c4 0000 	movt	r0, #16384	; 0x4000
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
	
	/* unmask RESET flag */
	wCNTR|=CNTR_RESETM;
	_SetCNTR(wCNTR);
 8001820:	601a      	str	r2, [r3, #0]
	
	/*apply FRES */
	wCNTR|=CNTR_FRES;
	_SetCNTR(wCNTR);
 8001822:	601e      	str	r6, [r3, #0]
	
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
	_SetCNTR(wCNTR);
 8001824:	601d      	str	r5, [r3, #0]
	
	/*poll for RESET flag in ISTR*/
	while((_GetISTR()&ISTR_RESET) == 0);
 8001826:	6802      	ldr	r2, [r0, #0]
 8001828:	f645 4344 	movw	r3, #23620	; 0x5c44
 800182c:	0552      	lsls	r2, r2, #21
 800182e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001832:	d5f8      	bpl.n	8001826 <Suspend+0xa6>
	
	/* clear RESET flag in ISTR */
	_SetISTR((uint16_t)CLR_RESET);
 8001834:	f64f 30ff 	movw	r0, #64511	; 0xfbff
 8001838:	6018      	str	r0, [r3, #0]
	
	/*restore Enpoints*/
	for (i=0;i<8;i++)
	_SetENDPOINT(i, EP[i]);
 800183a:	6808      	ldr	r0, [r1, #0]
 800183c:	f44f 42b8 	mov.w	r2, #23552	; 0x5c00
 8001840:	b280      	uxth	r0, r0
 8001842:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8001846:	6010      	str	r0, [r2, #0]
 8001848:	6848      	ldr	r0, [r1, #4]
 800184a:	f645 4204 	movw	r2, #23556	; 0x5c04
 800184e:	b280      	uxth	r0, r0
 8001850:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8001854:	6010      	str	r0, [r2, #0]
 8001856:	6888      	ldr	r0, [r1, #8]
 8001858:	f645 4208 	movw	r2, #23560	; 0x5c08
 800185c:	b280      	uxth	r0, r0
 800185e:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8001862:	6010      	str	r0, [r2, #0]
 8001864:	68c8      	ldr	r0, [r1, #12]
 8001866:	f645 420c 	movw	r2, #23564	; 0x5c0c
 800186a:	b280      	uxth	r0, r0
 800186c:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8001870:	6010      	str	r0, [r2, #0]
 8001872:	6908      	ldr	r0, [r1, #16]
 8001874:	f645 4210 	movw	r2, #23568	; 0x5c10
 8001878:	b280      	uxth	r0, r0
 800187a:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800187e:	6010      	str	r0, [r2, #0]
 8001880:	6948      	ldr	r0, [r1, #20]
 8001882:	f645 4214 	movw	r2, #23572	; 0x5c14
 8001886:	b280      	uxth	r0, r0
 8001888:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800188c:	6010      	str	r0, [r2, #0]
 800188e:	6988      	ldr	r0, [r1, #24]
 8001890:	f645 4218 	movw	r2, #23576	; 0x5c18
 8001894:	b280      	uxth	r0, r0
 8001896:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800189a:	6010      	str	r0, [r2, #0]
 800189c:	69c8      	ldr	r0, [r1, #28]
	
	/* Now it is safe to enter macrocell in suspend mode */
	wCNTR |= CNTR_FSUSP;
	_SetCNTR(wCNTR);
 800189e:	f645 4240 	movw	r2, #23616	; 0x5c40
	/* clear RESET flag in ISTR */
	_SetISTR((uint16_t)CLR_RESET);
	
	/*restore Enpoints*/
	for (i=0;i<8;i++)
	_SetENDPOINT(i, EP[i]);
 80018a2:	f645 411c 	movw	r1, #23580	; 0x5c1c
	
	/* Now it is safe to enter macrocell in suspend mode */
	wCNTR |= CNTR_FSUSP;
	_SetCNTR(wCNTR);
 80018a6:	f2c4 0200 	movt	r2, #16384	; 0x4000
	/* clear RESET flag in ISTR */
	_SetISTR((uint16_t)CLR_RESET);
	
	/*restore Enpoints*/
	for (i=0;i<8;i++)
	_SetENDPOINT(i, EP[i]);
 80018aa:	b280      	uxth	r0, r0
 80018ac:	f2c4 0100 	movt	r1, #16384	; 0x4000
	
	/* Now it is safe to enter macrocell in suspend mode */
	wCNTR |= CNTR_FSUSP;
 80018b0:	f444 6481 	orr.w	r4, r4, #1032	; 0x408
	/* clear RESET flag in ISTR */
	_SetISTR((uint16_t)CLR_RESET);
	
	/*restore Enpoints*/
	for (i=0;i<8;i++)
	_SetENDPOINT(i, EP[i]);
 80018b4:	6008      	str	r0, [r1, #0]
	
	/* Now it is safe to enter macrocell in suspend mode */
	wCNTR |= CNTR_FSUSP;
	_SetCNTR(wCNTR);
 80018b6:	6014      	str	r4, [r2, #0]
	
	/* force low-power mode in the macrocell */
	wCNTR = _GetCNTR();
 80018b8:	6810      	ldr	r0, [r2, #0]
	wCNTR |= CNTR_LPMODE;
	_SetCNTR(wCNTR);
	
	/*prepare entry in low power mode (STOP mode)*/
	/* Select the regulator state in STOP mode*/
	savePWR_CR = REG_PWR_CR;
 80018ba:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
	_SetCNTR(wCNTR);
	
	/* force low-power mode in the macrocell */
	wCNTR = _GetCNTR();
	wCNTR |= CNTR_LPMODE;
	_SetCNTR(wCNTR);
 80018be:	b284      	uxth	r4, r0
 80018c0:	f044 0004 	orr.w	r0, r4, #4
 80018c4:	6010      	str	r0, [r2, #0]
	
	/*prepare entry in low power mode (STOP mode)*/
	/* Select the regulator state in STOP mode*/
	savePWR_CR = REG_PWR_CR;
 80018c6:	f2c4 0100 	movt	r1, #16384	; 0x4000
 80018ca:	6808      	ldr	r0, [r1, #0]
	REG_PWR_CR = tmpreg;
	/* Set SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)
        SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
#else
		REG_SCB_SCR |= SCB_SCR_SLEEPDEEP;       
 80018cc:	f64e 5410 	movw	r4, #60688	; 0xed10
	wCNTR |= CNTR_LPMODE;
	_SetCNTR(wCNTR);
	
	/*prepare entry in low power mode (STOP mode)*/
	/* Select the regulator state in STOP mode*/
	savePWR_CR = REG_PWR_CR;
 80018d0:	9001      	str	r0, [sp, #4]
	
	tmpreg = REG_PWR_CR;
 80018d2:	6808      	ldr	r0, [r1, #0]
	REG_PWR_CR = tmpreg;
	/* Set SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)
        SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
#else
		REG_SCB_SCR |= SCB_SCR_SLEEPDEEP;       
 80018d4:	f2ce 0400 	movt	r4, #57344	; 0xe000
	/* Select the regulator state in STOP mode*/
	savePWR_CR = REG_PWR_CR;
	
	tmpreg = REG_PWR_CR;
	/* Clear PDDS and LPDS bits */
	tmpreg &= ((uint32_t)0xFFFFFFFC);
 80018d8:	f020 0003 	bic.w	r0, r0, #3
	/* Set LPDS bit according to PWR_Regulator value */
	tmpreg |= PWR_Regulator_LowPower;
 80018dc:	f040 0001 	orr.w	r0, r0, #1
	/* Store the new value */
	REG_PWR_CR = tmpreg;
 80018e0:	6008      	str	r0, [r1, #0]
	/* Set SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)
        SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
#else
		REG_SCB_SCR |= SCB_SCR_SLEEPDEEP;       
 80018e2:	6820      	ldr	r0, [r4, #0]
 80018e4:	f040 0004 	orr.w	r0, r0, #4
 80018e8:	6020      	str	r0, [r4, #0]
#endif
	
	/* enter system in STOP mode, only when wakeup flag in not set */
	if((_GetISTR()&ISTR_WKUP)==0)
 80018ea:	6818      	ldr	r0, [r3, #0]
 80018ec:	04c0      	lsls	r0, r0, #19
 80018ee:	d50f      	bpl.n	8001910 <Suspend+0x190>
#endif
	}
	else
	{
		/* Clear Wakeup flag */
		_SetISTR(CLR_WKUP);
 80018f0:	f64e 70ff 	movw	r0, #61439	; 0xefff
 80018f4:	6018      	str	r0, [r3, #0]
		/* clear FSUSP to abort entry in suspend mode  */
        wCNTR = _GetCNTR();
 80018f6:	6810      	ldr	r0, [r2, #0]
        wCNTR&=~CNTR_FSUSP;
 80018f8:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 80018fc:	4003      	ands	r3, r0
        _SetCNTR(wCNTR);
 80018fe:	6013      	str	r3, [r2, #0]
		
		/*restore sleep mode configuration */ 
		/* restore Power regulator config in sleep mode*/
		REG_PWR_CR = savePWR_CR;
 8001900:	9a01      	ldr	r2, [sp, #4]
 8001902:	600a      	str	r2, [r1, #0]
		
		/* Reset SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)		
                SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
#else
                REG_SCB_SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP);
 8001904:	6821      	ldr	r1, [r4, #0]
 8001906:	f021 0004 	bic.w	r0, r1, #4
 800190a:	6020      	str	r0, [r4, #0]
#endif
    }
}
 800190c:	b003      	add	sp, #12
 800190e:	bdf0      	pop	{r4, r5, r6, r7, pc}
#endif
	
	/* enter system in STOP mode, only when wakeup flag in not set */
	if((_GetISTR()&ISTR_WKUP)==0)
	{
		__WFI();
 8001910:	4b04      	ldr	r3, [pc, #16]	; (8001924 <Suspend+0x1a4>)
 8001912:	4798      	blx	r3
		/* Reset SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)
                SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk); 
#else
                REG_SCB_SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP); 
 8001914:	6822      	ldr	r2, [r4, #0]
 8001916:	f022 0104 	bic.w	r1, r2, #4
 800191a:	6021      	str	r1, [r4, #0]
 800191c:	e7f6      	b.n	800190c <Suspend+0x18c>
 800191e:	bf00      	nop
 8001920:	20000b04 	.word	0x20000b04
 8001924:	08001d9d 	.word	0x08001d9d

08001928 <Resume_Init>:
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
void Resume_Init(void)
{
 8001928:	b510      	push	{r4, lr}
  /* ------------------ ONLY WITH BUS-POWERED DEVICES ---------------------- */
  /* restart the clocks */
  /* ...  */

  /* CNTR_LPMODE = 0 */
  wCNTR = _GetCNTR();
 800192a:	f645 4440 	movw	r4, #23616	; 0x5c40
 800192e:	f2c4 0400 	movt	r4, #16384	; 0x4000
 8001932:	6823      	ldr	r3, [r4, #0]
  wCNTR &= (~CNTR_LPMODE);
 8001934:	f64f 72fb 	movw	r2, #65531	; 0xfffb
 8001938:	401a      	ands	r2, r3
  _SetCNTR(wCNTR);    
  
  /* restore full power */
  /* ... on connected devices */
  Leave_LowPowerMode();
 800193a:	f641 20e9 	movw	r0, #6889	; 0x1ae9
  /* ...  */

  /* CNTR_LPMODE = 0 */
  wCNTR = _GetCNTR();
  wCNTR &= (~CNTR_LPMODE);
  _SetCNTR(wCNTR);    
 800193e:	6022      	str	r2, [r4, #0]
  
  /* restore full power */
  /* ... on connected devices */
  Leave_LowPowerMode();
 8001940:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001944:	4780      	blx	r0

  /* reset FSUSP bit */
  _SetCNTR(IMR_MSK);
 8001946:	f44f 413f 	mov.w	r1, #48896	; 0xbf00
 800194a:	6021      	str	r1, [r4, #0]
 800194c:	bd10      	pop	{r4, pc}
 800194e:	bf00      	nop

08001950 <Resume>:
*                  decrementing of the ESOF counter in different states.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Resume(RESUME_STATE eResumeSetVal)
{
 8001950:	b510      	push	{r4, lr}
  uint16_t wCNTR;

  if (eResumeSetVal != RESUME_ESOF)
    ResumeS.eState = eResumeSetVal;
 8001952:	4c2b      	ldr	r4, [pc, #172]	; (8001a00 <Resume+0xb0>)
*******************************************************************************/
void Resume(RESUME_STATE eResumeSetVal)
{
  uint16_t wCNTR;

  if (eResumeSetVal != RESUME_ESOF)
 8001954:	2807      	cmp	r0, #7
    ResumeS.eState = eResumeSetVal;
 8001956:	bf18      	it	ne
 8001958:	7020      	strbne	r0, [r4, #0]
  switch (ResumeS.eState)
 800195a:	7823      	ldrb	r3, [r4, #0]
 800195c:	2b05      	cmp	r3, #5
 800195e:	d819      	bhi.n	8001994 <Resume+0x44>
 8001960:	e8df f003 	tbb	[pc, r3]
 8001964:	2f2a221b 	.word	0x2f2a221b
 8001968:	033a      	.short	0x033a
      _SetCNTR(wCNTR);
      ResumeS.eState = RESUME_ON;
      ResumeS.bESOFcnt = 10;
      break;
    case RESUME_ON:    
      ResumeS.bESOFcnt--;
 800196a:	7860      	ldrb	r0, [r4, #1]
 800196c:	1e41      	subs	r1, r0, #1
 800196e:	b2ca      	uxtb	r2, r1
 8001970:	7062      	strb	r2, [r4, #1]
      if (ResumeS.bESOFcnt == 0)
 8001972:	7863      	ldrb	r3, [r4, #1]
 8001974:	b983      	cbnz	r3, 8001998 <Resume+0x48>
      {
        wCNTR = _GetCNTR();
 8001976:	f645 4240 	movw	r2, #23616	; 0x5c40
 800197a:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800197e:	6810      	ldr	r0, [r2, #0]
        wCNTR &= (~CNTR_RESUME);
 8001980:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8001984:	4001      	ands	r1, r0
        _SetCNTR(wCNTR);
 8001986:	6011      	str	r1, [r2, #0]
        ResumeS.eState = RESUME_OFF;
 8001988:	4a1d      	ldr	r2, [pc, #116]	; (8001a00 <Resume+0xb0>)
        remotewakeupon = 0;
 800198a:	491e      	ldr	r1, [pc, #120]	; (8001a04 <Resume+0xb4>)
      if (ResumeS.bESOFcnt == 0)
      {
        wCNTR = _GetCNTR();
        wCNTR &= (~CNTR_RESUME);
        _SetCNTR(wCNTR);
        ResumeS.eState = RESUME_OFF;
 800198c:	2006      	movs	r0, #6
 800198e:	7010      	strb	r0, [r2, #0]
        remotewakeupon = 0;
 8001990:	600b      	str	r3, [r1, #0]
 8001992:	bd10      	pop	{r4, pc}
      }
      break;
    case RESUME_OFF:
    case RESUME_ESOF:
    default:
      ResumeS.eState = RESUME_OFF;
 8001994:	2106      	movs	r1, #6
 8001996:	7021      	strb	r1, [r4, #0]
 8001998:	bd10      	pop	{r4, pc}
  if (eResumeSetVal != RESUME_ESOF)
    ResumeS.eState = eResumeSetVal;
  switch (ResumeS.eState)
  {
    case RESUME_EXTERNAL:
      if (remotewakeupon ==0)
 800199a:	4a1a      	ldr	r2, [pc, #104]	; (8001a04 <Resume+0xb4>)
 800199c:	6811      	ldr	r1, [r2, #0]
 800199e:	2900      	cmp	r1, #0
 80019a0:	d028      	beq.n	80019f4 <Resume+0xa4>
        Resume_Init();
        ResumeS.eState = RESUME_OFF;
      }
      else /* RESUME detected during the RemoteWAkeup signalling => keep RemoteWakeup handling*/
      {
        ResumeS.eState = RESUME_ON;
 80019a2:	2005      	movs	r0, #5
 80019a4:	7020      	strb	r0, [r4, #0]
 80019a6:	bd10      	pop	{r4, pc}
      }
      break;
    case RESUME_INTERNAL:
      Resume_Init();
 80019a8:	4a17      	ldr	r2, [pc, #92]	; (8001a08 <Resume+0xb8>)
 80019aa:	4790      	blx	r2
      ResumeS.eState = RESUME_START;
      remotewakeupon = 1;
 80019ac:	4b15      	ldr	r3, [pc, #84]	; (8001a04 <Resume+0xb4>)
        ResumeS.eState = RESUME_ON;
      }
      break;
    case RESUME_INTERNAL:
      Resume_Init();
      ResumeS.eState = RESUME_START;
 80019ae:	2104      	movs	r1, #4
      remotewakeupon = 1;
 80019b0:	2001      	movs	r0, #1
        ResumeS.eState = RESUME_ON;
      }
      break;
    case RESUME_INTERNAL:
      Resume_Init();
      ResumeS.eState = RESUME_START;
 80019b2:	7021      	strb	r1, [r4, #0]
      remotewakeupon = 1;
 80019b4:	6018      	str	r0, [r3, #0]
      break;
 80019b6:	bd10      	pop	{r4, pc}
    case RESUME_LATER:
      ResumeS.bESOFcnt = 2;
 80019b8:	2302      	movs	r3, #2
      ResumeS.eState = RESUME_WAIT;
 80019ba:	2003      	movs	r0, #3
      Resume_Init();
      ResumeS.eState = RESUME_START;
      remotewakeupon = 1;
      break;
    case RESUME_LATER:
      ResumeS.bESOFcnt = 2;
 80019bc:	7063      	strb	r3, [r4, #1]
      ResumeS.eState = RESUME_WAIT;
 80019be:	7020      	strb	r0, [r4, #0]
      break;
 80019c0:	bd10      	pop	{r4, pc}
    case RESUME_WAIT:
      ResumeS.bESOFcnt--;
 80019c2:	7862      	ldrb	r2, [r4, #1]
 80019c4:	1e51      	subs	r1, r2, #1
 80019c6:	b2cb      	uxtb	r3, r1
 80019c8:	7063      	strb	r3, [r4, #1]
      if (ResumeS.bESOFcnt == 0)
 80019ca:	7860      	ldrb	r0, [r4, #1]
 80019cc:	2800      	cmp	r0, #0
 80019ce:	d1e3      	bne.n	8001998 <Resume+0x48>
        ResumeS.eState = RESUME_START;
 80019d0:	490b      	ldr	r1, [pc, #44]	; (8001a00 <Resume+0xb0>)
 80019d2:	2204      	movs	r2, #4
 80019d4:	700a      	strb	r2, [r1, #0]
 80019d6:	bd10      	pop	{r4, pc}
      break;
    case RESUME_START:
      wCNTR = _GetCNTR();
 80019d8:	f645 4340 	movw	r3, #23616	; 0x5c40
 80019dc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80019e0:	6818      	ldr	r0, [r3, #0]
      wCNTR |= CNTR_RESUME;
      _SetCNTR(wCNTR);
 80019e2:	b282      	uxth	r2, r0
 80019e4:	f042 0110 	orr.w	r1, r2, #16
 80019e8:	6019      	str	r1, [r3, #0]
      ResumeS.eState = RESUME_ON;
      ResumeS.bESOFcnt = 10;
 80019ea:	200a      	movs	r0, #10
      break;
    case RESUME_START:
      wCNTR = _GetCNTR();
      wCNTR |= CNTR_RESUME;
      _SetCNTR(wCNTR);
      ResumeS.eState = RESUME_ON;
 80019ec:	2305      	movs	r3, #5
 80019ee:	7023      	strb	r3, [r4, #0]
      ResumeS.bESOFcnt = 10;
 80019f0:	7060      	strb	r0, [r4, #1]
      break;
 80019f2:	bd10      	pop	{r4, pc}
  switch (ResumeS.eState)
  {
    case RESUME_EXTERNAL:
      if (remotewakeupon ==0)
      {
        Resume_Init();
 80019f4:	4b04      	ldr	r3, [pc, #16]	; (8001a08 <Resume+0xb8>)
 80019f6:	4798      	blx	r3
        ResumeS.eState = RESUME_OFF;
 80019f8:	2206      	movs	r2, #6
 80019fa:	7022      	strb	r2, [r4, #0]
 80019fc:	bd10      	pop	{r4, pc}
 80019fe:	bf00      	nop
 8001a00:	20000b00 	.word	0x20000b00
 8001a04:	200002c8 	.word	0x200002c8
 8001a08:	08001929 	.word	0x08001929

08001a0c <USBWakeUp_IRQHandler>:


void USBWakeUp_IRQHandler(void)
{
	//EXTI_ClearITPendingBit(EXTI_Line18);
	REG_EXTI_PR = (1 << 18 );
 8001a0c:	f240 4314 	movw	r3, #1044	; 0x414
 8001a10:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001a14:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001a18:	601a      	str	r2, [r3, #0]
 8001a1a:	4770      	bx	lr

08001a1c <IntToUnicode>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
 8001a1c:	b470      	push	{r4, r5, r6}
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 8001a1e:	b38a      	cbz	r2, 8001a84 <IntToUnicode+0x68>
* Description    : Convert Hex 32Bits value into char.
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
 8001a20:	1e56      	subs	r6, r2, #1
 8001a22:	b2f2      	uxtb	r2, r6
 8001a24:	1c53      	adds	r3, r2, #1
 8001a26:	005e      	lsls	r6, r3, #1
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 8001a28:	0f03      	lsrs	r3, r0, #28
 8001a2a:	1eb2      	subs	r2, r6, #2
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8001a2c:	2400      	movs	r4, #0
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 8001a2e:	2b09      	cmp	r3, #9
 8001a30:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8001a34:	d928      	bls.n	8001a88 <IntToUnicode+0x6c>
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 8001a36:	3337      	adds	r3, #55	; 0x37
 8001a38:	700b      	strb	r3, [r1, #0]
 8001a3a:	2302      	movs	r3, #2
    }
    
    value = value << 4;
 8001a3c:	0100      	lsls	r0, r0, #4
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 8001a3e:	42b3      	cmp	r3, r6
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8001a40:	704c      	strb	r4, [r1, #1]
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 8001a42:	d01f      	beq.n	8001a84 <IntToUnicode+0x68>
 8001a44:	b152      	cbz	r2, 8001a5c <IntToUnicode+0x40>
  {
    if( ((value >> 28)) < 0xA )
 8001a46:	0f02      	lsrs	r2, r0, #28
 8001a48:	2a09      	cmp	r2, #9
 8001a4a:	d913      	bls.n	8001a74 <IntToUnicode+0x58>
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 8001a4c:	3237      	adds	r2, #55	; 0x37
 8001a4e:	54ca      	strb	r2, [r1, r3]
* Description    : Convert Hex 32Bits value into char.
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
 8001a50:	18ca      	adds	r2, r1, r3
 8001a52:	3302      	adds	r3, #2
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
 8001a54:	0100      	lsls	r0, r0, #4
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 8001a56:	42b3      	cmp	r3, r6
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8001a58:	7054      	strb	r4, [r2, #1]
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 8001a5a:	d013      	beq.n	8001a84 <IntToUnicode+0x68>
  {
    if( ((value >> 28)) < 0xA )
 8001a5c:	0f05      	lsrs	r5, r0, #28
 8001a5e:	2d09      	cmp	r5, #9
 8001a60:	d815      	bhi.n	8001a8e <IntToUnicode+0x72>
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
 8001a62:	3530      	adds	r5, #48	; 0x30
 8001a64:	54cd      	strb	r5, [r1, r3]
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
 8001a66:	0100      	lsls	r0, r0, #4
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 8001a68:	0f02      	lsrs	r2, r0, #28
* Description    : Convert Hex 32Bits value into char.
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
 8001a6a:	18cd      	adds	r5, r1, r3
 8001a6c:	3302      	adds	r3, #2
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 8001a6e:	2a09      	cmp	r2, #9
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8001a70:	706c      	strb	r4, [r5, #1]
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 8001a72:	d8eb      	bhi.n	8001a4c <IntToUnicode+0x30>
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
 8001a74:	3230      	adds	r2, #48	; 0x30
 8001a76:	54ca      	strb	r2, [r1, r3]
* Description    : Convert Hex 32Bits value into char.
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
 8001a78:	18ca      	adds	r2, r1, r3
 8001a7a:	3302      	adds	r3, #2
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
 8001a7c:	0100      	lsls	r0, r0, #4
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 8001a7e:	42b3      	cmp	r3, r6
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8001a80:	7054      	strb	r4, [r2, #1]
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 8001a82:	d1eb      	bne.n	8001a5c <IntToUnicode+0x40>
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
  }
}
 8001a84:	bc70      	pop	{r4, r5, r6}
 8001a86:	4770      	bx	lr
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
 8001a88:	3330      	adds	r3, #48	; 0x30
 8001a8a:	700b      	strb	r3, [r1, #0]
 8001a8c:	e7d5      	b.n	8001a3a <IntToUnicode+0x1e>
    }
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 8001a8e:	3537      	adds	r5, #55	; 0x37
 8001a90:	54cd      	strb	r5, [r1, r3]
 8001a92:	e7e8      	b.n	8001a66 <IntToUnicode+0x4a>

08001a94 <USB_LP_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void USB_LP_IRQHandler(void)
{
 8001a94:	b508      	push	{r3, lr}
	//printf("USB\n");	
	USB_Istr();
 8001a96:	f241 2325 	movw	r3, #4645	; 0x1225
 8001a9a:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001a9e:	4798      	blx	r3
 8001aa0:	bd08      	pop	{r3, pc}
 8001aa2:	bf00      	nop

08001aa4 <Set_System>:
*******************************************************************************/
void Set_System(void)
{  	
	#if HW_USE_USB_SMARTROBOT_BD == 1
	//-- PC.13
	REG_GPIOC_CRH &= ~(0x0F << (20));	// Clear
 8001aa4:	f241 0304 	movw	r3, #4100	; 0x1004
 8001aa8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	f422 0070 	bic.w	r0, r2, #15728640	; 0xf00000
 8001ab2:	6018      	str	r0, [r3, #0]
	REG_GPIOC_CRH |=  (0x02 << (20));	// MODE, PC.13 Output mode, max speed 2Mhz
 8001ab4:	6819      	ldr	r1, [r3, #0]
 8001ab6:	f441 1200 	orr.w	r2, r1, #2097152	; 0x200000
 8001aba:	601a      	str	r2, [r3, #0]
	REG_GPIOC_CRH |=  (0x00 << (22));	// CNF,  PC.13 General purpose output push-pul
 8001abc:	6818      	ldr	r0, [r3, #0]
 8001abe:	6018      	str	r0, [r3, #0]
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop

08001ac4 <Set_USBClock>:
*******************************************************************************/
void Set_USBClock(void)
{
	//-- USB 72M * 2 / 3 = 48Mhz
	//
	CLR_BIT( REG_RCC_CFGR, 22 );	
 8001ac4:	f241 0204 	movw	r2, #4100	; 0x1004
 8001ac8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001acc:	6811      	ldr	r1, [r2, #0]
	
	//-- USB Clock Enable 
	//
	SET_BIT( REG_RCC_APB1ENR, 23 );
 8001ace:	f241 031c 	movw	r3, #4124	; 0x101c
*******************************************************************************/
void Set_USBClock(void)
{
	//-- USB 72M * 2 / 3 = 48Mhz
	//
	CLR_BIT( REG_RCC_CFGR, 22 );	
 8001ad2:	f421 0080 	bic.w	r0, r1, #4194304	; 0x400000
 8001ad6:	6010      	str	r0, [r2, #0]
	
	//-- USB Clock Enable 
	//
	SET_BIT( REG_RCC_APB1ENR, 23 );
 8001ad8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	f442 0100 	orr.w	r1, r2, #8388608	; 0x800000
 8001ae2:	6019      	str	r1, [r3, #0]
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop

08001ae8 <Leave_LowPowerMode>:
void Leave_LowPowerMode(void)
{
  DEVICE_INFO *pInfo = &Device_Info;

  /* Set the device state to the correct state */
  if (pInfo->Current_Configuration != 0)
 8001ae8:	4b05      	ldr	r3, [pc, #20]	; (8001b00 <Leave_LowPowerMode+0x18>)
 8001aea:	7a98      	ldrb	r0, [r3, #10]
 8001aec:	b918      	cbnz	r0, 8001af6 <Leave_LowPowerMode+0xe>
    /* Device configured */
    bDeviceState = CONFIGURED;
  }
  else
  {
    bDeviceState = ATTACHED;
 8001aee:	4905      	ldr	r1, [pc, #20]	; (8001b04 <Leave_LowPowerMode+0x1c>)
 8001af0:	2201      	movs	r2, #1
 8001af2:	600a      	str	r2, [r1, #0]
 8001af4:	4770      	bx	lr

  /* Set the device state to the correct state */
  if (pInfo->Current_Configuration != 0)
  {
    /* Device configured */
    bDeviceState = CONFIGURED;
 8001af6:	4b03      	ldr	r3, [pc, #12]	; (8001b04 <Leave_LowPowerMode+0x1c>)
 8001af8:	2005      	movs	r0, #5
 8001afa:	6018      	str	r0, [r3, #0]
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	20001334 	.word	0x20001334
 8001b04:	200002c0 	.word	0x200002c0

08001b08 <USB_Interrupts_Config>:
void USB_Interrupts_Config(void)
{

	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
 8001b08:	f240 4214 	movw	r2, #1044	; 0x414
* Description    : Configures the USB interrupts
* Input          : None.
* Return         : None.
*******************************************************************************/
void USB_Interrupts_Config(void)
{
 8001b0c:	b538      	push	{r3, r4, r5, lr}

	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
 8001b0e:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8001b12:	f44f 2180 	mov.w	r1, #262144	; 0x40000
	
	CLR_BIT( REG_EXTI_IMR,  18 );
 8001b16:	f44f 6380 	mov.w	r3, #1024	; 0x400
void USB_Interrupts_Config(void)
{

	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
 8001b1a:	6011      	str	r1, [r2, #0]
	
	CLR_BIT( REG_EXTI_IMR,  18 );
 8001b1c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001b20:	6818      	ldr	r0, [r3, #0]
	CLR_BIT( REG_EXTI_EMR,  18 );
 8001b22:	f240 4404 	movw	r4, #1028	; 0x404

	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
	
	CLR_BIT( REG_EXTI_IMR,  18 );
 8001b26:	f420 2580 	bic.w	r5, r0, #262144	; 0x40000
 8001b2a:	601d      	str	r5, [r3, #0]
	CLR_BIT( REG_EXTI_EMR,  18 );
 8001b2c:	f2c4 0401 	movt	r4, #16385	; 0x4001
 8001b30:	6822      	ldr	r2, [r4, #0]
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
 8001b32:	f44f 6181 	mov.w	r1, #1032	; 0x408
	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
	
	CLR_BIT( REG_EXTI_IMR,  18 );
	CLR_BIT( REG_EXTI_EMR,  18 );
 8001b36:	f422 2080 	bic.w	r0, r2, #262144	; 0x40000
 8001b3a:	6020      	str	r0, [r4, #0]
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
 8001b3c:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8001b40:	680c      	ldr	r4, [r1, #0]
	CLR_BIT( REG_EXTI_FTSR, 18 );
 8001b42:	f240 450c 	movw	r5, #1036	; 0x40c
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
	
	CLR_BIT( REG_EXTI_IMR,  18 );
	CLR_BIT( REG_EXTI_EMR,  18 );
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
 8001b46:	f444 2280 	orr.w	r2, r4, #262144	; 0x40000
 8001b4a:	600a      	str	r2, [r1, #0]
	CLR_BIT( REG_EXTI_FTSR, 18 );
 8001b4c:	f2c4 0501 	movt	r5, #16385	; 0x4001
 8001b50:	6829      	ldr	r1, [r5, #0]
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
 8001b52:	f640 2439 	movw	r4, #2617	; 0xa39
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
	
	CLR_BIT( REG_EXTI_IMR,  18 );
	CLR_BIT( REG_EXTI_EMR,  18 );
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
	CLR_BIT( REG_EXTI_FTSR, 18 );
 8001b56:	f421 2080 	bic.w	r0, r1, #262144	; 0x40000
 8001b5a:	6028      	str	r0, [r5, #0]
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable
 8001b5c:	681d      	ldr	r5, [r3, #0]

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
 8001b5e:	f641 2195 	movw	r1, #6805	; 0x1a95
	
	CLR_BIT( REG_EXTI_IMR,  18 );
	CLR_BIT( REG_EXTI_EMR,  18 );
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
	CLR_BIT( REG_EXTI_FTSR, 18 );
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable
 8001b62:	f445 2580 	orr.w	r5, r5, #262144	; 0x40000

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
 8001b66:	2090      	movs	r0, #144	; 0x90
 8001b68:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	f6c0 0400 	movt	r4, #2048	; 0x800
	
	CLR_BIT( REG_EXTI_IMR,  18 );
	CLR_BIT( REG_EXTI_EMR,  18 );
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
	CLR_BIT( REG_EXTI_FTSR, 18 );
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable
 8001b72:	601d      	str	r5, [r3, #0]

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
 8001b74:	47a0      	blx	r4
	SET_BIT( REG_NVIC_ISER( 20/32 ), 20%32 );	// NVIC 20번 USB_LP 인터럽트 활성화 
 8001b76:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8001b7a:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8001b7e:	681a      	ldr	r2, [r3, #0]
	
	Hw_ISR_SetIRQFuncByAddr( 0x00E8, (u32)USBWakeUp_IRQHandler, 0 );
 8001b80:	20e8      	movs	r0, #232	; 0xe8
	CLR_BIT( REG_EXTI_FTSR, 18 );
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
	SET_BIT( REG_NVIC_ISER( 20/32 ), 20%32 );	// NVIC 20번 USB_LP 인터럽트 활성화 
 8001b82:	f442 1180 	orr.w	r1, r2, #1048576	; 0x100000
 8001b86:	6019      	str	r1, [r3, #0]
	
	Hw_ISR_SetIRQFuncByAddr( 0x00E8, (u32)USBWakeUp_IRQHandler, 0 );
 8001b88:	f641 210d 	movw	r1, #6669	; 0x1a0d
 8001b8c:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001b90:	2200      	movs	r2, #0
 8001b92:	47a0      	blx	r4
	SET_BIT( REG_NVIC_ISER( 42/32 ), 42%32 );	// NVIC 42번 USB Wake Up 인터럽트 활성화 
 8001b94:	f24e 1004 	movw	r0, #57604	; 0xe104
 8001b98:	f2ce 0000 	movt	r0, #57344	; 0xe000
 8001b9c:	6802      	ldr	r2, [r0, #0]

	SET_BIT( REG_EXTI_SWIER, 18 );
 8001b9e:	f44f 6382 	mov.w	r3, #1040	; 0x410
  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
	SET_BIT( REG_NVIC_ISER( 20/32 ), 20%32 );	// NVIC 20번 USB_LP 인터럽트 활성화 
	
	Hw_ISR_SetIRQFuncByAddr( 0x00E8, (u32)USBWakeUp_IRQHandler, 0 );
	SET_BIT( REG_NVIC_ISER( 42/32 ), 42%32 );	// NVIC 42번 USB Wake Up 인터럽트 활성화 
 8001ba2:	f442 6180 	orr.w	r1, r2, #1024	; 0x400
 8001ba6:	6001      	str	r1, [r0, #0]

	SET_BIT( REG_EXTI_SWIER, 18 );
 8001ba8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001bac:	6818      	ldr	r0, [r3, #0]
 8001bae:	f440 2280 	orr.w	r2, r0, #262144	; 0x40000
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	bd38      	pop	{r3, r4, r5, pc}
 8001bb6:	bf00      	nop

08001bb8 <USB_Cable_Config>:
void USB_Cable_Config (char NewState)
{
  if (NewState != DISABLE)
  {
  	#if HW_USE_USB_SMARTROBOT_BD == 1
	CLR_BIT( REG_GPIOC_ODR, 13 );
 8001bb8:	f241 030c 	movw	r3, #4108	; 0x100c
 8001bbc:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001bc0:	681a      	ldr	r2, [r3, #0]
* Input          : None.
* Return         : Status
*******************************************************************************/
void USB_Cable_Config (char NewState)
{
  if (NewState != DISABLE)
 8001bc2:	b918      	cbnz	r0, 8001bcc <USB_Cable_Config+0x14>
	#endif
  }
  else
  {
  	#if HW_USE_USB_SMARTROBOT_BD == 1
	SET_BIT( REG_GPIOC_ODR, 13 );    
 8001bc4:	f442 5000 	orr.w	r0, r2, #8192	; 0x2000
 8001bc8:	6018      	str	r0, [r3, #0]
 8001bca:	4770      	bx	lr
void USB_Cable_Config (char NewState)
{
  if (NewState != DISABLE)
  {
  	#if HW_USE_USB_SMARTROBOT_BD == 1
	CLR_BIT( REG_GPIOC_ODR, 13 );
 8001bcc:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8001bd0:	6019      	str	r1, [r3, #0]
 8001bd2:	4770      	bx	lr

08001bd4 <USB_To_USART_Send_Data>:
* Input          : data_buffer: data address.
                   Nb_bytes: number of bytes to send.
* Return         : none.
*******************************************************************************/
void USB_To_USART_Send_Data(uint8_t* data_buffer, uint8_t Nb_bytes)
{
 8001bd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 8001bd8:	4689      	mov	r9, r1
* Input          : data_buffer: data address.
                   Nb_bytes: number of bytes to send.
* Return         : none.
*******************************************************************************/
void USB_To_USART_Send_Data(uint8_t* data_buffer, uint8_t Nb_bytes)
{
 8001bda:	b083      	sub	sp, #12
 8001bdc:	4606      	mov	r6, r0
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 8001bde:	2900      	cmp	r1, #0
 8001be0:	d045      	beq.n	8001c6e <USB_To_USART_Send_Data+0x9a>
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 8001be2:	7803      	ldrb	r3, [r0, #0]
 8001be4:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8001c78 <USB_To_USART_Send_Data+0xa4>
 8001be8:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
 8001bec:	4f21      	ldr	r7, [pc, #132]	; (8001c74 <USB_To_USART_Send_Data+0xa0>)
    Hw_VCom_Q_Push( 0, &UartData );	//
 8001bee:	f10d 0107 	add.w	r1, sp, #7
 8001bf2:	2000      	movs	r0, #0
 8001bf4:	f002 0501 	and.w	r5, r2, #1
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 8001bf8:	f88d 3007 	strb.w	r3, [sp, #7]
    Hw_VCom_Q_Push( 0, &UartData );	//
 8001bfc:	47b8      	blx	r7

    if( Hw_VCom_RxdFuncPtr != NULL )
 8001bfe:	f8d8 1000 	ldr.w	r1, [r8]
 8001c02:	b111      	cbz	r1, 8001c0a <USB_To_USART_Send_Data+0x36>
    {
      Hw_VCom_RxdFuncPtr( UartData );      
 8001c04:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8001c08:	4788      	blx	r1
{
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 8001c0a:	2401      	movs	r4, #1
 8001c0c:	454c      	cmp	r4, r9
 8001c0e:	d22e      	bcs.n	8001c6e <USB_To_USART_Send_Data+0x9a>
 8001c10:	b17d      	cbz	r5, 8001c32 <USB_To_USART_Send_Data+0x5e>
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 8001c12:	5d33      	ldrb	r3, [r6, r4]
    Hw_VCom_Q_Push( 0, &UartData );	//
 8001c14:	2000      	movs	r0, #0
 8001c16:	f10d 0107 	add.w	r1, sp, #7
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 8001c1a:	f88d 3007 	strb.w	r3, [sp, #7]
    Hw_VCom_Q_Push( 0, &UartData );	//
 8001c1e:	47b8      	blx	r7

    if( Hw_VCom_RxdFuncPtr != NULL )
 8001c20:	f8d8 2000 	ldr.w	r2, [r8]
 8001c24:	b112      	cbz	r2, 8001c2c <USB_To_USART_Send_Data+0x58>
    {
      Hw_VCom_RxdFuncPtr( UartData );      
 8001c26:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8001c2a:	4790      	blx	r2
{
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 8001c2c:	3401      	adds	r4, #1
 8001c2e:	454c      	cmp	r4, r9
 8001c30:	d21d      	bcs.n	8001c6e <USB_To_USART_Send_Data+0x9a>
 8001c32:	1c65      	adds	r5, r4, #1
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 8001c34:	5d34      	ldrb	r4, [r6, r4]
    Hw_VCom_Q_Push( 0, &UartData );	//
 8001c36:	f10d 0107 	add.w	r1, sp, #7
 8001c3a:	2000      	movs	r0, #0
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 8001c3c:	f88d 4007 	strb.w	r4, [sp, #7]
    Hw_VCom_Q_Push( 0, &UartData );	//
 8001c40:	47b8      	blx	r7

    if( Hw_VCom_RxdFuncPtr != NULL )
 8001c42:	f8d8 1000 	ldr.w	r1, [r8]
 8001c46:	b111      	cbz	r1, 8001c4e <USB_To_USART_Send_Data+0x7a>
    {
      Hw_VCom_RxdFuncPtr( UartData );      
 8001c48:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8001c4c:	4788      	blx	r1
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 8001c4e:	5d73      	ldrb	r3, [r6, r5]
    Hw_VCom_Q_Push( 0, &UartData );	//
 8001c50:	f10d 0107 	add.w	r1, sp, #7
 8001c54:	2000      	movs	r0, #0
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 8001c56:	f88d 3007 	strb.w	r3, [sp, #7]
    Hw_VCom_Q_Push( 0, &UartData );	//
 8001c5a:	47b8      	blx	r7

    if( Hw_VCom_RxdFuncPtr != NULL )
 8001c5c:	f8d8 2000 	ldr.w	r2, [r8]
 8001c60:	b112      	cbz	r2, 8001c68 <USB_To_USART_Send_Data+0x94>
    {
      Hw_VCom_RxdFuncPtr( UartData );      
 8001c62:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8001c66:	4790      	blx	r2
{
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 8001c68:	1c6c      	adds	r4, r5, #1
 8001c6a:	454c      	cmp	r4, r9
 8001c6c:	d3e1      	bcc.n	8001c32 <USB_To_USART_Send_Data+0x5e>
    if( Hw_VCom_RxdFuncPtr != NULL )
    {
      Hw_VCom_RxdFuncPtr( UartData );      
    }
  }  
}
 8001c6e:	b003      	add	sp, #12
 8001c70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001c74:	08001045 	.word	0x08001045
 8001c78:	200006a8 	.word	0x200006a8

08001c7c <Handle_USBAsynchXfer>:
* Description    : send data to USB.
* Input          : None.
* Return         : none.
*******************************************************************************/
void Handle_USBAsynchXfer (void)
{
 8001c7c:	b570      	push	{r4, r5, r6, lr}
  
  uint16_t USB_Tx_ptr;
  uint16_t USB_Tx_length;
  
  if(USB_Tx_State != 1)
 8001c7e:	4c20      	ldr	r4, [pc, #128]	; (8001d00 <Handle_USBAsynchXfer+0x84>)
 8001c80:	7823      	ldrb	r3, [r4, #0]
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d023      	beq.n	8001cce <Handle_USBAsynchXfer+0x52>
  {
    if (USART_Rx_ptr_out == USART_RX_DATA_SIZE)
 8001c86:	4d1f      	ldr	r5, [pc, #124]	; (8001d04 <Handle_USBAsynchXfer+0x88>)
 8001c88:	682b      	ldr	r3, [r5, #0]
 8001c8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001c8e:	d02c      	beq.n	8001cea <Handle_USBAsynchXfer+0x6e>
    {
      USART_Rx_ptr_out = 0;
    }
    
    if(USART_Rx_ptr_out == USART_Rx_ptr_in) 
 8001c90:	4a1d      	ldr	r2, [pc, #116]	; (8001d08 <Handle_USBAsynchXfer+0x8c>)
 8001c92:	6811      	ldr	r1, [r2, #0]
 8001c94:	428b      	cmp	r3, r1
 8001c96:	d02f      	beq.n	8001cf8 <Handle_USBAsynchXfer+0x7c>
    {
      USB_Tx_State = 0; 
      return;
    }
    
    if(USART_Rx_ptr_out > USART_Rx_ptr_in) /* rollback */
 8001c98:	d81a      	bhi.n	8001cd0 <Handle_USBAsynchXfer+0x54>
 8001c9a:	b298      	uxth	r0, r3
    { 
      USART_Rx_length = USART_RX_DATA_SIZE - USART_Rx_ptr_out;
    }
    else 
    {
      USART_Rx_length = USART_Rx_ptr_in - USART_Rx_ptr_out;
 8001c9c:	1ace      	subs	r6, r1, r3
 8001c9e:	4a1b      	ldr	r2, [pc, #108]	; (8001d0c <Handle_USBAsynchXfer+0x90>)
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
 8001ca0:	2e40      	cmp	r6, #64	; 0x40
    { 
      USART_Rx_length = USART_RX_DATA_SIZE - USART_Rx_ptr_out;
    }
    else 
    {
      USART_Rx_length = USART_Rx_ptr_in - USART_Rx_ptr_out;
 8001ca2:	6016      	str	r6, [r2, #0]
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
 8001ca4:	d91b      	bls.n	8001cde <Handle_USBAsynchXfer+0x62>
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
      
      USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;	
      USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;	
 8001ca6:	3e40      	subs	r6, #64	; 0x40
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
      
      USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;	
 8001ca8:	3340      	adds	r3, #64	; 0x40
      USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;	
 8001caa:	6016      	str	r6, [r2, #0]
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
      
      USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;	
 8001cac:	602b      	str	r3, [r5, #0]
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
 8001cae:	2640      	movs	r6, #64	; 0x40
      
      USART_Rx_ptr_out += USART_Rx_length;
      USART_Rx_length = 0;
    }
    USB_Tx_State = 1; 
    UserToPMABufferCopy(&USART_Rx_Buffer[USB_Tx_ptr], ENDP1_TXADDR, USB_Tx_length);
 8001cb0:	4b17      	ldr	r3, [pc, #92]	; (8001d10 <Handle_USBAsynchXfer+0x94>)
      USB_Tx_length = USART_Rx_length;
      
      USART_Rx_ptr_out += USART_Rx_length;
      USART_Rx_length = 0;
    }
    USB_Tx_State = 1; 
 8001cb2:	2501      	movs	r5, #1
    UserToPMABufferCopy(&USART_Rx_Buffer[USB_Tx_ptr], ENDP1_TXADDR, USB_Tx_length);
 8001cb4:	1818      	adds	r0, r3, r0
 8001cb6:	4632      	mov	r2, r6
 8001cb8:	21c0      	movs	r1, #192	; 0xc0
 8001cba:	4b16      	ldr	r3, [pc, #88]	; (8001d14 <Handle_USBAsynchXfer+0x98>)
      USB_Tx_length = USART_Rx_length;
      
      USART_Rx_ptr_out += USART_Rx_length;
      USART_Rx_length = 0;
    }
    USB_Tx_State = 1; 
 8001cbc:	7025      	strb	r5, [r4, #0]
    UserToPMABufferCopy(&USART_Rx_Buffer[USB_Tx_ptr], ENDP1_TXADDR, USB_Tx_length);
 8001cbe:	4798      	blx	r3
    SetEPTxCount(ENDP1, USB_Tx_length);
 8001cc0:	4628      	mov	r0, r5
 8001cc2:	4631      	mov	r1, r6
 8001cc4:	4a14      	ldr	r2, [pc, #80]	; (8001d18 <Handle_USBAsynchXfer+0x9c>)
 8001cc6:	4790      	blx	r2
    SetEPTxValid(ENDP1); 
 8001cc8:	4628      	mov	r0, r5
 8001cca:	4914      	ldr	r1, [pc, #80]	; (8001d1c <Handle_USBAsynchXfer+0xa0>)
 8001ccc:	4788      	blx	r1
 8001cce:	bd70      	pop	{r4, r5, r6, pc}
      return;
    }
    
    if(USART_Rx_ptr_out > USART_Rx_ptr_in) /* rollback */
    { 
      USART_Rx_length = USART_RX_DATA_SIZE - USART_Rx_ptr_out;
 8001cd0:	f5c3 6600 	rsb	r6, r3, #2048	; 0x800
 8001cd4:	4a0d      	ldr	r2, [pc, #52]	; (8001d0c <Handle_USBAsynchXfer+0x90>)
    else 
    {
      USART_Rx_length = USART_Rx_ptr_in - USART_Rx_ptr_out;
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
 8001cd6:	2e40      	cmp	r6, #64	; 0x40
      return;
    }
    
    if(USART_Rx_ptr_out > USART_Rx_ptr_in) /* rollback */
    { 
      USART_Rx_length = USART_RX_DATA_SIZE - USART_Rx_ptr_out;
 8001cd8:	6016      	str	r6, [r2, #0]
 8001cda:	b298      	uxth	r0, r3
    else 
    {
      USART_Rx_length = USART_Rx_ptr_in - USART_Rx_ptr_out;
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
 8001cdc:	d8e3      	bhi.n	8001ca6 <Handle_USBAsynchXfer+0x2a>
    else
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = USART_Rx_length;
      
      USART_Rx_ptr_out += USART_Rx_length;
 8001cde:	18f1      	adds	r1, r6, r3
 8001ce0:	6029      	str	r1, [r5, #0]
      USART_Rx_length = 0;
 8001ce2:	2500      	movs	r5, #0
      USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;	
    }
    else
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = USART_Rx_length;
 8001ce4:	b2b6      	uxth	r6, r6
      
      USART_Rx_ptr_out += USART_Rx_length;
      USART_Rx_length = 0;
 8001ce6:	6015      	str	r5, [r2, #0]
 8001ce8:	e7e2      	b.n	8001cb0 <Handle_USBAsynchXfer+0x34>
    if (USART_Rx_ptr_out == USART_RX_DATA_SIZE)
    {
      USART_Rx_ptr_out = 0;
    }
    
    if(USART_Rx_ptr_out == USART_Rx_ptr_in) 
 8001cea:	4907      	ldr	r1, [pc, #28]	; (8001d08 <Handle_USBAsynchXfer+0x8c>)
  
  if(USB_Tx_State != 1)
  {
    if (USART_Rx_ptr_out == USART_RX_DATA_SIZE)
    {
      USART_Rx_ptr_out = 0;
 8001cec:	2000      	movs	r0, #0
    }
    
    if(USART_Rx_ptr_out == USART_Rx_ptr_in) 
 8001cee:	6809      	ldr	r1, [r1, #0]
  
  if(USB_Tx_State != 1)
  {
    if (USART_Rx_ptr_out == USART_RX_DATA_SIZE)
    {
      USART_Rx_ptr_out = 0;
 8001cf0:	6028      	str	r0, [r5, #0]
    }
    
    if(USART_Rx_ptr_out == USART_Rx_ptr_in) 
 8001cf2:	b109      	cbz	r1, 8001cf8 <Handle_USBAsynchXfer+0x7c>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	e7d1      	b.n	8001c9c <Handle_USBAsynchXfer+0x20>
    {
      USB_Tx_State = 0; 
 8001cf8:	2000      	movs	r0, #0
 8001cfa:	7020      	strb	r0, [r4, #0]
      return;
 8001cfc:	bd70      	pop	{r4, r5, r6, pc}
 8001cfe:	bf00      	nop
 8001d00:	200002cc 	.word	0x200002cc
 8001d04:	200002d4 	.word	0x200002d4
 8001d08:	200002d0 	.word	0x200002d0
 8001d0c:	200002d8 	.word	0x200002d8
 8001d10:	20000b24 	.word	0x20000b24
 8001d14:	080027a5 	.word	0x080027a5
 8001d18:	08002a55 	.word	0x08002a55
 8001d1c:	08002919 	.word	0x08002919

08001d20 <USB_Send_Data>:
	
	//-- 전송 버퍼가 꽉 차면 기다린다.
	//
	while(1)
	{
		if( (USART_Rx_length + 1) < USART_RX_DATA_SIZE ) break;
 8001d20:	4b0a      	ldr	r3, [pc, #40]	; (8001d4c <USB_Send_Data+0x2c>)
* Description    : send the received data from UART 0 to USB.
* Input          : None.
* Return         : none.
*******************************************************************************/
void USB_Send_Data( u8 SendData )
{
 8001d22:	b410      	push	{r4}
	
	//-- 전송 버퍼가 꽉 차면 기다린다.
	//
	while(1)
	{
		if( (USART_Rx_length + 1) < USART_RX_DATA_SIZE ) break;
 8001d24:	6819      	ldr	r1, [r3, #0]
 8001d26:	1c4a      	adds	r2, r1, #1
 8001d28:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8001d2c:	d20c      	bcs.n	8001d48 <USB_Send_Data+0x28>
	}
	
	
	USART_Rx_Buffer[USART_Rx_ptr_in] = SendData;
 8001d2e:	4b08      	ldr	r3, [pc, #32]	; (8001d50 <USB_Send_Data+0x30>)
 8001d30:	4c08      	ldr	r4, [pc, #32]	; (8001d54 <USB_Send_Data+0x34>)
 8001d32:	6819      	ldr	r1, [r3, #0]
	USART_Rx_ptr_in++;
 8001d34:	1c4a      	adds	r2, r1, #1
  
	/* To avoid buffer overflow */
	if(USART_Rx_ptr_in == USART_RX_DATA_SIZE)
 8001d36:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
	{
		if( (USART_Rx_length + 1) < USART_RX_DATA_SIZE ) break;
	}
	
	
	USART_Rx_Buffer[USART_Rx_ptr_in] = SendData;
 8001d3a:	5460      	strb	r0, [r4, r1]
	USART_Rx_ptr_in++;
 8001d3c:	601a      	str	r2, [r3, #0]
  
	/* To avoid buffer overflow */
	if(USART_Rx_ptr_in == USART_RX_DATA_SIZE)
 8001d3e:	d101      	bne.n	8001d44 <USB_Send_Data+0x24>
	{
		USART_Rx_ptr_in = 0;
 8001d40:	2000      	movs	r0, #0
 8001d42:	6018      	str	r0, [r3, #0]
	}
}
 8001d44:	bc10      	pop	{r4}
 8001d46:	4770      	bx	lr
 8001d48:	e7fe      	b.n	8001d48 <USB_Send_Data+0x28>
 8001d4a:	bf00      	nop
 8001d4c:	200002d8 	.word	0x200002d8
 8001d50:	200002d0 	.word	0x200002d0
 8001d54:	20000b24 	.word	0x20000b24

08001d58 <Get_SerialNum>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Get_SerialNum(void)
{
 8001d58:	b538      	push	{r3, r4, r5, lr}
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(uint32_t*)ID1;
 8001d5a:	f24f 72e8 	movw	r2, #63464	; 0xf7e8
  Device_Serial1 = *(uint32_t*)ID2;
  Device_Serial2 = *(uint32_t*)ID3;  
 8001d5e:	f24f 73f0 	movw	r3, #63472	; 0xf7f0
*******************************************************************************/
void Get_SerialNum(void)
{
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(uint32_t*)ID1;
 8001d62:	f6c1 72ff 	movt	r2, #8191	; 0x1fff
  Device_Serial1 = *(uint32_t*)ID2;
  Device_Serial2 = *(uint32_t*)ID3;  
 8001d66:	f6c1 73ff 	movt	r3, #8191	; 0x1fff
*******************************************************************************/
void Get_SerialNum(void)
{
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(uint32_t*)ID1;
 8001d6a:	6810      	ldr	r0, [r2, #0]
  Device_Serial1 = *(uint32_t*)ID2;
  Device_Serial2 = *(uint32_t*)ID3;  

  Device_Serial0 += Device_Serial2;
 8001d6c:	681a      	ldr	r2, [r3, #0]
void Get_SerialNum(void)
{
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(uint32_t*)ID1;
  Device_Serial1 = *(uint32_t*)ID2;
 8001d6e:	f24f 71ec 	movw	r1, #63468	; 0xf7ec
 8001d72:	f6c1 71ff 	movt	r1, #8191	; 0x1fff
  Device_Serial2 = *(uint32_t*)ID3;  

  Device_Serial0 += Device_Serial2;

  if (Device_Serial0 != 0)
 8001d76:	1880      	adds	r0, r0, r2
void Get_SerialNum(void)
{
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(uint32_t*)ID1;
  Device_Serial1 = *(uint32_t*)ID2;
 8001d78:	680c      	ldr	r4, [r1, #0]
  Device_Serial2 = *(uint32_t*)ID3;  

  Device_Serial0 += Device_Serial2;

  if (Device_Serial0 != 0)
 8001d7a:	d007      	beq.n	8001d8c <Get_SerialNum+0x34>
  {
    IntToUnicode (Device_Serial0, &Virtual_Com_Port_StringSerial[2] , 8);
 8001d7c:	4904      	ldr	r1, [pc, #16]	; (8001d90 <Get_SerialNum+0x38>)
 8001d7e:	2208      	movs	r2, #8
 8001d80:	4d04      	ldr	r5, [pc, #16]	; (8001d94 <Get_SerialNum+0x3c>)
 8001d82:	47a8      	blx	r5
    IntToUnicode (Device_Serial1, &Virtual_Com_Port_StringSerial[18], 4);
 8001d84:	4620      	mov	r0, r4
 8001d86:	4904      	ldr	r1, [pc, #16]	; (8001d98 <Get_SerialNum+0x40>)
 8001d88:	2204      	movs	r2, #4
 8001d8a:	47a8      	blx	r5
 8001d8c:	bd38      	pop	{r3, r4, r5, pc}
 8001d8e:	bf00      	nop
 8001d90:	20000002 	.word	0x20000002
 8001d94:	08001a1d 	.word	0x08001a1d
 8001d98:	20000012 	.word	0x20000012

08001d9c <__WFI>:
}


void __WFI(void)
{
	 __asm("wfi");
 8001d9c:	bf30      	wfi
 8001d9e:	4770      	bx	lr

08001da0 <Standard_GetConfiguration>:
* Output         : None.
* Return         : Return 1 , if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
uint8_t *Standard_GetConfiguration(uint16_t Length)
{
 8001da0:	b508      	push	{r3, lr}
  if (Length == 0)
 8001da2:	b138      	cbz	r0, 8001db4 <Standard_GetConfiguration+0x14>
  {
    pInformation->Ctrl_Info.Usb_wLength =
      sizeof(pInformation->Current_Configuration);
    return 0;
  }
  pUser_Standard_Requests->User_GetConfiguration();
 8001da4:	4b06      	ldr	r3, [pc, #24]	; (8001dc0 <Standard_GetConfiguration+0x20>)
 8001da6:	6818      	ldr	r0, [r3, #0]
 8001da8:	6801      	ldr	r1, [r0, #0]
 8001daa:	4788      	blx	r1
  return (uint8_t *)&pInformation->Current_Configuration;
 8001dac:	4a05      	ldr	r2, [pc, #20]	; (8001dc4 <Standard_GetConfiguration+0x24>)
 8001dae:	6810      	ldr	r0, [r2, #0]
 8001db0:	300a      	adds	r0, #10
}
 8001db2:	bd08      	pop	{r3, pc}
*******************************************************************************/
uint8_t *Standard_GetConfiguration(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength =
 8001db4:	4b03      	ldr	r3, [pc, #12]	; (8001dc4 <Standard_GetConfiguration+0x24>)
 8001db6:	2201      	movs	r2, #1
 8001db8:	6819      	ldr	r1, [r3, #0]
 8001dba:	820a      	strh	r2, [r1, #16]
      sizeof(pInformation->Current_Configuration);
    return 0;
 8001dbc:	bd08      	pop	{r3, pc}
 8001dbe:	bf00      	nop
 8001dc0:	20001350 	.word	0x20001350
 8001dc4:	20001354 	.word	0x20001354

08001dc8 <Standard_GetInterface>:
* Output         : None.
* Return         : Return 0, if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
uint8_t *Standard_GetInterface(uint16_t Length)
{
 8001dc8:	b508      	push	{r3, lr}
  if (Length == 0)
 8001dca:	b138      	cbz	r0, 8001ddc <Standard_GetInterface+0x14>
  {
    pInformation->Ctrl_Info.Usb_wLength =
      sizeof(pInformation->Current_AlternateSetting);
    return 0;
  }
  pUser_Standard_Requests->User_GetInterface();
 8001dcc:	4b06      	ldr	r3, [pc, #24]	; (8001de8 <Standard_GetInterface+0x20>)
 8001dce:	6818      	ldr	r0, [r3, #0]
 8001dd0:	6881      	ldr	r1, [r0, #8]
 8001dd2:	4788      	blx	r1
  return (uint8_t *)&pInformation->Current_AlternateSetting;
 8001dd4:	4a05      	ldr	r2, [pc, #20]	; (8001dec <Standard_GetInterface+0x24>)
 8001dd6:	6810      	ldr	r0, [r2, #0]
 8001dd8:	300c      	adds	r0, #12
}
 8001dda:	bd08      	pop	{r3, pc}
*******************************************************************************/
uint8_t *Standard_GetInterface(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength =
 8001ddc:	4b03      	ldr	r3, [pc, #12]	; (8001dec <Standard_GetInterface+0x24>)
 8001dde:	2201      	movs	r2, #1
 8001de0:	6819      	ldr	r1, [r3, #0]
 8001de2:	820a      	strh	r2, [r1, #16]
      sizeof(pInformation->Current_AlternateSetting);
    return 0;
 8001de4:	bd08      	pop	{r3, pc}
 8001de6:	bf00      	nop
 8001de8:	20001350 	.word	0x20001350
 8001dec:	20001354 	.word	0x20001354

08001df0 <Standard_GetStatus>:
* Output         : None.
* Return         : Return 0, if the request is at end of data block,
*                  or is invalid when "Length" is 0.
*******************************************************************************/
uint8_t *Standard_GetStatus(uint16_t Length)
{
 8001df0:	b508      	push	{r3, lr}
  if (Length == 0)
 8001df2:	2800      	cmp	r0, #0
 8001df4:	d03b      	beq.n	8001e6e <Standard_GetStatus+0x7e>
  }

  /* Reset Status Information */
  StatusInfo.w = 0;

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8001df6:	4b23      	ldr	r3, [pc, #140]	; (8001e84 <Standard_GetStatus+0x94>)
    pInformation->Ctrl_Info.Usb_wLength = 2;
    return 0;
  }

  /* Reset Status Information */
  StatusInfo.w = 0;
 8001df8:	4823      	ldr	r0, [pc, #140]	; (8001e88 <Standard_GetStatus+0x98>)
 8001dfa:	2100      	movs	r1, #0

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8001dfc:	681a      	ldr	r2, [r3, #0]
    pInformation->Ctrl_Info.Usb_wLength = 2;
    return 0;
  }

  /* Reset Status Information */
  StatusInfo.w = 0;
 8001dfe:	8001      	strh	r1, [r0, #0]

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8001e00:	7813      	ldrb	r3, [r2, #0]
 8001e02:	f013 037f 	ands.w	r3, r3, #127	; 0x7f
 8001e06:	d112      	bne.n	8001e2e <Standard_GetStatus+0x3e>
  {
    /*Get Device Status */
    uint8_t Feature = pInformation->Current_Feature;
 8001e08:	7a53      	ldrb	r3, [r2, #9]

    /* Remote Wakeup enabled */
    if (ValBit(Feature, 5))
 8001e0a:	f003 0220 	and.w	r2, r3, #32
 8001e0e:	b2d1      	uxtb	r1, r2
 8001e10:	bb59      	cbnz	r1, 8001e6a <Standard_GetStatus+0x7a>
 8001e12:	7802      	ldrb	r2, [r0, #0]
    {
      ClrBit(StatusInfo0, 1);
    }      

    /* Bus-powered */
    if (ValBit(Feature, 6))
 8001e14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e18:	b2d9      	uxtb	r1, r3
 8001e1a:	b311      	cbz	r1, 8001e62 <Standard_GetStatus+0x72>
    {
      SetBit(StatusInfo0, 0);
 8001e1c:	f042 0301 	orr.w	r3, r2, #1
 8001e20:	7003      	strb	r3, [r0, #0]
  }
  else
  {
    return NULL;
  }
  pUser_Standard_Requests->User_GetStatus();
 8001e22:	481a      	ldr	r0, [pc, #104]	; (8001e8c <Standard_GetStatus+0x9c>)
 8001e24:	6801      	ldr	r1, [r0, #0]
 8001e26:	690a      	ldr	r2, [r1, #16]
 8001e28:	4790      	blx	r2
  return (uint8_t *)&StatusInfo;
 8001e2a:	4817      	ldr	r0, [pc, #92]	; (8001e88 <Standard_GetStatus+0x98>)
 8001e2c:	bd08      	pop	{r3, pc}
    {
      ClrBit(StatusInfo0, 0);
    }
  }
  /*Interface Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d016      	beq.n	8001e60 <Standard_GetStatus+0x70>
  {
    return (uint8_t *)&StatusInfo;
  }
  /*Get EndPoint Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d113      	bne.n	8001e5e <Standard_GetStatus+0x6e>
  {
    uint8_t Related_Endpoint;
    uint8_t wIndex0 = pInformation->USBwIndex0;
 8001e36:	7951      	ldrb	r1, [r2, #5]

    Related_Endpoint = (wIndex0 & 0x0f);
 8001e38:	f001 020f 	and.w	r2, r1, #15
    if (ValBit(wIndex0, 7))
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 8001e3c:	0093      	lsls	r3, r2, #2
 8001e3e:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 8001e42:	f502 43b8 	add.w	r3, r2, #23552	; 0x5c00
  {
    uint8_t Related_Endpoint;
    uint8_t wIndex0 = pInformation->USBwIndex0;

    Related_Endpoint = (wIndex0 & 0x0f);
    if (ValBit(wIndex0, 7))
 8001e46:	f011 0f80 	tst.w	r1, #128	; 0x80
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 8001e4a:	6819      	ldr	r1, [r3, #0]
  {
    uint8_t Related_Endpoint;
    uint8_t wIndex0 = pInformation->USBwIndex0;

    Related_Endpoint = (wIndex0 & 0x0f);
    if (ValBit(wIndex0, 7))
 8001e4c:	d114      	bne.n	8001e78 <Standard_GetStatus+0x88>
      }
    }
    else
    {
      /* OUT endpoint */
      if (_GetRxStallStatus(Related_Endpoint))
 8001e4e:	f401 5240 	and.w	r2, r1, #12288	; 0x3000
 8001e52:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001e56:	d1e4      	bne.n	8001e22 <Standard_GetStatus+0x32>
      {
        SetBit(StatusInfo0, 0); /* OUT Endpoint stalled */
 8001e58:	2101      	movs	r1, #1
 8001e5a:	7001      	strb	r1, [r0, #0]
 8001e5c:	e7e1      	b.n	8001e22 <Standard_GetStatus+0x32>
    }

  }
  else
  {
    return NULL;
 8001e5e:	4608      	mov	r0, r1
  }
  pUser_Standard_Requests->User_GetStatus();
  return (uint8_t *)&StatusInfo;
}
 8001e60:	bd08      	pop	{r3, pc}
    {
      SetBit(StatusInfo0, 0);
    }
    else /* Self-powered */
    {
      ClrBit(StatusInfo0, 0);
 8001e62:	f022 0201 	bic.w	r2, r2, #1
 8001e66:	7002      	strb	r2, [r0, #0]
 8001e68:	e7db      	b.n	8001e22 <Standard_GetStatus+0x32>
    uint8_t Feature = pInformation->Current_Feature;

    /* Remote Wakeup enabled */
    if (ValBit(Feature, 5))
    {
      SetBit(StatusInfo0, 1);
 8001e6a:	2202      	movs	r2, #2
 8001e6c:	e7d2      	b.n	8001e14 <Standard_GetStatus+0x24>
*******************************************************************************/
uint8_t *Standard_GetStatus(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength = 2;
 8001e6e:	4b05      	ldr	r3, [pc, #20]	; (8001e84 <Standard_GetStatus+0x94>)
 8001e70:	2202      	movs	r2, #2
 8001e72:	6819      	ldr	r1, [r3, #0]
 8001e74:	820a      	strh	r2, [r1, #16]
    return 0;
 8001e76:	bd08      	pop	{r3, pc}

    Related_Endpoint = (wIndex0 & 0x0f);
    if (ValBit(wIndex0, 7))
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 8001e78:	f001 0330 	and.w	r3, r1, #48	; 0x30
 8001e7c:	2b10      	cmp	r3, #16
 8001e7e:	d1d0      	bne.n	8001e22 <Standard_GetStatus+0x32>
 8001e80:	e7ea      	b.n	8001e58 <Standard_GetStatus+0x68>
 8001e82:	bf00      	nop
 8001e84:	20001354 	.word	0x20001354
 8001e88:	20001324 	.word	0x20001324
 8001e8c:	20001350 	.word	0x20001350

08001e90 <DataStageIn>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void DataStageIn(void)
{
 8001e90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
 8001e94:	4e27      	ldr	r6, [pc, #156]	; (8001f34 <DataStageIn+0xa4>)
 8001e96:	6834      	ldr	r4, [r6, #0]
  uint32_t save_wLength = pEPinfo->Usb_wLength;
 8001e98:	8a23      	ldrh	r3, [r4, #16]
  uint32_t ControlState = pInformation->ControlState;
 8001e9a:	7a27      	ldrb	r7, [r4, #8]

  uint8_t *DataBuffer;
  uint32_t Length;

  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
 8001e9c:	b923      	cbnz	r3, 8001ea8 <DataStageIn+0x18>
 8001e9e:	2f04      	cmp	r7, #4
 8001ea0:	d02a      	beq.n	8001ef8 <DataStageIn+0x68>
    }
    
    goto Expect_Status_Out;
  }

  Length = pEPinfo->PacketSize;
 8001ea2:	8aa5      	ldrh	r5, [r4, #20]
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void DataStageIn(void)
{
 8001ea4:	2704      	movs	r7, #4
 8001ea6:	e003      	b.n	8001eb0 <DataStageIn+0x20>
    }
    
    goto Expect_Status_Out;
  }

  Length = pEPinfo->PacketSize;
 8001ea8:	8aa5      	ldrh	r5, [r4, #20]
  ControlState = (save_wLength <= Length) ? LAST_IN_DATA : IN_DATA;
 8001eaa:	42ab      	cmp	r3, r5
 8001eac:	d9fa      	bls.n	8001ea4 <DataStageIn+0x14>
 8001eae:	2702      	movs	r7, #2
  if (Length > save_wLength)
  {
    Length = save_wLength;
  }

  DataBuffer = (*pEPinfo->CopyData)(Length);
 8001eb0:	429d      	cmp	r5, r3
 8001eb2:	bf28      	it	cs
 8001eb4:	461d      	movcs	r5, r3
 8001eb6:	69a1      	ldr	r1, [r4, #24]
 8001eb8:	4628      	mov	r0, r5
 8001eba:	4788      	blx	r1
  
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);
 8001ebc:	4a1e      	ldr	r2, [pc, #120]	; (8001f38 <DataStageIn+0xa8>)
  if (Length > save_wLength)
  {
    Length = save_wLength;
  }

  DataBuffer = (*pEPinfo->CopyData)(Length);
 8001ebe:	4680      	mov	r8, r0
  
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);
 8001ec0:	2000      	movs	r0, #0
 8001ec2:	4790      	blx	r2
 8001ec4:	462a      	mov	r2, r5
 8001ec6:	4601      	mov	r1, r0
 8001ec8:	4b1c      	ldr	r3, [pc, #112]	; (8001f3c <DataStageIn+0xac>)
 8001eca:	4640      	mov	r0, r8
 8001ecc:	4798      	blx	r3

  SetEPTxCount(ENDP0, Length);
 8001ece:	4629      	mov	r1, r5
 8001ed0:	2000      	movs	r0, #0
 8001ed2:	4a1b      	ldr	r2, [pc, #108]	; (8001f40 <DataStageIn+0xb0>)
 8001ed4:	4790      	blx	r2

  pEPinfo->Usb_wLength -= Length;
 8001ed6:	8a20      	ldrh	r0, [r4, #16]
  pEPinfo->Usb_wOffset += Length;
 8001ed8:	8a61      	ldrh	r1, [r4, #18]
  
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);

  SetEPTxCount(ENDP0, Length);

  pEPinfo->Usb_wLength -= Length;
 8001eda:	1b43      	subs	r3, r0, r5
 8001edc:	8223      	strh	r3, [r4, #16]
  pEPinfo->Usb_wOffset += Length;
 8001ede:	186d      	adds	r5, r5, r1
  vSetEPTxStatus(EP_TX_VALID);
 8001ee0:	4818      	ldr	r0, [pc, #96]	; (8001f44 <DataStageIn+0xb4>)

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 8001ee2:	4b19      	ldr	r3, [pc, #100]	; (8001f48 <DataStageIn+0xb8>)
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);

  SetEPTxCount(ENDP0, Length);

  pEPinfo->Usb_wLength -= Length;
  pEPinfo->Usb_wOffset += Length;
 8001ee4:	8265      	strh	r5, [r4, #18]
  vSetEPTxStatus(EP_TX_VALID);
 8001ee6:	2230      	movs	r2, #48	; 0x30

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 8001ee8:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8001eec:	6834      	ldr	r4, [r6, #0]

  SetEPTxCount(ENDP0, Length);

  pEPinfo->Usb_wLength -= Length;
  pEPinfo->Usb_wOffset += Length;
  vSetEPTxStatus(EP_TX_VALID);
 8001eee:	8002      	strh	r2, [r0, #0]

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 8001ef0:	8019      	strh	r1, [r3, #0]

Expect_Status_Out:
  pInformation->ControlState = ControlState;
 8001ef2:	7227      	strb	r7, [r4, #8]
 8001ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  uint8_t *DataBuffer;
  uint32_t Length;

  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
  {
    if(Data_Mul_MaxPacketSize == TRUE)
 8001ef8:	4a14      	ldr	r2, [pc, #80]	; (8001f4c <DataStageIn+0xbc>)
 8001efa:	7810      	ldrb	r0, [r2, #0]
 8001efc:	2801      	cmp	r0, #1
 8001efe:	d006      	beq.n	8001f0e <DataStageIn+0x7e>
    }
    else 
    {
      /* No more data to send so STALL the TX Status*/
      ControlState = WAIT_STATUS_OUT;
      vSetEPTxStatus(EP_TX_STALL);
 8001f00:	4910      	ldr	r1, [pc, #64]	; (8001f44 <DataStageIn+0xb4>)
 8001f02:	2710      	movs	r7, #16
 8001f04:	800f      	strh	r7, [r1, #0]
 8001f06:	2707      	movs	r7, #7
  vSetEPTxStatus(EP_TX_VALID);

  USB_StatusOut();/* Expect the host to abort the data IN stage */

Expect_Status_Out:
  pInformation->ControlState = ControlState;
 8001f08:	7227      	strb	r7, [r4, #8]
 8001f0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
  {
    if(Data_Mul_MaxPacketSize == TRUE)
    {
      /* No more data to send and empty packet */
      Send0LengthData();
 8001f0e:	f645 4050 	movw	r0, #23632	; 0x5c50
 8001f12:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8001f16:	6800      	ldr	r0, [r0, #0]
 8001f18:	f243 0102 	movw	r1, #12290	; 0x3002
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
}
 8001f1c:	b280      	uxth	r0, r0
  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
  {
    if(Data_Mul_MaxPacketSize == TRUE)
    {
      /* No more data to send and empty packet */
      Send0LengthData();
 8001f1e:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8001f22:	1841      	adds	r1, r0, r1
 8001f24:	0048      	lsls	r0, r1, #1
 8001f26:	4907      	ldr	r1, [pc, #28]	; (8001f44 <DataStageIn+0xb4>)
 8001f28:	6003      	str	r3, [r0, #0]
 8001f2a:	2030      	movs	r0, #48	; 0x30
 8001f2c:	8008      	strh	r0, [r1, #0]
      ControlState = LAST_IN_DATA;
      Data_Mul_MaxPacketSize = FALSE;
 8001f2e:	7013      	strb	r3, [r2, #0]
 8001f30:	e7df      	b.n	8001ef2 <DataStageIn+0x62>
 8001f32:	bf00      	nop
 8001f34:	20001354 	.word	0x20001354
 8001f38:	08002a15 	.word	0x08002a15
 8001f3c:	080027a5 	.word	0x080027a5
 8001f40:	08002a55 	.word	0x08002a55
 8001f44:	2000135c 	.word	0x2000135c
 8001f48:	2000135a 	.word	0x2000135a
 8001f4c:	200002dc 	.word	0x200002dc

08001f50 <Standard_SetConfiguration>:
* Output         : None.
* Return         : Return USB_SUCCESS, if the request is performed.
*                  Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetConfiguration(void)
{
 8001f50:	b510      	push	{r4, lr}

  if ((pInformation->USBwValue0 <=
 8001f52:	4b0b      	ldr	r3, [pc, #44]	; (8001f80 <Standard_SetConfiguration+0x30>)
 8001f54:	4a0b      	ldr	r2, [pc, #44]	; (8001f84 <Standard_SetConfiguration+0x34>)
 8001f56:	6818      	ldr	r0, [r3, #0]
 8001f58:	7851      	ldrb	r1, [r2, #1]
 8001f5a:	78c3      	ldrb	r3, [r0, #3]
 8001f5c:	4299      	cmp	r1, r3
 8001f5e:	d201      	bcs.n	8001f64 <Standard_SetConfiguration+0x14>
    pUser_Standard_Requests->User_SetConfiguration();
    return USB_SUCCESS;
  }
  else
  {
    return USB_UNSUPPORT;
 8001f60:	2002      	movs	r0, #2
  }
}
 8001f62:	bd10      	pop	{r4, pc}
*******************************************************************************/
RESULT Standard_SetConfiguration(void)
{

  if ((pInformation->USBwValue0 <=
      Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
 8001f64:	7882      	ldrb	r2, [r0, #2]
 8001f66:	2a00      	cmp	r2, #0
 8001f68:	d1fa      	bne.n	8001f60 <Standard_SetConfiguration+0x10>
      && (pInformation->USBwIndex == 0)) /*call Back usb spec 2.0*/
 8001f6a:	8884      	ldrh	r4, [r0, #4]
 8001f6c:	2c00      	cmp	r4, #0
 8001f6e:	d1f7      	bne.n	8001f60 <Standard_SetConfiguration+0x10>
  {
    pInformation->Current_Configuration = pInformation->USBwValue0;
 8001f70:	7283      	strb	r3, [r0, #10]
    pUser_Standard_Requests->User_SetConfiguration();
 8001f72:	4805      	ldr	r0, [pc, #20]	; (8001f88 <Standard_SetConfiguration+0x38>)
 8001f74:	6801      	ldr	r1, [r0, #0]
 8001f76:	684b      	ldr	r3, [r1, #4]
 8001f78:	4798      	blx	r3
    return USB_SUCCESS;
 8001f7a:	4620      	mov	r0, r4
 8001f7c:	bd10      	pop	{r4, pc}
 8001f7e:	bf00      	nop
 8001f80:	20001354 	.word	0x20001354
 8001f84:	200000e0 	.word	0x200000e0
 8001f88:	20001350 	.word	0x20001350

08001f8c <Standard_SetInterface>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetInterface(void)
{
 8001f8c:	b538      	push	{r3, r4, r5, lr}
  RESULT Re;
  /*Test if the specified Interface and Alternate Setting are supported by
    the application Firmware*/
  Re = (*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, pInformation->USBwValue0);
 8001f8e:	4a10      	ldr	r2, [pc, #64]	; (8001fd0 <Standard_SetInterface+0x44>)
 8001f90:	4c10      	ldr	r4, [pc, #64]	; (8001fd4 <Standard_SetInterface+0x48>)
 8001f92:	6811      	ldr	r1, [r2, #0]
 8001f94:	6823      	ldr	r3, [r4, #0]
 8001f96:	698a      	ldr	r2, [r1, #24]
 8001f98:	7958      	ldrb	r0, [r3, #5]
 8001f9a:	78d9      	ldrb	r1, [r3, #3]
 8001f9c:	4790      	blx	r2

  if (pInformation->Current_Configuration != 0)
 8001f9e:	6823      	ldr	r3, [r4, #0]
 8001fa0:	7a99      	ldrb	r1, [r3, #10]
 8001fa2:	b909      	cbnz	r1, 8001fa8 <Standard_SetInterface+0x1c>
      return USB_SUCCESS;
    }

  }

  return USB_UNSUPPORT;
 8001fa4:	2002      	movs	r0, #2
}
 8001fa6:	bd38      	pop	{r3, r4, r5, pc}
    the application Firmware*/
  Re = (*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, pInformation->USBwValue0);

  if (pInformation->Current_Configuration != 0)
  {
    if ((Re != USB_SUCCESS) || (pInformation->USBwIndex1 != 0)
 8001fa8:	2800      	cmp	r0, #0
 8001faa:	d1fb      	bne.n	8001fa4 <Standard_SetInterface+0x18>
 8001fac:	7918      	ldrb	r0, [r3, #4]
 8001fae:	2800      	cmp	r0, #0
 8001fb0:	d1f8      	bne.n	8001fa4 <Standard_SetInterface+0x18>
        || (pInformation->USBwValue1 != 0))
 8001fb2:	789d      	ldrb	r5, [r3, #2]
 8001fb4:	2d00      	cmp	r5, #0
 8001fb6:	d1f5      	bne.n	8001fa4 <Standard_SetInterface+0x18>
    {
      return  USB_UNSUPPORT;
    }
    else if (Re == USB_SUCCESS)
    {
      pUser_Standard_Requests->User_SetInterface();
 8001fb8:	4a07      	ldr	r2, [pc, #28]	; (8001fd8 <Standard_SetInterface+0x4c>)
 8001fba:	6813      	ldr	r3, [r2, #0]
 8001fbc:	68d9      	ldr	r1, [r3, #12]
 8001fbe:	4788      	blx	r1
      pInformation->Current_Interface = pInformation->USBwIndex0;
 8001fc0:	6823      	ldr	r3, [r4, #0]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
      return USB_SUCCESS;
 8001fc2:	4628      	mov	r0, r5
      return  USB_UNSUPPORT;
    }
    else if (Re == USB_SUCCESS)
    {
      pUser_Standard_Requests->User_SetInterface();
      pInformation->Current_Interface = pInformation->USBwIndex0;
 8001fc4:	7959      	ldrb	r1, [r3, #5]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
 8001fc6:	78da      	ldrb	r2, [r3, #3]
      return  USB_UNSUPPORT;
    }
    else if (Re == USB_SUCCESS)
    {
      pUser_Standard_Requests->User_SetInterface();
      pInformation->Current_Interface = pInformation->USBwIndex0;
 8001fc8:	72d9      	strb	r1, [r3, #11]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
 8001fca:	731a      	strb	r2, [r3, #12]
      return USB_SUCCESS;
 8001fcc:	bd38      	pop	{r3, r4, r5, pc}
 8001fce:	bf00      	nop
 8001fd0:	2000132c 	.word	0x2000132c
 8001fd4:	20001354 	.word	0x20001354
 8001fd8:	20001350 	.word	0x20001350

08001fdc <Standard_ClearFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_ClearFeature(void)
{
 8001fdc:	b538      	push	{r3, r4, r5, lr}
  uint32_t     Type_Rec = Type_Recipient;
 8001fde:	4b35      	ldr	r3, [pc, #212]	; (80020b4 <Standard_ClearFeature+0xd8>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	7818      	ldrb	r0, [r3, #0]
  uint32_t     Status;


  if (Type_Rec == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8001fe4:	f010 007f 	ands.w	r0, r0, #127	; 0x7f
 8001fe8:	d003      	beq.n	8001ff2 <Standard_ClearFeature+0x16>
  {/*Device Clear Feature*/
    ClrBit(pInformation->Current_Feature, 5);
    return USB_SUCCESS;
  }
  else if (Type_Rec == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8001fea:	2802      	cmp	r0, #2
 8001fec:	d006      	beq.n	8001ffc <Standard_ClearFeature+0x20>
    }
    pUser_Standard_Requests->User_ClearFeature();
    return USB_SUCCESS;
  }

  return USB_UNSUPPORT;
 8001fee:	2002      	movs	r0, #2
}
 8001ff0:	bd38      	pop	{r3, r4, r5, pc}
  uint32_t     Status;


  if (Type_Rec == (STANDARD_REQUEST | DEVICE_RECIPIENT))
  {/*Device Clear Feature*/
    ClrBit(pInformation->Current_Feature, 5);
 8001ff2:	7a59      	ldrb	r1, [r3, #9]
 8001ff4:	f021 0220 	bic.w	r2, r1, #32
 8001ff8:	725a      	strb	r2, [r3, #9]
    return USB_SUCCESS;
 8001ffa:	bd38      	pop	{r3, r4, r5, pc}
    DEVICE* pDev;
    uint32_t Related_Endpoint;
    uint32_t wIndex0;
    uint32_t rEP;

    if ((pInformation->USBwValue != ENDPOINT_STALL)
 8001ffc:	885a      	ldrh	r2, [r3, #2]
 8001ffe:	2a00      	cmp	r2, #0
 8002000:	d1f6      	bne.n	8001ff0 <Standard_ClearFeature+0x14>
        || (pInformation->USBwIndex1 != 0))
 8002002:	7919      	ldrb	r1, [r3, #4]
 8002004:	2900      	cmp	r1, #0
 8002006:	d1f3      	bne.n	8001ff0 <Standard_ClearFeature+0x14>
    {
      return USB_UNSUPPORT;
    }

    pDev = &Device_Table;
    wIndex0 = pInformation->USBwIndex0;
 8002008:	795a      	ldrb	r2, [r3, #5]
    rEP = wIndex0 & ~0x80;
 800200a:	f022 0080 	bic.w	r0, r2, #128	; 0x80

    if (ValBit(pInformation->USBwIndex0, 7))
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 800200e:	0081      	lsls	r1, r0, #2
 8002010:	f101 4480 	add.w	r4, r1, #1073741824	; 0x40000000
    pDev = &Device_Table;
    wIndex0 = pInformation->USBwIndex0;
    rEP = wIndex0 & ~0x80;
    Related_Endpoint = ENDP0 + rEP;

    if (ValBit(pInformation->USBwIndex0, 7))
 8002014:	0615      	lsls	r5, r2, #24
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 8002016:	f504 44b8 	add.w	r4, r4, #23552	; 0x5c00
    }
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
 800201a:	bf56      	itet	pl
 800201c:	6824      	ldrpl	r4, [r4, #0]

    if (ValBit(pInformation->USBwIndex0, 7))
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 800201e:	6825      	ldrmi	r5, [r4, #0]
    }
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
 8002020:	f404 5540 	andpl.w	r5, r4, #12288	; 0x3000
    }

    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 8002024:	4c24      	ldr	r4, [pc, #144]	; (80020b8 <Standard_ClearFeature+0xdc>)

    if (ValBit(pInformation->USBwIndex0, 7))
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 8002026:	bf48      	it	mi
 8002028:	f005 0530 	andmi.w	r5, r5, #48	; 0x30
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
    }

    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 800202c:	7824      	ldrb	r4, [r4, #0]
 800202e:	42a0      	cmp	r0, r4
 8002030:	d2dd      	bcs.n	8001fee <Standard_ClearFeature+0x12>
 8002032:	2d00      	cmp	r5, #0
 8002034:	d0db      	beq.n	8001fee <Standard_ClearFeature+0x12>
        || (pInformation->Current_Configuration == 0))
 8002036:	7a9b      	ldrb	r3, [r3, #10]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d0d8      	beq.n	8001fee <Standard_ClearFeature+0x12>
    {
      return USB_UNSUPPORT;
    }


    if (wIndex0 & 0x80)
 800203c:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8002040:	b2d3      	uxtb	r3, r2
 8002042:	b173      	cbz	r3, 8002062 <Standard_ClearFeature+0x86>
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint ))
 8002044:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8002048:	f501 42b8 	add.w	r2, r1, #23552	; 0x5c00
 800204c:	6813      	ldr	r3, [r2, #0]
 800204e:	f003 0130 	and.w	r1, r3, #48	; 0x30
 8002052:	2910      	cmp	r1, #16
 8002054:	d021      	beq.n	800209a <Standard_ClearFeature+0xbe>
          ClearDTOG_RX(Related_Endpoint);
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
        }
      }
    }
    pUser_Standard_Requests->User_ClearFeature();
 8002056:	4819      	ldr	r0, [pc, #100]	; (80020bc <Standard_ClearFeature+0xe0>)
 8002058:	6801      	ldr	r1, [r0, #0]
 800205a:	694a      	ldr	r2, [r1, #20]
 800205c:	4790      	blx	r2
    return USB_SUCCESS;
 800205e:	2000      	movs	r0, #0
 8002060:	bd38      	pop	{r3, r4, r5, pc}
      }
    }
    else
    {
      /* OUT endpoint */
      if (_GetRxStallStatus(Related_Endpoint))
 8002062:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8002066:	f501 44b8 	add.w	r4, r1, #23552	; 0x5c00
 800206a:	6822      	ldr	r2, [r4, #0]
 800206c:	f402 5340 	and.w	r3, r2, #12288	; 0x3000
 8002070:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002074:	d1ef      	bne.n	8002056 <Standard_ClearFeature+0x7a>
      {
        if (Related_Endpoint == ENDP0)
 8002076:	b9c8      	cbnz	r0, 80020ac <Standard_ClearFeature+0xd0>
        {
          /* After clear the STALL, enable the default endpoint receiver */
          SetEPRxCount(Related_Endpoint, Device_Property.MaxPacketSize);
 8002078:	4a11      	ldr	r2, [pc, #68]	; (80020c0 <Standard_ClearFeature+0xe4>)
 800207a:	4b12      	ldr	r3, [pc, #72]	; (80020c4 <Standard_ClearFeature+0xe8>)
 800207c:	f892 102c 	ldrb.w	r1, [r2, #44]	; 0x2c
 8002080:	4798      	blx	r3
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
        }
        else
        {
          ClearDTOG_RX(Related_Endpoint);
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
 8002082:	6820      	ldr	r0, [r4, #0]
 8002084:	f64b 718f 	movw	r1, #49039	; 0xbf8f
 8002088:	4001      	ands	r1, r0
 800208a:	f481 5240 	eor.w	r2, r1, #12288	; 0x3000
 800208e:	f442 4300 	orr.w	r3, r2, #32768	; 0x8000
 8002092:	f043 0080 	orr.w	r0, r3, #128	; 0x80
 8002096:	6020      	str	r0, [r4, #0]
 8002098:	e7dd      	b.n	8002056 <Standard_ClearFeature+0x7a>
    if (wIndex0 & 0x80)
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint ))
      {
        ClearDTOG_TX(Related_Endpoint);
 800209a:	b2c4      	uxtb	r4, r0
 800209c:	4620      	mov	r0, r4
 800209e:	4a0a      	ldr	r2, [pc, #40]	; (80020c8 <Standard_ClearFeature+0xec>)
 80020a0:	4790      	blx	r2
        SetEPTxStatus(Related_Endpoint, EP_TX_VALID);
 80020a2:	4620      	mov	r0, r4
 80020a4:	2130      	movs	r1, #48	; 0x30
 80020a6:	4b09      	ldr	r3, [pc, #36]	; (80020cc <Standard_ClearFeature+0xf0>)
 80020a8:	4798      	blx	r3
 80020aa:	e7d4      	b.n	8002056 <Standard_ClearFeature+0x7a>
          SetEPRxCount(Related_Endpoint, Device_Property.MaxPacketSize);
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
        }
        else
        {
          ClearDTOG_RX(Related_Endpoint);
 80020ac:	4908      	ldr	r1, [pc, #32]	; (80020d0 <Standard_ClearFeature+0xf4>)
 80020ae:	4788      	blx	r1
 80020b0:	e7e7      	b.n	8002082 <Standard_ClearFeature+0xa6>
 80020b2:	bf00      	nop
 80020b4:	20001354 	.word	0x20001354
 80020b8:	200000e0 	.word	0x200000e0
 80020bc:	20001350 	.word	0x20001350
 80020c0:	2000005c 	.word	0x2000005c
 80020c4:	08002a75 	.word	0x08002a75
 80020c8:	080029a5 	.word	0x080029a5
 80020cc:	08002899 	.word	0x08002899
 80020d0:	08002981 	.word	0x08002981

080020d4 <Standard_SetEndPointFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetEndPointFeature(void)
{
 80020d4:	b538      	push	{r3, r4, r5, lr}
  uint32_t    wIndex0;
  uint32_t    Related_Endpoint;
  uint32_t    rEP;
  uint32_t    Status;

  wIndex0 = pInformation->USBwIndex0;
 80020d6:	4b22      	ldr	r3, [pc, #136]	; (8002160 <Standard_SetEndPointFeature+0x8c>)
 80020d8:	6819      	ldr	r1, [r3, #0]
 80020da:	794b      	ldrb	r3, [r1, #5]
  rEP = wIndex0 & ~0x80;
 80020dc:	f023 0280 	bic.w	r2, r3, #128	; 0x80

  if (ValBit(pInformation->USBwIndex0, 7))
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 80020e0:	0090      	lsls	r0, r2, #2
 80020e2:	f100 4480 	add.w	r4, r0, #1073741824	; 0x40000000

  wIndex0 = pInformation->USBwIndex0;
  rEP = wIndex0 & ~0x80;
  Related_Endpoint = ENDP0 + rEP;

  if (ValBit(pInformation->USBwIndex0, 7))
 80020e6:	061d      	lsls	r5, r3, #24
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 80020e8:	f504 44b8 	add.w	r4, r4, #23552	; 0x5c00
  }
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
 80020ec:	bf56      	itet	pl
 80020ee:	6824      	ldrpl	r4, [r4, #0]

  if (ValBit(pInformation->USBwIndex0, 7))
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 80020f0:	6825      	ldrmi	r5, [r4, #0]
  }
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
 80020f2:	f404 5540 	andpl.w	r5, r4, #12288	; 0x3000
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
 80020f6:	4c1b      	ldr	r4, [pc, #108]	; (8002164 <Standard_SetEndPointFeature+0x90>)

  if (ValBit(pInformation->USBwIndex0, 7))
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 80020f8:	bf48      	it	mi
 80020fa:	f005 0530 	andmi.w	r5, r5, #48	; 0x30
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
 80020fe:	7824      	ldrb	r4, [r4, #0]
 8002100:	42a2      	cmp	r2, r4
 8002102:	d301      	bcc.n	8002108 <Standard_SetEndPointFeature+0x34>
      || pInformation->USBwValue != 0 || Status == 0
      || pInformation->Current_Configuration == 0)
  {
    return USB_UNSUPPORT;
 8002104:	2002      	movs	r0, #2
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
    }
  }
  pUser_Standard_Requests->User_SetEndPointFeature();
  return USB_SUCCESS;
}
 8002106:	bd38      	pop	{r3, r4, r5, pc}
  {
    Status = _GetEPRxStatus(Related_Endpoint);
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
      || pInformation->USBwValue != 0 || Status == 0
 8002108:	884a      	ldrh	r2, [r1, #2]
 800210a:	2a00      	cmp	r2, #0
 800210c:	d1fa      	bne.n	8002104 <Standard_SetEndPointFeature+0x30>
 800210e:	2d00      	cmp	r5, #0
 8002110:	d0f8      	beq.n	8002104 <Standard_SetEndPointFeature+0x30>
      || pInformation->Current_Configuration == 0)
 8002112:	7a89      	ldrb	r1, [r1, #10]
 8002114:	2900      	cmp	r1, #0
 8002116:	d0f5      	beq.n	8002104 <Standard_SetEndPointFeature+0x30>
  {
    return USB_UNSUPPORT;
  }
  else
  {
    if (wIndex0 & 0x80)
 8002118:	f003 0380 	and.w	r3, r3, #128	; 0x80
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 800211c:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8002120:	f500 42b8 	add.w	r2, r0, #23552	; 0x5c00
  {
    return USB_UNSUPPORT;
  }
  else
  {
    if (wIndex0 & 0x80)
 8002124:	b2db      	uxtb	r3, r3
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 8002126:	6811      	ldr	r1, [r2, #0]
  {
    return USB_UNSUPPORT;
  }
  else
  {
    if (wIndex0 & 0x80)
 8002128:	b17b      	cbz	r3, 800214a <Standard_SetEndPointFeature+0x76>
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 800212a:	f648 70bf 	movw	r0, #36799	; 0x8fbf
 800212e:	4008      	ands	r0, r1
 8002130:	f080 0110 	eor.w	r1, r0, #16
 8002134:	f441 4300 	orr.w	r3, r1, #32768	; 0x8000
 8002138:	f043 0080 	orr.w	r0, r3, #128	; 0x80
 800213c:	6010      	str	r0, [r2, #0]
    {
      /* OUT endpoint */
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
    }
  }
  pUser_Standard_Requests->User_SetEndPointFeature();
 800213e:	4a0a      	ldr	r2, [pc, #40]	; (8002168 <Standard_SetEndPointFeature+0x94>)
 8002140:	6811      	ldr	r1, [r2, #0]
 8002142:	698b      	ldr	r3, [r1, #24]
 8002144:	4798      	blx	r3
  return USB_SUCCESS;
 8002146:	2000      	movs	r0, #0
 8002148:	bd38      	pop	{r3, r4, r5, pc}
    }

    else
    {
      /* OUT endpoint */
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
 800214a:	f64b 738f 	movw	r3, #49039	; 0xbf8f
 800214e:	400b      	ands	r3, r1
 8002150:	f483 5080 	eor.w	r0, r3, #4096	; 0x1000
 8002154:	f440 4100 	orr.w	r1, r0, #32768	; 0x8000
 8002158:	f041 0380 	orr.w	r3, r1, #128	; 0x80
 800215c:	6013      	str	r3, [r2, #0]
 800215e:	e7ee      	b.n	800213e <Standard_SetEndPointFeature+0x6a>
 8002160:	20001354 	.word	0x20001354
 8002164:	200000e0 	.word	0x200000e0
 8002168:	20001350 	.word	0x20001350

0800216c <Standard_GetDescriptorData>:
*******************************************************************************/
uint8_t *Standard_GetDescriptorData(uint16_t Length, ONE_DESCRIPTOR *pDesc)
{
  uint32_t  wOffset;

  wOffset = pInformation->Ctrl_Info.Usb_wOffset;
 800216c:	4b05      	ldr	r3, [pc, #20]	; (8002184 <Standard_GetDescriptorData+0x18>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	8a5a      	ldrh	r2, [r3, #18]
  if (Length == 0)
 8002172:	b110      	cbz	r0, 800217a <Standard_GetDescriptorData+0xe>
  {
    pInformation->Ctrl_Info.Usb_wLength = pDesc->Descriptor_Size - wOffset;
    return 0;
  }

  return pDesc->Descriptor + wOffset;
 8002174:	6808      	ldr	r0, [r1, #0]
 8002176:	1880      	adds	r0, r0, r2
}
 8002178:	4770      	bx	lr
  uint32_t  wOffset;

  wOffset = pInformation->Ctrl_Info.Usb_wOffset;
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength = pDesc->Descriptor_Size - wOffset;
 800217a:	8889      	ldrh	r1, [r1, #4]
 800217c:	1a8a      	subs	r2, r1, r2
 800217e:	821a      	strh	r2, [r3, #16]
    return 0;
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	20001354 	.word	0x20001354

08002188 <Post0_Process>:
* Output         : None.
* Return         : - 0 if the control State is in PAUSE
*                  - 1 if not.
*******************************************************************************/
uint8_t Post0_Process(void)
{
 8002188:	b508      	push	{r3, lr}
   
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 800218a:	4b0c      	ldr	r3, [pc, #48]	; (80021bc <Post0_Process+0x34>)
 800218c:	2000      	movs	r0, #0
 800218e:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
 8002192:	4a0b      	ldr	r2, [pc, #44]	; (80021c0 <Post0_Process+0x38>)
 8002194:	4790      	blx	r2

  if (pInformation->ControlState == STALLED)
 8002196:	480b      	ldr	r0, [pc, #44]	; (80021c4 <Post0_Process+0x3c>)
 8002198:	6801      	ldr	r1, [r0, #0]
 800219a:	7a08      	ldrb	r0, [r1, #8]
 800219c:	2808      	cmp	r0, #8
 800219e:	d106      	bne.n	80021ae <Post0_Process+0x26>
  {
    vSetEPRxStatus(EP_RX_STALL);
 80021a0:	4b09      	ldr	r3, [pc, #36]	; (80021c8 <Post0_Process+0x40>)
 80021a2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80021a6:	801a      	strh	r2, [r3, #0]
    vSetEPTxStatus(EP_TX_STALL);
 80021a8:	4a08      	ldr	r2, [pc, #32]	; (80021cc <Post0_Process+0x44>)
 80021aa:	2110      	movs	r1, #16
 80021ac:	8011      	strh	r1, [r2, #0]
  }

  return (pInformation->ControlState == PAUSE);
}
 80021ae:	f1b0 0c09 	subs.w	ip, r0, #9
 80021b2:	f1dc 0000 	rsbs	r0, ip, #0
 80021b6:	eb50 000c 	adcs.w	r0, r0, ip
 80021ba:	bd08      	pop	{r3, pc}
 80021bc:	2000005c 	.word	0x2000005c
 80021c0:	08002a75 	.word	0x08002a75
 80021c4:	20001354 	.word	0x20001354
 80021c8:	2000135a 	.word	0x2000135a
 80021cc:	2000135c 	.word	0x2000135c

080021d0 <Out0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t Out0_Process(void)
{
 80021d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t ControlState = pInformation->ControlState;
 80021d2:	4d33      	ldr	r5, [pc, #204]	; (80022a0 <Out0_Process+0xd0>)
 80021d4:	682c      	ldr	r4, [r5, #0]
 80021d6:	7a23      	ldrb	r3, [r4, #8]

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d007      	beq.n	80021ec <Out0_Process+0x1c>
 80021dc:	2b04      	cmp	r3, #4
 80021de:	d005      	beq.n	80021ec <Out0_Process+0x1c>
  {
    /* host aborts the transfer before finish */
    ControlState = STALLED;
  }
  else if ((ControlState == OUT_DATA) || (ControlState == LAST_OUT_DATA))
 80021e0:	2b03      	cmp	r3, #3
 80021e2:	d008      	beq.n	80021f6 <Out0_Process+0x26>
 80021e4:	2b05      	cmp	r3, #5
 80021e6:	d006      	beq.n	80021f6 <Out0_Process+0x26>
  {
    DataStageOut();
    ControlState = pInformation->ControlState; /* may be changed outside the function */
  }

  else if (ControlState == WAIT_STATUS_OUT)
 80021e8:	2b07      	cmp	r3, #7
 80021ea:	d00d      	beq.n	8002208 <Out0_Process+0x38>
 80021ec:	2208      	movs	r2, #8
  else
  {
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;
 80021ee:	7222      	strb	r2, [r4, #8]

  return Post0_Process();
 80021f0:	4b2c      	ldr	r3, [pc, #176]	; (80022a4 <Out0_Process+0xd4>)
 80021f2:	4798      	blx	r3
 80021f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
  uint32_t save_rLength;

  save_rLength = pEPinfo->Usb_rLength;

  if (pEPinfo->CopyData && save_rLength)
 80021f6:	69a1      	ldr	r1, [r4, #24]
void DataStageOut(void)
{
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
  uint32_t save_rLength;

  save_rLength = pEPinfo->Usb_rLength;
 80021f8:	8a20      	ldrh	r0, [r4, #16]

  if (pEPinfo->CopyData && save_rLength)
 80021fa:	b311      	cbz	r1, 8002242 <Out0_Process+0x72>
 80021fc:	b958      	cbnz	r0, 8002216 <Out0_Process+0x46>
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
    SetEPTxCount(ENDP0, 0);
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 80021fe:	8aa4      	ldrh	r4, [r4, #20]
 8002200:	2c00      	cmp	r4, #0
 8002202:	d045      	beq.n	8002290 <Out0_Process+0xc0>
 8002204:	4a28      	ldr	r2, [pc, #160]	; (80022a8 <Out0_Process+0xd8>)
 8002206:	e02e      	b.n	8002266 <Out0_Process+0x96>
    ControlState = pInformation->ControlState; /* may be changed outside the function */
  }

  else if (ControlState == WAIT_STATUS_OUT)
  {
    (*pProperty->Process_Status_OUT)();
 8002208:	4828      	ldr	r0, [pc, #160]	; (80022ac <Out0_Process+0xdc>)
 800220a:	6801      	ldr	r1, [r0, #0]
 800220c:	68ca      	ldr	r2, [r1, #12]
 800220e:	4790      	blx	r2
 8002210:	682c      	ldr	r4, [r5, #0]
 8002212:	2208      	movs	r2, #8
 8002214:	e7eb      	b.n	80021ee <Out0_Process+0x1e>
  if (pEPinfo->CopyData && save_rLength)
  {
    uint8_t *Buffer;
    uint32_t Length;

    Length = pEPinfo->PacketSize;
 8002216:	8aa6      	ldrh	r6, [r4, #20]
    if (Length > save_rLength)
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
 8002218:	4286      	cmp	r6, r0
 800221a:	bf28      	it	cs
 800221c:	4606      	movcs	r6, r0
 800221e:	4630      	mov	r0, r6
 8002220:	4788      	blx	r1
    pEPinfo->Usb_rLength -= Length;
    pEPinfo->Usb_rOffset += Length;
 8002222:	8a63      	ldrh	r3, [r4, #18]
    if (Length > save_rLength)
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
 8002224:	4607      	mov	r7, r0
    pEPinfo->Usb_rLength -= Length;
 8002226:	8a20      	ldrh	r0, [r4, #16]
    pEPinfo->Usb_rOffset += Length;
 8002228:	18f1      	adds	r1, r6, r3
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
    pEPinfo->Usb_rLength -= Length;
 800222a:	1b82      	subs	r2, r0, r6
 800222c:	8222      	strh	r2, [r4, #16]
    pEPinfo->Usb_rOffset += Length;
 800222e:	8261      	strh	r1, [r4, #18]
    PMAToUserBufferCopy(Buffer, GetEPRxAddr(ENDP0), Length);
 8002230:	4b1f      	ldr	r3, [pc, #124]	; (80022b0 <Out0_Process+0xe0>)
 8002232:	2000      	movs	r0, #0
 8002234:	4798      	blx	r3
 8002236:	4632      	mov	r2, r6
 8002238:	4601      	mov	r1, r0
 800223a:	4b1e      	ldr	r3, [pc, #120]	; (80022b4 <Out0_Process+0xe4>)
 800223c:	4638      	mov	r0, r7
 800223e:	4798      	blx	r3
 8002240:	8a20      	ldrh	r0, [r4, #16]

  }

  if (pEPinfo->Usb_rLength != 0)
 8002242:	2800      	cmp	r0, #0
 8002244:	d0db      	beq.n	80021fe <Out0_Process+0x2e>
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 8002246:	4b1c      	ldr	r3, [pc, #112]	; (80022b8 <Out0_Process+0xe8>)
    SetEPTxCount(ENDP0, 0);
 8002248:	2000      	movs	r0, #0

  }

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 800224a:	f44f 5240 	mov.w	r2, #12288	; 0x3000
    SetEPTxCount(ENDP0, 0);
 800224e:	4601      	mov	r1, r0

  }

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 8002250:	801a      	strh	r2, [r3, #0]
    SetEPTxCount(ENDP0, 0);
 8002252:	4a1a      	ldr	r2, [pc, #104]	; (80022bc <Out0_Process+0xec>)
 8002254:	4790      	blx	r2
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 8002256:	8a23      	ldrh	r3, [r4, #16]
 8002258:	8aa1      	ldrh	r1, [r4, #20]

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
    SetEPTxCount(ENDP0, 0);
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
 800225a:	4a13      	ldr	r2, [pc, #76]	; (80022a8 <Out0_Process+0xd8>)
 800225c:	2030      	movs	r0, #48	; 0x30
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 800225e:	4299      	cmp	r1, r3

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
    SetEPTxCount(ENDP0, 0);
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
 8002260:	8010      	strh	r0, [r2, #0]
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 8002262:	d915      	bls.n	8002290 <Out0_Process+0xc0>
  {
    pInformation->ControlState = OUT_DATA;
  }
  else
  {
    if (pEPinfo->Usb_rLength > 0)
 8002264:	b9c3      	cbnz	r3, 8002298 <Out0_Process+0xc8>
    {
      pInformation->ControlState = LAST_OUT_DATA;
    }
    else if (pEPinfo->Usb_rLength == 0)
    {
      pInformation->ControlState = WAIT_STATUS_IN;
 8002266:	682c      	ldr	r4, [r5, #0]
 8002268:	2106      	movs	r1, #6
      USB_StatusIn();
 800226a:	f645 4350 	movw	r3, #23632	; 0x5c50
    {
      pInformation->ControlState = LAST_OUT_DATA;
    }
    else if (pEPinfo->Usb_rLength == 0)
    {
      pInformation->ControlState = WAIT_STATUS_IN;
 800226e:	7221      	strb	r1, [r4, #8]
      USB_StatusIn();
 8002270:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002274:	6818      	ldr	r0, [r3, #0]
 8002276:	f243 0302 	movw	r3, #12290	; 0x3002
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
}
 800227a:	b281      	uxth	r1, r0
      pInformation->ControlState = LAST_OUT_DATA;
    }
    else if (pEPinfo->Usb_rLength == 0)
    {
      pInformation->ControlState = WAIT_STATUS_IN;
      USB_StatusIn();
 800227c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002280:	18c8      	adds	r0, r1, r3
 8002282:	0043      	lsls	r3, r0, #1
 8002284:	2100      	movs	r1, #0
 8002286:	6019      	str	r1, [r3, #0]
 8002288:	2030      	movs	r0, #48	; 0x30
 800228a:	8010      	strh	r0, [r2, #0]
 800228c:	7a22      	ldrb	r2, [r4, #8]
    ControlState = STALLED;
  }
  else if ((ControlState == OUT_DATA) || (ControlState == LAST_OUT_DATA))
  {
    DataStageOut();
    ControlState = pInformation->ControlState; /* may be changed outside the function */
 800228e:	e7ae      	b.n	80021ee <Out0_Process+0x1e>
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
  {
    pInformation->ControlState = OUT_DATA;
 8002290:	682c      	ldr	r4, [r5, #0]
 8002292:	2203      	movs	r2, #3
 8002294:	7222      	strb	r2, [r4, #8]
 8002296:	e7aa      	b.n	80021ee <Out0_Process+0x1e>
  }
  else
  {
    if (pEPinfo->Usb_rLength > 0)
    {
      pInformation->ControlState = LAST_OUT_DATA;
 8002298:	682c      	ldr	r4, [r5, #0]
 800229a:	2205      	movs	r2, #5
 800229c:	7222      	strb	r2, [r4, #8]
 800229e:	e7a6      	b.n	80021ee <Out0_Process+0x1e>
 80022a0:	20001354 	.word	0x20001354
 80022a4:	08002189 	.word	0x08002189
 80022a8:	2000135c 	.word	0x2000135c
 80022ac:	2000132c 	.word	0x2000132c
 80022b0:	08002a35 	.word	0x08002a35
 80022b4:	0800281d 	.word	0x0800281d
 80022b8:	2000135a 	.word	0x2000135a
 80022bc:	08002a55 	.word	0x08002a55

080022c0 <Setup0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t Setup0_Process(void)
{
 80022c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 80022c2:	f645 4350 	movw	r3, #23632	; 0x5c50

  if (pInformation->ControlState != PAUSE)
 80022c6:	4d9e      	ldr	r5, [pc, #632]	; (8002540 <Setup0_Process+0x280>)
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 80022c8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80022cc:	681a      	ldr	r2, [r3, #0]

  if (pInformation->ControlState != PAUSE)
 80022ce:	682c      	ldr	r4, [r5, #0]
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 80022d0:	f243 0004 	movw	r0, #12292	; 0x3004
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
}
 80022d4:	b291      	uxth	r1, r2
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 80022d6:	f2c2 0000 	movt	r0, #8192	; 0x2000

  if (pInformation->ControlState != PAUSE)
 80022da:	7a22      	ldrb	r2, [r4, #8]
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 80022dc:	180e      	adds	r6, r1, r0
 80022de:	0073      	lsls	r3, r6, #1

  if (pInformation->ControlState != PAUSE)
 80022e0:	2a09      	cmp	r2, #9
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t Setup0_Process(void)
{
 80022e2:	b083      	sub	sp, #12
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 80022e4:	681e      	ldr	r6, [r3, #0]

  if (pInformation->ControlState != PAUSE)
 80022e6:	d044      	beq.n	8002372 <Setup0_Process+0xb2>
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
}
 80022e8:	b2b7      	uxth	r7, r6
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 80022ea:	0078      	lsls	r0, r7, #1
 80022ec:	f100 4180 	add.w	r1, r0, #1073741824	; 0x40000000
 80022f0:	f501 46c0 	add.w	r6, r1, #24576	; 0x6000

  if (pInformation->ControlState != PAUSE)
  {
    pInformation->USBbmRequestType = *pBuf.b++; /* bmRequestType */
 80022f4:	7832      	ldrb	r2, [r6, #0]
    pInformation->USBbRequest = *pBuf.b++; /* bRequest */
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwValue = ByteSwap(*pBuf.w++); /* wValue */
 80022f6:	4f93      	ldr	r7, [pc, #588]	; (8002544 <Setup0_Process+0x284>)
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */

  if (pInformation->ControlState != PAUSE)
  {
    pInformation->USBbmRequestType = *pBuf.b++; /* bmRequestType */
 80022f8:	7022      	strb	r2, [r4, #0]
    pInformation->USBbRequest = *pBuf.b++; /* bRequest */
 80022fa:	7873      	ldrb	r3, [r6, #1]
 80022fc:	7063      	strb	r3, [r4, #1]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwValue = ByteSwap(*pBuf.w++); /* wValue */
 80022fe:	88b0      	ldrh	r0, [r6, #4]
 8002300:	47b8      	blx	r7
 8002302:	8060      	strh	r0, [r4, #2]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
 8002304:	8930      	ldrh	r0, [r6, #8]
 8002306:	682c      	ldr	r4, [r5, #0]
 8002308:	47b8      	blx	r7
 800230a:	80a0      	strh	r0, [r4, #4]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwLength = *pBuf.w; /* wLength */
 800230c:	89b0      	ldrh	r0, [r6, #12]
 800230e:	682c      	ldr	r4, [r5, #0]
  }

  pInformation->ControlState = SETTING_UP;
 8002310:	2101      	movs	r1, #1
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwValue = ByteSwap(*pBuf.w++); /* wValue */
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwLength = *pBuf.w; /* wLength */
 8002312:	80e0      	strh	r0, [r4, #6]
  }

  pInformation->ControlState = SETTING_UP;
 8002314:	7221      	strb	r1, [r4, #8]
  if (pInformation->USBwLength == 0)
 8002316:	2800      	cmp	r0, #0
 8002318:	d030      	beq.n	800237c <Setup0_Process+0xbc>
*******************************************************************************/
void Data_Setup0(void)
{
  uint8_t *(*CopyRoutine)(uint16_t);
  RESULT Result;
  uint32_t Request_No = pInformation->USBbRequest;
 800231a:	7861      	ldrb	r1, [r4, #1]

  CopyRoutine = NULL;
  wOffset = 0;

  /*GET DESCRIPTOR*/
  if (Request_No == GET_DESCRIPTOR)
 800231c:	2906      	cmp	r1, #6
 800231e:	f000 8087 	beq.w	8002430 <Setup0_Process+0x170>
      }  /* End of GET_DESCRIPTOR */
    }
  }

  /*GET STATUS*/
  else if ((Request_No == GET_STATUS) && (pInformation->USBwValue == 0)
 8002322:	2900      	cmp	r1, #0
 8002324:	d15e      	bne.n	80023e4 <Setup0_Process+0x124>
 8002326:	8863      	ldrh	r3, [r4, #2]
 8002328:	2b00      	cmp	r3, #0
 800232a:	f000 8094 	beq.w	8002456 <Setup0_Process+0x196>
 800232e:	4e86      	ldr	r6, [pc, #536]	; (8002548 <Setup0_Process+0x288>)
    (*CopyRoutine)(0);
    Result = USB_SUCCESS;
  }
  else
  {
    Result = (*pProperty->Class_Data_Setup)(pInformation->USBbRequest);
 8002330:	6833      	ldr	r3, [r6, #0]
 8002332:	4608      	mov	r0, r1
 8002334:	6919      	ldr	r1, [r3, #16]
 8002336:	4788      	blx	r1
    if (Result == USB_NOT_READY)
 8002338:	2803      	cmp	r0, #3
    {
      pInformation->ControlState = PAUSE;
 800233a:	682b      	ldr	r3, [r5, #0]
    Result = USB_SUCCESS;
  }
  else
  {
    Result = (*pProperty->Class_Data_Setup)(pInformation->USBbRequest);
    if (Result == USB_NOT_READY)
 800233c:	d062      	beq.n	8002404 <Setup0_Process+0x144>
      pInformation->ControlState = PAUSE;
      return;
    }
  }

  if (pInformation->Ctrl_Info.Usb_wLength == 0xFFFF)
 800233e:	8a1a      	ldrh	r2, [r3, #16]
 8002340:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002344:	428a      	cmp	r2, r1
 8002346:	d05d      	beq.n	8002404 <Setup0_Process+0x144>
  {
    /* Data is not ready, wait it */
    pInformation->ControlState = PAUSE;
    return;
  }
  if ((Result == USB_UNSUPPORT) || (pInformation->Ctrl_Info.Usb_wLength == 0))
 8002348:	2802      	cmp	r0, #2
 800234a:	d00c      	beq.n	8002366 <Setup0_Process+0xa6>
 800234c:	b15a      	cbz	r2, 8002366 <Setup0_Process+0xa6>
    pInformation->ControlState = STALLED;
    return;
  }


  if (ValBit(pInformation->USBbmRequestType, 7))
 800234e:	f993 1000 	ldrsb.w	r1, [r3]
 8002352:	2900      	cmp	r1, #0
 8002354:	f2c0 80b5 	blt.w	80024c2 <Setup0_Process+0x202>
    pInformation->Ctrl_Info.PacketSize = pProperty->MaxPacketSize;
    DataStageIn();
  }
  else
  {
    pInformation->ControlState = OUT_DATA;
 8002358:	2203      	movs	r2, #3
 800235a:	721a      	strb	r2, [r3, #8]
    vSetEPRxStatus(EP_RX_VALID); /* enable for next data reception */
 800235c:	4b7b      	ldr	r3, [pc, #492]	; (800254c <Setup0_Process+0x28c>)
 800235e:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 8002362:	8018      	strh	r0, [r3, #0]
 8002364:	e001      	b.n	800236a <Setup0_Process+0xaa>
    return;
  }
  if ((Result == USB_UNSUPPORT) || (pInformation->Ctrl_Info.Usb_wLength == 0))
  {
    /* Unsupported request */
    pInformation->ControlState = STALLED;
 8002366:	2008      	movs	r0, #8
 8002368:	7218      	strb	r0, [r3, #8]
  else
  {
    /* Setup with data stage */
    Data_Setup0();
  }
  return Post0_Process();
 800236a:	4b79      	ldr	r3, [pc, #484]	; (8002550 <Setup0_Process+0x290>)
 800236c:	4798      	blx	r3
}
 800236e:	b003      	add	sp, #12
 8002370:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002372:	88e0      	ldrh	r0, [r4, #6]
    pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwLength = *pBuf.w; /* wLength */
  }

  pInformation->ControlState = SETTING_UP;
 8002374:	2101      	movs	r1, #1
 8002376:	7221      	strb	r1, [r4, #8]
  if (pInformation->USBwLength == 0)
 8002378:	2800      	cmp	r0, #0
 800237a:	d1ce      	bne.n	800231a <Setup0_Process+0x5a>
{
  RESULT Result = USB_UNSUPPORT;
  uint32_t RequestNo = pInformation->USBbRequest;
  uint32_t ControlState;

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800237c:	7822      	ldrb	r2, [r4, #0]
* Return         : None.
*******************************************************************************/
void NoData_Setup0(void)
{
  RESULT Result = USB_UNSUPPORT;
  uint32_t RequestNo = pInformation->USBbRequest;
 800237e:	7866      	ldrb	r6, [r4, #1]
  uint32_t ControlState;

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8002380:	f012 037f 	ands.w	r3, r2, #127	; 0x7f
 8002384:	d141      	bne.n	800240a <Setup0_Process+0x14a>
  {
    /* Device Request*/
    /* SET_CONFIGURATION*/
    if (RequestNo == SET_CONFIGURATION)
 8002386:	2e09      	cmp	r6, #9
 8002388:	f000 8108 	beq.w	800259c <Setup0_Process+0x2dc>
    {
      Result = Standard_SetConfiguration();
    }

    /*SET ADDRESS*/
    else if (RequestNo == SET_ADDRESS)
 800238c:	2e05      	cmp	r6, #5
 800238e:	f000 80bf 	beq.w	8002510 <Setup0_Process+0x250>
      {
        Result = USB_SUCCESS;
      }
    }
    /*SET FEATURE for Device*/
    else if (RequestNo == SET_FEATURE)
 8002392:	2e03      	cmp	r6, #3
 8002394:	f000 80f0 	beq.w	8002578 <Setup0_Process+0x2b8>
      {
        Result = USB_UNSUPPORT;
      }
    }
    /*Clear FEATURE for Device */
    else if (RequestNo == CLEAR_FEATURE)
 8002398:	2e01      	cmp	r6, #1
 800239a:	d13b      	bne.n	8002414 <Setup0_Process+0x154>
    {
      if (pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP
 800239c:	78e1      	ldrb	r1, [r4, #3]
 800239e:	2901      	cmp	r1, #1
 80023a0:	d138      	bne.n	8002414 <Setup0_Process+0x154>
          && pInformation->USBwIndex == 0
 80023a2:	88a2      	ldrh	r2, [r4, #4]
 80023a4:	2a00      	cmp	r2, #0
 80023a6:	d135      	bne.n	8002414 <Setup0_Process+0x154>
          && ValBit(pInformation->Current_Feature, 5))
 80023a8:	7a63      	ldrb	r3, [r4, #9]
 80023aa:	f003 0420 	and.w	r4, r3, #32
 80023ae:	b2e0      	uxtb	r0, r4
 80023b0:	2800      	cmp	r0, #0
 80023b2:	d02f      	beq.n	8002414 <Setup0_Process+0x154>
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
  {
    /*CLEAR FEATURE for EndPoint*/
    if (RequestNo == CLEAR_FEATURE)
    {
      Result = Standard_ClearFeature();
 80023b4:	4967      	ldr	r1, [pc, #412]	; (8002554 <Setup0_Process+0x294>)
 80023b6:	4788      	blx	r1
  {
    Result = USB_UNSUPPORT;
  }


  if (Result != USB_SUCCESS)
 80023b8:	bb60      	cbnz	r0, 8002414 <Setup0_Process+0x154>
 80023ba:	682c      	ldr	r4, [r5, #0]
    goto exit_NoData_Setup0;
  }

  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();
 80023bc:	f645 4050 	movw	r0, #23632	; 0x5c50
 80023c0:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80023c4:	6801      	ldr	r1, [r0, #0]
 80023c6:	f243 0302 	movw	r3, #12290	; 0x3002
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
}
 80023ca:	b28a      	uxth	r2, r1
    goto exit_NoData_Setup0;
  }

  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();
 80023cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80023d0:	18d0      	adds	r0, r2, r3
 80023d2:	0041      	lsls	r1, r0, #1
 80023d4:	2300      	movs	r3, #0
 80023d6:	4a60      	ldr	r2, [pc, #384]	; (8002558 <Setup0_Process+0x298>)
 80023d8:	600b      	str	r3, [r1, #0]
 80023da:	2030      	movs	r0, #48	; 0x30
 80023dc:	2106      	movs	r1, #6
 80023de:	8010      	strh	r0, [r2, #0]

exit_NoData_Setup0:
  pInformation->ControlState = ControlState;
 80023e0:	7221      	strb	r1, [r4, #8]
 80023e2:	e7c2      	b.n	800236a <Setup0_Process+0xaa>
    }

  }

  /*GET CONFIGURATION*/
  else if (Request_No == GET_CONFIGURATION)
 80023e4:	2908      	cmp	r1, #8
 80023e6:	d148      	bne.n	800247a <Setup0_Process+0x1ba>
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 80023e8:	7820      	ldrb	r0, [r4, #0]
 80023ea:	0643      	lsls	r3, r0, #25
 80023ec:	d19f      	bne.n	800232e <Setup0_Process+0x6e>
    {
      CopyRoutine = Standard_GetConfiguration;
 80023ee:	4a5b      	ldr	r2, [pc, #364]	; (800255c <Setup0_Process+0x29c>)

  }
  
  if (CopyRoutine)
  {
    pInformation->Ctrl_Info.Usb_wOffset = wOffset;
 80023f0:	2000      	movs	r0, #0
    pInformation->Ctrl_Info.CopyData = CopyRoutine;
 80023f2:	61a2      	str	r2, [r4, #24]

  }
  
  if (CopyRoutine)
  {
    pInformation->Ctrl_Info.Usb_wOffset = wOffset;
 80023f4:	8260      	strh	r0, [r4, #18]
    pInformation->Ctrl_Info.CopyData = CopyRoutine;
    /* sb in the original the cast to word was directly */
    /* now the cast is made step by step */
    (*CopyRoutine)(0);
 80023f6:	4790      	blx	r2
      pInformation->ControlState = PAUSE;
      return;
    }
  }

  if (pInformation->Ctrl_Info.Usb_wLength == 0xFFFF)
 80023f8:	682b      	ldr	r3, [r5, #0]
 80023fa:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80023fe:	8a1a      	ldrh	r2, [r3, #16]
 8002400:	4282      	cmp	r2, r0
 8002402:	d1a3      	bne.n	800234c <Setup0_Process+0x8c>
  {
    /* Data is not ready, wait it */
    pInformation->ControlState = PAUSE;
 8002404:	2109      	movs	r1, #9
 8002406:	7219      	strb	r1, [r3, #8]
 8002408:	e7af      	b.n	800236a <Setup0_Process+0xaa>
    }

  }

  /* Interface Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 800240a:	2b01      	cmp	r3, #1
 800240c:	d071      	beq.n	80024f2 <Setup0_Process+0x232>
      Result = Standard_SetInterface();
    }
  }

  /* EndPoint Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 800240e:	2b02      	cmp	r3, #2
 8002410:	f000 808d 	beq.w	800252e <Setup0_Process+0x26e>
  }


  if (Result != USB_SUCCESS)
  {
    Result = (*pProperty->Class_NoData_Setup)(RequestNo);
 8002414:	494c      	ldr	r1, [pc, #304]	; (8002548 <Setup0_Process+0x288>)
 8002416:	4630      	mov	r0, r6
 8002418:	680a      	ldr	r2, [r1, #0]
 800241a:	6953      	ldr	r3, [r2, #20]
 800241c:	4798      	blx	r3
    if (Result == USB_NOT_READY)
 800241e:	2803      	cmp	r0, #3
 8002420:	f000 80c5 	beq.w	80025ae <Setup0_Process+0x2ee>
 8002424:	682c      	ldr	r4, [r5, #0]
      ControlState = PAUSE;
      goto exit_NoData_Setup0;
    }
  }

  if (Result != USB_SUCCESS)
 8002426:	2800      	cmp	r0, #0
 8002428:	d0c8      	beq.n	80023bc <Setup0_Process+0xfc>
    /*SET ADDRESS*/
    else if (RequestNo == SET_ADDRESS)
    {
      if ((pInformation->USBwValue0 > 127) || (pInformation->USBwValue1 != 0)
          || (pInformation->USBwIndex != 0)
          || (pInformation->Current_Configuration != 0))
 800242a:	2108      	movs	r1, #8
  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();

exit_NoData_Setup0:
  pInformation->ControlState = ControlState;
 800242c:	7221      	strb	r1, [r4, #8]
 800242e:	e79c      	b.n	800236a <Setup0_Process+0xaa>
  wOffset = 0;

  /*GET DESCRIPTOR*/
  if (Request_No == GET_DESCRIPTOR)
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8002430:	7826      	ldrb	r6, [r4, #0]
 8002432:	0673      	lsls	r3, r6, #25
 8002434:	f47f af7b 	bne.w	800232e <Setup0_Process+0x6e>
    {
      uint8_t wValue1 = pInformation->USBwValue1;
 8002438:	78a2      	ldrb	r2, [r4, #2]
      if (wValue1 == DEVICE_DESCRIPTOR)
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
 800243a:	4e43      	ldr	r6, [pc, #268]	; (8002548 <Setup0_Process+0x288>)
  if (Request_No == GET_DESCRIPTOR)
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
    {
      uint8_t wValue1 = pInformation->USBwValue1;
      if (wValue1 == DEVICE_DESCRIPTOR)
 800243c:	2a01      	cmp	r2, #1
 800243e:	f000 80b0 	beq.w	80025a2 <Setup0_Process+0x2e2>
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
      }
      else if (wValue1 == CONFIG_DESCRIPTOR)
 8002442:	2a02      	cmp	r2, #2
 8002444:	d05e      	beq.n	8002504 <Setup0_Process+0x244>
      {
        CopyRoutine = pProperty->GetConfigDescriptor;
      }
      else if (wValue1 == STRING_DESCRIPTOR)
 8002446:	2a03      	cmp	r2, #3
 8002448:	f47f af72 	bne.w	8002330 <Setup0_Process+0x70>
      {
        CopyRoutine = pProperty->GetStringDescriptor;
 800244c:	6830      	ldr	r0, [r6, #0]
 800244e:	6a42      	ldr	r2, [r0, #36]	; 0x24
      CopyRoutine = Standard_GetInterface;
    }

  }
  
  if (CopyRoutine)
 8002450:	2a00      	cmp	r2, #0
 8002452:	d1cd      	bne.n	80023f0 <Setup0_Process+0x130>
 8002454:	e76c      	b.n	8002330 <Setup0_Process+0x70>
  }

  /*GET STATUS*/
  else if ((Request_No == GET_STATUS) && (pInformation->USBwValue == 0)
           && (pInformation->USBwLength == 0x0002)
           && (pInformation->USBwIndex1 == 0))
 8002456:	6860      	ldr	r0, [r4, #4]
 8002458:	f420 427f 	bic.w	r2, r0, #65280	; 0xff00
 800245c:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 8002460:	f47f af65 	bne.w	800232e <Setup0_Process+0x6e>
  {
    /* GET STATUS for Device*/
    if ((Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8002464:	7823      	ldrb	r3, [r4, #0]
 8002466:	f013 007f 	ands.w	r0, r3, #127	; 0x7f
 800246a:	f040 80a4 	bne.w	80025b6 <Setup0_Process+0x2f6>
        && (pInformation->USBwIndex == 0))
 800246e:	88a3      	ldrh	r3, [r4, #4]
 8002470:	2b00      	cmp	r3, #0
 8002472:	f47f af5c 	bne.w	800232e <Setup0_Process+0x6e>
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
          && (Status != 0))
      {
        CopyRoutine = Standard_GetStatus;
 8002476:	4a3a      	ldr	r2, [pc, #232]	; (8002560 <Setup0_Process+0x2a0>)
 8002478:	e7ba      	b.n	80023f0 <Setup0_Process+0x130>
    {
      CopyRoutine = Standard_GetConfiguration;
    }
  }
  /*GET INTERFACE*/
  else if (Request_No == GET_INTERFACE)
 800247a:	290a      	cmp	r1, #10
 800247c:	f47f af57 	bne.w	800232e <Setup0_Process+0x6e>
  {
    if ((Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8002480:	7826      	ldrb	r6, [r4, #0]
 8002482:	f006 027f 	and.w	r2, r6, #127	; 0x7f
 8002486:	2a01      	cmp	r2, #1
 8002488:	f47f af51 	bne.w	800232e <Setup0_Process+0x6e>
        && (pInformation->Current_Configuration != 0) && (pInformation->USBwValue == 0)
 800248c:	7aa3      	ldrb	r3, [r4, #10]
 800248e:	2b00      	cmp	r3, #0
 8002490:	f43f af4d 	beq.w	800232e <Setup0_Process+0x6e>
 8002494:	8863      	ldrh	r3, [r4, #2]
 8002496:	2b00      	cmp	r3, #0
 8002498:	f47f af49 	bne.w	800232e <Setup0_Process+0x6e>
        && (pInformation->USBwIndex1 == 0) && (pInformation->USBwLength == 0x0001)
 800249c:	6860      	ldr	r0, [r4, #4]
        && ((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS))
 800249e:	4e2a      	ldr	r6, [pc, #168]	; (8002548 <Setup0_Process+0x288>)
  /*GET INTERFACE*/
  else if (Request_No == GET_INTERFACE)
  {
    if ((Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
        && (pInformation->Current_Configuration != 0) && (pInformation->USBwValue == 0)
        && (pInformation->USBwIndex1 == 0) && (pInformation->USBwLength == 0x0001)
 80024a0:	f420 427f 	bic.w	r2, r0, #65280	; 0xff00
 80024a4:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80024a8:	f47f af42 	bne.w	8002330 <Setup0_Process+0x70>
        && ((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS))
 80024ac:	6832      	ldr	r2, [r6, #0]
 80024ae:	4619      	mov	r1, r3
 80024b0:	7960      	ldrb	r0, [r4, #5]
 80024b2:	6993      	ldr	r3, [r2, #24]
 80024b4:	4798      	blx	r3
 80024b6:	2800      	cmp	r0, #0
 80024b8:	f040 80b8 	bne.w	800262c <Setup0_Process+0x36c>
 80024bc:	682c      	ldr	r4, [r5, #0]
    {
      CopyRoutine = Standard_GetInterface;
 80024be:	4a29      	ldr	r2, [pc, #164]	; (8002564 <Setup0_Process+0x2a4>)
 80024c0:	e796      	b.n	80023f0 <Setup0_Process+0x130>


  if (ValBit(pInformation->USBbmRequestType, 7))
  {
    /* Device ==> Host */
    __IO uint32_t wLength = pInformation->USBwLength;
 80024c2:	88d9      	ldrh	r1, [r3, #6]
 80024c4:	9101      	str	r1, [sp, #4]
     
    /* Restrict the data length to be the one host asks for */
    if (pInformation->Ctrl_Info.Usb_wLength > wLength)
 80024c6:	9801      	ldr	r0, [sp, #4]
 80024c8:	4282      	cmp	r2, r0
 80024ca:	d817      	bhi.n	80024fc <Setup0_Process+0x23c>
    {
      pInformation->Ctrl_Info.Usb_wLength = wLength;
    }
    
    else if (pInformation->Ctrl_Info.Usb_wLength < pInformation->USBwLength)
 80024cc:	428a      	cmp	r2, r1
    {
      if (pInformation->Ctrl_Info.Usb_wLength < pProperty->MaxPacketSize)
 80024ce:	491e      	ldr	r1, [pc, #120]	; (8002548 <Setup0_Process+0x288>)
    if (pInformation->Ctrl_Info.Usb_wLength > wLength)
    {
      pInformation->Ctrl_Info.Usb_wLength = wLength;
    }
    
    else if (pInformation->Ctrl_Info.Usb_wLength < pInformation->USBwLength)
 80024d0:	d208      	bcs.n	80024e4 <Setup0_Process+0x224>
    {
      if (pInformation->Ctrl_Info.Usb_wLength < pProperty->MaxPacketSize)
 80024d2:	6808      	ldr	r0, [r1, #0]
 80024d4:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 80024d8:	4282      	cmp	r2, r0
 80024da:	f080 808f 	bcs.w	80025fc <Setup0_Process+0x33c>
      {
        Data_Mul_MaxPacketSize = FALSE;
 80024de:	4a22      	ldr	r2, [pc, #136]	; (8002568 <Setup0_Process+0x2a8>)
 80024e0:	2000      	movs	r0, #0
 80024e2:	7010      	strb	r0, [r2, #0]
      {
        Data_Mul_MaxPacketSize = TRUE;
      }
    }   

    pInformation->Ctrl_Info.PacketSize = pProperty->MaxPacketSize;
 80024e4:	6809      	ldr	r1, [r1, #0]
 80024e6:	f891 202c 	ldrb.w	r2, [r1, #44]	; 0x2c
 80024ea:	829a      	strh	r2, [r3, #20]
    DataStageIn();
 80024ec:	4b1f      	ldr	r3, [pc, #124]	; (800256c <Setup0_Process+0x2ac>)
 80024ee:	4798      	blx	r3
 80024f0:	e73b      	b.n	800236a <Setup0_Process+0xaa>

  /* Interface Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
  {
    /*SET INTERFACE*/
    if (RequestNo == SET_INTERFACE)
 80024f2:	2e0b      	cmp	r6, #11
 80024f4:	d18e      	bne.n	8002414 <Setup0_Process+0x154>
    {
      Result = Standard_SetInterface();
 80024f6:	481e      	ldr	r0, [pc, #120]	; (8002570 <Setup0_Process+0x2b0>)
 80024f8:	4780      	blx	r0
 80024fa:	e75d      	b.n	80023b8 <Setup0_Process+0xf8>
    __IO uint32_t wLength = pInformation->USBwLength;
     
    /* Restrict the data length to be the one host asks for */
    if (pInformation->Ctrl_Info.Usb_wLength > wLength)
    {
      pInformation->Ctrl_Info.Usb_wLength = wLength;
 80024fc:	9801      	ldr	r0, [sp, #4]
 80024fe:	4912      	ldr	r1, [pc, #72]	; (8002548 <Setup0_Process+0x288>)
 8002500:	8218      	strh	r0, [r3, #16]
 8002502:	e7ef      	b.n	80024e4 <Setup0_Process+0x224>
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
      }
      else if (wValue1 == CONFIG_DESCRIPTOR)
      {
        CopyRoutine = pProperty->GetConfigDescriptor;
 8002504:	6833      	ldr	r3, [r6, #0]
 8002506:	6a1a      	ldr	r2, [r3, #32]
      CopyRoutine = Standard_GetInterface;
    }

  }
  
  if (CopyRoutine)
 8002508:	2a00      	cmp	r2, #0
 800250a:	f47f af71 	bne.w	80023f0 <Setup0_Process+0x130>
 800250e:	e70f      	b.n	8002330 <Setup0_Process+0x70>
    }

    /*SET ADDRESS*/
    else if (RequestNo == SET_ADDRESS)
    {
      if ((pInformation->USBwValue0 > 127) || (pInformation->USBwValue1 != 0)
 8002510:	f994 0003 	ldrsb.w	r0, [r4, #3]
 8002514:	2800      	cmp	r0, #0
 8002516:	db88      	blt.n	800242a <Setup0_Process+0x16a>
 8002518:	78a1      	ldrb	r1, [r4, #2]
 800251a:	2900      	cmp	r1, #0
 800251c:	d185      	bne.n	800242a <Setup0_Process+0x16a>
          || (pInformation->USBwIndex != 0)
 800251e:	88a2      	ldrh	r2, [r4, #4]
 8002520:	2a00      	cmp	r2, #0
 8002522:	d182      	bne.n	800242a <Setup0_Process+0x16a>
          || (pInformation->Current_Configuration != 0))
 8002524:	7aa3      	ldrb	r3, [r4, #10]
 8002526:	2b00      	cmp	r3, #0
 8002528:	f43f af48 	beq.w	80023bc <Setup0_Process+0xfc>
 800252c:	e77d      	b.n	800242a <Setup0_Process+0x16a>

  /* EndPoint Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
  {
    /*CLEAR FEATURE for EndPoint*/
    if (RequestNo == CLEAR_FEATURE)
 800252e:	2e01      	cmp	r6, #1
 8002530:	f43f af40 	beq.w	80023b4 <Setup0_Process+0xf4>
    {
      Result = Standard_ClearFeature();
    }
    /* SET FEATURE for EndPoint*/
    else if (RequestNo == SET_FEATURE)
 8002534:	2e03      	cmp	r6, #3
 8002536:	f47f af6d 	bne.w	8002414 <Setup0_Process+0x154>
    {
      Result = Standard_SetEndPointFeature();
 800253a:	4c0e      	ldr	r4, [pc, #56]	; (8002574 <Setup0_Process+0x2b4>)
 800253c:	47a0      	blx	r4
 800253e:	e73b      	b.n	80023b8 <Setup0_Process+0xf8>
 8002540:	20001354 	.word	0x20001354
 8002544:	08002add 	.word	0x08002add
 8002548:	2000132c 	.word	0x2000132c
 800254c:	2000135a 	.word	0x2000135a
 8002550:	08002189 	.word	0x08002189
 8002554:	08001fdd 	.word	0x08001fdd
 8002558:	2000135c 	.word	0x2000135c
 800255c:	08001da1 	.word	0x08001da1
 8002560:	08001df1 	.word	0x08001df1
 8002564:	08001dc9 	.word	0x08001dc9
 8002568:	200002dc 	.word	0x200002dc
 800256c:	08001e91 	.word	0x08001e91
 8002570:	08001f8d 	.word	0x08001f8d
 8002574:	080020d5 	.word	0x080020d5
      }
    }
    /*SET FEATURE for Device*/
    else if (RequestNo == SET_FEATURE)
    {
      if ((pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP) \
 8002578:	78e2      	ldrb	r2, [r4, #3]
 800257a:	2a01      	cmp	r2, #1
 800257c:	f47f af4a 	bne.w	8002414 <Setup0_Process+0x154>
          && (pInformation->USBwIndex == 0))
 8002580:	88a3      	ldrh	r3, [r4, #4]
 8002582:	2b00      	cmp	r3, #0
 8002584:	f47f af46 	bne.w	8002414 <Setup0_Process+0x154>
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetDeviceFeature(void)
{
  SetBit(pInformation->Current_Feature, 5);
 8002588:	7a60      	ldrb	r0, [r4, #9]
  pUser_Standard_Requests->User_SetDeviceFeature();
 800258a:	4a2a      	ldr	r2, [pc, #168]	; (8002634 <Setup0_Process+0x374>)
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetDeviceFeature(void)
{
  SetBit(pInformation->Current_Feature, 5);
 800258c:	f040 0120 	orr.w	r1, r0, #32
  pUser_Standard_Requests->User_SetDeviceFeature();
 8002590:	6813      	ldr	r3, [r2, #0]
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetDeviceFeature(void)
{
  SetBit(pInformation->Current_Feature, 5);
 8002592:	7261      	strb	r1, [r4, #9]
  pUser_Standard_Requests->User_SetDeviceFeature();
 8002594:	69dc      	ldr	r4, [r3, #28]
 8002596:	47a0      	blx	r4
 8002598:	682c      	ldr	r4, [r5, #0]
 800259a:	e70f      	b.n	80023bc <Setup0_Process+0xfc>
  {
    /* Device Request*/
    /* SET_CONFIGURATION*/
    if (RequestNo == SET_CONFIGURATION)
    {
      Result = Standard_SetConfiguration();
 800259c:	4c26      	ldr	r4, [pc, #152]	; (8002638 <Setup0_Process+0x378>)
 800259e:	47a0      	blx	r4
 80025a0:	e70a      	b.n	80023b8 <Setup0_Process+0xf8>
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
    {
      uint8_t wValue1 = pInformation->USBwValue1;
      if (wValue1 == DEVICE_DESCRIPTOR)
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
 80025a2:	6832      	ldr	r2, [r6, #0]
 80025a4:	69d2      	ldr	r2, [r2, #28]
      CopyRoutine = Standard_GetInterface;
    }

  }
  
  if (CopyRoutine)
 80025a6:	2a00      	cmp	r2, #0
 80025a8:	f47f af22 	bne.w	80023f0 <Setup0_Process+0x130>
 80025ac:	e6c0      	b.n	8002330 <Setup0_Process+0x70>
 80025ae:	682c      	ldr	r4, [r5, #0]


  if (Result != USB_SUCCESS)
  {
    Result = (*pProperty->Class_NoData_Setup)(RequestNo);
    if (Result == USB_NOT_READY)
 80025b0:	2109      	movs	r1, #9
  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();

exit_NoData_Setup0:
  pInformation->ControlState = ControlState;
 80025b2:	7221      	strb	r1, [r4, #8]
 80025b4:	e6d9      	b.n	800236a <Setup0_Process+0xaa>
    {
      CopyRoutine = Standard_GetStatus;
    }

    /* GET STATUS for Interface*/
    else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 80025b6:	2801      	cmp	r0, #1
 80025b8:	d02b      	beq.n	8002612 <Setup0_Process+0x352>
        CopyRoutine = Standard_GetStatus;
      }
    }

    /* GET STATUS for EndPoint*/
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 80025ba:	2802      	cmp	r0, #2
 80025bc:	f47f aeb7 	bne.w	800232e <Setup0_Process+0x6e>
    {
      Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
 80025c0:	7963      	ldrb	r3, [r4, #5]
 80025c2:	f003 020f 	and.w	r2, r3, #15

      if (ValBit(pInformation->USBwIndex0, 7))
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 80025c6:	0096      	lsls	r6, r2, #2
 80025c8:	f106 4080 	add.w	r0, r6, #1073741824	; 0x40000000
 80025cc:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
    {
      Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
      Reserved = pInformation->USBwIndex0 & 0x70;

      if (ValBit(pInformation->USBwIndex0, 7))
 80025d0:	061e      	lsls	r6, r3, #24
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
      }
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
 80025d2:	bf56      	itet	pl
 80025d4:	6800      	ldrpl	r0, [r0, #0]

      if (ValBit(pInformation->USBwIndex0, 7))
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 80025d6:	6806      	ldrmi	r6, [r0, #0]
      }
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
 80025d8:	f400 5640 	andpl.w	r6, r0, #12288	; 0x3000
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 80025dc:	4817      	ldr	r0, [pc, #92]	; (800263c <Setup0_Process+0x37c>)

      if (ValBit(pInformation->USBwIndex0, 7))
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 80025de:	bf48      	it	mi
 80025e0:	f006 0630 	andmi.w	r6, r6, #48	; 0x30
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 80025e4:	7800      	ldrb	r0, [r0, #0]
 80025e6:	4282      	cmp	r2, r0
 80025e8:	f4bf aea1 	bcs.w	800232e <Setup0_Process+0x6e>
 80025ec:	f013 0f70 	tst.w	r3, #112	; 0x70
 80025f0:	f47f ae9d 	bne.w	800232e <Setup0_Process+0x6e>
          && (Status != 0))
 80025f4:	2e00      	cmp	r6, #0
 80025f6:	f47f af3e 	bne.w	8002476 <Setup0_Process+0x1b6>
 80025fa:	e698      	b.n	800232e <Setup0_Process+0x6e>
    {
      if (pInformation->Ctrl_Info.Usb_wLength < pProperty->MaxPacketSize)
      {
        Data_Mul_MaxPacketSize = FALSE;
      }
      else if ((pInformation->Ctrl_Info.Usb_wLength % pProperty->MaxPacketSize) == 0)
 80025fc:	fb92 f4f0 	sdiv	r4, r2, r0
 8002600:	fb00 2214 	mls	r2, r0, r4, r2
 8002604:	2a00      	cmp	r2, #0
 8002606:	f47f af6d 	bne.w	80024e4 <Setup0_Process+0x224>
      {
        Data_Mul_MaxPacketSize = TRUE;
 800260a:	4a0d      	ldr	r2, [pc, #52]	; (8002640 <Setup0_Process+0x380>)
 800260c:	2001      	movs	r0, #1
 800260e:	7010      	strb	r0, [r2, #0]
 8002610:	e768      	b.n	80024e4 <Setup0_Process+0x224>
    }

    /* GET STATUS for Interface*/
    else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
    {
      if (((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS)
 8002612:	4e0c      	ldr	r6, [pc, #48]	; (8002644 <Setup0_Process+0x384>)
 8002614:	7960      	ldrb	r0, [r4, #5]
 8002616:	6833      	ldr	r3, [r6, #0]
 8002618:	699a      	ldr	r2, [r3, #24]
 800261a:	4790      	blx	r2
 800261c:	b930      	cbnz	r0, 800262c <Setup0_Process+0x36c>
          && (pInformation->Current_Configuration != 0))
 800261e:	682c      	ldr	r4, [r5, #0]
 8002620:	7aa0      	ldrb	r0, [r4, #10]
 8002622:	2800      	cmp	r0, #0
 8002624:	f47f af27 	bne.w	8002476 <Setup0_Process+0x1b6>
 8002628:	7861      	ldrb	r1, [r4, #1]
 800262a:	e681      	b.n	8002330 <Setup0_Process+0x70>
 800262c:	6829      	ldr	r1, [r5, #0]
 800262e:	7849      	ldrb	r1, [r1, #1]
 8002630:	e67e      	b.n	8002330 <Setup0_Process+0x70>
 8002632:	bf00      	nop
 8002634:	20001350 	.word	0x20001350
 8002638:	08001f51 	.word	0x08001f51
 800263c:	200000e0 	.word	0x200000e0
 8002640:	200002dc 	.word	0x200002dc
 8002644:	2000132c 	.word	0x2000132c

08002648 <SetDeviceAddress>:
* Input          : - Val: device address.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetDeviceAddress(uint8_t Val)
{
 8002648:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;
 800264a:	4b28      	ldr	r3, [pc, #160]	; (80026ec <SetDeviceAddress+0xa4>)
 800264c:	781e      	ldrb	r6, [r3, #0]

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 800264e:	2e00      	cmp	r6, #0
 8002650:	d043      	beq.n	80026da <SetDeviceAddress+0x92>
 8002652:	f44f 42b8 	mov.w	r2, #23552	; 0x5c00
 8002656:	f2c4 0200 	movt	r2, #16384	; 0x4000
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 800265a:	6814      	ldr	r4, [r2, #0]
 800265c:	f640 710f 	movw	r1, #3855	; 0xf0f
 8002660:	4021      	ands	r1, r4
 8002662:	f441 4300 	orr.w	r3, r1, #32768	; 0x8000
 8002666:	f043 0180 	orr.w	r1, r3, #128	; 0x80
 800266a:	6011      	str	r1, [r2, #0]
{
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 800266c:	2201      	movs	r2, #1
 800266e:	1e74      	subs	r4, r6, #1
 8002670:	f645 4304 	movw	r3, #23556	; 0x5c04
 8002674:	4296      	cmp	r6, r2
 8002676:	f004 0401 	and.w	r4, r4, #1
 800267a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800267e:	d92c      	bls.n	80026da <SetDeviceAddress+0x92>
 8002680:	b17c      	cbz	r4, 80026a2 <SetDeviceAddress+0x5a>
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 8002682:	6819      	ldr	r1, [r3, #0]
 8002684:	f640 720f 	movw	r2, #3855	; 0xf0f
 8002688:	400a      	ands	r2, r1
 800268a:	f442 4100 	orr.w	r1, r2, #32768	; 0x8000
 800268e:	f041 0281 	orr.w	r2, r1, #129	; 0x81
 8002692:	601a      	str	r2, [r3, #0]
{
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 8002694:	2202      	movs	r2, #2
 8002696:	f645 4308 	movw	r3, #23560	; 0x5c08
 800269a:	4296      	cmp	r6, r2
 800269c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80026a0:	d91b      	bls.n	80026da <SetDeviceAddress+0x92>
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 80026a2:	681f      	ldr	r7, [r3, #0]
 80026a4:	f442 4500 	orr.w	r5, r2, #32768	; 0x8000
 80026a8:	f640 740f 	movw	r4, #3855	; 0xf0f
 80026ac:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 80026b0:	403c      	ands	r4, r7
 80026b2:	ea45 0704 	orr.w	r7, r5, r4
 80026b6:	4619      	mov	r1, r3
 80026b8:	f841 7b04 	str.w	r7, [r1], #4
 80026bc:	685f      	ldr	r7, [r3, #4]
{
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 80026be:	3201      	adds	r2, #1
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 80026c0:	f442 4500 	orr.w	r5, r2, #32768	; 0x8000
 80026c4:	f640 740f 	movw	r4, #3855	; 0xf0f
 80026c8:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 80026cc:	403c      	ands	r4, r7
 80026ce:	432c      	orrs	r4, r5
{
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 80026d0:	3201      	adds	r2, #1
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 80026d2:	605c      	str	r4, [r3, #4]
 80026d4:	1d0b      	adds	r3, r1, #4
{
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 80026d6:	4296      	cmp	r6, r2
 80026d8:	d8e3      	bhi.n	80026a2 <SetDeviceAddress+0x5a>
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
  } /* for */
  _SetDADDR(Val | DADDR_EF); /* set device address and enable function */ 
 80026da:	f645 434c 	movw	r3, #23628	; 0x5c4c
 80026de:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 80026e2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80026e6:	6018      	str	r0, [r3, #0]
}
 80026e8:	bcf0      	pop	{r4, r5, r6, r7}
 80026ea:	4770      	bx	lr
 80026ec:	200000e0 	.word	0x200000e0

080026f0 <In0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t In0_Process(void)
{
 80026f0:	b510      	push	{r4, lr}
  uint32_t ControlState = pInformation->ControlState;
 80026f2:	4c14      	ldr	r4, [pc, #80]	; (8002744 <In0_Process+0x54>)
 80026f4:	6823      	ldr	r3, [r4, #0]
 80026f6:	7a1a      	ldrb	r2, [r3, #8]

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
 80026f8:	2a02      	cmp	r2, #2
 80026fa:	d012      	beq.n	8002722 <In0_Process+0x32>
 80026fc:	2a04      	cmp	r2, #4
 80026fe:	d010      	beq.n	8002722 <In0_Process+0x32>
    DataStageIn();
    /* ControlState may be changed outside the function */
    ControlState = pInformation->ControlState;
  }

  else if (ControlState == WAIT_STATUS_IN)
 8002700:	2a06      	cmp	r2, #6
 8002702:	d004      	beq.n	800270e <In0_Process+0x1e>
 8002704:	2008      	movs	r0, #8
  else
  {
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;
 8002706:	7218      	strb	r0, [r3, #8]

  return Post0_Process();
 8002708:	4b0f      	ldr	r3, [pc, #60]	; (8002748 <In0_Process+0x58>)
 800270a:	4798      	blx	r3
}
 800270c:	bd10      	pop	{r4, pc}
    ControlState = pInformation->ControlState;
  }

  else if (ControlState == WAIT_STATUS_IN)
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 800270e:	7859      	ldrb	r1, [r3, #1]
 8002710:	2905      	cmp	r1, #5
 8002712:	d00b      	beq.n	800272c <In0_Process+0x3c>
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
    {
      SetDeviceAddress(pInformation->USBwValue0);
      pUser_Standard_Requests->User_SetDeviceAddress();
    }
    (*pProperty->Process_Status_IN)();
 8002714:	4b0d      	ldr	r3, [pc, #52]	; (800274c <In0_Process+0x5c>)
 8002716:	6818      	ldr	r0, [r3, #0]
 8002718:	6881      	ldr	r1, [r0, #8]
 800271a:	4788      	blx	r1
 800271c:	6823      	ldr	r3, [r4, #0]
 800271e:	2008      	movs	r0, #8
 8002720:	e7f1      	b.n	8002706 <In0_Process+0x16>
{
  uint32_t ControlState = pInformation->ControlState;

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
  {
    DataStageIn();
 8002722:	4a0b      	ldr	r2, [pc, #44]	; (8002750 <In0_Process+0x60>)
 8002724:	4790      	blx	r2
    /* ControlState may be changed outside the function */
    ControlState = pInformation->ControlState;
 8002726:	6823      	ldr	r3, [r4, #0]
 8002728:	7a18      	ldrb	r0, [r3, #8]
 800272a:	e7ec      	b.n	8002706 <In0_Process+0x16>
  }

  else if (ControlState == WAIT_STATUS_IN)
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
 800272c:	781a      	ldrb	r2, [r3, #0]
    ControlState = pInformation->ControlState;
  }

  else if (ControlState == WAIT_STATUS_IN)
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 800272e:	0652      	lsls	r2, r2, #25
 8002730:	d1f0      	bne.n	8002714 <In0_Process+0x24>
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
    {
      SetDeviceAddress(pInformation->USBwValue0);
 8002732:	78d8      	ldrb	r0, [r3, #3]
 8002734:	4b07      	ldr	r3, [pc, #28]	; (8002754 <In0_Process+0x64>)
 8002736:	4798      	blx	r3
      pUser_Standard_Requests->User_SetDeviceAddress();
 8002738:	4807      	ldr	r0, [pc, #28]	; (8002758 <In0_Process+0x68>)
 800273a:	6801      	ldr	r1, [r0, #0]
 800273c:	6a0a      	ldr	r2, [r1, #32]
 800273e:	4790      	blx	r2
 8002740:	e7e8      	b.n	8002714 <In0_Process+0x24>
 8002742:	bf00      	nop
 8002744:	20001354 	.word	0x20001354
 8002748:	08002189 	.word	0x08002189
 800274c:	2000132c 	.word	0x2000132c
 8002750:	08001e91 	.word	0x08001e91
 8002754:	08002649 	.word	0x08002649
 8002758:	20001350 	.word	0x20001350

0800275c <NOP_Process>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop

08002760 <USB_Init>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Init(void)
{
 8002760:	b510      	push	{r4, lr}
  pInformation = &Device_Info;
 8002762:	f241 3234 	movw	r2, #4916	; 0x1334
 8002766:	f241 3454 	movw	r4, #4948	; 0x1354
 800276a:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800276e:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8002772:	6022      	str	r2, [r4, #0]
  pInformation->ControlState = 2;
 8002774:	2402      	movs	r4, #2
 8002776:	7214      	strb	r4, [r2, #8]
  pProperty = &Device_Property;
 8002778:	f241 302c 	movw	r0, #4908	; 0x132c
 800277c:	f240 035c 	movw	r3, #92	; 0x5c
  pUser_Standard_Requests = &User_Standard_Requests;
 8002780:	f241 3150 	movw	r1, #4944	; 0x1350
 8002784:	f240 028c 	movw	r2, #140	; 0x8c
*******************************************************************************/
void USB_Init(void)
{
  pInformation = &Device_Info;
  pInformation->ControlState = 2;
  pProperty = &Device_Property;
 8002788:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800278c:	f2c2 0000 	movt	r0, #8192	; 0x2000
  pUser_Standard_Requests = &User_Standard_Requests;
 8002790:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8002794:	f2c2 0200 	movt	r2, #8192	; 0x2000
*******************************************************************************/
void USB_Init(void)
{
  pInformation = &Device_Info;
  pInformation->ControlState = 2;
  pProperty = &Device_Property;
 8002798:	6003      	str	r3, [r0, #0]
  pUser_Standard_Requests = &User_Standard_Requests;
 800279a:	600a      	str	r2, [r1, #0]
  /* Initialize devices one by one */
  pProperty->Init();
 800279c:	6818      	ldr	r0, [r3, #0]
 800279e:	4780      	blx	r0
 80027a0:	bd10      	pop	{r4, pc}
 80027a2:	bf00      	nop

080027a4 <UserToPMABufferCopy>:
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
 80027a4:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
 80027a8:	f501 5140 	add.w	r1, r1, #12288	; 0x3000
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 80027ac:	1c53      	adds	r3, r2, #1
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
 80027ae:	004a      	lsls	r2, r1, #1
  for (i = n; i != 0; i--)
 80027b0:	1059      	asrs	r1, r3, #1
*                  - wNBytes: no. of bytes to be copied.
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80027b2:	b430      	push	{r4, r5}
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 80027b4:	d02f      	beq.n	8002816 <UserToPMABufferCopy+0x72>
  {
    temp1 = (uint16_t) * pbUsrBuf;
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 80027b6:	7845      	ldrb	r5, [r0, #1]
*                  - wPMABufAddr: address into PMA.
*                  - wNBytes: no. of bytes to be copied.
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
 80027b8:	3002      	adds	r0, #2
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
  {
    temp1 = (uint16_t) * pbUsrBuf;
 80027ba:	f810 4c02 	ldrb.w	r4, [r0, #-2]
 80027be:	3901      	subs	r1, #1
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 80027c0:	ea44 2305 	orr.w	r3, r4, r5, lsl #8
    *pdwVal++ = temp2;
 80027c4:	f822 3b04 	strh.w	r3, [r2], #4
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 80027c8:	460b      	mov	r3, r1
 80027ca:	3204      	adds	r2, #4
 80027cc:	f001 0101 	and.w	r1, r1, #1
 80027d0:	3002      	adds	r0, #2
 80027d2:	b303      	cbz	r3, 8002816 <UserToPMABufferCopy+0x72>
 80027d4:	b159      	cbz	r1, 80027ee <UserToPMABufferCopy+0x4a>
  {
    temp1 = (uint16_t) * pbUsrBuf;
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 80027d6:	f810 4c01 	ldrb.w	r4, [r0, #-1]
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
  {
    temp1 = (uint16_t) * pbUsrBuf;
 80027da:	f810 1c02 	ldrb.w	r1, [r0, #-2]
 80027de:	3002      	adds	r0, #2
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 80027e0:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
    *pdwVal++ = temp2;
 80027e4:	f822 1c04 	strh.w	r1, [r2, #-4]
 80027e8:	3204      	adds	r2, #4
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 80027ea:	3b01      	subs	r3, #1
 80027ec:	d013      	beq.n	8002816 <UserToPMABufferCopy+0x72>
  {
    temp1 = (uint16_t) * pbUsrBuf;
 80027ee:	f810 1c02 	ldrb.w	r1, [r0, #-2]
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 80027f2:	f810 4c01 	ldrb.w	r4, [r0, #-1]
 80027f6:	ea41 2404 	orr.w	r4, r1, r4, lsl #8
    *pdwVal++ = temp2;
 80027fa:	f822 4c04 	strh.w	r4, [r2, #-4]
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
  {
    temp1 = (uint16_t) * pbUsrBuf;
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 80027fe:	7844      	ldrb	r4, [r0, #1]
 8002800:	3002      	adds	r0, #2
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
  {
    temp1 = (uint16_t) * pbUsrBuf;
 8002802:	f810 1c02 	ldrb.w	r1, [r0, #-2]
 8002806:	3002      	adds	r0, #2
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8002808:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
    *pdwVal++ = temp2;
 800280c:	f822 1b04 	strh.w	r1, [r2], #4
 8002810:	3204      	adds	r2, #4
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 8002812:	3b02      	subs	r3, #2
 8002814:	d1eb      	bne.n	80027ee <UserToPMABufferCopy+0x4a>
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
    *pdwVal++ = temp2;
    pdwVal++;
    pbUsrBuf++;
  }
}
 8002816:	bc30      	pop	{r4, r5}
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop

0800281c <PMAToUserBufferCopy>:
void PMAToUserBufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
 800281c:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
 8002820:	f501 5340 	add.w	r3, r1, #12288	; 0x3000
* Output         : None.
* Return         : None.
*******************************************************************************/
void PMAToUserBufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
 8002824:	3201      	adds	r2, #1
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
 8002826:	0059      	lsls	r1, r3, #1
  for (i = n; i != 0; i--)
 8002828:	1052      	asrs	r2, r2, #1
*                  - wNBytes     = no. of bytes to be copied.
* Output         : None.
* Return         : None.
*******************************************************************************/
void PMAToUserBufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800282a:	b430      	push	{r4, r5}
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 800282c:	d01c      	beq.n	8002868 <PMAToUserBufferCopy+0x4c>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 800282e:	680b      	ldr	r3, [r1, #0]
 8002830:	3a01      	subs	r2, #1
 8002832:	f820 3b02 	strh.w	r3, [r0], #2
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 8002836:	4613      	mov	r3, r2
 8002838:	3002      	adds	r0, #2
 800283a:	f002 0201 	and.w	r2, r2, #1
 800283e:	b19b      	cbz	r3, 8002868 <PMAToUserBufferCopy+0x4c>
 8002840:	b132      	cbz	r2, 8002850 <PMAToUserBufferCopy+0x34>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8002842:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8002846:	f820 2c02 	strh.w	r2, [r0, #-2]
 800284a:	3002      	adds	r0, #2
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 800284c:	3b01      	subs	r3, #1
 800284e:	d00b      	beq.n	8002868 <PMAToUserBufferCopy+0x4c>
 8002850:	1d0c      	adds	r4, r1, #4
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8002852:	684d      	ldr	r5, [r1, #4]
 8002854:	6889      	ldr	r1, [r1, #8]
 8002856:	4602      	mov	r2, r0
 8002858:	f820 5c02 	strh.w	r5, [r0, #-2]
 800285c:	f822 1b02 	strh.w	r1, [r2], #2
 8002860:	1c90      	adds	r0, r2, #2
 8002862:	1d21      	adds	r1, r4, #4
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 8002864:	3b02      	subs	r3, #2
 8002866:	d1f3      	bne.n	8002850 <PMAToUserBufferCopy+0x34>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
    pbUsrBuf++;
  }
}
 8002868:	bc30      	pop	{r4, r5}
 800286a:	4770      	bx	lr

0800286c <SetBTABLE>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetBTABLE(uint16_t wRegValue)
{
  _SetBTABLE(wRegValue);
 800286c:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8002870:	f645 4250 	movw	r2, #23632	; 0x5c50
 8002874:	4003      	ands	r3, r0
 8002876:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800287a:	6013      	str	r3, [r2, #0]
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop

08002880 <SetEPType>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPType(uint8_t bEpNum, uint16_t wType)
{
  _SetEPType(bEpNum, wType);
 8002880:	0080      	lsls	r0, r0, #2
 8002882:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 8002886:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 800288a:	6810      	ldr	r0, [r2, #0]
 800288c:	f648 138f 	movw	r3, #35215	; 0x898f
 8002890:	4003      	ands	r3, r0
 8002892:	4319      	orrs	r1, r3
 8002894:	6011      	str	r1, [r2, #0]
 8002896:	4770      	bx	lr

08002898 <SetEPTxStatus>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxStatus(uint8_t bEpNum, uint16_t wState)
{
  _SetEPTxStatus(bEpNum, wState);
 8002898:	0080      	lsls	r0, r0, #2
 800289a:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 800289e:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
*                  wState: new state.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxStatus(uint8_t bEpNum, uint16_t wState)
{
 80028a2:	b410      	push	{r4}
  _SetEPTxStatus(bEpNum, wState);
 80028a4:	f001 0010 	and.w	r0, r1, #16
 80028a8:	6814      	ldr	r4, [r2, #0]
 80028aa:	f648 73bf 	movw	r3, #36799	; 0x8fbf
 80028ae:	b280      	uxth	r0, r0
 80028b0:	4023      	ands	r3, r4
 80028b2:	b968      	cbnz	r0, 80028d0 <SetEPTxStatus+0x38>
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	f001 0120 	and.w	r1, r1, #32
 80028ba:	b288      	uxth	r0, r1
 80028bc:	b108      	cbz	r0, 80028c2 <SetEPTxStatus+0x2a>
 80028be:	f083 0320 	eor.w	r3, r3, #32
 80028c2:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 80028c6:	f041 0080 	orr.w	r0, r1, #128	; 0x80
 80028ca:	6010      	str	r0, [r2, #0]
}
 80028cc:	bc10      	pop	{r4}
 80028ce:	4770      	bx	lr
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxStatus(uint8_t bEpNum, uint16_t wState)
{
  _SetEPTxStatus(bEpNum, wState);
 80028d0:	f083 0310 	eor.w	r3, r3, #16
 80028d4:	e7ef      	b.n	80028b6 <SetEPTxStatus+0x1e>
 80028d6:	bf00      	nop

080028d8 <SetEPRxStatus>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxStatus(uint8_t bEpNum, uint16_t wState)
{
  _SetEPRxStatus(bEpNum, wState);
 80028d8:	0080      	lsls	r0, r0, #2
 80028da:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 80028de:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
*                  wState: new state.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxStatus(uint8_t bEpNum, uint16_t wState)
{
 80028e2:	b410      	push	{r4}
  _SetEPRxStatus(bEpNum, wState);
 80028e4:	f401 5080 	and.w	r0, r1, #4096	; 0x1000
 80028e8:	6814      	ldr	r4, [r2, #0]
 80028ea:	f64b 738f 	movw	r3, #49039	; 0xbf8f
 80028ee:	b280      	uxth	r0, r0
 80028f0:	4023      	ands	r3, r4
 80028f2:	b968      	cbnz	r0, 8002910 <SetEPRxStatus+0x38>
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 80028fa:	b288      	uxth	r0, r1
 80028fc:	b108      	cbz	r0, 8002902 <SetEPRxStatus+0x2a>
 80028fe:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002902:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 8002906:	f041 0080 	orr.w	r0, r1, #128	; 0x80
 800290a:	6010      	str	r0, [r2, #0]
}
 800290c:	bc10      	pop	{r4}
 800290e:	4770      	bx	lr
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxStatus(uint8_t bEpNum, uint16_t wState)
{
  _SetEPRxStatus(bEpNum, wState);
 8002910:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002914:	e7ef      	b.n	80028f6 <SetEPRxStatus+0x1e>
 8002916:	bf00      	nop

08002918 <SetEPTxValid>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxValid(uint8_t bEpNum)
{
  _SetEPTxStatus(bEpNum, EP_TX_VALID);
 8002918:	0080      	lsls	r0, r0, #2
 800291a:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 800291e:	f502 40b8 	add.w	r0, r2, #23552	; 0x5c00
 8002922:	6801      	ldr	r1, [r0, #0]
 8002924:	f648 73bf 	movw	r3, #36799	; 0x8fbf
 8002928:	400b      	ands	r3, r1
 800292a:	f083 0230 	eor.w	r2, r3, #48	; 0x30
 800292e:	f442 4100 	orr.w	r1, r2, #32768	; 0x8000
 8002932:	f041 0380 	orr.w	r3, r1, #128	; 0x80
 8002936:	6003      	str	r3, [r0, #0]
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop

0800293c <SetEPRxValid>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxValid(uint8_t bEpNum)
{
  _SetEPRxStatus(bEpNum, EP_RX_VALID);
 800293c:	0080      	lsls	r0, r0, #2
 800293e:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 8002942:	f502 40b8 	add.w	r0, r2, #23552	; 0x5c00
 8002946:	6801      	ldr	r1, [r0, #0]
 8002948:	f64b 738f 	movw	r3, #49039	; 0xbf8f
 800294c:	400b      	ands	r3, r1
 800294e:	f483 5240 	eor.w	r2, r3, #12288	; 0x3000
 8002952:	f442 4100 	orr.w	r1, r2, #32768	; 0x8000
 8002956:	f041 0380 	orr.w	r3, r1, #128	; 0x80
 800295a:	6003      	str	r3, [r0, #0]
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop

08002960 <Clear_Status_Out>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Clear_Status_Out(uint8_t bEpNum)
{
  _ClearEP_KIND(bEpNum);
 8002960:	0080      	lsls	r0, r0, #2
 8002962:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 8002966:	f502 40b8 	add.w	r0, r2, #23552	; 0x5c00
 800296a:	6801      	ldr	r1, [r0, #0]
 800296c:	f640 630f 	movw	r3, #3599	; 0xe0f
 8002970:	400b      	ands	r3, r1
 8002972:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8002976:	f042 0180 	orr.w	r1, r2, #128	; 0x80
 800297a:	6001      	str	r1, [r0, #0]
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop

08002980 <ClearDTOG_RX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_RX(uint8_t bEpNum)
{
  _ClearDTOG_RX(bEpNum);
 8002980:	0080      	lsls	r0, r0, #2
 8002982:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 8002986:	f503 40b8 	add.w	r0, r3, #23552	; 0x5c00
 800298a:	6802      	ldr	r2, [r0, #0]
 800298c:	0451      	lsls	r1, r2, #17
 800298e:	d508      	bpl.n	80029a2 <ClearDTOG_RX+0x22>
 8002990:	6801      	ldr	r1, [r0, #0]
 8002992:	f640 730f 	movw	r3, #3855	; 0xf0f
 8002996:	400b      	ands	r3, r1
 8002998:	f443 4240 	orr.w	r2, r3, #49152	; 0xc000
 800299c:	f042 0180 	orr.w	r1, r2, #128	; 0x80
 80029a0:	6001      	str	r1, [r0, #0]
 80029a2:	4770      	bx	lr

080029a4 <ClearDTOG_TX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_TX(uint8_t bEpNum)
{
  _ClearDTOG_TX(bEpNum);
 80029a4:	0080      	lsls	r0, r0, #2
 80029a6:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 80029aa:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	0650      	lsls	r0, r2, #25
 80029b2:	d508      	bpl.n	80029c6 <ClearDTOG_TX+0x22>
 80029b4:	6819      	ldr	r1, [r3, #0]
 80029b6:	f640 700f 	movw	r0, #3855	; 0xf0f
 80029ba:	4008      	ands	r0, r1
 80029bc:	f440 4200 	orr.w	r2, r0, #32768	; 0x8000
 80029c0:	f042 01c0 	orr.w	r1, r2, #192	; 0xc0
 80029c4:	6019      	str	r1, [r3, #0]
 80029c6:	4770      	bx	lr

080029c8 <SetEPTxAddr>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxAddr(uint8_t bEpNum, uint16_t wAddr)
{
  _SetEPTxAddr(bEpNum, wAddr);
 80029c8:	f645 4350 	movw	r3, #23632	; 0x5c50
 80029cc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	f64f 73fe 	movw	r3, #65534	; 0xfffe
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 80029d6:	b292      	uxth	r2, r2
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxAddr(uint8_t bEpNum, uint16_t wAddr)
{
  _SetEPTxAddr(bEpNum, wAddr);
 80029d8:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 80029dc:	f100 5200 	add.w	r2, r0, #536870912	; 0x20000000
 80029e0:	f502 5040 	add.w	r0, r2, #12288	; 0x3000
 80029e4:	0042      	lsls	r2, r0, #1
 80029e6:	400b      	ands	r3, r1
 80029e8:	6013      	str	r3, [r2, #0]
 80029ea:	4770      	bx	lr

080029ec <SetEPRxAddr>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxAddr(uint8_t bEpNum, uint16_t wAddr)
{
  _SetEPRxAddr(bEpNum, wAddr);
 80029ec:	f645 4350 	movw	r3, #23632	; 0x5c50
 80029f0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	f243 0304 	movw	r3, #12292	; 0x3004
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 80029fa:	b292      	uxth	r2, r2
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxAddr(uint8_t bEpNum, uint16_t wAddr)
{
  _SetEPRxAddr(bEpNum, wAddr);
 80029fc:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8002a00:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002a04:	18c3      	adds	r3, r0, r3
 8002a06:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002a0a:	0058      	lsls	r0, r3, #1
 8002a0c:	400a      	ands	r2, r1
 8002a0e:	6002      	str	r2, [r0, #0]
 8002a10:	4770      	bx	lr
 8002a12:	bf00      	nop

08002a14 <GetEPTxAddr>:
* Output         : None.
* Return         : Rx buffer address. 
*******************************************************************************/
uint16_t GetEPTxAddr(uint8_t bEpNum)
{
  return(_GetEPTxAddr(bEpNum));
 8002a14:	f645 4350 	movw	r3, #23632	; 0x5c50
 8002a18:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002a1c:	6819      	ldr	r1, [r3, #0]
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 8002a1e:	b28a      	uxth	r2, r1
* Output         : None.
* Return         : Rx buffer address. 
*******************************************************************************/
uint16_t GetEPTxAddr(uint8_t bEpNum)
{
  return(_GetEPTxAddr(bEpNum));
 8002a20:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8002a24:	f100 5300 	add.w	r3, r0, #536870912	; 0x20000000
 8002a28:	f503 5140 	add.w	r1, r3, #12288	; 0x3000
 8002a2c:	004a      	lsls	r2, r1, #1
}
 8002a2e:	8810      	ldrh	r0, [r2, #0]
 8002a30:	4770      	bx	lr
 8002a32:	bf00      	nop

08002a34 <GetEPRxAddr>:
* Output         : None.
* Return         : Rx buffer address.
*******************************************************************************/
uint16_t GetEPRxAddr(uint8_t bEpNum)
{
  return(_GetEPRxAddr(bEpNum));
 8002a34:	f645 4350 	movw	r3, #23632	; 0x5c50
 8002a38:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	f243 0104 	movw	r1, #12292	; 0x3004
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 8002a42:	b293      	uxth	r3, r2
* Output         : None.
* Return         : Rx buffer address.
*******************************************************************************/
uint16_t GetEPRxAddr(uint8_t bEpNum)
{
  return(_GetEPRxAddr(bEpNum));
 8002a44:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8002a48:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8002a4c:	1842      	adds	r2, r0, r1
 8002a4e:	0051      	lsls	r1, r2, #1
}
 8002a50:	8808      	ldrh	r0, [r1, #0]
 8002a52:	4770      	bx	lr

08002a54 <SetEPTxCount>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPTxCount(bEpNum, wCount);
 8002a54:	f645 4350 	movw	r3, #23632	; 0x5c50
 8002a58:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	f243 0302 	movw	r3, #12290	; 0x3002
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 8002a62:	b292      	uxth	r2, r2
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPTxCount(bEpNum, wCount);
 8002a64:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8002a68:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002a6c:	18c3      	adds	r3, r0, r3
 8002a6e:	005a      	lsls	r2, r3, #1
 8002a70:	6011      	str	r1, [r2, #0]
 8002a72:	4770      	bx	lr

08002a74 <SetEPRxCount>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPRxCount(bEpNum, wCount);
 8002a74:	f645 4350 	movw	r3, #23632	; 0x5c50
 8002a78:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	f243 0306 	movw	r3, #12294	; 0x3006
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 8002a82:	b292      	uxth	r2, r2
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPRxCount(bEpNum, wCount);
 8002a84:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8002a88:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002a8c:	18c3      	adds	r3, r0, r3
 8002a8e:	005b      	lsls	r3, r3, #1
 8002a90:	293e      	cmp	r1, #62	; 0x3e
 8002a92:	d909      	bls.n	8002aa8 <SetEPRxCount+0x34>
 8002a94:	094a      	lsrs	r2, r1, #5
 8002a96:	06c9      	lsls	r1, r1, #27
 8002a98:	d101      	bne.n	8002a9e <SetEPRxCount+0x2a>
 8002a9a:	1e50      	subs	r0, r2, #1
 8002a9c:	b282      	uxth	r2, r0
 8002a9e:	0291      	lsls	r1, r2, #10
 8002aa0:	f441 4000 	orr.w	r0, r1, #32768	; 0x8000
 8002aa4:	6018      	str	r0, [r3, #0]
 8002aa6:	4770      	bx	lr
 8002aa8:	084a      	lsrs	r2, r1, #1
 8002aaa:	07c8      	lsls	r0, r1, #31
 8002aac:	bf48      	it	mi
 8002aae:	3201      	addmi	r2, #1
 8002ab0:	0291      	lsls	r1, r2, #10
 8002ab2:	6019      	str	r1, [r3, #0]
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop

08002ab8 <GetEPRxCount>:
* Output         : None.
* Return         : Rx count value.
*******************************************************************************/
uint16_t GetEPRxCount(uint8_t bEpNum)
{
  return(_GetEPRxCount(bEpNum));
 8002ab8:	f645 4350 	movw	r3, #23632	; 0x5c50
 8002abc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	f243 0106 	movw	r1, #12294	; 0x3006
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 8002ac6:	b293      	uxth	r3, r2
* Output         : None.
* Return         : Rx count value.
*******************************************************************************/
uint16_t GetEPRxCount(uint8_t bEpNum)
{
  return(_GetEPRxCount(bEpNum));
 8002ac8:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8002acc:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8002ad0:	1842      	adds	r2, r0, r1
 8002ad2:	0051      	lsls	r1, r2, #1
 8002ad4:	680b      	ldr	r3, [r1, #0]
}
 8002ad6:	0598      	lsls	r0, r3, #22
 8002ad8:	0d80      	lsrs	r0, r0, #22
 8002ada:	4770      	bx	lr

08002adc <ByteSwap>:
uint16_t ByteSwap(uint16_t wSwW)
{
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
 8002adc:	b2c3      	uxtb	r3, r0
 8002ade:	0a00      	lsrs	r0, r0, #8
  return(wRet);
}
 8002ae0:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop

08002ae8 <USB_SIL_Init>:
* Input          : None.
* Output         : None.
* Return         : Status.
*******************************************************************************/
uint32_t USB_SIL_Init(void)
{
 8002ae8:	b410      	push	{r4}
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
  wInterrupt_Mask = IMR_MSK;
 8002aea:	f241 3358 	movw	r3, #4952	; 0x1358
*******************************************************************************/
uint32_t USB_SIL_Init(void)
{
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
 8002aee:	f645 4444 	movw	r4, #23620	; 0x5c44
  wInterrupt_Mask = IMR_MSK;
  /* set interrupts mask */
  _SetCNTR(wInterrupt_Mask);
 8002af2:	f645 4240 	movw	r2, #23616	; 0x5c40
uint32_t USB_SIL_Init(void)
{
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
  wInterrupt_Mask = IMR_MSK;
 8002af6:	f44f 413f 	mov.w	r1, #48896	; 0xbf00
*******************************************************************************/
uint32_t USB_SIL_Init(void)
{
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
 8002afa:	2000      	movs	r0, #0
 8002afc:	f2c4 0400 	movt	r4, #16384	; 0x4000
  wInterrupt_Mask = IMR_MSK;
 8002b00:	f2c2 0300 	movt	r3, #8192	; 0x2000
  /* set interrupts mask */
  _SetCNTR(wInterrupt_Mask);
 8002b04:	f2c4 0200 	movt	r2, #16384	; 0x4000
*******************************************************************************/
uint32_t USB_SIL_Init(void)
{
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
 8002b08:	6020      	str	r0, [r4, #0]
  wInterrupt_Mask = IMR_MSK;
 8002b0a:	8019      	strh	r1, [r3, #0]
  /* set interrupts mask */
  _SetCNTR(wInterrupt_Mask);
 8002b0c:	6011      	str	r1, [r2, #0]
  return 0;
}
 8002b0e:	bc10      	pop	{r4}
 8002b10:	4770      	bx	lr
 8002b12:	bf00      	nop

08002b14 <USB_SIL_Read>:
*                     received data buffer.
* Output         : None.
* Return         : Number of received data (in Bytes).
*******************************************************************************/
uint32_t USB_SIL_Read(uint8_t bEpAddr, uint8_t* pBufferPointer)
{
 8002b14:	b570      	push	{r4, r5, r6, lr}
  uint32_t DataLength = 0;

  /* Get the number of received data on the selected Endpoint */
  DataLength = GetEPRxCount(bEpAddr & 0x7F);
 8002b16:	f642 23b9 	movw	r3, #10937	; 0x2ab9
 8002b1a:	f000 057f 	and.w	r5, r0, #127	; 0x7f
 8002b1e:	f6c0 0300 	movt	r3, #2048	; 0x800
 8002b22:	4628      	mov	r0, r5
*                     received data buffer.
* Output         : None.
* Return         : Number of received data (in Bytes).
*******************************************************************************/
uint32_t USB_SIL_Read(uint8_t bEpAddr, uint8_t* pBufferPointer)
{
 8002b24:	460e      	mov	r6, r1
  uint32_t DataLength = 0;

  /* Get the number of received data on the selected Endpoint */
  DataLength = GetEPRxCount(bEpAddr & 0x7F);
 8002b26:	4798      	blx	r3
  
  /* Use the memory interface function to write to the selected endpoint */
  PMAToUserBufferCopy(pBufferPointer, GetEPRxAddr(bEpAddr & 0x7F), DataLength);
 8002b28:	f642 2135 	movw	r1, #10805	; 0x2a35
uint32_t USB_SIL_Read(uint8_t bEpAddr, uint8_t* pBufferPointer)
{
  uint32_t DataLength = 0;

  /* Get the number of received data on the selected Endpoint */
  DataLength = GetEPRxCount(bEpAddr & 0x7F);
 8002b2c:	4604      	mov	r4, r0
  
  /* Use the memory interface function to write to the selected endpoint */
  PMAToUserBufferCopy(pBufferPointer, GetEPRxAddr(bEpAddr & 0x7F), DataLength);
 8002b2e:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002b32:	4628      	mov	r0, r5
 8002b34:	4788      	blx	r1
 8002b36:	f642 031d 	movw	r3, #10269	; 0x281d
 8002b3a:	4601      	mov	r1, r0
 8002b3c:	4622      	mov	r2, r4
 8002b3e:	4630      	mov	r0, r6
 8002b40:	f6c0 0300 	movt	r3, #2048	; 0x800
 8002b44:	4798      	blx	r3

  /* Return the number of received data */
  return DataLength;
}
 8002b46:	4620      	mov	r0, r4
 8002b48:	bd70      	pop	{r4, r5, r6, pc}
 8002b4a:	bf00      	nop

08002b4c <CTR_LP>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void CTR_LP(void)
{
 8002b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b50:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 8002d00 <CTR_LP+0x1b4>
 8002b54:	b083      	sub	sp, #12
  __IO uint16_t wEPVal = 0;
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 8002b56:	f645 4b44 	movw	fp, #23620	; 0x5c44
* Output         : None.
* Return         : None.
*******************************************************************************/
void CTR_LP(void)
{
  __IO uint16_t wEPVal = 0;
 8002b5a:	2300      	movs	r3, #0
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 8002b5c:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 8002d04 <CTR_LP+0x1b8>
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 8002b60:	4d62      	ldr	r5, [pc, #392]	; (8002cec <CTR_LP+0x1a0>)
* Output         : None.
* Return         : None.
*******************************************************************************/
void CTR_LP(void)
{
  __IO uint16_t wEPVal = 0;
 8002b62:	f8ad 3006 	strh.w	r3, [sp, #6]
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 8002b66:	f2c4 0b00 	movt	fp, #16384	; 0x4000
 8002b6a:	46d0      	mov	r8, sl
 8002b6c:	f8db 0000 	ldr.w	r0, [fp]
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 8002b70:	f44f 44b8 	mov.w	r4, #23552	; 0x5c00
*******************************************************************************/
void CTR_LP(void)
{
  __IO uint16_t wEPVal = 0;
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 8002b74:	b282      	uxth	r2, r0
 8002b76:	0403      	lsls	r3, r0, #16
 8002b78:	f8aa 2000 	strh.w	r2, [sl]
 8002b7c:	f140 80ab 	bpl.w	8002cd6 <CTR_LP+0x18a>
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 8002b80:	f8b8 3000 	ldrh.w	r3, [r8]
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 8002b84:	f2c4 0400 	movt	r4, #16384	; 0x4000
  __IO uint16_t wEPVal = 0;
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 8002b88:	f003 020f 	and.w	r2, r3, #15
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
 8002b8c:	0090      	lsls	r0, r2, #2
 8002b8e:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
	    SaveTState = SaveRState & EPTX_STAT;
 8002b92:	4e57      	ldr	r6, [pc, #348]	; (8002cf0 <CTR_LP+0x1a4>)
	    SaveRState &=  EPRX_STAT;	

	    _SetEPRxTxStatus(ENDP0,EP_RX_NAK,EP_TX_NAK);
 8002b94:	f64b 71bf 	movw	r1, #49087	; 0xbfbf
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 8002b98:	4f54      	ldr	r7, [pc, #336]	; (8002cec <CTR_LP+0x1a0>)
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
    if (EPindex == 0)
 8002b9a:	4613      	mov	r3, r2
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
 8002b9c:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
  __IO uint16_t wEPVal = 0;
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 8002ba0:	f889 2000 	strb.w	r2, [r9]
    if (EPindex == 0)
 8002ba4:	2a00      	cmp	r2, #0
 8002ba6:	d133      	bne.n	8002c10 <CTR_LP+0xc4>
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 8002ba8:	6822      	ldr	r2, [r4, #0]
 8002baa:	b290      	uxth	r0, r2
 8002bac:	8028      	strh	r0, [r5, #0]
	    SaveTState = SaveRState & EPTX_STAT;
 8002bae:	882b      	ldrh	r3, [r5, #0]
 8002bb0:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8002bb4:	8032      	strh	r2, [r6, #0]
	    SaveRState &=  EPRX_STAT;	
 8002bb6:	8828      	ldrh	r0, [r5, #0]
 8002bb8:	f400 5340 	and.w	r3, r0, #12288	; 0x3000
 8002bbc:	802b      	strh	r3, [r5, #0]

	    _SetEPRxTxStatus(ENDP0,EP_RX_NAK,EP_TX_NAK);
 8002bbe:	6822      	ldr	r2, [r4, #0]
 8002bc0:	4011      	ands	r1, r2
 8002bc2:	f481 5100 	eor.w	r1, r1, #8192	; 0x2000
 8002bc6:	f081 0020 	eor.w	r0, r1, #32
 8002bca:	f440 4300 	orr.w	r3, r0, #32768	; 0x8000
 8002bce:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002bd2:	6022      	str	r2, [r4, #0]

      /* DIR bit = origin of the interrupt */

      if ((wIstr & ISTR_DIR) == 0)
 8002bd4:	f8b8 1000 	ldrh.w	r1, [r8]
 8002bd8:	f001 0010 	and.w	r0, r1, #16
 8002bdc:	b283      	uxth	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d049      	beq.n	8002c76 <CTR_LP+0x12a>
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */

        wEPVal = _GetENDPOINT(ENDP0);
 8002be2:	6822      	ldr	r2, [r4, #0]
 8002be4:	b291      	uxth	r1, r2
 8002be6:	f8ad 1006 	strh.w	r1, [sp, #6]
        
        if ((wEPVal &EP_SETUP) != 0)
 8002bea:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8002bee:	f400 6300 	and.w	r3, r0, #2048	; 0x800
 8002bf2:	b29a      	uxth	r2, r3
 8002bf4:	2a00      	cmp	r2, #0
 8002bf6:	d171      	bne.n	8002cdc <CTR_LP+0x190>

		      _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
          return;
        }

        else if ((wEPVal & EP_CTR_RX) != 0)
 8002bf8:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8002bfc:	b208      	sxth	r0, r1
 8002bfe:	2800      	cmp	r0, #0
 8002c00:	dab4      	bge.n	8002b6c <CTR_LP+0x20>
        {
          _ClearEP_CTR_RX(ENDP0);
 8002c02:	6822      	ldr	r2, [r4, #0]
 8002c04:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002c08:	4013      	ands	r3, r2
 8002c0a:	6023      	str	r3, [r4, #0]
          Out0_Process();
 8002c0c:	4939      	ldr	r1, [pc, #228]	; (8002cf4 <CTR_LP+0x1a8>)
 8002c0e:	e038      	b.n	8002c82 <CTR_LP+0x136>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
 8002c10:	6804      	ldr	r4, [r0, #0]
 8002c12:	b2a1      	uxth	r1, r4
 8002c14:	f8ad 1006 	strh.w	r1, [sp, #6]
      if ((wEPVal & EP_CTR_RX) != 0)
 8002c18:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8002c1c:	b214      	sxth	r4, r2
 8002c1e:	2c00      	cmp	r4, #0
 8002c20:	db1b      	blt.n	8002c5a <CTR_LP+0x10e>
        /* call OUT service function */
        (*pEpInt_OUT[EPindex-1])();

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & EP_CTR_TX) != 0)
 8002c22:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8002c26:	f001 0280 	and.w	r2, r1, #128	; 0x80
 8002c2a:	b293      	uxth	r3, r2
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d09d      	beq.n	8002b6c <CTR_LP+0x20>
      {
        /* clear int flag */
        _ClearEP_CTR_TX(EPindex);
 8002c30:	f899 4000 	ldrb.w	r4, [r9]
 8002c34:	f648 730f 	movw	r3, #36623	; 0x8f0f
 8002c38:	00a0      	lsls	r0, r4, #2
 8002c3a:	f100 4180 	add.w	r1, r0, #1073741824	; 0x40000000
 8002c3e:	f501 42b8 	add.w	r2, r1, #23552	; 0x5c00
 8002c42:	6810      	ldr	r0, [r2, #0]

        /* call IN service function */
        (*pEpInt_IN[EPindex-1])();
 8002c44:	3c01      	subs	r4, #1
      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & EP_CTR_TX) != 0)
      {
        /* clear int flag */
        _ClearEP_CTR_TX(EPindex);
 8002c46:	4003      	ands	r3, r0
 8002c48:	6013      	str	r3, [r2, #0]

        /* call IN service function */
        (*pEpInt_IN[EPindex-1])();
 8002c4a:	f240 031c 	movw	r3, #28
 8002c4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002c52:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 8002c56:	4788      	blx	r1
 8002c58:	e788      	b.n	8002b6c <CTR_LP+0x20>
      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
      if ((wEPVal & EP_CTR_RX) != 0)
      {
        /* clear int flag */
        _ClearEP_CTR_RX(EPindex);
 8002c5a:	6801      	ldr	r1, [r0, #0]
 8002c5c:	f640 728f 	movw	r2, #3983	; 0xf8f
 8002c60:	400a      	ands	r2, r1
 8002c62:	6002      	str	r2, [r0, #0]

        /* call OUT service function */
        (*pEpInt_OUT[EPindex-1])();
 8002c64:	f240 0038 	movw	r0, #56	; 0x38
 8002c68:	3b01      	subs	r3, #1
 8002c6a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002c6e:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 8002c72:	47a0      	blx	r4
 8002c74:	e7d5      	b.n	8002c22 <CTR_LP+0xd6>
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */

        _ClearEP_CTR_TX(ENDP0);
 8002c76:	6821      	ldr	r1, [r4, #0]
 8002c78:	f648 730f 	movw	r3, #36623	; 0x8f0f
 8002c7c:	400b      	ands	r3, r1
        In0_Process();
 8002c7e:	491e      	ldr	r1, [pc, #120]	; (8002cf8 <CTR_LP+0x1ac>)
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */

        _ClearEP_CTR_TX(ENDP0);
 8002c80:	6023      	str	r3, [r4, #0]
        }

        else if ((wEPVal & EP_CTR_RX) != 0)
        {
          _ClearEP_CTR_RX(ENDP0);
          Out0_Process();
 8002c82:	4788      	blx	r1
          /* before terminate set Tx & Rx status */
     
		     _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
 8002c84:	6820      	ldr	r0, [r4, #0]
 8002c86:	883a      	ldrh	r2, [r7, #0]
 8002c88:	f64b 73bf 	movw	r3, #49087	; 0xbfbf
 8002c8c:	f402 5180 	and.w	r1, r2, #4096	; 0x1000
 8002c90:	b28a      	uxth	r2, r1
 8002c92:	4003      	ands	r3, r0
 8002c94:	b10a      	cbz	r2, 8002c9a <CTR_LP+0x14e>
 8002c96:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002c9a:	8838      	ldrh	r0, [r7, #0]
 8002c9c:	f400 5100 	and.w	r1, r0, #8192	; 0x2000
 8002ca0:	b28a      	uxth	r2, r1
 8002ca2:	b10a      	cbz	r2, 8002ca8 <CTR_LP+0x15c>
 8002ca4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002ca8:	8830      	ldrh	r0, [r6, #0]
 8002caa:	f000 0110 	and.w	r1, r0, #16
 8002cae:	b28a      	uxth	r2, r1
 8002cb0:	b10a      	cbz	r2, 8002cb6 <CTR_LP+0x16a>
 8002cb2:	f083 0310 	eor.w	r3, r3, #16
 8002cb6:	8830      	ldrh	r0, [r6, #0]
 8002cb8:	f000 0120 	and.w	r1, r0, #32
 8002cbc:	b28a      	uxth	r2, r1
 8002cbe:	b10a      	cbz	r2, 8002cc4 <CTR_LP+0x178>
 8002cc0:	f083 0320 	eor.w	r3, r3, #32
 8002cc4:	f443 4000 	orr.w	r0, r3, #32768	; 0x8000
 8002cc8:	f44f 41b8 	mov.w	r1, #23552	; 0x5c00
 8002ccc:	f040 0280 	orr.w	r2, r0, #128	; 0x80
 8002cd0:	f2c4 0100 	movt	r1, #16384	; 0x4000
 8002cd4:	600a      	str	r2, [r1, #0]
      } /* if((wEPVal & EP_CTR_TX) != 0) */

    }/* if(EPindex == 0) else */

  }/* while(...) */
}
 8002cd6:	b003      	add	sp, #12
 8002cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

        wEPVal = _GetENDPOINT(ENDP0);
        
        if ((wEPVal &EP_SETUP) != 0)
        {
          _ClearEP_CTR_RX(ENDP0); /* SETUP bit kept frozen while CTR_RX = 1 */
 8002cdc:	6820      	ldr	r0, [r4, #0]
 8002cde:	f640 728f 	movw	r2, #3983	; 0xf8f
 8002ce2:	4002      	ands	r2, r0
 8002ce4:	6022      	str	r2, [r4, #0]
          Setup0_Process();
 8002ce6:	4905      	ldr	r1, [pc, #20]	; (8002cfc <CTR_LP+0x1b0>)
 8002ce8:	e7cb      	b.n	8002c82 <CTR_LP+0x136>
 8002cea:	bf00      	nop
 8002cec:	2000135a 	.word	0x2000135a
 8002cf0:	2000135c 	.word	0x2000135c
 8002cf4:	080021d1 	.word	0x080021d1
 8002cf8:	080026f1 	.word	0x080026f1
 8002cfc:	080022c1 	.word	0x080022c1
 8002d00:	20000afc 	.word	0x20000afc
 8002d04:	20001330 	.word	0x20001330

08002d08 <FLASH_Unlock>:
* Return         : None
*******************************************************************************/
void FLASH_Unlock(void)
{
  /* Authorize the FPEC Access */
  FLASH->KEYR = FLASH_KEY1;
 8002d08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d0c:	f240 1123 	movw	r1, #291	; 0x123
  FLASH->KEYR = FLASH_KEY2;
 8002d10:	f648 12ab 	movw	r2, #35243	; 0x89ab
* Return         : None
*******************************************************************************/
void FLASH_Unlock(void)
{
  /* Authorize the FPEC Access */
  FLASH->KEYR = FLASH_KEY1;
 8002d14:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002d18:	f2c4 5167 	movt	r1, #17767	; 0x4567
  FLASH->KEYR = FLASH_KEY2;
 8002d1c:	f6cc 52ef 	movt	r2, #52719	; 0xcdef
* Return         : None
*******************************************************************************/
void FLASH_Unlock(void)
{
  /* Authorize the FPEC Access */
  FLASH->KEYR = FLASH_KEY1;
 8002d20:	6059      	str	r1, [r3, #4]
  FLASH->KEYR = FLASH_KEY2;
 8002d22:	605a      	str	r2, [r3, #4]
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop

08002d28 <FLASH_Lock>:
* Return         : None
*******************************************************************************/
void FLASH_Lock(void)
{
  /* Set the Lock Bit to lock the FPEC and the FCR */
  FLASH->CR |= CR_LOCK_Set;
 8002d28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d2c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002d30:	691a      	ldr	r2, [r3, #16]
 8002d32:	f042 0080 	orr.w	r0, r2, #128	; 0x80
 8002d36:	6118      	str	r0, [r3, #16]
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop

08002d3c <FLASH_ClearFlag>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG)) ;
  
  /* Clear the flags */
  FLASH->SR = FLASH_FLAG;
 8002d3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d40:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002d44:	60d8      	str	r0, [r3, #12]
 8002d46:	4770      	bx	lr

08002d48 <FLASH_GetStatus>:
*******************************************************************************/
FLASH_Status FLASH_GetStatus(void)
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 8002d48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d4c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002d50:	68da      	ldr	r2, [r3, #12]
 8002d52:	07d1      	lsls	r1, r2, #31
 8002d54:	d40b      	bmi.n	8002d6e <FLASH_GetStatus+0x26>
  {
    flashstatus = FLASH_BUSY;
  }
  else 
  {  
    if(FLASH->SR & FLASH_FLAG_PGERR)
 8002d56:	68d8      	ldr	r0, [r3, #12]
 8002d58:	0742      	lsls	r2, r0, #29
 8002d5a:	d501      	bpl.n	8002d60 <FLASH_GetStatus+0x18>
    { 
      flashstatus = FLASH_ERROR_PG;
 8002d5c:	2002      	movs	r0, #2
      }
    }
  }
  /* Return the Flash Status */
  return flashstatus;
}
 8002d5e:	4770      	bx	lr
    { 
      flashstatus = FLASH_ERROR_PG;
    }
    else 
    {
      if(FLASH->SR & FLASH_FLAG_WRPRTERR)
 8002d60:	68d9      	ldr	r1, [r3, #12]
 8002d62:	f011 0f10 	tst.w	r1, #16
      {
        flashstatus = FLASH_ERROR_WRP;
 8002d66:	bf0c      	ite	eq
 8002d68:	2004      	moveq	r0, #4
 8002d6a:	2003      	movne	r0, #3
 8002d6c:	4770      	bx	lr
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
  {
    flashstatus = FLASH_BUSY;
 8002d6e:	2001      	movs	r0, #1
 8002d70:	4770      	bx	lr
 8002d72:	bf00      	nop

08002d74 <FLASH_WaitForLastOperation>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_WaitForLastOperation(u32 Timeout)
{ 
 8002d74:	b5f0      	push	{r4, r5, r6, r7, lr}
  FLASH_Status status = FLASH_COMPLETE;
   
  /* Check for the Flash Status */
  status = FLASH_GetStatus();
 8002d76:	4d0f      	ldr	r5, [pc, #60]	; (8002db4 <FLASH_WaitForLastOperation+0x40>)
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_WaitForLastOperation(u32 Timeout)
{ 
 8002d78:	b083      	sub	sp, #12
 8002d7a:	4604      	mov	r4, r0
  FLASH_Status status = FLASH_COMPLETE;
   
  /* Check for the Flash Status */
  status = FLASH_GetStatus();
 8002d7c:	47a8      	blx	r5

  /* Wait for a Flash operation to complete or a TIMEOUT to occur */
  while((status == FLASH_BUSY) && (Timeout != 0x00))
 8002d7e:	2801      	cmp	r0, #1
 8002d80:	d115      	bne.n	8002dae <FLASH_WaitForLastOperation+0x3a>
 8002d82:	b18c      	cbz	r4, 8002da8 <FLASH_WaitForLastOperation+0x34>
* Output         : None
* Return         : None
*******************************************************************************/
static void delay(void)
{
  vu32 i = 0;
 8002d84:	2700      	movs	r7, #0

  for(i = 0xFF; i != 0; i--)
 8002d86:	26ff      	movs	r6, #255	; 0xff
* Output         : None
* Return         : None
*******************************************************************************/
static void delay(void)
{
  vu32 i = 0;
 8002d88:	9701      	str	r7, [sp, #4]

  for(i = 0xFF; i != 0; i--)
 8002d8a:	9601      	str	r6, [sp, #4]
 8002d8c:	9b01      	ldr	r3, [sp, #4]
 8002d8e:	b12b      	cbz	r3, 8002d9c <FLASH_WaitForLastOperation+0x28>
 8002d90:	9801      	ldr	r0, [sp, #4]
 8002d92:	1e41      	subs	r1, r0, #1
 8002d94:	9101      	str	r1, [sp, #4]
 8002d96:	9a01      	ldr	r2, [sp, #4]
 8002d98:	2a00      	cmp	r2, #0
 8002d9a:	d1f9      	bne.n	8002d90 <FLASH_WaitForLastOperation+0x1c>

  /* Wait for a Flash operation to complete or a TIMEOUT to occur */
  while((status == FLASH_BUSY) && (Timeout != 0x00))
  {
    delay();
    status = FLASH_GetStatus();
 8002d9c:	47a8      	blx	r5
    Timeout--;
 8002d9e:	3c01      	subs	r4, #1
   
  /* Check for the Flash Status */
  status = FLASH_GetStatus();

  /* Wait for a Flash operation to complete or a TIMEOUT to occur */
  while((status == FLASH_BUSY) && (Timeout != 0x00))
 8002da0:	2801      	cmp	r0, #1
 8002da2:	d104      	bne.n	8002dae <FLASH_WaitForLastOperation+0x3a>
 8002da4:	2c00      	cmp	r4, #0
 8002da6:	d1ef      	bne.n	8002d88 <FLASH_WaitForLastOperation+0x14>
    Timeout--;
  }

  if(Timeout == 0x00 )
  {
    status = FLASH_TIMEOUT;
 8002da8:	2005      	movs	r0, #5
  }

  /* Return the operation status */
  return status;
}
 8002daa:	b003      	add	sp, #12
 8002dac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    delay();
    status = FLASH_GetStatus();
    Timeout--;
  }

  if(Timeout == 0x00 )
 8002dae:	2c00      	cmp	r4, #0
 8002db0:	d1fb      	bne.n	8002daa <FLASH_WaitForLastOperation+0x36>
 8002db2:	e7f9      	b.n	8002da8 <FLASH_WaitForLastOperation+0x34>
 8002db4:	08002d49 	.word	0x08002d49

08002db8 <FLASH_ProgramWord>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT. 
*******************************************************************************/
FLASH_Status FLASH_ProgramWord(u32 Address, u32 Data)
{
 8002db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dba:	4605      	mov	r5, r0

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8002dbc:	4c11      	ldr	r4, [pc, #68]	; (8002e04 <FLASH_ProgramWord+0x4c>)
 8002dbe:	200f      	movs	r0, #15
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT. 
*******************************************************************************/
FLASH_Status FLASH_ProgramWord(u32 Address, u32 Data)
{
 8002dc0:	460e      	mov	r6, r1

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8002dc2:	47a0      	blx	r4
  
  if(status == FLASH_COMPLETE)
 8002dc4:	2804      	cmp	r0, #4
 8002dc6:	d000      	beq.n	8002dca <FLASH_ProgramWord+0x12>
      }
     }
  }
  /* Return the Program Status */
  return status;
}
 8002dc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  
  if(status == FLASH_COMPLETE)
  {
    /* if the previous operation is completed, proceed to program the new first 
    half word */
    FLASH->CR |= CR_PG_Set;
 8002dca:	f44f 5700 	mov.w	r7, #8192	; 0x2000
 8002dce:	f2c4 0702 	movt	r7, #16386	; 0x4002
 8002dd2:	693a      	ldr	r2, [r7, #16]
  
    *(vu16*)Address = (u16)Data;
 8002dd4:	b2b3      	uxth	r3, r6
  
  if(status == FLASH_COMPLETE)
  {
    /* if the previous operation is completed, proceed to program the new first 
    half word */
    FLASH->CR |= CR_PG_Set;
 8002dd6:	f042 0001 	orr.w	r0, r2, #1
 8002dda:	6138      	str	r0, [r7, #16]
  
    *(vu16*)Address = (u16)Data;

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 8002ddc:	200f      	movs	r0, #15
  {
    /* if the previous operation is completed, proceed to program the new first 
    half word */
    FLASH->CR |= CR_PG_Set;
  
    *(vu16*)Address = (u16)Data;
 8002dde:	802b      	strh	r3, [r5, #0]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 8002de0:	47a0      	blx	r4
 
    if(status == FLASH_COMPLETE)
 8002de2:	2804      	cmp	r0, #4
 8002de4:	d009      	beq.n	8002dfa <FLASH_ProgramWord+0x42>
      *(vu16*)(Address + 2) = Data >> 16;
    
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
        
      if(status != FLASH_BUSY)
 8002de6:	2801      	cmp	r0, #1
 8002de8:	d005      	beq.n	8002df6 <FLASH_ProgramWord+0x3e>
    else
    {
      if (status != FLASH_BUSY)
      {
        /* Disable the PG Bit */
        FLASH->CR &= CR_PG_Reset;
 8002dea:	6939      	ldr	r1, [r7, #16]
 8002dec:	f641 72fe 	movw	r2, #8190	; 0x1ffe
 8002df0:	400a      	ands	r2, r1
 8002df2:	613a      	str	r2, [r7, #16]
      }
     }
  }
  /* Return the Program Status */
  return status;
}
 8002df4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT. 
*******************************************************************************/
FLASH_Status FLASH_ProgramWord(u32 Address, u32 Data)
{
 8002df6:	2001      	movs	r0, #1
 8002df8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 
    if(status == FLASH_COMPLETE)
    {
      /* if the previous operation is completed, proceed to program the new second 
      half word */
      *(vu16*)(Address + 2) = Data >> 16;
 8002dfa:	0c36      	lsrs	r6, r6, #16
 8002dfc:	806e      	strh	r6, [r5, #2]
    
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8002dfe:	200f      	movs	r0, #15
 8002e00:	47a0      	blx	r4
 8002e02:	e7f0      	b.n	8002de6 <FLASH_ProgramWord+0x2e>
 8002e04:	08002d75 	.word	0x08002d75

08002e08 <FLASH_ErasePage>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_ErasePage(u32 Page_Address)
{
 8002e08:	b570      	push	{r4, r5, r6, lr}
 8002e0a:	4606      	mov	r6, r0

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Page_Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(EraseTimeout);
 8002e0c:	4c0f      	ldr	r4, [pc, #60]	; (8002e4c <FLASH_ErasePage+0x44>)
 8002e0e:	f640 70ff 	movw	r0, #4095	; 0xfff
 8002e12:	47a0      	blx	r4
  
  if(status == FLASH_COMPLETE)
 8002e14:	2804      	cmp	r0, #4
 8002e16:	d000      	beq.n	8002e1a <FLASH_ErasePage+0x12>
      FLASH->CR &= CR_PER_Reset;
    }
  }
  /* Return the Erase Status */
  return status;
}
 8002e18:	bd70      	pop	{r4, r5, r6, pc}
  status = FLASH_WaitForLastOperation(EraseTimeout);
  
  if(status == FLASH_COMPLETE)
  { 
    /* if the previous operation is completed, proceed to erase the page */
    FLASH->CR|= CR_PER_Set;
 8002e1a:	f44f 5500 	mov.w	r5, #8192	; 0x2000
 8002e1e:	f2c4 0502 	movt	r5, #16386	; 0x4002
 8002e22:	692b      	ldr	r3, [r5, #16]
    FLASH->AR = Page_Address; 
    FLASH->CR|= CR_STRT_Set;
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 8002e24:	f640 70ff 	movw	r0, #4095	; 0xfff
  status = FLASH_WaitForLastOperation(EraseTimeout);
  
  if(status == FLASH_COMPLETE)
  { 
    /* if the previous operation is completed, proceed to erase the page */
    FLASH->CR|= CR_PER_Set;
 8002e28:	f043 0102 	orr.w	r1, r3, #2
 8002e2c:	6129      	str	r1, [r5, #16]
    FLASH->AR = Page_Address; 
 8002e2e:	616e      	str	r6, [r5, #20]
    FLASH->CR|= CR_STRT_Set;
 8002e30:	692a      	ldr	r2, [r5, #16]
 8002e32:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002e36:	612b      	str	r3, [r5, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 8002e38:	47a0      	blx	r4

    if(status != FLASH_BUSY)
 8002e3a:	2801      	cmp	r0, #1
 8002e3c:	d0ec      	beq.n	8002e18 <FLASH_ErasePage+0x10>
    {
      /* if the erase operation is completed, disable the PER Bit */
      FLASH->CR &= CR_PER_Reset;
 8002e3e:	6929      	ldr	r1, [r5, #16]
 8002e40:	f641 72fd 	movw	r2, #8189	; 0x1ffd
 8002e44:	400a      	ands	r2, r1
 8002e46:	612a      	str	r2, [r5, #16]
    }
  }
  /* Return the Erase Status */
  return status;
}
 8002e48:	bd70      	pop	{r4, r5, r6, pc}
 8002e4a:	bf00      	nop
 8002e4c:	08002d75 	.word	0x08002d75

08002e50 <Virtual_Com_Port_StringVendor>:
 8002e50:	00530326 004d0054 00630069 006f0072     &.S.T.M.i.c.r.o.
 8002e60:	006c0065 00630065 00720074 006e006f     e.l.e.c.t.r.o.n.
 8002e70:	00630069 00000073                       i.c.s...

08002e78 <Virtual_Com_Port_DeviceDescriptor>:
 8002e78:	02000112 40000002 57400483 02010200     .......@..@W....
 8002e88:	00000103                                ....

08002e8c <Virtual_Com_Port_StringLangID>:
 8002e8c:	04090304                                ....

08002e90 <Virtual_Com_Port_StringProduct>:
 8002e90:	00530332 004d0054 00320033 00560020     2.S.T.M.3.2. .V.
 8002ea0:	00720069 00750074 006c0061 00430020     i.r.t.u.a.l. .C.
 8002eb0:	004d004f 00500020 0072006f 00200074     O.M. .P.o.r.t. .
 8002ec0:	00000020                                 ...

08002ec4 <Virtual_Com_Port_ConfigDescriptor>:
 8002ec4:	00430209 c0000102 00040932 02020100     ..C.....2.......
 8002ed4:	24050001 05011000 01000124 02022404     ...$....$....$..
 8002ee4:	00062405 82050701 ff000803 00010409     .$..............
 8002ef4:	00000a02 03050700 00004002 02810507     .........@......
 8002f04:	00000040                                @...
