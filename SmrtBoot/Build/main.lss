
main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002860  08000000  08000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000e4  20000000  08002860  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00001160  20000200  08002c00  00010200  2**9
                  ALLOC
  3 ._usrstack    00000100  20001360  08003d60  00010200  2**0
                  ALLOC
  4 .debug_info   00006bfb  00000000  00000000  000100e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000024e9  00000000  00000000  00016cdf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_loc    000041d2  00000000  00000000  000191c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000930  00000000  00000000  0001d39a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000c00  00000000  00000000  0001dcca  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002b25  00000000  00000000  0001e8ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000022c9  00000000  00000000  000213ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      00000011  00000000  00000000  000236b8  2**0
                  CONTENTS, READONLY
 12 .ARM.attributes 00000033  00000000  00000000  000236c9  2**0
                  CONTENTS, READONLY
 13 .debug_frame  0000151c  00000000  00000000  000236fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000000 <g_pfnVectors>:
 8000000:	00 50 00 20 c9 04 00 08                             .P. ....

08000008 <main>:
     ARG     : 	void
     RET     : 	
     			int
---------------------------------------------------------------------------*/
int main(void)
{
 8000008:	b5f0      	push	{r4, r5, r6, r7, lr}
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Main_Init( void )
{
	Hw_Init();
 800000a:	4b20      	ldr	r3, [pc, #128]	; (800008c <main+0x84>)
     ARG     : 	void
     RET     : 	
     			int
---------------------------------------------------------------------------*/
int main(void)
{
 800000c:	b083      	sub	sp, #12
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Main_Init( void )
{
	Hw_Init();
 800000e:	4798      	blx	r3
	Ap_Init();
 8000010:	4b1f      	ldr	r3, [pc, #124]	; (8000090 <main+0x88>)
 8000012:	4798      	blx	r3


	Main_Init();


	if( Ap_ST32BL_RunBoot == TRUE )
 8000014:	4b1f      	ldr	r3, [pc, #124]	; (8000094 <main+0x8c>)
 8000016:	781b      	ldrb	r3, [r3, #0]
 8000018:	2b01      	cmp	r3, #1
 800001a:	d005      	beq.n	8000028 <main+0x20>
		#endif
		Ap_ST32BL_Main();
	}
	else
	{		
		Ap_ST32BL_JumpToApp(0);
 800001c:	2000      	movs	r0, #0
 800001e:	4b1e      	ldr	r3, [pc, #120]	; (8000098 <main+0x90>)
 8000020:	4798      	blx	r3
	}
	#endif

    
    return 0;
}
 8000022:	2000      	movs	r0, #0
 8000024:	b003      	add	sp, #12
 8000026:	bdf0      	pop	{r4, r5, r6, r7, pc}


	if( Ap_ST32BL_RunBoot == TRUE )
	{
		//-- 하드웨어 초기화
		Hw_Uart_Init();
 8000028:	4b1c      	ldr	r3, [pc, #112]	; (800009c <main+0x94>)
 800002a:	4798      	blx	r3
		Hw_Timer_Init();
 800002c:	4b1c      	ldr	r3, [pc, #112]	; (80000a0 <main+0x98>)
 800002e:	4798      	blx	r3
		Hw_VCom_Init();
 8000030:	4b1c      	ldr	r3, [pc, #112]	; (80000a4 <main+0x9c>)
 8000032:	4798      	blx	r3
 8000034:	4c1c      	ldr	r4, [pc, #112]	; (80000a8 <main+0xa0>)
		#if 1
		while(1)
		{
			if( HW_VCOM_Q_VAILD(0) > 0 )
			{
				Hw_VCom_Q_Pop( 0, &Uart_GetData );
 8000036:	4e1d      	ldr	r6, [pc, #116]	; (80000ac <main+0xa4>)
					Ap_ST32BL_SendByte(STM32_COMM_ACK);
					break;
				}
			}

			if( HW_UART_Q_VAILD(HW_UART_COM1) > 0 )
 8000038:	4d1d      	ldr	r5, [pc, #116]	; (80000b0 <main+0xa8>)
			{
				Hw_Uart_Q_Pop( HW_UART_COM1, &Uart_GetData );
 800003a:	4f1e      	ldr	r7, [pc, #120]	; (80000b4 <main+0xac>)
		//-- 먼저 명령을 보낸 포트로 다운로드 시작 
		//
		#if 1
		while(1)
		{
			if( HW_VCOM_Q_VAILD(0) > 0 )
 800003c:	2000      	movs	r0, #0
 800003e:	47a0      	blx	r4
			{
				Hw_VCom_Q_Pop( 0, &Uart_GetData );
 8000040:	f10d 0107 	add.w	r1, sp, #7
		//-- 먼저 명령을 보낸 포트로 다운로드 시작 
		//
		#if 1
		while(1)
		{
			if( HW_VCOM_Q_VAILD(0) > 0 )
 8000044:	b128      	cbz	r0, 8000052 <main+0x4a>
			{
				Hw_VCom_Q_Pop( 0, &Uart_GetData );
 8000046:	2000      	movs	r0, #0
 8000048:	47b0      	blx	r6

				if( Uart_GetData == STM32_CMD_INIT )
 800004a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800004e:	2b7f      	cmp	r3, #127	; 0x7f
 8000050:	d012      	beq.n	8000078 <main+0x70>
					Ap_ST32BL_SendByte(STM32_COMM_ACK);
					break;
				}
			}

			if( HW_UART_Q_VAILD(HW_UART_COM1) > 0 )
 8000052:	2000      	movs	r0, #0
 8000054:	47a8      	blx	r5
 8000056:	2800      	cmp	r0, #0
 8000058:	ddf0      	ble.n	800003c <main+0x34>
			{
				Hw_Uart_Q_Pop( HW_UART_COM1, &Uart_GetData );
 800005a:	2000      	movs	r0, #0
 800005c:	f10d 0107 	add.w	r1, sp, #7
 8000060:	47b8      	blx	r7

				if( Uart_GetData == STM32_CMD_INIT )
 8000062:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000066:	2b7f      	cmp	r3, #127	; 0x7f
 8000068:	d1e8      	bne.n	800003c <main+0x34>
				{
					Ap_ST32BL_UartPort = HW_UART_COM1;
 800006a:	4b13      	ldr	r3, [pc, #76]	; (80000b8 <main+0xb0>)
 800006c:	2200      	movs	r2, #0
 800006e:	701a      	strb	r2, [r3, #0]
					Ap_ST32BL_SendByte(STM32_COMM_ACK);
 8000070:	2079      	movs	r0, #121	; 0x79
 8000072:	4b12      	ldr	r3, [pc, #72]	; (80000bc <main+0xb4>)
 8000074:	4798      	blx	r3
					break;
 8000076:	e005      	b.n	8000084 <main+0x7c>
			{
				Hw_VCom_Q_Pop( 0, &Uart_GetData );

				if( Uart_GetData == STM32_CMD_INIT )
				{
					Ap_ST32BL_UartPort = HW_UART_VCOM;
 8000078:	4b0f      	ldr	r3, [pc, #60]	; (80000b8 <main+0xb0>)
 800007a:	2205      	movs	r2, #5
 800007c:	701a      	strb	r2, [r3, #0]
					Ap_ST32BL_SendByte(STM32_COMM_ACK);
 800007e:	2079      	movs	r0, #121	; 0x79
 8000080:	4b0e      	ldr	r3, [pc, #56]	; (80000bc <main+0xb4>)
 8000082:	4798      	blx	r3
					break;
				}
			}	
		}
		#endif
		Ap_ST32BL_Main();
 8000084:	4b0e      	ldr	r3, [pc, #56]	; (80000c0 <main+0xb8>)
 8000086:	4798      	blx	r3
 8000088:	e7cb      	b.n	8000022 <main+0x1a>
 800008a:	bf00      	nop
 800008c:	08000579 	.word	0x08000579
 8000090:	080000c5 	.word	0x080000c5
 8000094:	200002e1 	.word	0x200002e1
 8000098:	08000479 	.word	0x08000479
 800009c:	080007cd 	.word	0x080007cd
 80000a0:	08000971 	.word	0x08000971
 80000a4:	08000b91 	.word	0x08000b91
 80000a8:	08000c31 	.word	0x08000c31
 80000ac:	08000cbd 	.word	0x08000cbd
 80000b0:	08000a99 	.word	0x08000a99
 80000b4:	08000b21 	.word	0x08000b21
 80000b8:	200002e0 	.word	0x200002e0
 80000bc:	08000141 	.word	0x08000141
 80000c0:	080002f9 	.word	0x080002f9

080000c4 <Ap_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Ap_Init( void )
{
 80000c4:	b508      	push	{r3, lr}
	Ap_ST32BL_Init();
 80000c6:	f240 03d5 	movw	r3, #213	; 0xd5
 80000ca:	f6c0 0300 	movt	r3, #2048	; 0x800
 80000ce:	4798      	blx	r3
 80000d0:	bd08      	pop	{r3, pc}
 80000d2:	bf00      	nop

080000d4 <Ap_ST32BL_Init>:
void Ap_ST32BL_Init( void )
{
	u32 i;


	REG_GPIOB_CRL &= ~(0x0F << (0));	// Clear
 80000d4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80000d8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80000dc:	6819      	ldr	r1, [r3, #0]
	REG_GPIOB_CRL |=  (0x00 << (0));	// MODE, PB.0 Input Mode
	REG_GPIOB_CRL |=  (0x02 << (2));	// CNF,  PB.0 input	pull-up/pull-down
		
	CLR_BIT( REG_GPIOB_ODR, 0 );
 80000de:	f640 420c 	movw	r2, #3084	; 0xc0c
void Ap_ST32BL_Init( void )
{
	u32 i;


	REG_GPIOB_CRL &= ~(0x0F << (0));	// Clear
 80000e2:	f021 010f 	bic.w	r1, r1, #15
 80000e6:	6019      	str	r1, [r3, #0]
	REG_GPIOB_CRL |=  (0x00 << (0));	// MODE, PB.0 Input Mode
 80000e8:	6819      	ldr	r1, [r3, #0]
	REG_GPIOB_CRL |=  (0x02 << (2));	// CNF,  PB.0 input	pull-up/pull-down
		
	CLR_BIT( REG_GPIOB_ODR, 0 );
 80000ea:	f2c4 0201 	movt	r2, #16385	; 0x4001
{
	u32 i;


	REG_GPIOB_CRL &= ~(0x0F << (0));	// Clear
	REG_GPIOB_CRL |=  (0x00 << (0));	// MODE, PB.0 Input Mode
 80000ee:	6019      	str	r1, [r3, #0]
	REG_GPIOB_CRL |=  (0x02 << (2));	// CNF,  PB.0 input	pull-up/pull-down
 80000f0:	6818      	ldr	r0, [r3, #0]
		
	CLR_BIT( REG_GPIOB_ODR, 0 );


	if( IS_SET_BIT(REG_GPIOB_IDR, 0) )
 80000f2:	f640 4108 	movw	r1, #3080	; 0xc08
	u32 i;


	REG_GPIOB_CRL &= ~(0x0F << (0));	// Clear
	REG_GPIOB_CRL |=  (0x00 << (0));	// MODE, PB.0 Input Mode
	REG_GPIOB_CRL |=  (0x02 << (2));	// CNF,  PB.0 input	pull-up/pull-down
 80000f6:	f040 0008 	orr.w	r0, r0, #8
 80000fa:	6018      	str	r0, [r3, #0]
		
	CLR_BIT( REG_GPIOB_ODR, 0 );
 80000fc:	6813      	ldr	r3, [r2, #0]


	if( IS_SET_BIT(REG_GPIOB_IDR, 0) )
 80000fe:	f2c4 0101 	movt	r1, #16385	; 0x4001

	REG_GPIOB_CRL &= ~(0x0F << (0));	// Clear
	REG_GPIOB_CRL |=  (0x00 << (0));	// MODE, PB.0 Input Mode
	REG_GPIOB_CRL |=  (0x02 << (2));	// CNF,  PB.0 input	pull-up/pull-down
		
	CLR_BIT( REG_GPIOB_ODR, 0 );
 8000102:	f023 0301 	bic.w	r3, r3, #1
 8000106:	6013      	str	r3, [r2, #0]


	if( IS_SET_BIT(REG_GPIOB_IDR, 0) )
 8000108:	680b      	ldr	r3, [r1, #0]
 800010a:	f013 0301 	ands.w	r3, r3, #1
 800010e:	d00e      	beq.n	800012e <Ap_ST32BL_Init+0x5a>
	{
		Ap_ST32BL_RunBoot = TRUE;
 8000110:	4b08      	ldr	r3, [pc, #32]	; (8000134 <Ap_ST32BL_Init+0x60>)
 8000112:	2201      	movs	r2, #1
 8000114:	701a      	strb	r2, [r3, #0]
 8000116:	4b08      	ldr	r3, [pc, #32]	; (8000138 <Ap_ST32BL_Init+0x64>)
		Ap_ST32BL_RunBoot = FALSE;
	}

	for( i=0; i<128; i++ )
	{
		Ap_ST32BL_EraseSectorFlag[i] = FALSE;
 8000118:	2100      	movs	r1, #0
     TITLE   : Ap_ST32BL_Init
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_ST32BL_Init( void )
 800011a:	f103 0280 	add.w	r2, r3, #128	; 0x80
		Ap_ST32BL_RunBoot = FALSE;
	}

	for( i=0; i<128; i++ )
	{
		Ap_ST32BL_EraseSectorFlag[i] = FALSE;
 800011e:	f803 1f01 	strb.w	r1, [r3, #1]!
	else
	{
		Ap_ST32BL_RunBoot = FALSE;
	}

	for( i=0; i<128; i++ )
 8000122:	4293      	cmp	r3, r2
 8000124:	d1fb      	bne.n	800011e <Ap_ST32BL_Init+0x4a>
	{
		Ap_ST32BL_EraseSectorFlag[i] = FALSE;
	}

	Ap_ST32BL_UartPort = HW_UART_COM1;	
 8000126:	4b05      	ldr	r3, [pc, #20]	; (800013c <Ap_ST32BL_Init+0x68>)
 8000128:	2200      	movs	r2, #0
 800012a:	701a      	strb	r2, [r3, #0]
 800012c:	4770      	bx	lr
	{
		Ap_ST32BL_RunBoot = TRUE;
	}
	else
	{
		Ap_ST32BL_RunBoot = FALSE;
 800012e:	4a01      	ldr	r2, [pc, #4]	; (8000134 <Ap_ST32BL_Init+0x60>)
 8000130:	7013      	strb	r3, [r2, #0]
 8000132:	e7f0      	b.n	8000116 <Ap_ST32BL_Init+0x42>
 8000134:	200002e1 	.word	0x200002e1
 8000138:	200002e3 	.word	0x200002e3
 800013c:	200002e0 	.word	0x200002e0

08000140 <Ap_ST32BL_SendByte>:
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_ST32BL_SendByte( u8 ByteData )
{
 8000140:	b508      	push	{r3, lr}
	Hw_Uart_Putch( Ap_ST32BL_UartPort, ByteData );
 8000142:	f240 22e0 	movw	r2, #736	; 0x2e0
 8000146:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800014a:	f640 034d 	movw	r3, #2125	; 0x84d
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_ST32BL_SendByte( u8 ByteData )
{
 800014e:	4601      	mov	r1, r0
	Hw_Uart_Putch( Ap_ST32BL_UartPort, ByteData );
 8000150:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000154:	7810      	ldrb	r0, [r2, #0]
 8000156:	4798      	blx	r3
 8000158:	bd08      	pop	{r3, pc}
 800015a:	bf00      	nop

0800015c <Ap_ST32BL_ReceiveByte>:
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u8 Ap_ST32BL_ReceiveByte( void )
{
 800015c:	b508      	push	{r3, lr}
	Hw_Uart_Getch( Ap_ST32BL_UartPort );
 800015e:	f240 22e0 	movw	r2, #736	; 0x2e0
 8000162:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000166:	f640 030d 	movw	r3, #2061	; 0x80d
 800016a:	7810      	ldrb	r0, [r2, #0]
 800016c:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000170:	4798      	blx	r3
}
 8000172:	bd08      	pop	{r3, pc}

08000174 <Ap_ST32BL_WaitCmd>:
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u8 Ap_ST32BL_WaitCmd( void )
{
 8000174:	b538      	push	{r3, r4, r5, lr}
	u8 Ch;
	u8 Cmd = 0xFF;
	u8 CmdC;

	Cmd = Ap_ST32BL_ReceiveByte();
 8000176:	4d13      	ldr	r5, [pc, #76]	; (80001c4 <Ap_ST32BL_WaitCmd+0x50>)
 8000178:	47a8      	blx	r5

	switch( Cmd )
 800017a:	2831      	cmp	r0, #49	; 0x31
{
	u8 Ch;
	u8 Cmd = 0xFF;
	u8 CmdC;

	Cmd = Ap_ST32BL_ReceiveByte();
 800017c:	4604      	mov	r4, r0

	switch( Cmd )
 800017e:	d007      	beq.n	8000190 <Ap_ST32BL_WaitCmd+0x1c>
 8000180:	d90c      	bls.n	800019c <Ap_ST32BL_WaitCmd+0x28>
 8000182:	2873      	cmp	r0, #115	; 0x73
 8000184:	d004      	beq.n	8000190 <Ap_ST32BL_WaitCmd+0x1c>
 8000186:	d911      	bls.n	80001ac <Ap_ST32BL_WaitCmd+0x38>
 8000188:	287f      	cmp	r0, #127	; 0x7f
 800018a:	d002      	beq.n	8000192 <Ap_ST32BL_WaitCmd+0x1e>
 800018c:	28ff      	cmp	r0, #255	; 0xff
 800018e:	d111      	bne.n	80001b4 <Ap_ST32BL_WaitCmd+0x40>
		case STM32_CMD_WRITE_FLASH:
		case STM32_CMD_WRITE_UNPROTECT:
		case STM32_CMD_READ_FLASH:
		case STM32_CMD_GO:
		case 0xFF:
			CmdC = Ap_ST32BL_ReceiveByte();
 8000190:	47a8      	blx	r5

			Ap_ST32BL_SendByte(STM32_COMM_ACK);				
 8000192:	2079      	movs	r0, #121	; 0x79
 8000194:	4b0c      	ldr	r3, [pc, #48]	; (80001c8 <Ap_ST32BL_WaitCmd+0x54>)
 8000196:	4798      	blx	r3
			break;
	}


	return Cmd;
}
 8000198:	4620      	mov	r0, r4
 800019a:	bd38      	pop	{r3, r4, r5, pc}
	u8 Cmd = 0xFF;
	u8 CmdC;

	Cmd = Ap_ST32BL_ReceiveByte();

	switch( Cmd )
 800019c:	2802      	cmp	r0, #2
 800019e:	d0f7      	beq.n	8000190 <Ap_ST32BL_WaitCmd+0x1c>
 80001a0:	d90d      	bls.n	80001be <Ap_ST32BL_WaitCmd+0x4a>
 80001a2:	2811      	cmp	r0, #17
 80001a4:	d0f4      	beq.n	8000190 <Ap_ST32BL_WaitCmd+0x1c>
 80001a6:	2821      	cmp	r0, #33	; 0x21
 80001a8:	d104      	bne.n	80001b4 <Ap_ST32BL_WaitCmd+0x40>
 80001aa:	e7f1      	b.n	8000190 <Ap_ST32BL_WaitCmd+0x1c>
 80001ac:	f1a0 0343 	sub.w	r3, r0, #67	; 0x43
 80001b0:	2b01      	cmp	r3, #1
 80001b2:	d9ed      	bls.n	8000190 <Ap_ST32BL_WaitCmd+0x1c>

			Ap_ST32BL_SendByte(STM32_COMM_ACK);				
			break;

		default:
			Ap_ST32BL_SendByte(STM32_COMM_NACK);
 80001b4:	201f      	movs	r0, #31
 80001b6:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <Ap_ST32BL_WaitCmd+0x54>)
 80001b8:	4798      	blx	r3
			break;
	}


	return Cmd;
}
 80001ba:	4620      	mov	r0, r4
 80001bc:	bd38      	pop	{r3, r4, r5, pc}
	u8 Cmd = 0xFF;
	u8 CmdC;

	Cmd = Ap_ST32BL_ReceiveByte();

	switch( Cmd )
 80001be:	2800      	cmp	r0, #0
 80001c0:	d0e6      	beq.n	8000190 <Ap_ST32BL_WaitCmd+0x1c>
 80001c2:	e7f7      	b.n	80001b4 <Ap_ST32BL_WaitCmd+0x40>
 80001c4:	0800015d 	.word	0x0800015d
 80001c8:	08000141 	.word	0x08000141

080001cc <Ap_ST32BL_EraseFlash>:
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u8 Ap_ST32BL_EraseFlash( void )
{
 80001cc:	b500      	push	{lr}
	u32 i;

	
	volatile FLASH_Status FLASHStatus;

	FLASHStatus = FLASH_COMPLETE;
 80001ce:	2304      	movs	r3, #4
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u8 Ap_ST32BL_EraseFlash( void )
{
 80001d0:	b083      	sub	sp, #12
	u32 i;

	
	volatile FLASH_Status FLASHStatus;

	FLASHStatus = FLASH_COMPLETE;
 80001d2:	f88d 3007 	strb.w	r3, [sp, #7]

	FLASH_Unlock();
 80001d6:	4b10      	ldr	r3, [pc, #64]	; (8000218 <Ap_ST32BL_EraseFlash+0x4c>)
 80001d8:	4798      	blx	r3
	FLASH_ClearFlag(FLASH_FLAG_BSY | FLASH_FLAG_EOP | FLASH_FLAG_PGERR | FLASH_FLAG_WRPRTERR);
 80001da:	4b10      	ldr	r3, [pc, #64]	; (800021c <Ap_ST32BL_EraseFlash+0x50>)
 80001dc:	2035      	movs	r0, #53	; 0x35
 80001de:	4798      	blx	r3
 80001e0:	4b0f      	ldr	r3, [pc, #60]	; (8000220 <Ap_ST32BL_EraseFlash+0x54>)


	for( i=0; i<128; i++ )
	{
		Ap_ST32BL_EraseSectorFlag[i] = FALSE;
 80001e2:	2100      	movs	r1, #0
     TITLE   : Ap_ST32BL_EraseFlash
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u8 Ap_ST32BL_EraseFlash( void )
 80001e4:	f103 0280 	add.w	r2, r3, #128	; 0x80
	FLASH_ClearFlag(FLASH_FLAG_BSY | FLASH_FLAG_EOP | FLASH_FLAG_PGERR | FLASH_FLAG_WRPRTERR);


	for( i=0; i<128; i++ )
	{
		Ap_ST32BL_EraseSectorFlag[i] = FALSE;
 80001e8:	f803 1f01 	strb.w	r1, [r3, #1]!

	FLASH_Unlock();
	FLASH_ClearFlag(FLASH_FLAG_BSY | FLASH_FLAG_EOP | FLASH_FLAG_PGERR | FLASH_FLAG_WRPRTERR);


	for( i=0; i<128; i++ )
 80001ec:	4293      	cmp	r3, r2
 80001ee:	d1fb      	bne.n	80001e8 <Ap_ST32BL_EraseFlash+0x1c>
	}

	PageCount = 0;


	FLASHStatus = FLASH_ErasePage(HW_ST32BL_FLASH_START_ADDRESS);
 80001f0:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 80001f4:	4b0b      	ldr	r3, [pc, #44]	; (8000224 <Ap_ST32BL_EraseFlash+0x58>)
 80001f6:	f6c0 0000 	movt	r0, #2048	; 0x800
 80001fa:	4798      	blx	r3
 80001fc:	f88d 0007 	strb.w	r0, [sp, #7]

	Ap_ST32BL_EraseSectorFlag[PageCount] = TRUE;

	if( FLASHStatus != FLASH_COMPLETE )
 8000200:	f89d 3007 	ldrb.w	r3, [sp, #7]
	PageCount = 0;


	FLASHStatus = FLASH_ErasePage(HW_ST32BL_FLASH_START_ADDRESS);

	Ap_ST32BL_EraseSectorFlag[PageCount] = TRUE;
 8000204:	4a08      	ldr	r2, [pc, #32]	; (8000228 <Ap_ST32BL_EraseFlash+0x5c>)
 8000206:	2001      	movs	r0, #1

	if( FLASHStatus != FLASH_COMPLETE )
 8000208:	2b04      	cmp	r3, #4
	PageCount = 0;


	FLASHStatus = FLASH_ErasePage(HW_ST32BL_FLASH_START_ADDRESS);

	Ap_ST32BL_EraseSectorFlag[PageCount] = TRUE;
 800020a:	7010      	strb	r0, [r2, #0]

	if( FLASHStatus != FLASH_COMPLETE )
 800020c:	d002      	beq.n	8000214 <Ap_ST32BL_EraseFlash+0x48>
	{
		FLASH_Lock();
 800020e:	4b07      	ldr	r3, [pc, #28]	; (800022c <Ap_ST32BL_EraseFlash+0x60>)
 8000210:	4798      	blx	r3
		Ret = FALSE;
 8000212:	2000      	movs	r0, #0
	}

	return Ret;
}
 8000214:	b003      	add	sp, #12
 8000216:	bd00      	pop	{pc}
 8000218:	08002649 	.word	0x08002649
 800021c:	0800267d 	.word	0x0800267d
 8000220:	200002e3 	.word	0x200002e3
 8000224:	08002761 	.word	0x08002761
 8000228:	200002e4 	.word	0x200002e4
 800022c:	08002669 	.word	0x08002669

08000230 <Ap_ST32BL_CheckFlashSector>:
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u8 Ap_ST32BL_CheckFlashSector( u32 Address )
{
 8000230:	b570      	push	{r4, r5, r6, lr}
	volatile FLASH_Status FLASHStatus;

	FLASHStatus = FLASH_COMPLETE;


	if( Address < HW_ST32BL_FLASH_START_ADDRESS	) return FALSE;
 8000232:	f642 73ff 	movw	r3, #12287	; 0x2fff
 8000236:	f6c0 0300 	movt	r3, #2048	; 0x800
	u8  Ret = TRUE;
	u32 PageCount;

	volatile FLASH_Status FLASHStatus;

	FLASHStatus = FLASH_COMPLETE;
 800023a:	2204      	movs	r2, #4
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u8 Ap_ST32BL_CheckFlashSector( u32 Address )
{
 800023c:	b082      	sub	sp, #8
	volatile FLASH_Status FLASHStatus;

	FLASHStatus = FLASH_COMPLETE;


	if( Address < HW_ST32BL_FLASH_START_ADDRESS	) return FALSE;
 800023e:	4298      	cmp	r0, r3
	u8  Ret = TRUE;
	u32 PageCount;

	volatile FLASH_Status FLASHStatus;

	FLASHStatus = FLASH_COMPLETE;
 8000240:	f88d 2007 	strb.w	r2, [sp, #7]


	if( Address < HW_ST32BL_FLASH_START_ADDRESS	) return FALSE;
 8000244:	d90a      	bls.n	800025c <Ap_ST32BL_CheckFlashSector+0x2c>


	PageCount = (Address - HW_ST32BL_FLASH_START_ADDRESS) / HW_ST32BL_FLASH_PAGE_SIZE;
 8000246:	f100 4478 	add.w	r4, r0, #4160749568	; 0xf8000000
 800024a:	f5a4 5440 	sub.w	r4, r4, #12288	; 0x3000


	if( Ap_ST32BL_EraseSectorFlag[PageCount] == FALSE )
 800024e:	4d0d      	ldr	r5, [pc, #52]	; (8000284 <Ap_ST32BL_CheckFlashSector+0x54>)


	if( Address < HW_ST32BL_FLASH_START_ADDRESS	) return FALSE;


	PageCount = (Address - HW_ST32BL_FLASH_START_ADDRESS) / HW_ST32BL_FLASH_PAGE_SIZE;
 8000250:	0aa4      	lsrs	r4, r4, #10


	if( Ap_ST32BL_EraseSectorFlag[PageCount] == FALSE )
 8000252:	5d2e      	ldrb	r6, [r5, r4]
 8000254:	b126      	cbz	r6, 8000260 <Ap_ST32BL_CheckFlashSector+0x30>
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u8 Ap_ST32BL_CheckFlashSector( u32 Address )
{
	u8  Ret = TRUE;
 8000256:	2001      	movs	r0, #1
		}
	}


	return Ret;
}
 8000258:	b002      	add	sp, #8
 800025a:	bd70      	pop	{r4, r5, r6, pc}
	volatile FLASH_Status FLASHStatus;

	FLASHStatus = FLASH_COMPLETE;


	if( Address < HW_ST32BL_FLASH_START_ADDRESS	) return FALSE;
 800025c:	2000      	movs	r0, #0
 800025e:	e7fb      	b.n	8000258 <Ap_ST32BL_CheckFlashSector+0x28>
	PageCount = (Address - HW_ST32BL_FLASH_START_ADDRESS) / HW_ST32BL_FLASH_PAGE_SIZE;


	if( Ap_ST32BL_EraseSectorFlag[PageCount] == FALSE )
	{
		FLASHStatus = FLASH_ErasePage(HW_ST32BL_FLASH_START_ADDRESS + (HW_ST32BL_FLASH_PAGE_SIZE * PageCount));
 8000260:	f504 3000 	add.w	r0, r4, #131072	; 0x20000
 8000264:	300c      	adds	r0, #12
 8000266:	0280      	lsls	r0, r0, #10
 8000268:	4b07      	ldr	r3, [pc, #28]	; (8000288 <Ap_ST32BL_CheckFlashSector+0x58>)
 800026a:	4798      	blx	r3
 800026c:	f88d 0007 	strb.w	r0, [sp, #7]

		Ap_ST32BL_EraseSectorFlag[PageCount] = TRUE;

		if( FLASHStatus != FLASH_COMPLETE )
 8000270:	f89d 3007 	ldrb.w	r3, [sp, #7]

	if( Ap_ST32BL_EraseSectorFlag[PageCount] == FALSE )
	{
		FLASHStatus = FLASH_ErasePage(HW_ST32BL_FLASH_START_ADDRESS + (HW_ST32BL_FLASH_PAGE_SIZE * PageCount));

		Ap_ST32BL_EraseSectorFlag[PageCount] = TRUE;
 8000274:	2201      	movs	r2, #1

		if( FLASHStatus != FLASH_COMPLETE )
 8000276:	2b04      	cmp	r3, #4

	if( Ap_ST32BL_EraseSectorFlag[PageCount] == FALSE )
	{
		FLASHStatus = FLASH_ErasePage(HW_ST32BL_FLASH_START_ADDRESS + (HW_ST32BL_FLASH_PAGE_SIZE * PageCount));

		Ap_ST32BL_EraseSectorFlag[PageCount] = TRUE;
 8000278:	552a      	strb	r2, [r5, r4]

		if( FLASHStatus != FLASH_COMPLETE )
 800027a:	d0ec      	beq.n	8000256 <Ap_ST32BL_CheckFlashSector+0x26>
		{
			FLASH_Lock();
 800027c:	4b03      	ldr	r3, [pc, #12]	; (800028c <Ap_ST32BL_CheckFlashSector+0x5c>)
 800027e:	4798      	blx	r3
			Ret = FALSE;
 8000280:	4630      	mov	r0, r6
 8000282:	e7e9      	b.n	8000258 <Ap_ST32BL_CheckFlashSector+0x28>
 8000284:	200002e4 	.word	0x200002e4
 8000288:	08002761 	.word	0x08002761
 800028c:	08002669 	.word	0x08002669

08000290 <Ap_ST32BL_WriteFlash>:
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u8 Ap_ST32BL_WriteFlash( u32 Address, u8 *pData, u32 DataSize )
{
 8000290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u32 DataIndex;
	u8	Ret = TRUE;
	volatile FLASH_Status FLASHStatus;


	WriteSize = DataSize / 4;	// 32Bit로 변경 
 8000294:	0896      	lsrs	r6, r2, #2

	if( (WriteSize%4) > 0 ) WriteSize++;
 8000296:	07b3      	lsls	r3, r6, #30
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u8 Ap_ST32BL_WriteFlash( u32 Address, u8 *pData, u32 DataSize )
{
 8000298:	b082      	sub	sp, #8
	if( (WriteSize%4) > 0 ) WriteSize++;


	//-- 섹터가 지워졌는지 검사
	//
	if( Ap_ST32BL_CheckFlashSector(Address) == FALSE )
 800029a:	4b15      	ldr	r3, [pc, #84]	; (80002f0 <Ap_ST32BL_WriteFlash+0x60>)
	volatile FLASH_Status FLASHStatus;


	WriteSize = DataSize / 4;	// 32Bit로 변경 

	if( (WriteSize%4) > 0 ) WriteSize++;
 800029c:	bf18      	it	ne
 800029e:	3601      	addne	r6, #1
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u8 Ap_ST32BL_WriteFlash( u32 Address, u8 *pData, u32 DataSize )
{
 80002a0:	4607      	mov	r7, r0
 80002a2:	460c      	mov	r4, r1
	if( (WriteSize%4) > 0 ) WriteSize++;


	//-- 섹터가 지워졌는지 검사
	//
	if( Ap_ST32BL_CheckFlashSector(Address) == FALSE )
 80002a4:	4798      	blx	r3
 80002a6:	b1e0      	cbz	r0, 80002e2 <Ap_ST32BL_WriteFlash+0x52>
	}


	DataIndex = 0;

	for( i=0; i<WriteSize; i++ )
 80002a8:	b1fe      	cbz	r6, 80002ea <Ap_ST32BL_WriteFlash+0x5a>
 80002aa:	f8df 8048 	ldr.w	r8, [pc, #72]	; 80002f4 <Ap_ST32BL_WriteFlash+0x64>
 80002ae:	2500      	movs	r5, #0
 80002b0:	1b3f      	subs	r7, r7, r4
 80002b2:	e001      	b.n	80002b8 <Ap_ST32BL_WriteFlash+0x28>
 80002b4:	42b5      	cmp	r5, r6
 80002b6:	d018      	beq.n	80002ea <Ap_ST32BL_WriteFlash+0x5a>
	{
		WriteData  = pData[ DataIndex++ ] << 0;
		WriteData |= pData[ DataIndex++ ] << 8;
 80002b8:	7863      	ldrb	r3, [r4, #1]
		WriteData |= pData[ DataIndex++ ] << 16;
 80002ba:	78a0      	ldrb	r0, [r4, #2]

	DataIndex = 0;

	for( i=0; i<WriteSize; i++ )
	{
		WriteData  = pData[ DataIndex++ ] << 0;
 80002bc:	7822      	ldrb	r2, [r4, #0]
		WriteData |= pData[ DataIndex++ ] << 8;
		WriteData |= pData[ DataIndex++ ] << 16;
		WriteData |= pData[ DataIndex++ ] << 24;
 80002be:	78e1      	ldrb	r1, [r4, #3]
	DataIndex = 0;

	for( i=0; i<WriteSize; i++ )
	{
		WriteData  = pData[ DataIndex++ ] << 0;
		WriteData |= pData[ DataIndex++ ] << 8;
 80002c0:	021b      	lsls	r3, r3, #8
 80002c2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
		WriteData |= pData[ DataIndex++ ] << 16;
 80002c6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
		WriteData |= pData[ DataIndex++ ] << 24;

		FLASHStatus = FLASH_ProgramWord(StartAddress+i*4, WriteData);
 80002ca:	1938      	adds	r0, r7, r4
 80002cc:	4319      	orrs	r1, r3
 80002ce:	47c0      	blx	r8
 80002d0:	f88d 0007 	strb.w	r0, [sp, #7]

		if( FLASHStatus != FLASH_COMPLETE )
 80002d4:	f89d 3007 	ldrb.w	r3, [sp, #7]
	}


	DataIndex = 0;

	for( i=0; i<WriteSize; i++ )
 80002d8:	3501      	adds	r5, #1
		WriteData |= pData[ DataIndex++ ] << 16;
		WriteData |= pData[ DataIndex++ ] << 24;

		FLASHStatus = FLASH_ProgramWord(StartAddress+i*4, WriteData);

		if( FLASHStatus != FLASH_COMPLETE )
 80002da:	2b04      	cmp	r3, #4
 80002dc:	f104 0404 	add.w	r4, r4, #4
 80002e0:	d0e8      	beq.n	80002b4 <Ap_ST32BL_WriteFlash+0x24>

	//-- 섹터가 지워졌는지 검사
	//
	if( Ap_ST32BL_CheckFlashSector(Address) == FALSE )
	{
		return FALSE;
 80002e2:	2000      	movs	r0, #0
			break;
		}
	}

	return Ret;
}
 80002e4:	b002      	add	sp, #8
 80002e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	u32 StartAddress = Address;
	u32 WriteSize;
	u32 WriteData;
	u32 i;
	u32 DataIndex;
	u8	Ret = TRUE;
 80002ea:	2001      	movs	r0, #1
 80002ec:	e7fa      	b.n	80002e4 <Ap_ST32BL_WriteFlash+0x54>
 80002ee:	bf00      	nop
 80002f0:	08000231 	.word	0x08000231
 80002f4:	08002711 	.word	0x08002711

080002f8 <Ap_ST32BL_Main>:
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_ST32BL_Main( void )
{
 80002f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u32 	  RegData;

	//JumpToAddress = (pFunction)(HW_ST32BL_FLASH_START_ADDRESS + 4);


	JumpAddress =  *(u32 *)(HW_ST32BL_FLASH_START_ADDRESS + 4);
 80002fc:	f243 0604 	movw	r6, #12292	; 0x3004
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_ST32BL_Main( void )
{
 8000300:	b0d3      	sub	sp, #332	; 0x14c
	u32 	  RegData;

	//JumpToAddress = (pFunction)(HW_ST32BL_FLASH_START_ADDRESS + 4);


	JumpAddress =  *(u32 *)(HW_ST32BL_FLASH_START_ADDRESS + 4);
 8000302:	f6c0 0600 	movt	r6, #2048	; 0x800
	CLR_BIT(RegData, 17);			// UART2
	CLR_BIT(RegData, 18);			// UART3
	CLR_BIT(RegData, 19);			// UART4
	CLR_BIT(RegData, 20);			// UART5

	REG_RCC_APB1RSTR = RegData;
 8000306:	f241 0310 	movw	r3, #4112	; 0x1010
	u32 	  RegData;

	//JumpToAddress = (pFunction)(HW_ST32BL_FLASH_START_ADDRESS + 4);


	JumpAddress =  *(u32 *)(HW_ST32BL_FLASH_START_ADDRESS + 4);
 800030a:	9601      	str	r6, [sp, #4]
	

	JumpToApp = (pFunction) JumpAddress;


	REG_RCC_AHBENR  = 0x00000014;
 800030c:	3304      	adds	r3, #4
	REG_RCC_APB1ENR = 0x00000000;
 800030e:	f241 061c 	movw	r6, #4124	; 0x101c
	

	JumpToApp = (pFunction) JumpAddress;


	REG_RCC_AHBENR  = 0x00000014;
 8000312:	f2c4 0302 	movt	r3, #16386	; 0x4002
	REG_RCC_APB1ENR = 0x00000000;
 8000316:	f2c4 0602 	movt	r6, #16386	; 0x4002
	

	JumpToApp = (pFunction) JumpAddress;


	REG_RCC_AHBENR  = 0x00000014;
 800031a:	9302      	str	r3, [sp, #8]
	REG_RCC_APB1ENR = 0x00000000;
 800031c:	9603      	str	r6, [sp, #12]
	REG_RCC_APB2ENR = 0x00000000;	
 800031e:	f241 0318 	movw	r3, #4120	; 0x1018
	CLR_BIT(RegData, 17);			// UART2
	CLR_BIT(RegData, 18);			// UART3
	CLR_BIT(RegData, 19);			// UART4
	CLR_BIT(RegData, 20);			// UART5

	REG_RCC_APB1RSTR = RegData;
 8000322:	f241 0610 	movw	r6, #4112	; 0x1010
	JumpToApp = (pFunction) JumpAddress;


	REG_RCC_AHBENR  = 0x00000014;
	REG_RCC_APB1ENR = 0x00000000;
	REG_RCC_APB2ENR = 0x00000000;	
 8000326:	f2c4 0302 	movt	r3, #16386	; 0x4002
	CLR_BIT(RegData, 17);			// UART2
	CLR_BIT(RegData, 18);			// UART3
	CLR_BIT(RegData, 19);			// UART4
	CLR_BIT(RegData, 20);			// UART5

	REG_RCC_APB1RSTR = RegData;
 800032a:	f2c4 0602 	movt	r6, #16386	; 0x4002
 800032e:	f8df 9144 	ldr.w	r9, [pc, #324]	; 8000474 <Ap_ST32BL_Main+0x17c>
 8000332:	4f4e      	ldr	r7, [pc, #312]	; (800046c <Ap_ST32BL_Main+0x174>)
 8000334:	4c4e      	ldr	r4, [pc, #312]	; (8000470 <Ap_ST32BL_Main+0x178>)
 8000336:	ad07      	add	r5, sp, #28
 8000338:	f10d 081f 	add.w	r8, sp, #31
	JumpToApp = (pFunction) JumpAddress;


	REG_RCC_AHBENR  = 0x00000014;
	REG_RCC_APB1ENR = 0x00000000;
	REG_RCC_APB2ENR = 0x00000000;	
 800033c:	9304      	str	r3, [sp, #16]
	CLR_BIT(RegData, 17);			// UART2
	CLR_BIT(RegData, 18);			// UART3
	CLR_BIT(RegData, 19);			// UART4
	CLR_BIT(RegData, 20);			// UART5

	REG_RCC_APB1RSTR = RegData;
 800033e:	9605      	str	r6, [sp, #20]
	while(1)
	{
		//Hw_Uart_Printf(HW_UART_VCOM, "ST32BL\n");
		//Hw_Timer_Delay_ms(500);

		Cmd = Ap_ST32BL_WaitCmd();
 8000340:	47c8      	blx	r9
		{

		}


		if( Cmd == STM32_CMD_GET_COMMAND )
 8000342:	2800      	cmp	r0, #0
 8000344:	d048      	beq.n	80003d8 <Ap_ST32BL_Main+0xe0>
			Ap_ST32BL_SendByte(0x22);
			Ap_ST32BL_SendByte(STM32_COMM_ACK);
		}


		if( Cmd == STM32_CMD_GET_ID )
 8000346:	2802      	cmp	r0, #2
 8000348:	f000 8084 	beq.w	8000454 <Ap_ST32BL_Main+0x15c>
			Ap_ST32BL_SendByte(0x10);
			Ap_ST32BL_SendByte(STM32_COMM_ACK);			
		}


		if( Cmd == STM32_CMD_ERASE_FLASH )
 800034c:	2843      	cmp	r0, #67	; 0x43
 800034e:	d049      	beq.n	80003e4 <Ap_ST32BL_Main+0xec>
		}




		if( Cmd == STM32_CMD_WRITE_FLASH )
 8000350:	2831      	cmp	r0, #49	; 0x31
 8000352:	d155      	bne.n	8000400 <Ap_ST32BL_Main+0x108>
     TITLE   : Ap_ST32BL_Main
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_ST32BL_Main( void )
 8000354:	f10d 061b 	add.w	r6, sp, #27
 8000358:	f04f 0a00 	mov.w	sl, #0
			//-- Receive Address 
			//
			CheckSumCalc = 0;
			for( i=0; i<4; i++ )
			{
				Resp[i] = Ap_ST32BL_ReceiveByte();
 800035c:	47a0      	blx	r4
 800035e:	f806 0f01 	strb.w	r0, [r6, #1]!
		{

			//-- Receive Address 
			//
			CheckSumCalc = 0;
			for( i=0; i<4; i++ )
 8000362:	4546      	cmp	r6, r8
			{
				Resp[i] = Ap_ST32BL_ReceiveByte();
				CheckSumCalc ^= Resp[i];	
 8000364:	ea8a 0a00 	eor.w	sl, sl, r0
		{

			//-- Receive Address 
			//
			CheckSumCalc = 0;
			for( i=0; i<4; i++ )
 8000368:	d1f8      	bne.n	800035c <Ap_ST32BL_Main+0x64>
			{
				Resp[i] = Ap_ST32BL_ReceiveByte();
				CheckSumCalc ^= Resp[i];	
			}
			CheckSum = Ap_ST32BL_ReceiveByte();
 800036a:	4b41      	ldr	r3, [pc, #260]	; (8000470 <Ap_ST32BL_Main+0x178>)
 800036c:	4798      	blx	r3

			Address  = Resp[0] << 24;
 800036e:	782b      	ldrb	r3, [r5, #0]
			Address |= Resp[1] << 16;
 8000370:	786a      	ldrb	r2, [r5, #1]
				Resp[i] = Ap_ST32BL_ReceiveByte();
				CheckSumCalc ^= Resp[i];	
			}
			CheckSum = Ap_ST32BL_ReceiveByte();

			Address  = Resp[0] << 24;
 8000372:	061b      	lsls	r3, r3, #24
			Address |= Resp[1] << 16;
			Address |= Resp[2] <<  8;
 8000374:	f895 b002 	ldrb.w	fp, [r5, #2]
				CheckSumCalc ^= Resp[i];	
			}
			CheckSum = Ap_ST32BL_ReceiveByte();

			Address  = Resp[0] << 24;
			Address |= Resp[1] << 16;
 8000378:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
			Address |= Resp[2] <<  8;
			Address |= Resp[3] <<  0;
 800037c:	78eb      	ldrb	r3, [r5, #3]
			}
			CheckSum = Ap_ST32BL_ReceiveByte();

			Address  = Resp[0] << 24;
			Address |= Resp[1] << 16;
			Address |= Resp[2] <<  8;
 800037e:	ea42 2b0b 	orr.w	fp, r2, fp, lsl #8
			Address |= Resp[3] <<  0;
 8000382:	ea4b 0303 	orr.w	r3, fp, r3

			#if HW_ST32BL_USE_DEBUG == 1
			Hw_Uart_Printf(HW_UART_COM1, "Addrr %x %x %x %x %x %x\r\n", Resp[0], Resp[1], Resp[2], Resp[3], CheckSum, CheckSumCalc );
			#endif		

			if( CheckSum == CheckSumCalc )
 8000386:	4582      	cmp	sl, r0
			CheckSum = Ap_ST32BL_ReceiveByte();

			Address  = Resp[0] << 24;
			Address |= Resp[1] << 16;
			Address |= Resp[2] <<  8;
			Address |= Resp[3] <<  0;
 8000388:	9300      	str	r3, [sp, #0]

			#if HW_ST32BL_USE_DEBUG == 1
			Hw_Uart_Printf(HW_UART_COM1, "Addrr %x %x %x %x %x %x\r\n", Resp[0], Resp[1], Resp[2], Resp[3], CheckSum, CheckSumCalc );
			#endif		

			if( CheckSum == CheckSumCalc )
 800038a:	d06c      	beq.n	8000466 <Ap_ST32BL_Main+0x16e>
				Hw_Uart_Printf(HW_UART_COM1, "ACK\r\n");
				#endif	
			}
			else
			{
				Ap_ST32BL_SendByte(STM32_COMM_NACK);	
 800038c:	201f      	movs	r0, #31
 800038e:	47b8      	blx	r7


			//-- Receive Data
			//
			CheckSumCalc = 0;
			Length  = Ap_ST32BL_ReceiveByte();
 8000390:	47a0      	blx	r4

			#if HW_ST32BL_USE_DEBUG == 1
			Hw_Uart_Printf(HW_UART_COM1, "Length %d \r\n", Length );
			#endif	

			for( i=0; i<Length; i++ )
 8000392:	2600      	movs	r6, #0


			//-- Receive Data
			//
			CheckSumCalc = 0;
			Length  = Ap_ST32BL_ReceiveByte();
 8000394:	4683      	mov	fp, r0
			CheckSumCalc ^= Length;
			Length++;
 8000396:	f100 0a01 	add.w	sl, r0, #1
			Hw_Uart_Printf(HW_UART_COM1, "Length %d \r\n", Length );
			#endif	

			for( i=0; i<Length; i++ )
			{
				Resp[i] = Ap_ST32BL_ReceiveByte();
 800039a:	47a0      	blx	r4
 800039c:	55a8      	strb	r0, [r5, r6]

			#if HW_ST32BL_USE_DEBUG == 1
			Hw_Uart_Printf(HW_UART_COM1, "Length %d \r\n", Length );
			#endif	

			for( i=0; i<Length; i++ )
 800039e:	3601      	adds	r6, #1
			{
				Resp[i] = Ap_ST32BL_ReceiveByte();
				CheckSumCalc ^= Resp[i];					
 80003a0:	ea8b 0b00 	eor.w	fp, fp, r0

			#if HW_ST32BL_USE_DEBUG == 1
			Hw_Uart_Printf(HW_UART_COM1, "Length %d \r\n", Length );
			#endif	

			for( i=0; i<Length; i++ )
 80003a4:	45b2      	cmp	sl, r6
			{
				Resp[i] = Ap_ST32BL_ReceiveByte();
				CheckSumCalc ^= Resp[i];					
 80003a6:	fa5f fb8b 	uxtb.w	fp, fp

			#if HW_ST32BL_USE_DEBUG == 1
			Hw_Uart_Printf(HW_UART_COM1, "Length %d \r\n", Length );
			#endif	

			for( i=0; i<Length; i++ )
 80003aa:	d8f6      	bhi.n	800039a <Ap_ST32BL_Main+0xa2>
			{
				Resp[i] = Ap_ST32BL_ReceiveByte();
				CheckSumCalc ^= Resp[i];					
			}
			CheckSum = Ap_ST32BL_ReceiveByte();
 80003ac:	4a30      	ldr	r2, [pc, #192]	; (8000470 <Ap_ST32BL_Main+0x178>)
 80003ae:	4790      	blx	r2


			//-- Flash Write
			//

			Ret = Ap_ST32BL_WriteFlash( Address + HW_ST32BL_FLASH_ADDRESS_OFFSET, Resp, Length );
 80003b0:	9b00      	ldr	r3, [sp, #0]
			for( i=0; i<Length; i++ )
			{
				Resp[i] = Ap_ST32BL_ReceiveByte();
				CheckSumCalc ^= Resp[i];					
			}
			CheckSum = Ap_ST32BL_ReceiveByte();
 80003b2:	4606      	mov	r6, r0


			//-- Flash Write
			//

			Ret = Ap_ST32BL_WriteFlash( Address + HW_ST32BL_FLASH_ADDRESS_OFFSET, Resp, Length );
 80003b4:	f503 5040 	add.w	r0, r3, #12288	; 0x3000
 80003b8:	f240 2391 	movw	r3, #657	; 0x291
 80003bc:	4629      	mov	r1, r5
 80003be:	4652      	mov	r2, sl
 80003c0:	f6c0 0300 	movt	r3, #2048	; 0x800
 80003c4:	4798      	blx	r3

		
			if( CheckSum == CheckSumCalc && Ret == TRUE ) 	
 80003c6:	2801      	cmp	r0, #1
 80003c8:	bf08      	it	eq
 80003ca:	45b3      	cmpeq	fp, r6
 80003cc:	d115      	bne.n	80003fa <Ap_ST32BL_Main+0x102>
		{
			Resp[0] = Ap_ST32BL_ReceiveByte();
			Resp[1] = Ap_ST32BL_ReceiveByte();


			if( Ap_ST32BL_EraseFlash() == TRUE )	Ap_ST32BL_SendByte(STM32_COMM_ACK);
 80003ce:	2079      	movs	r0, #121	; 0x79
 80003d0:	47b8      	blx	r7
	while(1)
	{
		//Hw_Uart_Printf(HW_UART_VCOM, "ST32BL\n");
		//Hw_Timer_Delay_ms(500);

		Cmd = Ap_ST32BL_WaitCmd();
 80003d2:	47c8      	blx	r9
		{

		}


		if( Cmd == STM32_CMD_GET_COMMAND )
 80003d4:	2800      	cmp	r0, #0
 80003d6:	d1b6      	bne.n	8000346 <Ap_ST32BL_Main+0x4e>
		{
			Ap_ST32BL_SendByte(0x00);
 80003d8:	47b8      	blx	r7
			Ap_ST32BL_SendByte(0x22);
 80003da:	2022      	movs	r0, #34	; 0x22
 80003dc:	47b8      	blx	r7
			Ap_ST32BL_SendByte(STM32_COMM_ACK);
 80003de:	2079      	movs	r0, #121	; 0x79
 80003e0:	47b8      	blx	r7
 80003e2:	e7ad      	b.n	8000340 <Ap_ST32BL_Main+0x48>
		}


		if( Cmd == STM32_CMD_ERASE_FLASH )
		{
			Resp[0] = Ap_ST32BL_ReceiveByte();
 80003e4:	47a0      	blx	r4
 80003e6:	7028      	strb	r0, [r5, #0]
			Resp[1] = Ap_ST32BL_ReceiveByte();
 80003e8:	47a0      	blx	r4


			if( Ap_ST32BL_EraseFlash() == TRUE )	Ap_ST32BL_SendByte(STM32_COMM_ACK);
 80003ea:	f240 13cd 	movw	r3, #461	; 0x1cd
 80003ee:	f6c0 0300 	movt	r3, #2048	; 0x800


		if( Cmd == STM32_CMD_ERASE_FLASH )
		{
			Resp[0] = Ap_ST32BL_ReceiveByte();
			Resp[1] = Ap_ST32BL_ReceiveByte();
 80003f2:	7068      	strb	r0, [r5, #1]


			if( Ap_ST32BL_EraseFlash() == TRUE )	Ap_ST32BL_SendByte(STM32_COMM_ACK);
 80003f4:	4798      	blx	r3
 80003f6:	2801      	cmp	r0, #1
 80003f8:	d0e9      	beq.n	80003ce <Ap_ST32BL_Main+0xd6>
			else									Ap_ST32BL_SendByte(STM32_COMM_NACK);
 80003fa:	201f      	movs	r0, #31
 80003fc:	47b8      	blx	r7
 80003fe:	e79f      	b.n	8000340 <Ap_ST32BL_Main+0x48>
		}
		

		//-- Go Command
		//
		if( Cmd == STM32_CMD_GO )
 8000400:	2821      	cmp	r0, #33	; 0x21
 8000402:	d19d      	bne.n	8000340 <Ap_ST32BL_Main+0x48>
     TITLE   : Ap_ST32BL_Main
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_ST32BL_Main( void )
 8000404:	f10d 061b 	add.w	r6, sp, #27
			//-- Receive Address 
			//
			CheckSumCalc = 0;
			for( i=0; i<4; i++ )
			{
				Resp[i] = Ap_ST32BL_ReceiveByte();
 8000408:	47a0      	blx	r4
 800040a:	f806 0f01 	strb.w	r0, [r6, #1]!
		if( Cmd == STM32_CMD_GO )
		{
			//-- Receive Address 
			//
			CheckSumCalc = 0;
			for( i=0; i<4; i++ )
 800040e:	4546      	cmp	r6, r8
 8000410:	d1fa      	bne.n	8000408 <Ap_ST32BL_Main+0x110>
			{
				Resp[i] = Ap_ST32BL_ReceiveByte();
				CheckSumCalc ^= Resp[i];	
			}
			CheckSum = Ap_ST32BL_ReceiveByte();
 8000412:	4b17      	ldr	r3, [pc, #92]	; (8000470 <Ap_ST32BL_Main+0x178>)
 8000414:	4798      	blx	r3
			Address |= Resp[3] <<  0;	
			

			Ap_ST32BL_SendByte(STM32_COMM_ACK);	

			Hw_Timer_Delay_ms(100);
 8000416:	f640 2669 	movw	r6, #2665	; 0xa69
			Address |= Resp[1] << 16;
			Address |= Resp[2] <<  8;
			Address |= Resp[3] <<  0;	
			

			Ap_ST32BL_SendByte(STM32_COMM_ACK);	
 800041a:	2079      	movs	r0, #121	; 0x79
 800041c:	47b8      	blx	r7

			Hw_Timer_Delay_ms(100);
 800041e:	f6c0 0600 	movt	r6, #2048	; 0x800
 8000422:	2064      	movs	r0, #100	; 0x64
 8000424:	47b0      	blx	r6


	JumpAddress =  *(u32 *)(HW_ST32BL_FLASH_START_ADDRESS + 4);
	

	JumpToApp = (pFunction) JumpAddress;
 8000426:	9e01      	ldr	r6, [sp, #4]


	REG_RCC_AHBENR  = 0x00000014;
 8000428:	2014      	movs	r0, #20


	JumpAddress =  *(u32 *)(HW_ST32BL_FLASH_START_ADDRESS + 4);
	

	JumpToApp = (pFunction) JumpAddress;
 800042a:	6831      	ldr	r1, [r6, #0]


	REG_RCC_AHBENR  = 0x00000014;
 800042c:	9e02      	ldr	r6, [sp, #8]
	REG_RCC_APB1ENR = 0x00000000;
 800042e:	2200      	movs	r2, #0
	

	JumpToApp = (pFunction) JumpAddress;


	REG_RCC_AHBENR  = 0x00000014;
 8000430:	6030      	str	r0, [r6, #0]
	REG_RCC_APB1ENR = 0x00000000;
 8000432:	9e03      	ldr	r6, [sp, #12]

	RegData = 0xFFFFFFFF;

	CLR_BIT(RegData, 14);			// UART1
	
	REG_RCC_APB2RSTR = RegData;
 8000434:	f241 030c 	movw	r3, #4108	; 0x100c

	JumpToApp = (pFunction) JumpAddress;


	REG_RCC_AHBENR  = 0x00000014;
	REG_RCC_APB1ENR = 0x00000000;
 8000438:	6032      	str	r2, [r6, #0]
	REG_RCC_APB2ENR = 0x00000000;	
 800043a:	9e04      	ldr	r6, [sp, #16]

	RegData = 0xFFFFFFFF;

	CLR_BIT(RegData, 14);			// UART1
	
	REG_RCC_APB2RSTR = RegData;
 800043c:	f2c4 0302 	movt	r3, #16386	; 0x4002
	JumpToApp = (pFunction) JumpAddress;


	REG_RCC_AHBENR  = 0x00000014;
	REG_RCC_APB1ENR = 0x00000000;
	REG_RCC_APB2ENR = 0x00000000;	
 8000440:	6032      	str	r2, [r6, #0]
	CLR_BIT(RegData, 17);			// UART2
	CLR_BIT(RegData, 18);			// UART3
	CLR_BIT(RegData, 19);			// UART4
	CLR_BIT(RegData, 20);			// UART5

	REG_RCC_APB1RSTR = RegData;
 8000442:	9e05      	ldr	r6, [sp, #20]
 8000444:	f46f 12f0 	mvn.w	r2, #1966080	; 0x1e0000
 8000448:	6032      	str	r2, [r6, #0]

	RegData = 0xFFFFFFFF;

	CLR_BIT(RegData, 14);			// UART1
	
	REG_RCC_APB2RSTR = RegData;
 800044a:	f46f 4280 	mvn.w	r2, #16384	; 0x4000
 800044e:	601a      	str	r2, [r3, #0]


	JumpToApp();
 8000450:	4788      	blx	r1
 8000452:	e775      	b.n	8000340 <Ap_ST32BL_Main+0x48>
		}


		if( Cmd == STM32_CMD_GET_ID )
		{
			Ap_ST32BL_SendByte(0x01);
 8000454:	2001      	movs	r0, #1
 8000456:	47b8      	blx	r7
			Ap_ST32BL_SendByte(0x04);
 8000458:	2004      	movs	r0, #4
 800045a:	47b8      	blx	r7
			Ap_ST32BL_SendByte(0x10);
 800045c:	2010      	movs	r0, #16
 800045e:	47b8      	blx	r7
			Ap_ST32BL_SendByte(STM32_COMM_ACK);			
 8000460:	2079      	movs	r0, #121	; 0x79
 8000462:	47b8      	blx	r7
 8000464:	e76c      	b.n	8000340 <Ap_ST32BL_Main+0x48>
			Hw_Uart_Printf(HW_UART_COM1, "Addrr %x %x %x %x %x %x\r\n", Resp[0], Resp[1], Resp[2], Resp[3], CheckSum, CheckSumCalc );
			#endif		

			if( CheckSum == CheckSumCalc )
			{
				Ap_ST32BL_SendByte(STM32_COMM_ACK);
 8000466:	2079      	movs	r0, #121	; 0x79
 8000468:	47b8      	blx	r7
 800046a:	e791      	b.n	8000390 <Ap_ST32BL_Main+0x98>
 800046c:	08000141 	.word	0x08000141
 8000470:	0800015d 	.word	0x0800015d
 8000474:	08000175 	.word	0x08000175

08000478 <Ap_ST32BL_JumpToApp>:
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_ST32BL_JumpToApp( u32 Address )
{
 8000478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	JumpToApp = (pFunction) JumpAddress;


	REG_RCC_AHBENR  = 0x00000014;
	REG_RCC_APB1ENR = 0x00000000;
	REG_RCC_APB2ENR = 0x00000000;	
 800047a:	f241 0118 	movw	r1, #4120	; 0x1018
	u32 	  RegData;

	//JumpToAddress = (pFunction)(HW_ST32BL_FLASH_START_ADDRESS + 4);


	JumpAddress =  *(u32 *)(HW_ST32BL_FLASH_START_ADDRESS + 4);
 800047e:	f243 0604 	movw	r6, #12292	; 0x3004
	

	JumpToApp = (pFunction) JumpAddress;


	REG_RCC_AHBENR  = 0x00000014;
 8000482:	f241 0514 	movw	r5, #4116	; 0x1014
	REG_RCC_APB1ENR = 0x00000000;
 8000486:	f241 041c 	movw	r4, #4124	; 0x101c
 800048a:	2000      	movs	r0, #0
	

	JumpToApp = (pFunction) JumpAddress;


	REG_RCC_AHBENR  = 0x00000014;
 800048c:	f2c4 0502 	movt	r5, #16386	; 0x4002
	REG_RCC_APB1ENR = 0x00000000;
 8000490:	f2c4 0402 	movt	r4, #16386	; 0x4002
	REG_RCC_APB2ENR = 0x00000000;	
 8000494:	f2c4 0102 	movt	r1, #16386	; 0x4002
	

	JumpToApp = (pFunction) JumpAddress;


	REG_RCC_AHBENR  = 0x00000014;
 8000498:	2714      	movs	r7, #20
	CLR_BIT(RegData, 17);			// UART2
	CLR_BIT(RegData, 18);			// UART3
	CLR_BIT(RegData, 19);			// UART4
	CLR_BIT(RegData, 20);			// UART5

	REG_RCC_APB1RSTR = RegData;
 800049a:	f241 0210 	movw	r2, #4112	; 0x1010
	u32 	  RegData;

	//JumpToAddress = (pFunction)(HW_ST32BL_FLASH_START_ADDRESS + 4);


	JumpAddress =  *(u32 *)(HW_ST32BL_FLASH_START_ADDRESS + 4);
 800049e:	f6c0 0600 	movt	r6, #2048	; 0x800
	

	JumpToApp = (pFunction) JumpAddress;
 80004a2:	6836      	ldr	r6, [r6, #0]
	CLR_BIT(RegData, 17);			// UART2
	CLR_BIT(RegData, 18);			// UART3
	CLR_BIT(RegData, 19);			// UART4
	CLR_BIT(RegData, 20);			// UART5

	REG_RCC_APB1RSTR = RegData;
 80004a4:	f2c4 0202 	movt	r2, #16386	; 0x4002
	

	JumpToApp = (pFunction) JumpAddress;


	REG_RCC_AHBENR  = 0x00000014;
 80004a8:	602f      	str	r7, [r5, #0]

	RegData = 0xFFFFFFFF;

	CLR_BIT(RegData, 14);			// UART1
	
	REG_RCC_APB2RSTR = RegData;
 80004aa:	f241 030c 	movw	r3, #4108	; 0x100c

	JumpToApp = (pFunction) JumpAddress;


	REG_RCC_AHBENR  = 0x00000014;
	REG_RCC_APB1ENR = 0x00000000;
 80004ae:	6020      	str	r0, [r4, #0]
	REG_RCC_APB2ENR = 0x00000000;	
 80004b0:	6008      	str	r0, [r1, #0]
	CLR_BIT(RegData, 17);			// UART2
	CLR_BIT(RegData, 18);			// UART3
	CLR_BIT(RegData, 19);			// UART4
	CLR_BIT(RegData, 20);			// UART5

	REG_RCC_APB1RSTR = RegData;
 80004b2:	f46f 11f0 	mvn.w	r1, #1966080	; 0x1e0000
 80004b6:	6011      	str	r1, [r2, #0]

	RegData = 0xFFFFFFFF;

	CLR_BIT(RegData, 14);			// UART1
	
	REG_RCC_APB2RSTR = RegData;
 80004b8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80004bc:	f46f 4280 	mvn.w	r2, #16384	; 0x4000
 80004c0:	601a      	str	r2, [r3, #0]


	JumpToApp();
 80004c2:	47b0      	blx	r6
 80004c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80004c6:	bf00      	nop

080004c8 <Hw_StartUp_Init>:
     			보드 리셋시에 처음 실행되는 함수
     ARG     : 	void
     RET     : 	void
---------------------------------------------------------------------------*/
void Hw_StartUp_Init(void)
{
 80004c8:	4668      	mov	r0, sp
 80004ca:	f020 0107 	bic.w	r1, r0, #7
 80004ce:	468d      	mov	sp, r1
 80004d0:	b519      	push	{r0, r3, r4, lr}
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 80004d2:	4923      	ldr	r1, [pc, #140]	; (8000560 <zero_loop+0x66>)
 80004d4:	4b23      	ldr	r3, [pc, #140]	; (8000564 <zero_loop+0x6a>)
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d20b      	bcs.n	80004f2 <Hw_StartUp_Init+0x2a>
     WORK    :	 
     			보드 리셋시에 처음 실행되는 함수
     ARG     : 	void
     RET     : 	void
---------------------------------------------------------------------------*/
void Hw_StartUp_Init(void)
 80004da:	43c8      	mvns	r0, r1
 80004dc:	18c0      	adds	r0, r0, r3
 80004de:	f020 0003 	bic.w	r0, r0, #3
 80004e2:	4c21      	ldr	r4, [pc, #132]	; (8000568 <zero_loop+0x6e>)
 80004e4:	3004      	adds	r0, #4
 80004e6:	2300      	movs	r3, #0
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
	{
		*(pulDest++) = *(pulSrc++);
 80004e8:	591a      	ldr	r2, [r3, r4]
 80004ea:	505a      	str	r2, [r3, r1]
 80004ec:	3304      	adds	r3, #4
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 80004ee:	4283      	cmp	r3, r0
 80004f0:	d1fa      	bne.n	80004e8 <Hw_StartUp_Init+0x20>
		*(pulDest++) = *(pulSrc++);
	}
  
	/* Zero fill the bss segment.  This is done with inline assembly since this
	   will clear the value of pulDest if it is not kept in a register. */
	__asm("  ldr     r0, =_sbss\n"
 80004f2:	481f      	ldr	r0, [pc, #124]	; (8000570 <zero_loop+0x76>)
 80004f4:	491f      	ldr	r1, [pc, #124]	; (8000574 <zero_loop+0x7a>)
 80004f6:	f04f 0200 	mov.w	r2, #0

080004fa <zero_loop>:
 80004fa:	4288      	cmp	r0, r1
 80004fc:	bfb8      	it	lt
 80004fe:	f840 2b04 	strlt.w	r2, [r0], #4
 8000502:	f6ff affa 	blt.w	80004fa <zero_loop>
	
    // HSI or HSE 선택
            
    //-- CR_HSEON_Set
    //
	REG_RCC_CR |= (1<<16);	
 8000506:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 800050a:	f2c4 0402 	movt	r4, #16386	; 0x4002
 800050e:	6822      	ldr	r2, [r4, #0]
     RET     : 	void
---------------------------------------------------------------------------*/
void Hw_StartUp_Init(void)
{
	
	u32 TimeOutCnt  = 0;
 8000510:	2300      	movs	r3, #0
	
    // HSI or HSE 선택
            
    //-- CR_HSEON_Set
    //
	REG_RCC_CR |= (1<<16);	
 8000512:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000516:	6022      	str	r2, [r4, #0]
	//
	do
	{	
		HSEStatus = REG_RCC_CR & (1<<17);	// HSE 인경우
		TimeOutCnt++;		
	} while( (HSEStatus == 0) && (TimeOutCnt < 1280) );
 8000518:	f240 40ff 	movw	r0, #1279	; 0x4ff
		
	//-- 설정된 clock 이 설정 되었는지 확인
	//
	do
	{	
		HSEStatus = REG_RCC_CR & (1<<17);	// HSE 인경우
 800051c:	6821      	ldr	r1, [r4, #0]
		TimeOutCnt++;		
 800051e:	3301      	adds	r3, #1
	} while( (HSEStatus == 0) && (TimeOutCnt < 1280) );
 8000520:	4283      	cmp	r3, r0
 8000522:	f481 3100 	eor.w	r1, r1, #131072	; 0x20000
 8000526:	bf8c      	ite	hi
 8000528:	2200      	movhi	r2, #0
 800052a:	2201      	movls	r2, #1
 800052c:	ea12 4251 	ands.w	r2, r2, r1, lsr #17
 8000530:	d1f4      	bne.n	800051c <zero_loop+0x22>
  

	//-- FLASH Access 타이밍 설정
	//
	REG_FLASH_ACR |=  (1<<4);	// Prefetch buffer enable
 8000532:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000536:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800053a:	681a      	ldr	r2, [r3, #0]
 800053c:	f042 0210 	orr.w	r2, r2, #16
 8000540:	601a      	str	r2, [r3, #0]
	REG_FLASH_ACR &= ~(3<<0);	// LATENCY Clear
 8000542:	681a      	ldr	r2, [r3, #0]
 8000544:	f022 0203 	bic.w	r2, r2, #3
 8000548:	601a      	str	r2, [r3, #0]
	REG_FLASH_ACR |=  (2<<0);	// LATENCY = two wait
 800054a:	681a      	ldr	r2, [r3, #0]
 800054c:	f042 0202 	orr.w	r2, r2, #2
 8000550:	601a      	str	r2, [r3, #0]


    main();
 8000552:	4b06      	ldr	r3, [pc, #24]	; (800056c <zero_loop+0x72>)
 8000554:	4798      	blx	r3

}
 8000556:	e8bd 4019 	ldmia.w	sp!, {r0, r3, r4, lr}
 800055a:	4685      	mov	sp, r0
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	20000000 	.word	0x20000000
 8000564:	200000e4 	.word	0x200000e4
 8000568:	08002860 	.word	0x08002860
 800056c:	08000009 	.word	0x08000009
 8000570:	20000200 	.word	0x20000200
 8000574:	20001360 	.word	0x20001360

08000578 <Hw_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Init( void )
{
 8000578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	//-- PLL 설정
	//
	Hw_PLL_Init();
 800057a:	f640 038d 	movw	r3, #2189	; 0x88d
 800057e:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000582:	4798      	blx	r3
	
	
	//-- 인터럽트 관련 초기화
	//
	Hw_ISR_Init();
 8000584:	f640 1321 	movw	r3, #2337	; 0x921
 8000588:	f6c0 0300 	movt	r3, #2048	; 0x800
 800058c:	4798      	blx	r3
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
 800058e:	f640 0604 	movw	r6, #2052	; 0x804
	Hw_ISR_Init();
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
 8000592:	f44f 6e00 	mov.w	lr, #2048	; 0x800
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
 8000596:	f243 47b3 	movw	r7, #13491	; 0x34b3
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
 800059a:	f44f 6540 	mov.w	r5, #3072	; 0xc00
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
 800059e:	f640 4404 	movw	r4, #3076	; 0xc04
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
 80005a2:	f241 0104 	movw	r1, #4100	; 0x1004
 80005a6:	f244 4044 	movw	r0, #17476	; 0x4444
	Hw_ISR_Init();
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
 80005aa:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 80005ae:	f2c4 0e01 	movt	lr, #16385	; 0x4001
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
 80005b2:	f2c4 0101 	movt	r1, #16385	; 0x4001
 80005b6:	f2c3 3044 	movt	r0, #13124	; 0x3344
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
 80005ba:	f2c4 0601 	movt	r6, #16385	; 0x4001
 80005be:	f2c3 3733 	movt	r7, #13107	; 0x3333
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
 80005c2:	f2c4 0501 	movt	r5, #16385	; 0x4001
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
 80005c6:	f2c4 0401 	movt	r4, #16385	; 0x4001
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
	
	//Hw_DMA_Init();
	Hw_Uart_Init();
 80005ca:	f240 73cd 	movw	r3, #1997	; 0x7cd
	Hw_ISR_Init();
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
 80005ce:	f8ce 2000 	str.w	r2, [lr]
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
	
	//Hw_DMA_Init();
	Hw_Uart_Init();
 80005d2:	f6c0 0300 	movt	r3, #2048	; 0x800
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
 80005d6:	6037      	str	r7, [r6, #0]
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
 80005d8:	602a      	str	r2, [r5, #0]
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
 80005da:	6022      	str	r2, [r4, #0]
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
 80005dc:	6008      	str	r0, [r1, #0]
	
	//Hw_DMA_Init();
	Hw_Uart_Init();
 80005de:	4798      	blx	r3
	Hw_Timer_Init();
 80005e0:	f640 1371 	movw	r3, #2417	; 0x971
 80005e4:	f6c0 0300 	movt	r3, #2048	; 0x800
 80005e8:	4798      	blx	r3
	Hw_VCom_Init();
 80005ea:	f640 3391 	movw	r3, #2961	; 0xb91
 80005ee:	f6c0 0300 	movt	r3, #2048	; 0x800
 80005f2:	4798      	blx	r3
	Hw_Led_Init();	
 80005f4:	f640 3379 	movw	r3, #2937	; 0xb79
 80005f8:	f6c0 0300 	movt	r3, #2048	; 0x800
 80005fc:	4798      	blx	r3
 80005fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000600 <Hw_ISR_UART2_Handler>:


//-- UART2 ISR
//
void Hw_ISR_UART2_Handler(void)
{
 8000600:	b500      	push	{lr}
	u8 UartData;
				
	UartData = REG_USART2_DR;
 8000602:	f244 4304 	movw	r3, #17412	; 0x4404
 8000606:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800060a:	681b      	ldr	r3, [r3, #0]


//-- UART2 ISR
//
void Hw_ISR_UART2_Handler(void)
{
 800060c:	b083      	sub	sp, #12
	u8 UartData;
				
	UartData = REG_USART2_DR;
 800060e:	a902      	add	r1, sp, #8
 8000610:	f801 3d01 	strb.w	r3, [r1, #-1]!
	

	Hw_Uart_Q_Push( 1, &UartData );
 8000614:	2001      	movs	r0, #1
 8000616:	4b05      	ldr	r3, [pc, #20]	; (800062c <Hw_ISR_UART2_Handler+0x2c>)
 8000618:	4798      	blx	r3

	if( Hw_Uart_Ch[HW_UART_COM2].ISR_FuncPtr != NULL )
 800061a:	4b05      	ldr	r3, [pc, #20]	; (8000630 <Hw_ISR_UART2_Handler+0x30>)
 800061c:	695b      	ldr	r3, [r3, #20]
 800061e:	b113      	cbz	r3, 8000626 <Hw_ISR_UART2_Handler+0x26>
	{
		(*Hw_Uart_Ch[HW_UART_COM2].ISR_FuncPtr)(UartData);	
 8000620:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8000624:	4798      	blx	r3
	} 
}
 8000626:	b003      	add	sp, #12
 8000628:	bd00      	pop	{pc}
 800062a:	bf00      	nop
 800062c:	08000ac5 	.word	0x08000ac5
 8000630:	20000364 	.word	0x20000364

08000634 <Hw_ISR_UART1_Handler>:


//-- UART1 ISR
//
void Hw_ISR_UART1_Handler(void)
{
 8000634:	b500      	push	{lr}
	u8 UartData;
				
	UartData = REG_USART1_DR;
 8000636:	f643 0304 	movw	r3, #14340	; 0x3804
 800063a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800063e:	681b      	ldr	r3, [r3, #0]


//-- UART1 ISR
//
void Hw_ISR_UART1_Handler(void)
{
 8000640:	b083      	sub	sp, #12
	u8 UartData;
				
	UartData = REG_USART1_DR;
 8000642:	a902      	add	r1, sp, #8
 8000644:	f801 3d01 	strb.w	r3, [r1, #-1]!
	
	Hw_Uart_Q_Push( 0, &UartData );
 8000648:	2000      	movs	r0, #0
 800064a:	4b05      	ldr	r3, [pc, #20]	; (8000660 <Hw_ISR_UART1_Handler+0x2c>)
 800064c:	4798      	blx	r3

	if( Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr != NULL )
 800064e:	4b05      	ldr	r3, [pc, #20]	; (8000664 <Hw_ISR_UART1_Handler+0x30>)
 8000650:	689b      	ldr	r3, [r3, #8]
 8000652:	b113      	cbz	r3, 800065a <Hw_ISR_UART1_Handler+0x26>
	{
		(*Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr)(UartData);	
 8000654:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8000658:	4798      	blx	r3
	} 
}
 800065a:	b003      	add	sp, #12
 800065c:	bd00      	pop	{pc}
 800065e:	bf00      	nop
 8000660:	08000ac5 	.word	0x08000ac5
 8000664:	20000364 	.word	0x20000364

08000668 <Hw_Uart_Putch.part.0>:
void Hw_Uart_Putch( u8 Ch,  char Uart_PutData )
{
	switch( Ch )
	{
		case HW_UART_COM1:
		    while( !(REG_USART1_SR & 0x80) );
 8000668:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800066c:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8000670:	6813      	ldr	r3, [r2, #0]
 8000672:	061b      	lsls	r3, r3, #24
 8000674:	d5fc      	bpl.n	8000670 <Hw_Uart_Putch.part.0+0x8>
    		REG_USART1_DR = Uart_PutData;
 8000676:	f643 0304 	movw	r3, #14340	; 0x3804
 800067a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800067e:	6018      	str	r0, [r3, #0]
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <Hw_Uart_Open_COM1>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Open_COM1( u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	
 8000684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr = ISR_FuncPtr;
	
	
	//-- Clock Enable
	//
	SET_BIT( REG_RCC_APB2ENR, 14 );		// USART1 Clock Enable
 8000688:	f241 0618 	movw	r6, #4120	; 0x1018
 800068c:	f2c4 0602 	movt	r6, #16386	; 0x4002
 8000690:	6835      	ldr	r5, [r6, #0]
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Open_COM1( u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	

	Hw_Uart_Ch[HW_UART_COM1].Baud 		 = BaudData;
 8000692:	f240 3364 	movw	r3, #868	; 0x364
 8000696:	f2c2 0300 	movt	r3, #8192	; 0x2000
	//
	
	
	//-- USART1 설정
	//	
	REG_USART1_CR1  = 0 
 800069a:	f643 040c 	movw	r4, #14348	; 0x380c
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Open_COM1( u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	

	Hw_Uart_Ch[HW_UART_COM1].Baud 		 = BaudData;
 800069e:	6058      	str	r0, [r3, #4]
	Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr = ISR_FuncPtr;
 80006a0:	6099      	str	r1, [r3, #8]
	//
	
	
	//-- USART1 설정
	//	
	REG_USART1_CR1  = 0 
 80006a2:	f2c4 0401 	movt	r4, #16385	; 0x4001
	Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr = ISR_FuncPtr;
	
	
	//-- Clock Enable
	//
	SET_BIT( REG_RCC_APB2ENR, 14 );		// USART1 Clock Enable
 80006a6:	f445 4880 	orr.w	r8, r5, #16384	; 0x4000
	//
	
	
	//-- USART1 설정
	//	
	REG_USART1_CR1  = 0 
 80006aa:	230c      	movs	r3, #12
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART1_CR2  = ( 0 << 12 );		// 1 stop bit	
 80006ac:	f643 0c10 	movw	ip, #14352	; 0x3810
	REG_USART1_CR3  = 0;
 80006b0:	f643 0e14 	movw	lr, #14356	; 0x3814
	
	
	//-- 115200bps로 통신 속도 설정
	//
	REG_USART1_BRR  = 0
 80006b4:	f643 0708 	movw	r7, #14344	; 0x3808
	Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr = ISR_FuncPtr;
	
	
	//-- Clock Enable
	//
	SET_BIT( REG_RCC_APB2ENR, 14 );		// USART1 Clock Enable
 80006b8:	f8c6 8000 	str.w	r8, [r6]
	REG_USART1_CR1  = 0 
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART1_CR2  = ( 0 << 12 );		// 1 stop bit	
 80006bc:	2200      	movs	r2, #0
	//
	
	
	//-- USART1 설정
	//	
	REG_USART1_CR1  = 0 
 80006be:	6023      	str	r3, [r4, #0]
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART1_CR2  = ( 0 << 12 );		// 1 stop bit	
 80006c0:	f2c4 0c01 	movt	ip, #16385	; 0x4001
	REG_USART1_CR3  = 0;
 80006c4:	f2c4 0e01 	movt	lr, #16385	; 0x4001
	
	
	//-- 115200bps로 통신 속도 설정
	//
	REG_USART1_BRR  = 0
 80006c8:	f240 2371 	movw	r3, #625	; 0x271
 80006cc:	f2c4 0701 	movt	r7, #16385	; 0x4001
					| (  1 << 0 );		// DIV Fraction
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
 80006d0:	f24e 1504 	movw	r5, #57604	; 0xe104
	REG_USART1_CR1  = 0 
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART1_CR2  = ( 0 << 12 );		// 1 stop bit	
 80006d4:	f8cc 2000 	str.w	r2, [ip]
					| (  1 << 0 );		// DIV Fraction
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
 80006d8:	f2ce 0500 	movt	r5, #57344	; 0xe000
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART1_CR2  = ( 0 << 12 );		// 1 stop bit	
	REG_USART1_CR3  = 0;
 80006dc:	f8ce 2000 	str.w	r2, [lr]
	
	
	//-- 115200bps로 통신 속도 설정
	//
	REG_USART1_BRR  = 0
 80006e0:	603b      	str	r3, [r7, #0]
					| (  1 << 0 );		// DIV Fraction
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
 80006e2:	682b      	ldr	r3, [r5, #0]
	SET_BIT( REG_USART1_CR1, 5 );				// RX 인터럽트 활성화
	
	Hw_ISR_SetIRQFunc( 37, (u32)Hw_ISR_UART1_Handler, 0 );
 80006e4:	2025      	movs	r0, #37	; 0x25
					| (  1 << 0 );		// DIV Fraction
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
 80006e6:	f043 0320 	orr.w	r3, r3, #32
 80006ea:	602b      	str	r3, [r5, #0]
	SET_BIT( REG_USART1_CR1, 5 );				// RX 인터럽트 활성화
 80006ec:	6821      	ldr	r1, [r4, #0]
	
	Hw_ISR_SetIRQFunc( 37, (u32)Hw_ISR_UART1_Handler, 0 );
 80006ee:	f640 1335 	movw	r3, #2357	; 0x935
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
	SET_BIT( REG_USART1_CR1, 5 );				// RX 인터럽트 활성화
 80006f2:	f041 0120 	orr.w	r1, r1, #32
 80006f6:	6021      	str	r1, [r4, #0]
	
	Hw_ISR_SetIRQFunc( 37, (u32)Hw_ISR_UART1_Handler, 0 );
 80006f8:	f240 6135 	movw	r1, #1589	; 0x635
 80006fc:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000700:	f6c0 0100 	movt	r1, #2048	; 0x800
 8000704:	4798      	blx	r3
	
	REG_USART1_CR1 |= ( 1 << 13 );	    // USART Enable
 8000706:	6823      	ldr	r3, [r4, #0]
 8000708:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800070c:	6023      	str	r3, [r4, #0]
 800070e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000712:	bf00      	nop

08000714 <Hw_Uart_Open_COM2>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Open_COM2( u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	
 8000714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	Hw_Uart_Ch[HW_UART_COM2].ISR_FuncPtr = ISR_FuncPtr;
	
	
	//-- Clock Enable
	//
	SET_BIT( REG_RCC_APB1ENR, 17 );		// USART2 Clock Enable	PCLK2 = 72Mhz
 8000716:	f241 041c 	movw	r4, #4124	; 0x101c
 800071a:	f2c4 0402 	movt	r4, #16386	; 0x4002
 800071e:	6825      	ldr	r5, [r4, #0]
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Open_COM2( u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	

	Hw_Uart_Ch[HW_UART_COM2].Baud 		 = BaudData;
 8000720:	f240 3264 	movw	r2, #868	; 0x364
 8000724:	f2c2 0200 	movt	r2, #8192	; 0x2000
	Hw_Uart_Ch[HW_UART_COM2].ISR_FuncPtr = ISR_FuncPtr;
	
	
	//-- Clock Enable
	//
	SET_BIT( REG_RCC_APB1ENR, 17 );		// USART2 Clock Enable	PCLK2 = 72Mhz
 8000728:	f445 3500 	orr.w	r5, r5, #131072	; 0x20000
	
	//-- I/O Port 설정
	//
	
	// PA2 - TX
	REG_GPIOA_CRL &= ~(0x0F << ( 8));	// Clear
 800072c:	f44f 6300 	mov.w	r3, #2048	; 0x800
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Open_COM2( u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	

	Hw_Uart_Ch[HW_UART_COM2].Baud 		 = BaudData;
 8000730:	6110      	str	r0, [r2, #16]
	Hw_Uart_Ch[HW_UART_COM2].ISR_FuncPtr = ISR_FuncPtr;
 8000732:	6151      	str	r1, [r2, #20]
	
	//-- I/O Port 설정
	//
	
	// PA2 - TX
	REG_GPIOA_CRL &= ~(0x0F << ( 8));	// Clear
 8000734:	f2c4 0301 	movt	r3, #16385	; 0x4001
	Hw_Uart_Ch[HW_UART_COM2].ISR_FuncPtr = ISR_FuncPtr;
	
	
	//-- Clock Enable
	//
	SET_BIT( REG_RCC_APB1ENR, 17 );		// USART2 Clock Enable	PCLK2 = 72Mhz
 8000738:	6025      	str	r5, [r4, #0]
	
	//-- I/O Port 설정
	//
	
	// PA2 - TX
	REG_GPIOA_CRL &= ~(0x0F << ( 8));	// Clear
 800073a:	681a      	ldr	r2, [r3, #0]
	REG_GPIOA_CRL |=  (0x01 << (14));	// CNF    - Floating input	
	

	//-- USART2 설정
	//	
	REG_USART2_CR1  = 0 
 800073c:	f244 440c 	movw	r4, #17420	; 0x440c
	
	//-- I/O Port 설정
	//
	
	// PA2 - TX
	REG_GPIOA_CRL &= ~(0x0F << ( 8));	// Clear
 8000740:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8000744:	601a      	str	r2, [r3, #0]
	REG_GPIOA_CRL |=  (0x03 << ( 8));	// MODE   - Output mode, max speed 50Mhz
 8000746:	681a      	ldr	r2, [r3, #0]
	REG_GPIOA_CRL |=  (0x01 << (14));	// CNF    - Floating input	
	

	//-- USART2 설정
	//	
	REG_USART2_CR1  = 0 
 8000748:	f2c4 0400 	movt	r4, #16384	; 0x4000
	//-- I/O Port 설정
	//
	
	// PA2 - TX
	REG_GPIOA_CRL &= ~(0x0F << ( 8));	// Clear
	REG_GPIOA_CRL |=  (0x03 << ( 8));	// MODE   - Output mode, max speed 50Mhz
 800074c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8000750:	601a      	str	r2, [r3, #0]
	REG_GPIOA_CRL |=  (0x02 << (10));	// CNF    - Alternate function output Push-pull
 8000752:	681a      	ldr	r2, [r3, #0]
	REG_USART2_CR1  = 0 
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART2_CR2  = ( 0 << 12 );		// 1 stop bit	
 8000754:	f244 4610 	movw	r6, #17424	; 0x4410
	//
	
	// PA2 - TX
	REG_GPIOA_CRL &= ~(0x0F << ( 8));	// Clear
	REG_GPIOA_CRL |=  (0x03 << ( 8));	// MODE   - Output mode, max speed 50Mhz
	REG_GPIOA_CRL |=  (0x02 << (10));	// CNF    - Alternate function output Push-pull
 8000758:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800075c:	601a      	str	r2, [r3, #0]
										     	    	
	// PA3 - RX
	REG_GPIOA_CRL &= ~(0x0F << (12));	// Clear
 800075e:	681a      	ldr	r2, [r3, #0]
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART2_CR2  = ( 0 << 12 );		// 1 stop bit	
	REG_USART2_CR3  = 0;
 8000760:	f244 4514 	movw	r5, #17428	; 0x4414
	REG_GPIOA_CRL &= ~(0x0F << ( 8));	// Clear
	REG_GPIOA_CRL |=  (0x03 << ( 8));	// MODE   - Output mode, max speed 50Mhz
	REG_GPIOA_CRL |=  (0x02 << (10));	// CNF    - Alternate function output Push-pull
										     	    	
	// PA3 - RX
	REG_GPIOA_CRL &= ~(0x0F << (12));	// Clear
 8000764:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 8000768:	601a      	str	r2, [r3, #0]
	REG_GPIOA_CRL |=  (0x00 << (12));	// MODE   - Input mode
 800076a:	681a      	ldr	r2, [r3, #0]
	REG_USART2_CR3  = 0;
	
	
	//-- 115200bps로 통신 속도 설정
	//
	REG_USART2_BRR  = 0
 800076c:	f244 4008 	movw	r0, #17416	; 0x4408
	REG_GPIOA_CRL |=  (0x03 << ( 8));	// MODE   - Output mode, max speed 50Mhz
	REG_GPIOA_CRL |=  (0x02 << (10));	// CNF    - Alternate function output Push-pull
										     	    	
	// PA3 - RX
	REG_GPIOA_CRL &= ~(0x0F << (12));	// Clear
	REG_GPIOA_CRL |=  (0x00 << (12));	// MODE   - Input mode
 8000770:	601a      	str	r2, [r3, #0]
	REG_GPIOA_CRL |=  (0x01 << (14));	// CNF    - Floating input	
 8000772:	681f      	ldr	r7, [r3, #0]
	REG_USART2_CR1  = 0 
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART2_CR2  = ( 0 << 12 );		// 1 stop bit	
 8000774:	2200      	movs	r2, #0
	REG_GPIOA_CRL |=  (0x02 << (10));	// CNF    - Alternate function output Push-pull
										     	    	
	// PA3 - RX
	REG_GPIOA_CRL &= ~(0x0F << (12));	// Clear
	REG_GPIOA_CRL |=  (0x00 << (12));	// MODE   - Input mode
	REG_GPIOA_CRL |=  (0x01 << (14));	// CNF    - Floating input	
 8000776:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 800077a:	601f      	str	r7, [r3, #0]
	

	//-- USART2 설정
	//	
	REG_USART2_CR1  = 0 
 800077c:	230c      	movs	r3, #12
 800077e:	6023      	str	r3, [r4, #0]
	REG_USART2_CR3  = 0;
	
	
	//-- 115200bps로 통신 속도 설정
	//
	REG_USART2_BRR  = 0
 8000780:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000784:	f44f 739c 	mov.w	r3, #312	; 0x138
	REG_USART2_CR1  = 0 
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART2_CR2  = ( 0 << 12 );		// 1 stop bit	
 8000788:	f2c4 0600 	movt	r6, #16384	; 0x4000
	REG_USART2_CR3  = 0;
 800078c:	f2c4 0500 	movt	r5, #16384	; 0x4000
					| (  8 << 0 );		// DIV Fraction
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 38/32 ), 38%32 );	// NVIC 37번 USART1 인터럽트 활성화
 8000790:	f24e 1104 	movw	r1, #57604	; 0xe104
	REG_USART2_CR1  = 0 
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART2_CR2  = ( 0 << 12 );		// 1 stop bit	
 8000794:	6032      	str	r2, [r6, #0]
					| (  8 << 0 );		// DIV Fraction
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 38/32 ), 38%32 );	// NVIC 37번 USART1 인터럽트 활성화
 8000796:	f2ce 0100 	movt	r1, #57344	; 0xe000
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART2_CR2  = ( 0 << 12 );		// 1 stop bit	
	REG_USART2_CR3  = 0;
 800079a:	602a      	str	r2, [r5, #0]
	
	
	//-- 115200bps로 통신 속도 설정
	//
	REG_USART2_BRR  = 0
 800079c:	6003      	str	r3, [r0, #0]
					| (  8 << 0 );		// DIV Fraction
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 38/32 ), 38%32 );	// NVIC 37번 USART1 인터럽트 활성화
 800079e:	680b      	ldr	r3, [r1, #0]
	SET_BIT( REG_USART2_CR1, 5 );				// RX 인터럽트 활성화
	
	Hw_ISR_SetIRQFunc( 38, (u32)Hw_ISR_UART2_Handler, 0 );
 80007a0:	2026      	movs	r0, #38	; 0x26
					| (  8 << 0 );		// DIV Fraction
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 38/32 ), 38%32 );	// NVIC 37번 USART1 인터럽트 활성화
 80007a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007a6:	600b      	str	r3, [r1, #0]
	SET_BIT( REG_USART2_CR1, 5 );				// RX 인터럽트 활성화
 80007a8:	6821      	ldr	r1, [r4, #0]
	
	Hw_ISR_SetIRQFunc( 38, (u32)Hw_ISR_UART2_Handler, 0 );
 80007aa:	f640 1335 	movw	r3, #2357	; 0x935
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 38/32 ), 38%32 );	// NVIC 37번 USART1 인터럽트 활성화
	SET_BIT( REG_USART2_CR1, 5 );				// RX 인터럽트 활성화
 80007ae:	f041 0120 	orr.w	r1, r1, #32
 80007b2:	6021      	str	r1, [r4, #0]
	
	Hw_ISR_SetIRQFunc( 38, (u32)Hw_ISR_UART2_Handler, 0 );
 80007b4:	f240 6101 	movw	r1, #1537	; 0x601
 80007b8:	f6c0 0300 	movt	r3, #2048	; 0x800
 80007bc:	f6c0 0100 	movt	r1, #2048	; 0x800
 80007c0:	4798      	blx	r3
	
	REG_USART2_CR1 |= ( 1 << 13 );	    // USART Enable
 80007c2:	6823      	ldr	r3, [r4, #0]
 80007c4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80007c8:	6023      	str	r3, [r4, #0]
 80007ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080007cc <Hw_Uart_Init>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Init( void )
{
 80007cc:	b508      	push	{r3, lr}
	u32 i;
	
	Hw_Uart_Q_Init();
 80007ce:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <Hw_Uart_Init+0x30>)
 80007d0:	4798      	blx	r3
 80007d2:	4b0b      	ldr	r3, [pc, #44]	; (8000800 <Hw_Uart_Init+0x34>)
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 80007d4:	2200      	movs	r2, #0
     TITLE   : Hw_Uart_Init
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Init( void )
 80007d6:	f103 0148 	add.w	r1, r3, #72	; 0x48
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 80007da:	601a      	str	r2, [r3, #0]
		Hw_Uart_Ch[i].ISR_FuncPtr = NULL;
 80007dc:	605a      	str	r2, [r3, #4]
 80007de:	330c      	adds	r3, #12
	u32 i;
	
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
 80007e0:	428b      	cmp	r3, r1
 80007e2:	d1fa      	bne.n	80007da <Hw_Uart_Init+0xe>
void Hw_Uart_Open( u8 Ch, u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	
	switch( Ch )
	{
		case HW_UART_COM1:
			Hw_Uart_Open_COM1( BaudData, ISR_FuncPtr );
 80007e4:	2100      	movs	r1, #0
 80007e6:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 80007ea:	4b06      	ldr	r3, [pc, #24]	; (8000804 <Hw_Uart_Init+0x38>)
 80007ec:	4798      	blx	r3
			break;
			
		case HW_UART_COM2:
			Hw_Uart_Open_COM2( BaudData, ISR_FuncPtr );
 80007ee:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 80007f2:	2100      	movs	r1, #0
 80007f4:	4b04      	ldr	r3, [pc, #16]	; (8000808 <Hw_Uart_Init+0x3c>)
 80007f6:	4798      	blx	r3
 80007f8:	bd08      	pop	{r3, pc}
 80007fa:	bf00      	nop
 80007fc:	08000a7d 	.word	0x08000a7d
 8000800:	20000368 	.word	0x20000368
 8000804:	08000685 	.word	0x08000685
 8000808:	08000715 	.word	0x08000715

0800080c <Hw_Uart_Getch>:
			: 시리얼 포트에서 문자 1바이트 읽는다.
     ARG
     RET
---------------------------------------------------------------------------*/
u8 Hw_Uart_Getch( u8 Ch )
{
 800080c:	b530      	push	{r4, r5, lr}
	u8 Uart_GetData = 0;
 800080e:	2300      	movs	r3, #0
			: 시리얼 포트에서 문자 1바이트 읽는다.
     ARG
     RET
---------------------------------------------------------------------------*/
u8 Hw_Uart_Getch( u8 Ch )
{
 8000810:	b083      	sub	sp, #12
	u8 Uart_GetData = 0;

	if( Ch == HW_UART_VCOM )
 8000812:	2805      	cmp	r0, #5
			: 시리얼 포트에서 문자 1바이트 읽는다.
     ARG
     RET
---------------------------------------------------------------------------*/
u8 Hw_Uart_Getch( u8 Ch )
{
 8000814:	4604      	mov	r4, r0
	u8 Uart_GetData = 0;
 8000816:	f88d 3007 	strb.w	r3, [sp, #7]

	if( Ch == HW_UART_VCOM )
 800081a:	d00d      	beq.n	8000838 <Hw_Uart_Getch+0x2c>
 800081c:	4d08      	ldr	r5, [pc, #32]	; (8000840 <Hw_Uart_Getch+0x34>)
	}

	while( 1 )
	{
		// 버퍼에 데이터 들어올때까지 기다린다.
		if( HW_UART_Q_VAILD(Ch) > 0 ) break;
 800081e:	4620      	mov	r0, r4
 8000820:	47a8      	blx	r5
 8000822:	2800      	cmp	r0, #0
 8000824:	d0fb      	beq.n	800081e <Hw_Uart_Getch+0x12>
	}

	Hw_Uart_Q_Pop( Ch, &Uart_GetData );
 8000826:	4620      	mov	r0, r4
 8000828:	f10d 0107 	add.w	r1, sp, #7
 800082c:	4b05      	ldr	r3, [pc, #20]	; (8000844 <Hw_Uart_Getch+0x38>)
 800082e:	4798      	blx	r3

	return Uart_GetData;
 8000830:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8000834:	b003      	add	sp, #12
 8000836:	bd30      	pop	{r4, r5, pc}
{
	u8 Uart_GetData = 0;

	if( Ch == HW_UART_VCOM )
	{
		return Hw_VCom_Getch();
 8000838:	4b03      	ldr	r3, [pc, #12]	; (8000848 <Hw_Uart_Getch+0x3c>)
 800083a:	4798      	blx	r3
 800083c:	e7fa      	b.n	8000834 <Hw_Uart_Getch+0x28>
 800083e:	bf00      	nop
 8000840:	08000a99 	.word	0x08000a99
 8000844:	08000b21 	.word	0x08000b21
 8000848:	08000bd9 	.word	0x08000bd9

0800084c <Hw_Uart_Putch>:
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Uart_Putch( u8 Ch,  char Uart_PutData )
{
	switch( Ch )
 800084c:	2801      	cmp	r0, #1
			: 시리얼 포트로 문자 1바이트 전송
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Uart_Putch( u8 Ch,  char Uart_PutData )
{
 800084e:	b508      	push	{r3, lr}
	switch( Ch )
 8000850:	d00a      	beq.n	8000868 <Hw_Uart_Putch+0x1c>
 8000852:	d305      	bcc.n	8000860 <Hw_Uart_Putch+0x14>
 8000854:	2805      	cmp	r0, #5
 8000856:	d102      	bne.n	800085e <Hw_Uart_Putch+0x12>

		case HW_UART_COM5:
			break;		

		case HW_UART_VCOM:
			Hw_VCom_Putch( Uart_PutData );
 8000858:	4608      	mov	r0, r1
 800085a:	4b0a      	ldr	r3, [pc, #40]	; (8000884 <Hw_Uart_Putch+0x38>)
 800085c:	4798      	blx	r3
 800085e:	bd08      	pop	{r3, pc}
 8000860:	4608      	mov	r0, r1
 8000862:	4b09      	ldr	r3, [pc, #36]	; (8000888 <Hw_Uart_Putch+0x3c>)
 8000864:	4798      	blx	r3
 8000866:	bd08      	pop	{r3, pc}
		    while( !(REG_USART1_SR & 0x80) );
    		REG_USART1_DR = Uart_PutData;
			break;
			
		case HW_UART_COM2:
		    while( !(REG_USART2_SR & 0x80) );
 8000868:	f44f 4288 	mov.w	r2, #17408	; 0x4400
 800086c:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8000870:	6813      	ldr	r3, [r2, #0]
 8000872:	0618      	lsls	r0, r3, #24
 8000874:	d5fc      	bpl.n	8000870 <Hw_Uart_Putch+0x24>
    		REG_USART2_DR = Uart_PutData;
 8000876:	f244 4304 	movw	r3, #17412	; 0x4404
 800087a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800087e:	6019      	str	r1, [r3, #0]
			break;
 8000880:	bd08      	pop	{r3, pc}
 8000882:	bf00      	nop
 8000884:	08000c09 	.word	0x08000c09
 8000888:	08000669 	.word	0x08000669

0800088c <Hw_PLL_Init>:
{
	
#if	CLOCK_EXT == 1
	//-- PLL 설정 72Mhz로 설정함
	//
	REG_RCC_CFGR &= ~(0xF<<18 | 0x1<<17 | 0x1<<16 | 0xF<<4);
 800088c:	f241 0304 	movw	r3, #4100	; 0x1004
 8000890:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000894:	681a      	ldr	r2, [r3, #0]
	REG_RCC_CFGR |=  (0x7<<18 | 0x1<<16);			// 8MHz
    REG_RCC_CR   |=  0x01 << 24;                    // PLLON
 8000896:	f44f 5180 	mov.w	r1, #4096	; 0x1000
{
	
#if	CLOCK_EXT == 1
	//-- PLL 설정 72Mhz로 설정함
	//
	REG_RCC_CFGR &= ~(0xF<<18 | 0x1<<17 | 0x1<<16 | 0xF<<4);
 800089a:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 800089e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80008a2:	601a      	str	r2, [r3, #0]
	REG_RCC_CFGR |=  (0x7<<18 | 0x1<<16);			// 8MHz
 80008a4:	681a      	ldr	r2, [r3, #0]
    REG_RCC_CR   |=  0x01 << 24;                    // PLLON
 80008a6:	f2c4 0102 	movt	r1, #16386	; 0x4002
	
#if	CLOCK_EXT == 1
	//-- PLL 설정 72Mhz로 설정함
	//
	REG_RCC_CFGR &= ~(0xF<<18 | 0x1<<17 | 0x1<<16 | 0xF<<4);
	REG_RCC_CFGR |=  (0x7<<18 | 0x1<<16);			// 8MHz
 80008aa:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
 80008ae:	601a      	str	r2, [r3, #0]
    REG_RCC_CR   |=  0x01 << 24;                    // PLLON
 80008b0:	680b      	ldr	r3, [r1, #0]

	while( (REG_RCC_CR & (1<<25)) == 0 );			// PLLRDY
 80008b2:	460a      	mov	r2, r1
#if	CLOCK_EXT == 1
	//-- PLL 설정 72Mhz로 설정함
	//
	REG_RCC_CFGR &= ~(0xF<<18 | 0x1<<17 | 0x1<<16 | 0xF<<4);
	REG_RCC_CFGR |=  (0x7<<18 | 0x1<<16);			// 8MHz
    REG_RCC_CR   |=  0x01 << 24;                    // PLLON
 80008b4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80008b8:	600b      	str	r3, [r1, #0]

	while( (REG_RCC_CR & (1<<25)) == 0 );			// PLLRDY
 80008ba:	6813      	ldr	r3, [r2, #0]
 80008bc:	019b      	lsls	r3, r3, #6
 80008be:	d5fc      	bpl.n	80008ba <Hw_PLL_Init+0x2e>
    /////Bits 1:0 SW : System clock switch
    //00: HSI selected as system clock
    //01: HSE selected as system clock
    //10: PLL selected as system clock   <----------------- 선택됨
    //11: not allowed
	REG_RCC_CFGR &= ~0x3;
 80008c0:	f241 0304 	movw	r3, #4100	; 0x1004
 80008c4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80008c8:	6819      	ldr	r1, [r3, #0]
	//
	REG_RCC_CFGR &= ~(0x7<<11);
	REG_RCC_CFGR |=  (0x0<<11);

    
    while( (REG_RCC_CFGR & 0xC) != 0x08 );
 80008ca:	461a      	mov	r2, r3
    /////Bits 1:0 SW : System clock switch
    //00: HSI selected as system clock
    //01: HSE selected as system clock
    //10: PLL selected as system clock   <----------------- 선택됨
    //11: not allowed
	REG_RCC_CFGR &= ~0x3;
 80008cc:	f021 0103 	bic.w	r1, r1, #3
 80008d0:	6019      	str	r1, [r3, #0]
	REG_RCC_CFGR |=  0x2;
 80008d2:	6819      	ldr	r1, [r3, #0]
 80008d4:	f041 0102 	orr.w	r1, r1, #2
 80008d8:	6019      	str	r1, [r3, #0]

	// USB 72M * 2 / 3 = 48Mhz
	//
	CLR_BIT( REG_RCC_CFGR, 22 );
 80008da:	6819      	ldr	r1, [r3, #0]
 80008dc:	f421 0180 	bic.w	r1, r1, #4194304	; 0x400000
 80008e0:	6019      	str	r1, [r3, #0]

	// APB1 - PCLK1 36Mhz
	//
	REG_RCC_CFGR &= ~(0x7<<8);
 80008e2:	6819      	ldr	r1, [r3, #0]
 80008e4:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 80008e8:	6019      	str	r1, [r3, #0]
	REG_RCC_CFGR |=  (0x4<<8);
 80008ea:	6819      	ldr	r1, [r3, #0]
 80008ec:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 80008f0:	6019      	str	r1, [r3, #0]
	
	// APB2 - PCLK2 72Mhz
	//
	REG_RCC_CFGR &= ~(0x7<<11);
 80008f2:	6819      	ldr	r1, [r3, #0]
 80008f4:	f421 5160 	bic.w	r1, r1, #14336	; 0x3800
 80008f8:	6019      	str	r1, [r3, #0]
	REG_RCC_CFGR |=  (0x0<<11);
 80008fa:	6819      	ldr	r1, [r3, #0]
 80008fc:	6019      	str	r1, [r3, #0]

    
    while( (REG_RCC_CFGR & 0xC) != 0x08 );
 80008fe:	6813      	ldr	r3, [r2, #0]
 8000900:	f003 030c 	and.w	r3, r3, #12
 8000904:	2b08      	cmp	r3, #8
 8000906:	d1fa      	bne.n	80008fe <Hw_PLL_Init+0x72>
    
    //APB2에 있는 UART 등 주변장치에 Clock 소스 동작제어
    //UART가 동작되기 위해서는 GPIO와 Alternation Function IO가 동작상태에 있어야 함
	REG_RCC_APB2ENR |= 0  |
 8000908:	f241 0318 	movw	r3, #4120	; 0x1018
 800090c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000910:	681a      	ldr	r2, [r3, #0]
 8000912:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000916:	f042 021d 	orr.w	r2, r2, #29
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop

08000920 <Hw_ISR_Init>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_ISR_Init( void )
{
	REG_SCB_VTOR = (u32)Hw_ISR_VectorTable;
 8000920:	f240 4300 	movw	r3, #1024	; 0x400
 8000924:	f64e 5208 	movw	r2, #60680	; 0xed08
 8000928:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800092c:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8000930:	6013      	str	r3, [r2, #0]
 8000932:	4770      	bx	lr

08000934 <Hw_ISR_SetIRQFunc>:
---------------------------------------------------------------------------*/
void Hw_ISR_SetIRQFunc( u8 ISR_Num, u32 FuncAddress, u8 ISR_Priority )
{	
	u32 ISR_StartOffset = 16;
	
	Hw_ISR_VectorTable[ ISR_StartOffset + ISR_Num ] = FuncAddress;	
 8000934:	f240 4300 	movw	r3, #1024	; 0x400
 8000938:	3010      	adds	r0, #16
 800093a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800093e:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 8000942:	4770      	bx	lr

08000944 <Hw_ISR_SetIRQFuncByAddr>:
---------------------------------------------------------------------------*/
void Hw_ISR_SetIRQFuncByAddr( u32 ISR_Addr, u32 FuncAddress, u8 ISR_Priority )
{	
	u32 ISR_StartOffset = ISR_Addr/4;
	
	Hw_ISR_VectorTable[ ISR_StartOffset ] = FuncAddress;	
 8000944:	f240 4300 	movw	r3, #1024	; 0x400
     			u8  ISR_Priority : 인터럽트 우선순위(작은값이 우선순위 높음)
     RET     : void
---------------------------------------------------------------------------*/
void Hw_ISR_SetIRQFuncByAddr( u32 ISR_Addr, u32 FuncAddress, u8 ISR_Priority )
{	
	u32 ISR_StartOffset = ISR_Addr/4;
 8000948:	0880      	lsrs	r0, r0, #2
	
	Hw_ISR_VectorTable[ ISR_StartOffset ] = FuncAddress;	
 800094a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800094e:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 8000952:	4770      	bx	lr

08000954 <Hw_Timer_SetupISR>:
     	 	 	 타이머 H/W 기능을 초기화 한다.
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_SetupISR( void )
{	
 8000954:	b508      	push	{r3, lr}
	Hw_ISR_SetIRQFuncByAddr( 0x003C, (u32)Hw_Timer_ISR, 0 );	
 8000956:	f640 2159 	movw	r1, #2649	; 0xa59
 800095a:	f640 1345 	movw	r3, #2373	; 0x945
 800095e:	203c      	movs	r0, #60	; 0x3c
 8000960:	f6c0 0100 	movt	r1, #2048	; 0x800
 8000964:	2200      	movs	r2, #0
 8000966:	f6c0 0300 	movt	r3, #2048	; 0x800
 800096a:	4798      	blx	r3
 800096c:	bd08      	pop	{r3, pc}
 800096e:	bf00      	nop

08000970 <Hw_Timer_Init>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_Init( void )
{
 8000970:	b510      	push	{r4, lr}
	u8 i;
	static u8 Excute = 0;

	
	if( Excute == 1 ) return;  // 이미 한번 실행했다면 정지.
 8000972:	4c1b      	ldr	r4, [pc, #108]	; (80009e0 <Hw_Timer_Init+0x70>)
 8000974:	7823      	ldrb	r3, [r4, #0]
 8000976:	2b01      	cmp	r3, #1
 8000978:	d030      	beq.n	80009dc <Hw_Timer_Init+0x6c>
 800097a:	4b1a      	ldr	r3, [pc, #104]	; (80009e4 <Hw_Timer_Init+0x74>)
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 800097c:	2200      	movs	r2, #0
     TITLE   : Hw_Timer_Init
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_Init( void )
 800097e:	f103 01a0 	add.w	r1, r3, #160	; 0xa0
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 8000982:	f803 2c08 	strb.w	r2, [r3, #-8]
		Timer_Tbl[i].Timer_Ctn  = 0;
 8000986:	f823 2c06 	strh.w	r2, [r3, #-6]
		Timer_Tbl[i].Timer_Init = 0;
 800098a:	f823 2c04 	strh.w	r2, [r3, #-4]
		Timer_Tbl[i].TmrFnct    = NULL;
 800098e:	f843 2b10 	str.w	r2, [r3], #16
	
	if( Excute == 1 ) return;  // 이미 한번 실행했다면 정지.
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
 8000992:	428b      	cmp	r3, r1
 8000994:	d1f5      	bne.n	8000982 <Hw_Timer_Init+0x12>
		Timer_Tbl[i].Timer_Init = 0;
		Timer_Tbl[i].TmrFnct    = NULL;
	}	                   
	
	
	Hw_Timer_SetupISR();
 8000996:	4b14      	ldr	r3, [pc, #80]	; (80009e8 <Hw_Timer_Init+0x78>)
 8000998:	4798      	blx	r3
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_Setup( void )
{

	REG_STK_LOAD = 72000 - 1;	// 72000000 / 72000 = 1000us = 1ms
 800099a:	f24e 0114 	movw	r1, #57364	; 0xe014
 800099e:	f641 103f 	movw	r0, #6463	; 0x193f
 80009a2:	f2ce 0100 	movt	r1, #57344	; 0xe000
	
	REG_STK_VAL  = 0;	
 80009a6:	f24e 0218 	movw	r2, #57368	; 0xe018
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_Setup( void )
{

	REG_STK_LOAD = 72000 - 1;	// 72000000 / 72000 = 1000us = 1ms
 80009aa:	f2c0 0001 	movt	r0, #1
 80009ae:	6008      	str	r0, [r1, #0]
	
	REG_STK_VAL  = 0;	
 80009b0:	f2ce 0200 	movt	r2, #57344	; 0xe000
	
	SET_BIT( REG_STK_CTRL, 2 );	// CLKSOURCE = Processor Clock 72Mhz		
 80009b4:	f24e 0310 	movw	r3, #57360	; 0xe010
void Hw_Timer_Setup( void )
{

	REG_STK_LOAD = 72000 - 1;	// 72000000 / 72000 = 1000us = 1ms
	
	REG_STK_VAL  = 0;	
 80009b8:	2100      	movs	r1, #0
	
	SET_BIT( REG_STK_CTRL, 2 );	// CLKSOURCE = Processor Clock 72Mhz		
 80009ba:	f2ce 0300 	movt	r3, #57344	; 0xe000
void Hw_Timer_Setup( void )
{

	REG_STK_LOAD = 72000 - 1;	// 72000000 / 72000 = 1000us = 1ms
	
	REG_STK_VAL  = 0;	
 80009be:	6011      	str	r1, [r2, #0]
	
	SET_BIT( REG_STK_CTRL, 2 );	// CLKSOURCE = Processor Clock 72Mhz		
 80009c0:	681a      	ldr	r2, [r3, #0]
 80009c2:	f042 0204 	orr.w	r2, r2, #4
 80009c6:	601a      	str	r2, [r3, #0]
	SET_BIT( REG_STK_CTRL, 1 );	// 인터럽트 활성화		
 80009c8:	681a      	ldr	r2, [r3, #0]
 80009ca:	f042 0202 	orr.w	r2, r2, #2
 80009ce:	601a      	str	r2, [r3, #0]
	SET_BIT( REG_STK_CTRL, 0 );	// Counter Enable
 80009d0:	681a      	ldr	r2, [r3, #0]
 80009d2:	f042 0201 	orr.w	r2, r2, #1
 80009d6:	601a      	str	r2, [r3, #0]
	
	
	Hw_Timer_SetupISR();
	Hw_Timer_Setup();	

	Excute = 1;
 80009d8:	2301      	movs	r3, #1
 80009da:	7023      	strb	r3, [r4, #0]
 80009dc:	bd10      	pop	{r4, pc}
 80009de:	bf00      	nop
 80009e0:	20000200 	.word	0x20000200
 80009e4:	20000210 	.word	0x20000210
 80009e8:	08000955 	.word	0x08000955

080009ec <Hw_Timer_Tick>:
void Hw_Timer_Tick(void)
{
	u8 i;

	
	Hw_Timer_Counter++;
 80009ec:	4a17      	ldr	r2, [pc, #92]	; (8000a4c <Hw_Timer_Tick+0x60>)
			타이머인터럽트 발생시에 실행되는 함수(1ms 혹은 10ms 단위로 실행)
     ARG	: void
     RET	: void
---------------------------------------------------------------------------*/
void Hw_Timer_Tick(void)
{
 80009ee:	b538      	push	{r3, r4, r5, lr}
	u8 i;

	
	Hw_Timer_Counter++;
 80009f0:	6811      	ldr	r1, [r2, #0]


	if( Tmr_Ctn ) Tmr_Ctn--;
 80009f2:	4b17      	ldr	r3, [pc, #92]	; (8000a50 <Hw_Timer_Tick+0x64>)
void Hw_Timer_Tick(void)
{
	u8 i;

	
	Hw_Timer_Counter++;
 80009f4:	3101      	adds	r1, #1
 80009f6:	6011      	str	r1, [r2, #0]


	if( Tmr_Ctn ) Tmr_Ctn--;
 80009f8:	881a      	ldrh	r2, [r3, #0]
 80009fa:	b292      	uxth	r2, r2
 80009fc:	b11a      	cbz	r2, 8000a06 <Hw_Timer_Tick+0x1a>
 80009fe:	881a      	ldrh	r2, [r3, #0]
 8000a00:	3a01      	subs	r2, #1
 8000a02:	b292      	uxth	r2, r2
 8000a04:	801a      	strh	r2, [r3, #0]
 8000a06:	4c13      	ldr	r4, [pc, #76]	; (8000a54 <Hw_Timer_Tick+0x68>)
     WORK	:
			타이머인터럽트 발생시에 실행되는 함수(1ms 혹은 10ms 단위로 실행)
     ARG	: void
     RET	: void
---------------------------------------------------------------------------*/
void Hw_Timer_Tick(void)
 8000a08:	f104 05a0 	add.w	r5, r4, #160	; 0xa0
 8000a0c:	e002      	b.n	8000a14 <Hw_Timer_Tick+0x28>
 8000a0e:	3410      	adds	r4, #16

	if( Tmr_Ctn ) Tmr_Ctn--;
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
 8000a10:	42ac      	cmp	r4, r5
 8000a12:	d01a      	beq.n	8000a4a <Hw_Timer_Tick+0x5e>
	{
		if( Timer_Tbl[i].Timer_En == ON)   					// 타이머가 활성화 됬니?
 8000a14:	f814 3c08 	ldrb.w	r3, [r4, #-8]
 8000a18:	2b01      	cmp	r3, #1
 8000a1a:	d1f8      	bne.n	8000a0e <Hw_Timer_Tick+0x22>
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소
 8000a1c:	f834 3c06 	ldrh.w	r3, [r4, #-6]
 8000a20:	3b01      	subs	r3, #1
 8000a22:	b29b      	uxth	r3, r3
 8000a24:	f824 3c06 	strh.w	r3, [r4, #-6]

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d1f0      	bne.n	8000a0e <Hw_Timer_Tick+0x22>
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 8000a2c:	f814 2c07 	ldrb.w	r2, [r4, #-7]
 8000a30:	2a01      	cmp	r2, #1

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8000a32:	f834 2c04 	ldrh.w	r2, [r4, #-4]

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.
 8000a36:	bf08      	it	eq
 8000a38:	f804 3c08 	strbeq.w	r3, [r4, #-8]

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8000a3c:	f824 2c06 	strh.w	r2, [r4, #-6]

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8000a40:	6823      	ldr	r3, [r4, #0]
 8000a42:	3410      	adds	r4, #16
 8000a44:	4798      	blx	r3

	if( Tmr_Ctn ) Tmr_Ctn--;
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
 8000a46:	42ac      	cmp	r4, r5
 8000a48:	d1e4      	bne.n	8000a14 <Hw_Timer_Tick+0x28>
				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
			}
		}
	}
	
}
 8000a4a:	bd38      	pop	{r3, r4, r5, pc}
 8000a4c:	20000204 	.word	0x20000204
 8000a50:	200002a8 	.word	0x200002a8
 8000a54:	20000210 	.word	0x20000210

08000a58 <Hw_Timer_ISR>:
void Hw_Timer_Setup( void );



void Hw_Timer_ISR(void)
{
 8000a58:	b508      	push	{r3, lr}

	Hw_Timer_Tick();  
 8000a5a:	f640 13ed 	movw	r3, #2541	; 0x9ed
 8000a5e:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000a62:	4798      	blx	r3
 8000a64:	bd08      	pop	{r3, pc}
 8000a66:	bf00      	nop

08000a68 <Hw_Timer_Delay_ms>:
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Timer_Delay_ms( u16 DelayData )
{
	Tmr_Ctn = DelayData;
 8000a68:	4a03      	ldr	r2, [pc, #12]	; (8000a78 <Hw_Timer_Delay_ms+0x10>)
 8000a6a:	8010      	strh	r0, [r2, #0]
	
	while( Tmr_Ctn );
 8000a6c:	8813      	ldrh	r3, [r2, #0]
 8000a6e:	b29b      	uxth	r3, r3
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d1fb      	bne.n	8000a6c <Hw_Timer_Delay_ms+0x4>
}
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	200002a8 	.word	0x200002a8

08000a7c <Hw_Uart_Q_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Q_Init( void )
{
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	4804      	ldr	r0, [pc, #16]	; (8000a90 <Hw_Uart_Q_Init+0x14>)
 8000a80:	4904      	ldr	r1, [pc, #16]	; (8000a94 <Hw_Uart_Q_Init+0x18>)
	u8 i;

	for( i=0; i<HW_UART_Q_CH_MAX; i++ )
	{
		Hw_Uart_Q_Start[i] = Hw_Uart_Q_End[i] = 0;
 8000a82:	461a      	mov	r2, r3
 8000a84:	521a      	strh	r2, [r3, r0]
 8000a86:	525a      	strh	r2, [r3, r1]
 8000a88:	3302      	adds	r3, #2
---------------------------------------------------------------------------*/
void Hw_Uart_Q_Init( void )
{
	u8 i;

	for( i=0; i<HW_UART_Q_CH_MAX; i++ )
 8000a8a:	2b0e      	cmp	r3, #14
 8000a8c:	d1fa      	bne.n	8000a84 <Hw_Uart_Q_Init+0x8>
	{
		Hw_Uart_Q_Start[i] = Hw_Uart_Q_End[i] = 0;
	}
}
 8000a8e:	4770      	bx	lr
 8000a90:	20000688 	.word	0x20000688
 8000a94:	20000698 	.word	0x20000698

08000a98 <HW_UART_Q_VAILD>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 8000a98:	f240 6298 	movw	r2, #1688	; 0x698
 8000a9c:	f240 6388 	movw	r3, #1672	; 0x688
 8000aa0:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000aa4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000aa8:	f933 3010 	ldrsh.w	r3, [r3, r0, lsl #1]
 8000aac:	f932 2010 	ldrsh.w	r2, [r2, r0, lsl #1]
 8000ab0:	1ad2      	subs	r2, r2, r3
 8000ab2:	3220      	adds	r2, #32
 8000ab4:	17d3      	asrs	r3, r2, #31
 8000ab6:	0edb      	lsrs	r3, r3, #27
 8000ab8:	18d2      	adds	r2, r2, r3
 8000aba:	f002 001f 	and.w	r0, r2, #31
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_VAILD( u8 Ch )
{
	return HW_UART_Q_SIZE(Ch);
}
 8000abe:	1ac0      	subs	r0, r0, r3
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <Hw_Uart_Q_Push>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{
 8000ac4:	b470      	push	{r4, r5, r6}
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 8000ac6:	4c13      	ldr	r4, [pc, #76]	; (8000b14 <Hw_Uart_Q_Push+0x50>)
 8000ac8:	4b13      	ldr	r3, [pc, #76]	; (8000b18 <Hw_Uart_Q_Push+0x54>)
 8000aca:	f834 6010 	ldrh.w	r6, [r4, r0, lsl #1]
 8000ace:	f933 2010 	ldrsh.w	r2, [r3, r0, lsl #1]
 8000ad2:	b235      	sxth	r5, r6
 8000ad4:	1aaa      	subs	r2, r5, r2
 8000ad6:	3220      	adds	r2, #32
 8000ad8:	17d3      	asrs	r3, r2, #31
 8000ada:	0edb      	lsrs	r3, r3, #27
 8000adc:	18d2      	adds	r2, r2, r3
 8000ade:	f002 021f 	and.w	r2, r2, #31
 8000ae2:	1ad3      	subs	r3, r2, r3
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;
 8000ae4:	2b1f      	cmp	r3, #31
 8000ae6:	d012      	beq.n	8000b0e <Hw_Uart_Q_Push+0x4a>

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
 8000ae8:	3601      	adds	r6, #1
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 8000aea:	b236      	sxth	r6, r6
 8000aec:	17f3      	asrs	r3, r6, #31
 8000aee:	0edb      	lsrs	r3, r3, #27
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
 8000af0:	eb00 1240 	add.w	r2, r0, r0, lsl #5
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 8000af4:	18f6      	adds	r6, r6, r3
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
 8000af6:	7809      	ldrb	r1, [r1, #0]
 8000af8:	1955      	adds	r5, r2, r5
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 8000afa:	f006 061f 	and.w	r6, r6, #31
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
 8000afe:	4a07      	ldr	r2, [pc, #28]	; (8000b1c <Hw_Uart_Q_Push+0x58>)
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 8000b00:	1af3      	subs	r3, r6, r3
 8000b02:	f824 3010 	strh.w	r3, [r4, r0, lsl #1]
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
 8000b06:	5551      	strb	r1, [r2, r5]
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;

	return TRUE;
 8000b08:	2001      	movs	r0, #1
}
 8000b0a:	bc70      	pop	{r4, r5, r6}
 8000b0c:	4770      	bx	lr
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;
 8000b0e:	2000      	movs	r0, #0
 8000b10:	e7fb      	b.n	8000b0a <Hw_Uart_Q_Push+0x46>
 8000b12:	bf00      	nop
 8000b14:	20000698 	.word	0x20000698
 8000b18:	20000688 	.word	0x20000688
 8000b1c:	20000590 	.word	0x20000590

08000b20 <Hw_Uart_Q_Pop>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
 8000b20:	b470      	push	{r4, r5, r6}
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 8000b22:	4c12      	ldr	r4, [pc, #72]	; (8000b6c <Hw_Uart_Q_Pop+0x4c>)
 8000b24:	4a12      	ldr	r2, [pc, #72]	; (8000b70 <Hw_Uart_Q_Pop+0x50>)
 8000b26:	f834 6010 	ldrh.w	r6, [r4, r0, lsl #1]
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
 8000b2a:	4603      	mov	r3, r0
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 8000b2c:	f932 0010 	ldrsh.w	r0, [r2, r0, lsl #1]
 8000b30:	b235      	sxth	r5, r6
 8000b32:	1b40      	subs	r0, r0, r5
 8000b34:	3020      	adds	r0, #32
 8000b36:	17c2      	asrs	r2, r0, #31
 8000b38:	0ed2      	lsrs	r2, r2, #27
 8000b3a:	1880      	adds	r0, r0, r2
 8000b3c:	f000 001f 	and.w	r0, r0, #31
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;
 8000b40:	1a80      	subs	r0, r0, r2
 8000b42:	d010      	beq.n	8000b66 <Hw_Uart_Q_Pop+0x46>

	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];
 8000b44:	3601      	adds	r6, #1

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;
 8000b46:	b236      	sxth	r6, r6
 8000b48:	17f2      	asrs	r2, r6, #31
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;

	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];
 8000b4a:	eb03 1043 	add.w	r0, r3, r3, lsl #5

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;
 8000b4e:	0ed2      	lsrs	r2, r2, #27
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;

	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];
 8000b50:	1945      	adds	r5, r0, r5
 8000b52:	4808      	ldr	r0, [pc, #32]	; (8000b74 <Hw_Uart_Q_Pop+0x54>)

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;
 8000b54:	18b6      	adds	r6, r6, r2
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;

	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];
 8000b56:	5d40      	ldrb	r0, [r0, r5]

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;
 8000b58:	f006 061f 	and.w	r6, r6, #31
 8000b5c:	1ab2      	subs	r2, r6, r2
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;

	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];
 8000b5e:	7008      	strb	r0, [r1, #0]

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;

    return TRUE;
 8000b60:	2001      	movs	r0, #1
{
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;

	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;
 8000b62:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]

    return TRUE;
}
 8000b66:	bc70      	pop	{r4, r5, r6}
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	20000688 	.word	0x20000688
 8000b70:	20000698 	.word	0x20000698
 8000b74:	20000590 	.word	0x20000590

08000b78 <Hw_Led_Init>:
{
	u32 PinNum;

	//-- JTAG 핀을 Disable하고 PB3,4를 GPIO로 사용한다.(핀구성에 따라 사용하지 않을수 있음)
	//
	REG_AFIO_MAPR &= ~(0x07 << 24);
 8000b78:	2304      	movs	r3, #4
 8000b7a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000b7e:	681a      	ldr	r2, [r3, #0]
 8000b80:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 8000b84:	601a      	str	r2, [r3, #0]
	REG_AFIO_MAPR |=  (0x04 << 24);
 8000b86:	681a      	ldr	r2, [r3, #0]
 8000b88:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8000b8c:	601a      	str	r2, [r3, #0]
 8000b8e:	4770      	bx	lr

08000b90 <Hw_VCom_Init>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_VCom_Init( void )
{
 8000b90:	b508      	push	{r3, lr}
	Hw_VCom_Q_Init();
 8000b92:	f640 4319 	movw	r3, #3097	; 0xc19
 8000b96:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000b9a:	4798      	blx	r3


	Hw_VCom_RxdFuncPtr = NULL;
 8000b9c:	f240 63a8 	movw	r3, #1704	; 0x6a8
 8000ba0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]

	Disable_ISR();
 8000ba8:	b672      	cpsid	i
	Set_System();
 8000baa:	f241 5301 	movw	r3, #5377	; 0x1501
 8000bae:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000bb2:	4798      	blx	r3
	Set_USBClock();
 8000bb4:	f241 5321 	movw	r3, #5409	; 0x1521
 8000bb8:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000bbc:	4798      	blx	r3
	USB_Interrupts_Config();
 8000bbe:	f241 5365 	movw	r3, #5477	; 0x1565
 8000bc2:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000bc6:	4798      	blx	r3
	USB_Init();	
 8000bc8:	f242 1311 	movw	r3, #8465	; 0x2111
 8000bcc:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000bd0:	4798      	blx	r3

	Enable_ISR();
 8000bd2:	b662      	cpsie	i
 8000bd4:	bd08      	pop	{r3, pc}
 8000bd6:	bf00      	nop

08000bd8 <Hw_VCom_Getch>:
			: 시리얼 포트에서 문자 1바이트 읽는다.
     ARG
     RET
---------------------------------------------------------------------------*/
u8 Hw_VCom_Getch( void )
{
 8000bd8:	b510      	push	{r4, lr}
	u8 Uart_GetData = 0;
 8000bda:	2300      	movs	r3, #0
			: 시리얼 포트에서 문자 1바이트 읽는다.
     ARG
     RET
---------------------------------------------------------------------------*/
u8 Hw_VCom_Getch( void )
{
 8000bdc:	b082      	sub	sp, #8
 8000bde:	4c08      	ldr	r4, [pc, #32]	; (8000c00 <Hw_VCom_Getch+0x28>)
	u8 Uart_GetData = 0;
 8000be0:	f88d 3007 	strb.w	r3, [sp, #7]

	while( 1 )
	{
		// 버퍼에 데이터 들어올때까지 기다린다.
		if( HW_VCOM_Q_VAILD(0) > 0 ) break;
 8000be4:	2000      	movs	r0, #0
 8000be6:	47a0      	blx	r4
 8000be8:	2800      	cmp	r0, #0
 8000bea:	d0fb      	beq.n	8000be4 <Hw_VCom_Getch+0xc>
	}

	Hw_VCom_Q_Pop( 0, &Uart_GetData );
 8000bec:	2000      	movs	r0, #0
 8000bee:	f10d 0107 	add.w	r1, sp, #7
 8000bf2:	4b04      	ldr	r3, [pc, #16]	; (8000c04 <Hw_VCom_Getch+0x2c>)
 8000bf4:	4798      	blx	r3

	return Uart_GetData;
}
 8000bf6:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8000bfa:	b002      	add	sp, #8
 8000bfc:	bd10      	pop	{r4, pc}
 8000bfe:	bf00      	nop
 8000c00:	08000c31 	.word	0x08000c31
 8000c04:	08000cbd 	.word	0x08000cbd

08000c08 <Hw_VCom_Putch>:
			: 시리얼 포트로 문자 1바이트 전송
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_VCom_Putch( char Uart_PutData )
{
 8000c08:	b508      	push	{r3, lr}
	USB_Send_Data( Uart_PutData );
 8000c0a:	f241 7315 	movw	r3, #5909	; 0x1715
 8000c0e:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000c12:	4798      	blx	r3
 8000c14:	bd08      	pop	{r3, pc}
 8000c16:	bf00      	nop

08000c18 <Hw_VCom_Q_Init>:
{
	u8 i;

	for( i=0; i<HW_VCOM_Q_CH_MAX; i++ )
	{
		Hw_VCom_Q_Start[i] = Hw_VCom_Q_End[i] = 0;
 8000c18:	f640 22b0 	movw	r2, #2736	; 0xab0
 8000c1c:	f640 23b4 	movw	r3, #2740	; 0xab4
 8000c20:	2100      	movs	r1, #0
 8000c22:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000c26:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000c2a:	8011      	strh	r1, [r2, #0]
 8000c2c:	8019      	strh	r1, [r3, #0]
 8000c2e:	4770      	bx	lr

08000c30 <HW_VCOM_Q_VAILD>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_VCOM_Q_SIZE( u8 Ch )
{
	return (Hw_VCom_Q_Start[Ch] - Hw_VCom_Q_End[Ch] + HW_VCOM_Q_BUFFER_MAX) % HW_VCOM_Q_BUFFER_MAX;
 8000c30:	f640 22b4 	movw	r2, #2740	; 0xab4
 8000c34:	f640 23b0 	movw	r3, #2736	; 0xab0
 8000c38:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000c3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000c40:	f932 2010 	ldrsh.w	r2, [r2, r0, lsl #1]
 8000c44:	f933 3010 	ldrsh.w	r3, [r3, r0, lsl #1]
 8000c48:	1ad3      	subs	r3, r2, r3
 8000c4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000c4e:	17d8      	asrs	r0, r3, #31
 8000c50:	0d80      	lsrs	r0, r0, #22
 8000c52:	181b      	adds	r3, r3, r0
 8000c54:	059b      	lsls	r3, r3, #22
 8000c56:	0d9b      	lsrs	r3, r3, #22
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_VCOM_Q_VAILD( u8 Ch )
{
	return HW_VCOM_Q_SIZE(Ch);
}
 8000c58:	1a18      	subs	r0, r3, r0
 8000c5a:	4770      	bx	lr

08000c5c <Hw_VCom_Q_Push>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_VCom_Q_Push( u8 Ch, u8  *PushData )
{
 8000c5c:	b470      	push	{r4, r5, r6}
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_VCOM_Q_SIZE( u8 Ch )
{
	return (Hw_VCom_Q_Start[Ch] - Hw_VCom_Q_End[Ch] + HW_VCOM_Q_BUFFER_MAX) % HW_VCOM_Q_BUFFER_MAX;
 8000c5e:	4c14      	ldr	r4, [pc, #80]	; (8000cb0 <Hw_VCom_Q_Push+0x54>)
 8000c60:	4b14      	ldr	r3, [pc, #80]	; (8000cb4 <Hw_VCom_Q_Push+0x58>)
 8000c62:	f834 6010 	ldrh.w	r6, [r4, r0, lsl #1]
 8000c66:	f933 3010 	ldrsh.w	r3, [r3, r0, lsl #1]
 8000c6a:	b235      	sxth	r5, r6
 8000c6c:	1aeb      	subs	r3, r5, r3
 8000c6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000c72:	17da      	asrs	r2, r3, #31
 8000c74:	0d92      	lsrs	r2, r2, #22
 8000c76:	189b      	adds	r3, r3, r2
 8000c78:	059b      	lsls	r3, r3, #22
 8000c7a:	0d9b      	lsrs	r3, r3, #22
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_VCom_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_VCOM_Q_SIZE(Ch) == (HW_VCOM_Q_BUFFER_MAX-1)) return FALSE;
 8000c7c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8000c80:	429a      	cmp	r2, r3
 8000c82:	d012      	beq.n	8000caa <Hw_VCom_Q_Push+0x4e>

	Hw_VCom_Q_Buffer[Ch][Hw_VCom_Q_Start[Ch]++]  = *PushData;
 8000c84:	3601      	adds	r6, #1
	Hw_VCom_Q_Start[Ch] 						%= HW_VCOM_Q_BUFFER_MAX;
 8000c86:	b236      	sxth	r6, r6
 8000c88:	17f2      	asrs	r2, r6, #31
 8000c8a:	0d92      	lsrs	r2, r2, #22
 8000c8c:	18b3      	adds	r3, r6, r2
 8000c8e:	059b      	lsls	r3, r3, #22
 8000c90:	0d9b      	lsrs	r3, r3, #22
u8 Hw_VCom_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_VCOM_Q_SIZE(Ch) == (HW_VCOM_Q_BUFFER_MAX-1)) return FALSE;

	Hw_VCom_Q_Buffer[Ch][Hw_VCom_Q_Start[Ch]++]  = *PushData;
 8000c92:	7809      	ldrb	r1, [r1, #0]
 8000c94:	eb00 2680 	add.w	r6, r0, r0, lsl #10
	Hw_VCom_Q_Start[Ch] 						%= HW_VCOM_Q_BUFFER_MAX;
 8000c98:	1a9b      	subs	r3, r3, r2
u8 Hw_VCom_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_VCOM_Q_SIZE(Ch) == (HW_VCOM_Q_BUFFER_MAX-1)) return FALSE;

	Hw_VCom_Q_Buffer[Ch][Hw_VCom_Q_Start[Ch]++]  = *PushData;
 8000c9a:	4a07      	ldr	r2, [pc, #28]	; (8000cb8 <Hw_VCom_Q_Push+0x5c>)
 8000c9c:	1975      	adds	r5, r6, r5
	Hw_VCom_Q_Start[Ch] 						%= HW_VCOM_Q_BUFFER_MAX;
 8000c9e:	f824 3010 	strh.w	r3, [r4, r0, lsl #1]
u8 Hw_VCom_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_VCOM_Q_SIZE(Ch) == (HW_VCOM_Q_BUFFER_MAX-1)) return FALSE;

	Hw_VCom_Q_Buffer[Ch][Hw_VCom_Q_Start[Ch]++]  = *PushData;
 8000ca2:	5551      	strb	r1, [r2, r5]
	Hw_VCom_Q_Start[Ch] 						%= HW_VCOM_Q_BUFFER_MAX;

	return TRUE;
 8000ca4:	2001      	movs	r0, #1
}
 8000ca6:	bc70      	pop	{r4, r5, r6}
 8000ca8:	4770      	bx	lr
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_VCom_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_VCOM_Q_SIZE(Ch) == (HW_VCOM_Q_BUFFER_MAX-1)) return FALSE;
 8000caa:	2000      	movs	r0, #0
 8000cac:	e7fb      	b.n	8000ca6 <Hw_VCom_Q_Push+0x4a>
 8000cae:	bf00      	nop
 8000cb0:	20000ab4 	.word	0x20000ab4
 8000cb4:	20000ab0 	.word	0x20000ab0
 8000cb8:	200006ac 	.word	0x200006ac

08000cbc <Hw_VCom_Q_Pop>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_VCom_Q_Pop( u8 Ch, u8 *pData )
{
 8000cbc:	b470      	push	{r4, r5, r6}
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_VCOM_Q_SIZE( u8 Ch )
{
	return (Hw_VCom_Q_Start[Ch] - Hw_VCom_Q_End[Ch] + HW_VCOM_Q_BUFFER_MAX) % HW_VCOM_Q_BUFFER_MAX;
 8000cbe:	4c12      	ldr	r4, [pc, #72]	; (8000d08 <Hw_VCom_Q_Pop+0x4c>)
 8000cc0:	4b12      	ldr	r3, [pc, #72]	; (8000d0c <Hw_VCom_Q_Pop+0x50>)
 8000cc2:	f834 6010 	ldrh.w	r6, [r4, r0, lsl #1]
 8000cc6:	f933 3010 	ldrsh.w	r3, [r3, r0, lsl #1]
 8000cca:	b235      	sxth	r5, r6
 8000ccc:	1b5b      	subs	r3, r3, r5
 8000cce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_VCom_Q_Pop( u8 Ch, u8 *pData )
{
 8000cd2:	4602      	mov	r2, r0
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_VCOM_Q_SIZE( u8 Ch )
{
	return (Hw_VCom_Q_Start[Ch] - Hw_VCom_Q_End[Ch] + HW_VCOM_Q_BUFFER_MAX) % HW_VCOM_Q_BUFFER_MAX;
 8000cd4:	17d8      	asrs	r0, r3, #31
 8000cd6:	0d80      	lsrs	r0, r0, #22
 8000cd8:	181b      	adds	r3, r3, r0
 8000cda:	059b      	lsls	r3, r3, #22
 8000cdc:	0d9b      	lsrs	r3, r3, #22
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_VCom_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_VCOM_Q_SIZE(Ch) == 0) return FALSE;
 8000cde:	1a18      	subs	r0, r3, r0
 8000ce0:	d010      	beq.n	8000d04 <Hw_VCom_Q_Pop+0x48>

	*pData = Hw_VCom_Q_Buffer[Ch][Hw_VCom_Q_End[Ch]++];
 8000ce2:	3601      	adds	r6, #1

	Hw_VCom_Q_End[Ch] %= HW_VCOM_Q_BUFFER_MAX;
 8000ce4:	b236      	sxth	r6, r6
 8000ce6:	17f3      	asrs	r3, r6, #31
 8000ce8:	0d9b      	lsrs	r3, r3, #22
---------------------------------------------------------------------------*/
u8 Hw_VCom_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_VCOM_Q_SIZE(Ch) == 0) return FALSE;

	*pData = Hw_VCom_Q_Buffer[Ch][Hw_VCom_Q_End[Ch]++];
 8000cea:	eb02 2082 	add.w	r0, r2, r2, lsl #10
 8000cee:	1945      	adds	r5, r0, r5

	Hw_VCom_Q_End[Ch] %= HW_VCOM_Q_BUFFER_MAX;
 8000cf0:	18f6      	adds	r6, r6, r3
---------------------------------------------------------------------------*/
u8 Hw_VCom_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_VCOM_Q_SIZE(Ch) == 0) return FALSE;

	*pData = Hw_VCom_Q_Buffer[Ch][Hw_VCom_Q_End[Ch]++];
 8000cf2:	4807      	ldr	r0, [pc, #28]	; (8000d10 <Hw_VCom_Q_Pop+0x54>)

	Hw_VCom_Q_End[Ch] %= HW_VCOM_Q_BUFFER_MAX;
 8000cf4:	05b6      	lsls	r6, r6, #22
---------------------------------------------------------------------------*/
u8 Hw_VCom_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_VCOM_Q_SIZE(Ch) == 0) return FALSE;

	*pData = Hw_VCom_Q_Buffer[Ch][Hw_VCom_Q_End[Ch]++];
 8000cf6:	5d40      	ldrb	r0, [r0, r5]

	Hw_VCom_Q_End[Ch] %= HW_VCOM_Q_BUFFER_MAX;
 8000cf8:	0db6      	lsrs	r6, r6, #22
 8000cfa:	1af6      	subs	r6, r6, r3
---------------------------------------------------------------------------*/
u8 Hw_VCom_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_VCOM_Q_SIZE(Ch) == 0) return FALSE;

	*pData = Hw_VCom_Q_Buffer[Ch][Hw_VCom_Q_End[Ch]++];
 8000cfc:	7008      	strb	r0, [r1, #0]

	Hw_VCom_Q_End[Ch] %= HW_VCOM_Q_BUFFER_MAX;

    return TRUE;
 8000cfe:	2001      	movs	r0, #1
{
	if (HW_VCOM_Q_SIZE(Ch) == 0) return FALSE;

	*pData = Hw_VCom_Q_Buffer[Ch][Hw_VCom_Q_End[Ch]++];

	Hw_VCom_Q_End[Ch] %= HW_VCOM_Q_BUFFER_MAX;
 8000d00:	f824 6012 	strh.w	r6, [r4, r2, lsl #1]

    return TRUE;
}
 8000d04:	bc70      	pop	{r4, r5, r6}
 8000d06:	4770      	bx	lr
 8000d08:	20000ab0 	.word	0x20000ab0
 8000d0c:	20000ab4 	.word	0x20000ab4
 8000d10:	200006ac 	.word	0x200006ac

08000d14 <EP1_IN_Callback>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void EP1_IN_Callback (void)
{
 8000d14:	b538      	push	{r3, r4, r5, lr}
  uint16_t USB_Tx_ptr;
  uint16_t USB_Tx_length;
  
  if (USB_Tx_State == 1)
 8000d16:	4b15      	ldr	r3, [pc, #84]	; (8000d6c <EP1_IN_Callback+0x58>)
 8000d18:	781a      	ldrb	r2, [r3, #0]
 8000d1a:	2a01      	cmp	r2, #1
 8000d1c:	d000      	beq.n	8000d20 <EP1_IN_Callback+0xc>
 8000d1e:	bd38      	pop	{r3, r4, r5, pc}
  {
    if (USART_Rx_length == 0) 
 8000d20:	4c13      	ldr	r4, [pc, #76]	; (8000d70 <EP1_IN_Callback+0x5c>)
 8000d22:	6820      	ldr	r0, [r4, #0]
 8000d24:	b300      	cbz	r0, 8000d68 <EP1_IN_Callback+0x54>
    {
      USB_Tx_State = 0;
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
 8000d26:	2840      	cmp	r0, #64	; 0x40
        USB_Tx_ptr = USART_Rx_ptr_out;
 8000d28:	4a12      	ldr	r2, [pc, #72]	; (8000d74 <EP1_IN_Callback+0x60>)
    {
      USB_Tx_State = 0;
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
 8000d2a:	d814      	bhi.n	8000d56 <EP1_IN_Callback+0x42>
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
        USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;    
      }
      else 
      {
        USB_Tx_ptr = USART_Rx_ptr_out;
 8000d2c:	6813      	ldr	r3, [r2, #0]
        USB_Tx_length = USART_Rx_length;
 8000d2e:	b285      	uxth	r5, r0
        
        USART_Rx_ptr_out += USART_Rx_length;
 8000d30:	1818      	adds	r0, r3, r0
 8000d32:	6010      	str	r0, [r2, #0]
        USART_Rx_length = 0;
 8000d34:	2200      	movs	r2, #0
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
        USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;    
      }
      else 
      {
        USB_Tx_ptr = USART_Rx_ptr_out;
 8000d36:	b29b      	uxth	r3, r3
        USB_Tx_length = USART_Rx_length;
        
        USART_Rx_ptr_out += USART_Rx_length;
        USART_Rx_length = 0;
 8000d38:	6022      	str	r2, [r4, #0]
      }
      UserToPMABufferCopy(&USART_Rx_Buffer[USB_Tx_ptr], ENDP1_TXADDR, USB_Tx_length);
 8000d3a:	480f      	ldr	r0, [pc, #60]	; (8000d78 <EP1_IN_Callback+0x64>)
 8000d3c:	21c0      	movs	r1, #192	; 0xc0
 8000d3e:	18c0      	adds	r0, r0, r3
 8000d40:	462a      	mov	r2, r5
 8000d42:	4b0e      	ldr	r3, [pc, #56]	; (8000d7c <EP1_IN_Callback+0x68>)
 8000d44:	4798      	blx	r3
      SetEPTxCount(ENDP1, USB_Tx_length);
 8000d46:	2001      	movs	r0, #1
 8000d48:	4629      	mov	r1, r5
 8000d4a:	4b0d      	ldr	r3, [pc, #52]	; (8000d80 <EP1_IN_Callback+0x6c>)
 8000d4c:	4798      	blx	r3
      SetEPTxValid(ENDP1); 
 8000d4e:	2001      	movs	r0, #1
 8000d50:	4b0c      	ldr	r3, [pc, #48]	; (8000d84 <EP1_IN_Callback+0x70>)
 8000d52:	4798      	blx	r3
 8000d54:	bd38      	pop	{r3, r4, r5, pc}
      USB_Tx_State = 0;
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
        USB_Tx_ptr = USART_Rx_ptr_out;
 8000d56:	6813      	ldr	r3, [r2, #0]
        USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
        
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
        USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;    
 8000d58:	3840      	subs	r0, #64	; 0x40
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
        USB_Tx_ptr = USART_Rx_ptr_out;
        USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
        
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
 8000d5a:	f103 0140 	add.w	r1, r3, #64	; 0x40
        USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;    
 8000d5e:	6020      	str	r0, [r4, #0]
      USB_Tx_State = 0;
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
        USB_Tx_ptr = USART_Rx_ptr_out;
 8000d60:	b29b      	uxth	r3, r3
        USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
        
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
 8000d62:	6011      	str	r1, [r2, #0]
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
        USB_Tx_ptr = USART_Rx_ptr_out;
        USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
 8000d64:	2540      	movs	r5, #64	; 0x40
 8000d66:	e7e8      	b.n	8000d3a <EP1_IN_Callback+0x26>
  
  if (USB_Tx_State == 1)
  {
    if (USART_Rx_length == 0) 
    {
      USB_Tx_State = 0;
 8000d68:	7018      	strb	r0, [r3, #0]
 8000d6a:	bd38      	pop	{r3, r4, r5, pc}
 8000d6c:	200002cc 	.word	0x200002cc
 8000d70:	200002d8 	.word	0x200002d8
 8000d74:	200002d4 	.word	0x200002d4
 8000d78:	20000b24 	.word	0x20000b24
 8000d7c:	08002155 	.word	0x08002155
 8000d80:	08002395 	.word	0x08002395
 8000d84:	08002259 	.word	0x08002259

08000d88 <EP3_OUT_Callback>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void EP3_OUT_Callback(void)
{
 8000d88:	b510      	push	{r4, lr}
  uint16_t USB_Rx_Cnt;
  
  /* Get the received data buffer and update the counter */
  USB_Rx_Cnt = USB_SIL_Read(EP3_OUT, USB_Rx_Buffer);
 8000d8a:	f640 24bc 	movw	r4, #2748	; 0xabc
 8000d8e:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8000d92:	f242 4355 	movw	r3, #9301	; 0x2455
 8000d96:	4621      	mov	r1, r4
 8000d98:	2003      	movs	r0, #3
 8000d9a:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000d9e:	4798      	blx	r3
  
  /* USB data will be immediately processed, this allow next USB traffic being 
  NAKed till the end of the USART Xfer */
  
  USB_To_USART_Send_Data(USB_Rx_Buffer, USB_Rx_Cnt);
 8000da0:	f241 6331 	movw	r3, #5681	; 0x1631
 8000da4:	b2c1      	uxtb	r1, r0
 8000da6:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000daa:	4620      	mov	r0, r4
 8000dac:	4798      	blx	r3


  /* Enable the receive of data on EP3 */
  SetEPRxValid(ENDP3);
 8000dae:	f242 237d 	movw	r3, #8829	; 0x227d
 8000db2:	2003      	movs	r0, #3
 8000db4:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000db8:	4798      	blx	r3
 8000dba:	bd10      	pop	{r4, pc}

08000dbc <SOF_Callback>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SOF_Callback(void)
{
 8000dbc:	b508      	push	{r3, lr}
  static uint32_t FrameCount = 0;
  
  if(bDeviceState == CONFIGURED)
 8000dbe:	4b08      	ldr	r3, [pc, #32]	; (8000de0 <SOF_Callback+0x24>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	2b05      	cmp	r3, #5
 8000dc4:	d000      	beq.n	8000dc8 <SOF_Callback+0xc>
 8000dc6:	bd08      	pop	{r3, pc}
  {
    if (FrameCount++ == VCOMPORT_IN_FRAME_INTERVAL)
 8000dc8:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <SOF_Callback+0x28>)
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	1c51      	adds	r1, r2, #1
 8000dce:	2a05      	cmp	r2, #5
 8000dd0:	6019      	str	r1, [r3, #0]
 8000dd2:	d1f8      	bne.n	8000dc6 <SOF_Callback+0xa>
    {
      /* Reset the frame counter */
      FrameCount = 0;
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
      
      /* Check the data to be sent through IN pipe */
      Handle_USBAsynchXfer();
 8000dd8:	4b03      	ldr	r3, [pc, #12]	; (8000de8 <SOF_Callback+0x2c>)
 8000dda:	4798      	blx	r3
 8000ddc:	e7f3      	b.n	8000dc6 <SOF_Callback+0xa>
 8000dde:	bf00      	nop
 8000de0:	200002c0 	.word	0x200002c0
 8000de4:	200002ac 	.word	0x200002ac
 8000de8:	08001671 	.word	0x08001671

08000dec <USB_Istr>:
void USB_Istr(void)
{
    uint32_t i=0;
 __IO uint32_t EP[8];
  
  wIstr = _GetISTR();
 8000dec:	f645 4244 	movw	r2, #23620	; 0x5c44
 8000df0:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8000df4:	6813      	ldr	r3, [r2, #0]
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Istr(void)
{
 8000df6:	b570      	push	{r4, r5, r6, lr}
    uint32_t i=0;
 __IO uint32_t EP[8];
  
  wIstr = _GetISTR();
 8000df8:	4c6b      	ldr	r4, [pc, #428]	; (8000fa8 <USB_Istr+0x1bc>)
 8000dfa:	b29b      	uxth	r3, r3

  //Lb_printf("%x %x %x %x  \r\n", wIstr >> 16, wIstr & 0x0000FFFF, wInterrupt_Mask >> 16, wInterrupt_Mask&0x0000FFFF);

#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
 8000dfc:	4d6b      	ldr	r5, [pc, #428]	; (8000fac <USB_Istr+0x1c0>)
void USB_Istr(void)
{
    uint32_t i=0;
 __IO uint32_t EP[8];
  
  wIstr = _GetISTR();
 8000dfe:	8023      	strh	r3, [r4, #0]

  //Lb_printf("%x %x %x %x  \r\n", wIstr >> 16, wIstr & 0x0000FFFF, wInterrupt_Mask >> 16, wInterrupt_Mask&0x0000FFFF);

#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
 8000e00:	8821      	ldrh	r1, [r4, #0]
 8000e02:	882b      	ldrh	r3, [r5, #0]
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Istr(void)
{
 8000e04:	b088      	sub	sp, #32
  wIstr = _GetISTR();

  //Lb_printf("%x %x %x %x  \r\n", wIstr >> 16, wIstr & 0x0000FFFF, wInterrupt_Mask >> 16, wInterrupt_Mask&0x0000FFFF);

#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
 8000e06:	4019      	ands	r1, r3
 8000e08:	f401 7100 	and.w	r1, r1, #512	; 0x200
 8000e0c:	b289      	uxth	r1, r1
 8000e0e:	2900      	cmp	r1, #0
 8000e10:	d168      	bne.n	8000ee4 <USB_Istr+0xf8>
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  
  
#if (IMR_MSK & ISTR_CTR)
  if (wIstr & ISTR_CTR & wInterrupt_Mask)
 8000e12:	8822      	ldrh	r2, [r4, #0]
 8000e14:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8000e18:	4213      	tst	r3, r2
 8000e1a:	d15f      	bne.n	8000edc <USB_Istr+0xf0>
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  
#if (IMR_MSK & ISTR_RESET)
  if (wIstr & ISTR_RESET & wInterrupt_Mask)
 8000e1c:	8822      	ldrh	r2, [r4, #0]
 8000e1e:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8000e22:	4213      	tst	r3, r2
 8000e24:	d14e      	bne.n	8000ec4 <USB_Istr+0xd8>
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_ERR)
  if (wIstr & ISTR_ERR & wInterrupt_Mask)
 8000e26:	8822      	ldrh	r2, [r4, #0]
 8000e28:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8000e2c:	4213      	tst	r3, r2
  {
    _SetISTR((uint16_t)CLR_ERR);
 8000e2e:	bf1f      	itttt	ne
 8000e30:	f645 4244 	movwne	r2, #23620	; 0x5c44
 8000e34:	f2c4 0200 	movtne	r2, #16384	; 0x4000
 8000e38:	f64d 71ff 	movwne	r1, #57343	; 0xdfff
 8000e3c:	6011      	strne	r1, [r2, #0]
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_WKUP)
  if (wIstr & ISTR_WKUP & wInterrupt_Mask)
 8000e3e:	8822      	ldrh	r2, [r4, #0]
 8000e40:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8000e44:	4213      	tst	r3, r2
 8000e46:	d131      	bne.n	8000eac <USB_Istr+0xc0>
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_SUSP)
  if (wIstr & ISTR_SUSP & wInterrupt_Mask)
 8000e48:	8822      	ldrh	r2, [r4, #0]
 8000e4a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8000e4e:	4213      	tst	r3, r2
 8000e50:	d00e      	beq.n	8000e70 <USB_Istr+0x84>
  {
	//Lb_printf(" in susp ");
    /* check if SUSPEND is possible */
    if(fSuspendEnabled)
 8000e52:	4b57      	ldr	r3, [pc, #348]	; (8000fb0 <USB_Istr+0x1c4>)
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d125      	bne.n	8000ea6 <USB_Istr+0xba>
    }
    else
    {
      //Lb_printf("l\n");    	
      /* if not possible then resume after xx ms */
      Resume(RESUME_LATER);
 8000e5a:	2002      	movs	r0, #2
 8000e5c:	4b55      	ldr	r3, [pc, #340]	; (8000fb4 <USB_Istr+0x1c8>)
 8000e5e:	4798      	blx	r3
    }
    
    //Lb_printf(" out susp ");
    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    _SetISTR((uint16_t)CLR_SUSP);
 8000e60:	f645 4244 	movw	r2, #23620	; 0x5c44
 8000e64:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8000e68:	f24f 71ff 	movw	r1, #63487	; 0xf7ff
 8000e6c:	882b      	ldrh	r3, [r5, #0]
 8000e6e:	6011      	str	r1, [r2, #0]
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/

#if (IMR_MSK & ISTR_ESOF)
  if (wIstr & ISTR_ESOF & wInterrupt_Mask)
 8000e70:	8822      	ldrh	r2, [r4, #0]
 8000e72:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8000e76:	4213      	tst	r3, r2
 8000e78:	d013      	beq.n	8000ea2 <USB_Istr+0xb6>
  {
    /* clear ESOF flag in ISTR */
    _SetISTR((uint16_t)CLR_ESOF);
 8000e7a:	f645 4244 	movw	r2, #23620	; 0x5c44
 8000e7e:	f64f 61ff 	movw	r1, #65279	; 0xfeff
 8000e82:	f2c4 0200 	movt	r2, #16384	; 0x4000
    
    if ((_GetFNR()&FNR_RXDP)!=0)
 8000e86:	f645 4348 	movw	r3, #23624	; 0x5c48

#if (IMR_MSK & ISTR_ESOF)
  if (wIstr & ISTR_ESOF & wInterrupt_Mask)
  {
    /* clear ESOF flag in ISTR */
    _SetISTR((uint16_t)CLR_ESOF);
 8000e8a:	6011      	str	r1, [r2, #0]
    
    if ((_GetFNR()&FNR_RXDP)!=0)
 8000e8c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	0419      	lsls	r1, r3, #16
 8000e94:	d432      	bmi.n	8000efc <USB_Istr+0x110>
        esof_counter = 0;
      }
    }
    else
    {
        esof_counter = 0;
 8000e96:	4b48      	ldr	r3, [pc, #288]	; (8000fb8 <USB_Istr+0x1cc>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
    }
    
    /* resume handling timing is made with ESOFs */
    Resume(RESUME_ESOF); /* request without change of the machine state */
 8000e9c:	2007      	movs	r0, #7
 8000e9e:	4b45      	ldr	r3, [pc, #276]	; (8000fb4 <USB_Istr+0x1c8>)
 8000ea0:	4798      	blx	r3
#ifdef ESOF_CALLBACK
    ESOF_Callback();
#endif
  }
#endif
} /* USB_Istr */
 8000ea2:	b008      	add	sp, #32
 8000ea4:	bd70      	pop	{r4, r5, r6, pc}
	//Lb_printf(" in susp ");
    /* check if SUSPEND is possible */
    if(fSuspendEnabled)
    {
      //Lb_printf("k\n");
      Suspend();
 8000ea6:	4b45      	ldr	r3, [pc, #276]	; (8000fbc <USB_Istr+0x1d0>)
 8000ea8:	4798      	blx	r3
 8000eaa:	e7d9      	b.n	8000e60 <USB_Istr+0x74>
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_WKUP)
  if (wIstr & ISTR_WKUP & wInterrupt_Mask)
  {
    _SetISTR((uint16_t)CLR_WKUP);
 8000eac:	f645 4344 	movw	r3, #23620	; 0x5c44
 8000eb0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000eb4:	f64e 72ff 	movw	r2, #61439	; 0xefff
 8000eb8:	601a      	str	r2, [r3, #0]
    Resume(RESUME_EXTERNAL);
 8000eba:	2000      	movs	r0, #0
 8000ebc:	4b3d      	ldr	r3, [pc, #244]	; (8000fb4 <USB_Istr+0x1c8>)
 8000ebe:	4798      	blx	r3
 8000ec0:	882b      	ldrh	r3, [r5, #0]
 8000ec2:	e7c1      	b.n	8000e48 <USB_Istr+0x5c>
#if (IMR_MSK & ISTR_RESET)
  if (wIstr & ISTR_RESET & wInterrupt_Mask)
  {
  	//Lb_printf(" ISTR_RESET ");
  	
    _SetISTR((uint16_t)CLR_RESET);
 8000ec4:	f645 4344 	movw	r3, #23620	; 0x5c44
 8000ec8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000ecc:	f64f 32ff 	movw	r2, #64511	; 0xfbff
 8000ed0:	601a      	str	r2, [r3, #0]
    Device_Property.Reset();
 8000ed2:	4b3b      	ldr	r3, [pc, #236]	; (8000fc0 <USB_Istr+0x1d4>)
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	4798      	blx	r3
 8000ed8:	882b      	ldrh	r3, [r5, #0]
 8000eda:	e7a4      	b.n	8000e26 <USB_Istr+0x3a>
#if (IMR_MSK & ISTR_CTR)
  if (wIstr & ISTR_CTR & wInterrupt_Mask)
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    CTR_LP();
 8000edc:	4b39      	ldr	r3, [pc, #228]	; (8000fc4 <USB_Istr+0x1d8>)
 8000ede:	4798      	blx	r3
 8000ee0:	882b      	ldrh	r3, [r5, #0]
 8000ee2:	e79b      	b.n	8000e1c <USB_Istr+0x30>
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
  {
	//Lb_printf(" ISTR_SOF ");

    _SetISTR((uint16_t)CLR_SOF);
    bIntPackSOF++;
 8000ee4:	4b38      	ldr	r3, [pc, #224]	; (8000fc8 <USB_Istr+0x1dc>)
#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
  {
	//Lb_printf(" ISTR_SOF ");

    _SetISTR((uint16_t)CLR_SOF);
 8000ee6:	f64f 51ff 	movw	r1, #65023	; 0xfdff
 8000eea:	6011      	str	r1, [r2, #0]
    bIntPackSOF++;
 8000eec:	781a      	ldrb	r2, [r3, #0]
 8000eee:	3201      	adds	r2, #1
 8000ef0:	b2d2      	uxtb	r2, r2
 8000ef2:	701a      	strb	r2, [r3, #0]

#ifdef SOF_CALLBACK
    SOF_Callback();
 8000ef4:	4b35      	ldr	r3, [pc, #212]	; (8000fcc <USB_Istr+0x1e0>)
 8000ef6:	4798      	blx	r3
 8000ef8:	882b      	ldrh	r3, [r5, #0]
 8000efa:	e78a      	b.n	8000e12 <USB_Istr+0x26>
    _SetISTR((uint16_t)CLR_ESOF);
    
    if ((_GetFNR()&FNR_RXDP)!=0)
    {
      /* increment ESOF counter */
      esof_counter ++;
 8000efc:	492e      	ldr	r1, [pc, #184]	; (8000fb8 <USB_Istr+0x1cc>)
 8000efe:	680b      	ldr	r3, [r1, #0]
 8000f00:	3301      	adds	r3, #1
 8000f02:	600b      	str	r3, [r1, #0]
      
      /* test if we enter in ESOF more than 3 times with FSUSP =0 and RXDP =1=>> possible missing SUSP flag*/
      if ((esof_counter >3)&&((_GetCNTR()&CNTR_FSUSP)==0))
 8000f04:	680b      	ldr	r3, [r1, #0]
 8000f06:	2b03      	cmp	r3, #3
 8000f08:	d9c8      	bls.n	8000e9c <USB_Istr+0xb0>
 8000f0a:	f645 4240 	movw	r2, #23616	; 0x5c40
 8000f0e:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8000f12:	6813      	ldr	r3, [r2, #0]
 8000f14:	f013 0308 	ands.w	r3, r3, #8
 8000f18:	d1c0      	bne.n	8000e9c <USB_Istr+0xb0>
      {           
        /* this a sequence to apply a force RESET*/
      
        /*Store CNTR value */
        wCNTR = _GetCNTR(); 
 8000f1a:	6810      	ldr	r0, [r2, #0]
 8000f1c:	4d2c      	ldr	r5, [pc, #176]	; (8000fd0 <USB_Istr+0x1e4>)
 8000f1e:	b280      	uxth	r0, r0
 8000f20:	f44f 42b8 	mov.w	r2, #23552	; 0x5c00
 8000f24:	6028      	str	r0, [r5, #0]
 8000f26:	f2c4 0200 	movt	r2, #16384	; 0x4000
      
        /*Store endpoints registers status */
        for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 8000f2a:	f852 4b04 	ldr.w	r4, [r2], #4
 8000f2e:	ae08      	add	r6, sp, #32
 8000f30:	eb06 0083 	add.w	r0, r6, r3, lsl #2
 8000f34:	3301      	adds	r3, #1
 8000f36:	b2a4      	uxth	r4, r4
 8000f38:	2b08      	cmp	r3, #8
 8000f3a:	f840 4c20 	str.w	r4, [r0, #-32]
 8000f3e:	d1f4      	bne.n	8000f2a <USB_Istr+0x13e>
      
        /*apply FRES */
        wCNTR|=CNTR_FRES;
 8000f40:	682a      	ldr	r2, [r5, #0]
        _SetCNTR(wCNTR);
 8000f42:	f645 4340 	movw	r3, #23616	; 0x5c40
      
        /*Store endpoints registers status */
        for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
      
        /*apply FRES */
        wCNTR|=CNTR_FRES;
 8000f46:	f042 0201 	orr.w	r2, r2, #1
 8000f4a:	602a      	str	r2, [r5, #0]
        _SetCNTR(wCNTR);
 8000f4c:	682a      	ldr	r2, [r5, #0]
 8000f4e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000f52:	b292      	uxth	r2, r2
 8000f54:	601a      	str	r2, [r3, #0]
 
        /*clear FRES*/
        wCNTR&=~CNTR_FRES;
 8000f56:	682a      	ldr	r2, [r5, #0]
        _SetCNTR(wCNTR);
      
        /*poll for RESET flag in ISTR*/
        while((_GetISTR()&ISTR_RESET) == 0);
 8000f58:	f645 4044 	movw	r0, #23620	; 0x5c44
        /*apply FRES */
        wCNTR|=CNTR_FRES;
        _SetCNTR(wCNTR);
 
        /*clear FRES*/
        wCNTR&=~CNTR_FRES;
 8000f5c:	f022 0201 	bic.w	r2, r2, #1
 8000f60:	602a      	str	r2, [r5, #0]
        _SetCNTR(wCNTR);
 8000f62:	682a      	ldr	r2, [r5, #0]
      
        /*poll for RESET flag in ISTR*/
        while((_GetISTR()&ISTR_RESET) == 0);
 8000f64:	f2c4 0000 	movt	r0, #16384	; 0x4000
        wCNTR|=CNTR_FRES;
        _SetCNTR(wCNTR);
 
        /*clear FRES*/
        wCNTR&=~CNTR_FRES;
        _SetCNTR(wCNTR);
 8000f68:	b292      	uxth	r2, r2
 8000f6a:	601a      	str	r2, [r3, #0]
      
        /*poll for RESET flag in ISTR*/
        while((_GetISTR()&ISTR_RESET) == 0);
 8000f6c:	6802      	ldr	r2, [r0, #0]
 8000f6e:	f645 4344 	movw	r3, #23620	; 0x5c44
 8000f72:	0552      	lsls	r2, r2, #21
 8000f74:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000f78:	d5f8      	bpl.n	8000f6c <USB_Istr+0x180>
  
        /* clear RESET flag in ISTR */
        _SetISTR((uint16_t)CLR_RESET);
 8000f7a:	f44f 42b8 	mov.w	r2, #23552	; 0x5c00
 8000f7e:	f64f 30ff 	movw	r0, #64511	; 0xfbff
 8000f82:	6018      	str	r0, [r3, #0]
 8000f84:	f2c4 0200 	movt	r2, #16384	; 0x4000
   
       /*restore Enpoints*/
        for (i=0;i<8;i++)
 8000f88:	2300      	movs	r3, #0
        _SetENDPOINT(i, EP[i]);
 8000f8a:	ac08      	add	r4, sp, #32
 8000f8c:	eb04 0083 	add.w	r0, r4, r3, lsl #2
 8000f90:	f850 0c20 	ldr.w	r0, [r0, #-32]
  
        /* clear RESET flag in ISTR */
        _SetISTR((uint16_t)CLR_RESET);
   
       /*restore Enpoints*/
        for (i=0;i<8;i++)
 8000f94:	3301      	adds	r3, #1
        _SetENDPOINT(i, EP[i]);
 8000f96:	b280      	uxth	r0, r0
  
        /* clear RESET flag in ISTR */
        _SetISTR((uint16_t)CLR_RESET);
   
       /*restore Enpoints*/
        for (i=0;i<8;i++)
 8000f98:	2b08      	cmp	r3, #8
        _SetENDPOINT(i, EP[i]);
 8000f9a:	f842 0b04 	str.w	r0, [r2], #4
  
        /* clear RESET flag in ISTR */
        _SetISTR((uint16_t)CLR_RESET);
   
       /*restore Enpoints*/
        for (i=0;i<8;i++)
 8000f9e:	d1f4      	bne.n	8000f8a <USB_Istr+0x19e>
        _SetENDPOINT(i, EP[i]);
      
        esof_counter = 0;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	600b      	str	r3, [r1, #0]
 8000fa4:	e77a      	b.n	8000e9c <USB_Istr+0xb0>
 8000fa6:	bf00      	nop
 8000fa8:	20000afc 	.word	0x20000afc
 8000fac:	20001358 	.word	0x20001358
 8000fb0:	200002c4 	.word	0x200002c4
 8000fb4:	080013e9 	.word	0x080013e9
 8000fb8:	200002b8 	.word	0x200002b8
 8000fbc:	080012b9 	.word	0x080012b9
 8000fc0:	2000005c 	.word	0x2000005c
 8000fc4:	0800248d 	.word	0x0800248d
 8000fc8:	200002b4 	.word	0x200002b4
 8000fcc:	08000dbd 	.word	0x08000dbd
 8000fd0:	200002b0 	.word	0x200002b0

08000fd4 <Virtual_Com_Port_SetConfiguration>:
*******************************************************************************/
void Virtual_Com_Port_SetConfiguration(void)
{
  DEVICE_INFO *pInfo = &Device_Info;

  if (pInfo->Current_Configuration != 0)
 8000fd4:	4b03      	ldr	r3, [pc, #12]	; (8000fe4 <Virtual_Com_Port_SetConfiguration+0x10>)
 8000fd6:	7a9b      	ldrb	r3, [r3, #10]
 8000fd8:	b113      	cbz	r3, 8000fe0 <Virtual_Com_Port_SetConfiguration+0xc>
  {
    /* Device configured */
    bDeviceState = CONFIGURED;
 8000fda:	4b03      	ldr	r3, [pc, #12]	; (8000fe8 <Virtual_Com_Port_SetConfiguration+0x14>)
 8000fdc:	2205      	movs	r2, #5
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	20001334 	.word	0x20001334
 8000fe8:	200002c0 	.word	0x200002c0

08000fec <Virtual_Com_Port_SetDeviceAddress>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_SetDeviceAddress (void)
{
  bDeviceState = ADDRESSED;
 8000fec:	f240 23c0 	movw	r3, #704	; 0x2c0
 8000ff0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000ff4:	2204      	movs	r2, #4
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop

08000ffc <Virtual_Com_Port_Status_In>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Status_In(void)
{
  if (Request == SET_LINE_CODING)
 8000ffc:	4b03      	ldr	r3, [pc, #12]	; (800100c <Virtual_Com_Port_Status_In+0x10>)
 8000ffe:	781a      	ldrb	r2, [r3, #0]
 8001000:	2a20      	cmp	r2, #32
 8001002:	d101      	bne.n	8001008 <Virtual_Com_Port_Status_In+0xc>
  {
    //USART_Config();
    Request = 0;
 8001004:	2200      	movs	r2, #0
 8001006:	701a      	strb	r2, [r3, #0]
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	200002bc 	.word	0x200002bc

08001010 <Virtual_Com_Port_Status_Out>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Status_Out(void)
{}
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop

08001014 <Virtual_Com_Port_Data_Setup>:
{
  uint8_t    *(*CopyRoutine)(uint16_t);

  CopyRoutine = NULL;

  if (RequestNo == GET_LINE_CODING)
 8001014:	2821      	cmp	r0, #33	; 0x21
* Input          : Request Nb.
* Output         : None.
* Return         : USB_UNSUPPORT or USB_SUCCESS.
*******************************************************************************/
RESULT Virtual_Com_Port_Data_Setup(uint8_t RequestNo)
{
 8001016:	b510      	push	{r4, lr}
 8001018:	4603      	mov	r3, r0
  uint8_t    *(*CopyRoutine)(uint16_t);

  CopyRoutine = NULL;

  if (RequestNo == GET_LINE_CODING)
 800101a:	d003      	beq.n	8001024 <Virtual_Com_Port_Data_Setup+0x10>
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    {
      CopyRoutine = Virtual_Com_Port_GetLineCoding;
    }
  }
  else if (RequestNo == SET_LINE_CODING)
 800101c:	2820      	cmp	r0, #32
 800101e:	d011      	beq.n	8001044 <Virtual_Com_Port_Data_Setup+0x30>
    Request = SET_LINE_CODING;
  }

  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
 8001020:	2002      	movs	r0, #2
 8001022:	bd10      	pop	{r4, pc}

  CopyRoutine = NULL;

  if (RequestNo == GET_LINE_CODING)
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 8001024:	4a0f      	ldr	r2, [pc, #60]	; (8001064 <Virtual_Com_Port_Data_Setup+0x50>)
 8001026:	6813      	ldr	r3, [r2, #0]
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800102e:	2b21      	cmp	r3, #33	; 0x21
 8001030:	d1f6      	bne.n	8001020 <Virtual_Com_Port_Data_Setup+0xc>
    {
      CopyRoutine = Virtual_Com_Port_GetLineCoding;
 8001032:	490d      	ldr	r1, [pc, #52]	; (8001068 <Virtual_Com_Port_Data_Setup+0x54>)
  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
  }

  pInformation->Ctrl_Info.CopyData = CopyRoutine;
 8001034:	6813      	ldr	r3, [r2, #0]
  pInformation->Ctrl_Info.Usb_wOffset = 0;
 8001036:	2400      	movs	r4, #0
  (*CopyRoutine)(0);
 8001038:	4620      	mov	r0, r4
  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
  }

  pInformation->Ctrl_Info.CopyData = CopyRoutine;
 800103a:	6199      	str	r1, [r3, #24]
  pInformation->Ctrl_Info.Usb_wOffset = 0;
 800103c:	825c      	strh	r4, [r3, #18]
  (*CopyRoutine)(0);
 800103e:	4788      	blx	r1
  return USB_SUCCESS;
 8001040:	4620      	mov	r0, r4
 8001042:	bd10      	pop	{r4, pc}
      CopyRoutine = Virtual_Com_Port_GetLineCoding;
    }
  }
  else if (RequestNo == SET_LINE_CODING)
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 8001044:	4a07      	ldr	r2, [pc, #28]	; (8001064 <Virtual_Com_Port_Data_Setup+0x50>)
 8001046:	6811      	ldr	r1, [r2, #0]
 8001048:	7809      	ldrb	r1, [r1, #0]
 800104a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800104e:	2921      	cmp	r1, #33	; 0x21
 8001050:	d003      	beq.n	800105a <Virtual_Com_Port_Data_Setup+0x46>
    {
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
    }
    Request = SET_LINE_CODING;
 8001052:	4a06      	ldr	r2, [pc, #24]	; (800106c <Virtual_Com_Port_Data_Setup+0x58>)
  }

  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
 8001054:	2002      	movs	r0, #2
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    {
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
    }
    Request = SET_LINE_CODING;
 8001056:	7013      	strb	r3, [r2, #0]

  pInformation->Ctrl_Info.CopyData = CopyRoutine;
  pInformation->Ctrl_Info.Usb_wOffset = 0;
  (*CopyRoutine)(0);
  return USB_SUCCESS;
}
 8001058:	bd10      	pop	{r4, pc}
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    {
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
    }
    Request = SET_LINE_CODING;
 800105a:	4804      	ldr	r0, [pc, #16]	; (800106c <Virtual_Com_Port_Data_Setup+0x58>)
  }
  else if (RequestNo == SET_LINE_CODING)
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    {
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
 800105c:	4904      	ldr	r1, [pc, #16]	; (8001070 <Virtual_Com_Port_Data_Setup+0x5c>)
    }
    Request = SET_LINE_CODING;
 800105e:	7003      	strb	r3, [r0, #0]
 8001060:	e7e8      	b.n	8001034 <Virtual_Com_Port_Data_Setup+0x20>
 8001062:	bf00      	nop
 8001064:	20001354 	.word	0x20001354
 8001068:	080010a9 	.word	0x080010a9
 800106c:	200002bc 	.word	0x200002bc
 8001070:	080010c1 	.word	0x080010c1

08001074 <Virtual_Com_Port_NoData_Setup>:
* Return         : USB_UNSUPPORT or USB_SUCCESS.
*******************************************************************************/
RESULT Virtual_Com_Port_NoData_Setup(uint8_t RequestNo)
{

  if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 8001074:	4b07      	ldr	r3, [pc, #28]	; (8001094 <Virtual_Com_Port_NoData_Setup+0x20>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800107e:	2b21      	cmp	r3, #33	; 0x21
 8001080:	d001      	beq.n	8001086 <Virtual_Com_Port_NoData_Setup+0x12>
    {
      return USB_SUCCESS;
    }
  }

  return USB_UNSUPPORT;
 8001082:	2002      	movs	r0, #2
}
 8001084:	4770      	bx	lr
RESULT Virtual_Com_Port_NoData_Setup(uint8_t RequestNo)
{

  if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
  {
    if (RequestNo == SET_COMM_FEATURE)
 8001086:	2802      	cmp	r0, #2
 8001088:	d001      	beq.n	800108e <Virtual_Com_Port_NoData_Setup+0x1a>
    {
      return USB_SUCCESS;
    }
    else if (RequestNo == SET_CONTROL_LINE_STATE)
 800108a:	2822      	cmp	r0, #34	; 0x22
 800108c:	d1f9      	bne.n	8001082 <Virtual_Com_Port_NoData_Setup+0xe>

  if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
  {
    if (RequestNo == SET_COMM_FEATURE)
    {
      return USB_SUCCESS;
 800108e:	2000      	movs	r0, #0
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	20001354 	.word	0x20001354

08001098 <Virtual_Com_Port_Get_Interface_Setting>:
* Output         : None.
* Return         : The address of the string descriptors.
*******************************************************************************/
RESULT Virtual_Com_Port_Get_Interface_Setting(uint8_t Interface, uint8_t AlternateSetting)
{
  if (AlternateSetting > 0)
 8001098:	b109      	cbz	r1, 800109e <Virtual_Com_Port_Get_Interface_Setting+0x6>
  {
    return USB_UNSUPPORT;
 800109a:	2002      	movs	r0, #2
 800109c:	4770      	bx	lr
  }
  else if (Interface > 1)
 800109e:	2801      	cmp	r0, #1
 80010a0:	d8fb      	bhi.n	800109a <Virtual_Com_Port_Get_Interface_Setting+0x2>
  {
    return USB_UNSUPPORT;
  }
  return USB_SUCCESS;
 80010a2:	4608      	mov	r0, r1
}
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop

080010a8 <Virtual_Com_Port_GetLineCoding>:
* Output         : None.
* Return         : Linecoding structure base address.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetLineCoding(uint16_t Length)
{
  if (Length == 0)
 80010a8:	b108      	cbz	r0, 80010ae <Virtual_Com_Port_GetLineCoding+0x6>
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
    return NULL;
  }
  return(uint8_t *)&linecoding;
 80010aa:	4803      	ldr	r0, [pc, #12]	; (80010b8 <Virtual_Com_Port_GetLineCoding+0x10>)
}
 80010ac:	4770      	bx	lr
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetLineCoding(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
 80010ae:	4b03      	ldr	r3, [pc, #12]	; (80010bc <Virtual_Com_Port_GetLineCoding+0x14>)
 80010b0:	2208      	movs	r2, #8
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	821a      	strh	r2, [r3, #16]
    return NULL;
 80010b6:	4770      	bx	lr
 80010b8:	200000d8 	.word	0x200000d8
 80010bc:	20001354 	.word	0x20001354

080010c0 <Virtual_Com_Port_SetLineCoding>:
* Output         : None.
* Return         : Linecoding structure base address.
*******************************************************************************/
uint8_t *Virtual_Com_Port_SetLineCoding(uint16_t Length)
{
  if (Length == 0)
 80010c0:	b108      	cbz	r0, 80010c6 <Virtual_Com_Port_SetLineCoding+0x6>
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
    return NULL;
  }
  return(uint8_t *)&linecoding;
 80010c2:	4803      	ldr	r0, [pc, #12]	; (80010d0 <Virtual_Com_Port_SetLineCoding+0x10>)
}
 80010c4:	4770      	bx	lr
*******************************************************************************/
uint8_t *Virtual_Com_Port_SetLineCoding(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
 80010c6:	4b03      	ldr	r3, [pc, #12]	; (80010d4 <Virtual_Com_Port_SetLineCoding+0x14>)
 80010c8:	2208      	movs	r2, #8
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	821a      	strh	r2, [r3, #16]
    return NULL;
 80010ce:	4770      	bx	lr
 80010d0:	200000d8 	.word	0x200000d8
 80010d4:	20001354 	.word	0x20001354

080010d8 <Virtual_Com_Port_GetStringDescriptor>:
* Input          : Length.
* Output         : None.
* Return         : The address of the string descriptors.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetStringDescriptor(uint16_t Length)
{
 80010d8:	b508      	push	{r3, lr}
  uint8_t wValue0 = pInformation->USBwValue0;
 80010da:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <Virtual_Com_Port_GetStringDescriptor+0x1c>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	78db      	ldrb	r3, [r3, #3]
  if (wValue0 > 4)
 80010e0:	2b04      	cmp	r3, #4
 80010e2:	d805      	bhi.n	80010f0 <Virtual_Com_Port_GetStringDescriptor+0x18>
  {
    return NULL;
  }
  else
  {
    return Standard_GetDescriptorData(Length, &String_Descriptor[wValue0]);
 80010e4:	4904      	ldr	r1, [pc, #16]	; (80010f8 <Virtual_Com_Port_GetStringDescriptor+0x20>)
 80010e6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80010ea:	4b04      	ldr	r3, [pc, #16]	; (80010fc <Virtual_Com_Port_GetStringDescriptor+0x24>)
 80010ec:	4798      	blx	r3
 80010ee:	bd08      	pop	{r3, pc}
uint8_t *Virtual_Com_Port_GetStringDescriptor(uint16_t Length)
{
  uint8_t wValue0 = pInformation->USBwValue0;
  if (wValue0 > 4)
  {
    return NULL;
 80010f0:	2000      	movs	r0, #0
  }
  else
  {
    return Standard_GetDescriptorData(Length, &String_Descriptor[wValue0]);
  }
}
 80010f2:	bd08      	pop	{r3, pc}
 80010f4:	20001354 	.word	0x20001354
 80010f8:	200000b8 	.word	0x200000b8
 80010fc:	08001b69 	.word	0x08001b69

08001100 <Virtual_Com_Port_GetConfigDescriptor>:
* Input          : Length.
* Output         : None.
* Return         : The address of the configuration descriptor.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetConfigDescriptor(uint16_t Length)
{
 8001100:	b508      	push	{r3, lr}
  return Standard_GetDescriptorData(Length, &Config_Descriptor);
 8001102:	f240 0154 	movw	r1, #84	; 0x54
 8001106:	f641 3369 	movw	r3, #7017	; 0x1b69
 800110a:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800110e:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001112:	4798      	blx	r3
}
 8001114:	bd08      	pop	{r3, pc}
 8001116:	bf00      	nop

08001118 <Virtual_Com_Port_GetDeviceDescriptor>:
* Input          : Length.
* Output         : None.
* Return         : The address of the device descriptor.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetDeviceDescriptor(uint16_t Length)
{
 8001118:	b508      	push	{r3, lr}
  return Standard_GetDescriptorData(Length, &Device_Descriptor);
 800111a:	f240 01b0 	movw	r1, #176	; 0xb0
 800111e:	f641 3369 	movw	r3, #7017	; 0x1b69
 8001122:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8001126:	f6c0 0300 	movt	r3, #2048	; 0x800
 800112a:	4798      	blx	r3
}
 800112c:	bd08      	pop	{r3, pc}
 800112e:	bf00      	nop

08001130 <Virtual_Com_Port_Reset>:
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 8001130:	f241 3254 	movw	r2, #4948	; 0x1354

  /* Current Feature initialization */
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 8001134:	f642 031c 	movw	r3, #10268	; 0x281c
 8001138:	f6c0 0300 	movt	r3, #2048	; 0x800
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 800113c:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8001140:	6812      	ldr	r2, [r2, #0]

  /* Current Feature initialization */
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 8001142:	79d9      	ldrb	r1, [r3, #7]
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
 8001144:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];

  /* Set Virtual_Com_Port DEVICE with the default Interface*/
  pInformation->Current_Interface = 0;

  SetBTABLE(BTABLE_ADDRESS);
 8001148:	f242 13ad 	movw	r3, #8621	; 0x21ad
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 800114c:	2400      	movs	r4, #0

  /* Current Feature initialization */
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 800114e:	7251      	strb	r1, [r2, #9]
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 8001150:	7294      	strb	r4, [r2, #10]

  /* Current Feature initialization */
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];

  /* Set Virtual_Com_Port DEVICE with the default Interface*/
  pInformation->Current_Interface = 0;
 8001152:	72d4      	strb	r4, [r2, #11]

  SetBTABLE(BTABLE_ADDRESS);
 8001154:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001158:	4620      	mov	r0, r4

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
 800115a:	f242 16c1 	movw	r6, #8641	; 0x21c1
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];

  /* Set Virtual_Com_Port DEVICE with the default Interface*/
  pInformation->Current_Interface = 0;

  SetBTABLE(BTABLE_ADDRESS);
 800115e:	4798      	blx	r3

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
 8001160:	f6c0 0600 	movt	r6, #2048	; 0x800
 8001164:	4620      	mov	r0, r4
 8001166:	f44f 7100 	mov.w	r1, #512	; 0x200
  SetEPTxStatus(ENDP0, EP_TX_STALL);
 800116a:	f242 15d9 	movw	r5, #8665	; 0x21d9
  pInformation->Current_Interface = 0;

  SetBTABLE(BTABLE_ADDRESS);

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
 800116e:	47b0      	blx	r6
  SetEPTxStatus(ENDP0, EP_TX_STALL);
 8001170:	f6c0 0500 	movt	r5, #2048	; 0x800
 8001174:	2110      	movs	r1, #16
 8001176:	4620      	mov	r0, r4
  SetEPRxAddr(ENDP0, ENDP0_RXADDR);
 8001178:	f242 3a2d 	movw	sl, #9005	; 0x232d

  SetBTABLE(BTABLE_ADDRESS);

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
  SetEPTxStatus(ENDP0, EP_TX_STALL);
 800117c:	47a8      	blx	r5
  SetEPRxAddr(ENDP0, ENDP0_RXADDR);
 800117e:	f6c0 0a00 	movt	sl, #2048	; 0x800
 8001182:	2140      	movs	r1, #64	; 0x40
 8001184:	4620      	mov	r0, r4
  SetEPTxAddr(ENDP0, ENDP0_TXADDR);
 8001186:	f242 3809 	movw	r8, #8969	; 0x2309
  SetBTABLE(BTABLE_ADDRESS);

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
  SetEPTxStatus(ENDP0, EP_TX_STALL);
  SetEPRxAddr(ENDP0, ENDP0_RXADDR);
 800118a:	47d0      	blx	sl
  SetEPTxAddr(ENDP0, ENDP0_TXADDR);
 800118c:	f6c0 0800 	movt	r8, #2048	; 0x800
 8001190:	2180      	movs	r1, #128	; 0x80
 8001192:	4620      	mov	r0, r4
 8001194:	47c0      	blx	r8
  Clear_Status_Out(ENDP0);
 8001196:	f242 23a1 	movw	r3, #8865	; 0x22a1
 800119a:	4620      	mov	r0, r4
 800119c:	f6c0 0300 	movt	r3, #2048	; 0x800
 80011a0:	4798      	blx	r3
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 80011a2:	f240 035c 	movw	r3, #92	; 0x5c
 80011a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80011aa:	f242 39b5 	movw	r9, #9141	; 0x23b5
 80011ae:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
 80011b2:	f6c0 0900 	movt	r9, #2048	; 0x800
 80011b6:	4620      	mov	r0, r4
 80011b8:	47c8      	blx	r9
  SetEPRxValid(ENDP0);
 80011ba:	f242 237d 	movw	r3, #8829	; 0x227d
 80011be:	f6c0 0300 	movt	r3, #2048	; 0x800
 80011c2:	4620      	mov	r0, r4
 80011c4:	4798      	blx	r3

  /* Initialize Endpoint 1 */
  SetEPType(ENDP1, EP_BULK);
 80011c6:	2001      	movs	r0, #1
 80011c8:	4621      	mov	r1, r4
 80011ca:	47b0      	blx	r6
  SetEPTxAddr(ENDP1, ENDP1_TXADDR);
 80011cc:	2001      	movs	r0, #1
 80011ce:	21c0      	movs	r1, #192	; 0xc0
 80011d0:	47c0      	blx	r8
  SetEPTxStatus(ENDP1, EP_TX_NAK);
  SetEPRxStatus(ENDP1, EP_RX_DIS);
 80011d2:	f242 2719 	movw	r7, #8729	; 0x2219
  SetEPRxValid(ENDP0);

  /* Initialize Endpoint 1 */
  SetEPType(ENDP1, EP_BULK);
  SetEPTxAddr(ENDP1, ENDP1_TXADDR);
  SetEPTxStatus(ENDP1, EP_TX_NAK);
 80011d6:	2001      	movs	r0, #1
 80011d8:	2120      	movs	r1, #32
 80011da:	47a8      	blx	r5
  SetEPRxStatus(ENDP1, EP_RX_DIS);
 80011dc:	f6c0 0700 	movt	r7, #2048	; 0x800
 80011e0:	2001      	movs	r0, #1
 80011e2:	4621      	mov	r1, r4
 80011e4:	47b8      	blx	r7

  /* Initialize Endpoint 2 */
  SetEPType(ENDP2, EP_INTERRUPT);
 80011e6:	2002      	movs	r0, #2
 80011e8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80011ec:	47b0      	blx	r6
  SetEPTxAddr(ENDP2, ENDP2_TXADDR);
 80011ee:	2002      	movs	r0, #2
 80011f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011f4:	47c0      	blx	r8
  SetEPRxStatus(ENDP2, EP_RX_DIS);
 80011f6:	2002      	movs	r0, #2
 80011f8:	4621      	mov	r1, r4
 80011fa:	47b8      	blx	r7
  SetEPTxStatus(ENDP2, EP_TX_NAK);
 80011fc:	2002      	movs	r0, #2
 80011fe:	2120      	movs	r1, #32
 8001200:	47a8      	blx	r5

  /* Initialize Endpoint 3 */
  SetEPType(ENDP3, EP_BULK);
 8001202:	2003      	movs	r0, #3
 8001204:	4621      	mov	r1, r4
 8001206:	47b0      	blx	r6
  SetEPRxAddr(ENDP3, ENDP3_RXADDR);
 8001208:	2003      	movs	r0, #3
 800120a:	f44f 7188 	mov.w	r1, #272	; 0x110
 800120e:	47d0      	blx	sl
  SetEPRxCount(ENDP3, VIRTUAL_COM_PORT_DATA_SIZE);
 8001210:	2003      	movs	r0, #3
 8001212:	2140      	movs	r1, #64	; 0x40
 8001214:	47c8      	blx	r9
  SetEPRxStatus(ENDP3, EP_RX_VALID);
 8001216:	2003      	movs	r0, #3
 8001218:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800121c:	47b8      	blx	r7
  SetEPTxStatus(ENDP3, EP_TX_DIS);
 800121e:	4621      	mov	r1, r4
 8001220:	2003      	movs	r0, #3
 8001222:	47a8      	blx	r5

  /* Set this device to response on default address */
  SetDeviceAddress(0);
 8001224:	f242 035d 	movw	r3, #8285	; 0x205d
 8001228:	f6c0 0300 	movt	r3, #2048	; 0x800
 800122c:	4620      	mov	r0, r4
 800122e:	4798      	blx	r3
  
  bDeviceState = ATTACHED;
 8001230:	f240 23c0 	movw	r3, #704	; 0x2c0
 8001234:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001238:	2201      	movs	r2, #1
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08001240 <Virtual_Com_Port_init>:
void Virtual_Com_Port_init(void)
{

  /* Update the serial number string descriptor with the data from the unique
  ID*/
  Get_SerialNum();
 8001240:	f241 734d 	movw	r3, #5965	; 0x174d
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_init(void)
{
 8001244:	b510      	push	{r4, lr}

  /* Update the serial number string descriptor with the data from the unique
  ID*/
  Get_SerialNum();
 8001246:	f6c0 0300 	movt	r3, #2048	; 0x800
 800124a:	4798      	blx	r3

  pInformation->Current_Configuration = 0;
 800124c:	f241 3354 	movw	r3, #4948	; 0x1354
 8001250:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	2400      	movs	r4, #0

  /* Connect the device */
  PowerOn();
 8001258:	f241 237d 	movw	r3, #4733	; 0x127d

  /* Update the serial number string descriptor with the data from the unique
  ID*/
  Get_SerialNum();

  pInformation->Current_Configuration = 0;
 800125c:	7294      	strb	r4, [r2, #10]

  /* Connect the device */
  PowerOn();
 800125e:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001262:	4798      	blx	r3

  /* Perform basic device initialization operations */
  USB_SIL_Init();
 8001264:	f242 4329 	movw	r3, #9257	; 0x2429
 8001268:	f6c0 0300 	movt	r3, #2048	; 0x800
 800126c:	4798      	blx	r3

  /* configure the USART to the default settings */
  //USART_Config_Default();

  bDeviceState = UNCONNECTED;
 800126e:	f240 23c0 	movw	r3, #704	; 0x2c0
 8001272:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001276:	601c      	str	r4, [r3, #0]
 8001278:	bd10      	pop	{r4, pc}
 800127a:	bf00      	nop

0800127c <PowerOn>:
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
RESULT PowerOn(void)
{
 800127c:	b538      	push	{r3, r4, r5, lr}
  uint16_t wRegVal;

  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);
 800127e:	f241 6315 	movw	r3, #5653	; 0x1615
 8001282:	2001      	movs	r0, #1
 8001284:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001288:	4798      	blx	r3

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
  /*** Clear pending interrupts ***/
  _SetISTR(0);
 800128a:	f645 4544 	movw	r5, #23620	; 0x5c44
  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);

  /*** CNTR_PWDN = 0 ***/
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);
 800128e:	f645 4340 	movw	r3, #23616	; 0x5c40
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
  /*** Clear pending interrupts ***/
  _SetISTR(0);
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 8001292:	f241 3258 	movw	r2, #4952	; 0x1358
  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);

  /*** CNTR_PWDN = 0 ***/
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);
 8001296:	f2c4 0300 	movt	r3, #16384	; 0x4000

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
 800129a:	2100      	movs	r1, #0
  /*** Clear pending interrupts ***/
  _SetISTR(0);
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 800129c:	f44f 54e0 	mov.w	r4, #7168	; 0x1c00
  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);

  /*** CNTR_PWDN = 0 ***/
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);
 80012a0:	2001      	movs	r0, #1

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
  /*** Clear pending interrupts ***/
  _SetISTR(0);
 80012a2:	f2c4 0500 	movt	r5, #16384	; 0x4000
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 80012a6:	f2c2 0200 	movt	r2, #8192	; 0x2000
  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);

  /*** CNTR_PWDN = 0 ***/
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);
 80012aa:	6018      	str	r0, [r3, #0]

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
 80012ac:	6019      	str	r1, [r3, #0]
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
  _SetCNTR(wInterrupt_Mask);
  
  return USB_SUCCESS;
}
 80012ae:	4608      	mov	r0, r1

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
  /*** Clear pending interrupts ***/
  _SetISTR(0);
 80012b0:	6029      	str	r1, [r5, #0]
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 80012b2:	8014      	strh	r4, [r2, #0]
  _SetCNTR(wInterrupt_Mask);
 80012b4:	601c      	str	r4, [r3, #0]
  
  return USB_SUCCESS;
}
 80012b6:	bd38      	pop	{r3, r4, r5, pc}

080012b8 <Suspend>:
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
void Suspend(void)
{
 80012b8:	b570      	push	{r4, r5, r6, lr}
	uint32_t i =0;
	uint16_t wCNTR;
	uint32_t tmpreg = 0;
  __IO uint32_t savePWR_CR=0;
 80012ba:	2300      	movs	r3, #0
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
void Suspend(void)
{
 80012bc:	b082      	sub	sp, #8
  __IO uint32_t savePWR_CR=0;
	/* suspend preparation */
	/* ... */
	
	/*Store CNTR value */
	wCNTR = _GetCNTR();  
 80012be:	f645 4140 	movw	r1, #23616	; 0x5c40
 80012c2:	f2c4 0100 	movt	r1, #16384	; 0x4000
void Suspend(void)
{
	uint32_t i =0;
	uint16_t wCNTR;
	uint32_t tmpreg = 0;
  __IO uint32_t savePWR_CR=0;
 80012c6:	9301      	str	r3, [sp, #4]
	/* suspend preparation */
	/* ... */
	
	/*Store CNTR value */
	wCNTR = _GetCNTR();  
 80012c8:	f44f 42b8 	mov.w	r2, #23552	; 0x5c00
 80012cc:	680d      	ldr	r5, [r1, #0]
 80012ce:	493a      	ldr	r1, [pc, #232]	; (80013b8 <Suspend+0x100>)
 80012d0:	f2c4 0200 	movt	r2, #16384	; 0x4000

    /* This a sequence to apply a force RESET to handle a robustness case */
    
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 80012d4:	f852 0b04 	ldr.w	r0, [r2], #4
 80012d8:	b280      	uxth	r0, r0
 80012da:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 80012de:	3301      	adds	r3, #1
 80012e0:	2b08      	cmp	r3, #8
 80012e2:	d1f7      	bne.n	80012d4 <Suspend+0x1c>
	
	/* unmask RESET flag */
	wCNTR|=CNTR_RESETM;
	_SetCNTR(wCNTR);
 80012e4:	b2aa      	uxth	r2, r5
	/*apply FRES */
	wCNTR|=CNTR_FRES;
	_SetCNTR(wCNTR);
	
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
 80012e6:	f64f 74fe 	movw	r4, #65534	; 0xfffe
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
	
	/* unmask RESET flag */
	wCNTR|=CNTR_RESETM;
	_SetCNTR(wCNTR);
 80012ea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80012ee:	f645 4340 	movw	r3, #23616	; 0x5c40
	/*apply FRES */
	wCNTR|=CNTR_FRES;
	_SetCNTR(wCNTR);
	
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
 80012f2:	402c      	ands	r4, r5
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
	
	/* unmask RESET flag */
	wCNTR|=CNTR_RESETM;
	_SetCNTR(wCNTR);
 80012f4:	f2c4 0300 	movt	r3, #16384	; 0x4000
	
	/*apply FRES */
	wCNTR|=CNTR_FRES;
	_SetCNTR(wCNTR);
 80012f8:	f042 0601 	orr.w	r6, r2, #1
	
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
 80012fc:	f444 6580 	orr.w	r5, r4, #1024	; 0x400
	_SetCNTR(wCNTR);
	
	/*poll for RESET flag in ISTR*/
	while((_GetISTR()&ISTR_RESET) == 0);
 8001300:	f645 4044 	movw	r0, #23620	; 0x5c44
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
	
	/* unmask RESET flag */
	wCNTR|=CNTR_RESETM;
	_SetCNTR(wCNTR);
 8001304:	601a      	str	r2, [r3, #0]
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
	_SetCNTR(wCNTR);
	
	/*poll for RESET flag in ISTR*/
	while((_GetISTR()&ISTR_RESET) == 0);
 8001306:	f2c4 0000 	movt	r0, #16384	; 0x4000
	wCNTR|=CNTR_RESETM;
	_SetCNTR(wCNTR);
	
	/*apply FRES */
	wCNTR|=CNTR_FRES;
	_SetCNTR(wCNTR);
 800130a:	601e      	str	r6, [r3, #0]
	
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
	_SetCNTR(wCNTR);
 800130c:	601d      	str	r5, [r3, #0]
	
	/*poll for RESET flag in ISTR*/
	while((_GetISTR()&ISTR_RESET) == 0);
 800130e:	6802      	ldr	r2, [r0, #0]
 8001310:	f645 4344 	movw	r3, #23620	; 0x5c44
 8001314:	0552      	lsls	r2, r2, #21
 8001316:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800131a:	d5f8      	bpl.n	800130e <Suspend+0x56>
	
	/* clear RESET flag in ISTR */
	_SetISTR((uint16_t)CLR_RESET);
 800131c:	f44f 42b8 	mov.w	r2, #23552	; 0x5c00
 8001320:	f64f 30ff 	movw	r0, #64511	; 0xfbff
 8001324:	6018      	str	r0, [r3, #0]
 8001326:	f2c4 0200 	movt	r2, #16384	; 0x4000
	
	/*restore Enpoints*/
	for (i=0;i<8;i++)
 800132a:	2300      	movs	r3, #0
	_SetENDPOINT(i, EP[i]);
 800132c:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
	
	/* clear RESET flag in ISTR */
	_SetISTR((uint16_t)CLR_RESET);
	
	/*restore Enpoints*/
	for (i=0;i<8;i++)
 8001330:	3301      	adds	r3, #1
	_SetENDPOINT(i, EP[i]);
 8001332:	b280      	uxth	r0, r0
	
	/* clear RESET flag in ISTR */
	_SetISTR((uint16_t)CLR_RESET);
	
	/*restore Enpoints*/
	for (i=0;i<8;i++)
 8001334:	2b08      	cmp	r3, #8
	_SetENDPOINT(i, EP[i]);
 8001336:	f842 0b04 	str.w	r0, [r2], #4
	
	/* clear RESET flag in ISTR */
	_SetISTR((uint16_t)CLR_RESET);
	
	/*restore Enpoints*/
	for (i=0;i<8;i++)
 800133a:	d1f7      	bne.n	800132c <Suspend+0x74>
	_SetENDPOINT(i, EP[i]);
	
	/* Now it is safe to enter macrocell in suspend mode */
	wCNTR |= CNTR_FSUSP;
	_SetCNTR(wCNTR);
 800133c:	f645 4340 	movw	r3, #23616	; 0x5c40
 8001340:	f2c4 0300 	movt	r3, #16384	; 0x4000
	/*restore Enpoints*/
	for (i=0;i<8;i++)
	_SetENDPOINT(i, EP[i]);
	
	/* Now it is safe to enter macrocell in suspend mode */
	wCNTR |= CNTR_FSUSP;
 8001344:	f444 6481 	orr.w	r4, r4, #1032	; 0x408
	_SetCNTR(wCNTR);
 8001348:	601c      	str	r4, [r3, #0]
	
	/* force low-power mode in the macrocell */
	wCNTR = _GetCNTR();
 800134a:	6819      	ldr	r1, [r3, #0]
	wCNTR |= CNTR_LPMODE;
	_SetCNTR(wCNTR);
	
	/*prepare entry in low power mode (STOP mode)*/
	/* Select the regulator state in STOP mode*/
	savePWR_CR = REG_PWR_CR;
 800134c:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
	_SetCNTR(wCNTR);
	
	/* force low-power mode in the macrocell */
	wCNTR = _GetCNTR();
	wCNTR |= CNTR_LPMODE;
	_SetCNTR(wCNTR);
 8001350:	b289      	uxth	r1, r1
 8001352:	f041 0104 	orr.w	r1, r1, #4
 8001356:	6019      	str	r1, [r3, #0]
	
	/*prepare entry in low power mode (STOP mode)*/
	/* Select the regulator state in STOP mode*/
	savePWR_CR = REG_PWR_CR;
 8001358:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800135c:	6811      	ldr	r1, [r2, #0]
	REG_PWR_CR = tmpreg;
	/* Set SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)
        SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
#else
		REG_SCB_SCR |= SCB_SCR_SLEEPDEEP;       
 800135e:	f64e 5410 	movw	r4, #60688	; 0xed10
	wCNTR |= CNTR_LPMODE;
	_SetCNTR(wCNTR);
	
	/*prepare entry in low power mode (STOP mode)*/
	/* Select the regulator state in STOP mode*/
	savePWR_CR = REG_PWR_CR;
 8001362:	9101      	str	r1, [sp, #4]
	
	tmpreg = REG_PWR_CR;
 8001364:	6811      	ldr	r1, [r2, #0]
	REG_PWR_CR = tmpreg;
	/* Set SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)
        SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
#else
		REG_SCB_SCR |= SCB_SCR_SLEEPDEEP;       
 8001366:	f2ce 0400 	movt	r4, #57344	; 0xe000
	/* Select the regulator state in STOP mode*/
	savePWR_CR = REG_PWR_CR;
	
	tmpreg = REG_PWR_CR;
	/* Clear PDDS and LPDS bits */
	tmpreg &= ((uint32_t)0xFFFFFFFC);
 800136a:	f021 0103 	bic.w	r1, r1, #3
	/* Set LPDS bit according to PWR_Regulator value */
	tmpreg |= PWR_Regulator_LowPower;
 800136e:	f041 0101 	orr.w	r1, r1, #1
	/* Store the new value */
	REG_PWR_CR = tmpreg;
 8001372:	6011      	str	r1, [r2, #0]
	/* Set SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)
        SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
#else
		REG_SCB_SCR |= SCB_SCR_SLEEPDEEP;       
 8001374:	6820      	ldr	r0, [r4, #0]
#endif
	
	/* enter system in STOP mode, only when wakeup flag in not set */
	if((_GetISTR()&ISTR_WKUP)==0)
 8001376:	f645 4144 	movw	r1, #23620	; 0x5c44
	REG_PWR_CR = tmpreg;
	/* Set SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)
        SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
#else
		REG_SCB_SCR |= SCB_SCR_SLEEPDEEP;       
 800137a:	f040 0004 	orr.w	r0, r0, #4
 800137e:	6020      	str	r0, [r4, #0]
#endif
	
	/* enter system in STOP mode, only when wakeup flag in not set */
	if((_GetISTR()&ISTR_WKUP)==0)
 8001380:	f2c4 0100 	movt	r1, #16384	; 0x4000
 8001384:	6808      	ldr	r0, [r1, #0]
 8001386:	04c0      	lsls	r0, r0, #19
 8001388:	d50f      	bpl.n	80013aa <Suspend+0xf2>
#endif
	}
	else
	{
		/* Clear Wakeup flag */
		_SetISTR(CLR_WKUP);
 800138a:	f64e 70ff 	movw	r0, #61439	; 0xefff
 800138e:	6008      	str	r0, [r1, #0]
		/* clear FSUSP to abort entry in suspend mode  */
        wCNTR = _GetCNTR();
 8001390:	6818      	ldr	r0, [r3, #0]
        wCNTR&=~CNTR_FSUSP;
 8001392:	f64f 71f7 	movw	r1, #65527	; 0xfff7
 8001396:	4001      	ands	r1, r0
        _SetCNTR(wCNTR);
 8001398:	6019      	str	r1, [r3, #0]
		
		/*restore sleep mode configuration */ 
		/* restore Power regulator config in sleep mode*/
		REG_PWR_CR = savePWR_CR;
 800139a:	9b01      	ldr	r3, [sp, #4]
 800139c:	6013      	str	r3, [r2, #0]
		
		/* Reset SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)		
                SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
#else
                REG_SCB_SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP);
 800139e:	6823      	ldr	r3, [r4, #0]
 80013a0:	f023 0304 	bic.w	r3, r3, #4
 80013a4:	6023      	str	r3, [r4, #0]
#endif
    }
}
 80013a6:	b002      	add	sp, #8
 80013a8:	bd70      	pop	{r4, r5, r6, pc}
#endif
	
	/* enter system in STOP mode, only when wakeup flag in not set */
	if((_GetISTR()&ISTR_WKUP)==0)
	{
		__WFI();
 80013aa:	4b04      	ldr	r3, [pc, #16]	; (80013bc <Suspend+0x104>)
 80013ac:	4798      	blx	r3
		/* Reset SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)
                SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk); 
#else
                REG_SCB_SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP); 
 80013ae:	6823      	ldr	r3, [r4, #0]
 80013b0:	f023 0304 	bic.w	r3, r3, #4
 80013b4:	6023      	str	r3, [r4, #0]
 80013b6:	e7f6      	b.n	80013a6 <Suspend+0xee>
 80013b8:	20000b04 	.word	0x20000b04
 80013bc:	08001791 	.word	0x08001791

080013c0 <Resume_Init>:
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
void Resume_Init(void)
{
 80013c0:	b510      	push	{r4, lr}
  /* ------------------ ONLY WITH BUS-POWERED DEVICES ---------------------- */
  /* restart the clocks */
  /* ...  */

  /* CNTR_LPMODE = 0 */
  wCNTR = _GetCNTR();
 80013c2:	f645 4440 	movw	r4, #23616	; 0x5c40
 80013c6:	f2c4 0400 	movt	r4, #16384	; 0x4000
 80013ca:	6823      	ldr	r3, [r4, #0]
  wCNTR &= (~CNTR_LPMODE);
 80013cc:	f64f 72fb 	movw	r2, #65531	; 0xfffb
 80013d0:	401a      	ands	r2, r3
  _SetCNTR(wCNTR);    
  
  /* restore full power */
  /* ... on connected devices */
  Leave_LowPowerMode();
 80013d2:	f241 5345 	movw	r3, #5445	; 0x1545
 80013d6:	f6c0 0300 	movt	r3, #2048	; 0x800
  /* ...  */

  /* CNTR_LPMODE = 0 */
  wCNTR = _GetCNTR();
  wCNTR &= (~CNTR_LPMODE);
  _SetCNTR(wCNTR);    
 80013da:	6022      	str	r2, [r4, #0]
  
  /* restore full power */
  /* ... on connected devices */
  Leave_LowPowerMode();
 80013dc:	4798      	blx	r3

  /* reset FSUSP bit */
  _SetCNTR(IMR_MSK);
 80013de:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80013e2:	6023      	str	r3, [r4, #0]
 80013e4:	bd10      	pop	{r4, pc}
 80013e6:	bf00      	nop

080013e8 <Resume>:
*                  decrementing of the ESOF counter in different states.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Resume(RESUME_STATE eResumeSetVal)
{
 80013e8:	b510      	push	{r4, lr}
  uint16_t wCNTR;

  if (eResumeSetVal != RESUME_ESOF)
    ResumeS.eState = eResumeSetVal;
 80013ea:	4c2b      	ldr	r4, [pc, #172]	; (8001498 <Resume+0xb0>)
*******************************************************************************/
void Resume(RESUME_STATE eResumeSetVal)
{
  uint16_t wCNTR;

  if (eResumeSetVal != RESUME_ESOF)
 80013ec:	2807      	cmp	r0, #7
    ResumeS.eState = eResumeSetVal;
 80013ee:	bf18      	it	ne
 80013f0:	7020      	strbne	r0, [r4, #0]
  switch (ResumeS.eState)
 80013f2:	7823      	ldrb	r3, [r4, #0]
 80013f4:	2b05      	cmp	r3, #5
 80013f6:	d819      	bhi.n	800142c <Resume+0x44>
 80013f8:	e8df f003 	tbb	[pc, r3]
 80013fc:	2f2a221b 	.word	0x2f2a221b
 8001400:	033a      	.short	0x033a
      _SetCNTR(wCNTR);
      ResumeS.eState = RESUME_ON;
      ResumeS.bESOFcnt = 10;
      break;
    case RESUME_ON:    
      ResumeS.bESOFcnt--;
 8001402:	7863      	ldrb	r3, [r4, #1]
 8001404:	3b01      	subs	r3, #1
 8001406:	b2db      	uxtb	r3, r3
 8001408:	7063      	strb	r3, [r4, #1]
      if (ResumeS.bESOFcnt == 0)
 800140a:	7863      	ldrb	r3, [r4, #1]
 800140c:	b983      	cbnz	r3, 8001430 <Resume+0x48>
      {
        wCNTR = _GetCNTR();
 800140e:	f645 4240 	movw	r2, #23616	; 0x5c40
 8001412:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8001416:	6810      	ldr	r0, [r2, #0]
        wCNTR &= (~CNTR_RESUME);
 8001418:	f64f 71ef 	movw	r1, #65519	; 0xffef
 800141c:	4001      	ands	r1, r0
        _SetCNTR(wCNTR);
 800141e:	6011      	str	r1, [r2, #0]
        ResumeS.eState = RESUME_OFF;
 8001420:	4a1d      	ldr	r2, [pc, #116]	; (8001498 <Resume+0xb0>)
 8001422:	2106      	movs	r1, #6
 8001424:	7011      	strb	r1, [r2, #0]
        remotewakeupon = 0;
 8001426:	4a1d      	ldr	r2, [pc, #116]	; (800149c <Resume+0xb4>)
 8001428:	6013      	str	r3, [r2, #0]
 800142a:	bd10      	pop	{r4, pc}
      }
      break;
    case RESUME_OFF:
    case RESUME_ESOF:
    default:
      ResumeS.eState = RESUME_OFF;
 800142c:	2306      	movs	r3, #6
 800142e:	7023      	strb	r3, [r4, #0]
 8001430:	bd10      	pop	{r4, pc}
  if (eResumeSetVal != RESUME_ESOF)
    ResumeS.eState = eResumeSetVal;
  switch (ResumeS.eState)
  {
    case RESUME_EXTERNAL:
      if (remotewakeupon ==0)
 8001432:	4b1a      	ldr	r3, [pc, #104]	; (800149c <Resume+0xb4>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d028      	beq.n	800148c <Resume+0xa4>
        Resume_Init();
        ResumeS.eState = RESUME_OFF;
      }
      else /* RESUME detected during the RemoteWAkeup signalling => keep RemoteWakeup handling*/
      {
        ResumeS.eState = RESUME_ON;
 800143a:	2305      	movs	r3, #5
 800143c:	7023      	strb	r3, [r4, #0]
 800143e:	bd10      	pop	{r4, pc}
      }
      break;
    case RESUME_INTERNAL:
      Resume_Init();
 8001440:	4b17      	ldr	r3, [pc, #92]	; (80014a0 <Resume+0xb8>)
 8001442:	4798      	blx	r3
      ResumeS.eState = RESUME_START;
 8001444:	2304      	movs	r3, #4
 8001446:	7023      	strb	r3, [r4, #0]
      remotewakeupon = 1;
 8001448:	4b14      	ldr	r3, [pc, #80]	; (800149c <Resume+0xb4>)
 800144a:	2201      	movs	r2, #1
 800144c:	601a      	str	r2, [r3, #0]
      break;
 800144e:	bd10      	pop	{r4, pc}
    case RESUME_LATER:
      ResumeS.bESOFcnt = 2;
 8001450:	2302      	movs	r3, #2
 8001452:	7063      	strb	r3, [r4, #1]
      ResumeS.eState = RESUME_WAIT;
 8001454:	2303      	movs	r3, #3
 8001456:	7023      	strb	r3, [r4, #0]
      break;
 8001458:	bd10      	pop	{r4, pc}
    case RESUME_WAIT:
      ResumeS.bESOFcnt--;
 800145a:	7863      	ldrb	r3, [r4, #1]
 800145c:	3b01      	subs	r3, #1
 800145e:	b2db      	uxtb	r3, r3
 8001460:	7063      	strb	r3, [r4, #1]
      if (ResumeS.bESOFcnt == 0)
 8001462:	7863      	ldrb	r3, [r4, #1]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d1e3      	bne.n	8001430 <Resume+0x48>
        ResumeS.eState = RESUME_START;
 8001468:	4b0b      	ldr	r3, [pc, #44]	; (8001498 <Resume+0xb0>)
 800146a:	2204      	movs	r2, #4
 800146c:	701a      	strb	r2, [r3, #0]
 800146e:	bd10      	pop	{r4, pc}
      break;
    case RESUME_START:
      wCNTR = _GetCNTR();
 8001470:	f645 4340 	movw	r3, #23616	; 0x5c40
 8001474:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001478:	681a      	ldr	r2, [r3, #0]
      wCNTR |= CNTR_RESUME;
      _SetCNTR(wCNTR);
 800147a:	b292      	uxth	r2, r2
 800147c:	f042 0210 	orr.w	r2, r2, #16
 8001480:	601a      	str	r2, [r3, #0]
      ResumeS.eState = RESUME_ON;
 8001482:	2305      	movs	r3, #5
 8001484:	7023      	strb	r3, [r4, #0]
      ResumeS.bESOFcnt = 10;
 8001486:	230a      	movs	r3, #10
 8001488:	7063      	strb	r3, [r4, #1]
      break;
 800148a:	bd10      	pop	{r4, pc}
  switch (ResumeS.eState)
  {
    case RESUME_EXTERNAL:
      if (remotewakeupon ==0)
      {
        Resume_Init();
 800148c:	4b04      	ldr	r3, [pc, #16]	; (80014a0 <Resume+0xb8>)
 800148e:	4798      	blx	r3
        ResumeS.eState = RESUME_OFF;
 8001490:	2306      	movs	r3, #6
 8001492:	7023      	strb	r3, [r4, #0]
 8001494:	bd10      	pop	{r4, pc}
 8001496:	bf00      	nop
 8001498:	20000b00 	.word	0x20000b00
 800149c:	200002c8 	.word	0x200002c8
 80014a0:	080013c1 	.word	0x080013c1

080014a4 <USBWakeUp_IRQHandler>:


void USBWakeUp_IRQHandler(void)
{
	//EXTI_ClearITPendingBit(EXTI_Line18);
	REG_EXTI_PR = (1 << 18 );
 80014a4:	f240 4314 	movw	r3, #1044	; 0x414
 80014a8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80014ac:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80014b0:	601a      	str	r2, [r3, #0]
 80014b2:	4770      	bx	lr

080014b4 <IntToUnicode>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
 80014b4:	b430      	push	{r4, r5}
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 80014b6:	b1ca      	cbz	r2, 80014ec <IntToUnicode+0x38>
* Description    : Convert Hex 32Bits value into char.
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
 80014b8:	1e55      	subs	r5, r2, #1
 80014ba:	b2ed      	uxtb	r5, r5
 80014bc:	3501      	adds	r5, #1
 80014be:	2300      	movs	r3, #0
 80014c0:	006d      	lsls	r5, r5, #1
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 80014c2:	461c      	mov	r4, r3
 80014c4:	e007      	b.n	80014d6 <IntToUnicode+0x22>
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
 80014c6:	3230      	adds	r2, #48	; 0x30
 80014c8:	54ca      	strb	r2, [r1, r3]
* Description    : Convert Hex 32Bits value into char.
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
 80014ca:	18ca      	adds	r2, r1, r3
 80014cc:	3302      	adds	r3, #2
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
 80014ce:	0100      	lsls	r0, r0, #4
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 80014d0:	42ab      	cmp	r3, r5
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 80014d2:	7054      	strb	r4, [r2, #1]
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 80014d4:	d00a      	beq.n	80014ec <IntToUnicode+0x38>
  {
    if( ((value >> 28)) < 0xA )
 80014d6:	0f02      	lsrs	r2, r0, #28
 80014d8:	2a09      	cmp	r2, #9
 80014da:	d9f4      	bls.n	80014c6 <IntToUnicode+0x12>
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 80014dc:	3237      	adds	r2, #55	; 0x37
 80014de:	54ca      	strb	r2, [r1, r3]
* Description    : Convert Hex 32Bits value into char.
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
 80014e0:	18ca      	adds	r2, r1, r3
 80014e2:	3302      	adds	r3, #2
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
 80014e4:	0100      	lsls	r0, r0, #4
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 80014e6:	42ab      	cmp	r3, r5
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 80014e8:	7054      	strb	r4, [r2, #1]
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 80014ea:	d1f4      	bne.n	80014d6 <IntToUnicode+0x22>
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
  }
}
 80014ec:	bc30      	pop	{r4, r5}
 80014ee:	4770      	bx	lr

080014f0 <USB_LP_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void USB_LP_IRQHandler(void)
{
 80014f0:	b508      	push	{r3, lr}
	//printf("USB\n");	
	USB_Istr();
 80014f2:	f640 53ed 	movw	r3, #3565	; 0xded
 80014f6:	f6c0 0300 	movt	r3, #2048	; 0x800
 80014fa:	4798      	blx	r3
 80014fc:	bd08      	pop	{r3, pc}
 80014fe:	bf00      	nop

08001500 <Set_System>:
*******************************************************************************/
void Set_System(void)
{  	
	#if HW_USE_USB_SMARTROBOT_BD == 1
	//-- PC.13
	REG_GPIOC_CRH &= ~(0x0F << (20));	// Clear
 8001500:	f241 0304 	movw	r3, #4100	; 0x1004
 8001504:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800150e:	601a      	str	r2, [r3, #0]
	REG_GPIOC_CRH |=  (0x02 << (20));	// MODE, PC.13 Output mode, max speed 2Mhz
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8001516:	601a      	str	r2, [r3, #0]
	REG_GPIOC_CRH |=  (0x00 << (22));	// CNF,  PC.13 General purpose output push-pul
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop

08001520 <Set_USBClock>:
*******************************************************************************/
void Set_USBClock(void)
{
	//-- USB 72M * 2 / 3 = 48Mhz
	//
	CLR_BIT( REG_RCC_CFGR, 22 );	
 8001520:	f241 0204 	movw	r2, #4100	; 0x1004
 8001524:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001528:	6811      	ldr	r1, [r2, #0]
	
	//-- USB Clock Enable 
	//
	SET_BIT( REG_RCC_APB1ENR, 23 );
 800152a:	f241 031c 	movw	r3, #4124	; 0x101c
*******************************************************************************/
void Set_USBClock(void)
{
	//-- USB 72M * 2 / 3 = 48Mhz
	//
	CLR_BIT( REG_RCC_CFGR, 22 );	
 800152e:	f421 0180 	bic.w	r1, r1, #4194304	; 0x400000
 8001532:	6011      	str	r1, [r2, #0]
	
	//-- USB Clock Enable 
	//
	SET_BIT( REG_RCC_APB1ENR, 23 );
 8001534:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop

08001544 <Leave_LowPowerMode>:
void Leave_LowPowerMode(void)
{
  DEVICE_INFO *pInfo = &Device_Info;

  /* Set the device state to the correct state */
  if (pInfo->Current_Configuration != 0)
 8001544:	4b05      	ldr	r3, [pc, #20]	; (800155c <Leave_LowPowerMode+0x18>)
 8001546:	7a9b      	ldrb	r3, [r3, #10]
 8001548:	b91b      	cbnz	r3, 8001552 <Leave_LowPowerMode+0xe>
    /* Device configured */
    bDeviceState = CONFIGURED;
  }
  else
  {
    bDeviceState = ATTACHED;
 800154a:	4b05      	ldr	r3, [pc, #20]	; (8001560 <Leave_LowPowerMode+0x1c>)
 800154c:	2201      	movs	r2, #1
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	4770      	bx	lr

  /* Set the device state to the correct state */
  if (pInfo->Current_Configuration != 0)
  {
    /* Device configured */
    bDeviceState = CONFIGURED;
 8001552:	4b03      	ldr	r3, [pc, #12]	; (8001560 <Leave_LowPowerMode+0x1c>)
 8001554:	2205      	movs	r2, #5
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	20001334 	.word	0x20001334
 8001560:	200002c0 	.word	0x200002c0

08001564 <USB_Interrupts_Config>:
void USB_Interrupts_Config(void)
{

	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
 8001564:	f240 4214 	movw	r2, #1044	; 0x414
* Description    : Configures the USB interrupts
* Input          : None.
* Return         : None.
*******************************************************************************/
void USB_Interrupts_Config(void)
{
 8001568:	b538      	push	{r3, r4, r5, lr}

	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
 800156a:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800156e:	f44f 2180 	mov.w	r1, #262144	; 0x40000
	
	CLR_BIT( REG_EXTI_IMR,  18 );
 8001572:	f44f 6380 	mov.w	r3, #1024	; 0x400
void USB_Interrupts_Config(void)
{

	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
 8001576:	6011      	str	r1, [r2, #0]
	
	CLR_BIT( REG_EXTI_IMR,  18 );
 8001578:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800157c:	6819      	ldr	r1, [r3, #0]
	CLR_BIT( REG_EXTI_EMR,  18 );
 800157e:	f240 4204 	movw	r2, #1028	; 0x404

	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
	
	CLR_BIT( REG_EXTI_IMR,  18 );
 8001582:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8001586:	6019      	str	r1, [r3, #0]
	CLR_BIT( REG_EXTI_EMR,  18 );
 8001588:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800158c:	6810      	ldr	r0, [r2, #0]
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
 800158e:	f44f 6181 	mov.w	r1, #1032	; 0x408
	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
	
	CLR_BIT( REG_EXTI_IMR,  18 );
	CLR_BIT( REG_EXTI_EMR,  18 );
 8001592:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 8001596:	6010      	str	r0, [r2, #0]
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
 8001598:	f2c4 0101 	movt	r1, #16385	; 0x4001
 800159c:	6808      	ldr	r0, [r1, #0]
	CLR_BIT( REG_EXTI_FTSR, 18 );
 800159e:	f240 420c 	movw	r2, #1036	; 0x40c
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
	
	CLR_BIT( REG_EXTI_IMR,  18 );
	CLR_BIT( REG_EXTI_EMR,  18 );
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
 80015a2:	f440 2080 	orr.w	r0, r0, #262144	; 0x40000
 80015a6:	6008      	str	r0, [r1, #0]
	CLR_BIT( REG_EXTI_FTSR, 18 );
 80015a8:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80015ac:	6811      	ldr	r1, [r2, #0]
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
 80015ae:	f640 1445 	movw	r4, #2373	; 0x945
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
	
	CLR_BIT( REG_EXTI_IMR,  18 );
	CLR_BIT( REG_EXTI_EMR,  18 );
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
	CLR_BIT( REG_EXTI_FTSR, 18 );
 80015b2:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 80015b6:	6011      	str	r1, [r2, #0]
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable
 80015b8:	681d      	ldr	r5, [r3, #0]

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
 80015ba:	f241 41f1 	movw	r1, #5361	; 0x14f1
	
	CLR_BIT( REG_EXTI_IMR,  18 );
	CLR_BIT( REG_EXTI_EMR,  18 );
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
	CLR_BIT( REG_EXTI_FTSR, 18 );
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable
 80015be:	f445 2580 	orr.w	r5, r5, #262144	; 0x40000

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
 80015c2:	2090      	movs	r0, #144	; 0x90
 80015c4:	f6c0 0100 	movt	r1, #2048	; 0x800
 80015c8:	2200      	movs	r2, #0
 80015ca:	f6c0 0400 	movt	r4, #2048	; 0x800
	
	CLR_BIT( REG_EXTI_IMR,  18 );
	CLR_BIT( REG_EXTI_EMR,  18 );
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
	CLR_BIT( REG_EXTI_FTSR, 18 );
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable
 80015ce:	601d      	str	r5, [r3, #0]

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
 80015d0:	47a0      	blx	r4
	SET_BIT( REG_NVIC_ISER( 20/32 ), 20%32 );	// NVIC 20번 USB_LP 인터럽트 활성화 
 80015d2:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 80015d6:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80015da:	681a      	ldr	r2, [r3, #0]
	
	Hw_ISR_SetIRQFuncByAddr( 0x00E8, (u32)USBWakeUp_IRQHandler, 0 );
 80015dc:	f241 41a5 	movw	r1, #5285	; 0x14a5
	CLR_BIT( REG_EXTI_FTSR, 18 );
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
	SET_BIT( REG_NVIC_ISER( 20/32 ), 20%32 );	// NVIC 20번 USB_LP 인터럽트 활성화 
 80015e0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80015e4:	601a      	str	r2, [r3, #0]
	
	Hw_ISR_SetIRQFuncByAddr( 0x00E8, (u32)USBWakeUp_IRQHandler, 0 );
 80015e6:	f6c0 0100 	movt	r1, #2048	; 0x800
 80015ea:	2200      	movs	r2, #0
 80015ec:	20e8      	movs	r0, #232	; 0xe8
 80015ee:	47a0      	blx	r4
	SET_BIT( REG_NVIC_ISER( 42/32 ), 42%32 );	// NVIC 42번 USB Wake Up 인터럽트 활성화 
 80015f0:	f24e 1204 	movw	r2, #57604	; 0xe104
 80015f4:	f2ce 0200 	movt	r2, #57344	; 0xe000
 80015f8:	6811      	ldr	r1, [r2, #0]

	SET_BIT( REG_EXTI_SWIER, 18 );
 80015fa:	f44f 6382 	mov.w	r3, #1040	; 0x410
  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
	SET_BIT( REG_NVIC_ISER( 20/32 ), 20%32 );	// NVIC 20번 USB_LP 인터럽트 활성화 
	
	Hw_ISR_SetIRQFuncByAddr( 0x00E8, (u32)USBWakeUp_IRQHandler, 0 );
	SET_BIT( REG_NVIC_ISER( 42/32 ), 42%32 );	// NVIC 42번 USB Wake Up 인터럽트 활성화 
 80015fe:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8001602:	6011      	str	r1, [r2, #0]

	SET_BIT( REG_EXTI_SWIER, 18 );
 8001604:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	bd38      	pop	{r3, r4, r5, pc}
 8001612:	bf00      	nop

08001614 <USB_Cable_Config>:
void USB_Cable_Config (char NewState)
{
  if (NewState != DISABLE)
  {
  	#if HW_USE_USB_SMARTROBOT_BD == 1
	CLR_BIT( REG_GPIOC_ODR, 13 );
 8001614:	f241 030c 	movw	r3, #4108	; 0x100c
 8001618:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800161c:	681a      	ldr	r2, [r3, #0]
* Input          : None.
* Return         : Status
*******************************************************************************/
void USB_Cable_Config (char NewState)
{
  if (NewState != DISABLE)
 800161e:	b918      	cbnz	r0, 8001628 <USB_Cable_Config+0x14>
	#endif
  }
  else
  {
  	#if HW_USE_USB_SMARTROBOT_BD == 1
	SET_BIT( REG_GPIOC_ODR, 13 );    
 8001620:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001624:	601a      	str	r2, [r3, #0]
 8001626:	4770      	bx	lr
void USB_Cable_Config (char NewState)
{
  if (NewState != DISABLE)
  {
  	#if HW_USE_USB_SMARTROBOT_BD == 1
	CLR_BIT( REG_GPIOC_ODR, 13 );
 8001628:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800162c:	601a      	str	r2, [r3, #0]
 800162e:	4770      	bx	lr

08001630 <USB_To_USART_Send_Data>:
* Input          : data_buffer: data address.
                   Nb_bytes: number of bytes to send.
* Return         : none.
*******************************************************************************/
void USB_To_USART_Send_Data(uint8_t* data_buffer, uint8_t Nb_bytes)
{
 8001630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 8001634:	460d      	mov	r5, r1
* Input          : data_buffer: data address.
                   Nb_bytes: number of bytes to send.
* Return         : none.
*******************************************************************************/
void USB_To_USART_Send_Data(uint8_t* data_buffer, uint8_t Nb_bytes)
{
 8001636:	b082      	sub	sp, #8
 8001638:	4606      	mov	r6, r0
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 800163a:	b191      	cbz	r1, 8001662 <USB_To_USART_Send_Data+0x32>
 800163c:	f8df 802c 	ldr.w	r8, [pc, #44]	; 800166c <USB_To_USART_Send_Data+0x3c>
 8001640:	4f09      	ldr	r7, [pc, #36]	; (8001668 <USB_To_USART_Send_Data+0x38>)
 8001642:	2400      	movs	r4, #0
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 8001644:	5d33      	ldrb	r3, [r6, r4]
    Hw_VCom_Q_Push( 0, &UartData );	//
 8001646:	f10d 0107 	add.w	r1, sp, #7
 800164a:	2000      	movs	r0, #0
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 800164c:	f88d 3007 	strb.w	r3, [sp, #7]
    Hw_VCom_Q_Push( 0, &UartData );	//
 8001650:	47c0      	blx	r8

    if( Hw_VCom_RxdFuncPtr != NULL )
 8001652:	683b      	ldr	r3, [r7, #0]
{
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 8001654:	3401      	adds	r4, #1
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
    Hw_VCom_Q_Push( 0, &UartData );	//

    if( Hw_VCom_RxdFuncPtr != NULL )
 8001656:	b113      	cbz	r3, 800165e <USB_To_USART_Send_Data+0x2e>
    {
      Hw_VCom_RxdFuncPtr( UartData );      
 8001658:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800165c:	4798      	blx	r3
{
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 800165e:	42ac      	cmp	r4, r5
 8001660:	d3f0      	bcc.n	8001644 <USB_To_USART_Send_Data+0x14>
    if( Hw_VCom_RxdFuncPtr != NULL )
    {
      Hw_VCom_RxdFuncPtr( UartData );      
    }
  }  
}
 8001662:	b002      	add	sp, #8
 8001664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001668:	200006a8 	.word	0x200006a8
 800166c:	08000c5d 	.word	0x08000c5d

08001670 <Handle_USBAsynchXfer>:
* Description    : send data to USB.
* Input          : None.
* Return         : none.
*******************************************************************************/
void Handle_USBAsynchXfer (void)
{
 8001670:	b570      	push	{r4, r5, r6, lr}
  
  uint16_t USB_Tx_ptr;
  uint16_t USB_Tx_length;
  
  if(USB_Tx_State != 1)
 8001672:	4c20      	ldr	r4, [pc, #128]	; (80016f4 <Handle_USBAsynchXfer+0x84>)
 8001674:	7823      	ldrb	r3, [r4, #0]
 8001676:	2b01      	cmp	r3, #1
 8001678:	d026      	beq.n	80016c8 <Handle_USBAsynchXfer+0x58>
  {
    if (USART_Rx_ptr_out == USART_RX_DATA_SIZE)
 800167a:	4d1f      	ldr	r5, [pc, #124]	; (80016f8 <Handle_USBAsynchXfer+0x88>)
 800167c:	682b      	ldr	r3, [r5, #0]
 800167e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001682:	d022      	beq.n	80016ca <Handle_USBAsynchXfer+0x5a>
    {
      USART_Rx_ptr_out = 0;
    }
    
    if(USART_Rx_ptr_out == USART_Rx_ptr_in) 
 8001684:	4a1d      	ldr	r2, [pc, #116]	; (80016fc <Handle_USBAsynchXfer+0x8c>)
 8001686:	6811      	ldr	r1, [r2, #0]
 8001688:	428b      	cmp	r3, r1
 800168a:	d02f      	beq.n	80016ec <Handle_USBAsynchXfer+0x7c>
 800168c:	bf98      	it	ls
 800168e:	b298      	uxthls	r0, r3
    {
      USB_Tx_State = 0; 
      return;
    }
    
    if(USART_Rx_ptr_out > USART_Rx_ptr_in) /* rollback */
 8001690:	d921      	bls.n	80016d6 <Handle_USBAsynchXfer+0x66>
    { 
      USART_Rx_length = USART_RX_DATA_SIZE - USART_Rx_ptr_out;
 8001692:	f5c3 6100 	rsb	r1, r3, #2048	; 0x800
 8001696:	4a1a      	ldr	r2, [pc, #104]	; (8001700 <Handle_USBAsynchXfer+0x90>)
    else 
    {
      USART_Rx_length = USART_Rx_ptr_in - USART_Rx_ptr_out;
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
 8001698:	2940      	cmp	r1, #64	; 0x40
      return;
    }
    
    if(USART_Rx_ptr_out > USART_Rx_ptr_in) /* rollback */
    { 
      USART_Rx_length = USART_RX_DATA_SIZE - USART_Rx_ptr_out;
 800169a:	6011      	str	r1, [r2, #0]
 800169c:	b298      	uxth	r0, r3
    else 
    {
      USART_Rx_length = USART_Rx_ptr_in - USART_Rx_ptr_out;
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
 800169e:	d91f      	bls.n	80016e0 <Handle_USBAsynchXfer+0x70>
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
      
      USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;	
 80016a0:	3340      	adds	r3, #64	; 0x40
      USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;	
 80016a2:	3940      	subs	r1, #64	; 0x40
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
      
      USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;	
 80016a4:	602b      	str	r3, [r5, #0]
      USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;	
 80016a6:	6011      	str	r1, [r2, #0]
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
 80016a8:	2640      	movs	r6, #64	; 0x40
      
      USART_Rx_ptr_out += USART_Rx_length;
      USART_Rx_length = 0;
    }
    USB_Tx_State = 1; 
    UserToPMABufferCopy(&USART_Rx_Buffer[USB_Tx_ptr], ENDP1_TXADDR, USB_Tx_length);
 80016aa:	4b16      	ldr	r3, [pc, #88]	; (8001704 <Handle_USBAsynchXfer+0x94>)
      USB_Tx_length = USART_Rx_length;
      
      USART_Rx_ptr_out += USART_Rx_length;
      USART_Rx_length = 0;
    }
    USB_Tx_State = 1; 
 80016ac:	2501      	movs	r5, #1
    UserToPMABufferCopy(&USART_Rx_Buffer[USB_Tx_ptr], ENDP1_TXADDR, USB_Tx_length);
 80016ae:	1818      	adds	r0, r3, r0
 80016b0:	4632      	mov	r2, r6
 80016b2:	21c0      	movs	r1, #192	; 0xc0
 80016b4:	4b14      	ldr	r3, [pc, #80]	; (8001708 <Handle_USBAsynchXfer+0x98>)
      USB_Tx_length = USART_Rx_length;
      
      USART_Rx_ptr_out += USART_Rx_length;
      USART_Rx_length = 0;
    }
    USB_Tx_State = 1; 
 80016b6:	7025      	strb	r5, [r4, #0]
    UserToPMABufferCopy(&USART_Rx_Buffer[USB_Tx_ptr], ENDP1_TXADDR, USB_Tx_length);
 80016b8:	4798      	blx	r3
    SetEPTxCount(ENDP1, USB_Tx_length);
 80016ba:	4628      	mov	r0, r5
 80016bc:	4b13      	ldr	r3, [pc, #76]	; (800170c <Handle_USBAsynchXfer+0x9c>)
 80016be:	4631      	mov	r1, r6
 80016c0:	4798      	blx	r3
    SetEPTxValid(ENDP1); 
 80016c2:	4628      	mov	r0, r5
 80016c4:	4b12      	ldr	r3, [pc, #72]	; (8001710 <Handle_USBAsynchXfer+0xa0>)
 80016c6:	4798      	blx	r3
 80016c8:	bd70      	pop	{r4, r5, r6, pc}
    if (USART_Rx_ptr_out == USART_RX_DATA_SIZE)
    {
      USART_Rx_ptr_out = 0;
    }
    
    if(USART_Rx_ptr_out == USART_Rx_ptr_in) 
 80016ca:	4b0c      	ldr	r3, [pc, #48]	; (80016fc <Handle_USBAsynchXfer+0x8c>)
  
  if(USB_Tx_State != 1)
  {
    if (USART_Rx_ptr_out == USART_RX_DATA_SIZE)
    {
      USART_Rx_ptr_out = 0;
 80016cc:	2000      	movs	r0, #0
    }
    
    if(USART_Rx_ptr_out == USART_Rx_ptr_in) 
 80016ce:	6819      	ldr	r1, [r3, #0]
  
  if(USB_Tx_State != 1)
  {
    if (USART_Rx_ptr_out == USART_RX_DATA_SIZE)
    {
      USART_Rx_ptr_out = 0;
 80016d0:	6028      	str	r0, [r5, #0]
    }
    
    if(USART_Rx_ptr_out == USART_Rx_ptr_in) 
 80016d2:	4603      	mov	r3, r0
 80016d4:	b151      	cbz	r1, 80016ec <Handle_USBAsynchXfer+0x7c>
    { 
      USART_Rx_length = USART_RX_DATA_SIZE - USART_Rx_ptr_out;
    }
    else 
    {
      USART_Rx_length = USART_Rx_ptr_in - USART_Rx_ptr_out;
 80016d6:	1ac9      	subs	r1, r1, r3
 80016d8:	4a09      	ldr	r2, [pc, #36]	; (8001700 <Handle_USBAsynchXfer+0x90>)
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
 80016da:	2940      	cmp	r1, #64	; 0x40
    { 
      USART_Rx_length = USART_RX_DATA_SIZE - USART_Rx_ptr_out;
    }
    else 
    {
      USART_Rx_length = USART_Rx_ptr_in - USART_Rx_ptr_out;
 80016dc:	6011      	str	r1, [r2, #0]
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
 80016de:	d8df      	bhi.n	80016a0 <Handle_USBAsynchXfer+0x30>
    else
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = USART_Rx_length;
      
      USART_Rx_ptr_out += USART_Rx_length;
 80016e0:	18cb      	adds	r3, r1, r3
 80016e2:	602b      	str	r3, [r5, #0]
      USART_Rx_length = 0;
 80016e4:	2300      	movs	r3, #0
      USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;	
    }
    else
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = USART_Rx_length;
 80016e6:	b28e      	uxth	r6, r1
      
      USART_Rx_ptr_out += USART_Rx_length;
      USART_Rx_length = 0;
 80016e8:	6013      	str	r3, [r2, #0]
 80016ea:	e7de      	b.n	80016aa <Handle_USBAsynchXfer+0x3a>
      USART_Rx_ptr_out = 0;
    }
    
    if(USART_Rx_ptr_out == USART_Rx_ptr_in) 
    {
      USB_Tx_State = 0; 
 80016ec:	2300      	movs	r3, #0
 80016ee:	7023      	strb	r3, [r4, #0]
      return;
 80016f0:	bd70      	pop	{r4, r5, r6, pc}
 80016f2:	bf00      	nop
 80016f4:	200002cc 	.word	0x200002cc
 80016f8:	200002d4 	.word	0x200002d4
 80016fc:	200002d0 	.word	0x200002d0
 8001700:	200002d8 	.word	0x200002d8
 8001704:	20000b24 	.word	0x20000b24
 8001708:	08002155 	.word	0x08002155
 800170c:	08002395 	.word	0x08002395
 8001710:	08002259 	.word	0x08002259

08001714 <USB_Send_Data>:
	
	//-- 전송 버퍼가 꽉 차면 기다린다.
	//
	while(1)
	{
		if( (USART_Rx_length + 1) < USART_RX_DATA_SIZE ) break;
 8001714:	4b0a      	ldr	r3, [pc, #40]	; (8001740 <USB_Send_Data+0x2c>)
* Description    : send the received data from UART 0 to USB.
* Input          : None.
* Return         : none.
*******************************************************************************/
void USB_Send_Data( u8 SendData )
{
 8001716:	b410      	push	{r4}
	
	//-- 전송 버퍼가 꽉 차면 기다린다.
	//
	while(1)
	{
		if( (USART_Rx_length + 1) < USART_RX_DATA_SIZE ) break;
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	3301      	adds	r3, #1
 800171c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001720:	d20c      	bcs.n	800173c <USB_Send_Data+0x28>
	}
	
	
	USART_Rx_Buffer[USART_Rx_ptr_in] = SendData;
 8001722:	4b08      	ldr	r3, [pc, #32]	; (8001744 <USB_Send_Data+0x30>)
 8001724:	4c08      	ldr	r4, [pc, #32]	; (8001748 <USB_Send_Data+0x34>)
 8001726:	6819      	ldr	r1, [r3, #0]
	USART_Rx_ptr_in++;
 8001728:	1c4a      	adds	r2, r1, #1
  
	/* To avoid buffer overflow */
	if(USART_Rx_ptr_in == USART_RX_DATA_SIZE)
 800172a:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
	{
		if( (USART_Rx_length + 1) < USART_RX_DATA_SIZE ) break;
	}
	
	
	USART_Rx_Buffer[USART_Rx_ptr_in] = SendData;
 800172e:	5460      	strb	r0, [r4, r1]
	USART_Rx_ptr_in++;
 8001730:	601a      	str	r2, [r3, #0]
  
	/* To avoid buffer overflow */
	if(USART_Rx_ptr_in == USART_RX_DATA_SIZE)
 8001732:	d101      	bne.n	8001738 <USB_Send_Data+0x24>
	{
		USART_Rx_ptr_in = 0;
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]
	}
}
 8001738:	bc10      	pop	{r4}
 800173a:	4770      	bx	lr
 800173c:	e7fe      	b.n	800173c <USB_Send_Data+0x28>
 800173e:	bf00      	nop
 8001740:	200002d8 	.word	0x200002d8
 8001744:	200002d0 	.word	0x200002d0
 8001748:	20000b24 	.word	0x20000b24

0800174c <Get_SerialNum>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Get_SerialNum(void)
{
 800174c:	b538      	push	{r3, r4, r5, lr}
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(uint32_t*)ID1;
 800174e:	f24f 72e8 	movw	r2, #63464	; 0xf7e8
  Device_Serial1 = *(uint32_t*)ID2;
  Device_Serial2 = *(uint32_t*)ID3;  
 8001752:	f24f 73f0 	movw	r3, #63472	; 0xf7f0
*******************************************************************************/
void Get_SerialNum(void)
{
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(uint32_t*)ID1;
 8001756:	f6c1 72ff 	movt	r2, #8191	; 0x1fff
  Device_Serial1 = *(uint32_t*)ID2;
  Device_Serial2 = *(uint32_t*)ID3;  
 800175a:	f6c1 73ff 	movt	r3, #8191	; 0x1fff
*******************************************************************************/
void Get_SerialNum(void)
{
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(uint32_t*)ID1;
 800175e:	6812      	ldr	r2, [r2, #0]
  Device_Serial1 = *(uint32_t*)ID2;
  Device_Serial2 = *(uint32_t*)ID3;  

  Device_Serial0 += Device_Serial2;
 8001760:	681b      	ldr	r3, [r3, #0]
void Get_SerialNum(void)
{
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(uint32_t*)ID1;
  Device_Serial1 = *(uint32_t*)ID2;
 8001762:	f24f 71ec 	movw	r1, #63468	; 0xf7ec
 8001766:	f6c1 71ff 	movt	r1, #8191	; 0x1fff
  Device_Serial2 = *(uint32_t*)ID3;  

  Device_Serial0 += Device_Serial2;

  if (Device_Serial0 != 0)
 800176a:	18d0      	adds	r0, r2, r3
void Get_SerialNum(void)
{
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(uint32_t*)ID1;
  Device_Serial1 = *(uint32_t*)ID2;
 800176c:	680c      	ldr	r4, [r1, #0]
  Device_Serial2 = *(uint32_t*)ID3;  

  Device_Serial0 += Device_Serial2;

  if (Device_Serial0 != 0)
 800176e:	d007      	beq.n	8001780 <Get_SerialNum+0x34>
  {
    IntToUnicode (Device_Serial0, &Virtual_Com_Port_StringSerial[2] , 8);
 8001770:	4904      	ldr	r1, [pc, #16]	; (8001784 <Get_SerialNum+0x38>)
 8001772:	2208      	movs	r2, #8
 8001774:	4d04      	ldr	r5, [pc, #16]	; (8001788 <Get_SerialNum+0x3c>)
 8001776:	47a8      	blx	r5
    IntToUnicode (Device_Serial1, &Virtual_Com_Port_StringSerial[18], 4);
 8001778:	4620      	mov	r0, r4
 800177a:	4904      	ldr	r1, [pc, #16]	; (800178c <Get_SerialNum+0x40>)
 800177c:	2204      	movs	r2, #4
 800177e:	47a8      	blx	r5
 8001780:	bd38      	pop	{r3, r4, r5, pc}
 8001782:	bf00      	nop
 8001784:	20000002 	.word	0x20000002
 8001788:	080014b5 	.word	0x080014b5
 800178c:	20000012 	.word	0x20000012

08001790 <__WFI>:
}


void __WFI(void)
{
	 __asm("wfi");
 8001790:	bf30      	wfi
 8001792:	4770      	bx	lr

08001794 <Standard_GetConfiguration>:
* Output         : None.
* Return         : Return 1 , if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
uint8_t *Standard_GetConfiguration(uint16_t Length)
{
 8001794:	b508      	push	{r3, lr}
  if (Length == 0)
 8001796:	b138      	cbz	r0, 80017a8 <Standard_GetConfiguration+0x14>
  {
    pInformation->Ctrl_Info.Usb_wLength =
      sizeof(pInformation->Current_Configuration);
    return 0;
  }
  pUser_Standard_Requests->User_GetConfiguration();
 8001798:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <Standard_GetConfiguration+0x20>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4798      	blx	r3
  return (uint8_t *)&pInformation->Current_Configuration;
 80017a0:	4b05      	ldr	r3, [pc, #20]	; (80017b8 <Standard_GetConfiguration+0x24>)
 80017a2:	6818      	ldr	r0, [r3, #0]
 80017a4:	300a      	adds	r0, #10
}
 80017a6:	bd08      	pop	{r3, pc}
*******************************************************************************/
uint8_t *Standard_GetConfiguration(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength =
 80017a8:	4b03      	ldr	r3, [pc, #12]	; (80017b8 <Standard_GetConfiguration+0x24>)
 80017aa:	2201      	movs	r2, #1
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	821a      	strh	r2, [r3, #16]
      sizeof(pInformation->Current_Configuration);
    return 0;
 80017b0:	bd08      	pop	{r3, pc}
 80017b2:	bf00      	nop
 80017b4:	20001350 	.word	0x20001350
 80017b8:	20001354 	.word	0x20001354

080017bc <Standard_GetInterface>:
* Output         : None.
* Return         : Return 0, if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
uint8_t *Standard_GetInterface(uint16_t Length)
{
 80017bc:	b508      	push	{r3, lr}
  if (Length == 0)
 80017be:	b138      	cbz	r0, 80017d0 <Standard_GetInterface+0x14>
  {
    pInformation->Ctrl_Info.Usb_wLength =
      sizeof(pInformation->Current_AlternateSetting);
    return 0;
  }
  pUser_Standard_Requests->User_GetInterface();
 80017c0:	4b06      	ldr	r3, [pc, #24]	; (80017dc <Standard_GetInterface+0x20>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	4798      	blx	r3
  return (uint8_t *)&pInformation->Current_AlternateSetting;
 80017c8:	4b05      	ldr	r3, [pc, #20]	; (80017e0 <Standard_GetInterface+0x24>)
 80017ca:	6818      	ldr	r0, [r3, #0]
 80017cc:	300c      	adds	r0, #12
}
 80017ce:	bd08      	pop	{r3, pc}
*******************************************************************************/
uint8_t *Standard_GetInterface(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength =
 80017d0:	4b03      	ldr	r3, [pc, #12]	; (80017e0 <Standard_GetInterface+0x24>)
 80017d2:	2201      	movs	r2, #1
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	821a      	strh	r2, [r3, #16]
      sizeof(pInformation->Current_AlternateSetting);
    return 0;
 80017d8:	bd08      	pop	{r3, pc}
 80017da:	bf00      	nop
 80017dc:	20001350 	.word	0x20001350
 80017e0:	20001354 	.word	0x20001354

080017e4 <Standard_GetStatus>:
* Output         : None.
* Return         : Return 0, if the request is at end of data block,
*                  or is invalid when "Length" is 0.
*******************************************************************************/
uint8_t *Standard_GetStatus(uint16_t Length)
{
 80017e4:	b508      	push	{r3, lr}
  if (Length == 0)
 80017e6:	2800      	cmp	r0, #0
 80017e8:	d037      	beq.n	800185a <Standard_GetStatus+0x76>
  }

  /* Reset Status Information */
  StatusInfo.w = 0;

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 80017ea:	4b21      	ldr	r3, [pc, #132]	; (8001870 <Standard_GetStatus+0x8c>)
    pInformation->Ctrl_Info.Usb_wLength = 2;
    return 0;
  }

  /* Reset Status Information */
  StatusInfo.w = 0;
 80017ec:	4821      	ldr	r0, [pc, #132]	; (8001874 <Standard_GetStatus+0x90>)
 80017ee:	2100      	movs	r1, #0

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 80017f0:	681a      	ldr	r2, [r3, #0]
    pInformation->Ctrl_Info.Usb_wLength = 2;
    return 0;
  }

  /* Reset Status Information */
  StatusInfo.w = 0;
 80017f2:	8001      	strh	r1, [r0, #0]

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 80017f4:	7813      	ldrb	r3, [r2, #0]
 80017f6:	f013 037f 	ands.w	r3, r3, #127	; 0x7f
 80017fa:	d017      	beq.n	800182c <Standard_GetStatus+0x48>
    {
      ClrBit(StatusInfo0, 0);
    }
  }
  /*Interface Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d02b      	beq.n	8001858 <Standard_GetStatus+0x74>
  {
    return (uint8_t *)&StatusInfo;
  }
  /*Get EndPoint Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8001800:	2b02      	cmp	r3, #2
 8001802:	d128      	bne.n	8001856 <Standard_GetStatus+0x72>
  {
    uint8_t Related_Endpoint;
    uint8_t wIndex0 = pInformation->USBwIndex0;
 8001804:	7953      	ldrb	r3, [r2, #5]

    Related_Endpoint = (wIndex0 & 0x0f);
 8001806:	f003 020f 	and.w	r2, r3, #15
    if (ValBit(wIndex0, 7))
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 800180a:	0092      	lsls	r2, r2, #2
 800180c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8001810:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
  {
    uint8_t Related_Endpoint;
    uint8_t wIndex0 = pInformation->USBwIndex0;

    Related_Endpoint = (wIndex0 & 0x0f);
    if (ValBit(wIndex0, 7))
 8001814:	f013 0f80 	tst.w	r3, #128	; 0x80
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 8001818:	6813      	ldr	r3, [r2, #0]
  {
    uint8_t Related_Endpoint;
    uint8_t wIndex0 = pInformation->USBwIndex0;

    Related_Endpoint = (wIndex0 & 0x0f);
    if (ValBit(wIndex0, 7))
 800181a:	d123      	bne.n	8001864 <Standard_GetStatus+0x80>
      }
    }
    else
    {
      /* OUT endpoint */
      if (_GetRxStallStatus(Related_Endpoint))
 800181c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001820:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001824:	d111      	bne.n	800184a <Standard_GetStatus+0x66>
      {
        SetBit(StatusInfo0, 0); /* OUT Endpoint stalled */
 8001826:	2301      	movs	r3, #1
 8001828:	7003      	strb	r3, [r0, #0]
 800182a:	e00e      	b.n	800184a <Standard_GetStatus+0x66>
  StatusInfo.w = 0;

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
  {
    /*Get Device Status */
    uint8_t Feature = pInformation->Current_Feature;
 800182c:	7a52      	ldrb	r2, [r2, #9]

    /* Remote Wakeup enabled */
    if (ValBit(Feature, 5))
 800182e:	f002 0320 	and.w	r3, r2, #32
 8001832:	b2db      	uxtb	r3, r3
    {
      ClrBit(StatusInfo0, 1);
    }      

    /* Bus-powered */
    if (ValBit(Feature, 6))
 8001834:	f002 0240 	and.w	r2, r2, #64	; 0x40
    uint8_t Feature = pInformation->Current_Feature;

    /* Remote Wakeup enabled */
    if (ValBit(Feature, 5))
    {
      SetBit(StatusInfo0, 1);
 8001838:	428b      	cmp	r3, r1
    {
      ClrBit(StatusInfo0, 1);
    }      

    /* Bus-powered */
    if (ValBit(Feature, 6))
 800183a:	b2d2      	uxtb	r2, r2
    uint8_t Feature = pInformation->Current_Feature;

    /* Remote Wakeup enabled */
    if (ValBit(Feature, 5))
    {
      SetBit(StatusInfo0, 1);
 800183c:	bf18      	it	ne
 800183e:	2302      	movne	r3, #2
    {
      ClrBit(StatusInfo0, 1);
    }      

    /* Bus-powered */
    if (ValBit(Feature, 6))
 8001840:	2a00      	cmp	r2, #0
 8001842:	d0f1      	beq.n	8001828 <Standard_GetStatus+0x44>
    {
      SetBit(StatusInfo0, 0);
 8001844:	f043 0301 	orr.w	r3, r3, #1
 8001848:	7003      	strb	r3, [r0, #0]
  }
  else
  {
    return NULL;
  }
  pUser_Standard_Requests->User_GetStatus();
 800184a:	4b0b      	ldr	r3, [pc, #44]	; (8001878 <Standard_GetStatus+0x94>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	691b      	ldr	r3, [r3, #16]
 8001850:	4798      	blx	r3
  return (uint8_t *)&StatusInfo;
 8001852:	4808      	ldr	r0, [pc, #32]	; (8001874 <Standard_GetStatus+0x90>)
 8001854:	bd08      	pop	{r3, pc}
    }

  }
  else
  {
    return NULL;
 8001856:	4608      	mov	r0, r1
  }
  pUser_Standard_Requests->User_GetStatus();
  return (uint8_t *)&StatusInfo;
}
 8001858:	bd08      	pop	{r3, pc}
*******************************************************************************/
uint8_t *Standard_GetStatus(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength = 2;
 800185a:	4b05      	ldr	r3, [pc, #20]	; (8001870 <Standard_GetStatus+0x8c>)
 800185c:	2202      	movs	r2, #2
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	821a      	strh	r2, [r3, #16]
    return 0;
 8001862:	bd08      	pop	{r3, pc}

    Related_Endpoint = (wIndex0 & 0x0f);
    if (ValBit(wIndex0, 7))
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 8001864:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001868:	2b10      	cmp	r3, #16
 800186a:	d1ee      	bne.n	800184a <Standard_GetStatus+0x66>
 800186c:	e7db      	b.n	8001826 <Standard_GetStatus+0x42>
 800186e:	bf00      	nop
 8001870:	20001354 	.word	0x20001354
 8001874:	20001324 	.word	0x20001324
 8001878:	20001350 	.word	0x20001350

0800187c <DataStageIn>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void DataStageIn(void)
{
 800187c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
 8001880:	4e2b      	ldr	r6, [pc, #172]	; (8001930 <DataStageIn+0xb4>)
 8001882:	6834      	ldr	r4, [r6, #0]
  uint32_t save_wLength = pEPinfo->Usb_wLength;
 8001884:	8a23      	ldrh	r3, [r4, #16]
  uint32_t ControlState = pInformation->ControlState;

  uint8_t *DataBuffer;
  uint32_t Length;

  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
 8001886:	7a20      	ldrb	r0, [r4, #8]
 8001888:	2b00      	cmp	r3, #0
 800188a:	bf08      	it	eq
 800188c:	2804      	cmpeq	r0, #4
 800188e:	bf14      	ite	ne
 8001890:	f04f 0800 	movne.w	r8, #0
 8001894:	f04f 0801 	moveq.w	r8, #1
 8001898:	d10a      	bne.n	80018b0 <DataStageIn+0x34>
  {
    if(Data_Mul_MaxPacketSize == TRUE)
 800189a:	4b26      	ldr	r3, [pc, #152]	; (8001934 <DataStageIn+0xb8>)
 800189c:	781a      	ldrb	r2, [r3, #0]
 800189e:	2a01      	cmp	r2, #1
 80018a0:	d030      	beq.n	8001904 <DataStageIn+0x88>
    }
    else 
    {
      /* No more data to send so STALL the TX Status*/
      ControlState = WAIT_STATUS_OUT;
      vSetEPTxStatus(EP_TX_STALL);
 80018a2:	4b25      	ldr	r3, [pc, #148]	; (8001938 <DataStageIn+0xbc>)
 80018a4:	2210      	movs	r2, #16
 80018a6:	2707      	movs	r7, #7
 80018a8:	801a      	strh	r2, [r3, #0]
  vSetEPTxStatus(EP_TX_VALID);

  USB_StatusOut();/* Expect the host to abort the data IN stage */

Expect_Status_Out:
  pInformation->ControlState = ControlState;
 80018aa:	7227      	strb	r7, [r4, #8]
 80018ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    }
    
    goto Expect_Status_Out;
  }

  Length = pEPinfo->PacketSize;
 80018b0:	8aa7      	ldrh	r7, [r4, #20]
  if (Length > save_wLength)
  {
    Length = save_wLength;
  }

  DataBuffer = (*pEPinfo->CopyData)(Length);
 80018b2:	69a2      	ldr	r2, [r4, #24]
 80018b4:	429f      	cmp	r7, r3
 80018b6:	bf34      	ite	cc
 80018b8:	463d      	movcc	r5, r7
 80018ba:	461d      	movcs	r5, r3
 80018bc:	4628      	mov	r0, r5
    
    goto Expect_Status_Out;
  }

  Length = pEPinfo->PacketSize;
  ControlState = (save_wLength <= Length) ? LAST_IN_DATA : IN_DATA;
 80018be:	42bb      	cmp	r3, r7
 80018c0:	bf8c      	ite	hi
 80018c2:	2702      	movhi	r7, #2
 80018c4:	2704      	movls	r7, #4
  if (Length > save_wLength)
  {
    Length = save_wLength;
  }

  DataBuffer = (*pEPinfo->CopyData)(Length);
 80018c6:	4790      	blx	r2
  
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);
 80018c8:	4b1c      	ldr	r3, [pc, #112]	; (800193c <DataStageIn+0xc0>)
  if (Length > save_wLength)
  {
    Length = save_wLength;
  }

  DataBuffer = (*pEPinfo->CopyData)(Length);
 80018ca:	4681      	mov	r9, r0
  
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);
 80018cc:	4640      	mov	r0, r8
 80018ce:	4798      	blx	r3
 80018d0:	462a      	mov	r2, r5
 80018d2:	4601      	mov	r1, r0
 80018d4:	4b1a      	ldr	r3, [pc, #104]	; (8001940 <DataStageIn+0xc4>)
 80018d6:	4648      	mov	r0, r9
 80018d8:	4798      	blx	r3

  SetEPTxCount(ENDP0, Length);
 80018da:	4629      	mov	r1, r5
 80018dc:	4b19      	ldr	r3, [pc, #100]	; (8001944 <DataStageIn+0xc8>)
 80018de:	4640      	mov	r0, r8
 80018e0:	4798      	blx	r3

  pEPinfo->Usb_wLength -= Length;
 80018e2:	8a23      	ldrh	r3, [r4, #16]
  pEPinfo->Usb_wOffset += Length;
 80018e4:	8a62      	ldrh	r2, [r4, #18]
  
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);

  SetEPTxCount(ENDP0, Length);

  pEPinfo->Usb_wLength -= Length;
 80018e6:	1b5b      	subs	r3, r3, r5
 80018e8:	8223      	strh	r3, [r4, #16]
  pEPinfo->Usb_wOffset += Length;
  vSetEPTxStatus(EP_TX_VALID);
 80018ea:	4b13      	ldr	r3, [pc, #76]	; (8001938 <DataStageIn+0xbc>)
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);

  SetEPTxCount(ENDP0, Length);

  pEPinfo->Usb_wLength -= Length;
  pEPinfo->Usb_wOffset += Length;
 80018ec:	18ad      	adds	r5, r5, r2
  vSetEPTxStatus(EP_TX_VALID);
 80018ee:	2230      	movs	r2, #48	; 0x30
 80018f0:	801a      	strh	r2, [r3, #0]
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);

  SetEPTxCount(ENDP0, Length);

  pEPinfo->Usb_wLength -= Length;
  pEPinfo->Usb_wOffset += Length;
 80018f2:	8265      	strh	r5, [r4, #18]
  vSetEPTxStatus(EP_TX_VALID);

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 80018f4:	4b14      	ldr	r3, [pc, #80]	; (8001948 <DataStageIn+0xcc>)
 80018f6:	6834      	ldr	r4, [r6, #0]
 80018f8:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80018fc:	801a      	strh	r2, [r3, #0]

Expect_Status_Out:
  pInformation->ControlState = ControlState;
 80018fe:	7227      	strb	r7, [r4, #8]
 8001900:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
  {
    if(Data_Mul_MaxPacketSize == TRUE)
    {
      /* No more data to send and empty packet */
      Send0LengthData();
 8001904:	f645 4250 	movw	r2, #23632	; 0x5c50
 8001908:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800190c:	6811      	ldr	r1, [r2, #0]
 800190e:	f243 0202 	movw	r2, #12290	; 0x3002
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
}
 8001912:	b289      	uxth	r1, r1
  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
  {
    if(Data_Mul_MaxPacketSize == TRUE)
    {
      /* No more data to send and empty packet */
      Send0LengthData();
 8001914:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8001918:	188a      	adds	r2, r1, r2
 800191a:	0052      	lsls	r2, r2, #1
 800191c:	2100      	movs	r1, #0
 800191e:	6011      	str	r1, [r2, #0]
 8001920:	4a05      	ldr	r2, [pc, #20]	; (8001938 <DataStageIn+0xbc>)
      ControlState = LAST_IN_DATA;
      Data_Mul_MaxPacketSize = FALSE;
 8001922:	2704      	movs	r7, #4
  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
  {
    if(Data_Mul_MaxPacketSize == TRUE)
    {
      /* No more data to send and empty packet */
      Send0LengthData();
 8001924:	2030      	movs	r0, #48	; 0x30
 8001926:	8010      	strh	r0, [r2, #0]
      ControlState = LAST_IN_DATA;
      Data_Mul_MaxPacketSize = FALSE;
 8001928:	7019      	strb	r1, [r3, #0]
  vSetEPTxStatus(EP_TX_VALID);

  USB_StatusOut();/* Expect the host to abort the data IN stage */

Expect_Status_Out:
  pInformation->ControlState = ControlState;
 800192a:	7227      	strb	r7, [r4, #8]
 800192c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001930:	20001354 	.word	0x20001354
 8001934:	200002dc 	.word	0x200002dc
 8001938:	2000135c 	.word	0x2000135c
 800193c:	08002355 	.word	0x08002355
 8001940:	08002155 	.word	0x08002155
 8001944:	08002395 	.word	0x08002395
 8001948:	2000135a 	.word	0x2000135a

0800194c <Standard_SetConfiguration>:
* Output         : None.
* Return         : Return USB_SUCCESS, if the request is performed.
*                  Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetConfiguration(void)
{
 800194c:	b510      	push	{r4, lr}

  if ((pInformation->USBwValue0 <=
 800194e:	4b0b      	ldr	r3, [pc, #44]	; (800197c <Standard_SetConfiguration+0x30>)
 8001950:	4a0b      	ldr	r2, [pc, #44]	; (8001980 <Standard_SetConfiguration+0x34>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	7851      	ldrb	r1, [r2, #1]
 8001956:	78da      	ldrb	r2, [r3, #3]
 8001958:	4291      	cmp	r1, r2
 800195a:	d201      	bcs.n	8001960 <Standard_SetConfiguration+0x14>
    pUser_Standard_Requests->User_SetConfiguration();
    return USB_SUCCESS;
  }
  else
  {
    return USB_UNSUPPORT;
 800195c:	2002      	movs	r0, #2
  }
}
 800195e:	bd10      	pop	{r4, pc}
*******************************************************************************/
RESULT Standard_SetConfiguration(void)
{

  if ((pInformation->USBwValue0 <=
      Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
 8001960:	7899      	ldrb	r1, [r3, #2]
 8001962:	2900      	cmp	r1, #0
 8001964:	d1fa      	bne.n	800195c <Standard_SetConfiguration+0x10>
      && (pInformation->USBwIndex == 0)) /*call Back usb spec 2.0*/
 8001966:	889c      	ldrh	r4, [r3, #4]
 8001968:	2c00      	cmp	r4, #0
 800196a:	d1f7      	bne.n	800195c <Standard_SetConfiguration+0x10>
  {
    pInformation->Current_Configuration = pInformation->USBwValue0;
 800196c:	729a      	strb	r2, [r3, #10]
    pUser_Standard_Requests->User_SetConfiguration();
 800196e:	4b05      	ldr	r3, [pc, #20]	; (8001984 <Standard_SetConfiguration+0x38>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	4798      	blx	r3
    return USB_SUCCESS;
 8001976:	4620      	mov	r0, r4
 8001978:	bd10      	pop	{r4, pc}
 800197a:	bf00      	nop
 800197c:	20001354 	.word	0x20001354
 8001980:	200000e0 	.word	0x200000e0
 8001984:	20001350 	.word	0x20001350

08001988 <Standard_SetInterface>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetInterface(void)
{
 8001988:	b538      	push	{r3, r4, r5, lr}
  RESULT Re;
  /*Test if the specified Interface and Alternate Setting are supported by
    the application Firmware*/
  Re = (*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, pInformation->USBwValue0);
 800198a:	4a10      	ldr	r2, [pc, #64]	; (80019cc <Standard_SetInterface+0x44>)
 800198c:	4c10      	ldr	r4, [pc, #64]	; (80019d0 <Standard_SetInterface+0x48>)
 800198e:	6812      	ldr	r2, [r2, #0]
 8001990:	6823      	ldr	r3, [r4, #0]
 8001992:	6992      	ldr	r2, [r2, #24]
 8001994:	7958      	ldrb	r0, [r3, #5]
 8001996:	78d9      	ldrb	r1, [r3, #3]
 8001998:	4790      	blx	r2

  if (pInformation->Current_Configuration != 0)
 800199a:	6823      	ldr	r3, [r4, #0]
 800199c:	7a9a      	ldrb	r2, [r3, #10]
 800199e:	b90a      	cbnz	r2, 80019a4 <Standard_SetInterface+0x1c>
      return USB_SUCCESS;
    }

  }

  return USB_UNSUPPORT;
 80019a0:	2002      	movs	r0, #2
}
 80019a2:	bd38      	pop	{r3, r4, r5, pc}
    the application Firmware*/
  Re = (*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, pInformation->USBwValue0);

  if (pInformation->Current_Configuration != 0)
  {
    if ((Re != USB_SUCCESS) || (pInformation->USBwIndex1 != 0)
 80019a4:	2800      	cmp	r0, #0
 80019a6:	d1fb      	bne.n	80019a0 <Standard_SetInterface+0x18>
 80019a8:	791a      	ldrb	r2, [r3, #4]
 80019aa:	2a00      	cmp	r2, #0
 80019ac:	d1f8      	bne.n	80019a0 <Standard_SetInterface+0x18>
        || (pInformation->USBwValue1 != 0))
 80019ae:	789d      	ldrb	r5, [r3, #2]
 80019b0:	2d00      	cmp	r5, #0
 80019b2:	d1f5      	bne.n	80019a0 <Standard_SetInterface+0x18>
    {
      return  USB_UNSUPPORT;
    }
    else if (Re == USB_SUCCESS)
    {
      pUser_Standard_Requests->User_SetInterface();
 80019b4:	4b07      	ldr	r3, [pc, #28]	; (80019d4 <Standard_SetInterface+0x4c>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	68db      	ldr	r3, [r3, #12]
 80019ba:	4798      	blx	r3
      pInformation->Current_Interface = pInformation->USBwIndex0;
 80019bc:	6823      	ldr	r3, [r4, #0]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
      return USB_SUCCESS;
 80019be:	4628      	mov	r0, r5
      return  USB_UNSUPPORT;
    }
    else if (Re == USB_SUCCESS)
    {
      pUser_Standard_Requests->User_SetInterface();
      pInformation->Current_Interface = pInformation->USBwIndex0;
 80019c0:	7959      	ldrb	r1, [r3, #5]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
 80019c2:	78da      	ldrb	r2, [r3, #3]
      return  USB_UNSUPPORT;
    }
    else if (Re == USB_SUCCESS)
    {
      pUser_Standard_Requests->User_SetInterface();
      pInformation->Current_Interface = pInformation->USBwIndex0;
 80019c4:	72d9      	strb	r1, [r3, #11]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
 80019c6:	731a      	strb	r2, [r3, #12]
      return USB_SUCCESS;
 80019c8:	bd38      	pop	{r3, r4, r5, pc}
 80019ca:	bf00      	nop
 80019cc:	2000132c 	.word	0x2000132c
 80019d0:	20001354 	.word	0x20001354
 80019d4:	20001350 	.word	0x20001350

080019d8 <Standard_ClearFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_ClearFeature(void)
{
 80019d8:	b538      	push	{r3, r4, r5, lr}
  uint32_t     Type_Rec = Type_Recipient;
 80019da:	4b35      	ldr	r3, [pc, #212]	; (8001ab0 <Standard_ClearFeature+0xd8>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	7818      	ldrb	r0, [r3, #0]
  uint32_t     Status;


  if (Type_Rec == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 80019e0:	f010 007f 	ands.w	r0, r0, #127	; 0x7f
 80019e4:	d003      	beq.n	80019ee <Standard_ClearFeature+0x16>
  {/*Device Clear Feature*/
    ClrBit(pInformation->Current_Feature, 5);
    return USB_SUCCESS;
  }
  else if (Type_Rec == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 80019e6:	2802      	cmp	r0, #2
 80019e8:	d006      	beq.n	80019f8 <Standard_ClearFeature+0x20>
    }
    pUser_Standard_Requests->User_ClearFeature();
    return USB_SUCCESS;
  }

  return USB_UNSUPPORT;
 80019ea:	2002      	movs	r0, #2
}
 80019ec:	bd38      	pop	{r3, r4, r5, pc}
  uint32_t     Status;


  if (Type_Rec == (STANDARD_REQUEST | DEVICE_RECIPIENT))
  {/*Device Clear Feature*/
    ClrBit(pInformation->Current_Feature, 5);
 80019ee:	7a5a      	ldrb	r2, [r3, #9]
 80019f0:	f022 0220 	bic.w	r2, r2, #32
 80019f4:	725a      	strb	r2, [r3, #9]
    return USB_SUCCESS;
 80019f6:	bd38      	pop	{r3, r4, r5, pc}
    DEVICE* pDev;
    uint32_t Related_Endpoint;
    uint32_t wIndex0;
    uint32_t rEP;

    if ((pInformation->USBwValue != ENDPOINT_STALL)
 80019f8:	885a      	ldrh	r2, [r3, #2]
 80019fa:	2a00      	cmp	r2, #0
 80019fc:	d1f6      	bne.n	80019ec <Standard_ClearFeature+0x14>
        || (pInformation->USBwIndex1 != 0))
 80019fe:	791a      	ldrb	r2, [r3, #4]
 8001a00:	2a00      	cmp	r2, #0
 8001a02:	d1f3      	bne.n	80019ec <Standard_ClearFeature+0x14>
    {
      return USB_UNSUPPORT;
    }

    pDev = &Device_Table;
    wIndex0 = pInformation->USBwIndex0;
 8001a04:	795a      	ldrb	r2, [r3, #5]
    rEP = wIndex0 & ~0x80;
 8001a06:	f022 0080 	bic.w	r0, r2, #128	; 0x80

    if (ValBit(pInformation->USBwIndex0, 7))
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 8001a0a:	0081      	lsls	r1, r0, #2
 8001a0c:	f101 4480 	add.w	r4, r1, #1073741824	; 0x40000000
    pDev = &Device_Table;
    wIndex0 = pInformation->USBwIndex0;
    rEP = wIndex0 & ~0x80;
    Related_Endpoint = ENDP0 + rEP;

    if (ValBit(pInformation->USBwIndex0, 7))
 8001a10:	0615      	lsls	r5, r2, #24
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 8001a12:	f504 44b8 	add.w	r4, r4, #23552	; 0x5c00
    }
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
 8001a16:	bf56      	itet	pl
 8001a18:	6824      	ldrpl	r4, [r4, #0]

    if (ValBit(pInformation->USBwIndex0, 7))
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 8001a1a:	6825      	ldrmi	r5, [r4, #0]
    }
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
 8001a1c:	f404 5540 	andpl.w	r5, r4, #12288	; 0x3000
    }

    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 8001a20:	4c24      	ldr	r4, [pc, #144]	; (8001ab4 <Standard_ClearFeature+0xdc>)

    if (ValBit(pInformation->USBwIndex0, 7))
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 8001a22:	bf48      	it	mi
 8001a24:	f005 0530 	andmi.w	r5, r5, #48	; 0x30
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
    }

    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 8001a28:	7824      	ldrb	r4, [r4, #0]
 8001a2a:	42a0      	cmp	r0, r4
 8001a2c:	d2dd      	bcs.n	80019ea <Standard_ClearFeature+0x12>
 8001a2e:	2d00      	cmp	r5, #0
 8001a30:	d0db      	beq.n	80019ea <Standard_ClearFeature+0x12>
        || (pInformation->Current_Configuration == 0))
 8001a32:	7a9b      	ldrb	r3, [r3, #10]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d0d8      	beq.n	80019ea <Standard_ClearFeature+0x12>
    {
      return USB_UNSUPPORT;
    }


    if (wIndex0 & 0x80)
 8001a38:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	b173      	cbz	r3, 8001a5e <Standard_ClearFeature+0x86>
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint ))
 8001a40:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
 8001a44:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001a4e:	2b10      	cmp	r3, #16
 8001a50:	d021      	beq.n	8001a96 <Standard_ClearFeature+0xbe>
          ClearDTOG_RX(Related_Endpoint);
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
        }
      }
    }
    pUser_Standard_Requests->User_ClearFeature();
 8001a52:	4b19      	ldr	r3, [pc, #100]	; (8001ab8 <Standard_ClearFeature+0xe0>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	695b      	ldr	r3, [r3, #20]
 8001a58:	4798      	blx	r3
    return USB_SUCCESS;
 8001a5a:	2000      	movs	r0, #0
 8001a5c:	bd38      	pop	{r3, r4, r5, pc}
      }
    }
    else
    {
      /* OUT endpoint */
      if (_GetRxStallStatus(Related_Endpoint))
 8001a5e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8001a62:	f501 44b8 	add.w	r4, r1, #23552	; 0x5c00
 8001a66:	6823      	ldr	r3, [r4, #0]
 8001a68:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001a6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a70:	d1ef      	bne.n	8001a52 <Standard_ClearFeature+0x7a>
      {
        if (Related_Endpoint == ENDP0)
 8001a72:	b9c8      	cbnz	r0, 8001aa8 <Standard_ClearFeature+0xd0>
        {
          /* After clear the STALL, enable the default endpoint receiver */
          SetEPRxCount(Related_Endpoint, Device_Property.MaxPacketSize);
 8001a74:	4b11      	ldr	r3, [pc, #68]	; (8001abc <Standard_ClearFeature+0xe4>)
 8001a76:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
 8001a7a:	4b11      	ldr	r3, [pc, #68]	; (8001ac0 <Standard_ClearFeature+0xe8>)
 8001a7c:	4798      	blx	r3
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
        }
        else
        {
          ClearDTOG_RX(Related_Endpoint);
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
 8001a7e:	6822      	ldr	r2, [r4, #0]
 8001a80:	f64b 738f 	movw	r3, #49039	; 0xbf8f
 8001a84:	4013      	ands	r3, r2
 8001a86:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001a8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a92:	6023      	str	r3, [r4, #0]
 8001a94:	e7dd      	b.n	8001a52 <Standard_ClearFeature+0x7a>
    if (wIndex0 & 0x80)
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint ))
      {
        ClearDTOG_TX(Related_Endpoint);
 8001a96:	b2c4      	uxtb	r4, r0
 8001a98:	4620      	mov	r0, r4
 8001a9a:	4b0a      	ldr	r3, [pc, #40]	; (8001ac4 <Standard_ClearFeature+0xec>)
 8001a9c:	4798      	blx	r3
        SetEPTxStatus(Related_Endpoint, EP_TX_VALID);
 8001a9e:	4620      	mov	r0, r4
 8001aa0:	2130      	movs	r1, #48	; 0x30
 8001aa2:	4b09      	ldr	r3, [pc, #36]	; (8001ac8 <Standard_ClearFeature+0xf0>)
 8001aa4:	4798      	blx	r3
 8001aa6:	e7d4      	b.n	8001a52 <Standard_ClearFeature+0x7a>
          SetEPRxCount(Related_Endpoint, Device_Property.MaxPacketSize);
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
        }
        else
        {
          ClearDTOG_RX(Related_Endpoint);
 8001aa8:	4b08      	ldr	r3, [pc, #32]	; (8001acc <Standard_ClearFeature+0xf4>)
 8001aaa:	4798      	blx	r3
 8001aac:	e7e7      	b.n	8001a7e <Standard_ClearFeature+0xa6>
 8001aae:	bf00      	nop
 8001ab0:	20001354 	.word	0x20001354
 8001ab4:	200000e0 	.word	0x200000e0
 8001ab8:	20001350 	.word	0x20001350
 8001abc:	2000005c 	.word	0x2000005c
 8001ac0:	080023b5 	.word	0x080023b5
 8001ac4:	080022e5 	.word	0x080022e5
 8001ac8:	080021d9 	.word	0x080021d9
 8001acc:	080022c1 	.word	0x080022c1

08001ad0 <Standard_SetEndPointFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetEndPointFeature(void)
{
 8001ad0:	b538      	push	{r3, r4, r5, lr}
  uint32_t    wIndex0;
  uint32_t    Related_Endpoint;
  uint32_t    rEP;
  uint32_t    Status;

  wIndex0 = pInformation->USBwIndex0;
 8001ad2:	4b22      	ldr	r3, [pc, #136]	; (8001b5c <Standard_SetEndPointFeature+0x8c>)
 8001ad4:	6819      	ldr	r1, [r3, #0]
 8001ad6:	794b      	ldrb	r3, [r1, #5]
  rEP = wIndex0 & ~0x80;
 8001ad8:	f023 0280 	bic.w	r2, r3, #128	; 0x80

  if (ValBit(pInformation->USBwIndex0, 7))
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 8001adc:	0090      	lsls	r0, r2, #2
 8001ade:	f100 4480 	add.w	r4, r0, #1073741824	; 0x40000000

  wIndex0 = pInformation->USBwIndex0;
  rEP = wIndex0 & ~0x80;
  Related_Endpoint = ENDP0 + rEP;

  if (ValBit(pInformation->USBwIndex0, 7))
 8001ae2:	061d      	lsls	r5, r3, #24
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 8001ae4:	f504 44b8 	add.w	r4, r4, #23552	; 0x5c00
  }
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
 8001ae8:	bf56      	itet	pl
 8001aea:	6824      	ldrpl	r4, [r4, #0]

  if (ValBit(pInformation->USBwIndex0, 7))
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 8001aec:	6825      	ldrmi	r5, [r4, #0]
  }
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
 8001aee:	f404 5540 	andpl.w	r5, r4, #12288	; 0x3000
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
 8001af2:	4c1b      	ldr	r4, [pc, #108]	; (8001b60 <Standard_SetEndPointFeature+0x90>)

  if (ValBit(pInformation->USBwIndex0, 7))
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 8001af4:	bf48      	it	mi
 8001af6:	f005 0530 	andmi.w	r5, r5, #48	; 0x30
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
 8001afa:	7824      	ldrb	r4, [r4, #0]
 8001afc:	42a2      	cmp	r2, r4
 8001afe:	d301      	bcc.n	8001b04 <Standard_SetEndPointFeature+0x34>
      || pInformation->USBwValue != 0 || Status == 0
      || pInformation->Current_Configuration == 0)
  {
    return USB_UNSUPPORT;
 8001b00:	2002      	movs	r0, #2
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
    }
  }
  pUser_Standard_Requests->User_SetEndPointFeature();
  return USB_SUCCESS;
}
 8001b02:	bd38      	pop	{r3, r4, r5, pc}
  {
    Status = _GetEPRxStatus(Related_Endpoint);
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
      || pInformation->USBwValue != 0 || Status == 0
 8001b04:	884a      	ldrh	r2, [r1, #2]
 8001b06:	2a00      	cmp	r2, #0
 8001b08:	d1fa      	bne.n	8001b00 <Standard_SetEndPointFeature+0x30>
 8001b0a:	2d00      	cmp	r5, #0
 8001b0c:	d0f8      	beq.n	8001b00 <Standard_SetEndPointFeature+0x30>
      || pInformation->Current_Configuration == 0)
 8001b0e:	7a8a      	ldrb	r2, [r1, #10]
 8001b10:	2a00      	cmp	r2, #0
 8001b12:	d0f5      	beq.n	8001b00 <Standard_SetEndPointFeature+0x30>
  {
    return USB_UNSUPPORT;
  }
  else
  {
    if (wIndex0 & 0x80)
 8001b14:	f003 0380 	and.w	r3, r3, #128	; 0x80
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 8001b18:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 8001b1c:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
  {
    return USB_UNSUPPORT;
  }
  else
  {
    if (wIndex0 & 0x80)
 8001b20:	b2db      	uxtb	r3, r3
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 8001b22:	6811      	ldr	r1, [r2, #0]
  {
    return USB_UNSUPPORT;
  }
  else
  {
    if (wIndex0 & 0x80)
 8001b24:	b17b      	cbz	r3, 8001b46 <Standard_SetEndPointFeature+0x76>
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 8001b26:	f648 73bf 	movw	r3, #36799	; 0x8fbf
 8001b2a:	400b      	ands	r3, r1
 8001b2c:	f083 0310 	eor.w	r3, r3, #16
 8001b30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b38:	6013      	str	r3, [r2, #0]
    {
      /* OUT endpoint */
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
    }
  }
  pUser_Standard_Requests->User_SetEndPointFeature();
 8001b3a:	4b0a      	ldr	r3, [pc, #40]	; (8001b64 <Standard_SetEndPointFeature+0x94>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	699b      	ldr	r3, [r3, #24]
 8001b40:	4798      	blx	r3
  return USB_SUCCESS;
 8001b42:	2000      	movs	r0, #0
 8001b44:	bd38      	pop	{r3, r4, r5, pc}
    }

    else
    {
      /* OUT endpoint */
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
 8001b46:	f64b 738f 	movw	r3, #49039	; 0xbf8f
 8001b4a:	400b      	ands	r3, r1
 8001b4c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001b50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b58:	6013      	str	r3, [r2, #0]
 8001b5a:	e7ee      	b.n	8001b3a <Standard_SetEndPointFeature+0x6a>
 8001b5c:	20001354 	.word	0x20001354
 8001b60:	200000e0 	.word	0x200000e0
 8001b64:	20001350 	.word	0x20001350

08001b68 <Standard_GetDescriptorData>:
*******************************************************************************/
uint8_t *Standard_GetDescriptorData(uint16_t Length, ONE_DESCRIPTOR *pDesc)
{
  uint32_t  wOffset;

  wOffset = pInformation->Ctrl_Info.Usb_wOffset;
 8001b68:	4b05      	ldr	r3, [pc, #20]	; (8001b80 <Standard_GetDescriptorData+0x18>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	8a5a      	ldrh	r2, [r3, #18]
  if (Length == 0)
 8001b6e:	b110      	cbz	r0, 8001b76 <Standard_GetDescriptorData+0xe>
  {
    pInformation->Ctrl_Info.Usb_wLength = pDesc->Descriptor_Size - wOffset;
    return 0;
  }

  return pDesc->Descriptor + wOffset;
 8001b70:	6808      	ldr	r0, [r1, #0]
 8001b72:	1880      	adds	r0, r0, r2
}
 8001b74:	4770      	bx	lr
  uint32_t  wOffset;

  wOffset = pInformation->Ctrl_Info.Usb_wOffset;
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength = pDesc->Descriptor_Size - wOffset;
 8001b76:	8889      	ldrh	r1, [r1, #4]
 8001b78:	1a8a      	subs	r2, r1, r2
 8001b7a:	821a      	strh	r2, [r3, #16]
    return 0;
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	20001354 	.word	0x20001354

08001b84 <Post0_Process>:
* Output         : None.
* Return         : - 0 if the control State is in PAUSE
*                  - 1 if not.
*******************************************************************************/
uint8_t Post0_Process(void)
{
 8001b84:	b508      	push	{r3, lr}
   
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 8001b86:	4b0c      	ldr	r3, [pc, #48]	; (8001bb8 <Post0_Process+0x34>)
 8001b88:	2000      	movs	r0, #0
 8001b8a:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
 8001b8e:	4b0b      	ldr	r3, [pc, #44]	; (8001bbc <Post0_Process+0x38>)
 8001b90:	4798      	blx	r3

  if (pInformation->ControlState == STALLED)
 8001b92:	4b0b      	ldr	r3, [pc, #44]	; (8001bc0 <Post0_Process+0x3c>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	7a18      	ldrb	r0, [r3, #8]
 8001b98:	2808      	cmp	r0, #8
 8001b9a:	d106      	bne.n	8001baa <Post0_Process+0x26>
  {
    vSetEPRxStatus(EP_RX_STALL);
 8001b9c:	4b09      	ldr	r3, [pc, #36]	; (8001bc4 <Post0_Process+0x40>)
 8001b9e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ba2:	801a      	strh	r2, [r3, #0]
    vSetEPTxStatus(EP_TX_STALL);
 8001ba4:	4b08      	ldr	r3, [pc, #32]	; (8001bc8 <Post0_Process+0x44>)
 8001ba6:	2210      	movs	r2, #16
 8001ba8:	801a      	strh	r2, [r3, #0]
  }

  return (pInformation->ControlState == PAUSE);
}
 8001baa:	f1b0 0c09 	subs.w	ip, r0, #9
 8001bae:	f1dc 0000 	rsbs	r0, ip, #0
 8001bb2:	eb50 000c 	adcs.w	r0, r0, ip
 8001bb6:	bd08      	pop	{r3, pc}
 8001bb8:	2000005c 	.word	0x2000005c
 8001bbc:	080023b5 	.word	0x080023b5
 8001bc0:	20001354 	.word	0x20001354
 8001bc4:	2000135a 	.word	0x2000135a
 8001bc8:	2000135c 	.word	0x2000135c

08001bcc <Out0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t Out0_Process(void)
{
 8001bcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t ControlState = pInformation->ControlState;
 8001bd0:	4d35      	ldr	r5, [pc, #212]	; (8001ca8 <Out0_Process+0xdc>)
 8001bd2:	682c      	ldr	r4, [r5, #0]
 8001bd4:	7a23      	ldrb	r3, [r4, #8]

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	bf18      	it	ne
 8001bda:	2b04      	cmpne	r3, #4
 8001bdc:	bf14      	ite	ne
 8001bde:	2600      	movne	r6, #0
 8001be0:	2601      	moveq	r6, #1
 8001be2:	d005      	beq.n	8001bf0 <Out0_Process+0x24>
  {
    /* host aborts the transfer before finish */
    ControlState = STALLED;
  }
  else if ((ControlState == OUT_DATA) || (ControlState == LAST_OUT_DATA))
 8001be4:	2b03      	cmp	r3, #3
 8001be6:	bf18      	it	ne
 8001be8:	2b05      	cmpne	r3, #5
 8001bea:	d007      	beq.n	8001bfc <Out0_Process+0x30>
  {
    DataStageOut();
    ControlState = pInformation->ControlState; /* may be changed outside the function */
  }

  else if (ControlState == WAIT_STATUS_OUT)
 8001bec:	2b07      	cmp	r3, #7
 8001bee:	d00e      	beq.n	8001c0e <Out0_Process+0x42>
 8001bf0:	2308      	movs	r3, #8
  else
  {
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;
 8001bf2:	7223      	strb	r3, [r4, #8]

  return Post0_Process();
 8001bf4:	4b2d      	ldr	r3, [pc, #180]	; (8001cac <Out0_Process+0xe0>)
 8001bf6:	4798      	blx	r3
 8001bf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
  uint32_t save_rLength;

  save_rLength = pEPinfo->Usb_rLength;

  if (pEPinfo->CopyData && save_rLength)
 8001bfc:	69a1      	ldr	r1, [r4, #24]
void DataStageOut(void)
{
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
  uint32_t save_rLength;

  save_rLength = pEPinfo->Usb_rLength;
 8001bfe:	8a23      	ldrh	r3, [r4, #16]

  if (pEPinfo->CopyData && save_rLength)
 8001c00:	b311      	cbz	r1, 8001c48 <Out0_Process+0x7c>
 8001c02:	b95b      	cbnz	r3, 8001c1c <Out0_Process+0x50>
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
    SetEPTxCount(ENDP0, 0);
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 8001c04:	8aa3      	ldrh	r3, [r4, #20]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d049      	beq.n	8001c9e <Out0_Process+0xd2>
 8001c0a:	4a29      	ldr	r2, [pc, #164]	; (8001cb0 <Out0_Process+0xe4>)
 8001c0c:	e02e      	b.n	8001c6c <Out0_Process+0xa0>
    ControlState = pInformation->ControlState; /* may be changed outside the function */
  }

  else if (ControlState == WAIT_STATUS_OUT)
  {
    (*pProperty->Process_Status_OUT)();
 8001c0e:	4b29      	ldr	r3, [pc, #164]	; (8001cb4 <Out0_Process+0xe8>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	4798      	blx	r3
 8001c16:	682c      	ldr	r4, [r5, #0]
 8001c18:	2308      	movs	r3, #8
 8001c1a:	e7ea      	b.n	8001bf2 <Out0_Process+0x26>
  if (pEPinfo->CopyData && save_rLength)
  {
    uint8_t *Buffer;
    uint32_t Length;

    Length = pEPinfo->PacketSize;
 8001c1c:	8aa7      	ldrh	r7, [r4, #20]
    if (Length > save_rLength)
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
 8001c1e:	429f      	cmp	r7, r3
 8001c20:	bf28      	it	cs
 8001c22:	461f      	movcs	r7, r3
 8001c24:	4638      	mov	r0, r7
 8001c26:	4788      	blx	r1
    pEPinfo->Usb_rLength -= Length;
 8001c28:	8a22      	ldrh	r2, [r4, #16]
    pEPinfo->Usb_rOffset += Length;
 8001c2a:	8a63      	ldrh	r3, [r4, #18]
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
    pEPinfo->Usb_rLength -= Length;
 8001c2c:	1bd2      	subs	r2, r2, r7
    pEPinfo->Usb_rOffset += Length;
 8001c2e:	18fb      	adds	r3, r7, r3
    if (Length > save_rLength)
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
 8001c30:	4680      	mov	r8, r0
    pEPinfo->Usb_rLength -= Length;
 8001c32:	8222      	strh	r2, [r4, #16]
    pEPinfo->Usb_rOffset += Length;
 8001c34:	8263      	strh	r3, [r4, #18]
    PMAToUserBufferCopy(Buffer, GetEPRxAddr(ENDP0), Length);
 8001c36:	4630      	mov	r0, r6
 8001c38:	4b1f      	ldr	r3, [pc, #124]	; (8001cb8 <Out0_Process+0xec>)
 8001c3a:	4798      	blx	r3
 8001c3c:	4b1f      	ldr	r3, [pc, #124]	; (8001cbc <Out0_Process+0xf0>)
 8001c3e:	4601      	mov	r1, r0
 8001c40:	463a      	mov	r2, r7
 8001c42:	4640      	mov	r0, r8
 8001c44:	4798      	blx	r3
 8001c46:	8a23      	ldrh	r3, [r4, #16]

  }

  if (pEPinfo->Usb_rLength != 0)
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d0db      	beq.n	8001c04 <Out0_Process+0x38>
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 8001c4c:	4b1c      	ldr	r3, [pc, #112]	; (8001cc0 <Out0_Process+0xf4>)
    SetEPTxCount(ENDP0, 0);
 8001c4e:	2000      	movs	r0, #0

  }

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 8001c50:	f44f 5240 	mov.w	r2, #12288	; 0x3000
    SetEPTxCount(ENDP0, 0);
 8001c54:	4601      	mov	r1, r0

  }

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 8001c56:	801a      	strh	r2, [r3, #0]
    SetEPTxCount(ENDP0, 0);
 8001c58:	4b1a      	ldr	r3, [pc, #104]	; (8001cc4 <Out0_Process+0xf8>)
 8001c5a:	4798      	blx	r3
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 8001c5c:	8a23      	ldrh	r3, [r4, #16]
 8001c5e:	8aa1      	ldrh	r1, [r4, #20]

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
    SetEPTxCount(ENDP0, 0);
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
 8001c60:	4a13      	ldr	r2, [pc, #76]	; (8001cb0 <Out0_Process+0xe4>)
 8001c62:	2030      	movs	r0, #48	; 0x30
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 8001c64:	4299      	cmp	r1, r3

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
    SetEPTxCount(ENDP0, 0);
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
 8001c66:	8010      	strh	r0, [r2, #0]
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 8001c68:	d919      	bls.n	8001c9e <Out0_Process+0xd2>
  {
    pInformation->ControlState = OUT_DATA;
  }
  else
  {
    if (pEPinfo->Usb_rLength > 0)
 8001c6a:	b9a3      	cbnz	r3, 8001c96 <Out0_Process+0xca>
    {
      pInformation->ControlState = LAST_OUT_DATA;
    }
    else if (pEPinfo->Usb_rLength == 0)
    {
      pInformation->ControlState = WAIT_STATUS_IN;
 8001c6c:	682c      	ldr	r4, [r5, #0]
 8001c6e:	2106      	movs	r1, #6
      USB_StatusIn();
 8001c70:	f645 4350 	movw	r3, #23632	; 0x5c50
    {
      pInformation->ControlState = LAST_OUT_DATA;
    }
    else if (pEPinfo->Usb_rLength == 0)
    {
      pInformation->ControlState = WAIT_STATUS_IN;
 8001c74:	7221      	strb	r1, [r4, #8]
      USB_StatusIn();
 8001c76:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001c7a:	6819      	ldr	r1, [r3, #0]
 8001c7c:	f243 0302 	movw	r3, #12290	; 0x3002
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
}
 8001c80:	b289      	uxth	r1, r1
      pInformation->ControlState = LAST_OUT_DATA;
    }
    else if (pEPinfo->Usb_rLength == 0)
    {
      pInformation->ControlState = WAIT_STATUS_IN;
      USB_StatusIn();
 8001c82:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001c86:	18cb      	adds	r3, r1, r3
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	2100      	movs	r1, #0
 8001c8c:	6019      	str	r1, [r3, #0]
 8001c8e:	2330      	movs	r3, #48	; 0x30
 8001c90:	8013      	strh	r3, [r2, #0]
 8001c92:	7a23      	ldrb	r3, [r4, #8]
 8001c94:	e7ad      	b.n	8001bf2 <Out0_Process+0x26>
  }
  else
  {
    if (pEPinfo->Usb_rLength > 0)
    {
      pInformation->ControlState = LAST_OUT_DATA;
 8001c96:	682c      	ldr	r4, [r5, #0]
 8001c98:	2305      	movs	r3, #5
 8001c9a:	7223      	strb	r3, [r4, #8]
 8001c9c:	e7a9      	b.n	8001bf2 <Out0_Process+0x26>
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
  {
    pInformation->ControlState = OUT_DATA;
 8001c9e:	682c      	ldr	r4, [r5, #0]
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	7223      	strb	r3, [r4, #8]
 8001ca4:	e7a5      	b.n	8001bf2 <Out0_Process+0x26>
 8001ca6:	bf00      	nop
 8001ca8:	20001354 	.word	0x20001354
 8001cac:	08001b85 	.word	0x08001b85
 8001cb0:	2000135c 	.word	0x2000135c
 8001cb4:	2000132c 	.word	0x2000132c
 8001cb8:	08002375 	.word	0x08002375
 8001cbc:	08002189 	.word	0x08002189
 8001cc0:	2000135a 	.word	0x2000135a
 8001cc4:	08002395 	.word	0x08002395

08001cc8 <Setup0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t Setup0_Process(void)
{
 8001cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8001cca:	f645 4350 	movw	r3, #23632	; 0x5c50
 8001cce:	f2c4 0300 	movt	r3, #16384	; 0x4000

  if (pInformation->ControlState != PAUSE)
 8001cd2:	4d9d      	ldr	r5, [pc, #628]	; (8001f48 <Setup0_Process+0x280>)
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8001cd4:	681a      	ldr	r2, [r3, #0]

  if (pInformation->ControlState != PAUSE)
 8001cd6:	682c      	ldr	r4, [r5, #0]
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8001cd8:	f243 0304 	movw	r3, #12292	; 0x3004
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
}
 8001cdc:	b292      	uxth	r2, r2
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8001cde:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001ce2:	18d3      	adds	r3, r2, r3

  if (pInformation->ControlState != PAUSE)
 8001ce4:	7a22      	ldrb	r2, [r4, #8]
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8001ce6:	005b      	lsls	r3, r3, #1

  if (pInformation->ControlState != PAUSE)
 8001ce8:	2a09      	cmp	r2, #9
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t Setup0_Process(void)
{
 8001cea:	b083      	sub	sp, #12
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8001cec:	681e      	ldr	r6, [r3, #0]

  if (pInformation->ControlState != PAUSE)
 8001cee:	d044      	beq.n	8001d7a <Setup0_Process+0xb2>
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
}
 8001cf0:	b2b6      	uxth	r6, r6
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8001cf2:	0076      	lsls	r6, r6, #1
 8001cf4:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8001cf8:	f506 46c0 	add.w	r6, r6, #24576	; 0x6000

  if (pInformation->ControlState != PAUSE)
  {
    pInformation->USBbmRequestType = *pBuf.b++; /* bmRequestType */
 8001cfc:	7833      	ldrb	r3, [r6, #0]
    pInformation->USBbRequest = *pBuf.b++; /* bRequest */
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwValue = ByteSwap(*pBuf.w++); /* wValue */
 8001cfe:	4f93      	ldr	r7, [pc, #588]	; (8001f4c <Setup0_Process+0x284>)
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */

  if (pInformation->ControlState != PAUSE)
  {
    pInformation->USBbmRequestType = *pBuf.b++; /* bmRequestType */
 8001d00:	7023      	strb	r3, [r4, #0]
    pInformation->USBbRequest = *pBuf.b++; /* bRequest */
 8001d02:	7873      	ldrb	r3, [r6, #1]
 8001d04:	7063      	strb	r3, [r4, #1]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwValue = ByteSwap(*pBuf.w++); /* wValue */
 8001d06:	88b0      	ldrh	r0, [r6, #4]
 8001d08:	47b8      	blx	r7
 8001d0a:	8060      	strh	r0, [r4, #2]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
 8001d0c:	8930      	ldrh	r0, [r6, #8]
 8001d0e:	682c      	ldr	r4, [r5, #0]
 8001d10:	47b8      	blx	r7
 8001d12:	80a0      	strh	r0, [r4, #4]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwLength = *pBuf.w; /* wLength */
 8001d14:	89b3      	ldrh	r3, [r6, #12]
 8001d16:	682c      	ldr	r4, [r5, #0]
  }

  pInformation->ControlState = SETTING_UP;
 8001d18:	2201      	movs	r2, #1
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwValue = ByteSwap(*pBuf.w++); /* wValue */
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwLength = *pBuf.w; /* wLength */
 8001d1a:	80e3      	strh	r3, [r4, #6]
  }

  pInformation->ControlState = SETTING_UP;
 8001d1c:	7222      	strb	r2, [r4, #8]
  if (pInformation->USBwLength == 0)
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d030      	beq.n	8001d84 <Setup0_Process+0xbc>
*******************************************************************************/
void Data_Setup0(void)
{
  uint8_t *(*CopyRoutine)(uint16_t);
  RESULT Result;
  uint32_t Request_No = pInformation->USBbRequest;
 8001d22:	7861      	ldrb	r1, [r4, #1]

  CopyRoutine = NULL;
  wOffset = 0;

  /*GET DESCRIPTOR*/
  if (Request_No == GET_DESCRIPTOR)
 8001d24:	2906      	cmp	r1, #6
 8001d26:	f000 8087 	beq.w	8001e38 <Setup0_Process+0x170>
      }  /* End of GET_DESCRIPTOR */
    }
  }

  /*GET STATUS*/
  else if ((Request_No == GET_STATUS) && (pInformation->USBwValue == 0)
 8001d2a:	2900      	cmp	r1, #0
 8001d2c:	d15e      	bne.n	8001dec <Setup0_Process+0x124>
 8001d2e:	8863      	ldrh	r3, [r4, #2]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	f000 8094 	beq.w	8001e5e <Setup0_Process+0x196>
 8001d36:	4e86      	ldr	r6, [pc, #536]	; (8001f50 <Setup0_Process+0x288>)
    (*CopyRoutine)(0);
    Result = USB_SUCCESS;
  }
  else
  {
    Result = (*pProperty->Class_Data_Setup)(pInformation->USBbRequest);
 8001d38:	6833      	ldr	r3, [r6, #0]
 8001d3a:	4608      	mov	r0, r1
 8001d3c:	691b      	ldr	r3, [r3, #16]
 8001d3e:	4798      	blx	r3
    if (Result == USB_NOT_READY)
 8001d40:	2803      	cmp	r0, #3
    {
      pInformation->ControlState = PAUSE;
 8001d42:	682b      	ldr	r3, [r5, #0]
    Result = USB_SUCCESS;
  }
  else
  {
    Result = (*pProperty->Class_Data_Setup)(pInformation->USBbRequest);
    if (Result == USB_NOT_READY)
 8001d44:	d062      	beq.n	8001e0c <Setup0_Process+0x144>
      pInformation->ControlState = PAUSE;
      return;
    }
  }

  if (pInformation->Ctrl_Info.Usb_wLength == 0xFFFF)
 8001d46:	8a1a      	ldrh	r2, [r3, #16]
 8001d48:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001d4c:	428a      	cmp	r2, r1
 8001d4e:	d05d      	beq.n	8001e0c <Setup0_Process+0x144>
  {
    /* Data is not ready, wait it */
    pInformation->ControlState = PAUSE;
    return;
  }
  if ((Result == USB_UNSUPPORT) || (pInformation->Ctrl_Info.Usb_wLength == 0))
 8001d50:	2802      	cmp	r0, #2
 8001d52:	d00c      	beq.n	8001d6e <Setup0_Process+0xa6>
 8001d54:	b15a      	cbz	r2, 8001d6e <Setup0_Process+0xa6>
    pInformation->ControlState = STALLED;
    return;
  }


  if (ValBit(pInformation->USBbmRequestType, 7))
 8001d56:	f993 1000 	ldrsb.w	r1, [r3]
 8001d5a:	2900      	cmp	r1, #0
 8001d5c:	f2c0 80b5 	blt.w	8001eca <Setup0_Process+0x202>
    pInformation->Ctrl_Info.PacketSize = pProperty->MaxPacketSize;
    DataStageIn();
  }
  else
  {
    pInformation->ControlState = OUT_DATA;
 8001d60:	2203      	movs	r2, #3
 8001d62:	721a      	strb	r2, [r3, #8]
    vSetEPRxStatus(EP_RX_VALID); /* enable for next data reception */
 8001d64:	4b7b      	ldr	r3, [pc, #492]	; (8001f54 <Setup0_Process+0x28c>)
 8001d66:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001d6a:	801a      	strh	r2, [r3, #0]
 8001d6c:	e001      	b.n	8001d72 <Setup0_Process+0xaa>
    return;
  }
  if ((Result == USB_UNSUPPORT) || (pInformation->Ctrl_Info.Usb_wLength == 0))
  {
    /* Unsupported request */
    pInformation->ControlState = STALLED;
 8001d6e:	2208      	movs	r2, #8
 8001d70:	721a      	strb	r2, [r3, #8]
  else
  {
    /* Setup with data stage */
    Data_Setup0();
  }
  return Post0_Process();
 8001d72:	4b79      	ldr	r3, [pc, #484]	; (8001f58 <Setup0_Process+0x290>)
 8001d74:	4798      	blx	r3
}
 8001d76:	b003      	add	sp, #12
 8001d78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d7a:	88e3      	ldrh	r3, [r4, #6]
    pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwLength = *pBuf.w; /* wLength */
  }

  pInformation->ControlState = SETTING_UP;
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	7222      	strb	r2, [r4, #8]
  if (pInformation->USBwLength == 0)
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d1ce      	bne.n	8001d22 <Setup0_Process+0x5a>
{
  RESULT Result = USB_UNSUPPORT;
  uint32_t RequestNo = pInformation->USBbRequest;
  uint32_t ControlState;

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8001d84:	7823      	ldrb	r3, [r4, #0]
* Return         : None.
*******************************************************************************/
void NoData_Setup0(void)
{
  RESULT Result = USB_UNSUPPORT;
  uint32_t RequestNo = pInformation->USBbRequest;
 8001d86:	7866      	ldrb	r6, [r4, #1]
  uint32_t ControlState;

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8001d88:	f013 037f 	ands.w	r3, r3, #127	; 0x7f
 8001d8c:	d141      	bne.n	8001e12 <Setup0_Process+0x14a>
  {
    /* Device Request*/
    /* SET_CONFIGURATION*/
    if (RequestNo == SET_CONFIGURATION)
 8001d8e:	2e09      	cmp	r6, #9
 8001d90:	f000 8108 	beq.w	8001fa4 <Setup0_Process+0x2dc>
    {
      Result = Standard_SetConfiguration();
    }

    /*SET ADDRESS*/
    else if (RequestNo == SET_ADDRESS)
 8001d94:	2e05      	cmp	r6, #5
 8001d96:	f000 80bf 	beq.w	8001f18 <Setup0_Process+0x250>
      {
        Result = USB_SUCCESS;
      }
    }
    /*SET FEATURE for Device*/
    else if (RequestNo == SET_FEATURE)
 8001d9a:	2e03      	cmp	r6, #3
 8001d9c:	f000 80f0 	beq.w	8001f80 <Setup0_Process+0x2b8>
      {
        Result = USB_UNSUPPORT;
      }
    }
    /*Clear FEATURE for Device */
    else if (RequestNo == CLEAR_FEATURE)
 8001da0:	2e01      	cmp	r6, #1
 8001da2:	d13b      	bne.n	8001e1c <Setup0_Process+0x154>
    {
      if (pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP
 8001da4:	78e3      	ldrb	r3, [r4, #3]
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d138      	bne.n	8001e1c <Setup0_Process+0x154>
          && pInformation->USBwIndex == 0
 8001daa:	88a3      	ldrh	r3, [r4, #4]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d135      	bne.n	8001e1c <Setup0_Process+0x154>
          && ValBit(pInformation->Current_Feature, 5))
 8001db0:	7a63      	ldrb	r3, [r4, #9]
 8001db2:	f003 0320 	and.w	r3, r3, #32
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d02f      	beq.n	8001e1c <Setup0_Process+0x154>
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
  {
    /*CLEAR FEATURE for EndPoint*/
    if (RequestNo == CLEAR_FEATURE)
    {
      Result = Standard_ClearFeature();
 8001dbc:	4b67      	ldr	r3, [pc, #412]	; (8001f5c <Setup0_Process+0x294>)
 8001dbe:	4798      	blx	r3
  {
    Result = USB_UNSUPPORT;
  }


  if (Result != USB_SUCCESS)
 8001dc0:	bb60      	cbnz	r0, 8001e1c <Setup0_Process+0x154>
 8001dc2:	682c      	ldr	r4, [r5, #0]
    goto exit_NoData_Setup0;
  }

  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();
 8001dc4:	f645 4350 	movw	r3, #23632	; 0x5c50
 8001dc8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	f243 0302 	movw	r3, #12290	; 0x3002
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
}
 8001dd2:	b292      	uxth	r2, r2
    goto exit_NoData_Setup0;
  }

  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();
 8001dd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001dd8:	18d3      	adds	r3, r2, r3
 8001dda:	005b      	lsls	r3, r3, #1
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]
 8001de0:	4a5f      	ldr	r2, [pc, #380]	; (8001f60 <Setup0_Process+0x298>)
 8001de2:	2306      	movs	r3, #6
 8001de4:	2130      	movs	r1, #48	; 0x30
 8001de6:	8011      	strh	r1, [r2, #0]

exit_NoData_Setup0:
  pInformation->ControlState = ControlState;
 8001de8:	7223      	strb	r3, [r4, #8]
 8001dea:	e7c2      	b.n	8001d72 <Setup0_Process+0xaa>
    }

  }

  /*GET CONFIGURATION*/
  else if (Request_No == GET_CONFIGURATION)
 8001dec:	2908      	cmp	r1, #8
 8001dee:	d148      	bne.n	8001e82 <Setup0_Process+0x1ba>
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8001df0:	7823      	ldrb	r3, [r4, #0]
 8001df2:	065b      	lsls	r3, r3, #25
 8001df4:	d19f      	bne.n	8001d36 <Setup0_Process+0x6e>
    {
      CopyRoutine = Standard_GetConfiguration;
 8001df6:	4b5b      	ldr	r3, [pc, #364]	; (8001f64 <Setup0_Process+0x29c>)

  }
  
  if (CopyRoutine)
  {
    pInformation->Ctrl_Info.Usb_wOffset = wOffset;
 8001df8:	2000      	movs	r0, #0
    pInformation->Ctrl_Info.CopyData = CopyRoutine;
 8001dfa:	61a3      	str	r3, [r4, #24]

  }
  
  if (CopyRoutine)
  {
    pInformation->Ctrl_Info.Usb_wOffset = wOffset;
 8001dfc:	8260      	strh	r0, [r4, #18]
    pInformation->Ctrl_Info.CopyData = CopyRoutine;
    /* sb in the original the cast to word was directly */
    /* now the cast is made step by step */
    (*CopyRoutine)(0);
 8001dfe:	4798      	blx	r3
      pInformation->ControlState = PAUSE;
      return;
    }
  }

  if (pInformation->Ctrl_Info.Usb_wLength == 0xFFFF)
 8001e00:	682b      	ldr	r3, [r5, #0]
 8001e02:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001e06:	8a1a      	ldrh	r2, [r3, #16]
 8001e08:	428a      	cmp	r2, r1
 8001e0a:	d1a3      	bne.n	8001d54 <Setup0_Process+0x8c>
  {
    /* Data is not ready, wait it */
    pInformation->ControlState = PAUSE;
 8001e0c:	2209      	movs	r2, #9
 8001e0e:	721a      	strb	r2, [r3, #8]
 8001e10:	e7af      	b.n	8001d72 <Setup0_Process+0xaa>
    }

  }

  /* Interface Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d071      	beq.n	8001efa <Setup0_Process+0x232>
      Result = Standard_SetInterface();
    }
  }

  /* EndPoint Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	f000 808d 	beq.w	8001f36 <Setup0_Process+0x26e>
  }


  if (Result != USB_SUCCESS)
  {
    Result = (*pProperty->Class_NoData_Setup)(RequestNo);
 8001e1c:	4b4c      	ldr	r3, [pc, #304]	; (8001f50 <Setup0_Process+0x288>)
 8001e1e:	4630      	mov	r0, r6
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	695b      	ldr	r3, [r3, #20]
 8001e24:	4798      	blx	r3
    if (Result == USB_NOT_READY)
 8001e26:	2803      	cmp	r0, #3
 8001e28:	f000 80c5 	beq.w	8001fb6 <Setup0_Process+0x2ee>
 8001e2c:	682c      	ldr	r4, [r5, #0]
      ControlState = PAUSE;
      goto exit_NoData_Setup0;
    }
  }

  if (Result != USB_SUCCESS)
 8001e2e:	2800      	cmp	r0, #0
 8001e30:	d0c8      	beq.n	8001dc4 <Setup0_Process+0xfc>
    /*SET ADDRESS*/
    else if (RequestNo == SET_ADDRESS)
    {
      if ((pInformation->USBwValue0 > 127) || (pInformation->USBwValue1 != 0)
          || (pInformation->USBwIndex != 0)
          || (pInformation->Current_Configuration != 0))
 8001e32:	2308      	movs	r3, #8
  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();

exit_NoData_Setup0:
  pInformation->ControlState = ControlState;
 8001e34:	7223      	strb	r3, [r4, #8]
 8001e36:	e79c      	b.n	8001d72 <Setup0_Process+0xaa>
  wOffset = 0;

  /*GET DESCRIPTOR*/
  if (Request_No == GET_DESCRIPTOR)
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8001e38:	7823      	ldrb	r3, [r4, #0]
 8001e3a:	065b      	lsls	r3, r3, #25
 8001e3c:	f47f af7b 	bne.w	8001d36 <Setup0_Process+0x6e>
    {
      uint8_t wValue1 = pInformation->USBwValue1;
 8001e40:	78a3      	ldrb	r3, [r4, #2]
      if (wValue1 == DEVICE_DESCRIPTOR)
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
 8001e42:	4e43      	ldr	r6, [pc, #268]	; (8001f50 <Setup0_Process+0x288>)
  if (Request_No == GET_DESCRIPTOR)
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
    {
      uint8_t wValue1 = pInformation->USBwValue1;
      if (wValue1 == DEVICE_DESCRIPTOR)
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	f000 80b0 	beq.w	8001faa <Setup0_Process+0x2e2>
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
      }
      else if (wValue1 == CONFIG_DESCRIPTOR)
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d05e      	beq.n	8001f0c <Setup0_Process+0x244>
      {
        CopyRoutine = pProperty->GetConfigDescriptor;
      }
      else if (wValue1 == STRING_DESCRIPTOR)
 8001e4e:	2b03      	cmp	r3, #3
 8001e50:	f47f af72 	bne.w	8001d38 <Setup0_Process+0x70>
      {
        CopyRoutine = pProperty->GetStringDescriptor;
 8001e54:	6833      	ldr	r3, [r6, #0]
 8001e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      CopyRoutine = Standard_GetInterface;
    }

  }
  
  if (CopyRoutine)
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d1cd      	bne.n	8001df8 <Setup0_Process+0x130>
 8001e5c:	e76c      	b.n	8001d38 <Setup0_Process+0x70>
  }

  /*GET STATUS*/
  else if ((Request_No == GET_STATUS) && (pInformation->USBwValue == 0)
           && (pInformation->USBwLength == 0x0002)
           && (pInformation->USBwIndex1 == 0))
 8001e5e:	6863      	ldr	r3, [r4, #4]
 8001e60:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001e64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001e68:	f47f af65 	bne.w	8001d36 <Setup0_Process+0x6e>
  {
    /* GET STATUS for Device*/
    if ((Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8001e6c:	7823      	ldrb	r3, [r4, #0]
 8001e6e:	f013 037f 	ands.w	r3, r3, #127	; 0x7f
 8001e72:	f040 80a4 	bne.w	8001fbe <Setup0_Process+0x2f6>
        && (pInformation->USBwIndex == 0))
 8001e76:	88a3      	ldrh	r3, [r4, #4]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	f47f af5c 	bne.w	8001d36 <Setup0_Process+0x6e>
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
          && (Status != 0))
      {
        CopyRoutine = Standard_GetStatus;
 8001e7e:	4b3a      	ldr	r3, [pc, #232]	; (8001f68 <Setup0_Process+0x2a0>)
 8001e80:	e7ba      	b.n	8001df8 <Setup0_Process+0x130>
    {
      CopyRoutine = Standard_GetConfiguration;
    }
  }
  /*GET INTERFACE*/
  else if (Request_No == GET_INTERFACE)
 8001e82:	290a      	cmp	r1, #10
 8001e84:	f47f af57 	bne.w	8001d36 <Setup0_Process+0x6e>
  {
    if ((Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8001e88:	7823      	ldrb	r3, [r4, #0]
 8001e8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	f47f af51 	bne.w	8001d36 <Setup0_Process+0x6e>
        && (pInformation->Current_Configuration != 0) && (pInformation->USBwValue == 0)
 8001e94:	7aa3      	ldrb	r3, [r4, #10]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	f43f af4d 	beq.w	8001d36 <Setup0_Process+0x6e>
 8001e9c:	8863      	ldrh	r3, [r4, #2]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	f47f af49 	bne.w	8001d36 <Setup0_Process+0x6e>
        && (pInformation->USBwIndex1 == 0) && (pInformation->USBwLength == 0x0001)
 8001ea4:	6862      	ldr	r2, [r4, #4]
        && ((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS))
 8001ea6:	4e2a      	ldr	r6, [pc, #168]	; (8001f50 <Setup0_Process+0x288>)
  /*GET INTERFACE*/
  else if (Request_No == GET_INTERFACE)
  {
    if ((Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
        && (pInformation->Current_Configuration != 0) && (pInformation->USBwValue == 0)
        && (pInformation->USBwIndex1 == 0) && (pInformation->USBwLength == 0x0001)
 8001ea8:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8001eac:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8001eb0:	f47f af42 	bne.w	8001d38 <Setup0_Process+0x70>
        && ((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS))
 8001eb4:	6832      	ldr	r2, [r6, #0]
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	7960      	ldrb	r0, [r4, #5]
 8001eba:	6993      	ldr	r3, [r2, #24]
 8001ebc:	4798      	blx	r3
 8001ebe:	2800      	cmp	r0, #0
 8001ec0:	f040 80be 	bne.w	8002040 <Setup0_Process+0x378>
 8001ec4:	682c      	ldr	r4, [r5, #0]
    {
      CopyRoutine = Standard_GetInterface;
 8001ec6:	4b29      	ldr	r3, [pc, #164]	; (8001f6c <Setup0_Process+0x2a4>)
 8001ec8:	e796      	b.n	8001df8 <Setup0_Process+0x130>


  if (ValBit(pInformation->USBbmRequestType, 7))
  {
    /* Device ==> Host */
    __IO uint32_t wLength = pInformation->USBwLength;
 8001eca:	88d9      	ldrh	r1, [r3, #6]
 8001ecc:	9101      	str	r1, [sp, #4]
     
    /* Restrict the data length to be the one host asks for */
    if (pInformation->Ctrl_Info.Usb_wLength > wLength)
 8001ece:	9801      	ldr	r0, [sp, #4]
 8001ed0:	4282      	cmp	r2, r0
 8001ed2:	d817      	bhi.n	8001f04 <Setup0_Process+0x23c>
    {
      pInformation->Ctrl_Info.Usb_wLength = wLength;
    }
    
    else if (pInformation->Ctrl_Info.Usb_wLength < pInformation->USBwLength)
 8001ed4:	428a      	cmp	r2, r1
    {
      if (pInformation->Ctrl_Info.Usb_wLength < pProperty->MaxPacketSize)
 8001ed6:	4e1e      	ldr	r6, [pc, #120]	; (8001f50 <Setup0_Process+0x288>)
    if (pInformation->Ctrl_Info.Usb_wLength > wLength)
    {
      pInformation->Ctrl_Info.Usb_wLength = wLength;
    }
    
    else if (pInformation->Ctrl_Info.Usb_wLength < pInformation->USBwLength)
 8001ed8:	d208      	bcs.n	8001eec <Setup0_Process+0x224>
    {
      if (pInformation->Ctrl_Info.Usb_wLength < pProperty->MaxPacketSize)
 8001eda:	6831      	ldr	r1, [r6, #0]
 8001edc:	f891 102c 	ldrb.w	r1, [r1, #44]	; 0x2c
 8001ee0:	428a      	cmp	r2, r1
 8001ee2:	f080 8095 	bcs.w	8002010 <Setup0_Process+0x348>
      {
        Data_Mul_MaxPacketSize = FALSE;
 8001ee6:	4a22      	ldr	r2, [pc, #136]	; (8001f70 <Setup0_Process+0x2a8>)
 8001ee8:	2100      	movs	r1, #0
 8001eea:	7011      	strb	r1, [r2, #0]
      {
        Data_Mul_MaxPacketSize = TRUE;
      }
    }   

    pInformation->Ctrl_Info.PacketSize = pProperty->MaxPacketSize;
 8001eec:	6832      	ldr	r2, [r6, #0]
 8001eee:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8001ef2:	829a      	strh	r2, [r3, #20]
    DataStageIn();
 8001ef4:	4b1f      	ldr	r3, [pc, #124]	; (8001f74 <Setup0_Process+0x2ac>)
 8001ef6:	4798      	blx	r3
 8001ef8:	e73b      	b.n	8001d72 <Setup0_Process+0xaa>

  /* Interface Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
  {
    /*SET INTERFACE*/
    if (RequestNo == SET_INTERFACE)
 8001efa:	2e0b      	cmp	r6, #11
 8001efc:	d18e      	bne.n	8001e1c <Setup0_Process+0x154>
    {
      Result = Standard_SetInterface();
 8001efe:	4b1e      	ldr	r3, [pc, #120]	; (8001f78 <Setup0_Process+0x2b0>)
 8001f00:	4798      	blx	r3
 8001f02:	e75d      	b.n	8001dc0 <Setup0_Process+0xf8>
    __IO uint32_t wLength = pInformation->USBwLength;
     
    /* Restrict the data length to be the one host asks for */
    if (pInformation->Ctrl_Info.Usb_wLength > wLength)
    {
      pInformation->Ctrl_Info.Usb_wLength = wLength;
 8001f04:	9a01      	ldr	r2, [sp, #4]
 8001f06:	4e12      	ldr	r6, [pc, #72]	; (8001f50 <Setup0_Process+0x288>)
 8001f08:	821a      	strh	r2, [r3, #16]
 8001f0a:	e7ef      	b.n	8001eec <Setup0_Process+0x224>
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
      }
      else if (wValue1 == CONFIG_DESCRIPTOR)
      {
        CopyRoutine = pProperty->GetConfigDescriptor;
 8001f0c:	6833      	ldr	r3, [r6, #0]
 8001f0e:	6a1b      	ldr	r3, [r3, #32]
      CopyRoutine = Standard_GetInterface;
    }

  }
  
  if (CopyRoutine)
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	f47f af71 	bne.w	8001df8 <Setup0_Process+0x130>
 8001f16:	e70f      	b.n	8001d38 <Setup0_Process+0x70>
    }

    /*SET ADDRESS*/
    else if (RequestNo == SET_ADDRESS)
    {
      if ((pInformation->USBwValue0 > 127) || (pInformation->USBwValue1 != 0)
 8001f18:	f994 3003 	ldrsb.w	r3, [r4, #3]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	db88      	blt.n	8001e32 <Setup0_Process+0x16a>
 8001f20:	78a3      	ldrb	r3, [r4, #2]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d185      	bne.n	8001e32 <Setup0_Process+0x16a>
          || (pInformation->USBwIndex != 0)
 8001f26:	88a3      	ldrh	r3, [r4, #4]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d182      	bne.n	8001e32 <Setup0_Process+0x16a>
          || (pInformation->Current_Configuration != 0))
 8001f2c:	7aa3      	ldrb	r3, [r4, #10]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	f43f af48 	beq.w	8001dc4 <Setup0_Process+0xfc>
 8001f34:	e77d      	b.n	8001e32 <Setup0_Process+0x16a>

  /* EndPoint Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
  {
    /*CLEAR FEATURE for EndPoint*/
    if (RequestNo == CLEAR_FEATURE)
 8001f36:	2e01      	cmp	r6, #1
 8001f38:	f43f af40 	beq.w	8001dbc <Setup0_Process+0xf4>
    {
      Result = Standard_ClearFeature();
    }
    /* SET FEATURE for EndPoint*/
    else if (RequestNo == SET_FEATURE)
 8001f3c:	2e03      	cmp	r6, #3
 8001f3e:	f47f af6d 	bne.w	8001e1c <Setup0_Process+0x154>
    {
      Result = Standard_SetEndPointFeature();
 8001f42:	4b0e      	ldr	r3, [pc, #56]	; (8001f7c <Setup0_Process+0x2b4>)
 8001f44:	4798      	blx	r3
 8001f46:	e73b      	b.n	8001dc0 <Setup0_Process+0xf8>
 8001f48:	20001354 	.word	0x20001354
 8001f4c:	0800241d 	.word	0x0800241d
 8001f50:	2000132c 	.word	0x2000132c
 8001f54:	2000135a 	.word	0x2000135a
 8001f58:	08001b85 	.word	0x08001b85
 8001f5c:	080019d9 	.word	0x080019d9
 8001f60:	2000135c 	.word	0x2000135c
 8001f64:	08001795 	.word	0x08001795
 8001f68:	080017e5 	.word	0x080017e5
 8001f6c:	080017bd 	.word	0x080017bd
 8001f70:	200002dc 	.word	0x200002dc
 8001f74:	0800187d 	.word	0x0800187d
 8001f78:	08001989 	.word	0x08001989
 8001f7c:	08001ad1 	.word	0x08001ad1
      }
    }
    /*SET FEATURE for Device*/
    else if (RequestNo == SET_FEATURE)
    {
      if ((pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP) \
 8001f80:	78e3      	ldrb	r3, [r4, #3]
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	f47f af4a 	bne.w	8001e1c <Setup0_Process+0x154>
          && (pInformation->USBwIndex == 0))
 8001f88:	88a3      	ldrh	r3, [r4, #4]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	f47f af46 	bne.w	8001e1c <Setup0_Process+0x154>
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetDeviceFeature(void)
{
  SetBit(pInformation->Current_Feature, 5);
 8001f90:	7a62      	ldrb	r2, [r4, #9]
  pUser_Standard_Requests->User_SetDeviceFeature();
 8001f92:	4b2d      	ldr	r3, [pc, #180]	; (8002048 <Setup0_Process+0x380>)
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetDeviceFeature(void)
{
  SetBit(pInformation->Current_Feature, 5);
 8001f94:	f042 0220 	orr.w	r2, r2, #32
  pUser_Standard_Requests->User_SetDeviceFeature();
 8001f98:	681b      	ldr	r3, [r3, #0]
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetDeviceFeature(void)
{
  SetBit(pInformation->Current_Feature, 5);
 8001f9a:	7262      	strb	r2, [r4, #9]
  pUser_Standard_Requests->User_SetDeviceFeature();
 8001f9c:	69db      	ldr	r3, [r3, #28]
 8001f9e:	4798      	blx	r3
 8001fa0:	682c      	ldr	r4, [r5, #0]
 8001fa2:	e70f      	b.n	8001dc4 <Setup0_Process+0xfc>
  {
    /* Device Request*/
    /* SET_CONFIGURATION*/
    if (RequestNo == SET_CONFIGURATION)
    {
      Result = Standard_SetConfiguration();
 8001fa4:	4b29      	ldr	r3, [pc, #164]	; (800204c <Setup0_Process+0x384>)
 8001fa6:	4798      	blx	r3
 8001fa8:	e70a      	b.n	8001dc0 <Setup0_Process+0xf8>
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
    {
      uint8_t wValue1 = pInformation->USBwValue1;
      if (wValue1 == DEVICE_DESCRIPTOR)
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
 8001faa:	6833      	ldr	r3, [r6, #0]
 8001fac:	69db      	ldr	r3, [r3, #28]
      CopyRoutine = Standard_GetInterface;
    }

  }
  
  if (CopyRoutine)
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	f47f af22 	bne.w	8001df8 <Setup0_Process+0x130>
 8001fb4:	e6c0      	b.n	8001d38 <Setup0_Process+0x70>
 8001fb6:	682c      	ldr	r4, [r5, #0]


  if (Result != USB_SUCCESS)
  {
    Result = (*pProperty->Class_NoData_Setup)(RequestNo);
    if (Result == USB_NOT_READY)
 8001fb8:	2309      	movs	r3, #9
  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();

exit_NoData_Setup0:
  pInformation->ControlState = ControlState;
 8001fba:	7223      	strb	r3, [r4, #8]
 8001fbc:	e6d9      	b.n	8001d72 <Setup0_Process+0xaa>
    {
      CopyRoutine = Standard_GetStatus;
    }

    /* GET STATUS for Interface*/
    else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d031      	beq.n	8002026 <Setup0_Process+0x35e>
        CopyRoutine = Standard_GetStatus;
      }
    }

    /* GET STATUS for EndPoint*/
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	f47f aeb7 	bne.w	8001d36 <Setup0_Process+0x6e>
    {
      Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
 8001fc8:	7963      	ldrb	r3, [r4, #5]
 8001fca:	f003 020f 	and.w	r2, r3, #15

      if (ValBit(pInformation->USBwIndex0, 7))
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 8001fce:	0090      	lsls	r0, r2, #2
 8001fd0:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
    {
      Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
      Reserved = pInformation->USBwIndex0 & 0x70;

      if (ValBit(pInformation->USBwIndex0, 7))
 8001fd4:	061e      	lsls	r6, r3, #24
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 8001fd6:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
      }
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
 8001fda:	bf56      	itet	pl
 8001fdc:	6800      	ldrpl	r0, [r0, #0]

      if (ValBit(pInformation->USBwIndex0, 7))
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 8001fde:	6806      	ldrmi	r6, [r0, #0]
      }
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
 8001fe0:	f400 5640 	andpl.w	r6, r0, #12288	; 0x3000
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 8001fe4:	481a      	ldr	r0, [pc, #104]	; (8002050 <Setup0_Process+0x388>)

      if (ValBit(pInformation->USBwIndex0, 7))
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 8001fe6:	bf48      	it	mi
 8001fe8:	f006 0630 	andmi.w	r6, r6, #48	; 0x30
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 8001fec:	7800      	ldrb	r0, [r0, #0]
 8001fee:	4282      	cmp	r2, r0
 8001ff0:	f4bf aea1 	bcs.w	8001d36 <Setup0_Process+0x6e>
 8001ff4:	f013 0f70 	tst.w	r3, #112	; 0x70
 8001ff8:	bf14      	ite	ne
 8001ffa:	2300      	movne	r3, #0
 8001ffc:	2301      	moveq	r3, #1
          && (Status != 0))
 8001ffe:	2e00      	cmp	r6, #0
 8002000:	bf0c      	ite	eq
 8002002:	2600      	moveq	r6, #0
 8002004:	f003 0601 	andne.w	r6, r3, #1
 8002008:	2e00      	cmp	r6, #0
 800200a:	f47f af38 	bne.w	8001e7e <Setup0_Process+0x1b6>
 800200e:	e692      	b.n	8001d36 <Setup0_Process+0x6e>
    {
      if (pInformation->Ctrl_Info.Usb_wLength < pProperty->MaxPacketSize)
      {
        Data_Mul_MaxPacketSize = FALSE;
      }
      else if ((pInformation->Ctrl_Info.Usb_wLength % pProperty->MaxPacketSize) == 0)
 8002010:	fb92 f0f1 	sdiv	r0, r2, r1
 8002014:	fb01 2210 	mls	r2, r1, r0, r2
 8002018:	2a00      	cmp	r2, #0
 800201a:	f47f af67 	bne.w	8001eec <Setup0_Process+0x224>
      {
        Data_Mul_MaxPacketSize = TRUE;
 800201e:	4a0d      	ldr	r2, [pc, #52]	; (8002054 <Setup0_Process+0x38c>)
 8002020:	2101      	movs	r1, #1
 8002022:	7011      	strb	r1, [r2, #0]
 8002024:	e762      	b.n	8001eec <Setup0_Process+0x224>
    }

    /* GET STATUS for Interface*/
    else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
    {
      if (((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS)
 8002026:	4e0c      	ldr	r6, [pc, #48]	; (8002058 <Setup0_Process+0x390>)
 8002028:	7960      	ldrb	r0, [r4, #5]
 800202a:	6833      	ldr	r3, [r6, #0]
 800202c:	699b      	ldr	r3, [r3, #24]
 800202e:	4798      	blx	r3
 8002030:	b930      	cbnz	r0, 8002040 <Setup0_Process+0x378>
          && (pInformation->Current_Configuration != 0))
 8002032:	682c      	ldr	r4, [r5, #0]
 8002034:	7aa3      	ldrb	r3, [r4, #10]
 8002036:	2b00      	cmp	r3, #0
 8002038:	f47f af21 	bne.w	8001e7e <Setup0_Process+0x1b6>
 800203c:	7861      	ldrb	r1, [r4, #1]
 800203e:	e67b      	b.n	8001d38 <Setup0_Process+0x70>
 8002040:	682b      	ldr	r3, [r5, #0]
 8002042:	7859      	ldrb	r1, [r3, #1]
 8002044:	e678      	b.n	8001d38 <Setup0_Process+0x70>
 8002046:	bf00      	nop
 8002048:	20001350 	.word	0x20001350
 800204c:	0800194d 	.word	0x0800194d
 8002050:	200000e0 	.word	0x200000e0
 8002054:	200002dc 	.word	0x200002dc
 8002058:	2000132c 	.word	0x2000132c

0800205c <SetDeviceAddress>:
* Input          : - Val: device address.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetDeviceAddress(uint8_t Val)
{
 800205c:	b470      	push	{r4, r5, r6}
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;
 800205e:	4b0f      	ldr	r3, [pc, #60]	; (800209c <SetDeviceAddress+0x40>)
 8002060:	781e      	ldrb	r6, [r3, #0]

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 8002062:	b196      	cbz	r6, 800208a <SetDeviceAddress+0x2e>
 8002064:	f44f 44b8 	mov.w	r4, #23552	; 0x5c00
 8002068:	f2c4 0400 	movt	r4, #16384	; 0x4000
 800206c:	2300      	movs	r3, #0
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 800206e:	6825      	ldr	r5, [r4, #0]
 8002070:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 8002074:	f640 720f 	movw	r2, #3855	; 0xf0f
 8002078:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800207c:	402a      	ands	r2, r5
{
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 800207e:	3301      	adds	r3, #1
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 8002080:	430a      	orrs	r2, r1
{
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 8002082:	429e      	cmp	r6, r3
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 8002084:	f844 2b04 	str.w	r2, [r4], #4
{
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 8002088:	d8f1      	bhi.n	800206e <SetDeviceAddress+0x12>
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
  } /* for */
  _SetDADDR(Val | DADDR_EF); /* set device address and enable function */ 
 800208a:	f645 434c 	movw	r3, #23628	; 0x5c4c
 800208e:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8002092:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002096:	6018      	str	r0, [r3, #0]
}
 8002098:	bc70      	pop	{r4, r5, r6}
 800209a:	4770      	bx	lr
 800209c:	200000e0 	.word	0x200000e0

080020a0 <In0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t In0_Process(void)
{
 80020a0:	b510      	push	{r4, lr}
  uint32_t ControlState = pInformation->ControlState;
 80020a2:	4c14      	ldr	r4, [pc, #80]	; (80020f4 <In0_Process+0x54>)
 80020a4:	6823      	ldr	r3, [r4, #0]
 80020a6:	7a1a      	ldrb	r2, [r3, #8]

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
 80020a8:	2a02      	cmp	r2, #2
 80020aa:	bf18      	it	ne
 80020ac:	2a04      	cmpne	r2, #4
 80020ae:	d010      	beq.n	80020d2 <In0_Process+0x32>
    DataStageIn();
    /* ControlState may be changed outside the function */
    ControlState = pInformation->ControlState;
  }

  else if (ControlState == WAIT_STATUS_IN)
 80020b0:	2a06      	cmp	r2, #6
 80020b2:	d004      	beq.n	80020be <In0_Process+0x1e>
 80020b4:	2208      	movs	r2, #8
  else
  {
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;
 80020b6:	721a      	strb	r2, [r3, #8]

  return Post0_Process();
 80020b8:	4b0f      	ldr	r3, [pc, #60]	; (80020f8 <In0_Process+0x58>)
 80020ba:	4798      	blx	r3
}
 80020bc:	bd10      	pop	{r4, pc}
    ControlState = pInformation->ControlState;
  }

  else if (ControlState == WAIT_STATUS_IN)
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 80020be:	785a      	ldrb	r2, [r3, #1]
 80020c0:	2a05      	cmp	r2, #5
 80020c2:	d00b      	beq.n	80020dc <In0_Process+0x3c>
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
    {
      SetDeviceAddress(pInformation->USBwValue0);
      pUser_Standard_Requests->User_SetDeviceAddress();
    }
    (*pProperty->Process_Status_IN)();
 80020c4:	4b0d      	ldr	r3, [pc, #52]	; (80020fc <In0_Process+0x5c>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	4798      	blx	r3
 80020cc:	6823      	ldr	r3, [r4, #0]
 80020ce:	2208      	movs	r2, #8
 80020d0:	e7f1      	b.n	80020b6 <In0_Process+0x16>
{
  uint32_t ControlState = pInformation->ControlState;

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
  {
    DataStageIn();
 80020d2:	4b0b      	ldr	r3, [pc, #44]	; (8002100 <In0_Process+0x60>)
 80020d4:	4798      	blx	r3
    /* ControlState may be changed outside the function */
    ControlState = pInformation->ControlState;
 80020d6:	6823      	ldr	r3, [r4, #0]
 80020d8:	7a1a      	ldrb	r2, [r3, #8]
 80020da:	e7ec      	b.n	80020b6 <In0_Process+0x16>
  }

  else if (ControlState == WAIT_STATUS_IN)
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
 80020dc:	781a      	ldrb	r2, [r3, #0]
    ControlState = pInformation->ControlState;
  }

  else if (ControlState == WAIT_STATUS_IN)
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 80020de:	0652      	lsls	r2, r2, #25
 80020e0:	d1f0      	bne.n	80020c4 <In0_Process+0x24>
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
    {
      SetDeviceAddress(pInformation->USBwValue0);
 80020e2:	78d8      	ldrb	r0, [r3, #3]
 80020e4:	4b07      	ldr	r3, [pc, #28]	; (8002104 <In0_Process+0x64>)
 80020e6:	4798      	blx	r3
      pUser_Standard_Requests->User_SetDeviceAddress();
 80020e8:	4b07      	ldr	r3, [pc, #28]	; (8002108 <In0_Process+0x68>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	6a1b      	ldr	r3, [r3, #32]
 80020ee:	4798      	blx	r3
 80020f0:	e7e8      	b.n	80020c4 <In0_Process+0x24>
 80020f2:	bf00      	nop
 80020f4:	20001354 	.word	0x20001354
 80020f8:	08001b85 	.word	0x08001b85
 80020fc:	2000132c 	.word	0x2000132c
 8002100:	0800187d 	.word	0x0800187d
 8002104:	0800205d 	.word	0x0800205d
 8002108:	20001350 	.word	0x20001350

0800210c <NOP_Process>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop

08002110 <USB_Init>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Init(void)
{
 8002110:	b510      	push	{r4, lr}
  pInformation = &Device_Info;
 8002112:	f241 3234 	movw	r2, #4916	; 0x1334
 8002116:	f241 3454 	movw	r4, #4948	; 0x1354
 800211a:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800211e:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8002122:	6022      	str	r2, [r4, #0]
  pInformation->ControlState = 2;
 8002124:	2402      	movs	r4, #2
 8002126:	7214      	strb	r4, [r2, #8]
  pProperty = &Device_Property;
 8002128:	f241 302c 	movw	r0, #4908	; 0x132c
 800212c:	f240 035c 	movw	r3, #92	; 0x5c
  pUser_Standard_Requests = &User_Standard_Requests;
 8002130:	f241 3150 	movw	r1, #4944	; 0x1350
 8002134:	f240 028c 	movw	r2, #140	; 0x8c
*******************************************************************************/
void USB_Init(void)
{
  pInformation = &Device_Info;
  pInformation->ControlState = 2;
  pProperty = &Device_Property;
 8002138:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800213c:	f2c2 0000 	movt	r0, #8192	; 0x2000
  pUser_Standard_Requests = &User_Standard_Requests;
 8002140:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8002144:	f2c2 0200 	movt	r2, #8192	; 0x2000
*******************************************************************************/
void USB_Init(void)
{
  pInformation = &Device_Info;
  pInformation->ControlState = 2;
  pProperty = &Device_Property;
 8002148:	6003      	str	r3, [r0, #0]
  pUser_Standard_Requests = &User_Standard_Requests;
 800214a:	600a      	str	r2, [r1, #0]
  /* Initialize devices one by one */
  pProperty->Init();
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4798      	blx	r3
 8002150:	bd10      	pop	{r4, pc}
 8002152:	bf00      	nop

08002154 <UserToPMABufferCopy>:
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
 8002154:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
 8002158:	f501 5140 	add.w	r1, r1, #12288	; 0x3000
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 800215c:	3201      	adds	r2, #1
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
 800215e:	0049      	lsls	r1, r1, #1
  for (i = n; i != 0; i--)
 8002160:	1053      	asrs	r3, r2, #1
*                  - wNBytes: no. of bytes to be copied.
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8002162:	b410      	push	{r4}
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 8002164:	d00d      	beq.n	8002182 <UserToPMABufferCopy+0x2e>
 8002166:	1d0a      	adds	r2, r1, #4
*                  - wPMABufAddr: address into PMA.
*                  - wNBytes: no. of bytes to be copied.
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
 8002168:	3002      	adds	r0, #2
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
  {
    temp1 = (uint16_t) * pbUsrBuf;
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 800216a:	f810 4c01 	ldrb.w	r4, [r0, #-1]
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
  {
    temp1 = (uint16_t) * pbUsrBuf;
 800216e:	f810 1c02 	ldrb.w	r1, [r0, #-2]
 8002172:	3002      	adds	r0, #2
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8002174:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
    *pdwVal++ = temp2;
 8002178:	f822 1c04 	strh.w	r1, [r2, #-4]
 800217c:	3204      	adds	r2, #4
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 800217e:	3b01      	subs	r3, #1
 8002180:	d1f3      	bne.n	800216a <UserToPMABufferCopy+0x16>
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
    *pdwVal++ = temp2;
    pdwVal++;
    pbUsrBuf++;
  }
}
 8002182:	bc10      	pop	{r4}
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop

08002188 <PMAToUserBufferCopy>:
void PMAToUserBufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
 8002188:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
 800218c:	f501 5140 	add.w	r1, r1, #12288	; 0x3000
* Output         : None.
* Return         : None.
*******************************************************************************/
void PMAToUserBufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
 8002190:	3201      	adds	r2, #1
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
 8002192:	0049      	lsls	r1, r1, #1
  for (i = n; i != 0; i--)
 8002194:	1053      	asrs	r3, r2, #1
 8002196:	d008      	beq.n	80021aa <PMAToUserBufferCopy+0x22>
*                  - wPMABufAddr = address into PMA.
*                  - wNBytes     = no. of bytes to be copied.
* Output         : None.
* Return         : None.
*******************************************************************************/
void PMAToUserBufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
 8002198:	3002      	adds	r0, #2
 800219a:	1f0a      	subs	r2, r1, #4
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 800219c:	f852 1f04 	ldr.w	r1, [r2, #4]!
 80021a0:	f820 1c02 	strh.w	r1, [r0, #-2]
 80021a4:	3002      	adds	r0, #2
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 80021a6:	3b01      	subs	r3, #1
 80021a8:	d1f8      	bne.n	800219c <PMAToUserBufferCopy+0x14>
 80021aa:	4770      	bx	lr

080021ac <SetBTABLE>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetBTABLE(uint16_t wRegValue)
{
  _SetBTABLE(wRegValue);
 80021ac:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 80021b0:	f645 4250 	movw	r2, #23632	; 0x5c50
 80021b4:	4003      	ands	r3, r0
 80021b6:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80021ba:	6013      	str	r3, [r2, #0]
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop

080021c0 <SetEPType>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPType(uint8_t bEpNum, uint16_t wType)
{
  _SetEPType(bEpNum, wType);
 80021c0:	0080      	lsls	r0, r0, #2
 80021c2:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 80021c6:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 80021ca:	6810      	ldr	r0, [r2, #0]
 80021cc:	f648 138f 	movw	r3, #35215	; 0x898f
 80021d0:	4003      	ands	r3, r0
 80021d2:	4319      	orrs	r1, r3
 80021d4:	6011      	str	r1, [r2, #0]
 80021d6:	4770      	bx	lr

080021d8 <SetEPTxStatus>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxStatus(uint8_t bEpNum, uint16_t wState)
{
  _SetEPTxStatus(bEpNum, wState);
 80021d8:	0080      	lsls	r0, r0, #2
 80021da:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 80021de:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
*                  wState: new state.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxStatus(uint8_t bEpNum, uint16_t wState)
{
 80021e2:	b410      	push	{r4}
  _SetEPTxStatus(bEpNum, wState);
 80021e4:	f001 0010 	and.w	r0, r1, #16
 80021e8:	6814      	ldr	r4, [r2, #0]
 80021ea:	f648 73bf 	movw	r3, #36799	; 0x8fbf
 80021ee:	b280      	uxth	r0, r0
 80021f0:	4023      	ands	r3, r4
 80021f2:	b968      	cbnz	r0, 8002210 <SetEPTxStatus+0x38>
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	f001 0120 	and.w	r1, r1, #32
 80021fa:	b289      	uxth	r1, r1
 80021fc:	b109      	cbz	r1, 8002202 <SetEPTxStatus+0x2a>
 80021fe:	f083 0320 	eor.w	r3, r3, #32
 8002202:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002206:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800220a:	6013      	str	r3, [r2, #0]
}
 800220c:	bc10      	pop	{r4}
 800220e:	4770      	bx	lr
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxStatus(uint8_t bEpNum, uint16_t wState)
{
  _SetEPTxStatus(bEpNum, wState);
 8002210:	f083 0310 	eor.w	r3, r3, #16
 8002214:	e7ef      	b.n	80021f6 <SetEPTxStatus+0x1e>
 8002216:	bf00      	nop

08002218 <SetEPRxStatus>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxStatus(uint8_t bEpNum, uint16_t wState)
{
  _SetEPRxStatus(bEpNum, wState);
 8002218:	0080      	lsls	r0, r0, #2
 800221a:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 800221e:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
*                  wState: new state.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxStatus(uint8_t bEpNum, uint16_t wState)
{
 8002222:	b410      	push	{r4}
  _SetEPRxStatus(bEpNum, wState);
 8002224:	f401 5080 	and.w	r0, r1, #4096	; 0x1000
 8002228:	6814      	ldr	r4, [r2, #0]
 800222a:	f64b 738f 	movw	r3, #49039	; 0xbf8f
 800222e:	b280      	uxth	r0, r0
 8002230:	4023      	ands	r3, r4
 8002232:	b968      	cbnz	r0, 8002250 <SetEPRxStatus+0x38>
 8002234:	b29b      	uxth	r3, r3
 8002236:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 800223a:	b289      	uxth	r1, r1
 800223c:	b109      	cbz	r1, 8002242 <SetEPRxStatus+0x2a>
 800223e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002242:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002246:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800224a:	6013      	str	r3, [r2, #0]
}
 800224c:	bc10      	pop	{r4}
 800224e:	4770      	bx	lr
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxStatus(uint8_t bEpNum, uint16_t wState)
{
  _SetEPRxStatus(bEpNum, wState);
 8002250:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002254:	e7ef      	b.n	8002236 <SetEPRxStatus+0x1e>
 8002256:	bf00      	nop

08002258 <SetEPTxValid>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxValid(uint8_t bEpNum)
{
  _SetEPTxStatus(bEpNum, EP_TX_VALID);
 8002258:	0080      	lsls	r0, r0, #2
 800225a:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 800225e:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 8002262:	6811      	ldr	r1, [r2, #0]
 8002264:	f648 73bf 	movw	r3, #36799	; 0x8fbf
 8002268:	400b      	ands	r3, r1
 800226a:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 800226e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002272:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002276:	6013      	str	r3, [r2, #0]
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop

0800227c <SetEPRxValid>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxValid(uint8_t bEpNum)
{
  _SetEPRxStatus(bEpNum, EP_RX_VALID);
 800227c:	0080      	lsls	r0, r0, #2
 800227e:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 8002282:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 8002286:	6811      	ldr	r1, [r2, #0]
 8002288:	f64b 738f 	movw	r3, #49039	; 0xbf8f
 800228c:	400b      	ands	r3, r1
 800228e:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002292:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002296:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800229a:	6013      	str	r3, [r2, #0]
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop

080022a0 <Clear_Status_Out>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Clear_Status_Out(uint8_t bEpNum)
{
  _ClearEP_KIND(bEpNum);
 80022a0:	0080      	lsls	r0, r0, #2
 80022a2:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 80022a6:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 80022aa:	6811      	ldr	r1, [r2, #0]
 80022ac:	f640 630f 	movw	r3, #3599	; 0xe0f
 80022b0:	400b      	ands	r3, r1
 80022b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022ba:	6013      	str	r3, [r2, #0]
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop

080022c0 <ClearDTOG_RX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_RX(uint8_t bEpNum)
{
  _ClearDTOG_RX(bEpNum);
 80022c0:	0080      	lsls	r0, r0, #2
 80022c2:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 80022c6:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	0451      	lsls	r1, r2, #17
 80022ce:	d508      	bpl.n	80022e2 <ClearDTOG_RX+0x22>
 80022d0:	6819      	ldr	r1, [r3, #0]
 80022d2:	f640 720f 	movw	r2, #3855	; 0xf0f
 80022d6:	400a      	ands	r2, r1
 80022d8:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80022dc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80022e0:	601a      	str	r2, [r3, #0]
 80022e2:	4770      	bx	lr

080022e4 <ClearDTOG_TX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_TX(uint8_t bEpNum)
{
  _ClearDTOG_TX(bEpNum);
 80022e4:	0080      	lsls	r0, r0, #2
 80022e6:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 80022ea:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	0650      	lsls	r0, r2, #25
 80022f2:	d508      	bpl.n	8002306 <ClearDTOG_TX+0x22>
 80022f4:	6819      	ldr	r1, [r3, #0]
 80022f6:	f640 720f 	movw	r2, #3855	; 0xf0f
 80022fa:	400a      	ands	r2, r1
 80022fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002300:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8002304:	601a      	str	r2, [r3, #0]
 8002306:	4770      	bx	lr

08002308 <SetEPTxAddr>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxAddr(uint8_t bEpNum, uint16_t wAddr)
{
  _SetEPTxAddr(bEpNum, wAddr);
 8002308:	f645 4350 	movw	r3, #23632	; 0x5c50
 800230c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	f64f 73fe 	movw	r3, #65534	; 0xfffe
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 8002316:	b292      	uxth	r2, r2
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxAddr(uint8_t bEpNum, uint16_t wAddr)
{
  _SetEPTxAddr(bEpNum, wAddr);
 8002318:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 800231c:	f100 5200 	add.w	r2, r0, #536870912	; 0x20000000
 8002320:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 8002324:	0052      	lsls	r2, r2, #1
 8002326:	400b      	ands	r3, r1
 8002328:	6013      	str	r3, [r2, #0]
 800232a:	4770      	bx	lr

0800232c <SetEPRxAddr>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxAddr(uint8_t bEpNum, uint16_t wAddr)
{
  _SetEPRxAddr(bEpNum, wAddr);
 800232c:	f645 4350 	movw	r3, #23632	; 0x5c50
 8002330:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	f243 0304 	movw	r3, #12292	; 0x3004
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 800233a:	b292      	uxth	r2, r2
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxAddr(uint8_t bEpNum, uint16_t wAddr)
{
  _SetEPRxAddr(bEpNum, wAddr);
 800233c:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8002340:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002344:	18c3      	adds	r3, r0, r3
 8002346:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	400a      	ands	r2, r1
 800234e:	601a      	str	r2, [r3, #0]
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop

08002354 <GetEPTxAddr>:
* Output         : None.
* Return         : Rx buffer address. 
*******************************************************************************/
uint16_t GetEPTxAddr(uint8_t bEpNum)
{
  return(_GetEPTxAddr(bEpNum));
 8002354:	f645 4350 	movw	r3, #23632	; 0x5c50
 8002358:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800235c:	681b      	ldr	r3, [r3, #0]
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 800235e:	b29b      	uxth	r3, r3
* Output         : None.
* Return         : Rx buffer address. 
*******************************************************************************/
uint16_t GetEPTxAddr(uint8_t bEpNum)
{
  return(_GetEPTxAddr(bEpNum));
 8002360:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8002364:	f100 5300 	add.w	r3, r0, #536870912	; 0x20000000
 8002368:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800236c:	005b      	lsls	r3, r3, #1
}
 800236e:	8818      	ldrh	r0, [r3, #0]
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop

08002374 <GetEPRxAddr>:
* Output         : None.
* Return         : Rx buffer address.
*******************************************************************************/
uint16_t GetEPRxAddr(uint8_t bEpNum)
{
  return(_GetEPRxAddr(bEpNum));
 8002374:	f645 4350 	movw	r3, #23632	; 0x5c50
 8002378:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	f243 0304 	movw	r3, #12292	; 0x3004
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 8002382:	b292      	uxth	r2, r2
* Output         : None.
* Return         : Rx buffer address.
*******************************************************************************/
uint16_t GetEPRxAddr(uint8_t bEpNum)
{
  return(_GetEPRxAddr(bEpNum));
 8002384:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8002388:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800238c:	18c3      	adds	r3, r0, r3
 800238e:	005b      	lsls	r3, r3, #1
}
 8002390:	8818      	ldrh	r0, [r3, #0]
 8002392:	4770      	bx	lr

08002394 <SetEPTxCount>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPTxCount(bEpNum, wCount);
 8002394:	f645 4350 	movw	r3, #23632	; 0x5c50
 8002398:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	f243 0302 	movw	r3, #12290	; 0x3002
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 80023a2:	b292      	uxth	r2, r2
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPTxCount(bEpNum, wCount);
 80023a4:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 80023a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80023ac:	18c3      	adds	r3, r0, r3
 80023ae:	005b      	lsls	r3, r3, #1
 80023b0:	6019      	str	r1, [r3, #0]
 80023b2:	4770      	bx	lr

080023b4 <SetEPRxCount>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPRxCount(bEpNum, wCount);
 80023b4:	f645 4350 	movw	r3, #23632	; 0x5c50
 80023b8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	f243 0306 	movw	r3, #12294	; 0x3006
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 80023c2:	b292      	uxth	r2, r2
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPRxCount(bEpNum, wCount);
 80023c4:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 80023c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80023cc:	18c3      	adds	r3, r0, r3
 80023ce:	005b      	lsls	r3, r3, #1
 80023d0:	293e      	cmp	r1, #62	; 0x3e
 80023d2:	d909      	bls.n	80023e8 <SetEPRxCount+0x34>
 80023d4:	094a      	lsrs	r2, r1, #5
 80023d6:	06c9      	lsls	r1, r1, #27
 80023d8:	d101      	bne.n	80023de <SetEPRxCount+0x2a>
 80023da:	3a01      	subs	r2, #1
 80023dc:	b292      	uxth	r2, r2
 80023de:	0292      	lsls	r2, r2, #10
 80023e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023e4:	601a      	str	r2, [r3, #0]
 80023e6:	4770      	bx	lr
 80023e8:	084a      	lsrs	r2, r1, #1
 80023ea:	07c8      	lsls	r0, r1, #31
 80023ec:	bf48      	it	mi
 80023ee:	3201      	addmi	r2, #1
 80023f0:	0292      	lsls	r2, r2, #10
 80023f2:	601a      	str	r2, [r3, #0]
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop

080023f8 <GetEPRxCount>:
* Output         : None.
* Return         : Rx count value.
*******************************************************************************/
uint16_t GetEPRxCount(uint8_t bEpNum)
{
  return(_GetEPRxCount(bEpNum));
 80023f8:	f645 4350 	movw	r3, #23632	; 0x5c50
 80023fc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	f243 0306 	movw	r3, #12294	; 0x3006
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 8002406:	b292      	uxth	r2, r2
* Output         : None.
* Return         : Rx count value.
*******************************************************************************/
uint16_t GetEPRxCount(uint8_t bEpNum)
{
  return(_GetEPRxCount(bEpNum));
 8002408:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 800240c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002410:	18c3      	adds	r3, r0, r3
 8002412:	005b      	lsls	r3, r3, #1
 8002414:	6818      	ldr	r0, [r3, #0]
}
 8002416:	0580      	lsls	r0, r0, #22
 8002418:	0d80      	lsrs	r0, r0, #22
 800241a:	4770      	bx	lr

0800241c <ByteSwap>:
uint16_t ByteSwap(uint16_t wSwW)
{
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
 800241c:	b2c3      	uxtb	r3, r0
 800241e:	0a00      	lsrs	r0, r0, #8
  return(wRet);
}
 8002420:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop

08002428 <USB_SIL_Init>:
* Input          : None.
* Output         : None.
* Return         : Status.
*******************************************************************************/
uint32_t USB_SIL_Init(void)
{
 8002428:	b410      	push	{r4}
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
  wInterrupt_Mask = IMR_MSK;
 800242a:	f241 3358 	movw	r3, #4952	; 0x1358
*******************************************************************************/
uint32_t USB_SIL_Init(void)
{
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
 800242e:	f645 4444 	movw	r4, #23620	; 0x5c44
  wInterrupt_Mask = IMR_MSK;
  /* set interrupts mask */
  _SetCNTR(wInterrupt_Mask);
 8002432:	f645 4240 	movw	r2, #23616	; 0x5c40
uint32_t USB_SIL_Init(void)
{
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
  wInterrupt_Mask = IMR_MSK;
 8002436:	f44f 413f 	mov.w	r1, #48896	; 0xbf00
*******************************************************************************/
uint32_t USB_SIL_Init(void)
{
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
 800243a:	2000      	movs	r0, #0
 800243c:	f2c4 0400 	movt	r4, #16384	; 0x4000
  wInterrupt_Mask = IMR_MSK;
 8002440:	f2c2 0300 	movt	r3, #8192	; 0x2000
  /* set interrupts mask */
  _SetCNTR(wInterrupt_Mask);
 8002444:	f2c4 0200 	movt	r2, #16384	; 0x4000
*******************************************************************************/
uint32_t USB_SIL_Init(void)
{
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
 8002448:	6020      	str	r0, [r4, #0]
  wInterrupt_Mask = IMR_MSK;
 800244a:	8019      	strh	r1, [r3, #0]
  /* set interrupts mask */
  _SetCNTR(wInterrupt_Mask);
 800244c:	6011      	str	r1, [r2, #0]
  return 0;
}
 800244e:	bc10      	pop	{r4}
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop

08002454 <USB_SIL_Read>:
*                     received data buffer.
* Output         : None.
* Return         : Number of received data (in Bytes).
*******************************************************************************/
uint32_t USB_SIL_Read(uint8_t bEpAddr, uint8_t* pBufferPointer)
{
 8002454:	b570      	push	{r4, r5, r6, lr}
  uint32_t DataLength = 0;

  /* Get the number of received data on the selected Endpoint */
  DataLength = GetEPRxCount(bEpAddr & 0x7F);
 8002456:	f242 33f9 	movw	r3, #9209	; 0x23f9
 800245a:	f000 057f 	and.w	r5, r0, #127	; 0x7f
 800245e:	4628      	mov	r0, r5
 8002460:	f6c0 0300 	movt	r3, #2048	; 0x800
*                     received data buffer.
* Output         : None.
* Return         : Number of received data (in Bytes).
*******************************************************************************/
uint32_t USB_SIL_Read(uint8_t bEpAddr, uint8_t* pBufferPointer)
{
 8002464:	460e      	mov	r6, r1
  uint32_t DataLength = 0;

  /* Get the number of received data on the selected Endpoint */
  DataLength = GetEPRxCount(bEpAddr & 0x7F);
 8002466:	4798      	blx	r3
  
  /* Use the memory interface function to write to the selected endpoint */
  PMAToUserBufferCopy(pBufferPointer, GetEPRxAddr(bEpAddr & 0x7F), DataLength);
 8002468:	f242 3375 	movw	r3, #9077	; 0x2375
uint32_t USB_SIL_Read(uint8_t bEpAddr, uint8_t* pBufferPointer)
{
  uint32_t DataLength = 0;

  /* Get the number of received data on the selected Endpoint */
  DataLength = GetEPRxCount(bEpAddr & 0x7F);
 800246c:	4604      	mov	r4, r0
  
  /* Use the memory interface function to write to the selected endpoint */
  PMAToUserBufferCopy(pBufferPointer, GetEPRxAddr(bEpAddr & 0x7F), DataLength);
 800246e:	f6c0 0300 	movt	r3, #2048	; 0x800
 8002472:	4628      	mov	r0, r5
 8002474:	4798      	blx	r3
 8002476:	f242 1389 	movw	r3, #8585	; 0x2189
 800247a:	4601      	mov	r1, r0
 800247c:	4622      	mov	r2, r4
 800247e:	4630      	mov	r0, r6
 8002480:	f6c0 0300 	movt	r3, #2048	; 0x800
 8002484:	4798      	blx	r3

  /* Return the number of received data */
  return DataLength;
}
 8002486:	4620      	mov	r0, r4
 8002488:	bd70      	pop	{r4, r5, r6, pc}
 800248a:	bf00      	nop

0800248c <CTR_LP>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void CTR_LP(void)
{
 800248c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002490:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 8002640 <CTR_LP+0x1b4>
 8002494:	b083      	sub	sp, #12
  __IO uint16_t wEPVal = 0;
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 8002496:	f645 4b44 	movw	fp, #23620	; 0x5c44
* Output         : None.
* Return         : None.
*******************************************************************************/
void CTR_LP(void)
{
  __IO uint16_t wEPVal = 0;
 800249a:	2300      	movs	r3, #0
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 800249c:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 8002644 <CTR_LP+0x1b8>
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 80024a0:	4d62      	ldr	r5, [pc, #392]	; (800262c <CTR_LP+0x1a0>)
* Output         : None.
* Return         : None.
*******************************************************************************/
void CTR_LP(void)
{
  __IO uint16_t wEPVal = 0;
 80024a2:	f8ad 3006 	strh.w	r3, [sp, #6]
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 80024a6:	f2c4 0b00 	movt	fp, #16384	; 0x4000
 80024aa:	46d0      	mov	r8, sl
 80024ac:	f8db 3000 	ldr.w	r3, [fp]
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 80024b0:	f44f 44b8 	mov.w	r4, #23552	; 0x5c00
*******************************************************************************/
void CTR_LP(void)
{
  __IO uint16_t wEPVal = 0;
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 80024b4:	b29a      	uxth	r2, r3
 80024b6:	041b      	lsls	r3, r3, #16
 80024b8:	f8aa 2000 	strh.w	r2, [sl]
 80024bc:	f140 80ab 	bpl.w	8002616 <CTR_LP+0x18a>
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 80024c0:	f8b8 2000 	ldrh.w	r2, [r8]
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 80024c4:	f2c4 0400 	movt	r4, #16384	; 0x4000
  __IO uint16_t wEPVal = 0;
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 80024c8:	f002 020f 	and.w	r2, r2, #15
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
 80024cc:	0090      	lsls	r0, r2, #2
 80024ce:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
	    SaveTState = SaveRState & EPTX_STAT;
 80024d2:	4e57      	ldr	r6, [pc, #348]	; (8002630 <CTR_LP+0x1a4>)
	    SaveRState &=  EPRX_STAT;	

	    _SetEPRxTxStatus(ENDP0,EP_RX_NAK,EP_TX_NAK);
 80024d4:	f64b 71bf 	movw	r1, #49087	; 0xbfbf
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 80024d8:	4f54      	ldr	r7, [pc, #336]	; (800262c <CTR_LP+0x1a0>)
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
    if (EPindex == 0)
 80024da:	4613      	mov	r3, r2
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
 80024dc:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
  __IO uint16_t wEPVal = 0;
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 80024e0:	f889 2000 	strb.w	r2, [r9]
    if (EPindex == 0)
 80024e4:	2a00      	cmp	r2, #0
 80024e6:	d133      	bne.n	8002550 <CTR_LP+0xc4>
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 80024e8:	6823      	ldr	r3, [r4, #0]
 80024ea:	b29b      	uxth	r3, r3
 80024ec:	802b      	strh	r3, [r5, #0]
	    SaveTState = SaveRState & EPTX_STAT;
 80024ee:	882b      	ldrh	r3, [r5, #0]
 80024f0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80024f4:	8033      	strh	r3, [r6, #0]
	    SaveRState &=  EPRX_STAT;	
 80024f6:	882b      	ldrh	r3, [r5, #0]
 80024f8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80024fc:	802b      	strh	r3, [r5, #0]

	    _SetEPRxTxStatus(ENDP0,EP_RX_NAK,EP_TX_NAK);
 80024fe:	6823      	ldr	r3, [r4, #0]
 8002500:	4019      	ands	r1, r3
 8002502:	f481 5100 	eor.w	r1, r1, #8192	; 0x2000
 8002506:	f081 0120 	eor.w	r1, r1, #32
 800250a:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800250e:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8002512:	6021      	str	r1, [r4, #0]

      /* DIR bit = origin of the interrupt */

      if ((wIstr & ISTR_DIR) == 0)
 8002514:	f8b8 3000 	ldrh.w	r3, [r8]
 8002518:	f003 0310 	and.w	r3, r3, #16
 800251c:	b29b      	uxth	r3, r3
 800251e:	2b00      	cmp	r3, #0
 8002520:	d049      	beq.n	80025b6 <CTR_LP+0x12a>
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */

        wEPVal = _GetENDPOINT(ENDP0);
 8002522:	6823      	ldr	r3, [r4, #0]
 8002524:	b29b      	uxth	r3, r3
 8002526:	f8ad 3006 	strh.w	r3, [sp, #6]
        
        if ((wEPVal &EP_SETUP) != 0)
 800252a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800252e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002532:	b29b      	uxth	r3, r3
 8002534:	2b00      	cmp	r3, #0
 8002536:	d171      	bne.n	800261c <CTR_LP+0x190>

		      _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
          return;
        }

        else if ((wEPVal & EP_CTR_RX) != 0)
 8002538:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800253c:	b21b      	sxth	r3, r3
 800253e:	2b00      	cmp	r3, #0
 8002540:	dab4      	bge.n	80024ac <CTR_LP+0x20>
        {
          _ClearEP_CTR_RX(ENDP0);
 8002542:	6822      	ldr	r2, [r4, #0]
 8002544:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002548:	4013      	ands	r3, r2
 800254a:	6023      	str	r3, [r4, #0]
          Out0_Process();
 800254c:	4b39      	ldr	r3, [pc, #228]	; (8002634 <CTR_LP+0x1a8>)
 800254e:	e038      	b.n	80025c2 <CTR_LP+0x136>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
 8002550:	6802      	ldr	r2, [r0, #0]
 8002552:	b292      	uxth	r2, r2
 8002554:	f8ad 2006 	strh.w	r2, [sp, #6]
      if ((wEPVal & EP_CTR_RX) != 0)
 8002558:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800255c:	b212      	sxth	r2, r2
 800255e:	2a00      	cmp	r2, #0
 8002560:	db1b      	blt.n	800259a <CTR_LP+0x10e>
        /* call OUT service function */
        (*pEpInt_OUT[EPindex-1])();

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & EP_CTR_TX) != 0)
 8002562:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8002566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800256a:	b29b      	uxth	r3, r3
 800256c:	2b00      	cmp	r3, #0
 800256e:	d09d      	beq.n	80024ac <CTR_LP+0x20>
      {
        /* clear int flag */
        _ClearEP_CTR_TX(EPindex);
 8002570:	f899 1000 	ldrb.w	r1, [r9]
 8002574:	f648 730f 	movw	r3, #36623	; 0x8f0f
 8002578:	008a      	lsls	r2, r1, #2
 800257a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800257e:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 8002582:	6810      	ldr	r0, [r2, #0]

        /* call IN service function */
        (*pEpInt_IN[EPindex-1])();
 8002584:	3901      	subs	r1, #1
      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & EP_CTR_TX) != 0)
      {
        /* clear int flag */
        _ClearEP_CTR_TX(EPindex);
 8002586:	4003      	ands	r3, r0
 8002588:	6013      	str	r3, [r2, #0]

        /* call IN service function */
        (*pEpInt_IN[EPindex-1])();
 800258a:	f240 021c 	movw	r2, #28
 800258e:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8002592:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8002596:	4798      	blx	r3
 8002598:	e788      	b.n	80024ac <CTR_LP+0x20>
      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
      if ((wEPVal & EP_CTR_RX) != 0)
      {
        /* clear int flag */
        _ClearEP_CTR_RX(EPindex);
 800259a:	6801      	ldr	r1, [r0, #0]
 800259c:	f640 728f 	movw	r2, #3983	; 0xf8f
 80025a0:	400a      	ands	r2, r1
 80025a2:	6002      	str	r2, [r0, #0]

        /* call OUT service function */
        (*pEpInt_OUT[EPindex-1])();
 80025a4:	f240 0238 	movw	r2, #56	; 0x38
 80025a8:	3b01      	subs	r3, #1
 80025aa:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80025ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025b2:	4798      	blx	r3
 80025b4:	e7d5      	b.n	8002562 <CTR_LP+0xd6>
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */

        _ClearEP_CTR_TX(ENDP0);
 80025b6:	6822      	ldr	r2, [r4, #0]
 80025b8:	f648 730f 	movw	r3, #36623	; 0x8f0f
 80025bc:	4013      	ands	r3, r2
 80025be:	6023      	str	r3, [r4, #0]
        In0_Process();
 80025c0:	4b1d      	ldr	r3, [pc, #116]	; (8002638 <CTR_LP+0x1ac>)
        }

        else if ((wEPVal & EP_CTR_RX) != 0)
        {
          _ClearEP_CTR_RX(ENDP0);
          Out0_Process();
 80025c2:	4798      	blx	r3
          /* before terminate set Tx & Rx status */
     
		     _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
 80025c4:	6821      	ldr	r1, [r4, #0]
 80025c6:	883a      	ldrh	r2, [r7, #0]
 80025c8:	f64b 73bf 	movw	r3, #49087	; 0xbfbf
 80025cc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80025d0:	b292      	uxth	r2, r2
 80025d2:	400b      	ands	r3, r1
 80025d4:	b10a      	cbz	r2, 80025da <CTR_LP+0x14e>
 80025d6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80025da:	883a      	ldrh	r2, [r7, #0]
 80025dc:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80025e0:	b292      	uxth	r2, r2
 80025e2:	b10a      	cbz	r2, 80025e8 <CTR_LP+0x15c>
 80025e4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80025e8:	8832      	ldrh	r2, [r6, #0]
 80025ea:	f002 0210 	and.w	r2, r2, #16
 80025ee:	b292      	uxth	r2, r2
 80025f0:	b10a      	cbz	r2, 80025f6 <CTR_LP+0x16a>
 80025f2:	f083 0310 	eor.w	r3, r3, #16
 80025f6:	8832      	ldrh	r2, [r6, #0]
 80025f8:	f002 0220 	and.w	r2, r2, #32
 80025fc:	b292      	uxth	r2, r2
 80025fe:	b10a      	cbz	r2, 8002604 <CTR_LP+0x178>
 8002600:	f083 0320 	eor.w	r3, r3, #32
 8002604:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002608:	f44f 42b8 	mov.w	r2, #23552	; 0x5c00
 800260c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002610:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8002614:	6013      	str	r3, [r2, #0]
      } /* if((wEPVal & EP_CTR_TX) != 0) */

    }/* if(EPindex == 0) else */

  }/* while(...) */
}
 8002616:	b003      	add	sp, #12
 8002618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

        wEPVal = _GetENDPOINT(ENDP0);
        
        if ((wEPVal &EP_SETUP) != 0)
        {
          _ClearEP_CTR_RX(ENDP0); /* SETUP bit kept frozen while CTR_RX = 1 */
 800261c:	6822      	ldr	r2, [r4, #0]
 800261e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002622:	4013      	ands	r3, r2
 8002624:	6023      	str	r3, [r4, #0]
          Setup0_Process();
 8002626:	4b05      	ldr	r3, [pc, #20]	; (800263c <CTR_LP+0x1b0>)
 8002628:	e7cb      	b.n	80025c2 <CTR_LP+0x136>
 800262a:	bf00      	nop
 800262c:	2000135a 	.word	0x2000135a
 8002630:	2000135c 	.word	0x2000135c
 8002634:	08001bcd 	.word	0x08001bcd
 8002638:	080020a1 	.word	0x080020a1
 800263c:	08001cc9 	.word	0x08001cc9
 8002640:	20000afc 	.word	0x20000afc
 8002644:	20001330 	.word	0x20001330

08002648 <FLASH_Unlock>:
* Return         : None
*******************************************************************************/
void FLASH_Unlock(void)
{
  /* Authorize the FPEC Access */
  FLASH->KEYR = FLASH_KEY1;
 8002648:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800264c:	f240 1123 	movw	r1, #291	; 0x123
  FLASH->KEYR = FLASH_KEY2;
 8002650:	f648 12ab 	movw	r2, #35243	; 0x89ab
* Return         : None
*******************************************************************************/
void FLASH_Unlock(void)
{
  /* Authorize the FPEC Access */
  FLASH->KEYR = FLASH_KEY1;
 8002654:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002658:	f2c4 5167 	movt	r1, #17767	; 0x4567
  FLASH->KEYR = FLASH_KEY2;
 800265c:	f6cc 52ef 	movt	r2, #52719	; 0xcdef
* Return         : None
*******************************************************************************/
void FLASH_Unlock(void)
{
  /* Authorize the FPEC Access */
  FLASH->KEYR = FLASH_KEY1;
 8002660:	6059      	str	r1, [r3, #4]
  FLASH->KEYR = FLASH_KEY2;
 8002662:	605a      	str	r2, [r3, #4]
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop

08002668 <FLASH_Lock>:
* Return         : None
*******************************************************************************/
void FLASH_Lock(void)
{
  /* Set the Lock Bit to lock the FPEC and the FCR */
  FLASH->CR |= CR_LOCK_Set;
 8002668:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800266c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002670:	691a      	ldr	r2, [r3, #16]
 8002672:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002676:	611a      	str	r2, [r3, #16]
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop

0800267c <FLASH_ClearFlag>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG)) ;
  
  /* Clear the flags */
  FLASH->SR = FLASH_FLAG;
 800267c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002680:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002684:	60d8      	str	r0, [r3, #12]
 8002686:	4770      	bx	lr

08002688 <FLASH_GetStatus>:
*******************************************************************************/
FLASH_Status FLASH_GetStatus(void)
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 8002688:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800268c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002690:	68da      	ldr	r2, [r3, #12]
 8002692:	07d1      	lsls	r1, r2, #31
 8002694:	d40b      	bmi.n	80026ae <FLASH_GetStatus+0x26>
  {
    flashstatus = FLASH_BUSY;
  }
  else 
  {  
    if(FLASH->SR & FLASH_FLAG_PGERR)
 8002696:	68da      	ldr	r2, [r3, #12]
 8002698:	0752      	lsls	r2, r2, #29
 800269a:	d501      	bpl.n	80026a0 <FLASH_GetStatus+0x18>
    { 
      flashstatus = FLASH_ERROR_PG;
 800269c:	2002      	movs	r0, #2
      }
    }
  }
  /* Return the Flash Status */
  return flashstatus;
}
 800269e:	4770      	bx	lr
    { 
      flashstatus = FLASH_ERROR_PG;
    }
    else 
    {
      if(FLASH->SR & FLASH_FLAG_WRPRTERR)
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	f013 0f10 	tst.w	r3, #16
      {
        flashstatus = FLASH_ERROR_WRP;
 80026a6:	bf0c      	ite	eq
 80026a8:	2004      	moveq	r0, #4
 80026aa:	2003      	movne	r0, #3
 80026ac:	4770      	bx	lr
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
  {
    flashstatus = FLASH_BUSY;
 80026ae:	2001      	movs	r0, #1
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop

080026b4 <FLASH_WaitForLastOperation>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_WaitForLastOperation(u32 Timeout)
{ 
 80026b4:	b5f0      	push	{r4, r5, r6, r7, lr}
  FLASH_Status status = FLASH_COMPLETE;
   
  /* Check for the Flash Status */
  status = FLASH_GetStatus();
 80026b6:	4d15      	ldr	r5, [pc, #84]	; (800270c <FLASH_WaitForLastOperation+0x58>)
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_WaitForLastOperation(u32 Timeout)
{ 
 80026b8:	b083      	sub	sp, #12
 80026ba:	4604      	mov	r4, r0
  FLASH_Status status = FLASH_COMPLETE;
   
  /* Check for the Flash Status */
  status = FLASH_GetStatus();
 80026bc:	47a8      	blx	r5

  /* Wait for a Flash operation to complete or a TIMEOUT to occur */
  while((status == FLASH_BUSY) && (Timeout != 0x00))
 80026be:	f1b0 0e01 	subs.w	lr, r0, #1
 80026c2:	f1de 0300 	rsbs	r3, lr, #0
 80026c6:	eb53 030e 	adcs.w	r3, r3, lr
 80026ca:	2c00      	cmp	r4, #0
 80026cc:	bf08      	it	eq
 80026ce:	2300      	moveq	r3, #0
 80026d0:	b1bb      	cbz	r3, 8002702 <FLASH_WaitForLastOperation+0x4e>
* Output         : None
* Return         : None
*******************************************************************************/
static void delay(void)
{
  vu32 i = 0;
 80026d2:	2700      	movs	r7, #0

  for(i = 0xFF; i != 0; i--)
 80026d4:	26ff      	movs	r6, #255	; 0xff
* Output         : None
* Return         : None
*******************************************************************************/
static void delay(void)
{
  vu32 i = 0;
 80026d6:	9701      	str	r7, [sp, #4]

  for(i = 0xFF; i != 0; i--)
 80026d8:	9601      	str	r6, [sp, #4]
 80026da:	9b01      	ldr	r3, [sp, #4]
 80026dc:	b12b      	cbz	r3, 80026ea <FLASH_WaitForLastOperation+0x36>
 80026de:	9b01      	ldr	r3, [sp, #4]
 80026e0:	3b01      	subs	r3, #1
 80026e2:	9301      	str	r3, [sp, #4]
 80026e4:	9b01      	ldr	r3, [sp, #4]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d1f9      	bne.n	80026de <FLASH_WaitForLastOperation+0x2a>

  /* Wait for a Flash operation to complete or a TIMEOUT to occur */
  while((status == FLASH_BUSY) && (Timeout != 0x00))
  {
    delay();
    status = FLASH_GetStatus();
 80026ea:	47a8      	blx	r5
   
  /* Check for the Flash Status */
  status = FLASH_GetStatus();

  /* Wait for a Flash operation to complete or a TIMEOUT to occur */
  while((status == FLASH_BUSY) && (Timeout != 0x00))
 80026ec:	3c01      	subs	r4, #1
 80026ee:	bf0c      	ite	eq
 80026f0:	2300      	moveq	r3, #0
 80026f2:	2301      	movne	r3, #1
 80026f4:	2801      	cmp	r0, #1
 80026f6:	bf14      	ite	ne
 80026f8:	2300      	movne	r3, #0
 80026fa:	f003 0301 	andeq.w	r3, r3, #1
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d1e9      	bne.n	80026d6 <FLASH_WaitForLastOperation+0x22>
    status = FLASH_TIMEOUT;
  }

  /* Return the operation status */
  return status;
}
 8002702:	2c00      	cmp	r4, #0
 8002704:	bf08      	it	eq
 8002706:	2005      	moveq	r0, #5
 8002708:	b003      	add	sp, #12
 800270a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800270c:	08002689 	.word	0x08002689

08002710 <FLASH_ProgramWord>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT. 
*******************************************************************************/
FLASH_Status FLASH_ProgramWord(u32 Address, u32 Data)
{
 8002710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002712:	4605      	mov	r5, r0

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8002714:	4c11      	ldr	r4, [pc, #68]	; (800275c <FLASH_ProgramWord+0x4c>)
 8002716:	200f      	movs	r0, #15
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT. 
*******************************************************************************/
FLASH_Status FLASH_ProgramWord(u32 Address, u32 Data)
{
 8002718:	460e      	mov	r6, r1

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 800271a:	47a0      	blx	r4
  
  if(status == FLASH_COMPLETE)
 800271c:	2804      	cmp	r0, #4
 800271e:	d000      	beq.n	8002722 <FLASH_ProgramWord+0x12>
      }
     }
  }
  /* Return the Program Status */
  return status;
}
 8002720:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  
  if(status == FLASH_COMPLETE)
  {
    /* if the previous operation is completed, proceed to program the new first 
    half word */
    FLASH->CR |= CR_PG_Set;
 8002722:	f44f 5700 	mov.w	r7, #8192	; 0x2000
 8002726:	f2c4 0702 	movt	r7, #16386	; 0x4002
 800272a:	693a      	ldr	r2, [r7, #16]
  
    *(vu16*)Address = (u16)Data;
 800272c:	b2b3      	uxth	r3, r6
  
  if(status == FLASH_COMPLETE)
  {
    /* if the previous operation is completed, proceed to program the new first 
    half word */
    FLASH->CR |= CR_PG_Set;
 800272e:	f042 0201 	orr.w	r2, r2, #1
 8002732:	613a      	str	r2, [r7, #16]
  
    *(vu16*)Address = (u16)Data;

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 8002734:	200f      	movs	r0, #15
  {
    /* if the previous operation is completed, proceed to program the new first 
    half word */
    FLASH->CR |= CR_PG_Set;
  
    *(vu16*)Address = (u16)Data;
 8002736:	802b      	strh	r3, [r5, #0]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 8002738:	47a0      	blx	r4
 
    if(status == FLASH_COMPLETE)
 800273a:	2804      	cmp	r0, #4
 800273c:	d009      	beq.n	8002752 <FLASH_ProgramWord+0x42>
      *(vu16*)(Address + 2) = Data >> 16;
    
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
        
      if(status != FLASH_BUSY)
 800273e:	2801      	cmp	r0, #1
 8002740:	d005      	beq.n	800274e <FLASH_ProgramWord+0x3e>
    else
    {
      if (status != FLASH_BUSY)
      {
        /* Disable the PG Bit */
        FLASH->CR &= CR_PG_Reset;
 8002742:	693a      	ldr	r2, [r7, #16]
 8002744:	f641 73fe 	movw	r3, #8190	; 0x1ffe
 8002748:	4013      	ands	r3, r2
 800274a:	613b      	str	r3, [r7, #16]
      }
     }
  }
  /* Return the Program Status */
  return status;
}
 800274c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT. 
*******************************************************************************/
FLASH_Status FLASH_ProgramWord(u32 Address, u32 Data)
{
 800274e:	2001      	movs	r0, #1
 8002750:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 
    if(status == FLASH_COMPLETE)
    {
      /* if the previous operation is completed, proceed to program the new second 
      half word */
      *(vu16*)(Address + 2) = Data >> 16;
 8002752:	0c36      	lsrs	r6, r6, #16
 8002754:	806e      	strh	r6, [r5, #2]
    
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8002756:	200f      	movs	r0, #15
 8002758:	47a0      	blx	r4
 800275a:	e7f0      	b.n	800273e <FLASH_ProgramWord+0x2e>
 800275c:	080026b5 	.word	0x080026b5

08002760 <FLASH_ErasePage>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_ErasePage(u32 Page_Address)
{
 8002760:	b570      	push	{r4, r5, r6, lr}
 8002762:	4606      	mov	r6, r0

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Page_Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(EraseTimeout);
 8002764:	4c0f      	ldr	r4, [pc, #60]	; (80027a4 <FLASH_ErasePage+0x44>)
 8002766:	f640 70ff 	movw	r0, #4095	; 0xfff
 800276a:	47a0      	blx	r4
  
  if(status == FLASH_COMPLETE)
 800276c:	2804      	cmp	r0, #4
 800276e:	d000      	beq.n	8002772 <FLASH_ErasePage+0x12>
      FLASH->CR &= CR_PER_Reset;
    }
  }
  /* Return the Erase Status */
  return status;
}
 8002770:	bd70      	pop	{r4, r5, r6, pc}
  status = FLASH_WaitForLastOperation(EraseTimeout);
  
  if(status == FLASH_COMPLETE)
  { 
    /* if the previous operation is completed, proceed to erase the page */
    FLASH->CR|= CR_PER_Set;
 8002772:	f44f 5500 	mov.w	r5, #8192	; 0x2000
 8002776:	f2c4 0502 	movt	r5, #16386	; 0x4002
 800277a:	692b      	ldr	r3, [r5, #16]
    FLASH->AR = Page_Address; 
    FLASH->CR|= CR_STRT_Set;
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 800277c:	f640 70ff 	movw	r0, #4095	; 0xfff
  status = FLASH_WaitForLastOperation(EraseTimeout);
  
  if(status == FLASH_COMPLETE)
  { 
    /* if the previous operation is completed, proceed to erase the page */
    FLASH->CR|= CR_PER_Set;
 8002780:	f043 0302 	orr.w	r3, r3, #2
 8002784:	612b      	str	r3, [r5, #16]
    FLASH->AR = Page_Address; 
 8002786:	616e      	str	r6, [r5, #20]
    FLASH->CR|= CR_STRT_Set;
 8002788:	692b      	ldr	r3, [r5, #16]
 800278a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800278e:	612b      	str	r3, [r5, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 8002790:	47a0      	blx	r4

    if(status != FLASH_BUSY)
 8002792:	2801      	cmp	r0, #1
    {
      /* if the erase operation is completed, disable the PER Bit */
      FLASH->CR &= CR_PER_Reset;
 8002794:	bf1f      	itttt	ne
 8002796:	692a      	ldrne	r2, [r5, #16]
 8002798:	f641 73fd 	movwne	r3, #8189	; 0x1ffd
 800279c:	4013      	andne	r3, r2
 800279e:	612b      	strne	r3, [r5, #16]
    }
  }
  /* Return the Erase Status */
  return status;
}
 80027a0:	bd70      	pop	{r4, r5, r6, pc}
 80027a2:	bf00      	nop
 80027a4:	080026b5 	.word	0x080026b5

080027a8 <Virtual_Com_Port_StringVendor>:
 80027a8:	00530326 004d0054 00630069 006f0072     &.S.T.M.i.c.r.o.
 80027b8:	006c0065 00630065 00720074 006e006f     e.l.e.c.t.r.o.n.
 80027c8:	00630069 00000073                       i.c.s...

080027d0 <Virtual_Com_Port_DeviceDescriptor>:
 80027d0:	02000112 40000002 57400483 02010200     .......@..@W....
 80027e0:	00000103                                ....

080027e4 <Virtual_Com_Port_StringLangID>:
 80027e4:	04090304                                ....

080027e8 <Virtual_Com_Port_StringProduct>:
 80027e8:	00530332 004d0054 00320033 00560020     2.S.T.M.3.2. .V.
 80027f8:	00720069 00750074 006c0061 00430020     i.r.t.u.a.l. .C.
 8002808:	004d004f 00500020 0072006f 00200074     O.M. .P.o.r.t. .
 8002818:	00000020                                 ...

0800281c <Virtual_Com_Port_ConfigDescriptor>:
 800281c:	00430209 c0000102 00040932 02020100     ..C.....2.......
 800282c:	24050001 05011000 01000124 02022404     ...$....$....$..
 800283c:	00062405 82050701 ff000803 00010409     .$..............
 800284c:	00000a02 03050700 00004002 02810507     .........@......
 800285c:	00000040                                @...
