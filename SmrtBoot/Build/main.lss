
main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000287c  08000000  08000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000e4  20000000  0800287c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00001160  20000200  08002c00  00010200  2**9
                  ALLOC
  3 ._usrstack    00000100  20001360  08003d60  00010200  2**0
                  ALLOC
  4 .debug_info   00006baf  00000000  00000000  000100e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000247d  00000000  00000000  00016c93  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_loc    00004156  00000000  00000000  00019110  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000930  00000000  00000000  0001d266  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000bc0  00000000  00000000  0001db96  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002acd  00000000  00000000  0001e756  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000022c1  00000000  00000000  00021223  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      00000011  00000000  00000000  000234e4  2**0
                  CONTENTS, READONLY
 12 .ARM.attributes 00000033  00000000  00000000  000234f5  2**0
                  CONTENTS, READONLY
 13 .debug_frame  00001510  00000000  00000000  00023528  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000000 <g_pfnVectors>:
 8000000:	00 50 00 20 5d 04 00 08                             .P. ]...

08000008 <main>:
     ARG     : 	void
     RET     : 	
     			int
---------------------------------------------------------------------------*/
int main(void)
{
 8000008:	b5f0      	push	{r4, r5, r6, r7, lr}
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Main_Init( void )
{
	Hw_Init();
 800000a:	4b20      	ldr	r3, [pc, #128]	; (800008c <main+0x84>)
     ARG     : 	void
     RET     : 	
     			int
---------------------------------------------------------------------------*/
int main(void)
{
 800000c:	b083      	sub	sp, #12
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Main_Init( void )
{
	Hw_Init();
 800000e:	4798      	blx	r3
	Ap_Init();
 8000010:	4b1f      	ldr	r3, [pc, #124]	; (8000090 <main+0x88>)
 8000012:	4798      	blx	r3


	Main_Init();


	if( Ap_ST32BL_RunBoot == TRUE )
 8000014:	4b1f      	ldr	r3, [pc, #124]	; (8000094 <main+0x8c>)
 8000016:	781b      	ldrb	r3, [r3, #0]
 8000018:	2b01      	cmp	r3, #1
 800001a:	d005      	beq.n	8000028 <main+0x20>
		#endif
		Ap_ST32BL_Main();
	}
	else
	{		
		Ap_ST32BL_JumpToApp(0);
 800001c:	2000      	movs	r0, #0
 800001e:	4b1e      	ldr	r3, [pc, #120]	; (8000098 <main+0x90>)
 8000020:	4798      	blx	r3
	}
	#endif

    
    return 0;
}
 8000022:	2000      	movs	r0, #0
 8000024:	b003      	add	sp, #12
 8000026:	bdf0      	pop	{r4, r5, r6, r7, pc}


	if( Ap_ST32BL_RunBoot == TRUE )
	{
		//-- 하드웨어 초기화
		Hw_Uart_Init();
 8000028:	4b1c      	ldr	r3, [pc, #112]	; (800009c <main+0x94>)
 800002a:	4798      	blx	r3
		Hw_Timer_Init();
 800002c:	4b1c      	ldr	r3, [pc, #112]	; (80000a0 <main+0x98>)
 800002e:	4798      	blx	r3
		Hw_VCom_Init();
 8000030:	4b1c      	ldr	r3, [pc, #112]	; (80000a4 <main+0x9c>)
 8000032:	4798      	blx	r3
 8000034:	4c1c      	ldr	r4, [pc, #112]	; (80000a8 <main+0xa0>)
		#if 1
		while(1)
		{
			if( HW_VCOM_Q_VAILD(0) > 0 )
			{
				Hw_VCom_Q_Pop( 0, &Uart_GetData );
 8000036:	4e1d      	ldr	r6, [pc, #116]	; (80000ac <main+0xa4>)
					Ap_ST32BL_SendByte(STM32_COMM_ACK);
					break;
				}
			}

			if( HW_UART_Q_VAILD(HW_UART_COM1) > 0 )
 8000038:	4d1d      	ldr	r5, [pc, #116]	; (80000b0 <main+0xa8>)
			{
				Hw_Uart_Q_Pop( HW_UART_COM1, &Uart_GetData );
 800003a:	4f1e      	ldr	r7, [pc, #120]	; (80000b4 <main+0xac>)
		//-- 먼저 명령을 보낸 포트로 다운로드 시작 
		//
		#if 1
		while(1)
		{
			if( HW_VCOM_Q_VAILD(0) > 0 )
 800003c:	2000      	movs	r0, #0
 800003e:	47a0      	blx	r4
			{
				Hw_VCom_Q_Pop( 0, &Uart_GetData );
 8000040:	f10d 0107 	add.w	r1, sp, #7
		//-- 먼저 명령을 보낸 포트로 다운로드 시작 
		//
		#if 1
		while(1)
		{
			if( HW_VCOM_Q_VAILD(0) > 0 )
 8000044:	b128      	cbz	r0, 8000052 <main+0x4a>
			{
				Hw_VCom_Q_Pop( 0, &Uart_GetData );
 8000046:	2000      	movs	r0, #0
 8000048:	47b0      	blx	r6

				if( Uart_GetData == STM32_CMD_INIT )
 800004a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800004e:	2b7f      	cmp	r3, #127	; 0x7f
 8000050:	d012      	beq.n	8000078 <main+0x70>
					Ap_ST32BL_SendByte(STM32_COMM_ACK);
					break;
				}
			}

			if( HW_UART_Q_VAILD(HW_UART_COM1) > 0 )
 8000052:	2000      	movs	r0, #0
 8000054:	47a8      	blx	r5
 8000056:	2800      	cmp	r0, #0
 8000058:	ddf0      	ble.n	800003c <main+0x34>
			{
				Hw_Uart_Q_Pop( HW_UART_COM1, &Uart_GetData );
 800005a:	2000      	movs	r0, #0
 800005c:	f10d 0107 	add.w	r1, sp, #7
 8000060:	47b8      	blx	r7

				if( Uart_GetData == STM32_CMD_INIT )
 8000062:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000066:	2b7f      	cmp	r3, #127	; 0x7f
 8000068:	d1e8      	bne.n	800003c <main+0x34>
				{
					Ap_ST32BL_UartPort = HW_UART_COM1;
 800006a:	4b13      	ldr	r3, [pc, #76]	; (80000b8 <main+0xb0>)
 800006c:	2200      	movs	r2, #0
 800006e:	701a      	strb	r2, [r3, #0]
					Ap_ST32BL_SendByte(STM32_COMM_ACK);
 8000070:	2079      	movs	r0, #121	; 0x79
 8000072:	4b12      	ldr	r3, [pc, #72]	; (80000bc <main+0xb4>)
 8000074:	4798      	blx	r3
					break;
 8000076:	e005      	b.n	8000084 <main+0x7c>
			{
				Hw_VCom_Q_Pop( 0, &Uart_GetData );

				if( Uart_GetData == STM32_CMD_INIT )
				{
					Ap_ST32BL_UartPort = HW_UART_VCOM;
 8000078:	4b0f      	ldr	r3, [pc, #60]	; (80000b8 <main+0xb0>)
 800007a:	2205      	movs	r2, #5
 800007c:	701a      	strb	r2, [r3, #0]
					Ap_ST32BL_SendByte(STM32_COMM_ACK);
 800007e:	2079      	movs	r0, #121	; 0x79
 8000080:	4b0e      	ldr	r3, [pc, #56]	; (80000bc <main+0xb4>)
 8000082:	4798      	blx	r3
					break;
				}
			}	
		}
		#endif
		Ap_ST32BL_Main();
 8000084:	4b0e      	ldr	r3, [pc, #56]	; (80000c0 <main+0xb8>)
 8000086:	4798      	blx	r3
 8000088:	e7cb      	b.n	8000022 <main+0x1a>
 800008a:	bf00      	nop
 800008c:	0800050d 	.word	0x0800050d
 8000090:	080000c5 	.word	0x080000c5
 8000094:	200002e1 	.word	0x200002e1
 8000098:	080002f9 	.word	0x080002f9
 800009c:	080007cd 	.word	0x080007cd
 80000a0:	0800098d 	.word	0x0800098d
 80000a4:	08000bad 	.word	0x08000bad
 80000a8:	08000c4d 	.word	0x08000c4d
 80000ac:	08000cd9 	.word	0x08000cd9
 80000b0:	08000ab5 	.word	0x08000ab5
 80000b4:	08000b3d 	.word	0x08000b3d
 80000b8:	200002e0 	.word	0x200002e0
 80000bc:	08000141 	.word	0x08000141
 80000c0:	0800031d 	.word	0x0800031d

080000c4 <Ap_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Ap_Init( void )
{
 80000c4:	b508      	push	{r3, lr}
	Ap_ST32BL_Init();
 80000c6:	f240 03d5 	movw	r3, #213	; 0xd5
 80000ca:	f6c0 0300 	movt	r3, #2048	; 0x800
 80000ce:	4798      	blx	r3
 80000d0:	bd08      	pop	{r3, pc}
 80000d2:	bf00      	nop

080000d4 <Ap_ST32BL_Init>:
void Ap_ST32BL_Init( void )
{
	u32 i;


	REG_GPIOB_CRL &= ~(0x0F << (0));	// Clear
 80000d4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80000d8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80000dc:	6819      	ldr	r1, [r3, #0]
	REG_GPIOB_CRL |=  (0x00 << (0));	// MODE, PB.0 Input Mode
	REG_GPIOB_CRL |=  (0x02 << (2));	// CNF,  PB.0 input	pull-up/pull-down
		
	CLR_BIT( REG_GPIOB_ODR, 0 );
 80000de:	f640 420c 	movw	r2, #3084	; 0xc0c
void Ap_ST32BL_Init( void )
{
	u32 i;


	REG_GPIOB_CRL &= ~(0x0F << (0));	// Clear
 80000e2:	f021 010f 	bic.w	r1, r1, #15
 80000e6:	6019      	str	r1, [r3, #0]
	REG_GPIOB_CRL |=  (0x00 << (0));	// MODE, PB.0 Input Mode
 80000e8:	6819      	ldr	r1, [r3, #0]
	REG_GPIOB_CRL |=  (0x02 << (2));	// CNF,  PB.0 input	pull-up/pull-down
		
	CLR_BIT( REG_GPIOB_ODR, 0 );
 80000ea:	f2c4 0201 	movt	r2, #16385	; 0x4001
{
	u32 i;


	REG_GPIOB_CRL &= ~(0x0F << (0));	// Clear
	REG_GPIOB_CRL |=  (0x00 << (0));	// MODE, PB.0 Input Mode
 80000ee:	6019      	str	r1, [r3, #0]
	REG_GPIOB_CRL |=  (0x02 << (2));	// CNF,  PB.0 input	pull-up/pull-down
 80000f0:	6818      	ldr	r0, [r3, #0]
		
	CLR_BIT( REG_GPIOB_ODR, 0 );


	if( IS_SET_BIT(REG_GPIOB_IDR, 0) )
 80000f2:	f640 4108 	movw	r1, #3080	; 0xc08
	u32 i;


	REG_GPIOB_CRL &= ~(0x0F << (0));	// Clear
	REG_GPIOB_CRL |=  (0x00 << (0));	// MODE, PB.0 Input Mode
	REG_GPIOB_CRL |=  (0x02 << (2));	// CNF,  PB.0 input	pull-up/pull-down
 80000f6:	f040 0008 	orr.w	r0, r0, #8
 80000fa:	6018      	str	r0, [r3, #0]
		
	CLR_BIT( REG_GPIOB_ODR, 0 );
 80000fc:	6813      	ldr	r3, [r2, #0]


	if( IS_SET_BIT(REG_GPIOB_IDR, 0) )
 80000fe:	f2c4 0101 	movt	r1, #16385	; 0x4001

	REG_GPIOB_CRL &= ~(0x0F << (0));	// Clear
	REG_GPIOB_CRL |=  (0x00 << (0));	// MODE, PB.0 Input Mode
	REG_GPIOB_CRL |=  (0x02 << (2));	// CNF,  PB.0 input	pull-up/pull-down
		
	CLR_BIT( REG_GPIOB_ODR, 0 );
 8000102:	f023 0301 	bic.w	r3, r3, #1
 8000106:	6013      	str	r3, [r2, #0]


	if( IS_SET_BIT(REG_GPIOB_IDR, 0) )
 8000108:	680b      	ldr	r3, [r1, #0]
 800010a:	f013 0301 	ands.w	r3, r3, #1
 800010e:	d00e      	beq.n	800012e <Ap_ST32BL_Init+0x5a>
	{
		Ap_ST32BL_RunBoot = TRUE;
 8000110:	4b08      	ldr	r3, [pc, #32]	; (8000134 <Ap_ST32BL_Init+0x60>)
 8000112:	2201      	movs	r2, #1
 8000114:	701a      	strb	r2, [r3, #0]
 8000116:	4b08      	ldr	r3, [pc, #32]	; (8000138 <Ap_ST32BL_Init+0x64>)
		Ap_ST32BL_RunBoot = FALSE;
	}

	for( i=0; i<128; i++ )
	{
		Ap_ST32BL_EraseSectorFlag[i] = FALSE;
 8000118:	2100      	movs	r1, #0
     TITLE   : Ap_ST32BL_Init
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_ST32BL_Init( void )
 800011a:	f103 0280 	add.w	r2, r3, #128	; 0x80
		Ap_ST32BL_RunBoot = FALSE;
	}

	for( i=0; i<128; i++ )
	{
		Ap_ST32BL_EraseSectorFlag[i] = FALSE;
 800011e:	f803 1f01 	strb.w	r1, [r3, #1]!
	else
	{
		Ap_ST32BL_RunBoot = FALSE;
	}

	for( i=0; i<128; i++ )
 8000122:	4293      	cmp	r3, r2
 8000124:	d1fb      	bne.n	800011e <Ap_ST32BL_Init+0x4a>
	{
		Ap_ST32BL_EraseSectorFlag[i] = FALSE;
	}

	Ap_ST32BL_UartPort = HW_UART_COM1;	
 8000126:	4b05      	ldr	r3, [pc, #20]	; (800013c <Ap_ST32BL_Init+0x68>)
 8000128:	2200      	movs	r2, #0
 800012a:	701a      	strb	r2, [r3, #0]
 800012c:	4770      	bx	lr
	{
		Ap_ST32BL_RunBoot = TRUE;
	}
	else
	{
		Ap_ST32BL_RunBoot = FALSE;
 800012e:	4a01      	ldr	r2, [pc, #4]	; (8000134 <Ap_ST32BL_Init+0x60>)
 8000130:	7013      	strb	r3, [r2, #0]
 8000132:	e7f0      	b.n	8000116 <Ap_ST32BL_Init+0x42>
 8000134:	200002e1 	.word	0x200002e1
 8000138:	200002e3 	.word	0x200002e3
 800013c:	200002e0 	.word	0x200002e0

08000140 <Ap_ST32BL_SendByte>:
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_ST32BL_SendByte( u8 ByteData )
{
 8000140:	b508      	push	{r3, lr}
	Hw_Uart_Putch( Ap_ST32BL_UartPort, ByteData );
 8000142:	f240 22e0 	movw	r2, #736	; 0x2e0
 8000146:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800014a:	f640 034d 	movw	r3, #2125	; 0x84d
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_ST32BL_SendByte( u8 ByteData )
{
 800014e:	4601      	mov	r1, r0
	Hw_Uart_Putch( Ap_ST32BL_UartPort, ByteData );
 8000150:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000154:	7810      	ldrb	r0, [r2, #0]
 8000156:	4798      	blx	r3
 8000158:	bd08      	pop	{r3, pc}
 800015a:	bf00      	nop

0800015c <Ap_ST32BL_ReceiveByte>:
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u8 Ap_ST32BL_ReceiveByte( void )
{
 800015c:	b508      	push	{r3, lr}
	Hw_Uart_Getch( Ap_ST32BL_UartPort );
 800015e:	f240 22e0 	movw	r2, #736	; 0x2e0
 8000162:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000166:	f640 030d 	movw	r3, #2061	; 0x80d
 800016a:	7810      	ldrb	r0, [r2, #0]
 800016c:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000170:	4798      	blx	r3
}
 8000172:	bd08      	pop	{r3, pc}

08000174 <Ap_ST32BL_WaitCmd>:
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u8 Ap_ST32BL_WaitCmd( void )
{
 8000174:	b538      	push	{r3, r4, r5, lr}
	u8 Ch;
	u8 Cmd = 0xFF;
	u8 CmdC;

	Cmd = Ap_ST32BL_ReceiveByte();
 8000176:	4d13      	ldr	r5, [pc, #76]	; (80001c4 <Ap_ST32BL_WaitCmd+0x50>)
 8000178:	47a8      	blx	r5

	switch( Cmd )
 800017a:	2831      	cmp	r0, #49	; 0x31
{
	u8 Ch;
	u8 Cmd = 0xFF;
	u8 CmdC;

	Cmd = Ap_ST32BL_ReceiveByte();
 800017c:	4604      	mov	r4, r0

	switch( Cmd )
 800017e:	d007      	beq.n	8000190 <Ap_ST32BL_WaitCmd+0x1c>
 8000180:	d90c      	bls.n	800019c <Ap_ST32BL_WaitCmd+0x28>
 8000182:	2873      	cmp	r0, #115	; 0x73
 8000184:	d004      	beq.n	8000190 <Ap_ST32BL_WaitCmd+0x1c>
 8000186:	d911      	bls.n	80001ac <Ap_ST32BL_WaitCmd+0x38>
 8000188:	287f      	cmp	r0, #127	; 0x7f
 800018a:	d002      	beq.n	8000192 <Ap_ST32BL_WaitCmd+0x1e>
 800018c:	28ff      	cmp	r0, #255	; 0xff
 800018e:	d111      	bne.n	80001b4 <Ap_ST32BL_WaitCmd+0x40>
		case STM32_CMD_WRITE_FLASH:
		case STM32_CMD_WRITE_UNPROTECT:
		case STM32_CMD_READ_FLASH:
		case STM32_CMD_GO:
		case 0xFF:
			CmdC = Ap_ST32BL_ReceiveByte();
 8000190:	47a8      	blx	r5

			Ap_ST32BL_SendByte(STM32_COMM_ACK);				
 8000192:	2079      	movs	r0, #121	; 0x79
 8000194:	4b0c      	ldr	r3, [pc, #48]	; (80001c8 <Ap_ST32BL_WaitCmd+0x54>)
 8000196:	4798      	blx	r3
			break;
	}


	return Cmd;
}
 8000198:	4620      	mov	r0, r4
 800019a:	bd38      	pop	{r3, r4, r5, pc}
	u8 Cmd = 0xFF;
	u8 CmdC;

	Cmd = Ap_ST32BL_ReceiveByte();

	switch( Cmd )
 800019c:	2802      	cmp	r0, #2
 800019e:	d0f7      	beq.n	8000190 <Ap_ST32BL_WaitCmd+0x1c>
 80001a0:	d90d      	bls.n	80001be <Ap_ST32BL_WaitCmd+0x4a>
 80001a2:	2811      	cmp	r0, #17
 80001a4:	d0f4      	beq.n	8000190 <Ap_ST32BL_WaitCmd+0x1c>
 80001a6:	2821      	cmp	r0, #33	; 0x21
 80001a8:	d104      	bne.n	80001b4 <Ap_ST32BL_WaitCmd+0x40>
 80001aa:	e7f1      	b.n	8000190 <Ap_ST32BL_WaitCmd+0x1c>
 80001ac:	f1a0 0343 	sub.w	r3, r0, #67	; 0x43
 80001b0:	2b01      	cmp	r3, #1
 80001b2:	d9ed      	bls.n	8000190 <Ap_ST32BL_WaitCmd+0x1c>

			Ap_ST32BL_SendByte(STM32_COMM_ACK);				
			break;

		default:
			Ap_ST32BL_SendByte(STM32_COMM_NACK);
 80001b4:	201f      	movs	r0, #31
 80001b6:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <Ap_ST32BL_WaitCmd+0x54>)
 80001b8:	4798      	blx	r3
			break;
	}


	return Cmd;
}
 80001ba:	4620      	mov	r0, r4
 80001bc:	bd38      	pop	{r3, r4, r5, pc}
	u8 Cmd = 0xFF;
	u8 CmdC;

	Cmd = Ap_ST32BL_ReceiveByte();

	switch( Cmd )
 80001be:	2800      	cmp	r0, #0
 80001c0:	d0e6      	beq.n	8000190 <Ap_ST32BL_WaitCmd+0x1c>
 80001c2:	e7f7      	b.n	80001b4 <Ap_ST32BL_WaitCmd+0x40>
 80001c4:	0800015d 	.word	0x0800015d
 80001c8:	08000141 	.word	0x08000141

080001cc <Ap_ST32BL_EraseFlash>:
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u8 Ap_ST32BL_EraseFlash( void )
{
 80001cc:	b500      	push	{lr}
	u32 i;

	
	volatile FLASH_Status FLASHStatus;

	FLASHStatus = FLASH_COMPLETE;
 80001ce:	2304      	movs	r3, #4
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u8 Ap_ST32BL_EraseFlash( void )
{
 80001d0:	b083      	sub	sp, #12
	u32 i;

	
	volatile FLASH_Status FLASHStatus;

	FLASHStatus = FLASH_COMPLETE;
 80001d2:	f88d 3007 	strb.w	r3, [sp, #7]

	FLASH_Unlock();
 80001d6:	4b10      	ldr	r3, [pc, #64]	; (8000218 <Ap_ST32BL_EraseFlash+0x4c>)
 80001d8:	4798      	blx	r3
	FLASH_ClearFlag(FLASH_FLAG_BSY | FLASH_FLAG_EOP | FLASH_FLAG_PGERR | FLASH_FLAG_WRPRTERR);
 80001da:	4b10      	ldr	r3, [pc, #64]	; (800021c <Ap_ST32BL_EraseFlash+0x50>)
 80001dc:	2035      	movs	r0, #53	; 0x35
 80001de:	4798      	blx	r3
 80001e0:	4b0f      	ldr	r3, [pc, #60]	; (8000220 <Ap_ST32BL_EraseFlash+0x54>)


	for( i=0; i<128; i++ )
	{
		Ap_ST32BL_EraseSectorFlag[i] = FALSE;
 80001e2:	2100      	movs	r1, #0
     TITLE   : Ap_ST32BL_EraseFlash
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u8 Ap_ST32BL_EraseFlash( void )
 80001e4:	f103 0280 	add.w	r2, r3, #128	; 0x80
	FLASH_ClearFlag(FLASH_FLAG_BSY | FLASH_FLAG_EOP | FLASH_FLAG_PGERR | FLASH_FLAG_WRPRTERR);


	for( i=0; i<128; i++ )
	{
		Ap_ST32BL_EraseSectorFlag[i] = FALSE;
 80001e8:	f803 1f01 	strb.w	r1, [r3, #1]!

	FLASH_Unlock();
	FLASH_ClearFlag(FLASH_FLAG_BSY | FLASH_FLAG_EOP | FLASH_FLAG_PGERR | FLASH_FLAG_WRPRTERR);


	for( i=0; i<128; i++ )
 80001ec:	4293      	cmp	r3, r2
 80001ee:	d1fb      	bne.n	80001e8 <Ap_ST32BL_EraseFlash+0x1c>
	}

	PageCount = 0;


	FLASHStatus = FLASH_ErasePage(HW_ST32BL_FLASH_START_ADDRESS);
 80001f0:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 80001f4:	4b0b      	ldr	r3, [pc, #44]	; (8000224 <Ap_ST32BL_EraseFlash+0x58>)
 80001f6:	f6c0 0000 	movt	r0, #2048	; 0x800
 80001fa:	4798      	blx	r3
 80001fc:	f88d 0007 	strb.w	r0, [sp, #7]

	Ap_ST32BL_EraseSectorFlag[PageCount] = TRUE;

	if( FLASHStatus != FLASH_COMPLETE )
 8000200:	f89d 3007 	ldrb.w	r3, [sp, #7]
	PageCount = 0;


	FLASHStatus = FLASH_ErasePage(HW_ST32BL_FLASH_START_ADDRESS);

	Ap_ST32BL_EraseSectorFlag[PageCount] = TRUE;
 8000204:	4a08      	ldr	r2, [pc, #32]	; (8000228 <Ap_ST32BL_EraseFlash+0x5c>)
 8000206:	2001      	movs	r0, #1

	if( FLASHStatus != FLASH_COMPLETE )
 8000208:	2b04      	cmp	r3, #4
	PageCount = 0;


	FLASHStatus = FLASH_ErasePage(HW_ST32BL_FLASH_START_ADDRESS);

	Ap_ST32BL_EraseSectorFlag[PageCount] = TRUE;
 800020a:	7010      	strb	r0, [r2, #0]

	if( FLASHStatus != FLASH_COMPLETE )
 800020c:	d002      	beq.n	8000214 <Ap_ST32BL_EraseFlash+0x48>
	{
		FLASH_Lock();
 800020e:	4b07      	ldr	r3, [pc, #28]	; (800022c <Ap_ST32BL_EraseFlash+0x60>)
 8000210:	4798      	blx	r3
		Ret = FALSE;
 8000212:	2000      	movs	r0, #0
	}

	return Ret;
}
 8000214:	b003      	add	sp, #12
 8000216:	bd00      	pop	{pc}
 8000218:	08002665 	.word	0x08002665
 800021c:	08002699 	.word	0x08002699
 8000220:	200002e3 	.word	0x200002e3
 8000224:	0800277d 	.word	0x0800277d
 8000228:	200002e4 	.word	0x200002e4
 800022c:	08002685 	.word	0x08002685

08000230 <Ap_ST32BL_CheckFlashSector>:
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u8 Ap_ST32BL_CheckFlashSector( u32 Address )
{
 8000230:	b570      	push	{r4, r5, r6, lr}
	volatile FLASH_Status FLASHStatus;

	FLASHStatus = FLASH_COMPLETE;


	if( Address < HW_ST32BL_FLASH_START_ADDRESS	) return FALSE;
 8000232:	f642 73ff 	movw	r3, #12287	; 0x2fff
 8000236:	f6c0 0300 	movt	r3, #2048	; 0x800
	u8  Ret = TRUE;
	u32 PageCount;

	volatile FLASH_Status FLASHStatus;

	FLASHStatus = FLASH_COMPLETE;
 800023a:	2204      	movs	r2, #4
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u8 Ap_ST32BL_CheckFlashSector( u32 Address )
{
 800023c:	b082      	sub	sp, #8
	volatile FLASH_Status FLASHStatus;

	FLASHStatus = FLASH_COMPLETE;


	if( Address < HW_ST32BL_FLASH_START_ADDRESS	) return FALSE;
 800023e:	4298      	cmp	r0, r3
	u8  Ret = TRUE;
	u32 PageCount;

	volatile FLASH_Status FLASHStatus;

	FLASHStatus = FLASH_COMPLETE;
 8000240:	f88d 2007 	strb.w	r2, [sp, #7]


	if( Address < HW_ST32BL_FLASH_START_ADDRESS	) return FALSE;
 8000244:	d90a      	bls.n	800025c <Ap_ST32BL_CheckFlashSector+0x2c>


	PageCount = (Address - HW_ST32BL_FLASH_START_ADDRESS) / HW_ST32BL_FLASH_PAGE_SIZE;
 8000246:	f100 4478 	add.w	r4, r0, #4160749568	; 0xf8000000
 800024a:	f5a4 5440 	sub.w	r4, r4, #12288	; 0x3000


	if( Ap_ST32BL_EraseSectorFlag[PageCount] == FALSE )
 800024e:	4d0d      	ldr	r5, [pc, #52]	; (8000284 <Ap_ST32BL_CheckFlashSector+0x54>)


	if( Address < HW_ST32BL_FLASH_START_ADDRESS	) return FALSE;


	PageCount = (Address - HW_ST32BL_FLASH_START_ADDRESS) / HW_ST32BL_FLASH_PAGE_SIZE;
 8000250:	0aa4      	lsrs	r4, r4, #10


	if( Ap_ST32BL_EraseSectorFlag[PageCount] == FALSE )
 8000252:	5d2e      	ldrb	r6, [r5, r4]
 8000254:	b126      	cbz	r6, 8000260 <Ap_ST32BL_CheckFlashSector+0x30>
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u8 Ap_ST32BL_CheckFlashSector( u32 Address )
{
	u8  Ret = TRUE;
 8000256:	2001      	movs	r0, #1
		}
	}


	return Ret;
}
 8000258:	b002      	add	sp, #8
 800025a:	bd70      	pop	{r4, r5, r6, pc}
	volatile FLASH_Status FLASHStatus;

	FLASHStatus = FLASH_COMPLETE;


	if( Address < HW_ST32BL_FLASH_START_ADDRESS	) return FALSE;
 800025c:	2000      	movs	r0, #0
 800025e:	e7fb      	b.n	8000258 <Ap_ST32BL_CheckFlashSector+0x28>
	PageCount = (Address - HW_ST32BL_FLASH_START_ADDRESS) / HW_ST32BL_FLASH_PAGE_SIZE;


	if( Ap_ST32BL_EraseSectorFlag[PageCount] == FALSE )
	{
		FLASHStatus = FLASH_ErasePage(HW_ST32BL_FLASH_START_ADDRESS + (HW_ST32BL_FLASH_PAGE_SIZE * PageCount));
 8000260:	f504 3000 	add.w	r0, r4, #131072	; 0x20000
 8000264:	300c      	adds	r0, #12
 8000266:	0280      	lsls	r0, r0, #10
 8000268:	4b07      	ldr	r3, [pc, #28]	; (8000288 <Ap_ST32BL_CheckFlashSector+0x58>)
 800026a:	4798      	blx	r3
 800026c:	f88d 0007 	strb.w	r0, [sp, #7]

		Ap_ST32BL_EraseSectorFlag[PageCount] = TRUE;

		if( FLASHStatus != FLASH_COMPLETE )
 8000270:	f89d 3007 	ldrb.w	r3, [sp, #7]

	if( Ap_ST32BL_EraseSectorFlag[PageCount] == FALSE )
	{
		FLASHStatus = FLASH_ErasePage(HW_ST32BL_FLASH_START_ADDRESS + (HW_ST32BL_FLASH_PAGE_SIZE * PageCount));

		Ap_ST32BL_EraseSectorFlag[PageCount] = TRUE;
 8000274:	2201      	movs	r2, #1

		if( FLASHStatus != FLASH_COMPLETE )
 8000276:	2b04      	cmp	r3, #4

	if( Ap_ST32BL_EraseSectorFlag[PageCount] == FALSE )
	{
		FLASHStatus = FLASH_ErasePage(HW_ST32BL_FLASH_START_ADDRESS + (HW_ST32BL_FLASH_PAGE_SIZE * PageCount));

		Ap_ST32BL_EraseSectorFlag[PageCount] = TRUE;
 8000278:	552a      	strb	r2, [r5, r4]

		if( FLASHStatus != FLASH_COMPLETE )
 800027a:	d0ec      	beq.n	8000256 <Ap_ST32BL_CheckFlashSector+0x26>
		{
			FLASH_Lock();
 800027c:	4b03      	ldr	r3, [pc, #12]	; (800028c <Ap_ST32BL_CheckFlashSector+0x5c>)
 800027e:	4798      	blx	r3
			Ret = FALSE;
 8000280:	4630      	mov	r0, r6
 8000282:	e7e9      	b.n	8000258 <Ap_ST32BL_CheckFlashSector+0x28>
 8000284:	200002e4 	.word	0x200002e4
 8000288:	0800277d 	.word	0x0800277d
 800028c:	08002685 	.word	0x08002685

08000290 <Ap_ST32BL_WriteFlash>:
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u8 Ap_ST32BL_WriteFlash( u32 Address, u8 *pData, u32 DataSize )
{
 8000290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u32 DataIndex;
	u8	Ret = TRUE;
	volatile FLASH_Status FLASHStatus;


	WriteSize = DataSize / 4;	// 32Bit로 변경 
 8000294:	0896      	lsrs	r6, r2, #2

	if( (WriteSize%4) > 0 ) WriteSize++;
 8000296:	07b3      	lsls	r3, r6, #30
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u8 Ap_ST32BL_WriteFlash( u32 Address, u8 *pData, u32 DataSize )
{
 8000298:	b082      	sub	sp, #8
	if( (WriteSize%4) > 0 ) WriteSize++;


	//-- 섹터가 지워졌는지 검사
	//
	if( Ap_ST32BL_CheckFlashSector(Address) == FALSE )
 800029a:	4b15      	ldr	r3, [pc, #84]	; (80002f0 <Ap_ST32BL_WriteFlash+0x60>)
	volatile FLASH_Status FLASHStatus;


	WriteSize = DataSize / 4;	// 32Bit로 변경 

	if( (WriteSize%4) > 0 ) WriteSize++;
 800029c:	bf18      	it	ne
 800029e:	3601      	addne	r6, #1
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u8 Ap_ST32BL_WriteFlash( u32 Address, u8 *pData, u32 DataSize )
{
 80002a0:	4607      	mov	r7, r0
 80002a2:	460c      	mov	r4, r1
	if( (WriteSize%4) > 0 ) WriteSize++;


	//-- 섹터가 지워졌는지 검사
	//
	if( Ap_ST32BL_CheckFlashSector(Address) == FALSE )
 80002a4:	4798      	blx	r3
 80002a6:	b1e0      	cbz	r0, 80002e2 <Ap_ST32BL_WriteFlash+0x52>
	}


	DataIndex = 0;

	for( i=0; i<WriteSize; i++ )
 80002a8:	b1fe      	cbz	r6, 80002ea <Ap_ST32BL_WriteFlash+0x5a>
 80002aa:	f8df 8048 	ldr.w	r8, [pc, #72]	; 80002f4 <Ap_ST32BL_WriteFlash+0x64>
 80002ae:	2500      	movs	r5, #0
 80002b0:	1b3f      	subs	r7, r7, r4
 80002b2:	e001      	b.n	80002b8 <Ap_ST32BL_WriteFlash+0x28>
 80002b4:	42b5      	cmp	r5, r6
 80002b6:	d018      	beq.n	80002ea <Ap_ST32BL_WriteFlash+0x5a>
	{
		WriteData  = pData[ DataIndex++ ] << 0;
		WriteData |= pData[ DataIndex++ ] << 8;
 80002b8:	7863      	ldrb	r3, [r4, #1]
		WriteData |= pData[ DataIndex++ ] << 16;
 80002ba:	78a0      	ldrb	r0, [r4, #2]

	DataIndex = 0;

	for( i=0; i<WriteSize; i++ )
	{
		WriteData  = pData[ DataIndex++ ] << 0;
 80002bc:	7822      	ldrb	r2, [r4, #0]
		WriteData |= pData[ DataIndex++ ] << 8;
		WriteData |= pData[ DataIndex++ ] << 16;
		WriteData |= pData[ DataIndex++ ] << 24;
 80002be:	78e1      	ldrb	r1, [r4, #3]
	DataIndex = 0;

	for( i=0; i<WriteSize; i++ )
	{
		WriteData  = pData[ DataIndex++ ] << 0;
		WriteData |= pData[ DataIndex++ ] << 8;
 80002c0:	021b      	lsls	r3, r3, #8
 80002c2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
		WriteData |= pData[ DataIndex++ ] << 16;
 80002c6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
		WriteData |= pData[ DataIndex++ ] << 24;

		FLASHStatus = FLASH_ProgramWord(StartAddress+i*4, WriteData);
 80002ca:	1938      	adds	r0, r7, r4
 80002cc:	4319      	orrs	r1, r3
 80002ce:	47c0      	blx	r8
 80002d0:	f88d 0007 	strb.w	r0, [sp, #7]

		if( FLASHStatus != FLASH_COMPLETE )
 80002d4:	f89d 3007 	ldrb.w	r3, [sp, #7]
	}


	DataIndex = 0;

	for( i=0; i<WriteSize; i++ )
 80002d8:	3501      	adds	r5, #1
		WriteData |= pData[ DataIndex++ ] << 16;
		WriteData |= pData[ DataIndex++ ] << 24;

		FLASHStatus = FLASH_ProgramWord(StartAddress+i*4, WriteData);

		if( FLASHStatus != FLASH_COMPLETE )
 80002da:	2b04      	cmp	r3, #4
 80002dc:	f104 0404 	add.w	r4, r4, #4
 80002e0:	d0e8      	beq.n	80002b4 <Ap_ST32BL_WriteFlash+0x24>

	//-- 섹터가 지워졌는지 검사
	//
	if( Ap_ST32BL_CheckFlashSector(Address) == FALSE )
	{
		return FALSE;
 80002e2:	2000      	movs	r0, #0
			break;
		}
	}

	return Ret;
}
 80002e4:	b002      	add	sp, #8
 80002e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	u32 StartAddress = Address;
	u32 WriteSize;
	u32 WriteData;
	u32 i;
	u32 DataIndex;
	u8	Ret = TRUE;
 80002ea:	2001      	movs	r0, #1
 80002ec:	e7fa      	b.n	80002e4 <Ap_ST32BL_WriteFlash+0x54>
 80002ee:	bf00      	nop
 80002f0:	08000231 	.word	0x08000231
 80002f4:	0800272d 	.word	0x0800272d

080002f8 <Ap_ST32BL_JumpToApp>:
	u32 	  JumpAddress;

	//JumpToAddress = (pFunction)(HW_ST32BL_FLASH_START_ADDRESS + 4);


	JumpAddress =  *(u32 *)(HW_ST32BL_FLASH_START_ADDRESS + 4);
 80002f8:	f243 0204 	movw	r2, #12292	; 0x3004
	

	JumpToApp = (pFunction) JumpAddress;


	Hw_Uart_DeInit();
 80002fc:	f240 6319 	movw	r3, #1561	; 0x619
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_ST32BL_JumpToApp( u32 Address )
{
 8000300:	b510      	push	{r4, lr}
	u32 	  JumpAddress;

	//JumpToAddress = (pFunction)(HW_ST32BL_FLASH_START_ADDRESS + 4);


	JumpAddress =  *(u32 *)(HW_ST32BL_FLASH_START_ADDRESS + 4);
 8000302:	f6c0 0200 	movt	r2, #2048	; 0x800
	

	JumpToApp = (pFunction) JumpAddress;


	Hw_Uart_DeInit();
 8000306:	f6c0 0300 	movt	r3, #2048	; 0x800


	JumpAddress =  *(u32 *)(HW_ST32BL_FLASH_START_ADDRESS + 4);
	

	JumpToApp = (pFunction) JumpAddress;
 800030a:	6814      	ldr	r4, [r2, #0]


	Hw_Uart_DeInit();
 800030c:	4798      	blx	r3
	Hw_Timer_DeInit();
 800030e:	f640 1355 	movw	r3, #2389	; 0x955
 8000312:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000316:	4798      	blx	r3

	//Disable_ISR();

	JumpToApp();
 8000318:	47a0      	blx	r4
 800031a:	bd10      	pop	{r4, pc}

0800031c <Ap_ST32BL_Main>:
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_ST32BL_Main( void )
{
 800031c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000320:	f8df 9134 	ldr.w	r9, [pc, #308]	; 8000458 <Ap_ST32BL_Main+0x13c>
 8000324:	b0cf      	sub	sp, #316	; 0x13c
 8000326:	4f4a      	ldr	r7, [pc, #296]	; (8000450 <Ap_ST32BL_Main+0x134>)
 8000328:	4d4a      	ldr	r5, [pc, #296]	; (8000454 <Ap_ST32BL_Main+0x138>)
 800032a:	ac03      	add	r4, sp, #12
 800032c:	f10d 080f 	add.w	r8, sp, #15
	while(1)
	{
		//Hw_Uart_Printf(HW_UART_VCOM, "ST32BL\n");
		//Hw_Timer_Delay_ms(500);

		Cmd = Ap_ST32BL_WaitCmd();
 8000330:	47c8      	blx	r9
		{

		}


		if( Cmd == STM32_CMD_GET_COMMAND )
 8000332:	2800      	cmp	r0, #0
 8000334:	d047      	beq.n	80003c6 <Ap_ST32BL_Main+0xaa>
			Ap_ST32BL_SendByte(0x22);
			Ap_ST32BL_SendByte(STM32_COMM_ACK);
		}


		if( Cmd == STM32_CMD_GET_ID )
 8000336:	2802      	cmp	r0, #2
 8000338:	d07d      	beq.n	8000436 <Ap_ST32BL_Main+0x11a>
			Ap_ST32BL_SendByte(0x10);
			Ap_ST32BL_SendByte(STM32_COMM_ACK);			
		}


		if( Cmd == STM32_CMD_ERASE_FLASH )
 800033a:	2843      	cmp	r0, #67	; 0x43
 800033c:	d049      	beq.n	80003d2 <Ap_ST32BL_Main+0xb6>
		}




		if( Cmd == STM32_CMD_WRITE_FLASH )
 800033e:	2831      	cmp	r0, #49	; 0x31
 8000340:	d155      	bne.n	80003ee <Ap_ST32BL_Main+0xd2>
     TITLE   : Ap_ST32BL_Main
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_ST32BL_Main( void )
 8000342:	f10d 060b 	add.w	r6, sp, #11
 8000346:	f04f 0a00 	mov.w	sl, #0
			//-- Receive Address 
			//
			CheckSumCalc = 0;
			for( i=0; i<4; i++ )
			{
				Resp[i] = Ap_ST32BL_ReceiveByte();
 800034a:	47a8      	blx	r5
 800034c:	f806 0f01 	strb.w	r0, [r6, #1]!
		{

			//-- Receive Address 
			//
			CheckSumCalc = 0;
			for( i=0; i<4; i++ )
 8000350:	4546      	cmp	r6, r8
			{
				Resp[i] = Ap_ST32BL_ReceiveByte();
				CheckSumCalc ^= Resp[i];	
 8000352:	ea8a 0a00 	eor.w	sl, sl, r0
		{

			//-- Receive Address 
			//
			CheckSumCalc = 0;
			for( i=0; i<4; i++ )
 8000356:	d1f8      	bne.n	800034a <Ap_ST32BL_Main+0x2e>
			{
				Resp[i] = Ap_ST32BL_ReceiveByte();
				CheckSumCalc ^= Resp[i];	
			}
			CheckSum = Ap_ST32BL_ReceiveByte();
 8000358:	4b3e      	ldr	r3, [pc, #248]	; (8000454 <Ap_ST32BL_Main+0x138>)
 800035a:	4798      	blx	r3

			Address  = Resp[0] << 24;
 800035c:	7823      	ldrb	r3, [r4, #0]
			Address |= Resp[1] << 16;
 800035e:	7862      	ldrb	r2, [r4, #1]
				Resp[i] = Ap_ST32BL_ReceiveByte();
				CheckSumCalc ^= Resp[i];	
			}
			CheckSum = Ap_ST32BL_ReceiveByte();

			Address  = Resp[0] << 24;
 8000360:	061b      	lsls	r3, r3, #24
			Address |= Resp[1] << 16;
			Address |= Resp[2] <<  8;
 8000362:	f894 b002 	ldrb.w	fp, [r4, #2]
				CheckSumCalc ^= Resp[i];	
			}
			CheckSum = Ap_ST32BL_ReceiveByte();

			Address  = Resp[0] << 24;
			Address |= Resp[1] << 16;
 8000366:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
			Address |= Resp[2] <<  8;
			Address |= Resp[3] <<  0;
 800036a:	78e3      	ldrb	r3, [r4, #3]
			}
			CheckSum = Ap_ST32BL_ReceiveByte();

			Address  = Resp[0] << 24;
			Address |= Resp[1] << 16;
			Address |= Resp[2] <<  8;
 800036c:	ea42 2b0b 	orr.w	fp, r2, fp, lsl #8
			Address |= Resp[3] <<  0;
 8000370:	ea4b 0303 	orr.w	r3, fp, r3

			#if HW_ST32BL_USE_DEBUG == 1
			Hw_Uart_Printf(HW_UART_COM1, "Addrr %x %x %x %x %x %x\r\n", Resp[0], Resp[1], Resp[2], Resp[3], CheckSum, CheckSumCalc );
			#endif		

			if( CheckSum == CheckSumCalc )
 8000374:	4582      	cmp	sl, r0
			CheckSum = Ap_ST32BL_ReceiveByte();

			Address  = Resp[0] << 24;
			Address |= Resp[1] << 16;
			Address |= Resp[2] <<  8;
			Address |= Resp[3] <<  0;
 8000376:	9301      	str	r3, [sp, #4]

			#if HW_ST32BL_USE_DEBUG == 1
			Hw_Uart_Printf(HW_UART_COM1, "Addrr %x %x %x %x %x %x\r\n", Resp[0], Resp[1], Resp[2], Resp[3], CheckSum, CheckSumCalc );
			#endif		

			if( CheckSum == CheckSumCalc )
 8000378:	d066      	beq.n	8000448 <Ap_ST32BL_Main+0x12c>
				Hw_Uart_Printf(HW_UART_COM1, "ACK\r\n");
				#endif	
			}
			else
			{
				Ap_ST32BL_SendByte(STM32_COMM_NACK);	
 800037a:	201f      	movs	r0, #31
 800037c:	47b8      	blx	r7


			//-- Receive Data
			//
			CheckSumCalc = 0;
			Length  = Ap_ST32BL_ReceiveByte();
 800037e:	47a8      	blx	r5

			#if HW_ST32BL_USE_DEBUG == 1
			Hw_Uart_Printf(HW_UART_COM1, "Length %d \r\n", Length );
			#endif	

			for( i=0; i<Length; i++ )
 8000380:	2600      	movs	r6, #0


			//-- Receive Data
			//
			CheckSumCalc = 0;
			Length  = Ap_ST32BL_ReceiveByte();
 8000382:	4683      	mov	fp, r0
			CheckSumCalc ^= Length;
			Length++;
 8000384:	f100 0a01 	add.w	sl, r0, #1
			Hw_Uart_Printf(HW_UART_COM1, "Length %d \r\n", Length );
			#endif	

			for( i=0; i<Length; i++ )
			{
				Resp[i] = Ap_ST32BL_ReceiveByte();
 8000388:	47a8      	blx	r5
 800038a:	55a0      	strb	r0, [r4, r6]

			#if HW_ST32BL_USE_DEBUG == 1
			Hw_Uart_Printf(HW_UART_COM1, "Length %d \r\n", Length );
			#endif	

			for( i=0; i<Length; i++ )
 800038c:	3601      	adds	r6, #1
			{
				Resp[i] = Ap_ST32BL_ReceiveByte();
				CheckSumCalc ^= Resp[i];					
 800038e:	ea8b 0b00 	eor.w	fp, fp, r0

			#if HW_ST32BL_USE_DEBUG == 1
			Hw_Uart_Printf(HW_UART_COM1, "Length %d \r\n", Length );
			#endif	

			for( i=0; i<Length; i++ )
 8000392:	45b2      	cmp	sl, r6
			{
				Resp[i] = Ap_ST32BL_ReceiveByte();
				CheckSumCalc ^= Resp[i];					
 8000394:	fa5f fb8b 	uxtb.w	fp, fp

			#if HW_ST32BL_USE_DEBUG == 1
			Hw_Uart_Printf(HW_UART_COM1, "Length %d \r\n", Length );
			#endif	

			for( i=0; i<Length; i++ )
 8000398:	d8f6      	bhi.n	8000388 <Ap_ST32BL_Main+0x6c>
			{
				Resp[i] = Ap_ST32BL_ReceiveByte();
				CheckSumCalc ^= Resp[i];					
			}
			CheckSum = Ap_ST32BL_ReceiveByte();
 800039a:	4a2e      	ldr	r2, [pc, #184]	; (8000454 <Ap_ST32BL_Main+0x138>)
 800039c:	4790      	blx	r2


			//-- Flash Write
			//

			Ret = Ap_ST32BL_WriteFlash( Address + HW_ST32BL_FLASH_ADDRESS_OFFSET, Resp, Length );
 800039e:	9b01      	ldr	r3, [sp, #4]
			for( i=0; i<Length; i++ )
			{
				Resp[i] = Ap_ST32BL_ReceiveByte();
				CheckSumCalc ^= Resp[i];					
			}
			CheckSum = Ap_ST32BL_ReceiveByte();
 80003a0:	4606      	mov	r6, r0


			//-- Flash Write
			//

			Ret = Ap_ST32BL_WriteFlash( Address + HW_ST32BL_FLASH_ADDRESS_OFFSET, Resp, Length );
 80003a2:	f503 5040 	add.w	r0, r3, #12288	; 0x3000
 80003a6:	f240 2391 	movw	r3, #657	; 0x291
 80003aa:	4621      	mov	r1, r4
 80003ac:	4652      	mov	r2, sl
 80003ae:	f6c0 0300 	movt	r3, #2048	; 0x800
 80003b2:	4798      	blx	r3

		
			if( CheckSum == CheckSumCalc && Ret == TRUE ) 	
 80003b4:	2801      	cmp	r0, #1
 80003b6:	bf08      	it	eq
 80003b8:	45b3      	cmpeq	fp, r6
 80003ba:	d115      	bne.n	80003e8 <Ap_ST32BL_Main+0xcc>
		{
			Resp[0] = Ap_ST32BL_ReceiveByte();
			Resp[1] = Ap_ST32BL_ReceiveByte();


			if( Ap_ST32BL_EraseFlash() == TRUE )	Ap_ST32BL_SendByte(STM32_COMM_ACK);
 80003bc:	2079      	movs	r0, #121	; 0x79
 80003be:	47b8      	blx	r7
	while(1)
	{
		//Hw_Uart_Printf(HW_UART_VCOM, "ST32BL\n");
		//Hw_Timer_Delay_ms(500);

		Cmd = Ap_ST32BL_WaitCmd();
 80003c0:	47c8      	blx	r9
		{

		}


		if( Cmd == STM32_CMD_GET_COMMAND )
 80003c2:	2800      	cmp	r0, #0
 80003c4:	d1b7      	bne.n	8000336 <Ap_ST32BL_Main+0x1a>
		{
			Ap_ST32BL_SendByte(0x00);
 80003c6:	47b8      	blx	r7
			Ap_ST32BL_SendByte(0x22);
 80003c8:	2022      	movs	r0, #34	; 0x22
 80003ca:	47b8      	blx	r7
			Ap_ST32BL_SendByte(STM32_COMM_ACK);
 80003cc:	2079      	movs	r0, #121	; 0x79
 80003ce:	47b8      	blx	r7
 80003d0:	e7ae      	b.n	8000330 <Ap_ST32BL_Main+0x14>
		}


		if( Cmd == STM32_CMD_ERASE_FLASH )
		{
			Resp[0] = Ap_ST32BL_ReceiveByte();
 80003d2:	47a8      	blx	r5
 80003d4:	7020      	strb	r0, [r4, #0]
			Resp[1] = Ap_ST32BL_ReceiveByte();
 80003d6:	47a8      	blx	r5


			if( Ap_ST32BL_EraseFlash() == TRUE )	Ap_ST32BL_SendByte(STM32_COMM_ACK);
 80003d8:	f240 13cd 	movw	r3, #461	; 0x1cd
 80003dc:	f6c0 0300 	movt	r3, #2048	; 0x800


		if( Cmd == STM32_CMD_ERASE_FLASH )
		{
			Resp[0] = Ap_ST32BL_ReceiveByte();
			Resp[1] = Ap_ST32BL_ReceiveByte();
 80003e0:	7060      	strb	r0, [r4, #1]


			if( Ap_ST32BL_EraseFlash() == TRUE )	Ap_ST32BL_SendByte(STM32_COMM_ACK);
 80003e2:	4798      	blx	r3
 80003e4:	2801      	cmp	r0, #1
 80003e6:	d0e9      	beq.n	80003bc <Ap_ST32BL_Main+0xa0>
			else									Ap_ST32BL_SendByte(STM32_COMM_NACK);
 80003e8:	201f      	movs	r0, #31
 80003ea:	47b8      	blx	r7
 80003ec:	e7a0      	b.n	8000330 <Ap_ST32BL_Main+0x14>
		}
		

		//-- Go Command
		//
		if( Cmd == STM32_CMD_GO )
 80003ee:	2821      	cmp	r0, #33	; 0x21
 80003f0:	d19e      	bne.n	8000330 <Ap_ST32BL_Main+0x14>
     TITLE   : Ap_ST32BL_Main
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_ST32BL_Main( void )
 80003f2:	f10d 060b 	add.w	r6, sp, #11
			//-- Receive Address 
			//
			CheckSumCalc = 0;
			for( i=0; i<4; i++ )
			{
				Resp[i] = Ap_ST32BL_ReceiveByte();
 80003f6:	47a8      	blx	r5
 80003f8:	f806 0f01 	strb.w	r0, [r6, #1]!
		if( Cmd == STM32_CMD_GO )
		{
			//-- Receive Address 
			//
			CheckSumCalc = 0;
			for( i=0; i<4; i++ )
 80003fc:	4546      	cmp	r6, r8
 80003fe:	d1fa      	bne.n	80003f6 <Ap_ST32BL_Main+0xda>
			{
				Resp[i] = Ap_ST32BL_ReceiveByte();
				CheckSumCalc ^= Resp[i];	
			}
			CheckSum = Ap_ST32BL_ReceiveByte();
 8000400:	4b14      	ldr	r3, [pc, #80]	; (8000454 <Ap_ST32BL_Main+0x138>)
 8000402:	4798      	blx	r3

			Address  = Resp[0] << 24;
 8000404:	7823      	ldrb	r3, [r4, #0]
			Address |= Resp[1] << 16;
 8000406:	7862      	ldrb	r2, [r4, #1]
				Resp[i] = Ap_ST32BL_ReceiveByte();
				CheckSumCalc ^= Resp[i];	
			}
			CheckSum = Ap_ST32BL_ReceiveByte();

			Address  = Resp[0] << 24;
 8000408:	061b      	lsls	r3, r3, #24
			Address |= Resp[1] << 16;
			Address |= Resp[2] <<  8;
 800040a:	78a6      	ldrb	r6, [r4, #2]
				CheckSumCalc ^= Resp[i];	
			}
			CheckSum = Ap_ST32BL_ReceiveByte();

			Address  = Resp[0] << 24;
			Address |= Resp[1] << 16;
 800040c:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
			Address |= Resp[2] <<  8;
			Address |= Resp[3] <<  0;	
 8000410:	78e3      	ldrb	r3, [r4, #3]
			}
			CheckSum = Ap_ST32BL_ReceiveByte();

			Address  = Resp[0] << 24;
			Address |= Resp[1] << 16;
			Address |= Resp[2] <<  8;
 8000412:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
			Address |= Resp[3] <<  0;	
			

			Ap_ST32BL_SendByte(STM32_COMM_ACK);	
 8000416:	2079      	movs	r0, #121	; 0x79
			CheckSum = Ap_ST32BL_ReceiveByte();

			Address  = Resp[0] << 24;
			Address |= Resp[1] << 16;
			Address |= Resp[2] <<  8;
			Address |= Resp[3] <<  0;	
 8000418:	431e      	orrs	r6, r3
			

			Ap_ST32BL_SendByte(STM32_COMM_ACK);	
 800041a:	47b8      	blx	r7

			Hw_Timer_Delay_ms(100);
 800041c:	f640 2385 	movw	r3, #2693	; 0xa85
 8000420:	2064      	movs	r0, #100	; 0x64
 8000422:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000426:	4798      	blx	r3

			//-- Go
			//
			Ap_ST32BL_JumpToApp( Address );
 8000428:	f240 23f9 	movw	r3, #761	; 0x2f9
 800042c:	4630      	mov	r0, r6
 800042e:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000432:	4798      	blx	r3
 8000434:	e77c      	b.n	8000330 <Ap_ST32BL_Main+0x14>
		}


		if( Cmd == STM32_CMD_GET_ID )
		{
			Ap_ST32BL_SendByte(0x01);
 8000436:	2001      	movs	r0, #1
 8000438:	47b8      	blx	r7
			Ap_ST32BL_SendByte(0x04);
 800043a:	2004      	movs	r0, #4
 800043c:	47b8      	blx	r7
			Ap_ST32BL_SendByte(0x10);
 800043e:	2010      	movs	r0, #16
 8000440:	47b8      	blx	r7
			Ap_ST32BL_SendByte(STM32_COMM_ACK);			
 8000442:	2079      	movs	r0, #121	; 0x79
 8000444:	47b8      	blx	r7
 8000446:	e773      	b.n	8000330 <Ap_ST32BL_Main+0x14>
			Hw_Uart_Printf(HW_UART_COM1, "Addrr %x %x %x %x %x %x\r\n", Resp[0], Resp[1], Resp[2], Resp[3], CheckSum, CheckSumCalc );
			#endif		

			if( CheckSum == CheckSumCalc )
			{
				Ap_ST32BL_SendByte(STM32_COMM_ACK);
 8000448:	2079      	movs	r0, #121	; 0x79
 800044a:	47b8      	blx	r7
 800044c:	e797      	b.n	800037e <Ap_ST32BL_Main+0x62>
 800044e:	bf00      	nop
 8000450:	08000141 	.word	0x08000141
 8000454:	0800015d 	.word	0x0800015d
 8000458:	08000175 	.word	0x08000175

0800045c <Hw_StartUp_Init>:
     			보드 리셋시에 처음 실행되는 함수
     ARG     : 	void
     RET     : 	void
---------------------------------------------------------------------------*/
void Hw_StartUp_Init(void)
{
 800045c:	4668      	mov	r0, sp
 800045e:	f020 0107 	bic.w	r1, r0, #7
 8000462:	468d      	mov	sp, r1
 8000464:	b519      	push	{r0, r3, r4, lr}
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 8000466:	4923      	ldr	r1, [pc, #140]	; (80004f4 <zero_loop+0x66>)
 8000468:	4b23      	ldr	r3, [pc, #140]	; (80004f8 <zero_loop+0x6a>)
 800046a:	4299      	cmp	r1, r3
 800046c:	d20b      	bcs.n	8000486 <Hw_StartUp_Init+0x2a>
     WORK    :	 
     			보드 리셋시에 처음 실행되는 함수
     ARG     : 	void
     RET     : 	void
---------------------------------------------------------------------------*/
void Hw_StartUp_Init(void)
 800046e:	43c8      	mvns	r0, r1
 8000470:	18c0      	adds	r0, r0, r3
 8000472:	f020 0003 	bic.w	r0, r0, #3
 8000476:	4c21      	ldr	r4, [pc, #132]	; (80004fc <zero_loop+0x6e>)
 8000478:	3004      	adds	r0, #4
 800047a:	2300      	movs	r3, #0
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
	{
		*(pulDest++) = *(pulSrc++);
 800047c:	591a      	ldr	r2, [r3, r4]
 800047e:	505a      	str	r2, [r3, r1]
 8000480:	3304      	adds	r3, #4
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 8000482:	4283      	cmp	r3, r0
 8000484:	d1fa      	bne.n	800047c <Hw_StartUp_Init+0x20>
		*(pulDest++) = *(pulSrc++);
	}
  
	/* Zero fill the bss segment.  This is done with inline assembly since this
	   will clear the value of pulDest if it is not kept in a register. */
	__asm("  ldr     r0, =_sbss\n"
 8000486:	481f      	ldr	r0, [pc, #124]	; (8000504 <zero_loop+0x76>)
 8000488:	491f      	ldr	r1, [pc, #124]	; (8000508 <zero_loop+0x7a>)
 800048a:	f04f 0200 	mov.w	r2, #0

0800048e <zero_loop>:
 800048e:	4288      	cmp	r0, r1
 8000490:	bfb8      	it	lt
 8000492:	f840 2b04 	strlt.w	r2, [r0], #4
 8000496:	f6ff affa 	blt.w	800048e <zero_loop>
	
    // HSI or HSE 선택
            
    //-- CR_HSEON_Set
    //
	REG_RCC_CR |= (1<<16);	
 800049a:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 800049e:	f2c4 0402 	movt	r4, #16386	; 0x4002
 80004a2:	6822      	ldr	r2, [r4, #0]
     RET     : 	void
---------------------------------------------------------------------------*/
void Hw_StartUp_Init(void)
{
	
	u32 TimeOutCnt  = 0;
 80004a4:	2300      	movs	r3, #0
	
    // HSI or HSE 선택
            
    //-- CR_HSEON_Set
    //
	REG_RCC_CR |= (1<<16);	
 80004a6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80004aa:	6022      	str	r2, [r4, #0]
	//
	do
	{	
		HSEStatus = REG_RCC_CR & (1<<17);	// HSE 인경우
		TimeOutCnt++;		
	} while( (HSEStatus == 0) && (TimeOutCnt < 1280) );
 80004ac:	f240 40ff 	movw	r0, #1279	; 0x4ff
		
	//-- 설정된 clock 이 설정 되었는지 확인
	//
	do
	{	
		HSEStatus = REG_RCC_CR & (1<<17);	// HSE 인경우
 80004b0:	6821      	ldr	r1, [r4, #0]
		TimeOutCnt++;		
 80004b2:	3301      	adds	r3, #1
	} while( (HSEStatus == 0) && (TimeOutCnt < 1280) );
 80004b4:	4283      	cmp	r3, r0
 80004b6:	f481 3100 	eor.w	r1, r1, #131072	; 0x20000
 80004ba:	bf8c      	ite	hi
 80004bc:	2200      	movhi	r2, #0
 80004be:	2201      	movls	r2, #1
 80004c0:	ea12 4251 	ands.w	r2, r2, r1, lsr #17
 80004c4:	d1f4      	bne.n	80004b0 <zero_loop+0x22>
  

	//-- FLASH Access 타이밍 설정
	//
	REG_FLASH_ACR |=  (1<<4);	// Prefetch buffer enable
 80004c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004ca:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80004ce:	681a      	ldr	r2, [r3, #0]
 80004d0:	f042 0210 	orr.w	r2, r2, #16
 80004d4:	601a      	str	r2, [r3, #0]
	REG_FLASH_ACR &= ~(3<<0);	// LATENCY Clear
 80004d6:	681a      	ldr	r2, [r3, #0]
 80004d8:	f022 0203 	bic.w	r2, r2, #3
 80004dc:	601a      	str	r2, [r3, #0]
	REG_FLASH_ACR |=  (2<<0);	// LATENCY = two wait
 80004de:	681a      	ldr	r2, [r3, #0]
 80004e0:	f042 0202 	orr.w	r2, r2, #2
 80004e4:	601a      	str	r2, [r3, #0]


    main();
 80004e6:	4b06      	ldr	r3, [pc, #24]	; (8000500 <zero_loop+0x72>)
 80004e8:	4798      	blx	r3

}
 80004ea:	e8bd 4019 	ldmia.w	sp!, {r0, r3, r4, lr}
 80004ee:	4685      	mov	sp, r0
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop
 80004f4:	20000000 	.word	0x20000000
 80004f8:	200000e4 	.word	0x200000e4
 80004fc:	0800287c 	.word	0x0800287c
 8000500:	08000009 	.word	0x08000009
 8000504:	20000200 	.word	0x20000200
 8000508:	20001360 	.word	0x20001360

0800050c <Hw_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Init( void )
{
 800050c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	//-- PLL 설정
	//
	Hw_PLL_Init();
 800050e:	f640 038d 	movw	r3, #2189	; 0x88d
 8000512:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000516:	4798      	blx	r3
	
	
	//-- 인터럽트 관련 초기화
	//
	Hw_ISR_Init();
 8000518:	f640 1321 	movw	r3, #2337	; 0x921
 800051c:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000520:	4798      	blx	r3
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
 8000522:	f640 0604 	movw	r6, #2052	; 0x804
	Hw_ISR_Init();
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
 8000526:	f44f 6e00 	mov.w	lr, #2048	; 0x800
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
 800052a:	f243 47b3 	movw	r7, #13491	; 0x34b3
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
 800052e:	f44f 6540 	mov.w	r5, #3072	; 0xc00
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
 8000532:	f640 4404 	movw	r4, #3076	; 0xc04
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
 8000536:	f241 0104 	movw	r1, #4100	; 0x1004
 800053a:	f244 4044 	movw	r0, #17476	; 0x4444
	Hw_ISR_Init();
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
 800053e:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8000542:	f2c4 0e01 	movt	lr, #16385	; 0x4001
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
 8000546:	f2c4 0101 	movt	r1, #16385	; 0x4001
 800054a:	f2c3 3044 	movt	r0, #13124	; 0x3344
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
 800054e:	f2c4 0601 	movt	r6, #16385	; 0x4001
 8000552:	f2c3 3733 	movt	r7, #13107	; 0x3333
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
 8000556:	f2c4 0501 	movt	r5, #16385	; 0x4001
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
 800055a:	f2c4 0401 	movt	r4, #16385	; 0x4001
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
	
	//Hw_DMA_Init();
	Hw_Uart_Init();
 800055e:	f240 73cd 	movw	r3, #1997	; 0x7cd
	Hw_ISR_Init();
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
 8000562:	f8ce 2000 	str.w	r2, [lr]
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
	
	//Hw_DMA_Init();
	Hw_Uart_Init();
 8000566:	f6c0 0300 	movt	r3, #2048	; 0x800
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
 800056a:	6037      	str	r7, [r6, #0]
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
 800056c:	602a      	str	r2, [r5, #0]
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
 800056e:	6022      	str	r2, [r4, #0]
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
 8000570:	6008      	str	r0, [r1, #0]
	
	//Hw_DMA_Init();
	Hw_Uart_Init();
 8000572:	4798      	blx	r3
	Hw_Timer_Init();
 8000574:	f640 138d 	movw	r3, #2445	; 0x98d
 8000578:	f6c0 0300 	movt	r3, #2048	; 0x800
 800057c:	4798      	blx	r3
	Hw_VCom_Init();
 800057e:	f640 33ad 	movw	r3, #2989	; 0xbad
 8000582:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000586:	4798      	blx	r3
	Hw_Led_Init();	
 8000588:	f640 3395 	movw	r3, #2965	; 0xb95
 800058c:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000590:	4798      	blx	r3
 8000592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000594 <Hw_ISR_UART2_Handler>:


//-- UART2 ISR
//
void Hw_ISR_UART2_Handler(void)
{
 8000594:	b500      	push	{lr}
	u8 UartData;
				
	UartData = REG_USART2_DR;
 8000596:	f244 4304 	movw	r3, #17412	; 0x4404
 800059a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800059e:	681b      	ldr	r3, [r3, #0]


//-- UART2 ISR
//
void Hw_ISR_UART2_Handler(void)
{
 80005a0:	b083      	sub	sp, #12
	u8 UartData;
				
	UartData = REG_USART2_DR;
 80005a2:	a902      	add	r1, sp, #8
 80005a4:	f801 3d01 	strb.w	r3, [r1, #-1]!
	

	Hw_Uart_Q_Push( 1, &UartData );
 80005a8:	2001      	movs	r0, #1
 80005aa:	4b05      	ldr	r3, [pc, #20]	; (80005c0 <Hw_ISR_UART2_Handler+0x2c>)
 80005ac:	4798      	blx	r3

	if( Hw_Uart_Ch[HW_UART_COM2].ISR_FuncPtr != NULL )
 80005ae:	4b05      	ldr	r3, [pc, #20]	; (80005c4 <Hw_ISR_UART2_Handler+0x30>)
 80005b0:	695b      	ldr	r3, [r3, #20]
 80005b2:	b113      	cbz	r3, 80005ba <Hw_ISR_UART2_Handler+0x26>
	{
		(*Hw_Uart_Ch[HW_UART_COM2].ISR_FuncPtr)(UartData);	
 80005b4:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80005b8:	4798      	blx	r3
	} 
}
 80005ba:	b003      	add	sp, #12
 80005bc:	bd00      	pop	{pc}
 80005be:	bf00      	nop
 80005c0:	08000ae1 	.word	0x08000ae1
 80005c4:	20000364 	.word	0x20000364

080005c8 <Hw_ISR_UART1_Handler>:


//-- UART1 ISR
//
void Hw_ISR_UART1_Handler(void)
{
 80005c8:	b500      	push	{lr}
	u8 UartData;
				
	UartData = REG_USART1_DR;
 80005ca:	f643 0304 	movw	r3, #14340	; 0x3804
 80005ce:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80005d2:	681b      	ldr	r3, [r3, #0]


//-- UART1 ISR
//
void Hw_ISR_UART1_Handler(void)
{
 80005d4:	b083      	sub	sp, #12
	u8 UartData;
				
	UartData = REG_USART1_DR;
 80005d6:	a902      	add	r1, sp, #8
 80005d8:	f801 3d01 	strb.w	r3, [r1, #-1]!
	
	Hw_Uart_Q_Push( 0, &UartData );
 80005dc:	2000      	movs	r0, #0
 80005de:	4b05      	ldr	r3, [pc, #20]	; (80005f4 <Hw_ISR_UART1_Handler+0x2c>)
 80005e0:	4798      	blx	r3

	if( Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr != NULL )
 80005e2:	4b05      	ldr	r3, [pc, #20]	; (80005f8 <Hw_ISR_UART1_Handler+0x30>)
 80005e4:	689b      	ldr	r3, [r3, #8]
 80005e6:	b113      	cbz	r3, 80005ee <Hw_ISR_UART1_Handler+0x26>
	{
		(*Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr)(UartData);	
 80005e8:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80005ec:	4798      	blx	r3
	} 
}
 80005ee:	b003      	add	sp, #12
 80005f0:	bd00      	pop	{pc}
 80005f2:	bf00      	nop
 80005f4:	08000ae1 	.word	0x08000ae1
 80005f8:	20000364 	.word	0x20000364

080005fc <Hw_Uart_Putch.part.0>:
void Hw_Uart_Putch( u8 Ch,  char Uart_PutData )
{
	switch( Ch )
	{
		case HW_UART_COM1:
		    while( !(REG_USART1_SR & 0x80) );
 80005fc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000600:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8000604:	6813      	ldr	r3, [r2, #0]
 8000606:	061b      	lsls	r3, r3, #24
 8000608:	d5fc      	bpl.n	8000604 <Hw_Uart_Putch.part.0+0x8>
    		REG_USART1_DR = Uart_PutData;
 800060a:	f643 0304 	movw	r3, #14340	; 0x3804
 800060e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000612:	6018      	str	r0, [r3, #0]
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop

08000618 <Hw_Uart_DeInit>:
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_DeInit( void )
{
	//-- COM1
	CLR_BIT( REG_RCC_APB2ENR, 14 );				// USART1 Clock Disable
 8000618:	f241 0318 	movw	r3, #4120	; 0x1018
 800061c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000620:	6819      	ldr	r1, [r3, #0]
	CLR_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 비활성화
 8000622:	f24e 1204 	movw	r2, #57604	; 0xe104
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_DeInit( void )
{
	//-- COM1
	CLR_BIT( REG_RCC_APB2ENR, 14 );				// USART1 Clock Disable
 8000626:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 800062a:	6019      	str	r1, [r3, #0]
	CLR_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 비활성화
 800062c:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8000630:	6811      	ldr	r1, [r2, #0]
	CLR_BIT( REG_USART1_CR1, 5 );				// RX 인터럽트 비활성화
 8000632:	f643 030c 	movw	r3, #14348	; 0x380c
---------------------------------------------------------------------------*/
void Hw_Uart_DeInit( void )
{
	//-- COM1
	CLR_BIT( REG_RCC_APB2ENR, 14 );				// USART1 Clock Disable
	CLR_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 비활성화
 8000636:	f021 0120 	bic.w	r1, r1, #32
 800063a:	6011      	str	r1, [r2, #0]
	CLR_BIT( REG_USART1_CR1, 5 );				// RX 인터럽트 비활성화
 800063c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000640:	6818      	ldr	r0, [r3, #0]
	CLR_BIT( REG_USART1_CR1, 13 );	    		// USART Disable

	//-- COM2
	CLR_BIT( REG_RCC_APB1ENR, 17 );				// USART2 Clock Disable
 8000642:	f241 011c 	movw	r1, #4124	; 0x101c
void Hw_Uart_DeInit( void )
{
	//-- COM1
	CLR_BIT( REG_RCC_APB2ENR, 14 );				// USART1 Clock Disable
	CLR_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 비활성화
	CLR_BIT( REG_USART1_CR1, 5 );				// RX 인터럽트 비활성화
 8000646:	f020 0020 	bic.w	r0, r0, #32
 800064a:	6018      	str	r0, [r3, #0]
	CLR_BIT( REG_USART1_CR1, 13 );	    		// USART Disable
 800064c:	6818      	ldr	r0, [r3, #0]

	//-- COM2
	CLR_BIT( REG_RCC_APB1ENR, 17 );				// USART2 Clock Disable
 800064e:	f2c4 0102 	movt	r1, #16386	; 0x4002
{
	//-- COM1
	CLR_BIT( REG_RCC_APB2ENR, 14 );				// USART1 Clock Disable
	CLR_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 비활성화
	CLR_BIT( REG_USART1_CR1, 5 );				// RX 인터럽트 비활성화
	CLR_BIT( REG_USART1_CR1, 13 );	    		// USART Disable
 8000652:	f420 5000 	bic.w	r0, r0, #8192	; 0x2000
 8000656:	6018      	str	r0, [r3, #0]

	//-- COM2
	CLR_BIT( REG_RCC_APB1ENR, 17 );				// USART2 Clock Disable
 8000658:	6808      	ldr	r0, [r1, #0]
	CLR_BIT( REG_NVIC_ISER( 38/32 ), 38%32 );	// NVIC 37번 USART1 인터럽트 비활성화
	CLR_BIT( REG_USART2_CR1, 5 );				// RX 인터럽트 비활성화	
 800065a:	f244 430c 	movw	r3, #17420	; 0x440c
	CLR_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 비활성화
	CLR_BIT( REG_USART1_CR1, 5 );				// RX 인터럽트 비활성화
	CLR_BIT( REG_USART1_CR1, 13 );	    		// USART Disable

	//-- COM2
	CLR_BIT( REG_RCC_APB1ENR, 17 );				// USART2 Clock Disable
 800065e:	f420 3000 	bic.w	r0, r0, #131072	; 0x20000
 8000662:	6008      	str	r0, [r1, #0]
	CLR_BIT( REG_NVIC_ISER( 38/32 ), 38%32 );	// NVIC 37번 USART1 인터럽트 비활성화
 8000664:	6811      	ldr	r1, [r2, #0]
	CLR_BIT( REG_USART2_CR1, 5 );				// RX 인터럽트 비활성화	
 8000666:	f2c4 0300 	movt	r3, #16384	; 0x4000
	CLR_BIT( REG_USART1_CR1, 5 );				// RX 인터럽트 비활성화
	CLR_BIT( REG_USART1_CR1, 13 );	    		// USART Disable

	//-- COM2
	CLR_BIT( REG_RCC_APB1ENR, 17 );				// USART2 Clock Disable
	CLR_BIT( REG_NVIC_ISER( 38/32 ), 38%32 );	// NVIC 37번 USART1 인터럽트 비활성화
 800066a:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 800066e:	6011      	str	r1, [r2, #0]
	CLR_BIT( REG_USART2_CR1, 5 );				// RX 인터럽트 비활성화	
 8000670:	681a      	ldr	r2, [r3, #0]
 8000672:	f022 0220 	bic.w	r2, r2, #32
 8000676:	601a      	str	r2, [r3, #0]
	CLR_BIT( REG_USART2_CR1, 13 );	    		// USART Disable
 8000678:	681a      	ldr	r2, [r3, #0]
 800067a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <Hw_Uart_Open_COM1>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Open_COM1( u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	
 8000684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr = ISR_FuncPtr;
	
	
	//-- Clock Enable
	//
	SET_BIT( REG_RCC_APB2ENR, 14 );		// USART1 Clock Enable
 8000688:	f241 0618 	movw	r6, #4120	; 0x1018
 800068c:	f2c4 0602 	movt	r6, #16386	; 0x4002
 8000690:	6835      	ldr	r5, [r6, #0]
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Open_COM1( u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	

	Hw_Uart_Ch[HW_UART_COM1].Baud 		 = BaudData;
 8000692:	f240 3364 	movw	r3, #868	; 0x364
 8000696:	f2c2 0300 	movt	r3, #8192	; 0x2000
	//
	
	
	//-- USART1 설정
	//	
	REG_USART1_CR1  = 0 
 800069a:	f643 040c 	movw	r4, #14348	; 0x380c
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Open_COM1( u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	

	Hw_Uart_Ch[HW_UART_COM1].Baud 		 = BaudData;
 800069e:	6058      	str	r0, [r3, #4]
	Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr = ISR_FuncPtr;
 80006a0:	6099      	str	r1, [r3, #8]
	//
	
	
	//-- USART1 설정
	//	
	REG_USART1_CR1  = 0 
 80006a2:	f2c4 0401 	movt	r4, #16385	; 0x4001
	Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr = ISR_FuncPtr;
	
	
	//-- Clock Enable
	//
	SET_BIT( REG_RCC_APB2ENR, 14 );		// USART1 Clock Enable
 80006a6:	f445 4880 	orr.w	r8, r5, #16384	; 0x4000
	//
	
	
	//-- USART1 설정
	//	
	REG_USART1_CR1  = 0 
 80006aa:	230c      	movs	r3, #12
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART1_CR2  = ( 0 << 12 );		// 1 stop bit	
 80006ac:	f643 0c10 	movw	ip, #14352	; 0x3810
	REG_USART1_CR3  = 0;
 80006b0:	f643 0e14 	movw	lr, #14356	; 0x3814
	
	
	//-- 115200bps로 통신 속도 설정
	//
	REG_USART1_BRR  = 0
 80006b4:	f643 0708 	movw	r7, #14344	; 0x3808
	Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr = ISR_FuncPtr;
	
	
	//-- Clock Enable
	//
	SET_BIT( REG_RCC_APB2ENR, 14 );		// USART1 Clock Enable
 80006b8:	f8c6 8000 	str.w	r8, [r6]
	REG_USART1_CR1  = 0 
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART1_CR2  = ( 0 << 12 );		// 1 stop bit	
 80006bc:	2200      	movs	r2, #0
	//
	
	
	//-- USART1 설정
	//	
	REG_USART1_CR1  = 0 
 80006be:	6023      	str	r3, [r4, #0]
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART1_CR2  = ( 0 << 12 );		// 1 stop bit	
 80006c0:	f2c4 0c01 	movt	ip, #16385	; 0x4001
	REG_USART1_CR3  = 0;
 80006c4:	f2c4 0e01 	movt	lr, #16385	; 0x4001
	
	
	//-- 115200bps로 통신 속도 설정
	//
	REG_USART1_BRR  = 0
 80006c8:	f240 2371 	movw	r3, #625	; 0x271
 80006cc:	f2c4 0701 	movt	r7, #16385	; 0x4001
					| (  1 << 0 );		// DIV Fraction
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
 80006d0:	f24e 1504 	movw	r5, #57604	; 0xe104
	REG_USART1_CR1  = 0 
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART1_CR2  = ( 0 << 12 );		// 1 stop bit	
 80006d4:	f8cc 2000 	str.w	r2, [ip]
					| (  1 << 0 );		// DIV Fraction
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
 80006d8:	f2ce 0500 	movt	r5, #57344	; 0xe000
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART1_CR2  = ( 0 << 12 );		// 1 stop bit	
	REG_USART1_CR3  = 0;
 80006dc:	f8ce 2000 	str.w	r2, [lr]
	
	
	//-- 115200bps로 통신 속도 설정
	//
	REG_USART1_BRR  = 0
 80006e0:	603b      	str	r3, [r7, #0]
					| (  1 << 0 );		// DIV Fraction
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
 80006e2:	682b      	ldr	r3, [r5, #0]
	SET_BIT( REG_USART1_CR1, 5 );				// RX 인터럽트 활성화
	
	Hw_ISR_SetIRQFunc( 37, (u32)Hw_ISR_UART1_Handler, 0 );
 80006e4:	2025      	movs	r0, #37	; 0x25
					| (  1 << 0 );		// DIV Fraction
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
 80006e6:	f043 0320 	orr.w	r3, r3, #32
 80006ea:	602b      	str	r3, [r5, #0]
	SET_BIT( REG_USART1_CR1, 5 );				// RX 인터럽트 활성화
 80006ec:	6821      	ldr	r1, [r4, #0]
	
	Hw_ISR_SetIRQFunc( 37, (u32)Hw_ISR_UART1_Handler, 0 );
 80006ee:	f640 1335 	movw	r3, #2357	; 0x935
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
	SET_BIT( REG_USART1_CR1, 5 );				// RX 인터럽트 활성화
 80006f2:	f041 0120 	orr.w	r1, r1, #32
 80006f6:	6021      	str	r1, [r4, #0]
	
	Hw_ISR_SetIRQFunc( 37, (u32)Hw_ISR_UART1_Handler, 0 );
 80006f8:	f240 51c9 	movw	r1, #1481	; 0x5c9
 80006fc:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000700:	f6c0 0100 	movt	r1, #2048	; 0x800
 8000704:	4798      	blx	r3
	
	REG_USART1_CR1 |= ( 1 << 13 );	    // USART Enable
 8000706:	6823      	ldr	r3, [r4, #0]
 8000708:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800070c:	6023      	str	r3, [r4, #0]
 800070e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000712:	bf00      	nop

08000714 <Hw_Uart_Open_COM2>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Open_COM2( u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	
 8000714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	Hw_Uart_Ch[HW_UART_COM2].ISR_FuncPtr = ISR_FuncPtr;
	
	
	//-- Clock Enable
	//
	SET_BIT( REG_RCC_APB1ENR, 17 );		// USART2 Clock Enable	PCLK2 = 72Mhz
 8000716:	f241 041c 	movw	r4, #4124	; 0x101c
 800071a:	f2c4 0402 	movt	r4, #16386	; 0x4002
 800071e:	6825      	ldr	r5, [r4, #0]
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Open_COM2( u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	

	Hw_Uart_Ch[HW_UART_COM2].Baud 		 = BaudData;
 8000720:	f240 3264 	movw	r2, #868	; 0x364
 8000724:	f2c2 0200 	movt	r2, #8192	; 0x2000
	Hw_Uart_Ch[HW_UART_COM2].ISR_FuncPtr = ISR_FuncPtr;
	
	
	//-- Clock Enable
	//
	SET_BIT( REG_RCC_APB1ENR, 17 );		// USART2 Clock Enable	PCLK2 = 72Mhz
 8000728:	f445 3500 	orr.w	r5, r5, #131072	; 0x20000
	
	//-- I/O Port 설정
	//
	
	// PA2 - TX
	REG_GPIOA_CRL &= ~(0x0F << ( 8));	// Clear
 800072c:	f44f 6300 	mov.w	r3, #2048	; 0x800
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Open_COM2( u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	

	Hw_Uart_Ch[HW_UART_COM2].Baud 		 = BaudData;
 8000730:	6110      	str	r0, [r2, #16]
	Hw_Uart_Ch[HW_UART_COM2].ISR_FuncPtr = ISR_FuncPtr;
 8000732:	6151      	str	r1, [r2, #20]
	
	//-- I/O Port 설정
	//
	
	// PA2 - TX
	REG_GPIOA_CRL &= ~(0x0F << ( 8));	// Clear
 8000734:	f2c4 0301 	movt	r3, #16385	; 0x4001
	Hw_Uart_Ch[HW_UART_COM2].ISR_FuncPtr = ISR_FuncPtr;
	
	
	//-- Clock Enable
	//
	SET_BIT( REG_RCC_APB1ENR, 17 );		// USART2 Clock Enable	PCLK2 = 72Mhz
 8000738:	6025      	str	r5, [r4, #0]
	
	//-- I/O Port 설정
	//
	
	// PA2 - TX
	REG_GPIOA_CRL &= ~(0x0F << ( 8));	// Clear
 800073a:	681a      	ldr	r2, [r3, #0]
	REG_GPIOA_CRL |=  (0x01 << (14));	// CNF    - Floating input	
	

	//-- USART2 설정
	//	
	REG_USART2_CR1  = 0 
 800073c:	f244 440c 	movw	r4, #17420	; 0x440c
	
	//-- I/O Port 설정
	//
	
	// PA2 - TX
	REG_GPIOA_CRL &= ~(0x0F << ( 8));	// Clear
 8000740:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8000744:	601a      	str	r2, [r3, #0]
	REG_GPIOA_CRL |=  (0x03 << ( 8));	// MODE   - Output mode, max speed 50Mhz
 8000746:	681a      	ldr	r2, [r3, #0]
	REG_GPIOA_CRL |=  (0x01 << (14));	// CNF    - Floating input	
	

	//-- USART2 설정
	//	
	REG_USART2_CR1  = 0 
 8000748:	f2c4 0400 	movt	r4, #16384	; 0x4000
	//-- I/O Port 설정
	//
	
	// PA2 - TX
	REG_GPIOA_CRL &= ~(0x0F << ( 8));	// Clear
	REG_GPIOA_CRL |=  (0x03 << ( 8));	// MODE   - Output mode, max speed 50Mhz
 800074c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8000750:	601a      	str	r2, [r3, #0]
	REG_GPIOA_CRL |=  (0x02 << (10));	// CNF    - Alternate function output Push-pull
 8000752:	681a      	ldr	r2, [r3, #0]
	REG_USART2_CR1  = 0 
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART2_CR2  = ( 0 << 12 );		// 1 stop bit	
 8000754:	f244 4610 	movw	r6, #17424	; 0x4410
	//
	
	// PA2 - TX
	REG_GPIOA_CRL &= ~(0x0F << ( 8));	// Clear
	REG_GPIOA_CRL |=  (0x03 << ( 8));	// MODE   - Output mode, max speed 50Mhz
	REG_GPIOA_CRL |=  (0x02 << (10));	// CNF    - Alternate function output Push-pull
 8000758:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800075c:	601a      	str	r2, [r3, #0]
										     	    	
	// PA3 - RX
	REG_GPIOA_CRL &= ~(0x0F << (12));	// Clear
 800075e:	681a      	ldr	r2, [r3, #0]
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART2_CR2  = ( 0 << 12 );		// 1 stop bit	
	REG_USART2_CR3  = 0;
 8000760:	f244 4514 	movw	r5, #17428	; 0x4414
	REG_GPIOA_CRL &= ~(0x0F << ( 8));	// Clear
	REG_GPIOA_CRL |=  (0x03 << ( 8));	// MODE   - Output mode, max speed 50Mhz
	REG_GPIOA_CRL |=  (0x02 << (10));	// CNF    - Alternate function output Push-pull
										     	    	
	// PA3 - RX
	REG_GPIOA_CRL &= ~(0x0F << (12));	// Clear
 8000764:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 8000768:	601a      	str	r2, [r3, #0]
	REG_GPIOA_CRL |=  (0x00 << (12));	// MODE   - Input mode
 800076a:	681a      	ldr	r2, [r3, #0]
	REG_USART2_CR3  = 0;
	
	
	//-- 115200bps로 통신 속도 설정
	//
	REG_USART2_BRR  = 0
 800076c:	f244 4008 	movw	r0, #17416	; 0x4408
	REG_GPIOA_CRL |=  (0x03 << ( 8));	// MODE   - Output mode, max speed 50Mhz
	REG_GPIOA_CRL |=  (0x02 << (10));	// CNF    - Alternate function output Push-pull
										     	    	
	// PA3 - RX
	REG_GPIOA_CRL &= ~(0x0F << (12));	// Clear
	REG_GPIOA_CRL |=  (0x00 << (12));	// MODE   - Input mode
 8000770:	601a      	str	r2, [r3, #0]
	REG_GPIOA_CRL |=  (0x01 << (14));	// CNF    - Floating input	
 8000772:	681f      	ldr	r7, [r3, #0]
	REG_USART2_CR1  = 0 
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART2_CR2  = ( 0 << 12 );		// 1 stop bit	
 8000774:	2200      	movs	r2, #0
	REG_GPIOA_CRL |=  (0x02 << (10));	// CNF    - Alternate function output Push-pull
										     	    	
	// PA3 - RX
	REG_GPIOA_CRL &= ~(0x0F << (12));	// Clear
	REG_GPIOA_CRL |=  (0x00 << (12));	// MODE   - Input mode
	REG_GPIOA_CRL |=  (0x01 << (14));	// CNF    - Floating input	
 8000776:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 800077a:	601f      	str	r7, [r3, #0]
	

	//-- USART2 설정
	//	
	REG_USART2_CR1  = 0 
 800077c:	230c      	movs	r3, #12
 800077e:	6023      	str	r3, [r4, #0]
	REG_USART2_CR3  = 0;
	
	
	//-- 115200bps로 통신 속도 설정
	//
	REG_USART2_BRR  = 0
 8000780:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000784:	f44f 739c 	mov.w	r3, #312	; 0x138
	REG_USART2_CR1  = 0 
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART2_CR2  = ( 0 << 12 );		// 1 stop bit	
 8000788:	f2c4 0600 	movt	r6, #16384	; 0x4000
	REG_USART2_CR3  = 0;
 800078c:	f2c4 0500 	movt	r5, #16384	; 0x4000
					| (  8 << 0 );		// DIV Fraction
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 38/32 ), 38%32 );	// NVIC 37번 USART1 인터럽트 활성화
 8000790:	f24e 1104 	movw	r1, #57604	; 0xe104
	REG_USART2_CR1  = 0 
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART2_CR2  = ( 0 << 12 );		// 1 stop bit	
 8000794:	6032      	str	r2, [r6, #0]
					| (  8 << 0 );		// DIV Fraction
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 38/32 ), 38%32 );	// NVIC 37번 USART1 인터럽트 활성화
 8000796:	f2ce 0100 	movt	r1, #57344	; 0xe000
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART2_CR2  = ( 0 << 12 );		// 1 stop bit	
	REG_USART2_CR3  = 0;
 800079a:	602a      	str	r2, [r5, #0]
	
	
	//-- 115200bps로 통신 속도 설정
	//
	REG_USART2_BRR  = 0
 800079c:	6003      	str	r3, [r0, #0]
					| (  8 << 0 );		// DIV Fraction
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 38/32 ), 38%32 );	// NVIC 37번 USART1 인터럽트 활성화
 800079e:	680b      	ldr	r3, [r1, #0]
	SET_BIT( REG_USART2_CR1, 5 );				// RX 인터럽트 활성화
	
	Hw_ISR_SetIRQFunc( 38, (u32)Hw_ISR_UART2_Handler, 0 );
 80007a0:	2026      	movs	r0, #38	; 0x26
					| (  8 << 0 );		// DIV Fraction
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 38/32 ), 38%32 );	// NVIC 37번 USART1 인터럽트 활성화
 80007a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007a6:	600b      	str	r3, [r1, #0]
	SET_BIT( REG_USART2_CR1, 5 );				// RX 인터럽트 활성화
 80007a8:	6821      	ldr	r1, [r4, #0]
	
	Hw_ISR_SetIRQFunc( 38, (u32)Hw_ISR_UART2_Handler, 0 );
 80007aa:	f640 1335 	movw	r3, #2357	; 0x935
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 38/32 ), 38%32 );	// NVIC 37번 USART1 인터럽트 활성화
	SET_BIT( REG_USART2_CR1, 5 );				// RX 인터럽트 활성화
 80007ae:	f041 0120 	orr.w	r1, r1, #32
 80007b2:	6021      	str	r1, [r4, #0]
	
	Hw_ISR_SetIRQFunc( 38, (u32)Hw_ISR_UART2_Handler, 0 );
 80007b4:	f240 5195 	movw	r1, #1429	; 0x595
 80007b8:	f6c0 0300 	movt	r3, #2048	; 0x800
 80007bc:	f6c0 0100 	movt	r1, #2048	; 0x800
 80007c0:	4798      	blx	r3
	
	REG_USART2_CR1 |= ( 1 << 13 );	    // USART Enable
 80007c2:	6823      	ldr	r3, [r4, #0]
 80007c4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80007c8:	6023      	str	r3, [r4, #0]
 80007ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080007cc <Hw_Uart_Init>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Init( void )
{
 80007cc:	b508      	push	{r3, lr}
	u32 i;
	
	Hw_Uart_Q_Init();
 80007ce:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <Hw_Uart_Init+0x30>)
 80007d0:	4798      	blx	r3
 80007d2:	4b0b      	ldr	r3, [pc, #44]	; (8000800 <Hw_Uart_Init+0x34>)
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 80007d4:	2200      	movs	r2, #0
     TITLE   : Hw_Uart_Init
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Init( void )
 80007d6:	f103 0148 	add.w	r1, r3, #72	; 0x48
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 80007da:	601a      	str	r2, [r3, #0]
		Hw_Uart_Ch[i].ISR_FuncPtr = NULL;
 80007dc:	605a      	str	r2, [r3, #4]
 80007de:	330c      	adds	r3, #12
	u32 i;
	
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
 80007e0:	428b      	cmp	r3, r1
 80007e2:	d1fa      	bne.n	80007da <Hw_Uart_Init+0xe>
void Hw_Uart_Open( u8 Ch, u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	
	switch( Ch )
	{
		case HW_UART_COM1:
			Hw_Uart_Open_COM1( BaudData, ISR_FuncPtr );
 80007e4:	2100      	movs	r1, #0
 80007e6:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 80007ea:	4b06      	ldr	r3, [pc, #24]	; (8000804 <Hw_Uart_Init+0x38>)
 80007ec:	4798      	blx	r3
			break;
			
		case HW_UART_COM2:
			Hw_Uart_Open_COM2( BaudData, ISR_FuncPtr );
 80007ee:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 80007f2:	2100      	movs	r1, #0
 80007f4:	4b04      	ldr	r3, [pc, #16]	; (8000808 <Hw_Uart_Init+0x3c>)
 80007f6:	4798      	blx	r3
 80007f8:	bd08      	pop	{r3, pc}
 80007fa:	bf00      	nop
 80007fc:	08000a99 	.word	0x08000a99
 8000800:	20000368 	.word	0x20000368
 8000804:	08000685 	.word	0x08000685
 8000808:	08000715 	.word	0x08000715

0800080c <Hw_Uart_Getch>:
			: 시리얼 포트에서 문자 1바이트 읽는다.
     ARG
     RET
---------------------------------------------------------------------------*/
u8 Hw_Uart_Getch( u8 Ch )
{
 800080c:	b530      	push	{r4, r5, lr}
	u8 Uart_GetData = 0;
 800080e:	2300      	movs	r3, #0
			: 시리얼 포트에서 문자 1바이트 읽는다.
     ARG
     RET
---------------------------------------------------------------------------*/
u8 Hw_Uart_Getch( u8 Ch )
{
 8000810:	b083      	sub	sp, #12
	u8 Uart_GetData = 0;

	if( Ch == HW_UART_VCOM )
 8000812:	2805      	cmp	r0, #5
			: 시리얼 포트에서 문자 1바이트 읽는다.
     ARG
     RET
---------------------------------------------------------------------------*/
u8 Hw_Uart_Getch( u8 Ch )
{
 8000814:	4604      	mov	r4, r0
	u8 Uart_GetData = 0;
 8000816:	f88d 3007 	strb.w	r3, [sp, #7]

	if( Ch == HW_UART_VCOM )
 800081a:	d00d      	beq.n	8000838 <Hw_Uart_Getch+0x2c>
 800081c:	4d08      	ldr	r5, [pc, #32]	; (8000840 <Hw_Uart_Getch+0x34>)
	}

	while( 1 )
	{
		// 버퍼에 데이터 들어올때까지 기다린다.
		if( HW_UART_Q_VAILD(Ch) > 0 ) break;
 800081e:	4620      	mov	r0, r4
 8000820:	47a8      	blx	r5
 8000822:	2800      	cmp	r0, #0
 8000824:	d0fb      	beq.n	800081e <Hw_Uart_Getch+0x12>
	}

	Hw_Uart_Q_Pop( Ch, &Uart_GetData );
 8000826:	4620      	mov	r0, r4
 8000828:	f10d 0107 	add.w	r1, sp, #7
 800082c:	4b05      	ldr	r3, [pc, #20]	; (8000844 <Hw_Uart_Getch+0x38>)
 800082e:	4798      	blx	r3

	return Uart_GetData;
 8000830:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8000834:	b003      	add	sp, #12
 8000836:	bd30      	pop	{r4, r5, pc}
{
	u8 Uart_GetData = 0;

	if( Ch == HW_UART_VCOM )
	{
		return Hw_VCom_Getch();
 8000838:	4b03      	ldr	r3, [pc, #12]	; (8000848 <Hw_Uart_Getch+0x3c>)
 800083a:	4798      	blx	r3
 800083c:	e7fa      	b.n	8000834 <Hw_Uart_Getch+0x28>
 800083e:	bf00      	nop
 8000840:	08000ab5 	.word	0x08000ab5
 8000844:	08000b3d 	.word	0x08000b3d
 8000848:	08000bf5 	.word	0x08000bf5

0800084c <Hw_Uart_Putch>:
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Uart_Putch( u8 Ch,  char Uart_PutData )
{
	switch( Ch )
 800084c:	2801      	cmp	r0, #1
			: 시리얼 포트로 문자 1바이트 전송
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Uart_Putch( u8 Ch,  char Uart_PutData )
{
 800084e:	b508      	push	{r3, lr}
	switch( Ch )
 8000850:	d00a      	beq.n	8000868 <Hw_Uart_Putch+0x1c>
 8000852:	d305      	bcc.n	8000860 <Hw_Uart_Putch+0x14>
 8000854:	2805      	cmp	r0, #5
 8000856:	d102      	bne.n	800085e <Hw_Uart_Putch+0x12>

		case HW_UART_COM5:
			break;		

		case HW_UART_VCOM:
			Hw_VCom_Putch( Uart_PutData );
 8000858:	4608      	mov	r0, r1
 800085a:	4b0a      	ldr	r3, [pc, #40]	; (8000884 <Hw_Uart_Putch+0x38>)
 800085c:	4798      	blx	r3
 800085e:	bd08      	pop	{r3, pc}
 8000860:	4608      	mov	r0, r1
 8000862:	4b09      	ldr	r3, [pc, #36]	; (8000888 <Hw_Uart_Putch+0x3c>)
 8000864:	4798      	blx	r3
 8000866:	bd08      	pop	{r3, pc}
		    while( !(REG_USART1_SR & 0x80) );
    		REG_USART1_DR = Uart_PutData;
			break;
			
		case HW_UART_COM2:
		    while( !(REG_USART2_SR & 0x80) );
 8000868:	f44f 4288 	mov.w	r2, #17408	; 0x4400
 800086c:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8000870:	6813      	ldr	r3, [r2, #0]
 8000872:	0618      	lsls	r0, r3, #24
 8000874:	d5fc      	bpl.n	8000870 <Hw_Uart_Putch+0x24>
    		REG_USART2_DR = Uart_PutData;
 8000876:	f244 4304 	movw	r3, #17412	; 0x4404
 800087a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800087e:	6019      	str	r1, [r3, #0]
			break;
 8000880:	bd08      	pop	{r3, pc}
 8000882:	bf00      	nop
 8000884:	08000c25 	.word	0x08000c25
 8000888:	080005fd 	.word	0x080005fd

0800088c <Hw_PLL_Init>:
{
	
#if	CLOCK_EXT == 1
	//-- PLL 설정 72Mhz로 설정함
	//
	REG_RCC_CFGR &= ~(0xF<<18 | 0x1<<17 | 0x1<<16 | 0xF<<4);
 800088c:	f241 0304 	movw	r3, #4100	; 0x1004
 8000890:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000894:	681a      	ldr	r2, [r3, #0]
	REG_RCC_CFGR |=  (0x7<<18 | 0x1<<16);			// 8MHz
    REG_RCC_CR   |=  0x01 << 24;                    // PLLON
 8000896:	f44f 5180 	mov.w	r1, #4096	; 0x1000
{
	
#if	CLOCK_EXT == 1
	//-- PLL 설정 72Mhz로 설정함
	//
	REG_RCC_CFGR &= ~(0xF<<18 | 0x1<<17 | 0x1<<16 | 0xF<<4);
 800089a:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 800089e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80008a2:	601a      	str	r2, [r3, #0]
	REG_RCC_CFGR |=  (0x7<<18 | 0x1<<16);			// 8MHz
 80008a4:	681a      	ldr	r2, [r3, #0]
    REG_RCC_CR   |=  0x01 << 24;                    // PLLON
 80008a6:	f2c4 0102 	movt	r1, #16386	; 0x4002
	
#if	CLOCK_EXT == 1
	//-- PLL 설정 72Mhz로 설정함
	//
	REG_RCC_CFGR &= ~(0xF<<18 | 0x1<<17 | 0x1<<16 | 0xF<<4);
	REG_RCC_CFGR |=  (0x7<<18 | 0x1<<16);			// 8MHz
 80008aa:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
 80008ae:	601a      	str	r2, [r3, #0]
    REG_RCC_CR   |=  0x01 << 24;                    // PLLON
 80008b0:	680b      	ldr	r3, [r1, #0]

	while( (REG_RCC_CR & (1<<25)) == 0 );			// PLLRDY
 80008b2:	460a      	mov	r2, r1
#if	CLOCK_EXT == 1
	//-- PLL 설정 72Mhz로 설정함
	//
	REG_RCC_CFGR &= ~(0xF<<18 | 0x1<<17 | 0x1<<16 | 0xF<<4);
	REG_RCC_CFGR |=  (0x7<<18 | 0x1<<16);			// 8MHz
    REG_RCC_CR   |=  0x01 << 24;                    // PLLON
 80008b4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80008b8:	600b      	str	r3, [r1, #0]

	while( (REG_RCC_CR & (1<<25)) == 0 );			// PLLRDY
 80008ba:	6813      	ldr	r3, [r2, #0]
 80008bc:	019b      	lsls	r3, r3, #6
 80008be:	d5fc      	bpl.n	80008ba <Hw_PLL_Init+0x2e>
    /////Bits 1:0 SW : System clock switch
    //00: HSI selected as system clock
    //01: HSE selected as system clock
    //10: PLL selected as system clock   <----------------- 선택됨
    //11: not allowed
	REG_RCC_CFGR &= ~0x3;
 80008c0:	f241 0304 	movw	r3, #4100	; 0x1004
 80008c4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80008c8:	6819      	ldr	r1, [r3, #0]
	//
	REG_RCC_CFGR &= ~(0x7<<11);
	REG_RCC_CFGR |=  (0x0<<11);

    
    while( (REG_RCC_CFGR & 0xC) != 0x08 );
 80008ca:	461a      	mov	r2, r3
    /////Bits 1:0 SW : System clock switch
    //00: HSI selected as system clock
    //01: HSE selected as system clock
    //10: PLL selected as system clock   <----------------- 선택됨
    //11: not allowed
	REG_RCC_CFGR &= ~0x3;
 80008cc:	f021 0103 	bic.w	r1, r1, #3
 80008d0:	6019      	str	r1, [r3, #0]
	REG_RCC_CFGR |=  0x2;
 80008d2:	6819      	ldr	r1, [r3, #0]
 80008d4:	f041 0102 	orr.w	r1, r1, #2
 80008d8:	6019      	str	r1, [r3, #0]

	// USB 72M * 2 / 3 = 48Mhz
	//
	CLR_BIT( REG_RCC_CFGR, 22 );
 80008da:	6819      	ldr	r1, [r3, #0]
 80008dc:	f421 0180 	bic.w	r1, r1, #4194304	; 0x400000
 80008e0:	6019      	str	r1, [r3, #0]

	// APB1 - PCLK1 36Mhz
	//
	REG_RCC_CFGR &= ~(0x7<<8);
 80008e2:	6819      	ldr	r1, [r3, #0]
 80008e4:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 80008e8:	6019      	str	r1, [r3, #0]
	REG_RCC_CFGR |=  (0x4<<8);
 80008ea:	6819      	ldr	r1, [r3, #0]
 80008ec:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 80008f0:	6019      	str	r1, [r3, #0]
	
	// APB2 - PCLK2 72Mhz
	//
	REG_RCC_CFGR &= ~(0x7<<11);
 80008f2:	6819      	ldr	r1, [r3, #0]
 80008f4:	f421 5160 	bic.w	r1, r1, #14336	; 0x3800
 80008f8:	6019      	str	r1, [r3, #0]
	REG_RCC_CFGR |=  (0x0<<11);
 80008fa:	6819      	ldr	r1, [r3, #0]
 80008fc:	6019      	str	r1, [r3, #0]

    
    while( (REG_RCC_CFGR & 0xC) != 0x08 );
 80008fe:	6813      	ldr	r3, [r2, #0]
 8000900:	f003 030c 	and.w	r3, r3, #12
 8000904:	2b08      	cmp	r3, #8
 8000906:	d1fa      	bne.n	80008fe <Hw_PLL_Init+0x72>
    
    //APB2에 있는 UART 등 주변장치에 Clock 소스 동작제어
    //UART가 동작되기 위해서는 GPIO와 Alternation Function IO가 동작상태에 있어야 함
	REG_RCC_APB2ENR |= 0  |
 8000908:	f241 0318 	movw	r3, #4120	; 0x1018
 800090c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000910:	681a      	ldr	r2, [r3, #0]
 8000912:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000916:	f042 021d 	orr.w	r2, r2, #29
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop

08000920 <Hw_ISR_Init>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_ISR_Init( void )
{
	REG_SCB_VTOR = (u32)Hw_ISR_VectorTable;
 8000920:	f240 4300 	movw	r3, #1024	; 0x400
 8000924:	f64e 5208 	movw	r2, #60680	; 0xed08
 8000928:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800092c:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8000930:	6013      	str	r3, [r2, #0]
 8000932:	4770      	bx	lr

08000934 <Hw_ISR_SetIRQFunc>:
---------------------------------------------------------------------------*/
void Hw_ISR_SetIRQFunc( u8 ISR_Num, u32 FuncAddress, u8 ISR_Priority )
{	
	u32 ISR_StartOffset = 16;
	
	Hw_ISR_VectorTable[ ISR_StartOffset + ISR_Num ] = FuncAddress;	
 8000934:	f240 4300 	movw	r3, #1024	; 0x400
 8000938:	3010      	adds	r0, #16
 800093a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800093e:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 8000942:	4770      	bx	lr

08000944 <Hw_ISR_SetIRQFuncByAddr>:
---------------------------------------------------------------------------*/
void Hw_ISR_SetIRQFuncByAddr( u32 ISR_Addr, u32 FuncAddress, u8 ISR_Priority )
{	
	u32 ISR_StartOffset = ISR_Addr/4;
	
	Hw_ISR_VectorTable[ ISR_StartOffset ] = FuncAddress;	
 8000944:	f240 4300 	movw	r3, #1024	; 0x400
     			u8  ISR_Priority : 인터럽트 우선순위(작은값이 우선순위 높음)
     RET     : void
---------------------------------------------------------------------------*/
void Hw_ISR_SetIRQFuncByAddr( u32 ISR_Addr, u32 FuncAddress, u8 ISR_Priority )
{	
	u32 ISR_StartOffset = ISR_Addr/4;
 8000948:	0880      	lsrs	r0, r0, #2
	
	Hw_ISR_VectorTable[ ISR_StartOffset ] = FuncAddress;	
 800094a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800094e:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 8000952:	4770      	bx	lr

08000954 <Hw_Timer_DeInit>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_DeInit( void )
{
	CLR_BIT( REG_STK_CTRL, 1 );	// 인터럽트 비활성화		
 8000954:	f24e 0310 	movw	r3, #57360	; 0xe010
 8000958:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800095c:	681a      	ldr	r2, [r3, #0]
 800095e:	f022 0202 	bic.w	r2, r2, #2
 8000962:	601a      	str	r2, [r3, #0]
	CLR_BIT( REG_STK_CTRL, 0 );	// Counter Enable
 8000964:	681a      	ldr	r2, [r3, #0]
 8000966:	f022 0201 	bic.w	r2, r2, #1
 800096a:	601a      	str	r2, [r3, #0]
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop

08000970 <Hw_Timer_SetupISR>:
     	 	 	 타이머 H/W 기능을 초기화 한다.
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_SetupISR( void )
{	
 8000970:	b508      	push	{r3, lr}
	Hw_ISR_SetIRQFuncByAddr( 0x003C, (u32)Hw_Timer_ISR, 0 );	
 8000972:	f640 2175 	movw	r1, #2677	; 0xa75
 8000976:	f640 1345 	movw	r3, #2373	; 0x945
 800097a:	203c      	movs	r0, #60	; 0x3c
 800097c:	f6c0 0100 	movt	r1, #2048	; 0x800
 8000980:	2200      	movs	r2, #0
 8000982:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000986:	4798      	blx	r3
 8000988:	bd08      	pop	{r3, pc}
 800098a:	bf00      	nop

0800098c <Hw_Timer_Init>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_Init( void )
{
 800098c:	b510      	push	{r4, lr}
	u8 i;
	static u8 Excute = 0;

	
	if( Excute == 1 ) return;  // 이미 한번 실행했다면 정지.
 800098e:	4c1b      	ldr	r4, [pc, #108]	; (80009fc <Hw_Timer_Init+0x70>)
 8000990:	7823      	ldrb	r3, [r4, #0]
 8000992:	2b01      	cmp	r3, #1
 8000994:	d030      	beq.n	80009f8 <Hw_Timer_Init+0x6c>
 8000996:	4b1a      	ldr	r3, [pc, #104]	; (8000a00 <Hw_Timer_Init+0x74>)
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 8000998:	2200      	movs	r2, #0
     TITLE   : Hw_Timer_Init
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_Init( void )
 800099a:	f103 01a0 	add.w	r1, r3, #160	; 0xa0
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 800099e:	f803 2c08 	strb.w	r2, [r3, #-8]
		Timer_Tbl[i].Timer_Ctn  = 0;
 80009a2:	f823 2c06 	strh.w	r2, [r3, #-6]
		Timer_Tbl[i].Timer_Init = 0;
 80009a6:	f823 2c04 	strh.w	r2, [r3, #-4]
		Timer_Tbl[i].TmrFnct    = NULL;
 80009aa:	f843 2b10 	str.w	r2, [r3], #16
	
	if( Excute == 1 ) return;  // 이미 한번 실행했다면 정지.
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
 80009ae:	428b      	cmp	r3, r1
 80009b0:	d1f5      	bne.n	800099e <Hw_Timer_Init+0x12>
		Timer_Tbl[i].Timer_Init = 0;
		Timer_Tbl[i].TmrFnct    = NULL;
	}	                   
	
	
	Hw_Timer_SetupISR();
 80009b2:	4b14      	ldr	r3, [pc, #80]	; (8000a04 <Hw_Timer_Init+0x78>)
 80009b4:	4798      	blx	r3
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_Setup( void )
{

	REG_STK_LOAD = 72000 - 1;	// 72000000 / 72000 = 1000us = 1ms
 80009b6:	f24e 0114 	movw	r1, #57364	; 0xe014
 80009ba:	f641 103f 	movw	r0, #6463	; 0x193f
 80009be:	f2ce 0100 	movt	r1, #57344	; 0xe000
	
	REG_STK_VAL  = 0;	
 80009c2:	f24e 0218 	movw	r2, #57368	; 0xe018
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_Setup( void )
{

	REG_STK_LOAD = 72000 - 1;	// 72000000 / 72000 = 1000us = 1ms
 80009c6:	f2c0 0001 	movt	r0, #1
 80009ca:	6008      	str	r0, [r1, #0]
	
	REG_STK_VAL  = 0;	
 80009cc:	f2ce 0200 	movt	r2, #57344	; 0xe000
	
	SET_BIT( REG_STK_CTRL, 2 );	// CLKSOURCE = Processor Clock 72Mhz		
 80009d0:	f24e 0310 	movw	r3, #57360	; 0xe010
void Hw_Timer_Setup( void )
{

	REG_STK_LOAD = 72000 - 1;	// 72000000 / 72000 = 1000us = 1ms
	
	REG_STK_VAL  = 0;	
 80009d4:	2100      	movs	r1, #0
	
	SET_BIT( REG_STK_CTRL, 2 );	// CLKSOURCE = Processor Clock 72Mhz		
 80009d6:	f2ce 0300 	movt	r3, #57344	; 0xe000
void Hw_Timer_Setup( void )
{

	REG_STK_LOAD = 72000 - 1;	// 72000000 / 72000 = 1000us = 1ms
	
	REG_STK_VAL  = 0;	
 80009da:	6011      	str	r1, [r2, #0]
	
	SET_BIT( REG_STK_CTRL, 2 );	// CLKSOURCE = Processor Clock 72Mhz		
 80009dc:	681a      	ldr	r2, [r3, #0]
 80009de:	f042 0204 	orr.w	r2, r2, #4
 80009e2:	601a      	str	r2, [r3, #0]
	SET_BIT( REG_STK_CTRL, 1 );	// 인터럽트 활성화		
 80009e4:	681a      	ldr	r2, [r3, #0]
 80009e6:	f042 0202 	orr.w	r2, r2, #2
 80009ea:	601a      	str	r2, [r3, #0]
	SET_BIT( REG_STK_CTRL, 0 );	// Counter Enable
 80009ec:	681a      	ldr	r2, [r3, #0]
 80009ee:	f042 0201 	orr.w	r2, r2, #1
 80009f2:	601a      	str	r2, [r3, #0]
	
	
	Hw_Timer_SetupISR();
	Hw_Timer_Setup();	

	Excute = 1;
 80009f4:	2301      	movs	r3, #1
 80009f6:	7023      	strb	r3, [r4, #0]
 80009f8:	bd10      	pop	{r4, pc}
 80009fa:	bf00      	nop
 80009fc:	20000200 	.word	0x20000200
 8000a00:	20000210 	.word	0x20000210
 8000a04:	08000971 	.word	0x08000971

08000a08 <Hw_Timer_Tick>:
void Hw_Timer_Tick(void)
{
	u8 i;

	
	Hw_Timer_Counter++;
 8000a08:	4a17      	ldr	r2, [pc, #92]	; (8000a68 <Hw_Timer_Tick+0x60>)
			타이머인터럽트 발생시에 실행되는 함수(1ms 혹은 10ms 단위로 실행)
     ARG	: void
     RET	: void
---------------------------------------------------------------------------*/
void Hw_Timer_Tick(void)
{
 8000a0a:	b538      	push	{r3, r4, r5, lr}
	u8 i;

	
	Hw_Timer_Counter++;
 8000a0c:	6811      	ldr	r1, [r2, #0]


	if( Tmr_Ctn ) Tmr_Ctn--;
 8000a0e:	4b17      	ldr	r3, [pc, #92]	; (8000a6c <Hw_Timer_Tick+0x64>)
void Hw_Timer_Tick(void)
{
	u8 i;

	
	Hw_Timer_Counter++;
 8000a10:	3101      	adds	r1, #1
 8000a12:	6011      	str	r1, [r2, #0]


	if( Tmr_Ctn ) Tmr_Ctn--;
 8000a14:	881a      	ldrh	r2, [r3, #0]
 8000a16:	b292      	uxth	r2, r2
 8000a18:	b11a      	cbz	r2, 8000a22 <Hw_Timer_Tick+0x1a>
 8000a1a:	881a      	ldrh	r2, [r3, #0]
 8000a1c:	3a01      	subs	r2, #1
 8000a1e:	b292      	uxth	r2, r2
 8000a20:	801a      	strh	r2, [r3, #0]
 8000a22:	4c13      	ldr	r4, [pc, #76]	; (8000a70 <Hw_Timer_Tick+0x68>)
     WORK	:
			타이머인터럽트 발생시에 실행되는 함수(1ms 혹은 10ms 단위로 실행)
     ARG	: void
     RET	: void
---------------------------------------------------------------------------*/
void Hw_Timer_Tick(void)
 8000a24:	f104 05a0 	add.w	r5, r4, #160	; 0xa0
 8000a28:	e002      	b.n	8000a30 <Hw_Timer_Tick+0x28>
 8000a2a:	3410      	adds	r4, #16

	if( Tmr_Ctn ) Tmr_Ctn--;
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
 8000a2c:	42ac      	cmp	r4, r5
 8000a2e:	d01a      	beq.n	8000a66 <Hw_Timer_Tick+0x5e>
	{
		if( Timer_Tbl[i].Timer_En == ON)   					// 타이머가 활성화 됬니?
 8000a30:	f814 3c08 	ldrb.w	r3, [r4, #-8]
 8000a34:	2b01      	cmp	r3, #1
 8000a36:	d1f8      	bne.n	8000a2a <Hw_Timer_Tick+0x22>
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소
 8000a38:	f834 3c06 	ldrh.w	r3, [r4, #-6]
 8000a3c:	3b01      	subs	r3, #1
 8000a3e:	b29b      	uxth	r3, r3
 8000a40:	f824 3c06 	strh.w	r3, [r4, #-6]

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d1f0      	bne.n	8000a2a <Hw_Timer_Tick+0x22>
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 8000a48:	f814 2c07 	ldrb.w	r2, [r4, #-7]
 8000a4c:	2a01      	cmp	r2, #1

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8000a4e:	f834 2c04 	ldrh.w	r2, [r4, #-4]

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.
 8000a52:	bf08      	it	eq
 8000a54:	f804 3c08 	strbeq.w	r3, [r4, #-8]

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8000a58:	f824 2c06 	strh.w	r2, [r4, #-6]

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8000a5c:	6823      	ldr	r3, [r4, #0]
 8000a5e:	3410      	adds	r4, #16
 8000a60:	4798      	blx	r3

	if( Tmr_Ctn ) Tmr_Ctn--;
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
 8000a62:	42ac      	cmp	r4, r5
 8000a64:	d1e4      	bne.n	8000a30 <Hw_Timer_Tick+0x28>
				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
			}
		}
	}
	
}
 8000a66:	bd38      	pop	{r3, r4, r5, pc}
 8000a68:	20000204 	.word	0x20000204
 8000a6c:	200002a8 	.word	0x200002a8
 8000a70:	20000210 	.word	0x20000210

08000a74 <Hw_Timer_ISR>:
void Hw_Timer_Setup( void );



void Hw_Timer_ISR(void)
{
 8000a74:	b508      	push	{r3, lr}

	Hw_Timer_Tick();  
 8000a76:	f640 2309 	movw	r3, #2569	; 0xa09
 8000a7a:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000a7e:	4798      	blx	r3
 8000a80:	bd08      	pop	{r3, pc}
 8000a82:	bf00      	nop

08000a84 <Hw_Timer_Delay_ms>:
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Timer_Delay_ms( u16 DelayData )
{
	Tmr_Ctn = DelayData;
 8000a84:	4a03      	ldr	r2, [pc, #12]	; (8000a94 <Hw_Timer_Delay_ms+0x10>)
 8000a86:	8010      	strh	r0, [r2, #0]
	
	while( Tmr_Ctn );
 8000a88:	8813      	ldrh	r3, [r2, #0]
 8000a8a:	b29b      	uxth	r3, r3
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d1fb      	bne.n	8000a88 <Hw_Timer_Delay_ms+0x4>
}
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	200002a8 	.word	0x200002a8

08000a98 <Hw_Uart_Q_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Q_Init( void )
{
 8000a98:	2300      	movs	r3, #0
 8000a9a:	4804      	ldr	r0, [pc, #16]	; (8000aac <Hw_Uart_Q_Init+0x14>)
 8000a9c:	4904      	ldr	r1, [pc, #16]	; (8000ab0 <Hw_Uart_Q_Init+0x18>)
	u8 i;

	for( i=0; i<HW_UART_Q_CH_MAX; i++ )
	{
		Hw_Uart_Q_Start[i] = Hw_Uart_Q_End[i] = 0;
 8000a9e:	461a      	mov	r2, r3
 8000aa0:	521a      	strh	r2, [r3, r0]
 8000aa2:	525a      	strh	r2, [r3, r1]
 8000aa4:	3302      	adds	r3, #2
---------------------------------------------------------------------------*/
void Hw_Uart_Q_Init( void )
{
	u8 i;

	for( i=0; i<HW_UART_Q_CH_MAX; i++ )
 8000aa6:	2b0e      	cmp	r3, #14
 8000aa8:	d1fa      	bne.n	8000aa0 <Hw_Uart_Q_Init+0x8>
	{
		Hw_Uart_Q_Start[i] = Hw_Uart_Q_End[i] = 0;
	}
}
 8000aaa:	4770      	bx	lr
 8000aac:	20000688 	.word	0x20000688
 8000ab0:	20000698 	.word	0x20000698

08000ab4 <HW_UART_Q_VAILD>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 8000ab4:	f240 6298 	movw	r2, #1688	; 0x698
 8000ab8:	f240 6388 	movw	r3, #1672	; 0x688
 8000abc:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000ac0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000ac4:	f933 3010 	ldrsh.w	r3, [r3, r0, lsl #1]
 8000ac8:	f932 2010 	ldrsh.w	r2, [r2, r0, lsl #1]
 8000acc:	1ad2      	subs	r2, r2, r3
 8000ace:	3220      	adds	r2, #32
 8000ad0:	17d3      	asrs	r3, r2, #31
 8000ad2:	0edb      	lsrs	r3, r3, #27
 8000ad4:	18d2      	adds	r2, r2, r3
 8000ad6:	f002 001f 	and.w	r0, r2, #31
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_VAILD( u8 Ch )
{
	return HW_UART_Q_SIZE(Ch);
}
 8000ada:	1ac0      	subs	r0, r0, r3
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop

08000ae0 <Hw_Uart_Q_Push>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{
 8000ae0:	b470      	push	{r4, r5, r6}
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 8000ae2:	4c13      	ldr	r4, [pc, #76]	; (8000b30 <Hw_Uart_Q_Push+0x50>)
 8000ae4:	4b13      	ldr	r3, [pc, #76]	; (8000b34 <Hw_Uart_Q_Push+0x54>)
 8000ae6:	f834 6010 	ldrh.w	r6, [r4, r0, lsl #1]
 8000aea:	f933 2010 	ldrsh.w	r2, [r3, r0, lsl #1]
 8000aee:	b235      	sxth	r5, r6
 8000af0:	1aaa      	subs	r2, r5, r2
 8000af2:	3220      	adds	r2, #32
 8000af4:	17d3      	asrs	r3, r2, #31
 8000af6:	0edb      	lsrs	r3, r3, #27
 8000af8:	18d2      	adds	r2, r2, r3
 8000afa:	f002 021f 	and.w	r2, r2, #31
 8000afe:	1ad3      	subs	r3, r2, r3
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;
 8000b00:	2b1f      	cmp	r3, #31
 8000b02:	d012      	beq.n	8000b2a <Hw_Uart_Q_Push+0x4a>

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
 8000b04:	3601      	adds	r6, #1
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 8000b06:	b236      	sxth	r6, r6
 8000b08:	17f3      	asrs	r3, r6, #31
 8000b0a:	0edb      	lsrs	r3, r3, #27
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
 8000b0c:	eb00 1240 	add.w	r2, r0, r0, lsl #5
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 8000b10:	18f6      	adds	r6, r6, r3
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
 8000b12:	7809      	ldrb	r1, [r1, #0]
 8000b14:	1955      	adds	r5, r2, r5
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 8000b16:	f006 061f 	and.w	r6, r6, #31
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
 8000b1a:	4a07      	ldr	r2, [pc, #28]	; (8000b38 <Hw_Uart_Q_Push+0x58>)
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 8000b1c:	1af3      	subs	r3, r6, r3
 8000b1e:	f824 3010 	strh.w	r3, [r4, r0, lsl #1]
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
 8000b22:	5551      	strb	r1, [r2, r5]
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;

	return TRUE;
 8000b24:	2001      	movs	r0, #1
}
 8000b26:	bc70      	pop	{r4, r5, r6}
 8000b28:	4770      	bx	lr
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;
 8000b2a:	2000      	movs	r0, #0
 8000b2c:	e7fb      	b.n	8000b26 <Hw_Uart_Q_Push+0x46>
 8000b2e:	bf00      	nop
 8000b30:	20000698 	.word	0x20000698
 8000b34:	20000688 	.word	0x20000688
 8000b38:	20000590 	.word	0x20000590

08000b3c <Hw_Uart_Q_Pop>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
 8000b3c:	b470      	push	{r4, r5, r6}
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 8000b3e:	4c12      	ldr	r4, [pc, #72]	; (8000b88 <Hw_Uart_Q_Pop+0x4c>)
 8000b40:	4a12      	ldr	r2, [pc, #72]	; (8000b8c <Hw_Uart_Q_Pop+0x50>)
 8000b42:	f834 6010 	ldrh.w	r6, [r4, r0, lsl #1]
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
 8000b46:	4603      	mov	r3, r0
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 8000b48:	f932 0010 	ldrsh.w	r0, [r2, r0, lsl #1]
 8000b4c:	b235      	sxth	r5, r6
 8000b4e:	1b40      	subs	r0, r0, r5
 8000b50:	3020      	adds	r0, #32
 8000b52:	17c2      	asrs	r2, r0, #31
 8000b54:	0ed2      	lsrs	r2, r2, #27
 8000b56:	1880      	adds	r0, r0, r2
 8000b58:	f000 001f 	and.w	r0, r0, #31
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;
 8000b5c:	1a80      	subs	r0, r0, r2
 8000b5e:	d010      	beq.n	8000b82 <Hw_Uart_Q_Pop+0x46>

	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];
 8000b60:	3601      	adds	r6, #1

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;
 8000b62:	b236      	sxth	r6, r6
 8000b64:	17f2      	asrs	r2, r6, #31
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;

	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];
 8000b66:	eb03 1043 	add.w	r0, r3, r3, lsl #5

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;
 8000b6a:	0ed2      	lsrs	r2, r2, #27
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;

	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];
 8000b6c:	1945      	adds	r5, r0, r5
 8000b6e:	4808      	ldr	r0, [pc, #32]	; (8000b90 <Hw_Uart_Q_Pop+0x54>)

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;
 8000b70:	18b6      	adds	r6, r6, r2
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;

	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];
 8000b72:	5d40      	ldrb	r0, [r0, r5]

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;
 8000b74:	f006 061f 	and.w	r6, r6, #31
 8000b78:	1ab2      	subs	r2, r6, r2
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;

	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];
 8000b7a:	7008      	strb	r0, [r1, #0]

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;

    return TRUE;
 8000b7c:	2001      	movs	r0, #1
{
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;

	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;
 8000b7e:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]

    return TRUE;
}
 8000b82:	bc70      	pop	{r4, r5, r6}
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	20000688 	.word	0x20000688
 8000b8c:	20000698 	.word	0x20000698
 8000b90:	20000590 	.word	0x20000590

08000b94 <Hw_Led_Init>:
{
	u32 PinNum;

	//-- JTAG 핀을 Disable하고 PB3,4를 GPIO로 사용한다.(핀구성에 따라 사용하지 않을수 있음)
	//
	REG_AFIO_MAPR &= ~(0x07 << 24);
 8000b94:	2304      	movs	r3, #4
 8000b96:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 8000ba0:	601a      	str	r2, [r3, #0]
	REG_AFIO_MAPR |=  (0x04 << 24);
 8000ba2:	681a      	ldr	r2, [r3, #0]
 8000ba4:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8000ba8:	601a      	str	r2, [r3, #0]
 8000baa:	4770      	bx	lr

08000bac <Hw_VCom_Init>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_VCom_Init( void )
{
 8000bac:	b508      	push	{r3, lr}
	Hw_VCom_Q_Init();
 8000bae:	f640 4335 	movw	r3, #3125	; 0xc35
 8000bb2:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000bb6:	4798      	blx	r3


	Hw_VCom_RxdFuncPtr = NULL;
 8000bb8:	f240 63a8 	movw	r3, #1704	; 0x6a8
 8000bbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]

	Disable_ISR();
 8000bc4:	b672      	cpsid	i
	Set_System();
 8000bc6:	f241 531d 	movw	r3, #5405	; 0x151d
 8000bca:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000bce:	4798      	blx	r3
	Set_USBClock();
 8000bd0:	f241 533d 	movw	r3, #5437	; 0x153d
 8000bd4:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000bd8:	4798      	blx	r3
	USB_Interrupts_Config();
 8000bda:	f241 5381 	movw	r3, #5505	; 0x1581
 8000bde:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000be2:	4798      	blx	r3
	USB_Init();	
 8000be4:	f242 132d 	movw	r3, #8493	; 0x212d
 8000be8:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000bec:	4798      	blx	r3

	Enable_ISR();
 8000bee:	b662      	cpsie	i
 8000bf0:	bd08      	pop	{r3, pc}
 8000bf2:	bf00      	nop

08000bf4 <Hw_VCom_Getch>:
			: 시리얼 포트에서 문자 1바이트 읽는다.
     ARG
     RET
---------------------------------------------------------------------------*/
u8 Hw_VCom_Getch( void )
{
 8000bf4:	b510      	push	{r4, lr}
	u8 Uart_GetData = 0;
 8000bf6:	2300      	movs	r3, #0
			: 시리얼 포트에서 문자 1바이트 읽는다.
     ARG
     RET
---------------------------------------------------------------------------*/
u8 Hw_VCom_Getch( void )
{
 8000bf8:	b082      	sub	sp, #8
 8000bfa:	4c08      	ldr	r4, [pc, #32]	; (8000c1c <Hw_VCom_Getch+0x28>)
	u8 Uart_GetData = 0;
 8000bfc:	f88d 3007 	strb.w	r3, [sp, #7]

	while( 1 )
	{
		// 버퍼에 데이터 들어올때까지 기다린다.
		if( HW_VCOM_Q_VAILD(0) > 0 ) break;
 8000c00:	2000      	movs	r0, #0
 8000c02:	47a0      	blx	r4
 8000c04:	2800      	cmp	r0, #0
 8000c06:	d0fb      	beq.n	8000c00 <Hw_VCom_Getch+0xc>
	}

	Hw_VCom_Q_Pop( 0, &Uart_GetData );
 8000c08:	2000      	movs	r0, #0
 8000c0a:	f10d 0107 	add.w	r1, sp, #7
 8000c0e:	4b04      	ldr	r3, [pc, #16]	; (8000c20 <Hw_VCom_Getch+0x2c>)
 8000c10:	4798      	blx	r3

	return Uart_GetData;
}
 8000c12:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8000c16:	b002      	add	sp, #8
 8000c18:	bd10      	pop	{r4, pc}
 8000c1a:	bf00      	nop
 8000c1c:	08000c4d 	.word	0x08000c4d
 8000c20:	08000cd9 	.word	0x08000cd9

08000c24 <Hw_VCom_Putch>:
			: 시리얼 포트로 문자 1바이트 전송
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_VCom_Putch( char Uart_PutData )
{
 8000c24:	b508      	push	{r3, lr}
	USB_Send_Data( Uart_PutData );
 8000c26:	f241 7331 	movw	r3, #5937	; 0x1731
 8000c2a:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000c2e:	4798      	blx	r3
 8000c30:	bd08      	pop	{r3, pc}
 8000c32:	bf00      	nop

08000c34 <Hw_VCom_Q_Init>:
{
	u8 i;

	for( i=0; i<HW_VCOM_Q_CH_MAX; i++ )
	{
		Hw_VCom_Q_Start[i] = Hw_VCom_Q_End[i] = 0;
 8000c34:	f640 22b0 	movw	r2, #2736	; 0xab0
 8000c38:	f640 23b4 	movw	r3, #2740	; 0xab4
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000c42:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000c46:	8011      	strh	r1, [r2, #0]
 8000c48:	8019      	strh	r1, [r3, #0]
 8000c4a:	4770      	bx	lr

08000c4c <HW_VCOM_Q_VAILD>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_VCOM_Q_SIZE( u8 Ch )
{
	return (Hw_VCom_Q_Start[Ch] - Hw_VCom_Q_End[Ch] + HW_VCOM_Q_BUFFER_MAX) % HW_VCOM_Q_BUFFER_MAX;
 8000c4c:	f640 22b4 	movw	r2, #2740	; 0xab4
 8000c50:	f640 23b0 	movw	r3, #2736	; 0xab0
 8000c54:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000c58:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000c5c:	f932 2010 	ldrsh.w	r2, [r2, r0, lsl #1]
 8000c60:	f933 3010 	ldrsh.w	r3, [r3, r0, lsl #1]
 8000c64:	1ad3      	subs	r3, r2, r3
 8000c66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000c6a:	17d8      	asrs	r0, r3, #31
 8000c6c:	0d80      	lsrs	r0, r0, #22
 8000c6e:	181b      	adds	r3, r3, r0
 8000c70:	059b      	lsls	r3, r3, #22
 8000c72:	0d9b      	lsrs	r3, r3, #22
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_VCOM_Q_VAILD( u8 Ch )
{
	return HW_VCOM_Q_SIZE(Ch);
}
 8000c74:	1a18      	subs	r0, r3, r0
 8000c76:	4770      	bx	lr

08000c78 <Hw_VCom_Q_Push>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_VCom_Q_Push( u8 Ch, u8  *PushData )
{
 8000c78:	b470      	push	{r4, r5, r6}
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_VCOM_Q_SIZE( u8 Ch )
{
	return (Hw_VCom_Q_Start[Ch] - Hw_VCom_Q_End[Ch] + HW_VCOM_Q_BUFFER_MAX) % HW_VCOM_Q_BUFFER_MAX;
 8000c7a:	4c14      	ldr	r4, [pc, #80]	; (8000ccc <Hw_VCom_Q_Push+0x54>)
 8000c7c:	4b14      	ldr	r3, [pc, #80]	; (8000cd0 <Hw_VCom_Q_Push+0x58>)
 8000c7e:	f834 6010 	ldrh.w	r6, [r4, r0, lsl #1]
 8000c82:	f933 3010 	ldrsh.w	r3, [r3, r0, lsl #1]
 8000c86:	b235      	sxth	r5, r6
 8000c88:	1aeb      	subs	r3, r5, r3
 8000c8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000c8e:	17da      	asrs	r2, r3, #31
 8000c90:	0d92      	lsrs	r2, r2, #22
 8000c92:	189b      	adds	r3, r3, r2
 8000c94:	059b      	lsls	r3, r3, #22
 8000c96:	0d9b      	lsrs	r3, r3, #22
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_VCom_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_VCOM_Q_SIZE(Ch) == (HW_VCOM_Q_BUFFER_MAX-1)) return FALSE;
 8000c98:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8000c9c:	429a      	cmp	r2, r3
 8000c9e:	d012      	beq.n	8000cc6 <Hw_VCom_Q_Push+0x4e>

	Hw_VCom_Q_Buffer[Ch][Hw_VCom_Q_Start[Ch]++]  = *PushData;
 8000ca0:	3601      	adds	r6, #1
	Hw_VCom_Q_Start[Ch] 						%= HW_VCOM_Q_BUFFER_MAX;
 8000ca2:	b236      	sxth	r6, r6
 8000ca4:	17f2      	asrs	r2, r6, #31
 8000ca6:	0d92      	lsrs	r2, r2, #22
 8000ca8:	18b3      	adds	r3, r6, r2
 8000caa:	059b      	lsls	r3, r3, #22
 8000cac:	0d9b      	lsrs	r3, r3, #22
u8 Hw_VCom_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_VCOM_Q_SIZE(Ch) == (HW_VCOM_Q_BUFFER_MAX-1)) return FALSE;

	Hw_VCom_Q_Buffer[Ch][Hw_VCom_Q_Start[Ch]++]  = *PushData;
 8000cae:	7809      	ldrb	r1, [r1, #0]
 8000cb0:	eb00 2680 	add.w	r6, r0, r0, lsl #10
	Hw_VCom_Q_Start[Ch] 						%= HW_VCOM_Q_BUFFER_MAX;
 8000cb4:	1a9b      	subs	r3, r3, r2
u8 Hw_VCom_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_VCOM_Q_SIZE(Ch) == (HW_VCOM_Q_BUFFER_MAX-1)) return FALSE;

	Hw_VCom_Q_Buffer[Ch][Hw_VCom_Q_Start[Ch]++]  = *PushData;
 8000cb6:	4a07      	ldr	r2, [pc, #28]	; (8000cd4 <Hw_VCom_Q_Push+0x5c>)
 8000cb8:	1975      	adds	r5, r6, r5
	Hw_VCom_Q_Start[Ch] 						%= HW_VCOM_Q_BUFFER_MAX;
 8000cba:	f824 3010 	strh.w	r3, [r4, r0, lsl #1]
u8 Hw_VCom_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_VCOM_Q_SIZE(Ch) == (HW_VCOM_Q_BUFFER_MAX-1)) return FALSE;

	Hw_VCom_Q_Buffer[Ch][Hw_VCom_Q_Start[Ch]++]  = *PushData;
 8000cbe:	5551      	strb	r1, [r2, r5]
	Hw_VCom_Q_Start[Ch] 						%= HW_VCOM_Q_BUFFER_MAX;

	return TRUE;
 8000cc0:	2001      	movs	r0, #1
}
 8000cc2:	bc70      	pop	{r4, r5, r6}
 8000cc4:	4770      	bx	lr
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_VCom_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_VCOM_Q_SIZE(Ch) == (HW_VCOM_Q_BUFFER_MAX-1)) return FALSE;
 8000cc6:	2000      	movs	r0, #0
 8000cc8:	e7fb      	b.n	8000cc2 <Hw_VCom_Q_Push+0x4a>
 8000cca:	bf00      	nop
 8000ccc:	20000ab4 	.word	0x20000ab4
 8000cd0:	20000ab0 	.word	0x20000ab0
 8000cd4:	200006ac 	.word	0x200006ac

08000cd8 <Hw_VCom_Q_Pop>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_VCom_Q_Pop( u8 Ch, u8 *pData )
{
 8000cd8:	b470      	push	{r4, r5, r6}
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_VCOM_Q_SIZE( u8 Ch )
{
	return (Hw_VCom_Q_Start[Ch] - Hw_VCom_Q_End[Ch] + HW_VCOM_Q_BUFFER_MAX) % HW_VCOM_Q_BUFFER_MAX;
 8000cda:	4c12      	ldr	r4, [pc, #72]	; (8000d24 <Hw_VCom_Q_Pop+0x4c>)
 8000cdc:	4b12      	ldr	r3, [pc, #72]	; (8000d28 <Hw_VCom_Q_Pop+0x50>)
 8000cde:	f834 6010 	ldrh.w	r6, [r4, r0, lsl #1]
 8000ce2:	f933 3010 	ldrsh.w	r3, [r3, r0, lsl #1]
 8000ce6:	b235      	sxth	r5, r6
 8000ce8:	1b5b      	subs	r3, r3, r5
 8000cea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_VCom_Q_Pop( u8 Ch, u8 *pData )
{
 8000cee:	4602      	mov	r2, r0
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_VCOM_Q_SIZE( u8 Ch )
{
	return (Hw_VCom_Q_Start[Ch] - Hw_VCom_Q_End[Ch] + HW_VCOM_Q_BUFFER_MAX) % HW_VCOM_Q_BUFFER_MAX;
 8000cf0:	17d8      	asrs	r0, r3, #31
 8000cf2:	0d80      	lsrs	r0, r0, #22
 8000cf4:	181b      	adds	r3, r3, r0
 8000cf6:	059b      	lsls	r3, r3, #22
 8000cf8:	0d9b      	lsrs	r3, r3, #22
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_VCom_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_VCOM_Q_SIZE(Ch) == 0) return FALSE;
 8000cfa:	1a18      	subs	r0, r3, r0
 8000cfc:	d010      	beq.n	8000d20 <Hw_VCom_Q_Pop+0x48>

	*pData = Hw_VCom_Q_Buffer[Ch][Hw_VCom_Q_End[Ch]++];
 8000cfe:	3601      	adds	r6, #1

	Hw_VCom_Q_End[Ch] %= HW_VCOM_Q_BUFFER_MAX;
 8000d00:	b236      	sxth	r6, r6
 8000d02:	17f3      	asrs	r3, r6, #31
 8000d04:	0d9b      	lsrs	r3, r3, #22
---------------------------------------------------------------------------*/
u8 Hw_VCom_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_VCOM_Q_SIZE(Ch) == 0) return FALSE;

	*pData = Hw_VCom_Q_Buffer[Ch][Hw_VCom_Q_End[Ch]++];
 8000d06:	eb02 2082 	add.w	r0, r2, r2, lsl #10
 8000d0a:	1945      	adds	r5, r0, r5

	Hw_VCom_Q_End[Ch] %= HW_VCOM_Q_BUFFER_MAX;
 8000d0c:	18f6      	adds	r6, r6, r3
---------------------------------------------------------------------------*/
u8 Hw_VCom_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_VCOM_Q_SIZE(Ch) == 0) return FALSE;

	*pData = Hw_VCom_Q_Buffer[Ch][Hw_VCom_Q_End[Ch]++];
 8000d0e:	4807      	ldr	r0, [pc, #28]	; (8000d2c <Hw_VCom_Q_Pop+0x54>)

	Hw_VCom_Q_End[Ch] %= HW_VCOM_Q_BUFFER_MAX;
 8000d10:	05b6      	lsls	r6, r6, #22
---------------------------------------------------------------------------*/
u8 Hw_VCom_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_VCOM_Q_SIZE(Ch) == 0) return FALSE;

	*pData = Hw_VCom_Q_Buffer[Ch][Hw_VCom_Q_End[Ch]++];
 8000d12:	5d40      	ldrb	r0, [r0, r5]

	Hw_VCom_Q_End[Ch] %= HW_VCOM_Q_BUFFER_MAX;
 8000d14:	0db6      	lsrs	r6, r6, #22
 8000d16:	1af6      	subs	r6, r6, r3
---------------------------------------------------------------------------*/
u8 Hw_VCom_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_VCOM_Q_SIZE(Ch) == 0) return FALSE;

	*pData = Hw_VCom_Q_Buffer[Ch][Hw_VCom_Q_End[Ch]++];
 8000d18:	7008      	strb	r0, [r1, #0]

	Hw_VCom_Q_End[Ch] %= HW_VCOM_Q_BUFFER_MAX;

    return TRUE;
 8000d1a:	2001      	movs	r0, #1
{
	if (HW_VCOM_Q_SIZE(Ch) == 0) return FALSE;

	*pData = Hw_VCom_Q_Buffer[Ch][Hw_VCom_Q_End[Ch]++];

	Hw_VCom_Q_End[Ch] %= HW_VCOM_Q_BUFFER_MAX;
 8000d1c:	f824 6012 	strh.w	r6, [r4, r2, lsl #1]

    return TRUE;
}
 8000d20:	bc70      	pop	{r4, r5, r6}
 8000d22:	4770      	bx	lr
 8000d24:	20000ab0 	.word	0x20000ab0
 8000d28:	20000ab4 	.word	0x20000ab4
 8000d2c:	200006ac 	.word	0x200006ac

08000d30 <EP1_IN_Callback>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void EP1_IN_Callback (void)
{
 8000d30:	b538      	push	{r3, r4, r5, lr}
  uint16_t USB_Tx_ptr;
  uint16_t USB_Tx_length;
  
  if (USB_Tx_State == 1)
 8000d32:	4b15      	ldr	r3, [pc, #84]	; (8000d88 <EP1_IN_Callback+0x58>)
 8000d34:	781a      	ldrb	r2, [r3, #0]
 8000d36:	2a01      	cmp	r2, #1
 8000d38:	d000      	beq.n	8000d3c <EP1_IN_Callback+0xc>
 8000d3a:	bd38      	pop	{r3, r4, r5, pc}
  {
    if (USART_Rx_length == 0) 
 8000d3c:	4c13      	ldr	r4, [pc, #76]	; (8000d8c <EP1_IN_Callback+0x5c>)
 8000d3e:	6820      	ldr	r0, [r4, #0]
 8000d40:	b300      	cbz	r0, 8000d84 <EP1_IN_Callback+0x54>
    {
      USB_Tx_State = 0;
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
 8000d42:	2840      	cmp	r0, #64	; 0x40
        USB_Tx_ptr = USART_Rx_ptr_out;
 8000d44:	4a12      	ldr	r2, [pc, #72]	; (8000d90 <EP1_IN_Callback+0x60>)
    {
      USB_Tx_State = 0;
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
 8000d46:	d814      	bhi.n	8000d72 <EP1_IN_Callback+0x42>
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
        USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;    
      }
      else 
      {
        USB_Tx_ptr = USART_Rx_ptr_out;
 8000d48:	6813      	ldr	r3, [r2, #0]
        USB_Tx_length = USART_Rx_length;
 8000d4a:	b285      	uxth	r5, r0
        
        USART_Rx_ptr_out += USART_Rx_length;
 8000d4c:	1818      	adds	r0, r3, r0
 8000d4e:	6010      	str	r0, [r2, #0]
        USART_Rx_length = 0;
 8000d50:	2200      	movs	r2, #0
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
        USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;    
      }
      else 
      {
        USB_Tx_ptr = USART_Rx_ptr_out;
 8000d52:	b29b      	uxth	r3, r3
        USB_Tx_length = USART_Rx_length;
        
        USART_Rx_ptr_out += USART_Rx_length;
        USART_Rx_length = 0;
 8000d54:	6022      	str	r2, [r4, #0]
      }
      UserToPMABufferCopy(&USART_Rx_Buffer[USB_Tx_ptr], ENDP1_TXADDR, USB_Tx_length);
 8000d56:	480f      	ldr	r0, [pc, #60]	; (8000d94 <EP1_IN_Callback+0x64>)
 8000d58:	21c0      	movs	r1, #192	; 0xc0
 8000d5a:	18c0      	adds	r0, r0, r3
 8000d5c:	462a      	mov	r2, r5
 8000d5e:	4b0e      	ldr	r3, [pc, #56]	; (8000d98 <EP1_IN_Callback+0x68>)
 8000d60:	4798      	blx	r3
      SetEPTxCount(ENDP1, USB_Tx_length);
 8000d62:	2001      	movs	r0, #1
 8000d64:	4629      	mov	r1, r5
 8000d66:	4b0d      	ldr	r3, [pc, #52]	; (8000d9c <EP1_IN_Callback+0x6c>)
 8000d68:	4798      	blx	r3
      SetEPTxValid(ENDP1); 
 8000d6a:	2001      	movs	r0, #1
 8000d6c:	4b0c      	ldr	r3, [pc, #48]	; (8000da0 <EP1_IN_Callback+0x70>)
 8000d6e:	4798      	blx	r3
 8000d70:	bd38      	pop	{r3, r4, r5, pc}
      USB_Tx_State = 0;
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
        USB_Tx_ptr = USART_Rx_ptr_out;
 8000d72:	6813      	ldr	r3, [r2, #0]
        USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
        
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
        USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;    
 8000d74:	3840      	subs	r0, #64	; 0x40
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
        USB_Tx_ptr = USART_Rx_ptr_out;
        USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
        
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
 8000d76:	f103 0140 	add.w	r1, r3, #64	; 0x40
        USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;    
 8000d7a:	6020      	str	r0, [r4, #0]
      USB_Tx_State = 0;
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
        USB_Tx_ptr = USART_Rx_ptr_out;
 8000d7c:	b29b      	uxth	r3, r3
        USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
        
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
 8000d7e:	6011      	str	r1, [r2, #0]
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
        USB_Tx_ptr = USART_Rx_ptr_out;
        USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
 8000d80:	2540      	movs	r5, #64	; 0x40
 8000d82:	e7e8      	b.n	8000d56 <EP1_IN_Callback+0x26>
  
  if (USB_Tx_State == 1)
  {
    if (USART_Rx_length == 0) 
    {
      USB_Tx_State = 0;
 8000d84:	7018      	strb	r0, [r3, #0]
 8000d86:	bd38      	pop	{r3, r4, r5, pc}
 8000d88:	200002cc 	.word	0x200002cc
 8000d8c:	200002d8 	.word	0x200002d8
 8000d90:	200002d4 	.word	0x200002d4
 8000d94:	20000b24 	.word	0x20000b24
 8000d98:	08002171 	.word	0x08002171
 8000d9c:	080023b1 	.word	0x080023b1
 8000da0:	08002275 	.word	0x08002275

08000da4 <EP3_OUT_Callback>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void EP3_OUT_Callback(void)
{
 8000da4:	b510      	push	{r4, lr}
  uint16_t USB_Rx_Cnt;
  
  /* Get the received data buffer and update the counter */
  USB_Rx_Cnt = USB_SIL_Read(EP3_OUT, USB_Rx_Buffer);
 8000da6:	f640 24bc 	movw	r4, #2748	; 0xabc
 8000daa:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8000dae:	f242 4371 	movw	r3, #9329	; 0x2471
 8000db2:	4621      	mov	r1, r4
 8000db4:	2003      	movs	r0, #3
 8000db6:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000dba:	4798      	blx	r3
  
  /* USB data will be immediately processed, this allow next USB traffic being 
  NAKed till the end of the USART Xfer */
  
  USB_To_USART_Send_Data(USB_Rx_Buffer, USB_Rx_Cnt);
 8000dbc:	f241 634d 	movw	r3, #5709	; 0x164d
 8000dc0:	b2c1      	uxtb	r1, r0
 8000dc2:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000dc6:	4620      	mov	r0, r4
 8000dc8:	4798      	blx	r3


  /* Enable the receive of data on EP3 */
  SetEPRxValid(ENDP3);
 8000dca:	f242 2399 	movw	r3, #8857	; 0x2299
 8000dce:	2003      	movs	r0, #3
 8000dd0:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000dd4:	4798      	blx	r3
 8000dd6:	bd10      	pop	{r4, pc}

08000dd8 <SOF_Callback>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SOF_Callback(void)
{
 8000dd8:	b508      	push	{r3, lr}
  static uint32_t FrameCount = 0;
  
  if(bDeviceState == CONFIGURED)
 8000dda:	4b08      	ldr	r3, [pc, #32]	; (8000dfc <SOF_Callback+0x24>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	2b05      	cmp	r3, #5
 8000de0:	d000      	beq.n	8000de4 <SOF_Callback+0xc>
 8000de2:	bd08      	pop	{r3, pc}
  {
    if (FrameCount++ == VCOMPORT_IN_FRAME_INTERVAL)
 8000de4:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <SOF_Callback+0x28>)
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	1c51      	adds	r1, r2, #1
 8000dea:	2a05      	cmp	r2, #5
 8000dec:	6019      	str	r1, [r3, #0]
 8000dee:	d1f8      	bne.n	8000de2 <SOF_Callback+0xa>
    {
      /* Reset the frame counter */
      FrameCount = 0;
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
      
      /* Check the data to be sent through IN pipe */
      Handle_USBAsynchXfer();
 8000df4:	4b03      	ldr	r3, [pc, #12]	; (8000e04 <SOF_Callback+0x2c>)
 8000df6:	4798      	blx	r3
 8000df8:	e7f3      	b.n	8000de2 <SOF_Callback+0xa>
 8000dfa:	bf00      	nop
 8000dfc:	200002c0 	.word	0x200002c0
 8000e00:	200002ac 	.word	0x200002ac
 8000e04:	0800168d 	.word	0x0800168d

08000e08 <USB_Istr>:
void USB_Istr(void)
{
    uint32_t i=0;
 __IO uint32_t EP[8];
  
  wIstr = _GetISTR();
 8000e08:	f645 4244 	movw	r2, #23620	; 0x5c44
 8000e0c:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8000e10:	6813      	ldr	r3, [r2, #0]
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Istr(void)
{
 8000e12:	b570      	push	{r4, r5, r6, lr}
    uint32_t i=0;
 __IO uint32_t EP[8];
  
  wIstr = _GetISTR();
 8000e14:	4c6b      	ldr	r4, [pc, #428]	; (8000fc4 <USB_Istr+0x1bc>)
 8000e16:	b29b      	uxth	r3, r3

  //Lb_printf("%x %x %x %x  \r\n", wIstr >> 16, wIstr & 0x0000FFFF, wInterrupt_Mask >> 16, wInterrupt_Mask&0x0000FFFF);

#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
 8000e18:	4d6b      	ldr	r5, [pc, #428]	; (8000fc8 <USB_Istr+0x1c0>)
void USB_Istr(void)
{
    uint32_t i=0;
 __IO uint32_t EP[8];
  
  wIstr = _GetISTR();
 8000e1a:	8023      	strh	r3, [r4, #0]

  //Lb_printf("%x %x %x %x  \r\n", wIstr >> 16, wIstr & 0x0000FFFF, wInterrupt_Mask >> 16, wInterrupt_Mask&0x0000FFFF);

#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
 8000e1c:	8821      	ldrh	r1, [r4, #0]
 8000e1e:	882b      	ldrh	r3, [r5, #0]
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Istr(void)
{
 8000e20:	b088      	sub	sp, #32
  wIstr = _GetISTR();

  //Lb_printf("%x %x %x %x  \r\n", wIstr >> 16, wIstr & 0x0000FFFF, wInterrupt_Mask >> 16, wInterrupt_Mask&0x0000FFFF);

#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
 8000e22:	4019      	ands	r1, r3
 8000e24:	f401 7100 	and.w	r1, r1, #512	; 0x200
 8000e28:	b289      	uxth	r1, r1
 8000e2a:	2900      	cmp	r1, #0
 8000e2c:	d168      	bne.n	8000f00 <USB_Istr+0xf8>
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  
  
#if (IMR_MSK & ISTR_CTR)
  if (wIstr & ISTR_CTR & wInterrupt_Mask)
 8000e2e:	8822      	ldrh	r2, [r4, #0]
 8000e30:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8000e34:	4213      	tst	r3, r2
 8000e36:	d15f      	bne.n	8000ef8 <USB_Istr+0xf0>
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  
#if (IMR_MSK & ISTR_RESET)
  if (wIstr & ISTR_RESET & wInterrupt_Mask)
 8000e38:	8822      	ldrh	r2, [r4, #0]
 8000e3a:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8000e3e:	4213      	tst	r3, r2
 8000e40:	d14e      	bne.n	8000ee0 <USB_Istr+0xd8>
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_ERR)
  if (wIstr & ISTR_ERR & wInterrupt_Mask)
 8000e42:	8822      	ldrh	r2, [r4, #0]
 8000e44:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8000e48:	4213      	tst	r3, r2
  {
    _SetISTR((uint16_t)CLR_ERR);
 8000e4a:	bf1f      	itttt	ne
 8000e4c:	f645 4244 	movwne	r2, #23620	; 0x5c44
 8000e50:	f2c4 0200 	movtne	r2, #16384	; 0x4000
 8000e54:	f64d 71ff 	movwne	r1, #57343	; 0xdfff
 8000e58:	6011      	strne	r1, [r2, #0]
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_WKUP)
  if (wIstr & ISTR_WKUP & wInterrupt_Mask)
 8000e5a:	8822      	ldrh	r2, [r4, #0]
 8000e5c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8000e60:	4213      	tst	r3, r2
 8000e62:	d131      	bne.n	8000ec8 <USB_Istr+0xc0>
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_SUSP)
  if (wIstr & ISTR_SUSP & wInterrupt_Mask)
 8000e64:	8822      	ldrh	r2, [r4, #0]
 8000e66:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8000e6a:	4213      	tst	r3, r2
 8000e6c:	d00e      	beq.n	8000e8c <USB_Istr+0x84>
  {
	//Lb_printf(" in susp ");
    /* check if SUSPEND is possible */
    if(fSuspendEnabled)
 8000e6e:	4b57      	ldr	r3, [pc, #348]	; (8000fcc <USB_Istr+0x1c4>)
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d125      	bne.n	8000ec2 <USB_Istr+0xba>
    }
    else
    {
      //Lb_printf("l\n");    	
      /* if not possible then resume after xx ms */
      Resume(RESUME_LATER);
 8000e76:	2002      	movs	r0, #2
 8000e78:	4b55      	ldr	r3, [pc, #340]	; (8000fd0 <USB_Istr+0x1c8>)
 8000e7a:	4798      	blx	r3
    }
    
    //Lb_printf(" out susp ");
    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    _SetISTR((uint16_t)CLR_SUSP);
 8000e7c:	f645 4244 	movw	r2, #23620	; 0x5c44
 8000e80:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8000e84:	f24f 71ff 	movw	r1, #63487	; 0xf7ff
 8000e88:	882b      	ldrh	r3, [r5, #0]
 8000e8a:	6011      	str	r1, [r2, #0]
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/

#if (IMR_MSK & ISTR_ESOF)
  if (wIstr & ISTR_ESOF & wInterrupt_Mask)
 8000e8c:	8822      	ldrh	r2, [r4, #0]
 8000e8e:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8000e92:	4213      	tst	r3, r2
 8000e94:	d013      	beq.n	8000ebe <USB_Istr+0xb6>
  {
    /* clear ESOF flag in ISTR */
    _SetISTR((uint16_t)CLR_ESOF);
 8000e96:	f645 4244 	movw	r2, #23620	; 0x5c44
 8000e9a:	f64f 61ff 	movw	r1, #65279	; 0xfeff
 8000e9e:	f2c4 0200 	movt	r2, #16384	; 0x4000
    
    if ((_GetFNR()&FNR_RXDP)!=0)
 8000ea2:	f645 4348 	movw	r3, #23624	; 0x5c48

#if (IMR_MSK & ISTR_ESOF)
  if (wIstr & ISTR_ESOF & wInterrupt_Mask)
  {
    /* clear ESOF flag in ISTR */
    _SetISTR((uint16_t)CLR_ESOF);
 8000ea6:	6011      	str	r1, [r2, #0]
    
    if ((_GetFNR()&FNR_RXDP)!=0)
 8000ea8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	0419      	lsls	r1, r3, #16
 8000eb0:	d432      	bmi.n	8000f18 <USB_Istr+0x110>
        esof_counter = 0;
      }
    }
    else
    {
        esof_counter = 0;
 8000eb2:	4b48      	ldr	r3, [pc, #288]	; (8000fd4 <USB_Istr+0x1cc>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
    }
    
    /* resume handling timing is made with ESOFs */
    Resume(RESUME_ESOF); /* request without change of the machine state */
 8000eb8:	2007      	movs	r0, #7
 8000eba:	4b45      	ldr	r3, [pc, #276]	; (8000fd0 <USB_Istr+0x1c8>)
 8000ebc:	4798      	blx	r3
#ifdef ESOF_CALLBACK
    ESOF_Callback();
#endif
  }
#endif
} /* USB_Istr */
 8000ebe:	b008      	add	sp, #32
 8000ec0:	bd70      	pop	{r4, r5, r6, pc}
	//Lb_printf(" in susp ");
    /* check if SUSPEND is possible */
    if(fSuspendEnabled)
    {
      //Lb_printf("k\n");
      Suspend();
 8000ec2:	4b45      	ldr	r3, [pc, #276]	; (8000fd8 <USB_Istr+0x1d0>)
 8000ec4:	4798      	blx	r3
 8000ec6:	e7d9      	b.n	8000e7c <USB_Istr+0x74>
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_WKUP)
  if (wIstr & ISTR_WKUP & wInterrupt_Mask)
  {
    _SetISTR((uint16_t)CLR_WKUP);
 8000ec8:	f645 4344 	movw	r3, #23620	; 0x5c44
 8000ecc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000ed0:	f64e 72ff 	movw	r2, #61439	; 0xefff
 8000ed4:	601a      	str	r2, [r3, #0]
    Resume(RESUME_EXTERNAL);
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	4b3d      	ldr	r3, [pc, #244]	; (8000fd0 <USB_Istr+0x1c8>)
 8000eda:	4798      	blx	r3
 8000edc:	882b      	ldrh	r3, [r5, #0]
 8000ede:	e7c1      	b.n	8000e64 <USB_Istr+0x5c>
#if (IMR_MSK & ISTR_RESET)
  if (wIstr & ISTR_RESET & wInterrupt_Mask)
  {
  	//Lb_printf(" ISTR_RESET ");
  	
    _SetISTR((uint16_t)CLR_RESET);
 8000ee0:	f645 4344 	movw	r3, #23620	; 0x5c44
 8000ee4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000ee8:	f64f 32ff 	movw	r2, #64511	; 0xfbff
 8000eec:	601a      	str	r2, [r3, #0]
    Device_Property.Reset();
 8000eee:	4b3b      	ldr	r3, [pc, #236]	; (8000fdc <USB_Istr+0x1d4>)
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	4798      	blx	r3
 8000ef4:	882b      	ldrh	r3, [r5, #0]
 8000ef6:	e7a4      	b.n	8000e42 <USB_Istr+0x3a>
#if (IMR_MSK & ISTR_CTR)
  if (wIstr & ISTR_CTR & wInterrupt_Mask)
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    CTR_LP();
 8000ef8:	4b39      	ldr	r3, [pc, #228]	; (8000fe0 <USB_Istr+0x1d8>)
 8000efa:	4798      	blx	r3
 8000efc:	882b      	ldrh	r3, [r5, #0]
 8000efe:	e79b      	b.n	8000e38 <USB_Istr+0x30>
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
  {
	//Lb_printf(" ISTR_SOF ");

    _SetISTR((uint16_t)CLR_SOF);
    bIntPackSOF++;
 8000f00:	4b38      	ldr	r3, [pc, #224]	; (8000fe4 <USB_Istr+0x1dc>)
#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
  {
	//Lb_printf(" ISTR_SOF ");

    _SetISTR((uint16_t)CLR_SOF);
 8000f02:	f64f 51ff 	movw	r1, #65023	; 0xfdff
 8000f06:	6011      	str	r1, [r2, #0]
    bIntPackSOF++;
 8000f08:	781a      	ldrb	r2, [r3, #0]
 8000f0a:	3201      	adds	r2, #1
 8000f0c:	b2d2      	uxtb	r2, r2
 8000f0e:	701a      	strb	r2, [r3, #0]

#ifdef SOF_CALLBACK
    SOF_Callback();
 8000f10:	4b35      	ldr	r3, [pc, #212]	; (8000fe8 <USB_Istr+0x1e0>)
 8000f12:	4798      	blx	r3
 8000f14:	882b      	ldrh	r3, [r5, #0]
 8000f16:	e78a      	b.n	8000e2e <USB_Istr+0x26>
    _SetISTR((uint16_t)CLR_ESOF);
    
    if ((_GetFNR()&FNR_RXDP)!=0)
    {
      /* increment ESOF counter */
      esof_counter ++;
 8000f18:	492e      	ldr	r1, [pc, #184]	; (8000fd4 <USB_Istr+0x1cc>)
 8000f1a:	680b      	ldr	r3, [r1, #0]
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	600b      	str	r3, [r1, #0]
      
      /* test if we enter in ESOF more than 3 times with FSUSP =0 and RXDP =1=>> possible missing SUSP flag*/
      if ((esof_counter >3)&&((_GetCNTR()&CNTR_FSUSP)==0))
 8000f20:	680b      	ldr	r3, [r1, #0]
 8000f22:	2b03      	cmp	r3, #3
 8000f24:	d9c8      	bls.n	8000eb8 <USB_Istr+0xb0>
 8000f26:	f645 4240 	movw	r2, #23616	; 0x5c40
 8000f2a:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8000f2e:	6813      	ldr	r3, [r2, #0]
 8000f30:	f013 0308 	ands.w	r3, r3, #8
 8000f34:	d1c0      	bne.n	8000eb8 <USB_Istr+0xb0>
      {           
        /* this a sequence to apply a force RESET*/
      
        /*Store CNTR value */
        wCNTR = _GetCNTR(); 
 8000f36:	6810      	ldr	r0, [r2, #0]
 8000f38:	4d2c      	ldr	r5, [pc, #176]	; (8000fec <USB_Istr+0x1e4>)
 8000f3a:	b280      	uxth	r0, r0
 8000f3c:	f44f 42b8 	mov.w	r2, #23552	; 0x5c00
 8000f40:	6028      	str	r0, [r5, #0]
 8000f42:	f2c4 0200 	movt	r2, #16384	; 0x4000
      
        /*Store endpoints registers status */
        for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 8000f46:	f852 4b04 	ldr.w	r4, [r2], #4
 8000f4a:	ae08      	add	r6, sp, #32
 8000f4c:	eb06 0083 	add.w	r0, r6, r3, lsl #2
 8000f50:	3301      	adds	r3, #1
 8000f52:	b2a4      	uxth	r4, r4
 8000f54:	2b08      	cmp	r3, #8
 8000f56:	f840 4c20 	str.w	r4, [r0, #-32]
 8000f5a:	d1f4      	bne.n	8000f46 <USB_Istr+0x13e>
      
        /*apply FRES */
        wCNTR|=CNTR_FRES;
 8000f5c:	682a      	ldr	r2, [r5, #0]
        _SetCNTR(wCNTR);
 8000f5e:	f645 4340 	movw	r3, #23616	; 0x5c40
      
        /*Store endpoints registers status */
        for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
      
        /*apply FRES */
        wCNTR|=CNTR_FRES;
 8000f62:	f042 0201 	orr.w	r2, r2, #1
 8000f66:	602a      	str	r2, [r5, #0]
        _SetCNTR(wCNTR);
 8000f68:	682a      	ldr	r2, [r5, #0]
 8000f6a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000f6e:	b292      	uxth	r2, r2
 8000f70:	601a      	str	r2, [r3, #0]
 
        /*clear FRES*/
        wCNTR&=~CNTR_FRES;
 8000f72:	682a      	ldr	r2, [r5, #0]
        _SetCNTR(wCNTR);
      
        /*poll for RESET flag in ISTR*/
        while((_GetISTR()&ISTR_RESET) == 0);
 8000f74:	f645 4044 	movw	r0, #23620	; 0x5c44
        /*apply FRES */
        wCNTR|=CNTR_FRES;
        _SetCNTR(wCNTR);
 
        /*clear FRES*/
        wCNTR&=~CNTR_FRES;
 8000f78:	f022 0201 	bic.w	r2, r2, #1
 8000f7c:	602a      	str	r2, [r5, #0]
        _SetCNTR(wCNTR);
 8000f7e:	682a      	ldr	r2, [r5, #0]
      
        /*poll for RESET flag in ISTR*/
        while((_GetISTR()&ISTR_RESET) == 0);
 8000f80:	f2c4 0000 	movt	r0, #16384	; 0x4000
        wCNTR|=CNTR_FRES;
        _SetCNTR(wCNTR);
 
        /*clear FRES*/
        wCNTR&=~CNTR_FRES;
        _SetCNTR(wCNTR);
 8000f84:	b292      	uxth	r2, r2
 8000f86:	601a      	str	r2, [r3, #0]
      
        /*poll for RESET flag in ISTR*/
        while((_GetISTR()&ISTR_RESET) == 0);
 8000f88:	6802      	ldr	r2, [r0, #0]
 8000f8a:	f645 4344 	movw	r3, #23620	; 0x5c44
 8000f8e:	0552      	lsls	r2, r2, #21
 8000f90:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000f94:	d5f8      	bpl.n	8000f88 <USB_Istr+0x180>
  
        /* clear RESET flag in ISTR */
        _SetISTR((uint16_t)CLR_RESET);
 8000f96:	f44f 42b8 	mov.w	r2, #23552	; 0x5c00
 8000f9a:	f64f 30ff 	movw	r0, #64511	; 0xfbff
 8000f9e:	6018      	str	r0, [r3, #0]
 8000fa0:	f2c4 0200 	movt	r2, #16384	; 0x4000
   
       /*restore Enpoints*/
        for (i=0;i<8;i++)
 8000fa4:	2300      	movs	r3, #0
        _SetENDPOINT(i, EP[i]);
 8000fa6:	ac08      	add	r4, sp, #32
 8000fa8:	eb04 0083 	add.w	r0, r4, r3, lsl #2
 8000fac:	f850 0c20 	ldr.w	r0, [r0, #-32]
  
        /* clear RESET flag in ISTR */
        _SetISTR((uint16_t)CLR_RESET);
   
       /*restore Enpoints*/
        for (i=0;i<8;i++)
 8000fb0:	3301      	adds	r3, #1
        _SetENDPOINT(i, EP[i]);
 8000fb2:	b280      	uxth	r0, r0
  
        /* clear RESET flag in ISTR */
        _SetISTR((uint16_t)CLR_RESET);
   
       /*restore Enpoints*/
        for (i=0;i<8;i++)
 8000fb4:	2b08      	cmp	r3, #8
        _SetENDPOINT(i, EP[i]);
 8000fb6:	f842 0b04 	str.w	r0, [r2], #4
  
        /* clear RESET flag in ISTR */
        _SetISTR((uint16_t)CLR_RESET);
   
       /*restore Enpoints*/
        for (i=0;i<8;i++)
 8000fba:	d1f4      	bne.n	8000fa6 <USB_Istr+0x19e>
        _SetENDPOINT(i, EP[i]);
      
        esof_counter = 0;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	600b      	str	r3, [r1, #0]
 8000fc0:	e77a      	b.n	8000eb8 <USB_Istr+0xb0>
 8000fc2:	bf00      	nop
 8000fc4:	20000afc 	.word	0x20000afc
 8000fc8:	20001358 	.word	0x20001358
 8000fcc:	200002c4 	.word	0x200002c4
 8000fd0:	08001405 	.word	0x08001405
 8000fd4:	200002b8 	.word	0x200002b8
 8000fd8:	080012d5 	.word	0x080012d5
 8000fdc:	2000005c 	.word	0x2000005c
 8000fe0:	080024a9 	.word	0x080024a9
 8000fe4:	200002b4 	.word	0x200002b4
 8000fe8:	08000dd9 	.word	0x08000dd9
 8000fec:	200002b0 	.word	0x200002b0

08000ff0 <Virtual_Com_Port_SetConfiguration>:
*******************************************************************************/
void Virtual_Com_Port_SetConfiguration(void)
{
  DEVICE_INFO *pInfo = &Device_Info;

  if (pInfo->Current_Configuration != 0)
 8000ff0:	4b03      	ldr	r3, [pc, #12]	; (8001000 <Virtual_Com_Port_SetConfiguration+0x10>)
 8000ff2:	7a9b      	ldrb	r3, [r3, #10]
 8000ff4:	b113      	cbz	r3, 8000ffc <Virtual_Com_Port_SetConfiguration+0xc>
  {
    /* Device configured */
    bDeviceState = CONFIGURED;
 8000ff6:	4b03      	ldr	r3, [pc, #12]	; (8001004 <Virtual_Com_Port_SetConfiguration+0x14>)
 8000ff8:	2205      	movs	r2, #5
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	20001334 	.word	0x20001334
 8001004:	200002c0 	.word	0x200002c0

08001008 <Virtual_Com_Port_SetDeviceAddress>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_SetDeviceAddress (void)
{
  bDeviceState = ADDRESSED;
 8001008:	f240 23c0 	movw	r3, #704	; 0x2c0
 800100c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001010:	2204      	movs	r2, #4
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <Virtual_Com_Port_Status_In>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Status_In(void)
{
  if (Request == SET_LINE_CODING)
 8001018:	4b03      	ldr	r3, [pc, #12]	; (8001028 <Virtual_Com_Port_Status_In+0x10>)
 800101a:	781a      	ldrb	r2, [r3, #0]
 800101c:	2a20      	cmp	r2, #32
 800101e:	d101      	bne.n	8001024 <Virtual_Com_Port_Status_In+0xc>
  {
    //USART_Config();
    Request = 0;
 8001020:	2200      	movs	r2, #0
 8001022:	701a      	strb	r2, [r3, #0]
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	200002bc 	.word	0x200002bc

0800102c <Virtual_Com_Port_Status_Out>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Status_Out(void)
{}
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop

08001030 <Virtual_Com_Port_Data_Setup>:
{
  uint8_t    *(*CopyRoutine)(uint16_t);

  CopyRoutine = NULL;

  if (RequestNo == GET_LINE_CODING)
 8001030:	2821      	cmp	r0, #33	; 0x21
* Input          : Request Nb.
* Output         : None.
* Return         : USB_UNSUPPORT or USB_SUCCESS.
*******************************************************************************/
RESULT Virtual_Com_Port_Data_Setup(uint8_t RequestNo)
{
 8001032:	b510      	push	{r4, lr}
 8001034:	4603      	mov	r3, r0
  uint8_t    *(*CopyRoutine)(uint16_t);

  CopyRoutine = NULL;

  if (RequestNo == GET_LINE_CODING)
 8001036:	d003      	beq.n	8001040 <Virtual_Com_Port_Data_Setup+0x10>
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    {
      CopyRoutine = Virtual_Com_Port_GetLineCoding;
    }
  }
  else if (RequestNo == SET_LINE_CODING)
 8001038:	2820      	cmp	r0, #32
 800103a:	d011      	beq.n	8001060 <Virtual_Com_Port_Data_Setup+0x30>
    Request = SET_LINE_CODING;
  }

  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
 800103c:	2002      	movs	r0, #2
 800103e:	bd10      	pop	{r4, pc}

  CopyRoutine = NULL;

  if (RequestNo == GET_LINE_CODING)
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 8001040:	4a0f      	ldr	r2, [pc, #60]	; (8001080 <Virtual_Com_Port_Data_Setup+0x50>)
 8001042:	6813      	ldr	r3, [r2, #0]
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800104a:	2b21      	cmp	r3, #33	; 0x21
 800104c:	d1f6      	bne.n	800103c <Virtual_Com_Port_Data_Setup+0xc>
    {
      CopyRoutine = Virtual_Com_Port_GetLineCoding;
 800104e:	490d      	ldr	r1, [pc, #52]	; (8001084 <Virtual_Com_Port_Data_Setup+0x54>)
  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
  }

  pInformation->Ctrl_Info.CopyData = CopyRoutine;
 8001050:	6813      	ldr	r3, [r2, #0]
  pInformation->Ctrl_Info.Usb_wOffset = 0;
 8001052:	2400      	movs	r4, #0
  (*CopyRoutine)(0);
 8001054:	4620      	mov	r0, r4
  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
  }

  pInformation->Ctrl_Info.CopyData = CopyRoutine;
 8001056:	6199      	str	r1, [r3, #24]
  pInformation->Ctrl_Info.Usb_wOffset = 0;
 8001058:	825c      	strh	r4, [r3, #18]
  (*CopyRoutine)(0);
 800105a:	4788      	blx	r1
  return USB_SUCCESS;
 800105c:	4620      	mov	r0, r4
 800105e:	bd10      	pop	{r4, pc}
      CopyRoutine = Virtual_Com_Port_GetLineCoding;
    }
  }
  else if (RequestNo == SET_LINE_CODING)
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 8001060:	4a07      	ldr	r2, [pc, #28]	; (8001080 <Virtual_Com_Port_Data_Setup+0x50>)
 8001062:	6811      	ldr	r1, [r2, #0]
 8001064:	7809      	ldrb	r1, [r1, #0]
 8001066:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800106a:	2921      	cmp	r1, #33	; 0x21
 800106c:	d003      	beq.n	8001076 <Virtual_Com_Port_Data_Setup+0x46>
    {
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
    }
    Request = SET_LINE_CODING;
 800106e:	4a06      	ldr	r2, [pc, #24]	; (8001088 <Virtual_Com_Port_Data_Setup+0x58>)
  }

  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
 8001070:	2002      	movs	r0, #2
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    {
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
    }
    Request = SET_LINE_CODING;
 8001072:	7013      	strb	r3, [r2, #0]

  pInformation->Ctrl_Info.CopyData = CopyRoutine;
  pInformation->Ctrl_Info.Usb_wOffset = 0;
  (*CopyRoutine)(0);
  return USB_SUCCESS;
}
 8001074:	bd10      	pop	{r4, pc}
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    {
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
    }
    Request = SET_LINE_CODING;
 8001076:	4804      	ldr	r0, [pc, #16]	; (8001088 <Virtual_Com_Port_Data_Setup+0x58>)
  }
  else if (RequestNo == SET_LINE_CODING)
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    {
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
 8001078:	4904      	ldr	r1, [pc, #16]	; (800108c <Virtual_Com_Port_Data_Setup+0x5c>)
    }
    Request = SET_LINE_CODING;
 800107a:	7003      	strb	r3, [r0, #0]
 800107c:	e7e8      	b.n	8001050 <Virtual_Com_Port_Data_Setup+0x20>
 800107e:	bf00      	nop
 8001080:	20001354 	.word	0x20001354
 8001084:	080010c5 	.word	0x080010c5
 8001088:	200002bc 	.word	0x200002bc
 800108c:	080010dd 	.word	0x080010dd

08001090 <Virtual_Com_Port_NoData_Setup>:
* Return         : USB_UNSUPPORT or USB_SUCCESS.
*******************************************************************************/
RESULT Virtual_Com_Port_NoData_Setup(uint8_t RequestNo)
{

  if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 8001090:	4b07      	ldr	r3, [pc, #28]	; (80010b0 <Virtual_Com_Port_NoData_Setup+0x20>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800109a:	2b21      	cmp	r3, #33	; 0x21
 800109c:	d001      	beq.n	80010a2 <Virtual_Com_Port_NoData_Setup+0x12>
    {
      return USB_SUCCESS;
    }
  }

  return USB_UNSUPPORT;
 800109e:	2002      	movs	r0, #2
}
 80010a0:	4770      	bx	lr
RESULT Virtual_Com_Port_NoData_Setup(uint8_t RequestNo)
{

  if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
  {
    if (RequestNo == SET_COMM_FEATURE)
 80010a2:	2802      	cmp	r0, #2
 80010a4:	d001      	beq.n	80010aa <Virtual_Com_Port_NoData_Setup+0x1a>
    {
      return USB_SUCCESS;
    }
    else if (RequestNo == SET_CONTROL_LINE_STATE)
 80010a6:	2822      	cmp	r0, #34	; 0x22
 80010a8:	d1f9      	bne.n	800109e <Virtual_Com_Port_NoData_Setup+0xe>

  if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
  {
    if (RequestNo == SET_COMM_FEATURE)
    {
      return USB_SUCCESS;
 80010aa:	2000      	movs	r0, #0
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	20001354 	.word	0x20001354

080010b4 <Virtual_Com_Port_Get_Interface_Setting>:
* Output         : None.
* Return         : The address of the string descriptors.
*******************************************************************************/
RESULT Virtual_Com_Port_Get_Interface_Setting(uint8_t Interface, uint8_t AlternateSetting)
{
  if (AlternateSetting > 0)
 80010b4:	b109      	cbz	r1, 80010ba <Virtual_Com_Port_Get_Interface_Setting+0x6>
  {
    return USB_UNSUPPORT;
 80010b6:	2002      	movs	r0, #2
 80010b8:	4770      	bx	lr
  }
  else if (Interface > 1)
 80010ba:	2801      	cmp	r0, #1
 80010bc:	d8fb      	bhi.n	80010b6 <Virtual_Com_Port_Get_Interface_Setting+0x2>
  {
    return USB_UNSUPPORT;
  }
  return USB_SUCCESS;
 80010be:	4608      	mov	r0, r1
}
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop

080010c4 <Virtual_Com_Port_GetLineCoding>:
* Output         : None.
* Return         : Linecoding structure base address.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetLineCoding(uint16_t Length)
{
  if (Length == 0)
 80010c4:	b108      	cbz	r0, 80010ca <Virtual_Com_Port_GetLineCoding+0x6>
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
    return NULL;
  }
  return(uint8_t *)&linecoding;
 80010c6:	4803      	ldr	r0, [pc, #12]	; (80010d4 <Virtual_Com_Port_GetLineCoding+0x10>)
}
 80010c8:	4770      	bx	lr
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetLineCoding(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
 80010ca:	4b03      	ldr	r3, [pc, #12]	; (80010d8 <Virtual_Com_Port_GetLineCoding+0x14>)
 80010cc:	2208      	movs	r2, #8
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	821a      	strh	r2, [r3, #16]
    return NULL;
 80010d2:	4770      	bx	lr
 80010d4:	200000d8 	.word	0x200000d8
 80010d8:	20001354 	.word	0x20001354

080010dc <Virtual_Com_Port_SetLineCoding>:
* Output         : None.
* Return         : Linecoding structure base address.
*******************************************************************************/
uint8_t *Virtual_Com_Port_SetLineCoding(uint16_t Length)
{
  if (Length == 0)
 80010dc:	b108      	cbz	r0, 80010e2 <Virtual_Com_Port_SetLineCoding+0x6>
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
    return NULL;
  }
  return(uint8_t *)&linecoding;
 80010de:	4803      	ldr	r0, [pc, #12]	; (80010ec <Virtual_Com_Port_SetLineCoding+0x10>)
}
 80010e0:	4770      	bx	lr
*******************************************************************************/
uint8_t *Virtual_Com_Port_SetLineCoding(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
 80010e2:	4b03      	ldr	r3, [pc, #12]	; (80010f0 <Virtual_Com_Port_SetLineCoding+0x14>)
 80010e4:	2208      	movs	r2, #8
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	821a      	strh	r2, [r3, #16]
    return NULL;
 80010ea:	4770      	bx	lr
 80010ec:	200000d8 	.word	0x200000d8
 80010f0:	20001354 	.word	0x20001354

080010f4 <Virtual_Com_Port_GetStringDescriptor>:
* Input          : Length.
* Output         : None.
* Return         : The address of the string descriptors.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetStringDescriptor(uint16_t Length)
{
 80010f4:	b508      	push	{r3, lr}
  uint8_t wValue0 = pInformation->USBwValue0;
 80010f6:	4b06      	ldr	r3, [pc, #24]	; (8001110 <Virtual_Com_Port_GetStringDescriptor+0x1c>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	78db      	ldrb	r3, [r3, #3]
  if (wValue0 > 4)
 80010fc:	2b04      	cmp	r3, #4
 80010fe:	d805      	bhi.n	800110c <Virtual_Com_Port_GetStringDescriptor+0x18>
  {
    return NULL;
  }
  else
  {
    return Standard_GetDescriptorData(Length, &String_Descriptor[wValue0]);
 8001100:	4904      	ldr	r1, [pc, #16]	; (8001114 <Virtual_Com_Port_GetStringDescriptor+0x20>)
 8001102:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8001106:	4b04      	ldr	r3, [pc, #16]	; (8001118 <Virtual_Com_Port_GetStringDescriptor+0x24>)
 8001108:	4798      	blx	r3
 800110a:	bd08      	pop	{r3, pc}
uint8_t *Virtual_Com_Port_GetStringDescriptor(uint16_t Length)
{
  uint8_t wValue0 = pInformation->USBwValue0;
  if (wValue0 > 4)
  {
    return NULL;
 800110c:	2000      	movs	r0, #0
  }
  else
  {
    return Standard_GetDescriptorData(Length, &String_Descriptor[wValue0]);
  }
}
 800110e:	bd08      	pop	{r3, pc}
 8001110:	20001354 	.word	0x20001354
 8001114:	200000b8 	.word	0x200000b8
 8001118:	08001b85 	.word	0x08001b85

0800111c <Virtual_Com_Port_GetConfigDescriptor>:
* Input          : Length.
* Output         : None.
* Return         : The address of the configuration descriptor.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetConfigDescriptor(uint16_t Length)
{
 800111c:	b508      	push	{r3, lr}
  return Standard_GetDescriptorData(Length, &Config_Descriptor);
 800111e:	f240 0154 	movw	r1, #84	; 0x54
 8001122:	f641 3385 	movw	r3, #7045	; 0x1b85
 8001126:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800112a:	f6c0 0300 	movt	r3, #2048	; 0x800
 800112e:	4798      	blx	r3
}
 8001130:	bd08      	pop	{r3, pc}
 8001132:	bf00      	nop

08001134 <Virtual_Com_Port_GetDeviceDescriptor>:
* Input          : Length.
* Output         : None.
* Return         : The address of the device descriptor.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetDeviceDescriptor(uint16_t Length)
{
 8001134:	b508      	push	{r3, lr}
  return Standard_GetDescriptorData(Length, &Device_Descriptor);
 8001136:	f240 01b0 	movw	r1, #176	; 0xb0
 800113a:	f641 3385 	movw	r3, #7045	; 0x1b85
 800113e:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8001142:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001146:	4798      	blx	r3
}
 8001148:	bd08      	pop	{r3, pc}
 800114a:	bf00      	nop

0800114c <Virtual_Com_Port_Reset>:
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 800114c:	f241 3254 	movw	r2, #4948	; 0x1354

  /* Current Feature initialization */
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 8001150:	f642 0338 	movw	r3, #10296	; 0x2838
 8001154:	f6c0 0300 	movt	r3, #2048	; 0x800
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 8001158:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800115c:	6812      	ldr	r2, [r2, #0]

  /* Current Feature initialization */
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 800115e:	79d9      	ldrb	r1, [r3, #7]
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
 8001160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];

  /* Set Virtual_Com_Port DEVICE with the default Interface*/
  pInformation->Current_Interface = 0;

  SetBTABLE(BTABLE_ADDRESS);
 8001164:	f242 13c9 	movw	r3, #8649	; 0x21c9
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 8001168:	2400      	movs	r4, #0

  /* Current Feature initialization */
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 800116a:	7251      	strb	r1, [r2, #9]
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 800116c:	7294      	strb	r4, [r2, #10]

  /* Current Feature initialization */
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];

  /* Set Virtual_Com_Port DEVICE with the default Interface*/
  pInformation->Current_Interface = 0;
 800116e:	72d4      	strb	r4, [r2, #11]

  SetBTABLE(BTABLE_ADDRESS);
 8001170:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001174:	4620      	mov	r0, r4

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
 8001176:	f242 16dd 	movw	r6, #8669	; 0x21dd
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];

  /* Set Virtual_Com_Port DEVICE with the default Interface*/
  pInformation->Current_Interface = 0;

  SetBTABLE(BTABLE_ADDRESS);
 800117a:	4798      	blx	r3

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
 800117c:	f6c0 0600 	movt	r6, #2048	; 0x800
 8001180:	4620      	mov	r0, r4
 8001182:	f44f 7100 	mov.w	r1, #512	; 0x200
  SetEPTxStatus(ENDP0, EP_TX_STALL);
 8001186:	f242 15f5 	movw	r5, #8693	; 0x21f5
  pInformation->Current_Interface = 0;

  SetBTABLE(BTABLE_ADDRESS);

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
 800118a:	47b0      	blx	r6
  SetEPTxStatus(ENDP0, EP_TX_STALL);
 800118c:	f6c0 0500 	movt	r5, #2048	; 0x800
 8001190:	2110      	movs	r1, #16
 8001192:	4620      	mov	r0, r4
  SetEPRxAddr(ENDP0, ENDP0_RXADDR);
 8001194:	f242 3a49 	movw	sl, #9033	; 0x2349

  SetBTABLE(BTABLE_ADDRESS);

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
  SetEPTxStatus(ENDP0, EP_TX_STALL);
 8001198:	47a8      	blx	r5
  SetEPRxAddr(ENDP0, ENDP0_RXADDR);
 800119a:	f6c0 0a00 	movt	sl, #2048	; 0x800
 800119e:	2140      	movs	r1, #64	; 0x40
 80011a0:	4620      	mov	r0, r4
  SetEPTxAddr(ENDP0, ENDP0_TXADDR);
 80011a2:	f242 3825 	movw	r8, #8997	; 0x2325
  SetBTABLE(BTABLE_ADDRESS);

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
  SetEPTxStatus(ENDP0, EP_TX_STALL);
  SetEPRxAddr(ENDP0, ENDP0_RXADDR);
 80011a6:	47d0      	blx	sl
  SetEPTxAddr(ENDP0, ENDP0_TXADDR);
 80011a8:	f6c0 0800 	movt	r8, #2048	; 0x800
 80011ac:	2180      	movs	r1, #128	; 0x80
 80011ae:	4620      	mov	r0, r4
 80011b0:	47c0      	blx	r8
  Clear_Status_Out(ENDP0);
 80011b2:	f242 23bd 	movw	r3, #8893	; 0x22bd
 80011b6:	4620      	mov	r0, r4
 80011b8:	f6c0 0300 	movt	r3, #2048	; 0x800
 80011bc:	4798      	blx	r3
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 80011be:	f240 035c 	movw	r3, #92	; 0x5c
 80011c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80011c6:	f242 39d1 	movw	r9, #9169	; 0x23d1
 80011ca:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
 80011ce:	f6c0 0900 	movt	r9, #2048	; 0x800
 80011d2:	4620      	mov	r0, r4
 80011d4:	47c8      	blx	r9
  SetEPRxValid(ENDP0);
 80011d6:	f242 2399 	movw	r3, #8857	; 0x2299
 80011da:	f6c0 0300 	movt	r3, #2048	; 0x800
 80011de:	4620      	mov	r0, r4
 80011e0:	4798      	blx	r3

  /* Initialize Endpoint 1 */
  SetEPType(ENDP1, EP_BULK);
 80011e2:	2001      	movs	r0, #1
 80011e4:	4621      	mov	r1, r4
 80011e6:	47b0      	blx	r6
  SetEPTxAddr(ENDP1, ENDP1_TXADDR);
 80011e8:	2001      	movs	r0, #1
 80011ea:	21c0      	movs	r1, #192	; 0xc0
 80011ec:	47c0      	blx	r8
  SetEPTxStatus(ENDP1, EP_TX_NAK);
  SetEPRxStatus(ENDP1, EP_RX_DIS);
 80011ee:	f242 2735 	movw	r7, #8757	; 0x2235
  SetEPRxValid(ENDP0);

  /* Initialize Endpoint 1 */
  SetEPType(ENDP1, EP_BULK);
  SetEPTxAddr(ENDP1, ENDP1_TXADDR);
  SetEPTxStatus(ENDP1, EP_TX_NAK);
 80011f2:	2001      	movs	r0, #1
 80011f4:	2120      	movs	r1, #32
 80011f6:	47a8      	blx	r5
  SetEPRxStatus(ENDP1, EP_RX_DIS);
 80011f8:	f6c0 0700 	movt	r7, #2048	; 0x800
 80011fc:	2001      	movs	r0, #1
 80011fe:	4621      	mov	r1, r4
 8001200:	47b8      	blx	r7

  /* Initialize Endpoint 2 */
  SetEPType(ENDP2, EP_INTERRUPT);
 8001202:	2002      	movs	r0, #2
 8001204:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8001208:	47b0      	blx	r6
  SetEPTxAddr(ENDP2, ENDP2_TXADDR);
 800120a:	2002      	movs	r0, #2
 800120c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001210:	47c0      	blx	r8
  SetEPRxStatus(ENDP2, EP_RX_DIS);
 8001212:	2002      	movs	r0, #2
 8001214:	4621      	mov	r1, r4
 8001216:	47b8      	blx	r7
  SetEPTxStatus(ENDP2, EP_TX_NAK);
 8001218:	2002      	movs	r0, #2
 800121a:	2120      	movs	r1, #32
 800121c:	47a8      	blx	r5

  /* Initialize Endpoint 3 */
  SetEPType(ENDP3, EP_BULK);
 800121e:	2003      	movs	r0, #3
 8001220:	4621      	mov	r1, r4
 8001222:	47b0      	blx	r6
  SetEPRxAddr(ENDP3, ENDP3_RXADDR);
 8001224:	2003      	movs	r0, #3
 8001226:	f44f 7188 	mov.w	r1, #272	; 0x110
 800122a:	47d0      	blx	sl
  SetEPRxCount(ENDP3, VIRTUAL_COM_PORT_DATA_SIZE);
 800122c:	2003      	movs	r0, #3
 800122e:	2140      	movs	r1, #64	; 0x40
 8001230:	47c8      	blx	r9
  SetEPRxStatus(ENDP3, EP_RX_VALID);
 8001232:	2003      	movs	r0, #3
 8001234:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8001238:	47b8      	blx	r7
  SetEPTxStatus(ENDP3, EP_TX_DIS);
 800123a:	4621      	mov	r1, r4
 800123c:	2003      	movs	r0, #3
 800123e:	47a8      	blx	r5

  /* Set this device to response on default address */
  SetDeviceAddress(0);
 8001240:	f242 0379 	movw	r3, #8313	; 0x2079
 8001244:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001248:	4620      	mov	r0, r4
 800124a:	4798      	blx	r3
  
  bDeviceState = ATTACHED;
 800124c:	f240 23c0 	movw	r3, #704	; 0x2c0
 8001250:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001254:	2201      	movs	r2, #1
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800125c <Virtual_Com_Port_init>:
void Virtual_Com_Port_init(void)
{

  /* Update the serial number string descriptor with the data from the unique
  ID*/
  Get_SerialNum();
 800125c:	f241 7369 	movw	r3, #5993	; 0x1769
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_init(void)
{
 8001260:	b510      	push	{r4, lr}

  /* Update the serial number string descriptor with the data from the unique
  ID*/
  Get_SerialNum();
 8001262:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001266:	4798      	blx	r3

  pInformation->Current_Configuration = 0;
 8001268:	f241 3354 	movw	r3, #4948	; 0x1354
 800126c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	2400      	movs	r4, #0

  /* Connect the device */
  PowerOn();
 8001274:	f241 2399 	movw	r3, #4761	; 0x1299

  /* Update the serial number string descriptor with the data from the unique
  ID*/
  Get_SerialNum();

  pInformation->Current_Configuration = 0;
 8001278:	7294      	strb	r4, [r2, #10]

  /* Connect the device */
  PowerOn();
 800127a:	f6c0 0300 	movt	r3, #2048	; 0x800
 800127e:	4798      	blx	r3

  /* Perform basic device initialization operations */
  USB_SIL_Init();
 8001280:	f242 4345 	movw	r3, #9285	; 0x2445
 8001284:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001288:	4798      	blx	r3

  /* configure the USART to the default settings */
  //USART_Config_Default();

  bDeviceState = UNCONNECTED;
 800128a:	f240 23c0 	movw	r3, #704	; 0x2c0
 800128e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001292:	601c      	str	r4, [r3, #0]
 8001294:	bd10      	pop	{r4, pc}
 8001296:	bf00      	nop

08001298 <PowerOn>:
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
RESULT PowerOn(void)
{
 8001298:	b538      	push	{r3, r4, r5, lr}
  uint16_t wRegVal;

  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);
 800129a:	f241 6331 	movw	r3, #5681	; 0x1631
 800129e:	2001      	movs	r0, #1
 80012a0:	f6c0 0300 	movt	r3, #2048	; 0x800
 80012a4:	4798      	blx	r3

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
  /*** Clear pending interrupts ***/
  _SetISTR(0);
 80012a6:	f645 4544 	movw	r5, #23620	; 0x5c44
  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);

  /*** CNTR_PWDN = 0 ***/
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);
 80012aa:	f645 4340 	movw	r3, #23616	; 0x5c40
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
  /*** Clear pending interrupts ***/
  _SetISTR(0);
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 80012ae:	f241 3258 	movw	r2, #4952	; 0x1358
  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);

  /*** CNTR_PWDN = 0 ***/
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);
 80012b2:	f2c4 0300 	movt	r3, #16384	; 0x4000

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
 80012b6:	2100      	movs	r1, #0
  /*** Clear pending interrupts ***/
  _SetISTR(0);
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 80012b8:	f44f 54e0 	mov.w	r4, #7168	; 0x1c00
  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);

  /*** CNTR_PWDN = 0 ***/
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);
 80012bc:	2001      	movs	r0, #1

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
  /*** Clear pending interrupts ***/
  _SetISTR(0);
 80012be:	f2c4 0500 	movt	r5, #16384	; 0x4000
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 80012c2:	f2c2 0200 	movt	r2, #8192	; 0x2000
  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);

  /*** CNTR_PWDN = 0 ***/
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);
 80012c6:	6018      	str	r0, [r3, #0]

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
 80012c8:	6019      	str	r1, [r3, #0]
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
  _SetCNTR(wInterrupt_Mask);
  
  return USB_SUCCESS;
}
 80012ca:	4608      	mov	r0, r1

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
  /*** Clear pending interrupts ***/
  _SetISTR(0);
 80012cc:	6029      	str	r1, [r5, #0]
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 80012ce:	8014      	strh	r4, [r2, #0]
  _SetCNTR(wInterrupt_Mask);
 80012d0:	601c      	str	r4, [r3, #0]
  
  return USB_SUCCESS;
}
 80012d2:	bd38      	pop	{r3, r4, r5, pc}

080012d4 <Suspend>:
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
void Suspend(void)
{
 80012d4:	b570      	push	{r4, r5, r6, lr}
	uint32_t i =0;
	uint16_t wCNTR;
	uint32_t tmpreg = 0;
  __IO uint32_t savePWR_CR=0;
 80012d6:	2300      	movs	r3, #0
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
void Suspend(void)
{
 80012d8:	b082      	sub	sp, #8
  __IO uint32_t savePWR_CR=0;
	/* suspend preparation */
	/* ... */
	
	/*Store CNTR value */
	wCNTR = _GetCNTR();  
 80012da:	f645 4140 	movw	r1, #23616	; 0x5c40
 80012de:	f2c4 0100 	movt	r1, #16384	; 0x4000
void Suspend(void)
{
	uint32_t i =0;
	uint16_t wCNTR;
	uint32_t tmpreg = 0;
  __IO uint32_t savePWR_CR=0;
 80012e2:	9301      	str	r3, [sp, #4]
	/* suspend preparation */
	/* ... */
	
	/*Store CNTR value */
	wCNTR = _GetCNTR();  
 80012e4:	f44f 42b8 	mov.w	r2, #23552	; 0x5c00
 80012e8:	680d      	ldr	r5, [r1, #0]
 80012ea:	493a      	ldr	r1, [pc, #232]	; (80013d4 <Suspend+0x100>)
 80012ec:	f2c4 0200 	movt	r2, #16384	; 0x4000

    /* This a sequence to apply a force RESET to handle a robustness case */
    
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 80012f0:	f852 0b04 	ldr.w	r0, [r2], #4
 80012f4:	b280      	uxth	r0, r0
 80012f6:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 80012fa:	3301      	adds	r3, #1
 80012fc:	2b08      	cmp	r3, #8
 80012fe:	d1f7      	bne.n	80012f0 <Suspend+0x1c>
	
	/* unmask RESET flag */
	wCNTR|=CNTR_RESETM;
	_SetCNTR(wCNTR);
 8001300:	b2aa      	uxth	r2, r5
	/*apply FRES */
	wCNTR|=CNTR_FRES;
	_SetCNTR(wCNTR);
	
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
 8001302:	f64f 74fe 	movw	r4, #65534	; 0xfffe
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
	
	/* unmask RESET flag */
	wCNTR|=CNTR_RESETM;
	_SetCNTR(wCNTR);
 8001306:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800130a:	f645 4340 	movw	r3, #23616	; 0x5c40
	/*apply FRES */
	wCNTR|=CNTR_FRES;
	_SetCNTR(wCNTR);
	
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
 800130e:	402c      	ands	r4, r5
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
	
	/* unmask RESET flag */
	wCNTR|=CNTR_RESETM;
	_SetCNTR(wCNTR);
 8001310:	f2c4 0300 	movt	r3, #16384	; 0x4000
	
	/*apply FRES */
	wCNTR|=CNTR_FRES;
	_SetCNTR(wCNTR);
 8001314:	f042 0601 	orr.w	r6, r2, #1
	
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
 8001318:	f444 6580 	orr.w	r5, r4, #1024	; 0x400
	_SetCNTR(wCNTR);
	
	/*poll for RESET flag in ISTR*/
	while((_GetISTR()&ISTR_RESET) == 0);
 800131c:	f645 4044 	movw	r0, #23620	; 0x5c44
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
	
	/* unmask RESET flag */
	wCNTR|=CNTR_RESETM;
	_SetCNTR(wCNTR);
 8001320:	601a      	str	r2, [r3, #0]
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
	_SetCNTR(wCNTR);
	
	/*poll for RESET flag in ISTR*/
	while((_GetISTR()&ISTR_RESET) == 0);
 8001322:	f2c4 0000 	movt	r0, #16384	; 0x4000
	wCNTR|=CNTR_RESETM;
	_SetCNTR(wCNTR);
	
	/*apply FRES */
	wCNTR|=CNTR_FRES;
	_SetCNTR(wCNTR);
 8001326:	601e      	str	r6, [r3, #0]
	
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
	_SetCNTR(wCNTR);
 8001328:	601d      	str	r5, [r3, #0]
	
	/*poll for RESET flag in ISTR*/
	while((_GetISTR()&ISTR_RESET) == 0);
 800132a:	6802      	ldr	r2, [r0, #0]
 800132c:	f645 4344 	movw	r3, #23620	; 0x5c44
 8001330:	0552      	lsls	r2, r2, #21
 8001332:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001336:	d5f8      	bpl.n	800132a <Suspend+0x56>
	
	/* clear RESET flag in ISTR */
	_SetISTR((uint16_t)CLR_RESET);
 8001338:	f44f 42b8 	mov.w	r2, #23552	; 0x5c00
 800133c:	f64f 30ff 	movw	r0, #64511	; 0xfbff
 8001340:	6018      	str	r0, [r3, #0]
 8001342:	f2c4 0200 	movt	r2, #16384	; 0x4000
	
	/*restore Enpoints*/
	for (i=0;i<8;i++)
 8001346:	2300      	movs	r3, #0
	_SetENDPOINT(i, EP[i]);
 8001348:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
	
	/* clear RESET flag in ISTR */
	_SetISTR((uint16_t)CLR_RESET);
	
	/*restore Enpoints*/
	for (i=0;i<8;i++)
 800134c:	3301      	adds	r3, #1
	_SetENDPOINT(i, EP[i]);
 800134e:	b280      	uxth	r0, r0
	
	/* clear RESET flag in ISTR */
	_SetISTR((uint16_t)CLR_RESET);
	
	/*restore Enpoints*/
	for (i=0;i<8;i++)
 8001350:	2b08      	cmp	r3, #8
	_SetENDPOINT(i, EP[i]);
 8001352:	f842 0b04 	str.w	r0, [r2], #4
	
	/* clear RESET flag in ISTR */
	_SetISTR((uint16_t)CLR_RESET);
	
	/*restore Enpoints*/
	for (i=0;i<8;i++)
 8001356:	d1f7      	bne.n	8001348 <Suspend+0x74>
	_SetENDPOINT(i, EP[i]);
	
	/* Now it is safe to enter macrocell in suspend mode */
	wCNTR |= CNTR_FSUSP;
	_SetCNTR(wCNTR);
 8001358:	f645 4340 	movw	r3, #23616	; 0x5c40
 800135c:	f2c4 0300 	movt	r3, #16384	; 0x4000
	/*restore Enpoints*/
	for (i=0;i<8;i++)
	_SetENDPOINT(i, EP[i]);
	
	/* Now it is safe to enter macrocell in suspend mode */
	wCNTR |= CNTR_FSUSP;
 8001360:	f444 6481 	orr.w	r4, r4, #1032	; 0x408
	_SetCNTR(wCNTR);
 8001364:	601c      	str	r4, [r3, #0]
	
	/* force low-power mode in the macrocell */
	wCNTR = _GetCNTR();
 8001366:	6819      	ldr	r1, [r3, #0]
	wCNTR |= CNTR_LPMODE;
	_SetCNTR(wCNTR);
	
	/*prepare entry in low power mode (STOP mode)*/
	/* Select the regulator state in STOP mode*/
	savePWR_CR = REG_PWR_CR;
 8001368:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
	_SetCNTR(wCNTR);
	
	/* force low-power mode in the macrocell */
	wCNTR = _GetCNTR();
	wCNTR |= CNTR_LPMODE;
	_SetCNTR(wCNTR);
 800136c:	b289      	uxth	r1, r1
 800136e:	f041 0104 	orr.w	r1, r1, #4
 8001372:	6019      	str	r1, [r3, #0]
	
	/*prepare entry in low power mode (STOP mode)*/
	/* Select the regulator state in STOP mode*/
	savePWR_CR = REG_PWR_CR;
 8001374:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8001378:	6811      	ldr	r1, [r2, #0]
	REG_PWR_CR = tmpreg;
	/* Set SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)
        SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
#else
		REG_SCB_SCR |= SCB_SCR_SLEEPDEEP;       
 800137a:	f64e 5410 	movw	r4, #60688	; 0xed10
	wCNTR |= CNTR_LPMODE;
	_SetCNTR(wCNTR);
	
	/*prepare entry in low power mode (STOP mode)*/
	/* Select the regulator state in STOP mode*/
	savePWR_CR = REG_PWR_CR;
 800137e:	9101      	str	r1, [sp, #4]
	
	tmpreg = REG_PWR_CR;
 8001380:	6811      	ldr	r1, [r2, #0]
	REG_PWR_CR = tmpreg;
	/* Set SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)
        SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
#else
		REG_SCB_SCR |= SCB_SCR_SLEEPDEEP;       
 8001382:	f2ce 0400 	movt	r4, #57344	; 0xe000
	/* Select the regulator state in STOP mode*/
	savePWR_CR = REG_PWR_CR;
	
	tmpreg = REG_PWR_CR;
	/* Clear PDDS and LPDS bits */
	tmpreg &= ((uint32_t)0xFFFFFFFC);
 8001386:	f021 0103 	bic.w	r1, r1, #3
	/* Set LPDS bit according to PWR_Regulator value */
	tmpreg |= PWR_Regulator_LowPower;
 800138a:	f041 0101 	orr.w	r1, r1, #1
	/* Store the new value */
	REG_PWR_CR = tmpreg;
 800138e:	6011      	str	r1, [r2, #0]
	/* Set SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)
        SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
#else
		REG_SCB_SCR |= SCB_SCR_SLEEPDEEP;       
 8001390:	6820      	ldr	r0, [r4, #0]
#endif
	
	/* enter system in STOP mode, only when wakeup flag in not set */
	if((_GetISTR()&ISTR_WKUP)==0)
 8001392:	f645 4144 	movw	r1, #23620	; 0x5c44
	REG_PWR_CR = tmpreg;
	/* Set SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)
        SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
#else
		REG_SCB_SCR |= SCB_SCR_SLEEPDEEP;       
 8001396:	f040 0004 	orr.w	r0, r0, #4
 800139a:	6020      	str	r0, [r4, #0]
#endif
	
	/* enter system in STOP mode, only when wakeup flag in not set */
	if((_GetISTR()&ISTR_WKUP)==0)
 800139c:	f2c4 0100 	movt	r1, #16384	; 0x4000
 80013a0:	6808      	ldr	r0, [r1, #0]
 80013a2:	04c0      	lsls	r0, r0, #19
 80013a4:	d50f      	bpl.n	80013c6 <Suspend+0xf2>
#endif
	}
	else
	{
		/* Clear Wakeup flag */
		_SetISTR(CLR_WKUP);
 80013a6:	f64e 70ff 	movw	r0, #61439	; 0xefff
 80013aa:	6008      	str	r0, [r1, #0]
		/* clear FSUSP to abort entry in suspend mode  */
        wCNTR = _GetCNTR();
 80013ac:	6818      	ldr	r0, [r3, #0]
        wCNTR&=~CNTR_FSUSP;
 80013ae:	f64f 71f7 	movw	r1, #65527	; 0xfff7
 80013b2:	4001      	ands	r1, r0
        _SetCNTR(wCNTR);
 80013b4:	6019      	str	r1, [r3, #0]
		
		/*restore sleep mode configuration */ 
		/* restore Power regulator config in sleep mode*/
		REG_PWR_CR = savePWR_CR;
 80013b6:	9b01      	ldr	r3, [sp, #4]
 80013b8:	6013      	str	r3, [r2, #0]
		
		/* Reset SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)		
                SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
#else
                REG_SCB_SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP);
 80013ba:	6823      	ldr	r3, [r4, #0]
 80013bc:	f023 0304 	bic.w	r3, r3, #4
 80013c0:	6023      	str	r3, [r4, #0]
#endif
    }
}
 80013c2:	b002      	add	sp, #8
 80013c4:	bd70      	pop	{r4, r5, r6, pc}
#endif
	
	/* enter system in STOP mode, only when wakeup flag in not set */
	if((_GetISTR()&ISTR_WKUP)==0)
	{
		__WFI();
 80013c6:	4b04      	ldr	r3, [pc, #16]	; (80013d8 <Suspend+0x104>)
 80013c8:	4798      	blx	r3
		/* Reset SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)
                SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk); 
#else
                REG_SCB_SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP); 
 80013ca:	6823      	ldr	r3, [r4, #0]
 80013cc:	f023 0304 	bic.w	r3, r3, #4
 80013d0:	6023      	str	r3, [r4, #0]
 80013d2:	e7f6      	b.n	80013c2 <Suspend+0xee>
 80013d4:	20000b04 	.word	0x20000b04
 80013d8:	080017ad 	.word	0x080017ad

080013dc <Resume_Init>:
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
void Resume_Init(void)
{
 80013dc:	b510      	push	{r4, lr}
  /* ------------------ ONLY WITH BUS-POWERED DEVICES ---------------------- */
  /* restart the clocks */
  /* ...  */

  /* CNTR_LPMODE = 0 */
  wCNTR = _GetCNTR();
 80013de:	f645 4440 	movw	r4, #23616	; 0x5c40
 80013e2:	f2c4 0400 	movt	r4, #16384	; 0x4000
 80013e6:	6823      	ldr	r3, [r4, #0]
  wCNTR &= (~CNTR_LPMODE);
 80013e8:	f64f 72fb 	movw	r2, #65531	; 0xfffb
 80013ec:	401a      	ands	r2, r3
  _SetCNTR(wCNTR);    
  
  /* restore full power */
  /* ... on connected devices */
  Leave_LowPowerMode();
 80013ee:	f241 5361 	movw	r3, #5473	; 0x1561
 80013f2:	f6c0 0300 	movt	r3, #2048	; 0x800
  /* ...  */

  /* CNTR_LPMODE = 0 */
  wCNTR = _GetCNTR();
  wCNTR &= (~CNTR_LPMODE);
  _SetCNTR(wCNTR);    
 80013f6:	6022      	str	r2, [r4, #0]
  
  /* restore full power */
  /* ... on connected devices */
  Leave_LowPowerMode();
 80013f8:	4798      	blx	r3

  /* reset FSUSP bit */
  _SetCNTR(IMR_MSK);
 80013fa:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80013fe:	6023      	str	r3, [r4, #0]
 8001400:	bd10      	pop	{r4, pc}
 8001402:	bf00      	nop

08001404 <Resume>:
*                  decrementing of the ESOF counter in different states.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Resume(RESUME_STATE eResumeSetVal)
{
 8001404:	b510      	push	{r4, lr}
  uint16_t wCNTR;

  if (eResumeSetVal != RESUME_ESOF)
    ResumeS.eState = eResumeSetVal;
 8001406:	4c2b      	ldr	r4, [pc, #172]	; (80014b4 <Resume+0xb0>)
*******************************************************************************/
void Resume(RESUME_STATE eResumeSetVal)
{
  uint16_t wCNTR;

  if (eResumeSetVal != RESUME_ESOF)
 8001408:	2807      	cmp	r0, #7
    ResumeS.eState = eResumeSetVal;
 800140a:	bf18      	it	ne
 800140c:	7020      	strbne	r0, [r4, #0]
  switch (ResumeS.eState)
 800140e:	7823      	ldrb	r3, [r4, #0]
 8001410:	2b05      	cmp	r3, #5
 8001412:	d819      	bhi.n	8001448 <Resume+0x44>
 8001414:	e8df f003 	tbb	[pc, r3]
 8001418:	2f2a221b 	.word	0x2f2a221b
 800141c:	033a      	.short	0x033a
      _SetCNTR(wCNTR);
      ResumeS.eState = RESUME_ON;
      ResumeS.bESOFcnt = 10;
      break;
    case RESUME_ON:    
      ResumeS.bESOFcnt--;
 800141e:	7863      	ldrb	r3, [r4, #1]
 8001420:	3b01      	subs	r3, #1
 8001422:	b2db      	uxtb	r3, r3
 8001424:	7063      	strb	r3, [r4, #1]
      if (ResumeS.bESOFcnt == 0)
 8001426:	7863      	ldrb	r3, [r4, #1]
 8001428:	b983      	cbnz	r3, 800144c <Resume+0x48>
      {
        wCNTR = _GetCNTR();
 800142a:	f645 4240 	movw	r2, #23616	; 0x5c40
 800142e:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8001432:	6810      	ldr	r0, [r2, #0]
        wCNTR &= (~CNTR_RESUME);
 8001434:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8001438:	4001      	ands	r1, r0
        _SetCNTR(wCNTR);
 800143a:	6011      	str	r1, [r2, #0]
        ResumeS.eState = RESUME_OFF;
 800143c:	4a1d      	ldr	r2, [pc, #116]	; (80014b4 <Resume+0xb0>)
 800143e:	2106      	movs	r1, #6
 8001440:	7011      	strb	r1, [r2, #0]
        remotewakeupon = 0;
 8001442:	4a1d      	ldr	r2, [pc, #116]	; (80014b8 <Resume+0xb4>)
 8001444:	6013      	str	r3, [r2, #0]
 8001446:	bd10      	pop	{r4, pc}
      }
      break;
    case RESUME_OFF:
    case RESUME_ESOF:
    default:
      ResumeS.eState = RESUME_OFF;
 8001448:	2306      	movs	r3, #6
 800144a:	7023      	strb	r3, [r4, #0]
 800144c:	bd10      	pop	{r4, pc}
  if (eResumeSetVal != RESUME_ESOF)
    ResumeS.eState = eResumeSetVal;
  switch (ResumeS.eState)
  {
    case RESUME_EXTERNAL:
      if (remotewakeupon ==0)
 800144e:	4b1a      	ldr	r3, [pc, #104]	; (80014b8 <Resume+0xb4>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d028      	beq.n	80014a8 <Resume+0xa4>
        Resume_Init();
        ResumeS.eState = RESUME_OFF;
      }
      else /* RESUME detected during the RemoteWAkeup signalling => keep RemoteWakeup handling*/
      {
        ResumeS.eState = RESUME_ON;
 8001456:	2305      	movs	r3, #5
 8001458:	7023      	strb	r3, [r4, #0]
 800145a:	bd10      	pop	{r4, pc}
      }
      break;
    case RESUME_INTERNAL:
      Resume_Init();
 800145c:	4b17      	ldr	r3, [pc, #92]	; (80014bc <Resume+0xb8>)
 800145e:	4798      	blx	r3
      ResumeS.eState = RESUME_START;
 8001460:	2304      	movs	r3, #4
 8001462:	7023      	strb	r3, [r4, #0]
      remotewakeupon = 1;
 8001464:	4b14      	ldr	r3, [pc, #80]	; (80014b8 <Resume+0xb4>)
 8001466:	2201      	movs	r2, #1
 8001468:	601a      	str	r2, [r3, #0]
      break;
 800146a:	bd10      	pop	{r4, pc}
    case RESUME_LATER:
      ResumeS.bESOFcnt = 2;
 800146c:	2302      	movs	r3, #2
 800146e:	7063      	strb	r3, [r4, #1]
      ResumeS.eState = RESUME_WAIT;
 8001470:	2303      	movs	r3, #3
 8001472:	7023      	strb	r3, [r4, #0]
      break;
 8001474:	bd10      	pop	{r4, pc}
    case RESUME_WAIT:
      ResumeS.bESOFcnt--;
 8001476:	7863      	ldrb	r3, [r4, #1]
 8001478:	3b01      	subs	r3, #1
 800147a:	b2db      	uxtb	r3, r3
 800147c:	7063      	strb	r3, [r4, #1]
      if (ResumeS.bESOFcnt == 0)
 800147e:	7863      	ldrb	r3, [r4, #1]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d1e3      	bne.n	800144c <Resume+0x48>
        ResumeS.eState = RESUME_START;
 8001484:	4b0b      	ldr	r3, [pc, #44]	; (80014b4 <Resume+0xb0>)
 8001486:	2204      	movs	r2, #4
 8001488:	701a      	strb	r2, [r3, #0]
 800148a:	bd10      	pop	{r4, pc}
      break;
    case RESUME_START:
      wCNTR = _GetCNTR();
 800148c:	f645 4340 	movw	r3, #23616	; 0x5c40
 8001490:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001494:	681a      	ldr	r2, [r3, #0]
      wCNTR |= CNTR_RESUME;
      _SetCNTR(wCNTR);
 8001496:	b292      	uxth	r2, r2
 8001498:	f042 0210 	orr.w	r2, r2, #16
 800149c:	601a      	str	r2, [r3, #0]
      ResumeS.eState = RESUME_ON;
 800149e:	2305      	movs	r3, #5
 80014a0:	7023      	strb	r3, [r4, #0]
      ResumeS.bESOFcnt = 10;
 80014a2:	230a      	movs	r3, #10
 80014a4:	7063      	strb	r3, [r4, #1]
      break;
 80014a6:	bd10      	pop	{r4, pc}
  switch (ResumeS.eState)
  {
    case RESUME_EXTERNAL:
      if (remotewakeupon ==0)
      {
        Resume_Init();
 80014a8:	4b04      	ldr	r3, [pc, #16]	; (80014bc <Resume+0xb8>)
 80014aa:	4798      	blx	r3
        ResumeS.eState = RESUME_OFF;
 80014ac:	2306      	movs	r3, #6
 80014ae:	7023      	strb	r3, [r4, #0]
 80014b0:	bd10      	pop	{r4, pc}
 80014b2:	bf00      	nop
 80014b4:	20000b00 	.word	0x20000b00
 80014b8:	200002c8 	.word	0x200002c8
 80014bc:	080013dd 	.word	0x080013dd

080014c0 <USBWakeUp_IRQHandler>:


void USBWakeUp_IRQHandler(void)
{
	//EXTI_ClearITPendingBit(EXTI_Line18);
	REG_EXTI_PR = (1 << 18 );
 80014c0:	f240 4314 	movw	r3, #1044	; 0x414
 80014c4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80014c8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80014cc:	601a      	str	r2, [r3, #0]
 80014ce:	4770      	bx	lr

080014d0 <IntToUnicode>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
 80014d0:	b430      	push	{r4, r5}
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 80014d2:	b1ca      	cbz	r2, 8001508 <IntToUnicode+0x38>
* Description    : Convert Hex 32Bits value into char.
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
 80014d4:	1e55      	subs	r5, r2, #1
 80014d6:	b2ed      	uxtb	r5, r5
 80014d8:	3501      	adds	r5, #1
 80014da:	2300      	movs	r3, #0
 80014dc:	006d      	lsls	r5, r5, #1
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 80014de:	461c      	mov	r4, r3
 80014e0:	e007      	b.n	80014f2 <IntToUnicode+0x22>
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
 80014e2:	3230      	adds	r2, #48	; 0x30
 80014e4:	54ca      	strb	r2, [r1, r3]
* Description    : Convert Hex 32Bits value into char.
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
 80014e6:	18ca      	adds	r2, r1, r3
 80014e8:	3302      	adds	r3, #2
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
 80014ea:	0100      	lsls	r0, r0, #4
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 80014ec:	42ab      	cmp	r3, r5
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 80014ee:	7054      	strb	r4, [r2, #1]
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 80014f0:	d00a      	beq.n	8001508 <IntToUnicode+0x38>
  {
    if( ((value >> 28)) < 0xA )
 80014f2:	0f02      	lsrs	r2, r0, #28
 80014f4:	2a09      	cmp	r2, #9
 80014f6:	d9f4      	bls.n	80014e2 <IntToUnicode+0x12>
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 80014f8:	3237      	adds	r2, #55	; 0x37
 80014fa:	54ca      	strb	r2, [r1, r3]
* Description    : Convert Hex 32Bits value into char.
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
 80014fc:	18ca      	adds	r2, r1, r3
 80014fe:	3302      	adds	r3, #2
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
 8001500:	0100      	lsls	r0, r0, #4
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 8001502:	42ab      	cmp	r3, r5
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8001504:	7054      	strb	r4, [r2, #1]
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 8001506:	d1f4      	bne.n	80014f2 <IntToUnicode+0x22>
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
  }
}
 8001508:	bc30      	pop	{r4, r5}
 800150a:	4770      	bx	lr

0800150c <USB_LP_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void USB_LP_IRQHandler(void)
{
 800150c:	b508      	push	{r3, lr}
	//printf("USB\n");	
	USB_Istr();
 800150e:	f640 6309 	movw	r3, #3593	; 0xe09
 8001512:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001516:	4798      	blx	r3
 8001518:	bd08      	pop	{r3, pc}
 800151a:	bf00      	nop

0800151c <Set_System>:
*******************************************************************************/
void Set_System(void)
{  	
	#if HW_USE_USB_SMARTROBOT_BD == 1
	//-- PC.13
	REG_GPIOC_CRH &= ~(0x0F << (20));	// Clear
 800151c:	f241 0304 	movw	r3, #4100	; 0x1004
 8001520:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800152a:	601a      	str	r2, [r3, #0]
	REG_GPIOC_CRH |=  (0x02 << (20));	// MODE, PC.13 Output mode, max speed 2Mhz
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8001532:	601a      	str	r2, [r3, #0]
	REG_GPIOC_CRH |=  (0x00 << (22));	// CNF,  PC.13 General purpose output push-pul
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop

0800153c <Set_USBClock>:
*******************************************************************************/
void Set_USBClock(void)
{
	//-- USB 72M * 2 / 3 = 48Mhz
	//
	CLR_BIT( REG_RCC_CFGR, 22 );	
 800153c:	f241 0204 	movw	r2, #4100	; 0x1004
 8001540:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001544:	6811      	ldr	r1, [r2, #0]
	
	//-- USB Clock Enable 
	//
	SET_BIT( REG_RCC_APB1ENR, 23 );
 8001546:	f241 031c 	movw	r3, #4124	; 0x101c
*******************************************************************************/
void Set_USBClock(void)
{
	//-- USB 72M * 2 / 3 = 48Mhz
	//
	CLR_BIT( REG_RCC_CFGR, 22 );	
 800154a:	f421 0180 	bic.w	r1, r1, #4194304	; 0x400000
 800154e:	6011      	str	r1, [r2, #0]
	
	//-- USB Clock Enable 
	//
	SET_BIT( REG_RCC_APB1ENR, 23 );
 8001550:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop

08001560 <Leave_LowPowerMode>:
void Leave_LowPowerMode(void)
{
  DEVICE_INFO *pInfo = &Device_Info;

  /* Set the device state to the correct state */
  if (pInfo->Current_Configuration != 0)
 8001560:	4b05      	ldr	r3, [pc, #20]	; (8001578 <Leave_LowPowerMode+0x18>)
 8001562:	7a9b      	ldrb	r3, [r3, #10]
 8001564:	b91b      	cbnz	r3, 800156e <Leave_LowPowerMode+0xe>
    /* Device configured */
    bDeviceState = CONFIGURED;
  }
  else
  {
    bDeviceState = ATTACHED;
 8001566:	4b05      	ldr	r3, [pc, #20]	; (800157c <Leave_LowPowerMode+0x1c>)
 8001568:	2201      	movs	r2, #1
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	4770      	bx	lr

  /* Set the device state to the correct state */
  if (pInfo->Current_Configuration != 0)
  {
    /* Device configured */
    bDeviceState = CONFIGURED;
 800156e:	4b03      	ldr	r3, [pc, #12]	; (800157c <Leave_LowPowerMode+0x1c>)
 8001570:	2205      	movs	r2, #5
 8001572:	601a      	str	r2, [r3, #0]
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	20001334 	.word	0x20001334
 800157c:	200002c0 	.word	0x200002c0

08001580 <USB_Interrupts_Config>:
void USB_Interrupts_Config(void)
{

	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
 8001580:	f240 4214 	movw	r2, #1044	; 0x414
* Description    : Configures the USB interrupts
* Input          : None.
* Return         : None.
*******************************************************************************/
void USB_Interrupts_Config(void)
{
 8001584:	b538      	push	{r3, r4, r5, lr}

	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
 8001586:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800158a:	f44f 2180 	mov.w	r1, #262144	; 0x40000
	
	CLR_BIT( REG_EXTI_IMR,  18 );
 800158e:	f44f 6380 	mov.w	r3, #1024	; 0x400
void USB_Interrupts_Config(void)
{

	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
 8001592:	6011      	str	r1, [r2, #0]
	
	CLR_BIT( REG_EXTI_IMR,  18 );
 8001594:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001598:	6819      	ldr	r1, [r3, #0]
	CLR_BIT( REG_EXTI_EMR,  18 );
 800159a:	f240 4204 	movw	r2, #1028	; 0x404

	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
	
	CLR_BIT( REG_EXTI_IMR,  18 );
 800159e:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 80015a2:	6019      	str	r1, [r3, #0]
	CLR_BIT( REG_EXTI_EMR,  18 );
 80015a4:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80015a8:	6810      	ldr	r0, [r2, #0]
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
 80015aa:	f44f 6181 	mov.w	r1, #1032	; 0x408
	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
	
	CLR_BIT( REG_EXTI_IMR,  18 );
	CLR_BIT( REG_EXTI_EMR,  18 );
 80015ae:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 80015b2:	6010      	str	r0, [r2, #0]
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
 80015b4:	f2c4 0101 	movt	r1, #16385	; 0x4001
 80015b8:	6808      	ldr	r0, [r1, #0]
	CLR_BIT( REG_EXTI_FTSR, 18 );
 80015ba:	f240 420c 	movw	r2, #1036	; 0x40c
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
	
	CLR_BIT( REG_EXTI_IMR,  18 );
	CLR_BIT( REG_EXTI_EMR,  18 );
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
 80015be:	f440 2080 	orr.w	r0, r0, #262144	; 0x40000
 80015c2:	6008      	str	r0, [r1, #0]
	CLR_BIT( REG_EXTI_FTSR, 18 );
 80015c4:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80015c8:	6811      	ldr	r1, [r2, #0]
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
 80015ca:	f640 1445 	movw	r4, #2373	; 0x945
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
	
	CLR_BIT( REG_EXTI_IMR,  18 );
	CLR_BIT( REG_EXTI_EMR,  18 );
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
	CLR_BIT( REG_EXTI_FTSR, 18 );
 80015ce:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 80015d2:	6011      	str	r1, [r2, #0]
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable
 80015d4:	681d      	ldr	r5, [r3, #0]

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
 80015d6:	f241 510d 	movw	r1, #5389	; 0x150d
	
	CLR_BIT( REG_EXTI_IMR,  18 );
	CLR_BIT( REG_EXTI_EMR,  18 );
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
	CLR_BIT( REG_EXTI_FTSR, 18 );
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable
 80015da:	f445 2580 	orr.w	r5, r5, #262144	; 0x40000

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
 80015de:	2090      	movs	r0, #144	; 0x90
 80015e0:	f6c0 0100 	movt	r1, #2048	; 0x800
 80015e4:	2200      	movs	r2, #0
 80015e6:	f6c0 0400 	movt	r4, #2048	; 0x800
	
	CLR_BIT( REG_EXTI_IMR,  18 );
	CLR_BIT( REG_EXTI_EMR,  18 );
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
	CLR_BIT( REG_EXTI_FTSR, 18 );
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable
 80015ea:	601d      	str	r5, [r3, #0]

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
 80015ec:	47a0      	blx	r4
	SET_BIT( REG_NVIC_ISER( 20/32 ), 20%32 );	// NVIC 20번 USB_LP 인터럽트 활성화 
 80015ee:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 80015f2:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80015f6:	681a      	ldr	r2, [r3, #0]
	
	Hw_ISR_SetIRQFuncByAddr( 0x00E8, (u32)USBWakeUp_IRQHandler, 0 );
 80015f8:	f241 41c1 	movw	r1, #5313	; 0x14c1
	CLR_BIT( REG_EXTI_FTSR, 18 );
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
	SET_BIT( REG_NVIC_ISER( 20/32 ), 20%32 );	// NVIC 20번 USB_LP 인터럽트 활성화 
 80015fc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001600:	601a      	str	r2, [r3, #0]
	
	Hw_ISR_SetIRQFuncByAddr( 0x00E8, (u32)USBWakeUp_IRQHandler, 0 );
 8001602:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001606:	2200      	movs	r2, #0
 8001608:	20e8      	movs	r0, #232	; 0xe8
 800160a:	47a0      	blx	r4
	SET_BIT( REG_NVIC_ISER( 42/32 ), 42%32 );	// NVIC 42번 USB Wake Up 인터럽트 활성화 
 800160c:	f24e 1204 	movw	r2, #57604	; 0xe104
 8001610:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8001614:	6811      	ldr	r1, [r2, #0]

	SET_BIT( REG_EXTI_SWIER, 18 );
 8001616:	f44f 6382 	mov.w	r3, #1040	; 0x410
  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
	SET_BIT( REG_NVIC_ISER( 20/32 ), 20%32 );	// NVIC 20번 USB_LP 인터럽트 활성화 
	
	Hw_ISR_SetIRQFuncByAddr( 0x00E8, (u32)USBWakeUp_IRQHandler, 0 );
	SET_BIT( REG_NVIC_ISER( 42/32 ), 42%32 );	// NVIC 42번 USB Wake Up 인터럽트 활성화 
 800161a:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 800161e:	6011      	str	r1, [r2, #0]

	SET_BIT( REG_EXTI_SWIER, 18 );
 8001620:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	bd38      	pop	{r3, r4, r5, pc}
 800162e:	bf00      	nop

08001630 <USB_Cable_Config>:
void USB_Cable_Config (char NewState)
{
  if (NewState != DISABLE)
  {
  	#if HW_USE_USB_SMARTROBOT_BD == 1
	CLR_BIT( REG_GPIOC_ODR, 13 );
 8001630:	f241 030c 	movw	r3, #4108	; 0x100c
 8001634:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001638:	681a      	ldr	r2, [r3, #0]
* Input          : None.
* Return         : Status
*******************************************************************************/
void USB_Cable_Config (char NewState)
{
  if (NewState != DISABLE)
 800163a:	b918      	cbnz	r0, 8001644 <USB_Cable_Config+0x14>
	#endif
  }
  else
  {
  	#if HW_USE_USB_SMARTROBOT_BD == 1
	SET_BIT( REG_GPIOC_ODR, 13 );    
 800163c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001640:	601a      	str	r2, [r3, #0]
 8001642:	4770      	bx	lr
void USB_Cable_Config (char NewState)
{
  if (NewState != DISABLE)
  {
  	#if HW_USE_USB_SMARTROBOT_BD == 1
	CLR_BIT( REG_GPIOC_ODR, 13 );
 8001644:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001648:	601a      	str	r2, [r3, #0]
 800164a:	4770      	bx	lr

0800164c <USB_To_USART_Send_Data>:
* Input          : data_buffer: data address.
                   Nb_bytes: number of bytes to send.
* Return         : none.
*******************************************************************************/
void USB_To_USART_Send_Data(uint8_t* data_buffer, uint8_t Nb_bytes)
{
 800164c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 8001650:	460d      	mov	r5, r1
* Input          : data_buffer: data address.
                   Nb_bytes: number of bytes to send.
* Return         : none.
*******************************************************************************/
void USB_To_USART_Send_Data(uint8_t* data_buffer, uint8_t Nb_bytes)
{
 8001652:	b082      	sub	sp, #8
 8001654:	4606      	mov	r6, r0
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 8001656:	b191      	cbz	r1, 800167e <USB_To_USART_Send_Data+0x32>
 8001658:	f8df 802c 	ldr.w	r8, [pc, #44]	; 8001688 <USB_To_USART_Send_Data+0x3c>
 800165c:	4f09      	ldr	r7, [pc, #36]	; (8001684 <USB_To_USART_Send_Data+0x38>)
 800165e:	2400      	movs	r4, #0
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 8001660:	5d33      	ldrb	r3, [r6, r4]
    Hw_VCom_Q_Push( 0, &UartData );	//
 8001662:	f10d 0107 	add.w	r1, sp, #7
 8001666:	2000      	movs	r0, #0
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 8001668:	f88d 3007 	strb.w	r3, [sp, #7]
    Hw_VCom_Q_Push( 0, &UartData );	//
 800166c:	47c0      	blx	r8

    if( Hw_VCom_RxdFuncPtr != NULL )
 800166e:	683b      	ldr	r3, [r7, #0]
{
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 8001670:	3401      	adds	r4, #1
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
    Hw_VCom_Q_Push( 0, &UartData );	//

    if( Hw_VCom_RxdFuncPtr != NULL )
 8001672:	b113      	cbz	r3, 800167a <USB_To_USART_Send_Data+0x2e>
    {
      Hw_VCom_RxdFuncPtr( UartData );      
 8001674:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8001678:	4798      	blx	r3
{
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 800167a:	42ac      	cmp	r4, r5
 800167c:	d3f0      	bcc.n	8001660 <USB_To_USART_Send_Data+0x14>
    if( Hw_VCom_RxdFuncPtr != NULL )
    {
      Hw_VCom_RxdFuncPtr( UartData );      
    }
  }  
}
 800167e:	b002      	add	sp, #8
 8001680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001684:	200006a8 	.word	0x200006a8
 8001688:	08000c79 	.word	0x08000c79

0800168c <Handle_USBAsynchXfer>:
* Description    : send data to USB.
* Input          : None.
* Return         : none.
*******************************************************************************/
void Handle_USBAsynchXfer (void)
{
 800168c:	b570      	push	{r4, r5, r6, lr}
  
  uint16_t USB_Tx_ptr;
  uint16_t USB_Tx_length;
  
  if(USB_Tx_State != 1)
 800168e:	4c20      	ldr	r4, [pc, #128]	; (8001710 <Handle_USBAsynchXfer+0x84>)
 8001690:	7823      	ldrb	r3, [r4, #0]
 8001692:	2b01      	cmp	r3, #1
 8001694:	d026      	beq.n	80016e4 <Handle_USBAsynchXfer+0x58>
  {
    if (USART_Rx_ptr_out == USART_RX_DATA_SIZE)
 8001696:	4d1f      	ldr	r5, [pc, #124]	; (8001714 <Handle_USBAsynchXfer+0x88>)
 8001698:	682b      	ldr	r3, [r5, #0]
 800169a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800169e:	d022      	beq.n	80016e6 <Handle_USBAsynchXfer+0x5a>
    {
      USART_Rx_ptr_out = 0;
    }
    
    if(USART_Rx_ptr_out == USART_Rx_ptr_in) 
 80016a0:	4a1d      	ldr	r2, [pc, #116]	; (8001718 <Handle_USBAsynchXfer+0x8c>)
 80016a2:	6811      	ldr	r1, [r2, #0]
 80016a4:	428b      	cmp	r3, r1
 80016a6:	d02f      	beq.n	8001708 <Handle_USBAsynchXfer+0x7c>
 80016a8:	bf98      	it	ls
 80016aa:	b298      	uxthls	r0, r3
    {
      USB_Tx_State = 0; 
      return;
    }
    
    if(USART_Rx_ptr_out > USART_Rx_ptr_in) /* rollback */
 80016ac:	d921      	bls.n	80016f2 <Handle_USBAsynchXfer+0x66>
    { 
      USART_Rx_length = USART_RX_DATA_SIZE - USART_Rx_ptr_out;
 80016ae:	f5c3 6100 	rsb	r1, r3, #2048	; 0x800
 80016b2:	4a1a      	ldr	r2, [pc, #104]	; (800171c <Handle_USBAsynchXfer+0x90>)
    else 
    {
      USART_Rx_length = USART_Rx_ptr_in - USART_Rx_ptr_out;
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
 80016b4:	2940      	cmp	r1, #64	; 0x40
      return;
    }
    
    if(USART_Rx_ptr_out > USART_Rx_ptr_in) /* rollback */
    { 
      USART_Rx_length = USART_RX_DATA_SIZE - USART_Rx_ptr_out;
 80016b6:	6011      	str	r1, [r2, #0]
 80016b8:	b298      	uxth	r0, r3
    else 
    {
      USART_Rx_length = USART_Rx_ptr_in - USART_Rx_ptr_out;
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
 80016ba:	d91f      	bls.n	80016fc <Handle_USBAsynchXfer+0x70>
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
      
      USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;	
 80016bc:	3340      	adds	r3, #64	; 0x40
      USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;	
 80016be:	3940      	subs	r1, #64	; 0x40
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
      
      USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;	
 80016c0:	602b      	str	r3, [r5, #0]
      USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;	
 80016c2:	6011      	str	r1, [r2, #0]
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
 80016c4:	2640      	movs	r6, #64	; 0x40
      
      USART_Rx_ptr_out += USART_Rx_length;
      USART_Rx_length = 0;
    }
    USB_Tx_State = 1; 
    UserToPMABufferCopy(&USART_Rx_Buffer[USB_Tx_ptr], ENDP1_TXADDR, USB_Tx_length);
 80016c6:	4b16      	ldr	r3, [pc, #88]	; (8001720 <Handle_USBAsynchXfer+0x94>)
      USB_Tx_length = USART_Rx_length;
      
      USART_Rx_ptr_out += USART_Rx_length;
      USART_Rx_length = 0;
    }
    USB_Tx_State = 1; 
 80016c8:	2501      	movs	r5, #1
    UserToPMABufferCopy(&USART_Rx_Buffer[USB_Tx_ptr], ENDP1_TXADDR, USB_Tx_length);
 80016ca:	1818      	adds	r0, r3, r0
 80016cc:	4632      	mov	r2, r6
 80016ce:	21c0      	movs	r1, #192	; 0xc0
 80016d0:	4b14      	ldr	r3, [pc, #80]	; (8001724 <Handle_USBAsynchXfer+0x98>)
      USB_Tx_length = USART_Rx_length;
      
      USART_Rx_ptr_out += USART_Rx_length;
      USART_Rx_length = 0;
    }
    USB_Tx_State = 1; 
 80016d2:	7025      	strb	r5, [r4, #0]
    UserToPMABufferCopy(&USART_Rx_Buffer[USB_Tx_ptr], ENDP1_TXADDR, USB_Tx_length);
 80016d4:	4798      	blx	r3
    SetEPTxCount(ENDP1, USB_Tx_length);
 80016d6:	4628      	mov	r0, r5
 80016d8:	4b13      	ldr	r3, [pc, #76]	; (8001728 <Handle_USBAsynchXfer+0x9c>)
 80016da:	4631      	mov	r1, r6
 80016dc:	4798      	blx	r3
    SetEPTxValid(ENDP1); 
 80016de:	4628      	mov	r0, r5
 80016e0:	4b12      	ldr	r3, [pc, #72]	; (800172c <Handle_USBAsynchXfer+0xa0>)
 80016e2:	4798      	blx	r3
 80016e4:	bd70      	pop	{r4, r5, r6, pc}
    if (USART_Rx_ptr_out == USART_RX_DATA_SIZE)
    {
      USART_Rx_ptr_out = 0;
    }
    
    if(USART_Rx_ptr_out == USART_Rx_ptr_in) 
 80016e6:	4b0c      	ldr	r3, [pc, #48]	; (8001718 <Handle_USBAsynchXfer+0x8c>)
  
  if(USB_Tx_State != 1)
  {
    if (USART_Rx_ptr_out == USART_RX_DATA_SIZE)
    {
      USART_Rx_ptr_out = 0;
 80016e8:	2000      	movs	r0, #0
    }
    
    if(USART_Rx_ptr_out == USART_Rx_ptr_in) 
 80016ea:	6819      	ldr	r1, [r3, #0]
  
  if(USB_Tx_State != 1)
  {
    if (USART_Rx_ptr_out == USART_RX_DATA_SIZE)
    {
      USART_Rx_ptr_out = 0;
 80016ec:	6028      	str	r0, [r5, #0]
    }
    
    if(USART_Rx_ptr_out == USART_Rx_ptr_in) 
 80016ee:	4603      	mov	r3, r0
 80016f0:	b151      	cbz	r1, 8001708 <Handle_USBAsynchXfer+0x7c>
    { 
      USART_Rx_length = USART_RX_DATA_SIZE - USART_Rx_ptr_out;
    }
    else 
    {
      USART_Rx_length = USART_Rx_ptr_in - USART_Rx_ptr_out;
 80016f2:	1ac9      	subs	r1, r1, r3
 80016f4:	4a09      	ldr	r2, [pc, #36]	; (800171c <Handle_USBAsynchXfer+0x90>)
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
 80016f6:	2940      	cmp	r1, #64	; 0x40
    { 
      USART_Rx_length = USART_RX_DATA_SIZE - USART_Rx_ptr_out;
    }
    else 
    {
      USART_Rx_length = USART_Rx_ptr_in - USART_Rx_ptr_out;
 80016f8:	6011      	str	r1, [r2, #0]
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
 80016fa:	d8df      	bhi.n	80016bc <Handle_USBAsynchXfer+0x30>
    else
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = USART_Rx_length;
      
      USART_Rx_ptr_out += USART_Rx_length;
 80016fc:	18cb      	adds	r3, r1, r3
 80016fe:	602b      	str	r3, [r5, #0]
      USART_Rx_length = 0;
 8001700:	2300      	movs	r3, #0
      USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;	
    }
    else
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = USART_Rx_length;
 8001702:	b28e      	uxth	r6, r1
      
      USART_Rx_ptr_out += USART_Rx_length;
      USART_Rx_length = 0;
 8001704:	6013      	str	r3, [r2, #0]
 8001706:	e7de      	b.n	80016c6 <Handle_USBAsynchXfer+0x3a>
      USART_Rx_ptr_out = 0;
    }
    
    if(USART_Rx_ptr_out == USART_Rx_ptr_in) 
    {
      USB_Tx_State = 0; 
 8001708:	2300      	movs	r3, #0
 800170a:	7023      	strb	r3, [r4, #0]
      return;
 800170c:	bd70      	pop	{r4, r5, r6, pc}
 800170e:	bf00      	nop
 8001710:	200002cc 	.word	0x200002cc
 8001714:	200002d4 	.word	0x200002d4
 8001718:	200002d0 	.word	0x200002d0
 800171c:	200002d8 	.word	0x200002d8
 8001720:	20000b24 	.word	0x20000b24
 8001724:	08002171 	.word	0x08002171
 8001728:	080023b1 	.word	0x080023b1
 800172c:	08002275 	.word	0x08002275

08001730 <USB_Send_Data>:
	
	//-- 전송 버퍼가 꽉 차면 기다린다.
	//
	while(1)
	{
		if( (USART_Rx_length + 1) < USART_RX_DATA_SIZE ) break;
 8001730:	4b0a      	ldr	r3, [pc, #40]	; (800175c <USB_Send_Data+0x2c>)
* Description    : send the received data from UART 0 to USB.
* Input          : None.
* Return         : none.
*******************************************************************************/
void USB_Send_Data( u8 SendData )
{
 8001732:	b410      	push	{r4}
	
	//-- 전송 버퍼가 꽉 차면 기다린다.
	//
	while(1)
	{
		if( (USART_Rx_length + 1) < USART_RX_DATA_SIZE ) break;
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	3301      	adds	r3, #1
 8001738:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800173c:	d20c      	bcs.n	8001758 <USB_Send_Data+0x28>
	}
	
	
	USART_Rx_Buffer[USART_Rx_ptr_in] = SendData;
 800173e:	4b08      	ldr	r3, [pc, #32]	; (8001760 <USB_Send_Data+0x30>)
 8001740:	4c08      	ldr	r4, [pc, #32]	; (8001764 <USB_Send_Data+0x34>)
 8001742:	6819      	ldr	r1, [r3, #0]
	USART_Rx_ptr_in++;
 8001744:	1c4a      	adds	r2, r1, #1
  
	/* To avoid buffer overflow */
	if(USART_Rx_ptr_in == USART_RX_DATA_SIZE)
 8001746:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
	{
		if( (USART_Rx_length + 1) < USART_RX_DATA_SIZE ) break;
	}
	
	
	USART_Rx_Buffer[USART_Rx_ptr_in] = SendData;
 800174a:	5460      	strb	r0, [r4, r1]
	USART_Rx_ptr_in++;
 800174c:	601a      	str	r2, [r3, #0]
  
	/* To avoid buffer overflow */
	if(USART_Rx_ptr_in == USART_RX_DATA_SIZE)
 800174e:	d101      	bne.n	8001754 <USB_Send_Data+0x24>
	{
		USART_Rx_ptr_in = 0;
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]
	}
}
 8001754:	bc10      	pop	{r4}
 8001756:	4770      	bx	lr
 8001758:	e7fe      	b.n	8001758 <USB_Send_Data+0x28>
 800175a:	bf00      	nop
 800175c:	200002d8 	.word	0x200002d8
 8001760:	200002d0 	.word	0x200002d0
 8001764:	20000b24 	.word	0x20000b24

08001768 <Get_SerialNum>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Get_SerialNum(void)
{
 8001768:	b538      	push	{r3, r4, r5, lr}
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(uint32_t*)ID1;
 800176a:	f24f 72e8 	movw	r2, #63464	; 0xf7e8
  Device_Serial1 = *(uint32_t*)ID2;
  Device_Serial2 = *(uint32_t*)ID3;  
 800176e:	f24f 73f0 	movw	r3, #63472	; 0xf7f0
*******************************************************************************/
void Get_SerialNum(void)
{
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(uint32_t*)ID1;
 8001772:	f6c1 72ff 	movt	r2, #8191	; 0x1fff
  Device_Serial1 = *(uint32_t*)ID2;
  Device_Serial2 = *(uint32_t*)ID3;  
 8001776:	f6c1 73ff 	movt	r3, #8191	; 0x1fff
*******************************************************************************/
void Get_SerialNum(void)
{
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(uint32_t*)ID1;
 800177a:	6812      	ldr	r2, [r2, #0]
  Device_Serial1 = *(uint32_t*)ID2;
  Device_Serial2 = *(uint32_t*)ID3;  

  Device_Serial0 += Device_Serial2;
 800177c:	681b      	ldr	r3, [r3, #0]
void Get_SerialNum(void)
{
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(uint32_t*)ID1;
  Device_Serial1 = *(uint32_t*)ID2;
 800177e:	f24f 71ec 	movw	r1, #63468	; 0xf7ec
 8001782:	f6c1 71ff 	movt	r1, #8191	; 0x1fff
  Device_Serial2 = *(uint32_t*)ID3;  

  Device_Serial0 += Device_Serial2;

  if (Device_Serial0 != 0)
 8001786:	18d0      	adds	r0, r2, r3
void Get_SerialNum(void)
{
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(uint32_t*)ID1;
  Device_Serial1 = *(uint32_t*)ID2;
 8001788:	680c      	ldr	r4, [r1, #0]
  Device_Serial2 = *(uint32_t*)ID3;  

  Device_Serial0 += Device_Serial2;

  if (Device_Serial0 != 0)
 800178a:	d007      	beq.n	800179c <Get_SerialNum+0x34>
  {
    IntToUnicode (Device_Serial0, &Virtual_Com_Port_StringSerial[2] , 8);
 800178c:	4904      	ldr	r1, [pc, #16]	; (80017a0 <Get_SerialNum+0x38>)
 800178e:	2208      	movs	r2, #8
 8001790:	4d04      	ldr	r5, [pc, #16]	; (80017a4 <Get_SerialNum+0x3c>)
 8001792:	47a8      	blx	r5
    IntToUnicode (Device_Serial1, &Virtual_Com_Port_StringSerial[18], 4);
 8001794:	4620      	mov	r0, r4
 8001796:	4904      	ldr	r1, [pc, #16]	; (80017a8 <Get_SerialNum+0x40>)
 8001798:	2204      	movs	r2, #4
 800179a:	47a8      	blx	r5
 800179c:	bd38      	pop	{r3, r4, r5, pc}
 800179e:	bf00      	nop
 80017a0:	20000002 	.word	0x20000002
 80017a4:	080014d1 	.word	0x080014d1
 80017a8:	20000012 	.word	0x20000012

080017ac <__WFI>:
}


void __WFI(void)
{
	 __asm("wfi");
 80017ac:	bf30      	wfi
 80017ae:	4770      	bx	lr

080017b0 <Standard_GetConfiguration>:
* Output         : None.
* Return         : Return 1 , if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
uint8_t *Standard_GetConfiguration(uint16_t Length)
{
 80017b0:	b508      	push	{r3, lr}
  if (Length == 0)
 80017b2:	b138      	cbz	r0, 80017c4 <Standard_GetConfiguration+0x14>
  {
    pInformation->Ctrl_Info.Usb_wLength =
      sizeof(pInformation->Current_Configuration);
    return 0;
  }
  pUser_Standard_Requests->User_GetConfiguration();
 80017b4:	4b06      	ldr	r3, [pc, #24]	; (80017d0 <Standard_GetConfiguration+0x20>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4798      	blx	r3
  return (uint8_t *)&pInformation->Current_Configuration;
 80017bc:	4b05      	ldr	r3, [pc, #20]	; (80017d4 <Standard_GetConfiguration+0x24>)
 80017be:	6818      	ldr	r0, [r3, #0]
 80017c0:	300a      	adds	r0, #10
}
 80017c2:	bd08      	pop	{r3, pc}
*******************************************************************************/
uint8_t *Standard_GetConfiguration(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength =
 80017c4:	4b03      	ldr	r3, [pc, #12]	; (80017d4 <Standard_GetConfiguration+0x24>)
 80017c6:	2201      	movs	r2, #1
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	821a      	strh	r2, [r3, #16]
      sizeof(pInformation->Current_Configuration);
    return 0;
 80017cc:	bd08      	pop	{r3, pc}
 80017ce:	bf00      	nop
 80017d0:	20001350 	.word	0x20001350
 80017d4:	20001354 	.word	0x20001354

080017d8 <Standard_GetInterface>:
* Output         : None.
* Return         : Return 0, if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
uint8_t *Standard_GetInterface(uint16_t Length)
{
 80017d8:	b508      	push	{r3, lr}
  if (Length == 0)
 80017da:	b138      	cbz	r0, 80017ec <Standard_GetInterface+0x14>
  {
    pInformation->Ctrl_Info.Usb_wLength =
      sizeof(pInformation->Current_AlternateSetting);
    return 0;
  }
  pUser_Standard_Requests->User_GetInterface();
 80017dc:	4b06      	ldr	r3, [pc, #24]	; (80017f8 <Standard_GetInterface+0x20>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	4798      	blx	r3
  return (uint8_t *)&pInformation->Current_AlternateSetting;
 80017e4:	4b05      	ldr	r3, [pc, #20]	; (80017fc <Standard_GetInterface+0x24>)
 80017e6:	6818      	ldr	r0, [r3, #0]
 80017e8:	300c      	adds	r0, #12
}
 80017ea:	bd08      	pop	{r3, pc}
*******************************************************************************/
uint8_t *Standard_GetInterface(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength =
 80017ec:	4b03      	ldr	r3, [pc, #12]	; (80017fc <Standard_GetInterface+0x24>)
 80017ee:	2201      	movs	r2, #1
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	821a      	strh	r2, [r3, #16]
      sizeof(pInformation->Current_AlternateSetting);
    return 0;
 80017f4:	bd08      	pop	{r3, pc}
 80017f6:	bf00      	nop
 80017f8:	20001350 	.word	0x20001350
 80017fc:	20001354 	.word	0x20001354

08001800 <Standard_GetStatus>:
* Output         : None.
* Return         : Return 0, if the request is at end of data block,
*                  or is invalid when "Length" is 0.
*******************************************************************************/
uint8_t *Standard_GetStatus(uint16_t Length)
{
 8001800:	b508      	push	{r3, lr}
  if (Length == 0)
 8001802:	2800      	cmp	r0, #0
 8001804:	d037      	beq.n	8001876 <Standard_GetStatus+0x76>
  }

  /* Reset Status Information */
  StatusInfo.w = 0;

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8001806:	4b21      	ldr	r3, [pc, #132]	; (800188c <Standard_GetStatus+0x8c>)
    pInformation->Ctrl_Info.Usb_wLength = 2;
    return 0;
  }

  /* Reset Status Information */
  StatusInfo.w = 0;
 8001808:	4821      	ldr	r0, [pc, #132]	; (8001890 <Standard_GetStatus+0x90>)
 800180a:	2100      	movs	r1, #0

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800180c:	681a      	ldr	r2, [r3, #0]
    pInformation->Ctrl_Info.Usb_wLength = 2;
    return 0;
  }

  /* Reset Status Information */
  StatusInfo.w = 0;
 800180e:	8001      	strh	r1, [r0, #0]

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8001810:	7813      	ldrb	r3, [r2, #0]
 8001812:	f013 037f 	ands.w	r3, r3, #127	; 0x7f
 8001816:	d017      	beq.n	8001848 <Standard_GetStatus+0x48>
    {
      ClrBit(StatusInfo0, 0);
    }
  }
  /*Interface Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8001818:	2b01      	cmp	r3, #1
 800181a:	d02b      	beq.n	8001874 <Standard_GetStatus+0x74>
  {
    return (uint8_t *)&StatusInfo;
  }
  /*Get EndPoint Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 800181c:	2b02      	cmp	r3, #2
 800181e:	d128      	bne.n	8001872 <Standard_GetStatus+0x72>
  {
    uint8_t Related_Endpoint;
    uint8_t wIndex0 = pInformation->USBwIndex0;
 8001820:	7953      	ldrb	r3, [r2, #5]

    Related_Endpoint = (wIndex0 & 0x0f);
 8001822:	f003 020f 	and.w	r2, r3, #15
    if (ValBit(wIndex0, 7))
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 8001826:	0092      	lsls	r2, r2, #2
 8001828:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800182c:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
  {
    uint8_t Related_Endpoint;
    uint8_t wIndex0 = pInformation->USBwIndex0;

    Related_Endpoint = (wIndex0 & 0x0f);
    if (ValBit(wIndex0, 7))
 8001830:	f013 0f80 	tst.w	r3, #128	; 0x80
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 8001834:	6813      	ldr	r3, [r2, #0]
  {
    uint8_t Related_Endpoint;
    uint8_t wIndex0 = pInformation->USBwIndex0;

    Related_Endpoint = (wIndex0 & 0x0f);
    if (ValBit(wIndex0, 7))
 8001836:	d123      	bne.n	8001880 <Standard_GetStatus+0x80>
      }
    }
    else
    {
      /* OUT endpoint */
      if (_GetRxStallStatus(Related_Endpoint))
 8001838:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800183c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001840:	d111      	bne.n	8001866 <Standard_GetStatus+0x66>
      {
        SetBit(StatusInfo0, 0); /* OUT Endpoint stalled */
 8001842:	2301      	movs	r3, #1
 8001844:	7003      	strb	r3, [r0, #0]
 8001846:	e00e      	b.n	8001866 <Standard_GetStatus+0x66>
  StatusInfo.w = 0;

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
  {
    /*Get Device Status */
    uint8_t Feature = pInformation->Current_Feature;
 8001848:	7a52      	ldrb	r2, [r2, #9]

    /* Remote Wakeup enabled */
    if (ValBit(Feature, 5))
 800184a:	f002 0320 	and.w	r3, r2, #32
 800184e:	b2db      	uxtb	r3, r3
    {
      ClrBit(StatusInfo0, 1);
    }      

    /* Bus-powered */
    if (ValBit(Feature, 6))
 8001850:	f002 0240 	and.w	r2, r2, #64	; 0x40
    uint8_t Feature = pInformation->Current_Feature;

    /* Remote Wakeup enabled */
    if (ValBit(Feature, 5))
    {
      SetBit(StatusInfo0, 1);
 8001854:	428b      	cmp	r3, r1
    {
      ClrBit(StatusInfo0, 1);
    }      

    /* Bus-powered */
    if (ValBit(Feature, 6))
 8001856:	b2d2      	uxtb	r2, r2
    uint8_t Feature = pInformation->Current_Feature;

    /* Remote Wakeup enabled */
    if (ValBit(Feature, 5))
    {
      SetBit(StatusInfo0, 1);
 8001858:	bf18      	it	ne
 800185a:	2302      	movne	r3, #2
    {
      ClrBit(StatusInfo0, 1);
    }      

    /* Bus-powered */
    if (ValBit(Feature, 6))
 800185c:	2a00      	cmp	r2, #0
 800185e:	d0f1      	beq.n	8001844 <Standard_GetStatus+0x44>
    {
      SetBit(StatusInfo0, 0);
 8001860:	f043 0301 	orr.w	r3, r3, #1
 8001864:	7003      	strb	r3, [r0, #0]
  }
  else
  {
    return NULL;
  }
  pUser_Standard_Requests->User_GetStatus();
 8001866:	4b0b      	ldr	r3, [pc, #44]	; (8001894 <Standard_GetStatus+0x94>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	691b      	ldr	r3, [r3, #16]
 800186c:	4798      	blx	r3
  return (uint8_t *)&StatusInfo;
 800186e:	4808      	ldr	r0, [pc, #32]	; (8001890 <Standard_GetStatus+0x90>)
 8001870:	bd08      	pop	{r3, pc}
    }

  }
  else
  {
    return NULL;
 8001872:	4608      	mov	r0, r1
  }
  pUser_Standard_Requests->User_GetStatus();
  return (uint8_t *)&StatusInfo;
}
 8001874:	bd08      	pop	{r3, pc}
*******************************************************************************/
uint8_t *Standard_GetStatus(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength = 2;
 8001876:	4b05      	ldr	r3, [pc, #20]	; (800188c <Standard_GetStatus+0x8c>)
 8001878:	2202      	movs	r2, #2
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	821a      	strh	r2, [r3, #16]
    return 0;
 800187e:	bd08      	pop	{r3, pc}

    Related_Endpoint = (wIndex0 & 0x0f);
    if (ValBit(wIndex0, 7))
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 8001880:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001884:	2b10      	cmp	r3, #16
 8001886:	d1ee      	bne.n	8001866 <Standard_GetStatus+0x66>
 8001888:	e7db      	b.n	8001842 <Standard_GetStatus+0x42>
 800188a:	bf00      	nop
 800188c:	20001354 	.word	0x20001354
 8001890:	20001324 	.word	0x20001324
 8001894:	20001350 	.word	0x20001350

08001898 <DataStageIn>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void DataStageIn(void)
{
 8001898:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
 800189c:	4e2b      	ldr	r6, [pc, #172]	; (800194c <DataStageIn+0xb4>)
 800189e:	6834      	ldr	r4, [r6, #0]
  uint32_t save_wLength = pEPinfo->Usb_wLength;
 80018a0:	8a23      	ldrh	r3, [r4, #16]
  uint32_t ControlState = pInformation->ControlState;

  uint8_t *DataBuffer;
  uint32_t Length;

  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
 80018a2:	7a20      	ldrb	r0, [r4, #8]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	bf08      	it	eq
 80018a8:	2804      	cmpeq	r0, #4
 80018aa:	bf14      	ite	ne
 80018ac:	f04f 0800 	movne.w	r8, #0
 80018b0:	f04f 0801 	moveq.w	r8, #1
 80018b4:	d10a      	bne.n	80018cc <DataStageIn+0x34>
  {
    if(Data_Mul_MaxPacketSize == TRUE)
 80018b6:	4b26      	ldr	r3, [pc, #152]	; (8001950 <DataStageIn+0xb8>)
 80018b8:	781a      	ldrb	r2, [r3, #0]
 80018ba:	2a01      	cmp	r2, #1
 80018bc:	d030      	beq.n	8001920 <DataStageIn+0x88>
    }
    else 
    {
      /* No more data to send so STALL the TX Status*/
      ControlState = WAIT_STATUS_OUT;
      vSetEPTxStatus(EP_TX_STALL);
 80018be:	4b25      	ldr	r3, [pc, #148]	; (8001954 <DataStageIn+0xbc>)
 80018c0:	2210      	movs	r2, #16
 80018c2:	2707      	movs	r7, #7
 80018c4:	801a      	strh	r2, [r3, #0]
  vSetEPTxStatus(EP_TX_VALID);

  USB_StatusOut();/* Expect the host to abort the data IN stage */

Expect_Status_Out:
  pInformation->ControlState = ControlState;
 80018c6:	7227      	strb	r7, [r4, #8]
 80018c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    }
    
    goto Expect_Status_Out;
  }

  Length = pEPinfo->PacketSize;
 80018cc:	8aa7      	ldrh	r7, [r4, #20]
  if (Length > save_wLength)
  {
    Length = save_wLength;
  }

  DataBuffer = (*pEPinfo->CopyData)(Length);
 80018ce:	69a2      	ldr	r2, [r4, #24]
 80018d0:	429f      	cmp	r7, r3
 80018d2:	bf34      	ite	cc
 80018d4:	463d      	movcc	r5, r7
 80018d6:	461d      	movcs	r5, r3
 80018d8:	4628      	mov	r0, r5
    
    goto Expect_Status_Out;
  }

  Length = pEPinfo->PacketSize;
  ControlState = (save_wLength <= Length) ? LAST_IN_DATA : IN_DATA;
 80018da:	42bb      	cmp	r3, r7
 80018dc:	bf8c      	ite	hi
 80018de:	2702      	movhi	r7, #2
 80018e0:	2704      	movls	r7, #4
  if (Length > save_wLength)
  {
    Length = save_wLength;
  }

  DataBuffer = (*pEPinfo->CopyData)(Length);
 80018e2:	4790      	blx	r2
  
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);
 80018e4:	4b1c      	ldr	r3, [pc, #112]	; (8001958 <DataStageIn+0xc0>)
  if (Length > save_wLength)
  {
    Length = save_wLength;
  }

  DataBuffer = (*pEPinfo->CopyData)(Length);
 80018e6:	4681      	mov	r9, r0
  
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);
 80018e8:	4640      	mov	r0, r8
 80018ea:	4798      	blx	r3
 80018ec:	462a      	mov	r2, r5
 80018ee:	4601      	mov	r1, r0
 80018f0:	4b1a      	ldr	r3, [pc, #104]	; (800195c <DataStageIn+0xc4>)
 80018f2:	4648      	mov	r0, r9
 80018f4:	4798      	blx	r3

  SetEPTxCount(ENDP0, Length);
 80018f6:	4629      	mov	r1, r5
 80018f8:	4b19      	ldr	r3, [pc, #100]	; (8001960 <DataStageIn+0xc8>)
 80018fa:	4640      	mov	r0, r8
 80018fc:	4798      	blx	r3

  pEPinfo->Usb_wLength -= Length;
 80018fe:	8a23      	ldrh	r3, [r4, #16]
  pEPinfo->Usb_wOffset += Length;
 8001900:	8a62      	ldrh	r2, [r4, #18]
  
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);

  SetEPTxCount(ENDP0, Length);

  pEPinfo->Usb_wLength -= Length;
 8001902:	1b5b      	subs	r3, r3, r5
 8001904:	8223      	strh	r3, [r4, #16]
  pEPinfo->Usb_wOffset += Length;
  vSetEPTxStatus(EP_TX_VALID);
 8001906:	4b13      	ldr	r3, [pc, #76]	; (8001954 <DataStageIn+0xbc>)
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);

  SetEPTxCount(ENDP0, Length);

  pEPinfo->Usb_wLength -= Length;
  pEPinfo->Usb_wOffset += Length;
 8001908:	18ad      	adds	r5, r5, r2
  vSetEPTxStatus(EP_TX_VALID);
 800190a:	2230      	movs	r2, #48	; 0x30
 800190c:	801a      	strh	r2, [r3, #0]
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);

  SetEPTxCount(ENDP0, Length);

  pEPinfo->Usb_wLength -= Length;
  pEPinfo->Usb_wOffset += Length;
 800190e:	8265      	strh	r5, [r4, #18]
  vSetEPTxStatus(EP_TX_VALID);

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 8001910:	4b14      	ldr	r3, [pc, #80]	; (8001964 <DataStageIn+0xcc>)
 8001912:	6834      	ldr	r4, [r6, #0]
 8001914:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001918:	801a      	strh	r2, [r3, #0]

Expect_Status_Out:
  pInformation->ControlState = ControlState;
 800191a:	7227      	strb	r7, [r4, #8]
 800191c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
  {
    if(Data_Mul_MaxPacketSize == TRUE)
    {
      /* No more data to send and empty packet */
      Send0LengthData();
 8001920:	f645 4250 	movw	r2, #23632	; 0x5c50
 8001924:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8001928:	6811      	ldr	r1, [r2, #0]
 800192a:	f243 0202 	movw	r2, #12290	; 0x3002
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
}
 800192e:	b289      	uxth	r1, r1
  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
  {
    if(Data_Mul_MaxPacketSize == TRUE)
    {
      /* No more data to send and empty packet */
      Send0LengthData();
 8001930:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8001934:	188a      	adds	r2, r1, r2
 8001936:	0052      	lsls	r2, r2, #1
 8001938:	2100      	movs	r1, #0
 800193a:	6011      	str	r1, [r2, #0]
 800193c:	4a05      	ldr	r2, [pc, #20]	; (8001954 <DataStageIn+0xbc>)
      ControlState = LAST_IN_DATA;
      Data_Mul_MaxPacketSize = FALSE;
 800193e:	2704      	movs	r7, #4
  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
  {
    if(Data_Mul_MaxPacketSize == TRUE)
    {
      /* No more data to send and empty packet */
      Send0LengthData();
 8001940:	2030      	movs	r0, #48	; 0x30
 8001942:	8010      	strh	r0, [r2, #0]
      ControlState = LAST_IN_DATA;
      Data_Mul_MaxPacketSize = FALSE;
 8001944:	7019      	strb	r1, [r3, #0]
  vSetEPTxStatus(EP_TX_VALID);

  USB_StatusOut();/* Expect the host to abort the data IN stage */

Expect_Status_Out:
  pInformation->ControlState = ControlState;
 8001946:	7227      	strb	r7, [r4, #8]
 8001948:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800194c:	20001354 	.word	0x20001354
 8001950:	200002dc 	.word	0x200002dc
 8001954:	2000135c 	.word	0x2000135c
 8001958:	08002371 	.word	0x08002371
 800195c:	08002171 	.word	0x08002171
 8001960:	080023b1 	.word	0x080023b1
 8001964:	2000135a 	.word	0x2000135a

08001968 <Standard_SetConfiguration>:
* Output         : None.
* Return         : Return USB_SUCCESS, if the request is performed.
*                  Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetConfiguration(void)
{
 8001968:	b510      	push	{r4, lr}

  if ((pInformation->USBwValue0 <=
 800196a:	4b0b      	ldr	r3, [pc, #44]	; (8001998 <Standard_SetConfiguration+0x30>)
 800196c:	4a0b      	ldr	r2, [pc, #44]	; (800199c <Standard_SetConfiguration+0x34>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	7851      	ldrb	r1, [r2, #1]
 8001972:	78da      	ldrb	r2, [r3, #3]
 8001974:	4291      	cmp	r1, r2
 8001976:	d201      	bcs.n	800197c <Standard_SetConfiguration+0x14>
    pUser_Standard_Requests->User_SetConfiguration();
    return USB_SUCCESS;
  }
  else
  {
    return USB_UNSUPPORT;
 8001978:	2002      	movs	r0, #2
  }
}
 800197a:	bd10      	pop	{r4, pc}
*******************************************************************************/
RESULT Standard_SetConfiguration(void)
{

  if ((pInformation->USBwValue0 <=
      Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
 800197c:	7899      	ldrb	r1, [r3, #2]
 800197e:	2900      	cmp	r1, #0
 8001980:	d1fa      	bne.n	8001978 <Standard_SetConfiguration+0x10>
      && (pInformation->USBwIndex == 0)) /*call Back usb spec 2.0*/
 8001982:	889c      	ldrh	r4, [r3, #4]
 8001984:	2c00      	cmp	r4, #0
 8001986:	d1f7      	bne.n	8001978 <Standard_SetConfiguration+0x10>
  {
    pInformation->Current_Configuration = pInformation->USBwValue0;
 8001988:	729a      	strb	r2, [r3, #10]
    pUser_Standard_Requests->User_SetConfiguration();
 800198a:	4b05      	ldr	r3, [pc, #20]	; (80019a0 <Standard_SetConfiguration+0x38>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	4798      	blx	r3
    return USB_SUCCESS;
 8001992:	4620      	mov	r0, r4
 8001994:	bd10      	pop	{r4, pc}
 8001996:	bf00      	nop
 8001998:	20001354 	.word	0x20001354
 800199c:	200000e0 	.word	0x200000e0
 80019a0:	20001350 	.word	0x20001350

080019a4 <Standard_SetInterface>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetInterface(void)
{
 80019a4:	b538      	push	{r3, r4, r5, lr}
  RESULT Re;
  /*Test if the specified Interface and Alternate Setting are supported by
    the application Firmware*/
  Re = (*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, pInformation->USBwValue0);
 80019a6:	4a10      	ldr	r2, [pc, #64]	; (80019e8 <Standard_SetInterface+0x44>)
 80019a8:	4c10      	ldr	r4, [pc, #64]	; (80019ec <Standard_SetInterface+0x48>)
 80019aa:	6812      	ldr	r2, [r2, #0]
 80019ac:	6823      	ldr	r3, [r4, #0]
 80019ae:	6992      	ldr	r2, [r2, #24]
 80019b0:	7958      	ldrb	r0, [r3, #5]
 80019b2:	78d9      	ldrb	r1, [r3, #3]
 80019b4:	4790      	blx	r2

  if (pInformation->Current_Configuration != 0)
 80019b6:	6823      	ldr	r3, [r4, #0]
 80019b8:	7a9a      	ldrb	r2, [r3, #10]
 80019ba:	b90a      	cbnz	r2, 80019c0 <Standard_SetInterface+0x1c>
      return USB_SUCCESS;
    }

  }

  return USB_UNSUPPORT;
 80019bc:	2002      	movs	r0, #2
}
 80019be:	bd38      	pop	{r3, r4, r5, pc}
    the application Firmware*/
  Re = (*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, pInformation->USBwValue0);

  if (pInformation->Current_Configuration != 0)
  {
    if ((Re != USB_SUCCESS) || (pInformation->USBwIndex1 != 0)
 80019c0:	2800      	cmp	r0, #0
 80019c2:	d1fb      	bne.n	80019bc <Standard_SetInterface+0x18>
 80019c4:	791a      	ldrb	r2, [r3, #4]
 80019c6:	2a00      	cmp	r2, #0
 80019c8:	d1f8      	bne.n	80019bc <Standard_SetInterface+0x18>
        || (pInformation->USBwValue1 != 0))
 80019ca:	789d      	ldrb	r5, [r3, #2]
 80019cc:	2d00      	cmp	r5, #0
 80019ce:	d1f5      	bne.n	80019bc <Standard_SetInterface+0x18>
    {
      return  USB_UNSUPPORT;
    }
    else if (Re == USB_SUCCESS)
    {
      pUser_Standard_Requests->User_SetInterface();
 80019d0:	4b07      	ldr	r3, [pc, #28]	; (80019f0 <Standard_SetInterface+0x4c>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	68db      	ldr	r3, [r3, #12]
 80019d6:	4798      	blx	r3
      pInformation->Current_Interface = pInformation->USBwIndex0;
 80019d8:	6823      	ldr	r3, [r4, #0]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
      return USB_SUCCESS;
 80019da:	4628      	mov	r0, r5
      return  USB_UNSUPPORT;
    }
    else if (Re == USB_SUCCESS)
    {
      pUser_Standard_Requests->User_SetInterface();
      pInformation->Current_Interface = pInformation->USBwIndex0;
 80019dc:	7959      	ldrb	r1, [r3, #5]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
 80019de:	78da      	ldrb	r2, [r3, #3]
      return  USB_UNSUPPORT;
    }
    else if (Re == USB_SUCCESS)
    {
      pUser_Standard_Requests->User_SetInterface();
      pInformation->Current_Interface = pInformation->USBwIndex0;
 80019e0:	72d9      	strb	r1, [r3, #11]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
 80019e2:	731a      	strb	r2, [r3, #12]
      return USB_SUCCESS;
 80019e4:	bd38      	pop	{r3, r4, r5, pc}
 80019e6:	bf00      	nop
 80019e8:	2000132c 	.word	0x2000132c
 80019ec:	20001354 	.word	0x20001354
 80019f0:	20001350 	.word	0x20001350

080019f4 <Standard_ClearFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_ClearFeature(void)
{
 80019f4:	b538      	push	{r3, r4, r5, lr}
  uint32_t     Type_Rec = Type_Recipient;
 80019f6:	4b35      	ldr	r3, [pc, #212]	; (8001acc <Standard_ClearFeature+0xd8>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	7818      	ldrb	r0, [r3, #0]
  uint32_t     Status;


  if (Type_Rec == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 80019fc:	f010 007f 	ands.w	r0, r0, #127	; 0x7f
 8001a00:	d003      	beq.n	8001a0a <Standard_ClearFeature+0x16>
  {/*Device Clear Feature*/
    ClrBit(pInformation->Current_Feature, 5);
    return USB_SUCCESS;
  }
  else if (Type_Rec == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8001a02:	2802      	cmp	r0, #2
 8001a04:	d006      	beq.n	8001a14 <Standard_ClearFeature+0x20>
    }
    pUser_Standard_Requests->User_ClearFeature();
    return USB_SUCCESS;
  }

  return USB_UNSUPPORT;
 8001a06:	2002      	movs	r0, #2
}
 8001a08:	bd38      	pop	{r3, r4, r5, pc}
  uint32_t     Status;


  if (Type_Rec == (STANDARD_REQUEST | DEVICE_RECIPIENT))
  {/*Device Clear Feature*/
    ClrBit(pInformation->Current_Feature, 5);
 8001a0a:	7a5a      	ldrb	r2, [r3, #9]
 8001a0c:	f022 0220 	bic.w	r2, r2, #32
 8001a10:	725a      	strb	r2, [r3, #9]
    return USB_SUCCESS;
 8001a12:	bd38      	pop	{r3, r4, r5, pc}
    DEVICE* pDev;
    uint32_t Related_Endpoint;
    uint32_t wIndex0;
    uint32_t rEP;

    if ((pInformation->USBwValue != ENDPOINT_STALL)
 8001a14:	885a      	ldrh	r2, [r3, #2]
 8001a16:	2a00      	cmp	r2, #0
 8001a18:	d1f6      	bne.n	8001a08 <Standard_ClearFeature+0x14>
        || (pInformation->USBwIndex1 != 0))
 8001a1a:	791a      	ldrb	r2, [r3, #4]
 8001a1c:	2a00      	cmp	r2, #0
 8001a1e:	d1f3      	bne.n	8001a08 <Standard_ClearFeature+0x14>
    {
      return USB_UNSUPPORT;
    }

    pDev = &Device_Table;
    wIndex0 = pInformation->USBwIndex0;
 8001a20:	795a      	ldrb	r2, [r3, #5]
    rEP = wIndex0 & ~0x80;
 8001a22:	f022 0080 	bic.w	r0, r2, #128	; 0x80

    if (ValBit(pInformation->USBwIndex0, 7))
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 8001a26:	0081      	lsls	r1, r0, #2
 8001a28:	f101 4480 	add.w	r4, r1, #1073741824	; 0x40000000
    pDev = &Device_Table;
    wIndex0 = pInformation->USBwIndex0;
    rEP = wIndex0 & ~0x80;
    Related_Endpoint = ENDP0 + rEP;

    if (ValBit(pInformation->USBwIndex0, 7))
 8001a2c:	0615      	lsls	r5, r2, #24
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 8001a2e:	f504 44b8 	add.w	r4, r4, #23552	; 0x5c00
    }
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
 8001a32:	bf56      	itet	pl
 8001a34:	6824      	ldrpl	r4, [r4, #0]

    if (ValBit(pInformation->USBwIndex0, 7))
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 8001a36:	6825      	ldrmi	r5, [r4, #0]
    }
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
 8001a38:	f404 5540 	andpl.w	r5, r4, #12288	; 0x3000
    }

    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 8001a3c:	4c24      	ldr	r4, [pc, #144]	; (8001ad0 <Standard_ClearFeature+0xdc>)

    if (ValBit(pInformation->USBwIndex0, 7))
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 8001a3e:	bf48      	it	mi
 8001a40:	f005 0530 	andmi.w	r5, r5, #48	; 0x30
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
    }

    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 8001a44:	7824      	ldrb	r4, [r4, #0]
 8001a46:	42a0      	cmp	r0, r4
 8001a48:	d2dd      	bcs.n	8001a06 <Standard_ClearFeature+0x12>
 8001a4a:	2d00      	cmp	r5, #0
 8001a4c:	d0db      	beq.n	8001a06 <Standard_ClearFeature+0x12>
        || (pInformation->Current_Configuration == 0))
 8001a4e:	7a9b      	ldrb	r3, [r3, #10]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d0d8      	beq.n	8001a06 <Standard_ClearFeature+0x12>
    {
      return USB_UNSUPPORT;
    }


    if (wIndex0 & 0x80)
 8001a54:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	b173      	cbz	r3, 8001a7a <Standard_ClearFeature+0x86>
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint ))
 8001a5c:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
 8001a60:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001a6a:	2b10      	cmp	r3, #16
 8001a6c:	d021      	beq.n	8001ab2 <Standard_ClearFeature+0xbe>
          ClearDTOG_RX(Related_Endpoint);
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
        }
      }
    }
    pUser_Standard_Requests->User_ClearFeature();
 8001a6e:	4b19      	ldr	r3, [pc, #100]	; (8001ad4 <Standard_ClearFeature+0xe0>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	695b      	ldr	r3, [r3, #20]
 8001a74:	4798      	blx	r3
    return USB_SUCCESS;
 8001a76:	2000      	movs	r0, #0
 8001a78:	bd38      	pop	{r3, r4, r5, pc}
      }
    }
    else
    {
      /* OUT endpoint */
      if (_GetRxStallStatus(Related_Endpoint))
 8001a7a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8001a7e:	f501 44b8 	add.w	r4, r1, #23552	; 0x5c00
 8001a82:	6823      	ldr	r3, [r4, #0]
 8001a84:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001a88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a8c:	d1ef      	bne.n	8001a6e <Standard_ClearFeature+0x7a>
      {
        if (Related_Endpoint == ENDP0)
 8001a8e:	b9c8      	cbnz	r0, 8001ac4 <Standard_ClearFeature+0xd0>
        {
          /* After clear the STALL, enable the default endpoint receiver */
          SetEPRxCount(Related_Endpoint, Device_Property.MaxPacketSize);
 8001a90:	4b11      	ldr	r3, [pc, #68]	; (8001ad8 <Standard_ClearFeature+0xe4>)
 8001a92:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
 8001a96:	4b11      	ldr	r3, [pc, #68]	; (8001adc <Standard_ClearFeature+0xe8>)
 8001a98:	4798      	blx	r3
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
        }
        else
        {
          ClearDTOG_RX(Related_Endpoint);
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
 8001a9a:	6822      	ldr	r2, [r4, #0]
 8001a9c:	f64b 738f 	movw	r3, #49039	; 0xbf8f
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001aa6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001aaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001aae:	6023      	str	r3, [r4, #0]
 8001ab0:	e7dd      	b.n	8001a6e <Standard_ClearFeature+0x7a>
    if (wIndex0 & 0x80)
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint ))
      {
        ClearDTOG_TX(Related_Endpoint);
 8001ab2:	b2c4      	uxtb	r4, r0
 8001ab4:	4620      	mov	r0, r4
 8001ab6:	4b0a      	ldr	r3, [pc, #40]	; (8001ae0 <Standard_ClearFeature+0xec>)
 8001ab8:	4798      	blx	r3
        SetEPTxStatus(Related_Endpoint, EP_TX_VALID);
 8001aba:	4620      	mov	r0, r4
 8001abc:	2130      	movs	r1, #48	; 0x30
 8001abe:	4b09      	ldr	r3, [pc, #36]	; (8001ae4 <Standard_ClearFeature+0xf0>)
 8001ac0:	4798      	blx	r3
 8001ac2:	e7d4      	b.n	8001a6e <Standard_ClearFeature+0x7a>
          SetEPRxCount(Related_Endpoint, Device_Property.MaxPacketSize);
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
        }
        else
        {
          ClearDTOG_RX(Related_Endpoint);
 8001ac4:	4b08      	ldr	r3, [pc, #32]	; (8001ae8 <Standard_ClearFeature+0xf4>)
 8001ac6:	4798      	blx	r3
 8001ac8:	e7e7      	b.n	8001a9a <Standard_ClearFeature+0xa6>
 8001aca:	bf00      	nop
 8001acc:	20001354 	.word	0x20001354
 8001ad0:	200000e0 	.word	0x200000e0
 8001ad4:	20001350 	.word	0x20001350
 8001ad8:	2000005c 	.word	0x2000005c
 8001adc:	080023d1 	.word	0x080023d1
 8001ae0:	08002301 	.word	0x08002301
 8001ae4:	080021f5 	.word	0x080021f5
 8001ae8:	080022dd 	.word	0x080022dd

08001aec <Standard_SetEndPointFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetEndPointFeature(void)
{
 8001aec:	b538      	push	{r3, r4, r5, lr}
  uint32_t    wIndex0;
  uint32_t    Related_Endpoint;
  uint32_t    rEP;
  uint32_t    Status;

  wIndex0 = pInformation->USBwIndex0;
 8001aee:	4b22      	ldr	r3, [pc, #136]	; (8001b78 <Standard_SetEndPointFeature+0x8c>)
 8001af0:	6819      	ldr	r1, [r3, #0]
 8001af2:	794b      	ldrb	r3, [r1, #5]
  rEP = wIndex0 & ~0x80;
 8001af4:	f023 0280 	bic.w	r2, r3, #128	; 0x80

  if (ValBit(pInformation->USBwIndex0, 7))
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 8001af8:	0090      	lsls	r0, r2, #2
 8001afa:	f100 4480 	add.w	r4, r0, #1073741824	; 0x40000000

  wIndex0 = pInformation->USBwIndex0;
  rEP = wIndex0 & ~0x80;
  Related_Endpoint = ENDP0 + rEP;

  if (ValBit(pInformation->USBwIndex0, 7))
 8001afe:	061d      	lsls	r5, r3, #24
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 8001b00:	f504 44b8 	add.w	r4, r4, #23552	; 0x5c00
  }
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
 8001b04:	bf56      	itet	pl
 8001b06:	6824      	ldrpl	r4, [r4, #0]

  if (ValBit(pInformation->USBwIndex0, 7))
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 8001b08:	6825      	ldrmi	r5, [r4, #0]
  }
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
 8001b0a:	f404 5540 	andpl.w	r5, r4, #12288	; 0x3000
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
 8001b0e:	4c1b      	ldr	r4, [pc, #108]	; (8001b7c <Standard_SetEndPointFeature+0x90>)

  if (ValBit(pInformation->USBwIndex0, 7))
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 8001b10:	bf48      	it	mi
 8001b12:	f005 0530 	andmi.w	r5, r5, #48	; 0x30
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
 8001b16:	7824      	ldrb	r4, [r4, #0]
 8001b18:	42a2      	cmp	r2, r4
 8001b1a:	d301      	bcc.n	8001b20 <Standard_SetEndPointFeature+0x34>
      || pInformation->USBwValue != 0 || Status == 0
      || pInformation->Current_Configuration == 0)
  {
    return USB_UNSUPPORT;
 8001b1c:	2002      	movs	r0, #2
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
    }
  }
  pUser_Standard_Requests->User_SetEndPointFeature();
  return USB_SUCCESS;
}
 8001b1e:	bd38      	pop	{r3, r4, r5, pc}
  {
    Status = _GetEPRxStatus(Related_Endpoint);
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
      || pInformation->USBwValue != 0 || Status == 0
 8001b20:	884a      	ldrh	r2, [r1, #2]
 8001b22:	2a00      	cmp	r2, #0
 8001b24:	d1fa      	bne.n	8001b1c <Standard_SetEndPointFeature+0x30>
 8001b26:	2d00      	cmp	r5, #0
 8001b28:	d0f8      	beq.n	8001b1c <Standard_SetEndPointFeature+0x30>
      || pInformation->Current_Configuration == 0)
 8001b2a:	7a8a      	ldrb	r2, [r1, #10]
 8001b2c:	2a00      	cmp	r2, #0
 8001b2e:	d0f5      	beq.n	8001b1c <Standard_SetEndPointFeature+0x30>
  {
    return USB_UNSUPPORT;
  }
  else
  {
    if (wIndex0 & 0x80)
 8001b30:	f003 0380 	and.w	r3, r3, #128	; 0x80
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 8001b34:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 8001b38:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
  {
    return USB_UNSUPPORT;
  }
  else
  {
    if (wIndex0 & 0x80)
 8001b3c:	b2db      	uxtb	r3, r3
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 8001b3e:	6811      	ldr	r1, [r2, #0]
  {
    return USB_UNSUPPORT;
  }
  else
  {
    if (wIndex0 & 0x80)
 8001b40:	b17b      	cbz	r3, 8001b62 <Standard_SetEndPointFeature+0x76>
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 8001b42:	f648 73bf 	movw	r3, #36799	; 0x8fbf
 8001b46:	400b      	ands	r3, r1
 8001b48:	f083 0310 	eor.w	r3, r3, #16
 8001b4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b54:	6013      	str	r3, [r2, #0]
    {
      /* OUT endpoint */
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
    }
  }
  pUser_Standard_Requests->User_SetEndPointFeature();
 8001b56:	4b0a      	ldr	r3, [pc, #40]	; (8001b80 <Standard_SetEndPointFeature+0x94>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	699b      	ldr	r3, [r3, #24]
 8001b5c:	4798      	blx	r3
  return USB_SUCCESS;
 8001b5e:	2000      	movs	r0, #0
 8001b60:	bd38      	pop	{r3, r4, r5, pc}
    }

    else
    {
      /* OUT endpoint */
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
 8001b62:	f64b 738f 	movw	r3, #49039	; 0xbf8f
 8001b66:	400b      	ands	r3, r1
 8001b68:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001b6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b74:	6013      	str	r3, [r2, #0]
 8001b76:	e7ee      	b.n	8001b56 <Standard_SetEndPointFeature+0x6a>
 8001b78:	20001354 	.word	0x20001354
 8001b7c:	200000e0 	.word	0x200000e0
 8001b80:	20001350 	.word	0x20001350

08001b84 <Standard_GetDescriptorData>:
*******************************************************************************/
uint8_t *Standard_GetDescriptorData(uint16_t Length, ONE_DESCRIPTOR *pDesc)
{
  uint32_t  wOffset;

  wOffset = pInformation->Ctrl_Info.Usb_wOffset;
 8001b84:	4b05      	ldr	r3, [pc, #20]	; (8001b9c <Standard_GetDescriptorData+0x18>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	8a5a      	ldrh	r2, [r3, #18]
  if (Length == 0)
 8001b8a:	b110      	cbz	r0, 8001b92 <Standard_GetDescriptorData+0xe>
  {
    pInformation->Ctrl_Info.Usb_wLength = pDesc->Descriptor_Size - wOffset;
    return 0;
  }

  return pDesc->Descriptor + wOffset;
 8001b8c:	6808      	ldr	r0, [r1, #0]
 8001b8e:	1880      	adds	r0, r0, r2
}
 8001b90:	4770      	bx	lr
  uint32_t  wOffset;

  wOffset = pInformation->Ctrl_Info.Usb_wOffset;
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength = pDesc->Descriptor_Size - wOffset;
 8001b92:	8889      	ldrh	r1, [r1, #4]
 8001b94:	1a8a      	subs	r2, r1, r2
 8001b96:	821a      	strh	r2, [r3, #16]
    return 0;
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	20001354 	.word	0x20001354

08001ba0 <Post0_Process>:
* Output         : None.
* Return         : - 0 if the control State is in PAUSE
*                  - 1 if not.
*******************************************************************************/
uint8_t Post0_Process(void)
{
 8001ba0:	b508      	push	{r3, lr}
   
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 8001ba2:	4b0c      	ldr	r3, [pc, #48]	; (8001bd4 <Post0_Process+0x34>)
 8001ba4:	2000      	movs	r0, #0
 8001ba6:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
 8001baa:	4b0b      	ldr	r3, [pc, #44]	; (8001bd8 <Post0_Process+0x38>)
 8001bac:	4798      	blx	r3

  if (pInformation->ControlState == STALLED)
 8001bae:	4b0b      	ldr	r3, [pc, #44]	; (8001bdc <Post0_Process+0x3c>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	7a18      	ldrb	r0, [r3, #8]
 8001bb4:	2808      	cmp	r0, #8
 8001bb6:	d106      	bne.n	8001bc6 <Post0_Process+0x26>
  {
    vSetEPRxStatus(EP_RX_STALL);
 8001bb8:	4b09      	ldr	r3, [pc, #36]	; (8001be0 <Post0_Process+0x40>)
 8001bba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001bbe:	801a      	strh	r2, [r3, #0]
    vSetEPTxStatus(EP_TX_STALL);
 8001bc0:	4b08      	ldr	r3, [pc, #32]	; (8001be4 <Post0_Process+0x44>)
 8001bc2:	2210      	movs	r2, #16
 8001bc4:	801a      	strh	r2, [r3, #0]
  }

  return (pInformation->ControlState == PAUSE);
}
 8001bc6:	f1b0 0c09 	subs.w	ip, r0, #9
 8001bca:	f1dc 0000 	rsbs	r0, ip, #0
 8001bce:	eb50 000c 	adcs.w	r0, r0, ip
 8001bd2:	bd08      	pop	{r3, pc}
 8001bd4:	2000005c 	.word	0x2000005c
 8001bd8:	080023d1 	.word	0x080023d1
 8001bdc:	20001354 	.word	0x20001354
 8001be0:	2000135a 	.word	0x2000135a
 8001be4:	2000135c 	.word	0x2000135c

08001be8 <Out0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t Out0_Process(void)
{
 8001be8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t ControlState = pInformation->ControlState;
 8001bec:	4d35      	ldr	r5, [pc, #212]	; (8001cc4 <Out0_Process+0xdc>)
 8001bee:	682c      	ldr	r4, [r5, #0]
 8001bf0:	7a23      	ldrb	r3, [r4, #8]

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	bf18      	it	ne
 8001bf6:	2b04      	cmpne	r3, #4
 8001bf8:	bf14      	ite	ne
 8001bfa:	2600      	movne	r6, #0
 8001bfc:	2601      	moveq	r6, #1
 8001bfe:	d005      	beq.n	8001c0c <Out0_Process+0x24>
  {
    /* host aborts the transfer before finish */
    ControlState = STALLED;
  }
  else if ((ControlState == OUT_DATA) || (ControlState == LAST_OUT_DATA))
 8001c00:	2b03      	cmp	r3, #3
 8001c02:	bf18      	it	ne
 8001c04:	2b05      	cmpne	r3, #5
 8001c06:	d007      	beq.n	8001c18 <Out0_Process+0x30>
  {
    DataStageOut();
    ControlState = pInformation->ControlState; /* may be changed outside the function */
  }

  else if (ControlState == WAIT_STATUS_OUT)
 8001c08:	2b07      	cmp	r3, #7
 8001c0a:	d00e      	beq.n	8001c2a <Out0_Process+0x42>
 8001c0c:	2308      	movs	r3, #8
  else
  {
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;
 8001c0e:	7223      	strb	r3, [r4, #8]

  return Post0_Process();
 8001c10:	4b2d      	ldr	r3, [pc, #180]	; (8001cc8 <Out0_Process+0xe0>)
 8001c12:	4798      	blx	r3
 8001c14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
  uint32_t save_rLength;

  save_rLength = pEPinfo->Usb_rLength;

  if (pEPinfo->CopyData && save_rLength)
 8001c18:	69a1      	ldr	r1, [r4, #24]
void DataStageOut(void)
{
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
  uint32_t save_rLength;

  save_rLength = pEPinfo->Usb_rLength;
 8001c1a:	8a23      	ldrh	r3, [r4, #16]

  if (pEPinfo->CopyData && save_rLength)
 8001c1c:	b311      	cbz	r1, 8001c64 <Out0_Process+0x7c>
 8001c1e:	b95b      	cbnz	r3, 8001c38 <Out0_Process+0x50>
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
    SetEPTxCount(ENDP0, 0);
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 8001c20:	8aa3      	ldrh	r3, [r4, #20]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d049      	beq.n	8001cba <Out0_Process+0xd2>
 8001c26:	4a29      	ldr	r2, [pc, #164]	; (8001ccc <Out0_Process+0xe4>)
 8001c28:	e02e      	b.n	8001c88 <Out0_Process+0xa0>
    ControlState = pInformation->ControlState; /* may be changed outside the function */
  }

  else if (ControlState == WAIT_STATUS_OUT)
  {
    (*pProperty->Process_Status_OUT)();
 8001c2a:	4b29      	ldr	r3, [pc, #164]	; (8001cd0 <Out0_Process+0xe8>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	4798      	blx	r3
 8001c32:	682c      	ldr	r4, [r5, #0]
 8001c34:	2308      	movs	r3, #8
 8001c36:	e7ea      	b.n	8001c0e <Out0_Process+0x26>
  if (pEPinfo->CopyData && save_rLength)
  {
    uint8_t *Buffer;
    uint32_t Length;

    Length = pEPinfo->PacketSize;
 8001c38:	8aa7      	ldrh	r7, [r4, #20]
    if (Length > save_rLength)
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
 8001c3a:	429f      	cmp	r7, r3
 8001c3c:	bf28      	it	cs
 8001c3e:	461f      	movcs	r7, r3
 8001c40:	4638      	mov	r0, r7
 8001c42:	4788      	blx	r1
    pEPinfo->Usb_rLength -= Length;
 8001c44:	8a22      	ldrh	r2, [r4, #16]
    pEPinfo->Usb_rOffset += Length;
 8001c46:	8a63      	ldrh	r3, [r4, #18]
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
    pEPinfo->Usb_rLength -= Length;
 8001c48:	1bd2      	subs	r2, r2, r7
    pEPinfo->Usb_rOffset += Length;
 8001c4a:	18fb      	adds	r3, r7, r3
    if (Length > save_rLength)
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
 8001c4c:	4680      	mov	r8, r0
    pEPinfo->Usb_rLength -= Length;
 8001c4e:	8222      	strh	r2, [r4, #16]
    pEPinfo->Usb_rOffset += Length;
 8001c50:	8263      	strh	r3, [r4, #18]
    PMAToUserBufferCopy(Buffer, GetEPRxAddr(ENDP0), Length);
 8001c52:	4630      	mov	r0, r6
 8001c54:	4b1f      	ldr	r3, [pc, #124]	; (8001cd4 <Out0_Process+0xec>)
 8001c56:	4798      	blx	r3
 8001c58:	4b1f      	ldr	r3, [pc, #124]	; (8001cd8 <Out0_Process+0xf0>)
 8001c5a:	4601      	mov	r1, r0
 8001c5c:	463a      	mov	r2, r7
 8001c5e:	4640      	mov	r0, r8
 8001c60:	4798      	blx	r3
 8001c62:	8a23      	ldrh	r3, [r4, #16]

  }

  if (pEPinfo->Usb_rLength != 0)
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d0db      	beq.n	8001c20 <Out0_Process+0x38>
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 8001c68:	4b1c      	ldr	r3, [pc, #112]	; (8001cdc <Out0_Process+0xf4>)
    SetEPTxCount(ENDP0, 0);
 8001c6a:	2000      	movs	r0, #0

  }

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 8001c6c:	f44f 5240 	mov.w	r2, #12288	; 0x3000
    SetEPTxCount(ENDP0, 0);
 8001c70:	4601      	mov	r1, r0

  }

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 8001c72:	801a      	strh	r2, [r3, #0]
    SetEPTxCount(ENDP0, 0);
 8001c74:	4b1a      	ldr	r3, [pc, #104]	; (8001ce0 <Out0_Process+0xf8>)
 8001c76:	4798      	blx	r3
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 8001c78:	8a23      	ldrh	r3, [r4, #16]
 8001c7a:	8aa1      	ldrh	r1, [r4, #20]

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
    SetEPTxCount(ENDP0, 0);
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
 8001c7c:	4a13      	ldr	r2, [pc, #76]	; (8001ccc <Out0_Process+0xe4>)
 8001c7e:	2030      	movs	r0, #48	; 0x30
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 8001c80:	4299      	cmp	r1, r3

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
    SetEPTxCount(ENDP0, 0);
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
 8001c82:	8010      	strh	r0, [r2, #0]
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 8001c84:	d919      	bls.n	8001cba <Out0_Process+0xd2>
  {
    pInformation->ControlState = OUT_DATA;
  }
  else
  {
    if (pEPinfo->Usb_rLength > 0)
 8001c86:	b9a3      	cbnz	r3, 8001cb2 <Out0_Process+0xca>
    {
      pInformation->ControlState = LAST_OUT_DATA;
    }
    else if (pEPinfo->Usb_rLength == 0)
    {
      pInformation->ControlState = WAIT_STATUS_IN;
 8001c88:	682c      	ldr	r4, [r5, #0]
 8001c8a:	2106      	movs	r1, #6
      USB_StatusIn();
 8001c8c:	f645 4350 	movw	r3, #23632	; 0x5c50
    {
      pInformation->ControlState = LAST_OUT_DATA;
    }
    else if (pEPinfo->Usb_rLength == 0)
    {
      pInformation->ControlState = WAIT_STATUS_IN;
 8001c90:	7221      	strb	r1, [r4, #8]
      USB_StatusIn();
 8001c92:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001c96:	6819      	ldr	r1, [r3, #0]
 8001c98:	f243 0302 	movw	r3, #12290	; 0x3002
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
}
 8001c9c:	b289      	uxth	r1, r1
      pInformation->ControlState = LAST_OUT_DATA;
    }
    else if (pEPinfo->Usb_rLength == 0)
    {
      pInformation->ControlState = WAIT_STATUS_IN;
      USB_StatusIn();
 8001c9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001ca2:	18cb      	adds	r3, r1, r3
 8001ca4:	005b      	lsls	r3, r3, #1
 8001ca6:	2100      	movs	r1, #0
 8001ca8:	6019      	str	r1, [r3, #0]
 8001caa:	2330      	movs	r3, #48	; 0x30
 8001cac:	8013      	strh	r3, [r2, #0]
 8001cae:	7a23      	ldrb	r3, [r4, #8]
 8001cb0:	e7ad      	b.n	8001c0e <Out0_Process+0x26>
  }
  else
  {
    if (pEPinfo->Usb_rLength > 0)
    {
      pInformation->ControlState = LAST_OUT_DATA;
 8001cb2:	682c      	ldr	r4, [r5, #0]
 8001cb4:	2305      	movs	r3, #5
 8001cb6:	7223      	strb	r3, [r4, #8]
 8001cb8:	e7a9      	b.n	8001c0e <Out0_Process+0x26>
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
  {
    pInformation->ControlState = OUT_DATA;
 8001cba:	682c      	ldr	r4, [r5, #0]
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	7223      	strb	r3, [r4, #8]
 8001cc0:	e7a5      	b.n	8001c0e <Out0_Process+0x26>
 8001cc2:	bf00      	nop
 8001cc4:	20001354 	.word	0x20001354
 8001cc8:	08001ba1 	.word	0x08001ba1
 8001ccc:	2000135c 	.word	0x2000135c
 8001cd0:	2000132c 	.word	0x2000132c
 8001cd4:	08002391 	.word	0x08002391
 8001cd8:	080021a5 	.word	0x080021a5
 8001cdc:	2000135a 	.word	0x2000135a
 8001ce0:	080023b1 	.word	0x080023b1

08001ce4 <Setup0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t Setup0_Process(void)
{
 8001ce4:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8001ce6:	f645 4350 	movw	r3, #23632	; 0x5c50
 8001cea:	f2c4 0300 	movt	r3, #16384	; 0x4000

  if (pInformation->ControlState != PAUSE)
 8001cee:	4d9d      	ldr	r5, [pc, #628]	; (8001f64 <Setup0_Process+0x280>)
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8001cf0:	681a      	ldr	r2, [r3, #0]

  if (pInformation->ControlState != PAUSE)
 8001cf2:	682c      	ldr	r4, [r5, #0]
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8001cf4:	f243 0304 	movw	r3, #12292	; 0x3004
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
}
 8001cf8:	b292      	uxth	r2, r2
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8001cfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001cfe:	18d3      	adds	r3, r2, r3

  if (pInformation->ControlState != PAUSE)
 8001d00:	7a22      	ldrb	r2, [r4, #8]
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8001d02:	005b      	lsls	r3, r3, #1

  if (pInformation->ControlState != PAUSE)
 8001d04:	2a09      	cmp	r2, #9
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t Setup0_Process(void)
{
 8001d06:	b083      	sub	sp, #12
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8001d08:	681e      	ldr	r6, [r3, #0]

  if (pInformation->ControlState != PAUSE)
 8001d0a:	d044      	beq.n	8001d96 <Setup0_Process+0xb2>
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
}
 8001d0c:	b2b6      	uxth	r6, r6
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8001d0e:	0076      	lsls	r6, r6, #1
 8001d10:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8001d14:	f506 46c0 	add.w	r6, r6, #24576	; 0x6000

  if (pInformation->ControlState != PAUSE)
  {
    pInformation->USBbmRequestType = *pBuf.b++; /* bmRequestType */
 8001d18:	7833      	ldrb	r3, [r6, #0]
    pInformation->USBbRequest = *pBuf.b++; /* bRequest */
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwValue = ByteSwap(*pBuf.w++); /* wValue */
 8001d1a:	4f93      	ldr	r7, [pc, #588]	; (8001f68 <Setup0_Process+0x284>)
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */

  if (pInformation->ControlState != PAUSE)
  {
    pInformation->USBbmRequestType = *pBuf.b++; /* bmRequestType */
 8001d1c:	7023      	strb	r3, [r4, #0]
    pInformation->USBbRequest = *pBuf.b++; /* bRequest */
 8001d1e:	7873      	ldrb	r3, [r6, #1]
 8001d20:	7063      	strb	r3, [r4, #1]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwValue = ByteSwap(*pBuf.w++); /* wValue */
 8001d22:	88b0      	ldrh	r0, [r6, #4]
 8001d24:	47b8      	blx	r7
 8001d26:	8060      	strh	r0, [r4, #2]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
 8001d28:	8930      	ldrh	r0, [r6, #8]
 8001d2a:	682c      	ldr	r4, [r5, #0]
 8001d2c:	47b8      	blx	r7
 8001d2e:	80a0      	strh	r0, [r4, #4]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwLength = *pBuf.w; /* wLength */
 8001d30:	89b3      	ldrh	r3, [r6, #12]
 8001d32:	682c      	ldr	r4, [r5, #0]
  }

  pInformation->ControlState = SETTING_UP;
 8001d34:	2201      	movs	r2, #1
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwValue = ByteSwap(*pBuf.w++); /* wValue */
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwLength = *pBuf.w; /* wLength */
 8001d36:	80e3      	strh	r3, [r4, #6]
  }

  pInformation->ControlState = SETTING_UP;
 8001d38:	7222      	strb	r2, [r4, #8]
  if (pInformation->USBwLength == 0)
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d030      	beq.n	8001da0 <Setup0_Process+0xbc>
*******************************************************************************/
void Data_Setup0(void)
{
  uint8_t *(*CopyRoutine)(uint16_t);
  RESULT Result;
  uint32_t Request_No = pInformation->USBbRequest;
 8001d3e:	7861      	ldrb	r1, [r4, #1]

  CopyRoutine = NULL;
  wOffset = 0;

  /*GET DESCRIPTOR*/
  if (Request_No == GET_DESCRIPTOR)
 8001d40:	2906      	cmp	r1, #6
 8001d42:	f000 8087 	beq.w	8001e54 <Setup0_Process+0x170>
      }  /* End of GET_DESCRIPTOR */
    }
  }

  /*GET STATUS*/
  else if ((Request_No == GET_STATUS) && (pInformation->USBwValue == 0)
 8001d46:	2900      	cmp	r1, #0
 8001d48:	d15e      	bne.n	8001e08 <Setup0_Process+0x124>
 8001d4a:	8863      	ldrh	r3, [r4, #2]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	f000 8094 	beq.w	8001e7a <Setup0_Process+0x196>
 8001d52:	4e86      	ldr	r6, [pc, #536]	; (8001f6c <Setup0_Process+0x288>)
    (*CopyRoutine)(0);
    Result = USB_SUCCESS;
  }
  else
  {
    Result = (*pProperty->Class_Data_Setup)(pInformation->USBbRequest);
 8001d54:	6833      	ldr	r3, [r6, #0]
 8001d56:	4608      	mov	r0, r1
 8001d58:	691b      	ldr	r3, [r3, #16]
 8001d5a:	4798      	blx	r3
    if (Result == USB_NOT_READY)
 8001d5c:	2803      	cmp	r0, #3
    {
      pInformation->ControlState = PAUSE;
 8001d5e:	682b      	ldr	r3, [r5, #0]
    Result = USB_SUCCESS;
  }
  else
  {
    Result = (*pProperty->Class_Data_Setup)(pInformation->USBbRequest);
    if (Result == USB_NOT_READY)
 8001d60:	d062      	beq.n	8001e28 <Setup0_Process+0x144>
      pInformation->ControlState = PAUSE;
      return;
    }
  }

  if (pInformation->Ctrl_Info.Usb_wLength == 0xFFFF)
 8001d62:	8a1a      	ldrh	r2, [r3, #16]
 8001d64:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001d68:	428a      	cmp	r2, r1
 8001d6a:	d05d      	beq.n	8001e28 <Setup0_Process+0x144>
  {
    /* Data is not ready, wait it */
    pInformation->ControlState = PAUSE;
    return;
  }
  if ((Result == USB_UNSUPPORT) || (pInformation->Ctrl_Info.Usb_wLength == 0))
 8001d6c:	2802      	cmp	r0, #2
 8001d6e:	d00c      	beq.n	8001d8a <Setup0_Process+0xa6>
 8001d70:	b15a      	cbz	r2, 8001d8a <Setup0_Process+0xa6>
    pInformation->ControlState = STALLED;
    return;
  }


  if (ValBit(pInformation->USBbmRequestType, 7))
 8001d72:	f993 1000 	ldrsb.w	r1, [r3]
 8001d76:	2900      	cmp	r1, #0
 8001d78:	f2c0 80b5 	blt.w	8001ee6 <Setup0_Process+0x202>
    pInformation->Ctrl_Info.PacketSize = pProperty->MaxPacketSize;
    DataStageIn();
  }
  else
  {
    pInformation->ControlState = OUT_DATA;
 8001d7c:	2203      	movs	r2, #3
 8001d7e:	721a      	strb	r2, [r3, #8]
    vSetEPRxStatus(EP_RX_VALID); /* enable for next data reception */
 8001d80:	4b7b      	ldr	r3, [pc, #492]	; (8001f70 <Setup0_Process+0x28c>)
 8001d82:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001d86:	801a      	strh	r2, [r3, #0]
 8001d88:	e001      	b.n	8001d8e <Setup0_Process+0xaa>
    return;
  }
  if ((Result == USB_UNSUPPORT) || (pInformation->Ctrl_Info.Usb_wLength == 0))
  {
    /* Unsupported request */
    pInformation->ControlState = STALLED;
 8001d8a:	2208      	movs	r2, #8
 8001d8c:	721a      	strb	r2, [r3, #8]
  else
  {
    /* Setup with data stage */
    Data_Setup0();
  }
  return Post0_Process();
 8001d8e:	4b79      	ldr	r3, [pc, #484]	; (8001f74 <Setup0_Process+0x290>)
 8001d90:	4798      	blx	r3
}
 8001d92:	b003      	add	sp, #12
 8001d94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d96:	88e3      	ldrh	r3, [r4, #6]
    pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwLength = *pBuf.w; /* wLength */
  }

  pInformation->ControlState = SETTING_UP;
 8001d98:	2201      	movs	r2, #1
 8001d9a:	7222      	strb	r2, [r4, #8]
  if (pInformation->USBwLength == 0)
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d1ce      	bne.n	8001d3e <Setup0_Process+0x5a>
{
  RESULT Result = USB_UNSUPPORT;
  uint32_t RequestNo = pInformation->USBbRequest;
  uint32_t ControlState;

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8001da0:	7823      	ldrb	r3, [r4, #0]
* Return         : None.
*******************************************************************************/
void NoData_Setup0(void)
{
  RESULT Result = USB_UNSUPPORT;
  uint32_t RequestNo = pInformation->USBbRequest;
 8001da2:	7866      	ldrb	r6, [r4, #1]
  uint32_t ControlState;

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8001da4:	f013 037f 	ands.w	r3, r3, #127	; 0x7f
 8001da8:	d141      	bne.n	8001e2e <Setup0_Process+0x14a>
  {
    /* Device Request*/
    /* SET_CONFIGURATION*/
    if (RequestNo == SET_CONFIGURATION)
 8001daa:	2e09      	cmp	r6, #9
 8001dac:	f000 8108 	beq.w	8001fc0 <Setup0_Process+0x2dc>
    {
      Result = Standard_SetConfiguration();
    }

    /*SET ADDRESS*/
    else if (RequestNo == SET_ADDRESS)
 8001db0:	2e05      	cmp	r6, #5
 8001db2:	f000 80bf 	beq.w	8001f34 <Setup0_Process+0x250>
      {
        Result = USB_SUCCESS;
      }
    }
    /*SET FEATURE for Device*/
    else if (RequestNo == SET_FEATURE)
 8001db6:	2e03      	cmp	r6, #3
 8001db8:	f000 80f0 	beq.w	8001f9c <Setup0_Process+0x2b8>
      {
        Result = USB_UNSUPPORT;
      }
    }
    /*Clear FEATURE for Device */
    else if (RequestNo == CLEAR_FEATURE)
 8001dbc:	2e01      	cmp	r6, #1
 8001dbe:	d13b      	bne.n	8001e38 <Setup0_Process+0x154>
    {
      if (pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP
 8001dc0:	78e3      	ldrb	r3, [r4, #3]
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d138      	bne.n	8001e38 <Setup0_Process+0x154>
          && pInformation->USBwIndex == 0
 8001dc6:	88a3      	ldrh	r3, [r4, #4]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d135      	bne.n	8001e38 <Setup0_Process+0x154>
          && ValBit(pInformation->Current_Feature, 5))
 8001dcc:	7a63      	ldrb	r3, [r4, #9]
 8001dce:	f003 0320 	and.w	r3, r3, #32
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d02f      	beq.n	8001e38 <Setup0_Process+0x154>
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
  {
    /*CLEAR FEATURE for EndPoint*/
    if (RequestNo == CLEAR_FEATURE)
    {
      Result = Standard_ClearFeature();
 8001dd8:	4b67      	ldr	r3, [pc, #412]	; (8001f78 <Setup0_Process+0x294>)
 8001dda:	4798      	blx	r3
  {
    Result = USB_UNSUPPORT;
  }


  if (Result != USB_SUCCESS)
 8001ddc:	bb60      	cbnz	r0, 8001e38 <Setup0_Process+0x154>
 8001dde:	682c      	ldr	r4, [r5, #0]
    goto exit_NoData_Setup0;
  }

  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();
 8001de0:	f645 4350 	movw	r3, #23632	; 0x5c50
 8001de4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	f243 0302 	movw	r3, #12290	; 0x3002
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
}
 8001dee:	b292      	uxth	r2, r2
    goto exit_NoData_Setup0;
  }

  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();
 8001df0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001df4:	18d3      	adds	r3, r2, r3
 8001df6:	005b      	lsls	r3, r3, #1
 8001df8:	2200      	movs	r2, #0
 8001dfa:	601a      	str	r2, [r3, #0]
 8001dfc:	4a5f      	ldr	r2, [pc, #380]	; (8001f7c <Setup0_Process+0x298>)
 8001dfe:	2306      	movs	r3, #6
 8001e00:	2130      	movs	r1, #48	; 0x30
 8001e02:	8011      	strh	r1, [r2, #0]

exit_NoData_Setup0:
  pInformation->ControlState = ControlState;
 8001e04:	7223      	strb	r3, [r4, #8]
 8001e06:	e7c2      	b.n	8001d8e <Setup0_Process+0xaa>
    }

  }

  /*GET CONFIGURATION*/
  else if (Request_No == GET_CONFIGURATION)
 8001e08:	2908      	cmp	r1, #8
 8001e0a:	d148      	bne.n	8001e9e <Setup0_Process+0x1ba>
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8001e0c:	7823      	ldrb	r3, [r4, #0]
 8001e0e:	065b      	lsls	r3, r3, #25
 8001e10:	d19f      	bne.n	8001d52 <Setup0_Process+0x6e>
    {
      CopyRoutine = Standard_GetConfiguration;
 8001e12:	4b5b      	ldr	r3, [pc, #364]	; (8001f80 <Setup0_Process+0x29c>)

  }
  
  if (CopyRoutine)
  {
    pInformation->Ctrl_Info.Usb_wOffset = wOffset;
 8001e14:	2000      	movs	r0, #0
    pInformation->Ctrl_Info.CopyData = CopyRoutine;
 8001e16:	61a3      	str	r3, [r4, #24]

  }
  
  if (CopyRoutine)
  {
    pInformation->Ctrl_Info.Usb_wOffset = wOffset;
 8001e18:	8260      	strh	r0, [r4, #18]
    pInformation->Ctrl_Info.CopyData = CopyRoutine;
    /* sb in the original the cast to word was directly */
    /* now the cast is made step by step */
    (*CopyRoutine)(0);
 8001e1a:	4798      	blx	r3
      pInformation->ControlState = PAUSE;
      return;
    }
  }

  if (pInformation->Ctrl_Info.Usb_wLength == 0xFFFF)
 8001e1c:	682b      	ldr	r3, [r5, #0]
 8001e1e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001e22:	8a1a      	ldrh	r2, [r3, #16]
 8001e24:	428a      	cmp	r2, r1
 8001e26:	d1a3      	bne.n	8001d70 <Setup0_Process+0x8c>
  {
    /* Data is not ready, wait it */
    pInformation->ControlState = PAUSE;
 8001e28:	2209      	movs	r2, #9
 8001e2a:	721a      	strb	r2, [r3, #8]
 8001e2c:	e7af      	b.n	8001d8e <Setup0_Process+0xaa>
    }

  }

  /* Interface Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d071      	beq.n	8001f16 <Setup0_Process+0x232>
      Result = Standard_SetInterface();
    }
  }

  /* EndPoint Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	f000 808d 	beq.w	8001f52 <Setup0_Process+0x26e>
  }


  if (Result != USB_SUCCESS)
  {
    Result = (*pProperty->Class_NoData_Setup)(RequestNo);
 8001e38:	4b4c      	ldr	r3, [pc, #304]	; (8001f6c <Setup0_Process+0x288>)
 8001e3a:	4630      	mov	r0, r6
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	695b      	ldr	r3, [r3, #20]
 8001e40:	4798      	blx	r3
    if (Result == USB_NOT_READY)
 8001e42:	2803      	cmp	r0, #3
 8001e44:	f000 80c5 	beq.w	8001fd2 <Setup0_Process+0x2ee>
 8001e48:	682c      	ldr	r4, [r5, #0]
      ControlState = PAUSE;
      goto exit_NoData_Setup0;
    }
  }

  if (Result != USB_SUCCESS)
 8001e4a:	2800      	cmp	r0, #0
 8001e4c:	d0c8      	beq.n	8001de0 <Setup0_Process+0xfc>
    /*SET ADDRESS*/
    else if (RequestNo == SET_ADDRESS)
    {
      if ((pInformation->USBwValue0 > 127) || (pInformation->USBwValue1 != 0)
          || (pInformation->USBwIndex != 0)
          || (pInformation->Current_Configuration != 0))
 8001e4e:	2308      	movs	r3, #8
  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();

exit_NoData_Setup0:
  pInformation->ControlState = ControlState;
 8001e50:	7223      	strb	r3, [r4, #8]
 8001e52:	e79c      	b.n	8001d8e <Setup0_Process+0xaa>
  wOffset = 0;

  /*GET DESCRIPTOR*/
  if (Request_No == GET_DESCRIPTOR)
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8001e54:	7823      	ldrb	r3, [r4, #0]
 8001e56:	065b      	lsls	r3, r3, #25
 8001e58:	f47f af7b 	bne.w	8001d52 <Setup0_Process+0x6e>
    {
      uint8_t wValue1 = pInformation->USBwValue1;
 8001e5c:	78a3      	ldrb	r3, [r4, #2]
      if (wValue1 == DEVICE_DESCRIPTOR)
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
 8001e5e:	4e43      	ldr	r6, [pc, #268]	; (8001f6c <Setup0_Process+0x288>)
  if (Request_No == GET_DESCRIPTOR)
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
    {
      uint8_t wValue1 = pInformation->USBwValue1;
      if (wValue1 == DEVICE_DESCRIPTOR)
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	f000 80b0 	beq.w	8001fc6 <Setup0_Process+0x2e2>
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
      }
      else if (wValue1 == CONFIG_DESCRIPTOR)
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d05e      	beq.n	8001f28 <Setup0_Process+0x244>
      {
        CopyRoutine = pProperty->GetConfigDescriptor;
      }
      else if (wValue1 == STRING_DESCRIPTOR)
 8001e6a:	2b03      	cmp	r3, #3
 8001e6c:	f47f af72 	bne.w	8001d54 <Setup0_Process+0x70>
      {
        CopyRoutine = pProperty->GetStringDescriptor;
 8001e70:	6833      	ldr	r3, [r6, #0]
 8001e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      CopyRoutine = Standard_GetInterface;
    }

  }
  
  if (CopyRoutine)
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d1cd      	bne.n	8001e14 <Setup0_Process+0x130>
 8001e78:	e76c      	b.n	8001d54 <Setup0_Process+0x70>
  }

  /*GET STATUS*/
  else if ((Request_No == GET_STATUS) && (pInformation->USBwValue == 0)
           && (pInformation->USBwLength == 0x0002)
           && (pInformation->USBwIndex1 == 0))
 8001e7a:	6863      	ldr	r3, [r4, #4]
 8001e7c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001e80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001e84:	f47f af65 	bne.w	8001d52 <Setup0_Process+0x6e>
  {
    /* GET STATUS for Device*/
    if ((Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8001e88:	7823      	ldrb	r3, [r4, #0]
 8001e8a:	f013 037f 	ands.w	r3, r3, #127	; 0x7f
 8001e8e:	f040 80a4 	bne.w	8001fda <Setup0_Process+0x2f6>
        && (pInformation->USBwIndex == 0))
 8001e92:	88a3      	ldrh	r3, [r4, #4]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	f47f af5c 	bne.w	8001d52 <Setup0_Process+0x6e>
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
          && (Status != 0))
      {
        CopyRoutine = Standard_GetStatus;
 8001e9a:	4b3a      	ldr	r3, [pc, #232]	; (8001f84 <Setup0_Process+0x2a0>)
 8001e9c:	e7ba      	b.n	8001e14 <Setup0_Process+0x130>
    {
      CopyRoutine = Standard_GetConfiguration;
    }
  }
  /*GET INTERFACE*/
  else if (Request_No == GET_INTERFACE)
 8001e9e:	290a      	cmp	r1, #10
 8001ea0:	f47f af57 	bne.w	8001d52 <Setup0_Process+0x6e>
  {
    if ((Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8001ea4:	7823      	ldrb	r3, [r4, #0]
 8001ea6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	f47f af51 	bne.w	8001d52 <Setup0_Process+0x6e>
        && (pInformation->Current_Configuration != 0) && (pInformation->USBwValue == 0)
 8001eb0:	7aa3      	ldrb	r3, [r4, #10]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	f43f af4d 	beq.w	8001d52 <Setup0_Process+0x6e>
 8001eb8:	8863      	ldrh	r3, [r4, #2]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	f47f af49 	bne.w	8001d52 <Setup0_Process+0x6e>
        && (pInformation->USBwIndex1 == 0) && (pInformation->USBwLength == 0x0001)
 8001ec0:	6862      	ldr	r2, [r4, #4]
        && ((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS))
 8001ec2:	4e2a      	ldr	r6, [pc, #168]	; (8001f6c <Setup0_Process+0x288>)
  /*GET INTERFACE*/
  else if (Request_No == GET_INTERFACE)
  {
    if ((Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
        && (pInformation->Current_Configuration != 0) && (pInformation->USBwValue == 0)
        && (pInformation->USBwIndex1 == 0) && (pInformation->USBwLength == 0x0001)
 8001ec4:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8001ec8:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8001ecc:	f47f af42 	bne.w	8001d54 <Setup0_Process+0x70>
        && ((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS))
 8001ed0:	6832      	ldr	r2, [r6, #0]
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	7960      	ldrb	r0, [r4, #5]
 8001ed6:	6993      	ldr	r3, [r2, #24]
 8001ed8:	4798      	blx	r3
 8001eda:	2800      	cmp	r0, #0
 8001edc:	f040 80be 	bne.w	800205c <Setup0_Process+0x378>
 8001ee0:	682c      	ldr	r4, [r5, #0]
    {
      CopyRoutine = Standard_GetInterface;
 8001ee2:	4b29      	ldr	r3, [pc, #164]	; (8001f88 <Setup0_Process+0x2a4>)
 8001ee4:	e796      	b.n	8001e14 <Setup0_Process+0x130>


  if (ValBit(pInformation->USBbmRequestType, 7))
  {
    /* Device ==> Host */
    __IO uint32_t wLength = pInformation->USBwLength;
 8001ee6:	88d9      	ldrh	r1, [r3, #6]
 8001ee8:	9101      	str	r1, [sp, #4]
     
    /* Restrict the data length to be the one host asks for */
    if (pInformation->Ctrl_Info.Usb_wLength > wLength)
 8001eea:	9801      	ldr	r0, [sp, #4]
 8001eec:	4282      	cmp	r2, r0
 8001eee:	d817      	bhi.n	8001f20 <Setup0_Process+0x23c>
    {
      pInformation->Ctrl_Info.Usb_wLength = wLength;
    }
    
    else if (pInformation->Ctrl_Info.Usb_wLength < pInformation->USBwLength)
 8001ef0:	428a      	cmp	r2, r1
    {
      if (pInformation->Ctrl_Info.Usb_wLength < pProperty->MaxPacketSize)
 8001ef2:	4e1e      	ldr	r6, [pc, #120]	; (8001f6c <Setup0_Process+0x288>)
    if (pInformation->Ctrl_Info.Usb_wLength > wLength)
    {
      pInformation->Ctrl_Info.Usb_wLength = wLength;
    }
    
    else if (pInformation->Ctrl_Info.Usb_wLength < pInformation->USBwLength)
 8001ef4:	d208      	bcs.n	8001f08 <Setup0_Process+0x224>
    {
      if (pInformation->Ctrl_Info.Usb_wLength < pProperty->MaxPacketSize)
 8001ef6:	6831      	ldr	r1, [r6, #0]
 8001ef8:	f891 102c 	ldrb.w	r1, [r1, #44]	; 0x2c
 8001efc:	428a      	cmp	r2, r1
 8001efe:	f080 8095 	bcs.w	800202c <Setup0_Process+0x348>
      {
        Data_Mul_MaxPacketSize = FALSE;
 8001f02:	4a22      	ldr	r2, [pc, #136]	; (8001f8c <Setup0_Process+0x2a8>)
 8001f04:	2100      	movs	r1, #0
 8001f06:	7011      	strb	r1, [r2, #0]
      {
        Data_Mul_MaxPacketSize = TRUE;
      }
    }   

    pInformation->Ctrl_Info.PacketSize = pProperty->MaxPacketSize;
 8001f08:	6832      	ldr	r2, [r6, #0]
 8001f0a:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8001f0e:	829a      	strh	r2, [r3, #20]
    DataStageIn();
 8001f10:	4b1f      	ldr	r3, [pc, #124]	; (8001f90 <Setup0_Process+0x2ac>)
 8001f12:	4798      	blx	r3
 8001f14:	e73b      	b.n	8001d8e <Setup0_Process+0xaa>

  /* Interface Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
  {
    /*SET INTERFACE*/
    if (RequestNo == SET_INTERFACE)
 8001f16:	2e0b      	cmp	r6, #11
 8001f18:	d18e      	bne.n	8001e38 <Setup0_Process+0x154>
    {
      Result = Standard_SetInterface();
 8001f1a:	4b1e      	ldr	r3, [pc, #120]	; (8001f94 <Setup0_Process+0x2b0>)
 8001f1c:	4798      	blx	r3
 8001f1e:	e75d      	b.n	8001ddc <Setup0_Process+0xf8>
    __IO uint32_t wLength = pInformation->USBwLength;
     
    /* Restrict the data length to be the one host asks for */
    if (pInformation->Ctrl_Info.Usb_wLength > wLength)
    {
      pInformation->Ctrl_Info.Usb_wLength = wLength;
 8001f20:	9a01      	ldr	r2, [sp, #4]
 8001f22:	4e12      	ldr	r6, [pc, #72]	; (8001f6c <Setup0_Process+0x288>)
 8001f24:	821a      	strh	r2, [r3, #16]
 8001f26:	e7ef      	b.n	8001f08 <Setup0_Process+0x224>
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
      }
      else if (wValue1 == CONFIG_DESCRIPTOR)
      {
        CopyRoutine = pProperty->GetConfigDescriptor;
 8001f28:	6833      	ldr	r3, [r6, #0]
 8001f2a:	6a1b      	ldr	r3, [r3, #32]
      CopyRoutine = Standard_GetInterface;
    }

  }
  
  if (CopyRoutine)
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	f47f af71 	bne.w	8001e14 <Setup0_Process+0x130>
 8001f32:	e70f      	b.n	8001d54 <Setup0_Process+0x70>
    }

    /*SET ADDRESS*/
    else if (RequestNo == SET_ADDRESS)
    {
      if ((pInformation->USBwValue0 > 127) || (pInformation->USBwValue1 != 0)
 8001f34:	f994 3003 	ldrsb.w	r3, [r4, #3]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	db88      	blt.n	8001e4e <Setup0_Process+0x16a>
 8001f3c:	78a3      	ldrb	r3, [r4, #2]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d185      	bne.n	8001e4e <Setup0_Process+0x16a>
          || (pInformation->USBwIndex != 0)
 8001f42:	88a3      	ldrh	r3, [r4, #4]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d182      	bne.n	8001e4e <Setup0_Process+0x16a>
          || (pInformation->Current_Configuration != 0))
 8001f48:	7aa3      	ldrb	r3, [r4, #10]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	f43f af48 	beq.w	8001de0 <Setup0_Process+0xfc>
 8001f50:	e77d      	b.n	8001e4e <Setup0_Process+0x16a>

  /* EndPoint Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
  {
    /*CLEAR FEATURE for EndPoint*/
    if (RequestNo == CLEAR_FEATURE)
 8001f52:	2e01      	cmp	r6, #1
 8001f54:	f43f af40 	beq.w	8001dd8 <Setup0_Process+0xf4>
    {
      Result = Standard_ClearFeature();
    }
    /* SET FEATURE for EndPoint*/
    else if (RequestNo == SET_FEATURE)
 8001f58:	2e03      	cmp	r6, #3
 8001f5a:	f47f af6d 	bne.w	8001e38 <Setup0_Process+0x154>
    {
      Result = Standard_SetEndPointFeature();
 8001f5e:	4b0e      	ldr	r3, [pc, #56]	; (8001f98 <Setup0_Process+0x2b4>)
 8001f60:	4798      	blx	r3
 8001f62:	e73b      	b.n	8001ddc <Setup0_Process+0xf8>
 8001f64:	20001354 	.word	0x20001354
 8001f68:	08002439 	.word	0x08002439
 8001f6c:	2000132c 	.word	0x2000132c
 8001f70:	2000135a 	.word	0x2000135a
 8001f74:	08001ba1 	.word	0x08001ba1
 8001f78:	080019f5 	.word	0x080019f5
 8001f7c:	2000135c 	.word	0x2000135c
 8001f80:	080017b1 	.word	0x080017b1
 8001f84:	08001801 	.word	0x08001801
 8001f88:	080017d9 	.word	0x080017d9
 8001f8c:	200002dc 	.word	0x200002dc
 8001f90:	08001899 	.word	0x08001899
 8001f94:	080019a5 	.word	0x080019a5
 8001f98:	08001aed 	.word	0x08001aed
      }
    }
    /*SET FEATURE for Device*/
    else if (RequestNo == SET_FEATURE)
    {
      if ((pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP) \
 8001f9c:	78e3      	ldrb	r3, [r4, #3]
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	f47f af4a 	bne.w	8001e38 <Setup0_Process+0x154>
          && (pInformation->USBwIndex == 0))
 8001fa4:	88a3      	ldrh	r3, [r4, #4]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	f47f af46 	bne.w	8001e38 <Setup0_Process+0x154>
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetDeviceFeature(void)
{
  SetBit(pInformation->Current_Feature, 5);
 8001fac:	7a62      	ldrb	r2, [r4, #9]
  pUser_Standard_Requests->User_SetDeviceFeature();
 8001fae:	4b2d      	ldr	r3, [pc, #180]	; (8002064 <Setup0_Process+0x380>)
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetDeviceFeature(void)
{
  SetBit(pInformation->Current_Feature, 5);
 8001fb0:	f042 0220 	orr.w	r2, r2, #32
  pUser_Standard_Requests->User_SetDeviceFeature();
 8001fb4:	681b      	ldr	r3, [r3, #0]
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetDeviceFeature(void)
{
  SetBit(pInformation->Current_Feature, 5);
 8001fb6:	7262      	strb	r2, [r4, #9]
  pUser_Standard_Requests->User_SetDeviceFeature();
 8001fb8:	69db      	ldr	r3, [r3, #28]
 8001fba:	4798      	blx	r3
 8001fbc:	682c      	ldr	r4, [r5, #0]
 8001fbe:	e70f      	b.n	8001de0 <Setup0_Process+0xfc>
  {
    /* Device Request*/
    /* SET_CONFIGURATION*/
    if (RequestNo == SET_CONFIGURATION)
    {
      Result = Standard_SetConfiguration();
 8001fc0:	4b29      	ldr	r3, [pc, #164]	; (8002068 <Setup0_Process+0x384>)
 8001fc2:	4798      	blx	r3
 8001fc4:	e70a      	b.n	8001ddc <Setup0_Process+0xf8>
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
    {
      uint8_t wValue1 = pInformation->USBwValue1;
      if (wValue1 == DEVICE_DESCRIPTOR)
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
 8001fc6:	6833      	ldr	r3, [r6, #0]
 8001fc8:	69db      	ldr	r3, [r3, #28]
      CopyRoutine = Standard_GetInterface;
    }

  }
  
  if (CopyRoutine)
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	f47f af22 	bne.w	8001e14 <Setup0_Process+0x130>
 8001fd0:	e6c0      	b.n	8001d54 <Setup0_Process+0x70>
 8001fd2:	682c      	ldr	r4, [r5, #0]


  if (Result != USB_SUCCESS)
  {
    Result = (*pProperty->Class_NoData_Setup)(RequestNo);
    if (Result == USB_NOT_READY)
 8001fd4:	2309      	movs	r3, #9
  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();

exit_NoData_Setup0:
  pInformation->ControlState = ControlState;
 8001fd6:	7223      	strb	r3, [r4, #8]
 8001fd8:	e6d9      	b.n	8001d8e <Setup0_Process+0xaa>
    {
      CopyRoutine = Standard_GetStatus;
    }

    /* GET STATUS for Interface*/
    else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d031      	beq.n	8002042 <Setup0_Process+0x35e>
        CopyRoutine = Standard_GetStatus;
      }
    }

    /* GET STATUS for EndPoint*/
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	f47f aeb7 	bne.w	8001d52 <Setup0_Process+0x6e>
    {
      Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
 8001fe4:	7963      	ldrb	r3, [r4, #5]
 8001fe6:	f003 020f 	and.w	r2, r3, #15

      if (ValBit(pInformation->USBwIndex0, 7))
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 8001fea:	0090      	lsls	r0, r2, #2
 8001fec:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
    {
      Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
      Reserved = pInformation->USBwIndex0 & 0x70;

      if (ValBit(pInformation->USBwIndex0, 7))
 8001ff0:	061e      	lsls	r6, r3, #24
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 8001ff2:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
      }
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
 8001ff6:	bf56      	itet	pl
 8001ff8:	6800      	ldrpl	r0, [r0, #0]

      if (ValBit(pInformation->USBwIndex0, 7))
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 8001ffa:	6806      	ldrmi	r6, [r0, #0]
      }
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
 8001ffc:	f400 5640 	andpl.w	r6, r0, #12288	; 0x3000
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 8002000:	481a      	ldr	r0, [pc, #104]	; (800206c <Setup0_Process+0x388>)

      if (ValBit(pInformation->USBwIndex0, 7))
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 8002002:	bf48      	it	mi
 8002004:	f006 0630 	andmi.w	r6, r6, #48	; 0x30
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 8002008:	7800      	ldrb	r0, [r0, #0]
 800200a:	4282      	cmp	r2, r0
 800200c:	f4bf aea1 	bcs.w	8001d52 <Setup0_Process+0x6e>
 8002010:	f013 0f70 	tst.w	r3, #112	; 0x70
 8002014:	bf14      	ite	ne
 8002016:	2300      	movne	r3, #0
 8002018:	2301      	moveq	r3, #1
          && (Status != 0))
 800201a:	2e00      	cmp	r6, #0
 800201c:	bf0c      	ite	eq
 800201e:	2600      	moveq	r6, #0
 8002020:	f003 0601 	andne.w	r6, r3, #1
 8002024:	2e00      	cmp	r6, #0
 8002026:	f47f af38 	bne.w	8001e9a <Setup0_Process+0x1b6>
 800202a:	e692      	b.n	8001d52 <Setup0_Process+0x6e>
    {
      if (pInformation->Ctrl_Info.Usb_wLength < pProperty->MaxPacketSize)
      {
        Data_Mul_MaxPacketSize = FALSE;
      }
      else if ((pInformation->Ctrl_Info.Usb_wLength % pProperty->MaxPacketSize) == 0)
 800202c:	fb92 f0f1 	sdiv	r0, r2, r1
 8002030:	fb01 2210 	mls	r2, r1, r0, r2
 8002034:	2a00      	cmp	r2, #0
 8002036:	f47f af67 	bne.w	8001f08 <Setup0_Process+0x224>
      {
        Data_Mul_MaxPacketSize = TRUE;
 800203a:	4a0d      	ldr	r2, [pc, #52]	; (8002070 <Setup0_Process+0x38c>)
 800203c:	2101      	movs	r1, #1
 800203e:	7011      	strb	r1, [r2, #0]
 8002040:	e762      	b.n	8001f08 <Setup0_Process+0x224>
    }

    /* GET STATUS for Interface*/
    else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
    {
      if (((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS)
 8002042:	4e0c      	ldr	r6, [pc, #48]	; (8002074 <Setup0_Process+0x390>)
 8002044:	7960      	ldrb	r0, [r4, #5]
 8002046:	6833      	ldr	r3, [r6, #0]
 8002048:	699b      	ldr	r3, [r3, #24]
 800204a:	4798      	blx	r3
 800204c:	b930      	cbnz	r0, 800205c <Setup0_Process+0x378>
          && (pInformation->Current_Configuration != 0))
 800204e:	682c      	ldr	r4, [r5, #0]
 8002050:	7aa3      	ldrb	r3, [r4, #10]
 8002052:	2b00      	cmp	r3, #0
 8002054:	f47f af21 	bne.w	8001e9a <Setup0_Process+0x1b6>
 8002058:	7861      	ldrb	r1, [r4, #1]
 800205a:	e67b      	b.n	8001d54 <Setup0_Process+0x70>
 800205c:	682b      	ldr	r3, [r5, #0]
 800205e:	7859      	ldrb	r1, [r3, #1]
 8002060:	e678      	b.n	8001d54 <Setup0_Process+0x70>
 8002062:	bf00      	nop
 8002064:	20001350 	.word	0x20001350
 8002068:	08001969 	.word	0x08001969
 800206c:	200000e0 	.word	0x200000e0
 8002070:	200002dc 	.word	0x200002dc
 8002074:	2000132c 	.word	0x2000132c

08002078 <SetDeviceAddress>:
* Input          : - Val: device address.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetDeviceAddress(uint8_t Val)
{
 8002078:	b470      	push	{r4, r5, r6}
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;
 800207a:	4b0f      	ldr	r3, [pc, #60]	; (80020b8 <SetDeviceAddress+0x40>)
 800207c:	781e      	ldrb	r6, [r3, #0]

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 800207e:	b196      	cbz	r6, 80020a6 <SetDeviceAddress+0x2e>
 8002080:	f44f 44b8 	mov.w	r4, #23552	; 0x5c00
 8002084:	f2c4 0400 	movt	r4, #16384	; 0x4000
 8002088:	2300      	movs	r3, #0
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 800208a:	6825      	ldr	r5, [r4, #0]
 800208c:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 8002090:	f640 720f 	movw	r2, #3855	; 0xf0f
 8002094:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8002098:	402a      	ands	r2, r5
{
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 800209a:	3301      	adds	r3, #1
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 800209c:	430a      	orrs	r2, r1
{
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 800209e:	429e      	cmp	r6, r3
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 80020a0:	f844 2b04 	str.w	r2, [r4], #4
{
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 80020a4:	d8f1      	bhi.n	800208a <SetDeviceAddress+0x12>
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
  } /* for */
  _SetDADDR(Val | DADDR_EF); /* set device address and enable function */ 
 80020a6:	f645 434c 	movw	r3, #23628	; 0x5c4c
 80020aa:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 80020ae:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80020b2:	6018      	str	r0, [r3, #0]
}
 80020b4:	bc70      	pop	{r4, r5, r6}
 80020b6:	4770      	bx	lr
 80020b8:	200000e0 	.word	0x200000e0

080020bc <In0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t In0_Process(void)
{
 80020bc:	b510      	push	{r4, lr}
  uint32_t ControlState = pInformation->ControlState;
 80020be:	4c14      	ldr	r4, [pc, #80]	; (8002110 <In0_Process+0x54>)
 80020c0:	6823      	ldr	r3, [r4, #0]
 80020c2:	7a1a      	ldrb	r2, [r3, #8]

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
 80020c4:	2a02      	cmp	r2, #2
 80020c6:	bf18      	it	ne
 80020c8:	2a04      	cmpne	r2, #4
 80020ca:	d010      	beq.n	80020ee <In0_Process+0x32>
    DataStageIn();
    /* ControlState may be changed outside the function */
    ControlState = pInformation->ControlState;
  }

  else if (ControlState == WAIT_STATUS_IN)
 80020cc:	2a06      	cmp	r2, #6
 80020ce:	d004      	beq.n	80020da <In0_Process+0x1e>
 80020d0:	2208      	movs	r2, #8
  else
  {
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;
 80020d2:	721a      	strb	r2, [r3, #8]

  return Post0_Process();
 80020d4:	4b0f      	ldr	r3, [pc, #60]	; (8002114 <In0_Process+0x58>)
 80020d6:	4798      	blx	r3
}
 80020d8:	bd10      	pop	{r4, pc}
    ControlState = pInformation->ControlState;
  }

  else if (ControlState == WAIT_STATUS_IN)
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 80020da:	785a      	ldrb	r2, [r3, #1]
 80020dc:	2a05      	cmp	r2, #5
 80020de:	d00b      	beq.n	80020f8 <In0_Process+0x3c>
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
    {
      SetDeviceAddress(pInformation->USBwValue0);
      pUser_Standard_Requests->User_SetDeviceAddress();
    }
    (*pProperty->Process_Status_IN)();
 80020e0:	4b0d      	ldr	r3, [pc, #52]	; (8002118 <In0_Process+0x5c>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	4798      	blx	r3
 80020e8:	6823      	ldr	r3, [r4, #0]
 80020ea:	2208      	movs	r2, #8
 80020ec:	e7f1      	b.n	80020d2 <In0_Process+0x16>
{
  uint32_t ControlState = pInformation->ControlState;

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
  {
    DataStageIn();
 80020ee:	4b0b      	ldr	r3, [pc, #44]	; (800211c <In0_Process+0x60>)
 80020f0:	4798      	blx	r3
    /* ControlState may be changed outside the function */
    ControlState = pInformation->ControlState;
 80020f2:	6823      	ldr	r3, [r4, #0]
 80020f4:	7a1a      	ldrb	r2, [r3, #8]
 80020f6:	e7ec      	b.n	80020d2 <In0_Process+0x16>
  }

  else if (ControlState == WAIT_STATUS_IN)
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
 80020f8:	781a      	ldrb	r2, [r3, #0]
    ControlState = pInformation->ControlState;
  }

  else if (ControlState == WAIT_STATUS_IN)
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 80020fa:	0652      	lsls	r2, r2, #25
 80020fc:	d1f0      	bne.n	80020e0 <In0_Process+0x24>
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
    {
      SetDeviceAddress(pInformation->USBwValue0);
 80020fe:	78d8      	ldrb	r0, [r3, #3]
 8002100:	4b07      	ldr	r3, [pc, #28]	; (8002120 <In0_Process+0x64>)
 8002102:	4798      	blx	r3
      pUser_Standard_Requests->User_SetDeviceAddress();
 8002104:	4b07      	ldr	r3, [pc, #28]	; (8002124 <In0_Process+0x68>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	6a1b      	ldr	r3, [r3, #32]
 800210a:	4798      	blx	r3
 800210c:	e7e8      	b.n	80020e0 <In0_Process+0x24>
 800210e:	bf00      	nop
 8002110:	20001354 	.word	0x20001354
 8002114:	08001ba1 	.word	0x08001ba1
 8002118:	2000132c 	.word	0x2000132c
 800211c:	08001899 	.word	0x08001899
 8002120:	08002079 	.word	0x08002079
 8002124:	20001350 	.word	0x20001350

08002128 <NOP_Process>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop

0800212c <USB_Init>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Init(void)
{
 800212c:	b510      	push	{r4, lr}
  pInformation = &Device_Info;
 800212e:	f241 3234 	movw	r2, #4916	; 0x1334
 8002132:	f241 3454 	movw	r4, #4948	; 0x1354
 8002136:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800213a:	f2c2 0400 	movt	r4, #8192	; 0x2000
 800213e:	6022      	str	r2, [r4, #0]
  pInformation->ControlState = 2;
 8002140:	2402      	movs	r4, #2
 8002142:	7214      	strb	r4, [r2, #8]
  pProperty = &Device_Property;
 8002144:	f241 302c 	movw	r0, #4908	; 0x132c
 8002148:	f240 035c 	movw	r3, #92	; 0x5c
  pUser_Standard_Requests = &User_Standard_Requests;
 800214c:	f241 3150 	movw	r1, #4944	; 0x1350
 8002150:	f240 028c 	movw	r2, #140	; 0x8c
*******************************************************************************/
void USB_Init(void)
{
  pInformation = &Device_Info;
  pInformation->ControlState = 2;
  pProperty = &Device_Property;
 8002154:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002158:	f2c2 0000 	movt	r0, #8192	; 0x2000
  pUser_Standard_Requests = &User_Standard_Requests;
 800215c:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8002160:	f2c2 0200 	movt	r2, #8192	; 0x2000
*******************************************************************************/
void USB_Init(void)
{
  pInformation = &Device_Info;
  pInformation->ControlState = 2;
  pProperty = &Device_Property;
 8002164:	6003      	str	r3, [r0, #0]
  pUser_Standard_Requests = &User_Standard_Requests;
 8002166:	600a      	str	r2, [r1, #0]
  /* Initialize devices one by one */
  pProperty->Init();
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4798      	blx	r3
 800216c:	bd10      	pop	{r4, pc}
 800216e:	bf00      	nop

08002170 <UserToPMABufferCopy>:
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
 8002170:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
 8002174:	f501 5140 	add.w	r1, r1, #12288	; 0x3000
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 8002178:	3201      	adds	r2, #1
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
 800217a:	0049      	lsls	r1, r1, #1
  for (i = n; i != 0; i--)
 800217c:	1053      	asrs	r3, r2, #1
*                  - wNBytes: no. of bytes to be copied.
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800217e:	b410      	push	{r4}
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 8002180:	d00d      	beq.n	800219e <UserToPMABufferCopy+0x2e>
 8002182:	1d0a      	adds	r2, r1, #4
*                  - wPMABufAddr: address into PMA.
*                  - wNBytes: no. of bytes to be copied.
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
 8002184:	3002      	adds	r0, #2
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
  {
    temp1 = (uint16_t) * pbUsrBuf;
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8002186:	f810 4c01 	ldrb.w	r4, [r0, #-1]
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
  {
    temp1 = (uint16_t) * pbUsrBuf;
 800218a:	f810 1c02 	ldrb.w	r1, [r0, #-2]
 800218e:	3002      	adds	r0, #2
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8002190:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
    *pdwVal++ = temp2;
 8002194:	f822 1c04 	strh.w	r1, [r2, #-4]
 8002198:	3204      	adds	r2, #4
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 800219a:	3b01      	subs	r3, #1
 800219c:	d1f3      	bne.n	8002186 <UserToPMABufferCopy+0x16>
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
    *pdwVal++ = temp2;
    pdwVal++;
    pbUsrBuf++;
  }
}
 800219e:	bc10      	pop	{r4}
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop

080021a4 <PMAToUserBufferCopy>:
void PMAToUserBufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
 80021a4:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
 80021a8:	f501 5140 	add.w	r1, r1, #12288	; 0x3000
* Output         : None.
* Return         : None.
*******************************************************************************/
void PMAToUserBufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
 80021ac:	3201      	adds	r2, #1
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
 80021ae:	0049      	lsls	r1, r1, #1
  for (i = n; i != 0; i--)
 80021b0:	1053      	asrs	r3, r2, #1
 80021b2:	d008      	beq.n	80021c6 <PMAToUserBufferCopy+0x22>
*                  - wPMABufAddr = address into PMA.
*                  - wNBytes     = no. of bytes to be copied.
* Output         : None.
* Return         : None.
*******************************************************************************/
void PMAToUserBufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
 80021b4:	3002      	adds	r0, #2
 80021b6:	1f0a      	subs	r2, r1, #4
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 80021b8:	f852 1f04 	ldr.w	r1, [r2, #4]!
 80021bc:	f820 1c02 	strh.w	r1, [r0, #-2]
 80021c0:	3002      	adds	r0, #2
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 80021c2:	3b01      	subs	r3, #1
 80021c4:	d1f8      	bne.n	80021b8 <PMAToUserBufferCopy+0x14>
 80021c6:	4770      	bx	lr

080021c8 <SetBTABLE>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetBTABLE(uint16_t wRegValue)
{
  _SetBTABLE(wRegValue);
 80021c8:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 80021cc:	f645 4250 	movw	r2, #23632	; 0x5c50
 80021d0:	4003      	ands	r3, r0
 80021d2:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80021d6:	6013      	str	r3, [r2, #0]
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop

080021dc <SetEPType>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPType(uint8_t bEpNum, uint16_t wType)
{
  _SetEPType(bEpNum, wType);
 80021dc:	0080      	lsls	r0, r0, #2
 80021de:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 80021e2:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 80021e6:	6810      	ldr	r0, [r2, #0]
 80021e8:	f648 138f 	movw	r3, #35215	; 0x898f
 80021ec:	4003      	ands	r3, r0
 80021ee:	4319      	orrs	r1, r3
 80021f0:	6011      	str	r1, [r2, #0]
 80021f2:	4770      	bx	lr

080021f4 <SetEPTxStatus>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxStatus(uint8_t bEpNum, uint16_t wState)
{
  _SetEPTxStatus(bEpNum, wState);
 80021f4:	0080      	lsls	r0, r0, #2
 80021f6:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 80021fa:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
*                  wState: new state.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxStatus(uint8_t bEpNum, uint16_t wState)
{
 80021fe:	b410      	push	{r4}
  _SetEPTxStatus(bEpNum, wState);
 8002200:	f001 0010 	and.w	r0, r1, #16
 8002204:	6814      	ldr	r4, [r2, #0]
 8002206:	f648 73bf 	movw	r3, #36799	; 0x8fbf
 800220a:	b280      	uxth	r0, r0
 800220c:	4023      	ands	r3, r4
 800220e:	b968      	cbnz	r0, 800222c <SetEPTxStatus+0x38>
 8002210:	b29b      	uxth	r3, r3
 8002212:	f001 0120 	and.w	r1, r1, #32
 8002216:	b289      	uxth	r1, r1
 8002218:	b109      	cbz	r1, 800221e <SetEPTxStatus+0x2a>
 800221a:	f083 0320 	eor.w	r3, r3, #32
 800221e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002222:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002226:	6013      	str	r3, [r2, #0]
}
 8002228:	bc10      	pop	{r4}
 800222a:	4770      	bx	lr
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxStatus(uint8_t bEpNum, uint16_t wState)
{
  _SetEPTxStatus(bEpNum, wState);
 800222c:	f083 0310 	eor.w	r3, r3, #16
 8002230:	e7ef      	b.n	8002212 <SetEPTxStatus+0x1e>
 8002232:	bf00      	nop

08002234 <SetEPRxStatus>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxStatus(uint8_t bEpNum, uint16_t wState)
{
  _SetEPRxStatus(bEpNum, wState);
 8002234:	0080      	lsls	r0, r0, #2
 8002236:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 800223a:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
*                  wState: new state.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxStatus(uint8_t bEpNum, uint16_t wState)
{
 800223e:	b410      	push	{r4}
  _SetEPRxStatus(bEpNum, wState);
 8002240:	f401 5080 	and.w	r0, r1, #4096	; 0x1000
 8002244:	6814      	ldr	r4, [r2, #0]
 8002246:	f64b 738f 	movw	r3, #49039	; 0xbf8f
 800224a:	b280      	uxth	r0, r0
 800224c:	4023      	ands	r3, r4
 800224e:	b968      	cbnz	r0, 800226c <SetEPRxStatus+0x38>
 8002250:	b29b      	uxth	r3, r3
 8002252:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 8002256:	b289      	uxth	r1, r1
 8002258:	b109      	cbz	r1, 800225e <SetEPRxStatus+0x2a>
 800225a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800225e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002262:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002266:	6013      	str	r3, [r2, #0]
}
 8002268:	bc10      	pop	{r4}
 800226a:	4770      	bx	lr
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxStatus(uint8_t bEpNum, uint16_t wState)
{
  _SetEPRxStatus(bEpNum, wState);
 800226c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002270:	e7ef      	b.n	8002252 <SetEPRxStatus+0x1e>
 8002272:	bf00      	nop

08002274 <SetEPTxValid>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxValid(uint8_t bEpNum)
{
  _SetEPTxStatus(bEpNum, EP_TX_VALID);
 8002274:	0080      	lsls	r0, r0, #2
 8002276:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 800227a:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 800227e:	6811      	ldr	r1, [r2, #0]
 8002280:	f648 73bf 	movw	r3, #36799	; 0x8fbf
 8002284:	400b      	ands	r3, r1
 8002286:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 800228a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800228e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002292:	6013      	str	r3, [r2, #0]
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop

08002298 <SetEPRxValid>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxValid(uint8_t bEpNum)
{
  _SetEPRxStatus(bEpNum, EP_RX_VALID);
 8002298:	0080      	lsls	r0, r0, #2
 800229a:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 800229e:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 80022a2:	6811      	ldr	r1, [r2, #0]
 80022a4:	f64b 738f 	movw	r3, #49039	; 0xbf8f
 80022a8:	400b      	ands	r3, r1
 80022aa:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80022ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022b6:	6013      	str	r3, [r2, #0]
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop

080022bc <Clear_Status_Out>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Clear_Status_Out(uint8_t bEpNum)
{
  _ClearEP_KIND(bEpNum);
 80022bc:	0080      	lsls	r0, r0, #2
 80022be:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 80022c2:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 80022c6:	6811      	ldr	r1, [r2, #0]
 80022c8:	f640 630f 	movw	r3, #3599	; 0xe0f
 80022cc:	400b      	ands	r3, r1
 80022ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022d6:	6013      	str	r3, [r2, #0]
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop

080022dc <ClearDTOG_RX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_RX(uint8_t bEpNum)
{
  _ClearDTOG_RX(bEpNum);
 80022dc:	0080      	lsls	r0, r0, #2
 80022de:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 80022e2:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	0451      	lsls	r1, r2, #17
 80022ea:	d508      	bpl.n	80022fe <ClearDTOG_RX+0x22>
 80022ec:	6819      	ldr	r1, [r3, #0]
 80022ee:	f640 720f 	movw	r2, #3855	; 0xf0f
 80022f2:	400a      	ands	r2, r1
 80022f4:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80022f8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80022fc:	601a      	str	r2, [r3, #0]
 80022fe:	4770      	bx	lr

08002300 <ClearDTOG_TX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_TX(uint8_t bEpNum)
{
  _ClearDTOG_TX(bEpNum);
 8002300:	0080      	lsls	r0, r0, #2
 8002302:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 8002306:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	0650      	lsls	r0, r2, #25
 800230e:	d508      	bpl.n	8002322 <ClearDTOG_TX+0x22>
 8002310:	6819      	ldr	r1, [r3, #0]
 8002312:	f640 720f 	movw	r2, #3855	; 0xf0f
 8002316:	400a      	ands	r2, r1
 8002318:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800231c:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8002320:	601a      	str	r2, [r3, #0]
 8002322:	4770      	bx	lr

08002324 <SetEPTxAddr>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxAddr(uint8_t bEpNum, uint16_t wAddr)
{
  _SetEPTxAddr(bEpNum, wAddr);
 8002324:	f645 4350 	movw	r3, #23632	; 0x5c50
 8002328:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	f64f 73fe 	movw	r3, #65534	; 0xfffe
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 8002332:	b292      	uxth	r2, r2
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxAddr(uint8_t bEpNum, uint16_t wAddr)
{
  _SetEPTxAddr(bEpNum, wAddr);
 8002334:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8002338:	f100 5200 	add.w	r2, r0, #536870912	; 0x20000000
 800233c:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 8002340:	0052      	lsls	r2, r2, #1
 8002342:	400b      	ands	r3, r1
 8002344:	6013      	str	r3, [r2, #0]
 8002346:	4770      	bx	lr

08002348 <SetEPRxAddr>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxAddr(uint8_t bEpNum, uint16_t wAddr)
{
  _SetEPRxAddr(bEpNum, wAddr);
 8002348:	f645 4350 	movw	r3, #23632	; 0x5c50
 800234c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	f243 0304 	movw	r3, #12292	; 0x3004
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 8002356:	b292      	uxth	r2, r2
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxAddr(uint8_t bEpNum, uint16_t wAddr)
{
  _SetEPRxAddr(bEpNum, wAddr);
 8002358:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 800235c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002360:	18c3      	adds	r3, r0, r3
 8002362:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	400a      	ands	r2, r1
 800236a:	601a      	str	r2, [r3, #0]
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop

08002370 <GetEPTxAddr>:
* Output         : None.
* Return         : Rx buffer address. 
*******************************************************************************/
uint16_t GetEPTxAddr(uint8_t bEpNum)
{
  return(_GetEPTxAddr(bEpNum));
 8002370:	f645 4350 	movw	r3, #23632	; 0x5c50
 8002374:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002378:	681b      	ldr	r3, [r3, #0]
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 800237a:	b29b      	uxth	r3, r3
* Output         : None.
* Return         : Rx buffer address. 
*******************************************************************************/
uint16_t GetEPTxAddr(uint8_t bEpNum)
{
  return(_GetEPTxAddr(bEpNum));
 800237c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8002380:	f100 5300 	add.w	r3, r0, #536870912	; 0x20000000
 8002384:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8002388:	005b      	lsls	r3, r3, #1
}
 800238a:	8818      	ldrh	r0, [r3, #0]
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop

08002390 <GetEPRxAddr>:
* Output         : None.
* Return         : Rx buffer address.
*******************************************************************************/
uint16_t GetEPRxAddr(uint8_t bEpNum)
{
  return(_GetEPRxAddr(bEpNum));
 8002390:	f645 4350 	movw	r3, #23632	; 0x5c50
 8002394:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	f243 0304 	movw	r3, #12292	; 0x3004
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 800239e:	b292      	uxth	r2, r2
* Output         : None.
* Return         : Rx buffer address.
*******************************************************************************/
uint16_t GetEPRxAddr(uint8_t bEpNum)
{
  return(_GetEPRxAddr(bEpNum));
 80023a0:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 80023a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80023a8:	18c3      	adds	r3, r0, r3
 80023aa:	005b      	lsls	r3, r3, #1
}
 80023ac:	8818      	ldrh	r0, [r3, #0]
 80023ae:	4770      	bx	lr

080023b0 <SetEPTxCount>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPTxCount(bEpNum, wCount);
 80023b0:	f645 4350 	movw	r3, #23632	; 0x5c50
 80023b4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	f243 0302 	movw	r3, #12290	; 0x3002
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 80023be:	b292      	uxth	r2, r2
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPTxCount(bEpNum, wCount);
 80023c0:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 80023c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80023c8:	18c3      	adds	r3, r0, r3
 80023ca:	005b      	lsls	r3, r3, #1
 80023cc:	6019      	str	r1, [r3, #0]
 80023ce:	4770      	bx	lr

080023d0 <SetEPRxCount>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPRxCount(bEpNum, wCount);
 80023d0:	f645 4350 	movw	r3, #23632	; 0x5c50
 80023d4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	f243 0306 	movw	r3, #12294	; 0x3006
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 80023de:	b292      	uxth	r2, r2
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPRxCount(bEpNum, wCount);
 80023e0:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 80023e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80023e8:	18c3      	adds	r3, r0, r3
 80023ea:	005b      	lsls	r3, r3, #1
 80023ec:	293e      	cmp	r1, #62	; 0x3e
 80023ee:	d909      	bls.n	8002404 <SetEPRxCount+0x34>
 80023f0:	094a      	lsrs	r2, r1, #5
 80023f2:	06c9      	lsls	r1, r1, #27
 80023f4:	d101      	bne.n	80023fa <SetEPRxCount+0x2a>
 80023f6:	3a01      	subs	r2, #1
 80023f8:	b292      	uxth	r2, r2
 80023fa:	0292      	lsls	r2, r2, #10
 80023fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002400:	601a      	str	r2, [r3, #0]
 8002402:	4770      	bx	lr
 8002404:	084a      	lsrs	r2, r1, #1
 8002406:	07c8      	lsls	r0, r1, #31
 8002408:	bf48      	it	mi
 800240a:	3201      	addmi	r2, #1
 800240c:	0292      	lsls	r2, r2, #10
 800240e:	601a      	str	r2, [r3, #0]
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop

08002414 <GetEPRxCount>:
* Output         : None.
* Return         : Rx count value.
*******************************************************************************/
uint16_t GetEPRxCount(uint8_t bEpNum)
{
  return(_GetEPRxCount(bEpNum));
 8002414:	f645 4350 	movw	r3, #23632	; 0x5c50
 8002418:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	f243 0306 	movw	r3, #12294	; 0x3006
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 8002422:	b292      	uxth	r2, r2
* Output         : None.
* Return         : Rx count value.
*******************************************************************************/
uint16_t GetEPRxCount(uint8_t bEpNum)
{
  return(_GetEPRxCount(bEpNum));
 8002424:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8002428:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800242c:	18c3      	adds	r3, r0, r3
 800242e:	005b      	lsls	r3, r3, #1
 8002430:	6818      	ldr	r0, [r3, #0]
}
 8002432:	0580      	lsls	r0, r0, #22
 8002434:	0d80      	lsrs	r0, r0, #22
 8002436:	4770      	bx	lr

08002438 <ByteSwap>:
uint16_t ByteSwap(uint16_t wSwW)
{
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
 8002438:	b2c3      	uxtb	r3, r0
 800243a:	0a00      	lsrs	r0, r0, #8
  return(wRet);
}
 800243c:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop

08002444 <USB_SIL_Init>:
* Input          : None.
* Output         : None.
* Return         : Status.
*******************************************************************************/
uint32_t USB_SIL_Init(void)
{
 8002444:	b410      	push	{r4}
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
  wInterrupt_Mask = IMR_MSK;
 8002446:	f241 3358 	movw	r3, #4952	; 0x1358
*******************************************************************************/
uint32_t USB_SIL_Init(void)
{
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
 800244a:	f645 4444 	movw	r4, #23620	; 0x5c44
  wInterrupt_Mask = IMR_MSK;
  /* set interrupts mask */
  _SetCNTR(wInterrupt_Mask);
 800244e:	f645 4240 	movw	r2, #23616	; 0x5c40
uint32_t USB_SIL_Init(void)
{
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
  wInterrupt_Mask = IMR_MSK;
 8002452:	f44f 413f 	mov.w	r1, #48896	; 0xbf00
*******************************************************************************/
uint32_t USB_SIL_Init(void)
{
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
 8002456:	2000      	movs	r0, #0
 8002458:	f2c4 0400 	movt	r4, #16384	; 0x4000
  wInterrupt_Mask = IMR_MSK;
 800245c:	f2c2 0300 	movt	r3, #8192	; 0x2000
  /* set interrupts mask */
  _SetCNTR(wInterrupt_Mask);
 8002460:	f2c4 0200 	movt	r2, #16384	; 0x4000
*******************************************************************************/
uint32_t USB_SIL_Init(void)
{
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
 8002464:	6020      	str	r0, [r4, #0]
  wInterrupt_Mask = IMR_MSK;
 8002466:	8019      	strh	r1, [r3, #0]
  /* set interrupts mask */
  _SetCNTR(wInterrupt_Mask);
 8002468:	6011      	str	r1, [r2, #0]
  return 0;
}
 800246a:	bc10      	pop	{r4}
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop

08002470 <USB_SIL_Read>:
*                     received data buffer.
* Output         : None.
* Return         : Number of received data (in Bytes).
*******************************************************************************/
uint32_t USB_SIL_Read(uint8_t bEpAddr, uint8_t* pBufferPointer)
{
 8002470:	b570      	push	{r4, r5, r6, lr}
  uint32_t DataLength = 0;

  /* Get the number of received data on the selected Endpoint */
  DataLength = GetEPRxCount(bEpAddr & 0x7F);
 8002472:	f242 4315 	movw	r3, #9237	; 0x2415
 8002476:	f000 057f 	and.w	r5, r0, #127	; 0x7f
 800247a:	4628      	mov	r0, r5
 800247c:	f6c0 0300 	movt	r3, #2048	; 0x800
*                     received data buffer.
* Output         : None.
* Return         : Number of received data (in Bytes).
*******************************************************************************/
uint32_t USB_SIL_Read(uint8_t bEpAddr, uint8_t* pBufferPointer)
{
 8002480:	460e      	mov	r6, r1
  uint32_t DataLength = 0;

  /* Get the number of received data on the selected Endpoint */
  DataLength = GetEPRxCount(bEpAddr & 0x7F);
 8002482:	4798      	blx	r3
  
  /* Use the memory interface function to write to the selected endpoint */
  PMAToUserBufferCopy(pBufferPointer, GetEPRxAddr(bEpAddr & 0x7F), DataLength);
 8002484:	f242 3391 	movw	r3, #9105	; 0x2391
uint32_t USB_SIL_Read(uint8_t bEpAddr, uint8_t* pBufferPointer)
{
  uint32_t DataLength = 0;

  /* Get the number of received data on the selected Endpoint */
  DataLength = GetEPRxCount(bEpAddr & 0x7F);
 8002488:	4604      	mov	r4, r0
  
  /* Use the memory interface function to write to the selected endpoint */
  PMAToUserBufferCopy(pBufferPointer, GetEPRxAddr(bEpAddr & 0x7F), DataLength);
 800248a:	f6c0 0300 	movt	r3, #2048	; 0x800
 800248e:	4628      	mov	r0, r5
 8002490:	4798      	blx	r3
 8002492:	f242 13a5 	movw	r3, #8613	; 0x21a5
 8002496:	4601      	mov	r1, r0
 8002498:	4622      	mov	r2, r4
 800249a:	4630      	mov	r0, r6
 800249c:	f6c0 0300 	movt	r3, #2048	; 0x800
 80024a0:	4798      	blx	r3

  /* Return the number of received data */
  return DataLength;
}
 80024a2:	4620      	mov	r0, r4
 80024a4:	bd70      	pop	{r4, r5, r6, pc}
 80024a6:	bf00      	nop

080024a8 <CTR_LP>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void CTR_LP(void)
{
 80024a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024ac:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 800265c <CTR_LP+0x1b4>
 80024b0:	b083      	sub	sp, #12
  __IO uint16_t wEPVal = 0;
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 80024b2:	f645 4b44 	movw	fp, #23620	; 0x5c44
* Output         : None.
* Return         : None.
*******************************************************************************/
void CTR_LP(void)
{
  __IO uint16_t wEPVal = 0;
 80024b6:	2300      	movs	r3, #0
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 80024b8:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 8002660 <CTR_LP+0x1b8>
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 80024bc:	4d62      	ldr	r5, [pc, #392]	; (8002648 <CTR_LP+0x1a0>)
* Output         : None.
* Return         : None.
*******************************************************************************/
void CTR_LP(void)
{
  __IO uint16_t wEPVal = 0;
 80024be:	f8ad 3006 	strh.w	r3, [sp, #6]
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 80024c2:	f2c4 0b00 	movt	fp, #16384	; 0x4000
 80024c6:	46d0      	mov	r8, sl
 80024c8:	f8db 3000 	ldr.w	r3, [fp]
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 80024cc:	f44f 44b8 	mov.w	r4, #23552	; 0x5c00
*******************************************************************************/
void CTR_LP(void)
{
  __IO uint16_t wEPVal = 0;
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 80024d0:	b29a      	uxth	r2, r3
 80024d2:	041b      	lsls	r3, r3, #16
 80024d4:	f8aa 2000 	strh.w	r2, [sl]
 80024d8:	f140 80ab 	bpl.w	8002632 <CTR_LP+0x18a>
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 80024dc:	f8b8 2000 	ldrh.w	r2, [r8]
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 80024e0:	f2c4 0400 	movt	r4, #16384	; 0x4000
  __IO uint16_t wEPVal = 0;
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 80024e4:	f002 020f 	and.w	r2, r2, #15
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
 80024e8:	0090      	lsls	r0, r2, #2
 80024ea:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
	    SaveTState = SaveRState & EPTX_STAT;
 80024ee:	4e57      	ldr	r6, [pc, #348]	; (800264c <CTR_LP+0x1a4>)
	    SaveRState &=  EPRX_STAT;	

	    _SetEPRxTxStatus(ENDP0,EP_RX_NAK,EP_TX_NAK);
 80024f0:	f64b 71bf 	movw	r1, #49087	; 0xbfbf
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 80024f4:	4f54      	ldr	r7, [pc, #336]	; (8002648 <CTR_LP+0x1a0>)
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
    if (EPindex == 0)
 80024f6:	4613      	mov	r3, r2
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
 80024f8:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
  __IO uint16_t wEPVal = 0;
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 80024fc:	f889 2000 	strb.w	r2, [r9]
    if (EPindex == 0)
 8002500:	2a00      	cmp	r2, #0
 8002502:	d133      	bne.n	800256c <CTR_LP+0xc4>
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 8002504:	6823      	ldr	r3, [r4, #0]
 8002506:	b29b      	uxth	r3, r3
 8002508:	802b      	strh	r3, [r5, #0]
	    SaveTState = SaveRState & EPTX_STAT;
 800250a:	882b      	ldrh	r3, [r5, #0]
 800250c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002510:	8033      	strh	r3, [r6, #0]
	    SaveRState &=  EPRX_STAT;	
 8002512:	882b      	ldrh	r3, [r5, #0]
 8002514:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002518:	802b      	strh	r3, [r5, #0]

	    _SetEPRxTxStatus(ENDP0,EP_RX_NAK,EP_TX_NAK);
 800251a:	6823      	ldr	r3, [r4, #0]
 800251c:	4019      	ands	r1, r3
 800251e:	f481 5100 	eor.w	r1, r1, #8192	; 0x2000
 8002522:	f081 0120 	eor.w	r1, r1, #32
 8002526:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800252a:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800252e:	6021      	str	r1, [r4, #0]

      /* DIR bit = origin of the interrupt */

      if ((wIstr & ISTR_DIR) == 0)
 8002530:	f8b8 3000 	ldrh.w	r3, [r8]
 8002534:	f003 0310 	and.w	r3, r3, #16
 8002538:	b29b      	uxth	r3, r3
 800253a:	2b00      	cmp	r3, #0
 800253c:	d049      	beq.n	80025d2 <CTR_LP+0x12a>
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */

        wEPVal = _GetENDPOINT(ENDP0);
 800253e:	6823      	ldr	r3, [r4, #0]
 8002540:	b29b      	uxth	r3, r3
 8002542:	f8ad 3006 	strh.w	r3, [sp, #6]
        
        if ((wEPVal &EP_SETUP) != 0)
 8002546:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800254a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800254e:	b29b      	uxth	r3, r3
 8002550:	2b00      	cmp	r3, #0
 8002552:	d171      	bne.n	8002638 <CTR_LP+0x190>

		      _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
          return;
        }

        else if ((wEPVal & EP_CTR_RX) != 0)
 8002554:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8002558:	b21b      	sxth	r3, r3
 800255a:	2b00      	cmp	r3, #0
 800255c:	dab4      	bge.n	80024c8 <CTR_LP+0x20>
        {
          _ClearEP_CTR_RX(ENDP0);
 800255e:	6822      	ldr	r2, [r4, #0]
 8002560:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002564:	4013      	ands	r3, r2
 8002566:	6023      	str	r3, [r4, #0]
          Out0_Process();
 8002568:	4b39      	ldr	r3, [pc, #228]	; (8002650 <CTR_LP+0x1a8>)
 800256a:	e038      	b.n	80025de <CTR_LP+0x136>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
 800256c:	6802      	ldr	r2, [r0, #0]
 800256e:	b292      	uxth	r2, r2
 8002570:	f8ad 2006 	strh.w	r2, [sp, #6]
      if ((wEPVal & EP_CTR_RX) != 0)
 8002574:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8002578:	b212      	sxth	r2, r2
 800257a:	2a00      	cmp	r2, #0
 800257c:	db1b      	blt.n	80025b6 <CTR_LP+0x10e>
        /* call OUT service function */
        (*pEpInt_OUT[EPindex-1])();

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & EP_CTR_TX) != 0)
 800257e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8002582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002586:	b29b      	uxth	r3, r3
 8002588:	2b00      	cmp	r3, #0
 800258a:	d09d      	beq.n	80024c8 <CTR_LP+0x20>
      {
        /* clear int flag */
        _ClearEP_CTR_TX(EPindex);
 800258c:	f899 1000 	ldrb.w	r1, [r9]
 8002590:	f648 730f 	movw	r3, #36623	; 0x8f0f
 8002594:	008a      	lsls	r2, r1, #2
 8002596:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800259a:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 800259e:	6810      	ldr	r0, [r2, #0]

        /* call IN service function */
        (*pEpInt_IN[EPindex-1])();
 80025a0:	3901      	subs	r1, #1
      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & EP_CTR_TX) != 0)
      {
        /* clear int flag */
        _ClearEP_CTR_TX(EPindex);
 80025a2:	4003      	ands	r3, r0
 80025a4:	6013      	str	r3, [r2, #0]

        /* call IN service function */
        (*pEpInt_IN[EPindex-1])();
 80025a6:	f240 021c 	movw	r2, #28
 80025aa:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80025ae:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80025b2:	4798      	blx	r3
 80025b4:	e788      	b.n	80024c8 <CTR_LP+0x20>
      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
      if ((wEPVal & EP_CTR_RX) != 0)
      {
        /* clear int flag */
        _ClearEP_CTR_RX(EPindex);
 80025b6:	6801      	ldr	r1, [r0, #0]
 80025b8:	f640 728f 	movw	r2, #3983	; 0xf8f
 80025bc:	400a      	ands	r2, r1
 80025be:	6002      	str	r2, [r0, #0]

        /* call OUT service function */
        (*pEpInt_OUT[EPindex-1])();
 80025c0:	f240 0238 	movw	r2, #56	; 0x38
 80025c4:	3b01      	subs	r3, #1
 80025c6:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80025ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ce:	4798      	blx	r3
 80025d0:	e7d5      	b.n	800257e <CTR_LP+0xd6>
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */

        _ClearEP_CTR_TX(ENDP0);
 80025d2:	6822      	ldr	r2, [r4, #0]
 80025d4:	f648 730f 	movw	r3, #36623	; 0x8f0f
 80025d8:	4013      	ands	r3, r2
 80025da:	6023      	str	r3, [r4, #0]
        In0_Process();
 80025dc:	4b1d      	ldr	r3, [pc, #116]	; (8002654 <CTR_LP+0x1ac>)
        }

        else if ((wEPVal & EP_CTR_RX) != 0)
        {
          _ClearEP_CTR_RX(ENDP0);
          Out0_Process();
 80025de:	4798      	blx	r3
          /* before terminate set Tx & Rx status */
     
		     _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
 80025e0:	6821      	ldr	r1, [r4, #0]
 80025e2:	883a      	ldrh	r2, [r7, #0]
 80025e4:	f64b 73bf 	movw	r3, #49087	; 0xbfbf
 80025e8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80025ec:	b292      	uxth	r2, r2
 80025ee:	400b      	ands	r3, r1
 80025f0:	b10a      	cbz	r2, 80025f6 <CTR_LP+0x14e>
 80025f2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80025f6:	883a      	ldrh	r2, [r7, #0]
 80025f8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80025fc:	b292      	uxth	r2, r2
 80025fe:	b10a      	cbz	r2, 8002604 <CTR_LP+0x15c>
 8002600:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002604:	8832      	ldrh	r2, [r6, #0]
 8002606:	f002 0210 	and.w	r2, r2, #16
 800260a:	b292      	uxth	r2, r2
 800260c:	b10a      	cbz	r2, 8002612 <CTR_LP+0x16a>
 800260e:	f083 0310 	eor.w	r3, r3, #16
 8002612:	8832      	ldrh	r2, [r6, #0]
 8002614:	f002 0220 	and.w	r2, r2, #32
 8002618:	b292      	uxth	r2, r2
 800261a:	b10a      	cbz	r2, 8002620 <CTR_LP+0x178>
 800261c:	f083 0320 	eor.w	r3, r3, #32
 8002620:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002624:	f44f 42b8 	mov.w	r2, #23552	; 0x5c00
 8002628:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800262c:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8002630:	6013      	str	r3, [r2, #0]
      } /* if((wEPVal & EP_CTR_TX) != 0) */

    }/* if(EPindex == 0) else */

  }/* while(...) */
}
 8002632:	b003      	add	sp, #12
 8002634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

        wEPVal = _GetENDPOINT(ENDP0);
        
        if ((wEPVal &EP_SETUP) != 0)
        {
          _ClearEP_CTR_RX(ENDP0); /* SETUP bit kept frozen while CTR_RX = 1 */
 8002638:	6822      	ldr	r2, [r4, #0]
 800263a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800263e:	4013      	ands	r3, r2
 8002640:	6023      	str	r3, [r4, #0]
          Setup0_Process();
 8002642:	4b05      	ldr	r3, [pc, #20]	; (8002658 <CTR_LP+0x1b0>)
 8002644:	e7cb      	b.n	80025de <CTR_LP+0x136>
 8002646:	bf00      	nop
 8002648:	2000135a 	.word	0x2000135a
 800264c:	2000135c 	.word	0x2000135c
 8002650:	08001be9 	.word	0x08001be9
 8002654:	080020bd 	.word	0x080020bd
 8002658:	08001ce5 	.word	0x08001ce5
 800265c:	20000afc 	.word	0x20000afc
 8002660:	20001330 	.word	0x20001330

08002664 <FLASH_Unlock>:
* Return         : None
*******************************************************************************/
void FLASH_Unlock(void)
{
  /* Authorize the FPEC Access */
  FLASH->KEYR = FLASH_KEY1;
 8002664:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002668:	f240 1123 	movw	r1, #291	; 0x123
  FLASH->KEYR = FLASH_KEY2;
 800266c:	f648 12ab 	movw	r2, #35243	; 0x89ab
* Return         : None
*******************************************************************************/
void FLASH_Unlock(void)
{
  /* Authorize the FPEC Access */
  FLASH->KEYR = FLASH_KEY1;
 8002670:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002674:	f2c4 5167 	movt	r1, #17767	; 0x4567
  FLASH->KEYR = FLASH_KEY2;
 8002678:	f6cc 52ef 	movt	r2, #52719	; 0xcdef
* Return         : None
*******************************************************************************/
void FLASH_Unlock(void)
{
  /* Authorize the FPEC Access */
  FLASH->KEYR = FLASH_KEY1;
 800267c:	6059      	str	r1, [r3, #4]
  FLASH->KEYR = FLASH_KEY2;
 800267e:	605a      	str	r2, [r3, #4]
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop

08002684 <FLASH_Lock>:
* Return         : None
*******************************************************************************/
void FLASH_Lock(void)
{
  /* Set the Lock Bit to lock the FPEC and the FCR */
  FLASH->CR |= CR_LOCK_Set;
 8002684:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002688:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800268c:	691a      	ldr	r2, [r3, #16]
 800268e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002692:	611a      	str	r2, [r3, #16]
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop

08002698 <FLASH_ClearFlag>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG)) ;
  
  /* Clear the flags */
  FLASH->SR = FLASH_FLAG;
 8002698:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800269c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80026a0:	60d8      	str	r0, [r3, #12]
 80026a2:	4770      	bx	lr

080026a4 <FLASH_GetStatus>:
*******************************************************************************/
FLASH_Status FLASH_GetStatus(void)
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 80026a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026a8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80026ac:	68da      	ldr	r2, [r3, #12]
 80026ae:	07d1      	lsls	r1, r2, #31
 80026b0:	d40b      	bmi.n	80026ca <FLASH_GetStatus+0x26>
  {
    flashstatus = FLASH_BUSY;
  }
  else 
  {  
    if(FLASH->SR & FLASH_FLAG_PGERR)
 80026b2:	68da      	ldr	r2, [r3, #12]
 80026b4:	0752      	lsls	r2, r2, #29
 80026b6:	d501      	bpl.n	80026bc <FLASH_GetStatus+0x18>
    { 
      flashstatus = FLASH_ERROR_PG;
 80026b8:	2002      	movs	r0, #2
      }
    }
  }
  /* Return the Flash Status */
  return flashstatus;
}
 80026ba:	4770      	bx	lr
    { 
      flashstatus = FLASH_ERROR_PG;
    }
    else 
    {
      if(FLASH->SR & FLASH_FLAG_WRPRTERR)
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	f013 0f10 	tst.w	r3, #16
      {
        flashstatus = FLASH_ERROR_WRP;
 80026c2:	bf0c      	ite	eq
 80026c4:	2004      	moveq	r0, #4
 80026c6:	2003      	movne	r0, #3
 80026c8:	4770      	bx	lr
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
  {
    flashstatus = FLASH_BUSY;
 80026ca:	2001      	movs	r0, #1
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop

080026d0 <FLASH_WaitForLastOperation>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_WaitForLastOperation(u32 Timeout)
{ 
 80026d0:	b5f0      	push	{r4, r5, r6, r7, lr}
  FLASH_Status status = FLASH_COMPLETE;
   
  /* Check for the Flash Status */
  status = FLASH_GetStatus();
 80026d2:	4d15      	ldr	r5, [pc, #84]	; (8002728 <FLASH_WaitForLastOperation+0x58>)
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_WaitForLastOperation(u32 Timeout)
{ 
 80026d4:	b083      	sub	sp, #12
 80026d6:	4604      	mov	r4, r0
  FLASH_Status status = FLASH_COMPLETE;
   
  /* Check for the Flash Status */
  status = FLASH_GetStatus();
 80026d8:	47a8      	blx	r5

  /* Wait for a Flash operation to complete or a TIMEOUT to occur */
  while((status == FLASH_BUSY) && (Timeout != 0x00))
 80026da:	f1b0 0e01 	subs.w	lr, r0, #1
 80026de:	f1de 0300 	rsbs	r3, lr, #0
 80026e2:	eb53 030e 	adcs.w	r3, r3, lr
 80026e6:	2c00      	cmp	r4, #0
 80026e8:	bf08      	it	eq
 80026ea:	2300      	moveq	r3, #0
 80026ec:	b1bb      	cbz	r3, 800271e <FLASH_WaitForLastOperation+0x4e>
* Output         : None
* Return         : None
*******************************************************************************/
static void delay(void)
{
  vu32 i = 0;
 80026ee:	2700      	movs	r7, #0

  for(i = 0xFF; i != 0; i--)
 80026f0:	26ff      	movs	r6, #255	; 0xff
* Output         : None
* Return         : None
*******************************************************************************/
static void delay(void)
{
  vu32 i = 0;
 80026f2:	9701      	str	r7, [sp, #4]

  for(i = 0xFF; i != 0; i--)
 80026f4:	9601      	str	r6, [sp, #4]
 80026f6:	9b01      	ldr	r3, [sp, #4]
 80026f8:	b12b      	cbz	r3, 8002706 <FLASH_WaitForLastOperation+0x36>
 80026fa:	9b01      	ldr	r3, [sp, #4]
 80026fc:	3b01      	subs	r3, #1
 80026fe:	9301      	str	r3, [sp, #4]
 8002700:	9b01      	ldr	r3, [sp, #4]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d1f9      	bne.n	80026fa <FLASH_WaitForLastOperation+0x2a>

  /* Wait for a Flash operation to complete or a TIMEOUT to occur */
  while((status == FLASH_BUSY) && (Timeout != 0x00))
  {
    delay();
    status = FLASH_GetStatus();
 8002706:	47a8      	blx	r5
   
  /* Check for the Flash Status */
  status = FLASH_GetStatus();

  /* Wait for a Flash operation to complete or a TIMEOUT to occur */
  while((status == FLASH_BUSY) && (Timeout != 0x00))
 8002708:	3c01      	subs	r4, #1
 800270a:	bf0c      	ite	eq
 800270c:	2300      	moveq	r3, #0
 800270e:	2301      	movne	r3, #1
 8002710:	2801      	cmp	r0, #1
 8002712:	bf14      	ite	ne
 8002714:	2300      	movne	r3, #0
 8002716:	f003 0301 	andeq.w	r3, r3, #1
 800271a:	2b00      	cmp	r3, #0
 800271c:	d1e9      	bne.n	80026f2 <FLASH_WaitForLastOperation+0x22>
    status = FLASH_TIMEOUT;
  }

  /* Return the operation status */
  return status;
}
 800271e:	2c00      	cmp	r4, #0
 8002720:	bf08      	it	eq
 8002722:	2005      	moveq	r0, #5
 8002724:	b003      	add	sp, #12
 8002726:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002728:	080026a5 	.word	0x080026a5

0800272c <FLASH_ProgramWord>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT. 
*******************************************************************************/
FLASH_Status FLASH_ProgramWord(u32 Address, u32 Data)
{
 800272c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800272e:	4605      	mov	r5, r0

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8002730:	4c11      	ldr	r4, [pc, #68]	; (8002778 <FLASH_ProgramWord+0x4c>)
 8002732:	200f      	movs	r0, #15
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT. 
*******************************************************************************/
FLASH_Status FLASH_ProgramWord(u32 Address, u32 Data)
{
 8002734:	460e      	mov	r6, r1

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8002736:	47a0      	blx	r4
  
  if(status == FLASH_COMPLETE)
 8002738:	2804      	cmp	r0, #4
 800273a:	d000      	beq.n	800273e <FLASH_ProgramWord+0x12>
      }
     }
  }
  /* Return the Program Status */
  return status;
}
 800273c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  
  if(status == FLASH_COMPLETE)
  {
    /* if the previous operation is completed, proceed to program the new first 
    half word */
    FLASH->CR |= CR_PG_Set;
 800273e:	f44f 5700 	mov.w	r7, #8192	; 0x2000
 8002742:	f2c4 0702 	movt	r7, #16386	; 0x4002
 8002746:	693a      	ldr	r2, [r7, #16]
  
    *(vu16*)Address = (u16)Data;
 8002748:	b2b3      	uxth	r3, r6
  
  if(status == FLASH_COMPLETE)
  {
    /* if the previous operation is completed, proceed to program the new first 
    half word */
    FLASH->CR |= CR_PG_Set;
 800274a:	f042 0201 	orr.w	r2, r2, #1
 800274e:	613a      	str	r2, [r7, #16]
  
    *(vu16*)Address = (u16)Data;

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 8002750:	200f      	movs	r0, #15
  {
    /* if the previous operation is completed, proceed to program the new first 
    half word */
    FLASH->CR |= CR_PG_Set;
  
    *(vu16*)Address = (u16)Data;
 8002752:	802b      	strh	r3, [r5, #0]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 8002754:	47a0      	blx	r4
 
    if(status == FLASH_COMPLETE)
 8002756:	2804      	cmp	r0, #4
 8002758:	d009      	beq.n	800276e <FLASH_ProgramWord+0x42>
      *(vu16*)(Address + 2) = Data >> 16;
    
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
        
      if(status != FLASH_BUSY)
 800275a:	2801      	cmp	r0, #1
 800275c:	d005      	beq.n	800276a <FLASH_ProgramWord+0x3e>
    else
    {
      if (status != FLASH_BUSY)
      {
        /* Disable the PG Bit */
        FLASH->CR &= CR_PG_Reset;
 800275e:	693a      	ldr	r2, [r7, #16]
 8002760:	f641 73fe 	movw	r3, #8190	; 0x1ffe
 8002764:	4013      	ands	r3, r2
 8002766:	613b      	str	r3, [r7, #16]
      }
     }
  }
  /* Return the Program Status */
  return status;
}
 8002768:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT. 
*******************************************************************************/
FLASH_Status FLASH_ProgramWord(u32 Address, u32 Data)
{
 800276a:	2001      	movs	r0, #1
 800276c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 
    if(status == FLASH_COMPLETE)
    {
      /* if the previous operation is completed, proceed to program the new second 
      half word */
      *(vu16*)(Address + 2) = Data >> 16;
 800276e:	0c36      	lsrs	r6, r6, #16
 8002770:	806e      	strh	r6, [r5, #2]
    
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8002772:	200f      	movs	r0, #15
 8002774:	47a0      	blx	r4
 8002776:	e7f0      	b.n	800275a <FLASH_ProgramWord+0x2e>
 8002778:	080026d1 	.word	0x080026d1

0800277c <FLASH_ErasePage>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_ErasePage(u32 Page_Address)
{
 800277c:	b570      	push	{r4, r5, r6, lr}
 800277e:	4606      	mov	r6, r0

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Page_Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(EraseTimeout);
 8002780:	4c0f      	ldr	r4, [pc, #60]	; (80027c0 <FLASH_ErasePage+0x44>)
 8002782:	f640 70ff 	movw	r0, #4095	; 0xfff
 8002786:	47a0      	blx	r4
  
  if(status == FLASH_COMPLETE)
 8002788:	2804      	cmp	r0, #4
 800278a:	d000      	beq.n	800278e <FLASH_ErasePage+0x12>
      FLASH->CR &= CR_PER_Reset;
    }
  }
  /* Return the Erase Status */
  return status;
}
 800278c:	bd70      	pop	{r4, r5, r6, pc}
  status = FLASH_WaitForLastOperation(EraseTimeout);
  
  if(status == FLASH_COMPLETE)
  { 
    /* if the previous operation is completed, proceed to erase the page */
    FLASH->CR|= CR_PER_Set;
 800278e:	f44f 5500 	mov.w	r5, #8192	; 0x2000
 8002792:	f2c4 0502 	movt	r5, #16386	; 0x4002
 8002796:	692b      	ldr	r3, [r5, #16]
    FLASH->AR = Page_Address; 
    FLASH->CR|= CR_STRT_Set;
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 8002798:	f640 70ff 	movw	r0, #4095	; 0xfff
  status = FLASH_WaitForLastOperation(EraseTimeout);
  
  if(status == FLASH_COMPLETE)
  { 
    /* if the previous operation is completed, proceed to erase the page */
    FLASH->CR|= CR_PER_Set;
 800279c:	f043 0302 	orr.w	r3, r3, #2
 80027a0:	612b      	str	r3, [r5, #16]
    FLASH->AR = Page_Address; 
 80027a2:	616e      	str	r6, [r5, #20]
    FLASH->CR|= CR_STRT_Set;
 80027a4:	692b      	ldr	r3, [r5, #16]
 80027a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027aa:	612b      	str	r3, [r5, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 80027ac:	47a0      	blx	r4

    if(status != FLASH_BUSY)
 80027ae:	2801      	cmp	r0, #1
    {
      /* if the erase operation is completed, disable the PER Bit */
      FLASH->CR &= CR_PER_Reset;
 80027b0:	bf1f      	itttt	ne
 80027b2:	692a      	ldrne	r2, [r5, #16]
 80027b4:	f641 73fd 	movwne	r3, #8189	; 0x1ffd
 80027b8:	4013      	andne	r3, r2
 80027ba:	612b      	strne	r3, [r5, #16]
    }
  }
  /* Return the Erase Status */
  return status;
}
 80027bc:	bd70      	pop	{r4, r5, r6, pc}
 80027be:	bf00      	nop
 80027c0:	080026d1 	.word	0x080026d1

080027c4 <Virtual_Com_Port_StringVendor>:
 80027c4:	00530326 004d0054 00630069 006f0072     &.S.T.M.i.c.r.o.
 80027d4:	006c0065 00630065 00720074 006e006f     e.l.e.c.t.r.o.n.
 80027e4:	00630069 00000073                       i.c.s...

080027ec <Virtual_Com_Port_DeviceDescriptor>:
 80027ec:	02000112 40000002 57400483 02010200     .......@..@W....
 80027fc:	00000103                                ....

08002800 <Virtual_Com_Port_StringLangID>:
 8002800:	04090304                                ....

08002804 <Virtual_Com_Port_StringProduct>:
 8002804:	00530332 004d0054 00320033 00560020     2.S.T.M.3.2. .V.
 8002814:	00720069 00750074 006c0061 00430020     i.r.t.u.a.l. .C.
 8002824:	004d004f 00500020 0072006f 00200074     O.M. .P.o.r.t. .
 8002834:	00000020                                 ...

08002838 <Virtual_Com_Port_ConfigDescriptor>:
 8002838:	00430209 c0000102 00040932 02020100     ..C.....2.......
 8002848:	24050001 05011000 01000124 02022404     ...$....$....$..
 8002858:	00062405 82050701 ff000803 00010409     .$..............
 8002868:	00000a02 03050700 00004002 02810507     .........@......
 8002878:	00000040                                @...
