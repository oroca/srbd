
main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004b98  08000000  08000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000e4  20000000  08004b98  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000e44  20000200  08004d98  000100e4  2**9
                  ALLOC
  3 ._usrstack    00000100  20001044  20001044  000100e4  2**0
                  CONTENTS
  4 .debug_abbrev 00002467  00000000  00000000  000101e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000714b  00000000  00000000  0001264b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000031d8  00000000  00000000  00019796  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_loc    0000657f  00000000  00000000  0001c96e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000019ff  00000000  00000000  00022eed  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubtypes 00000a0a  00000000  00000000  000248ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000a58  00000000  00000000  000252f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000013a8  00000000  00000000  00025d4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000022c3  00000000  00000000  000270f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .comment      0000002a  00000000  00000000  000293b9  2**0
                  CONTENTS, READONLY
 14 .ARM.attributes 00000031  00000000  00000000  000293e3  2**0
                  CONTENTS, READONLY
 15 .debug_frame  000021b4  00000000  00000000  00029414  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000000 <g_pfnVectors>:
 8000000:	00 50 00 20 95 15 00 08                             .P. ....

08000008 <LED_Tick>:
static void Main_Init( void );



void LED_Tick( void )
{
 8000008:	b508      	push	{r3, lr}
	Hw_Led_Toggle(0);
 800000a:	2000      	movs	r0, #0
 800000c:	4b01      	ldr	r3, [pc, #4]	; (8000014 <LED_Tick+0xc>)
 800000e:	4798      	blx	r3
}
 8000010:	bd08      	pop	{r3, pc}
 8000012:	bf00      	nop
 8000014:	08001905 	.word	0x08001905

08000018 <main>:
     ARG     : 	void
     RET     : 	
     			int
---------------------------------------------------------------------------*/
int main(void)
{
 8000018:	b530      	push	{r4, r5, lr}
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Main_Init( void )
{
	Hw_Init();
 800001a:	4b0b      	ldr	r3, [pc, #44]	; (8000048 <main+0x30>)
     ARG     : 	void
     RET     : 	
     			int
---------------------------------------------------------------------------*/
int main(void)
{
 800001c:	b083      	sub	sp, #12
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Main_Init( void )
{
	Hw_Init();
 800001e:	4798      	blx	r3
	Ap_Init();
	
	Hw_Timer_Set  ( HW_TIMER_CH_LED, 1000, LOOP_TIME, LED_Tick, NULL );
 8000020:	2400      	movs	r4, #0
     RET     : void
---------------------------------------------------------------------------*/
void Main_Init( void )
{
	Hw_Init();
	Ap_Init();
 8000022:	480a      	ldr	r0, [pc, #40]	; (800004c <main+0x34>)
 8000024:	4780      	blx	r0
	
	Hw_Timer_Set  ( HW_TIMER_CH_LED, 1000, LOOP_TIME, LED_Tick, NULL );
 8000026:	4d0a      	ldr	r5, [pc, #40]	; (8000050 <main+0x38>)
 8000028:	4b0a      	ldr	r3, [pc, #40]	; (8000054 <main+0x3c>)
 800002a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800002e:	2202      	movs	r2, #2
 8000030:	4620      	mov	r0, r4
 8000032:	9400      	str	r4, [sp, #0]
 8000034:	47a8      	blx	r5
	Hw_Timer_Start( HW_TIMER_CH_LED );	
 8000036:	4620      	mov	r0, r4
 8000038:	4a07      	ldr	r2, [pc, #28]	; (8000058 <main+0x40>)
 800003a:	4790      	blx	r2
	u32 TimeEnd;
	
	Main_Init();
	

    printf("Radio V0.2\n");
 800003c:	4807      	ldr	r0, [pc, #28]	; (800005c <main+0x44>)
 800003e:	4908      	ldr	r1, [pc, #32]	; (8000060 <main+0x48>)
 8000040:	4788      	blx	r1


	//-- 명령어 처리
	//
	Ap_RadioMenu_ExeCmd();    
 8000042:	4b08      	ldr	r3, [pc, #32]	; (8000064 <main+0x4c>)
 8000044:	4798      	blx	r3
 8000046:	e7fe      	b.n	8000046 <main+0x2e>
 8000048:	0800166d 	.word	0x0800166d
 800004c:	08000069 	.word	0x08000069
 8000050:	08001d35 	.word	0x08001d35
 8000054:	08000009 	.word	0x08000009
 8000058:	08001d51 	.word	0x08001d51
 800005c:	0800465c 	.word	0x0800465c
 8000060:	08000a6d 	.word	0x08000a6d
 8000064:	080001b5 	.word	0x080001b5

08000068 <Ap_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Ap_Init( void )
{
 8000068:	b508      	push	{r3, lr}
	if( Ap_Radio_Init() == ERR_NONE )
 800006a:	4b05      	ldr	r3, [pc, #20]	; (8000080 <Ap_Init+0x18>)
 800006c:	4798      	blx	r3
 800006e:	b118      	cbz	r0, 8000078 <Ap_Init+0x10>
	{
		printf("Radio Init OK : FM Mode\n");
	}
	else
	{
		printf("Radio Init Fail\n");
 8000070:	4804      	ldr	r0, [pc, #16]	; (8000084 <Ap_Init+0x1c>)
 8000072:	4a05      	ldr	r2, [pc, #20]	; (8000088 <Ap_Init+0x20>)
 8000074:	4790      	blx	r2
 8000076:	bd08      	pop	{r3, pc}
---------------------------------------------------------------------------*/
void Ap_Init( void )
{
	if( Ap_Radio_Init() == ERR_NONE )
	{
		printf("Radio Init OK : FM Mode\n");
 8000078:	4804      	ldr	r0, [pc, #16]	; (800008c <Ap_Init+0x24>)
 800007a:	4903      	ldr	r1, [pc, #12]	; (8000088 <Ap_Init+0x20>)
 800007c:	4788      	blx	r1
 800007e:	bd08      	pop	{r3, pc}
 8000080:	08000851 	.word	0x08000851
 8000084:	08004684 	.word	0x08004684
 8000088:	08000a6d 	.word	0x08000a6d
 800008c:	08004668 	.word	0x08004668

08000090 <Ap_RadioMenu_ShowMenu>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Ap_RadioMenu_ShowMenu(void)
{
 8000090:	b538      	push	{r3, r4, r5, lr}
	u8 key;

	printf("\n\n");
	printf("*******************************************************\n");
 8000092:	4d11      	ldr	r5, [pc, #68]	; (80000d8 <Ap_RadioMenu_ShowMenu+0x48>)
---------------------------------------------------------------------------*/
void Ap_RadioMenu_ShowMenu(void)
{
	u8 key;

	printf("\n\n");
 8000094:	4c11      	ldr	r4, [pc, #68]	; (80000dc <Ap_RadioMenu_ShowMenu+0x4c>)
 8000096:	4812      	ldr	r0, [pc, #72]	; (80000e0 <Ap_RadioMenu_ShowMenu+0x50>)
 8000098:	47a0      	blx	r4
	printf("*******************************************************\n");
 800009a:	4628      	mov	r0, r5
 800009c:	47a0      	blx	r4
	printf("                      Radio V0.3                       \n");
 800009e:	4811      	ldr	r0, [pc, #68]	; (80000e4 <Ap_RadioMenu_ShowMenu+0x54>)
 80000a0:	47a0      	blx	r4
	printf("*******************************************************\n");
 80000a2:	4628      	mov	r0, r5
 80000a4:	47a0      	blx	r4
	printf("* 1.  Band Select                                     *\n");
 80000a6:	4810      	ldr	r0, [pc, #64]	; (80000e8 <Ap_RadioMenu_ShowMenu+0x58>)
 80000a8:	47a0      	blx	r4
	printf("* 2.  CH ++                                           *\n");
 80000aa:	4810      	ldr	r0, [pc, #64]	; (80000ec <Ap_RadioMenu_ShowMenu+0x5c>)
 80000ac:	47a0      	blx	r4
	printf("* 3.  CH --                                           *\n");
 80000ae:	4810      	ldr	r0, [pc, #64]	; (80000f0 <Ap_RadioMenu_ShowMenu+0x60>)
 80000b0:	47a0      	blx	r4
	printf("* 4.  Seek +                                          *\n");
 80000b2:	4810      	ldr	r0, [pc, #64]	; (80000f4 <Ap_RadioMenu_ShowMenu+0x64>)
 80000b4:	47a0      	blx	r4
	printf("* 5.  Seek -                                          *\n");
 80000b6:	4810      	ldr	r0, [pc, #64]	; (80000f8 <Ap_RadioMenu_ShowMenu+0x68>)
 80000b8:	47a0      	blx	r4
	printf("* 6.  Volume +                                        *\n");
 80000ba:	4810      	ldr	r0, [pc, #64]	; (80000fc <Ap_RadioMenu_ShowMenu+0x6c>)
 80000bc:	47a0      	blx	r4
	printf("* 7.  Volume -                                        *\n");
 80000be:	4810      	ldr	r0, [pc, #64]	; (8000100 <Ap_RadioMenu_ShowMenu+0x70>)
 80000c0:	47a0      	blx	r4
	printf("* 8.  Korea Ch ++                                     *\n");
 80000c2:	4810      	ldr	r0, [pc, #64]	; (8000104 <Ap_RadioMenu_ShowMenu+0x74>)
 80000c4:	47a0      	blx	r4
	printf("* 9.  Korea Ch --                                     *\n");
 80000c6:	4810      	ldr	r0, [pc, #64]	; (8000108 <Ap_RadioMenu_ShowMenu+0x78>)
 80000c8:	47a0      	blx	r4
	printf("* m.  Menu                                            *\n");
 80000ca:	4810      	ldr	r0, [pc, #64]	; (800010c <Ap_RadioMenu_ShowMenu+0x7c>)
 80000cc:	47a0      	blx	r4
	printf("*******************************************************\n");
 80000ce:	4628      	mov	r0, r5
 80000d0:	47a0      	blx	r4
	printf("\n");
 80000d2:	480f      	ldr	r0, [pc, #60]	; (8000110 <Ap_RadioMenu_ShowMenu+0x80>)
 80000d4:	47a0      	blx	r4
}
 80000d6:	bd38      	pop	{r3, r4, r5, pc}
 80000d8:	080046e0 	.word	0x080046e0
 80000dc:	08000a6d 	.word	0x08000a6d
 80000e0:	080046dc 	.word	0x080046dc
 80000e4:	0800471c 	.word	0x0800471c
 80000e8:	08004758 	.word	0x08004758
 80000ec:	08004794 	.word	0x08004794
 80000f0:	080047d0 	.word	0x080047d0
 80000f4:	0800480c 	.word	0x0800480c
 80000f8:	08004848 	.word	0x08004848
 80000fc:	08004884 	.word	0x08004884
 8000100:	080048c0 	.word	0x080048c0
 8000104:	080048fc 	.word	0x080048fc
 8000108:	08004938 	.word	0x08004938
 800010c:	08004974 	.word	0x08004974
 8000110:	08004ac8 	.word	0x08004ac8

08000114 <Ap_RadioMenu_GetCmd>:
     ARG     : void
     RET     : 
				u8 : 눌려진 메뉴키 데이터 
---------------------------------------------------------------------------*/
u8 Ap_RadioMenu_GetCmd(void)
{
 8000114:	b530      	push	{r4, r5, lr}
	u8  key;
	u16 Volume;
	u16 Channel;
	
	
	if( Ap_Radio_BandGet() == MODE_RADIO_BAND_FM )
 8000116:	4c1e      	ldr	r4, [pc, #120]	; (8000190 <Ap_RadioMenu_GetCmd+0x7c>)
     ARG     : void
     RET     : 
				u8 : 눌려진 메뉴키 데이터 
---------------------------------------------------------------------------*/
u8 Ap_RadioMenu_GetCmd(void)
{
 8000118:	b083      	sub	sp, #12
	u8  key;
	u16 Volume;
	u16 Channel;
	
	
	if( Ap_Radio_BandGet() == MODE_RADIO_BAND_FM )
 800011a:	47a0      	blx	r4
 800011c:	2801      	cmp	r0, #1
 800011e:	d00d      	beq.n	800013c <Ap_RadioMenu_GetCmd+0x28>
		Ap_Radio_ChannelGet( &Channel );
		
		printf("FM %d %d%% : ", Channel, Volume*100/63 );
	}
	else
	if( Ap_Radio_BandGet() == MODE_RADIO_BAND_AM )	
 8000120:	47a0      	blx	r4
 8000122:	2802      	cmp	r0, #2
 8000124:	d025      	beq.n	8000172 <Ap_RadioMenu_GetCmd+0x5e>
		
		printf("AM %d %d%% : ", Channel, Volume*100/63 );		
	}
	else
	{
		printf("BAND ERROR : ");
 8000126:	481b      	ldr	r0, [pc, #108]	; (8000194 <Ap_RadioMenu_GetCmd+0x80>)
 8000128:	4c1b      	ldr	r4, [pc, #108]	; (8000198 <Ap_RadioMenu_GetCmd+0x84>)
 800012a:	47a0      	blx	r4
	}
    key=get_byte();
 800012c:	4a1b      	ldr	r2, [pc, #108]	; (800019c <Ap_RadioMenu_GetCmd+0x88>)
 800012e:	4790      	blx	r2
 8000130:	4605      	mov	r5, r0
	
	printf("\n");
 8000132:	481b      	ldr	r0, [pc, #108]	; (80001a0 <Ap_RadioMenu_GetCmd+0x8c>)
 8000134:	47a0      	blx	r4
	
    return key;
}
 8000136:	4628      	mov	r0, r5
 8000138:	b003      	add	sp, #12
 800013a:	bd30      	pop	{r4, r5, pc}
	u16 Channel;
	
	
	if( Ap_Radio_BandGet() == MODE_RADIO_BAND_FM )
	{
		Ap_Radio_VolumeGet( &Volume );
 800013c:	4a19      	ldr	r2, [pc, #100]	; (80001a4 <Ap_RadioMenu_GetCmd+0x90>)
 800013e:	f10d 0006 	add.w	r0, sp, #6
 8000142:	4790      	blx	r2
		Ap_Radio_ChannelGet( &Channel );
 8000144:	a801      	add	r0, sp, #4
 8000146:	4918      	ldr	r1, [pc, #96]	; (80001a8 <Ap_RadioMenu_GetCmd+0x94>)
 8000148:	4788      	blx	r1
		
		printf("FM %d %d%% : ", Channel, Volume*100/63 );
 800014a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800014e:	2264      	movs	r2, #100	; 0x64
 8000150:	fb02 f303 	mul.w	r3, r2, r3
 8000154:	4815      	ldr	r0, [pc, #84]	; (80001ac <Ap_RadioMenu_GetCmd+0x98>)
	if( Ap_Radio_BandGet() == MODE_RADIO_BAND_AM )	
	{
		Ap_Radio_VolumeGet( &Volume );
		Ap_Radio_ChannelGet( &Channel );
		
		printf("AM %d %d%% : ", Channel, Volume*100/63 );		
 8000156:	f102 4e02 	add.w	lr, r2, #2181038080	; 0x82000000
 800015a:	f50e 2102 	add.w	r1, lr, #532480	; 0x82000
 800015e:	311f      	adds	r1, #31
 8000160:	fb81 1c03 	smull	r1, ip, r1, r3
 8000164:	4463      	add	r3, ip
 8000166:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 800016a:	115a      	asrs	r2, r3, #5
 800016c:	4c0a      	ldr	r4, [pc, #40]	; (8000198 <Ap_RadioMenu_GetCmd+0x84>)
 800016e:	47a0      	blx	r4
 8000170:	e7dc      	b.n	800012c <Ap_RadioMenu_GetCmd+0x18>
		printf("FM %d %d%% : ", Channel, Volume*100/63 );
	}
	else
	if( Ap_Radio_BandGet() == MODE_RADIO_BAND_AM )	
	{
		Ap_Radio_VolumeGet( &Volume );
 8000172:	f10d 0006 	add.w	r0, sp, #6
 8000176:	4d0b      	ldr	r5, [pc, #44]	; (80001a4 <Ap_RadioMenu_GetCmd+0x90>)
 8000178:	47a8      	blx	r5
		Ap_Radio_ChannelGet( &Channel );
 800017a:	4c0b      	ldr	r4, [pc, #44]	; (80001a8 <Ap_RadioMenu_GetCmd+0x94>)
 800017c:	a801      	add	r0, sp, #4
 800017e:	47a0      	blx	r4
		
		printf("AM %d %d%% : ", Channel, Volume*100/63 );		
 8000180:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8000184:	2264      	movs	r2, #100	; 0x64
 8000186:	fb02 f300 	mul.w	r3, r2, r0
 800018a:	4809      	ldr	r0, [pc, #36]	; (80001b0 <Ap_RadioMenu_GetCmd+0x9c>)
 800018c:	e7e3      	b.n	8000156 <Ap_RadioMenu_GetCmd+0x42>
 800018e:	bf00      	nop
 8000190:	08000595 	.word	0x08000595
 8000194:	080049d0 	.word	0x080049d0
 8000198:	08000a6d 	.word	0x08000a6d
 800019c:	08001849 	.word	0x08001849
 80001a0:	08004ac8 	.word	0x08004ac8
 80001a4:	080005d9 	.word	0x080005d9
 80001a8:	080007d9 	.word	0x080007d9
 80001ac:	080049b0 	.word	0x080049b0
 80001b0:	080049c0 	.word	0x080049c0

080001b4 <Ap_RadioMenu_ExeCmd>:
     ARG     : void
     RET     : 
				u8 : 눌려진 메뉴키 데이터 
---------------------------------------------------------------------------*/
u8 Ap_RadioMenu_ExeCmd(void)
{
 80001b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
				0 };				
				
	
	if( ExeFirst == TRUE )
	{
		Ap_RadioMenu_ShowMenu();	
 80001b8:	f8df 8324 	ldr.w	r8, [pc, #804]	; 80004e0 <Ap_RadioMenu_ExeCmd+0x32c>
     ARG     : void
     RET     : 
				u8 : 눌려진 메뉴키 데이터 
---------------------------------------------------------------------------*/
u8 Ap_RadioMenu_ExeCmd(void)
{
 80001bc:	b083      	sub	sp, #12
				0 };				
				
	
	if( ExeFirst == TRUE )
	{
		Ap_RadioMenu_ShowMenu();	
 80001be:	47c0      	blx	r8
 80001c0:	4cac      	ldr	r4, [pc, #688]	; (8000474 <Ap_RadioMenu_ExeCmd+0x2c0>)
	           			AM_Freq_Index--;
				}				
               break;

           case '0':
               printf("No.0\n");
 80001c2:	4dad      	ldr	r5, [pc, #692]	; (8000478 <Ap_RadioMenu_ExeCmd+0x2c4>)
	           		}					           		
	           	}
               break;

           case '9': 
           		if( Ap_Radio_BandGet() == MODE_RADIO_BAND_FM )
 80001c4:	4ead      	ldr	r6, [pc, #692]	; (800047c <Ap_RadioMenu_ExeCmd+0x2c8>)
	           		if( FM_Freq_Index > 0 )
	           			FM_Freq_Index--;
				}
				else
				{
	        		Ret  = Ap_Radio_ChannelSet( AM_Freq[AM_Freq_Index] );
 80001c6:	4fae      	ldr	r7, [pc, #696]	; (8000480 <Ap_RadioMenu_ExeCmd+0x2cc>)
	if( ExeFirst == TRUE )
	{
		Ap_RadioMenu_ShowMenu();	
	}

    while( (key = Ap_RadioMenu_GetCmd()) != 0 )
 80001c8:	47a0      	blx	r4
 80001ca:	4603      	mov	r3, r0
 80001cc:	2800      	cmp	r0, #0
 80001ce:	f000 8089 	beq.w	80002e4 <Ap_RadioMenu_ExeCmd+0x130>
    {
        switch(key)
 80001d2:	3b30      	subs	r3, #48	; 0x30
 80001d4:	2b3d      	cmp	r3, #61	; 0x3d
 80001d6:	d8f7      	bhi.n	80001c8 <Ap_RadioMenu_ExeCmd+0x14>
 80001d8:	a201      	add	r2, pc, #4	; (adr r2, 80001e0 <Ap_RadioMenu_ExeCmd+0x2c>)
 80001da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001de:	bf00      	nop
 80001e0:	08000415 	.word	0x08000415
 80001e4:	080003ef 	.word	0x080003ef
 80001e8:	080003e1 	.word	0x080003e1
 80001ec:	080003c1 	.word	0x080003c1
 80001f0:	080003ad 	.word	0x080003ad
 80001f4:	08000393 	.word	0x08000393
 80001f8:	08000385 	.word	0x08000385
 80001fc:	08000377 	.word	0x08000377
 8000200:	0800032b 	.word	0x0800032b
 8000204:	080002eb 	.word	0x080002eb
 8000208:	080001c9 	.word	0x080001c9
 800020c:	080001c9 	.word	0x080001c9
 8000210:	080001c9 	.word	0x080001c9
 8000214:	080001c9 	.word	0x080001c9
 8000218:	080001c9 	.word	0x080001c9
 800021c:	080001c9 	.word	0x080001c9
 8000220:	080001c9 	.word	0x080001c9
 8000224:	080001c9 	.word	0x080001c9
 8000228:	080001c9 	.word	0x080001c9
 800022c:	080001c9 	.word	0x080001c9
 8000230:	080001c9 	.word	0x080001c9
 8000234:	080001c9 	.word	0x080001c9
 8000238:	080001c9 	.word	0x080001c9
 800023c:	080001c9 	.word	0x080001c9
 8000240:	080001c9 	.word	0x080001c9
 8000244:	080001c9 	.word	0x080001c9
 8000248:	080001c9 	.word	0x080001c9
 800024c:	080001c9 	.word	0x080001c9
 8000250:	080001c9 	.word	0x080001c9
 8000254:	080002d9 	.word	0x080002d9
 8000258:	080001c9 	.word	0x080001c9
 800025c:	080001c9 	.word	0x080001c9
 8000260:	080001c9 	.word	0x080001c9
 8000264:	080001c9 	.word	0x080001c9
 8000268:	080001c9 	.word	0x080001c9
 800026c:	080001c9 	.word	0x080001c9
 8000270:	080001c9 	.word	0x080001c9
 8000274:	080001c9 	.word	0x080001c9
 8000278:	080001c9 	.word	0x080001c9
 800027c:	080001c9 	.word	0x080001c9
 8000280:	080001c9 	.word	0x080001c9
 8000284:	080001c9 	.word	0x080001c9
 8000288:	080001c9 	.word	0x080001c9
 800028c:	080001c9 	.word	0x080001c9
 8000290:	080001c9 	.word	0x080001c9
 8000294:	080001c9 	.word	0x080001c9
 8000298:	080001c9 	.word	0x080001c9
 800029c:	080001c9 	.word	0x080001c9
 80002a0:	080001c9 	.word	0x080001c9
 80002a4:	080001c9 	.word	0x080001c9
 80002a8:	080001c9 	.word	0x080001c9
 80002ac:	080001c9 	.word	0x080001c9
 80002b0:	080001c9 	.word	0x080001c9
 80002b4:	080001c9 	.word	0x080001c9
 80002b8:	080001c9 	.word	0x080001c9
 80002bc:	080001c9 	.word	0x080001c9
 80002c0:	080001c9 	.word	0x080001c9
 80002c4:	080001c9 	.word	0x080001c9
 80002c8:	080001c9 	.word	0x080001c9
 80002cc:	080001c9 	.word	0x080001c9
 80002d0:	080001c9 	.word	0x080001c9
 80002d4:	080002d9 	.word	0x080002d9
               printf("No.0\n");
               break;

			case 'm':
			case 'M':
				Ap_RadioMenu_ShowMenu();
 80002d8:	47c0      	blx	r8
	if( ExeFirst == TRUE )
	{
		Ap_RadioMenu_ShowMenu();	
	}

    while( (key = Ap_RadioMenu_GetCmd()) != 0 )
 80002da:	47a0      	blx	r4
 80002dc:	4603      	mov	r3, r0
 80002de:	2800      	cmp	r0, #0
 80002e0:	f47f af77 	bne.w	80001d2 <Ap_RadioMenu_ExeCmd+0x1e>
               break;
        }
    }
    
    return key;
}
 80002e4:	b003      	add	sp, #12
 80002e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	           		}					           		
	           	}
               break;

           case '9': 
           		if( Ap_Radio_BandGet() == MODE_RADIO_BAND_FM )
 80002ea:	47b0      	blx	r6
 80002ec:	2801      	cmp	r0, #1
 80002ee:	f000 80a5 	beq.w	800043c <Ap_RadioMenu_ExeCmd+0x288>
	           		if( FM_Freq_Index > 0 )
	           			FM_Freq_Index--;
				}
				else
				{
	        		Ret  = Ap_Radio_ChannelSet( AM_Freq[AM_Freq_Index] );
 80002f2:	f8df 91f0 	ldr.w	r9, [pc, #496]	; 80004e4 <Ap_RadioMenu_ExeCmd+0x330>
 80002f6:	4963      	ldr	r1, [pc, #396]	; (8000484 <Ap_RadioMenu_ExeCmd+0x2d0>)
 80002f8:	f8b9 a000 	ldrh.w	sl, [r9]
 80002fc:	f837 001a 	ldrh.w	r0, [r7, sl, lsl #1]
 8000300:	4788      	blx	r1
	           		Ret |= Ap_Radio_ChannelGet( &Channel );
 8000302:	4a61      	ldr	r2, [pc, #388]	; (8000488 <Ap_RadioMenu_ExeCmd+0x2d4>)
	           		if( FM_Freq_Index > 0 )
	           			FM_Freq_Index--;
				}
				else
				{
	        		Ret  = Ap_Radio_ChannelSet( AM_Freq[AM_Freq_Index] );
 8000304:	4682      	mov	sl, r0
	           		Ret |= Ap_Radio_ChannelGet( &Channel );
 8000306:	a801      	add	r0, sp, #4
 8000308:	4790      	blx	r2
 800030a:	ea40 030a 	orr.w	r3, r0, sl
					printf("Korea AM Freq : %d  Ret : %d\n", Channel, Ret );
 800030e:	b29a      	uxth	r2, r3
 8000310:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8000314:	485d      	ldr	r0, [pc, #372]	; (800048c <Ap_RadioMenu_ExeCmd+0x2d8>)
 8000316:	47a8      	blx	r5
					
	           		if( AM_Freq_Index > 0 )
 8000318:	f8b9 3000 	ldrh.w	r3, [r9]
 800031c:	2b00      	cmp	r3, #0
 800031e:	f43f af53 	beq.w	80001c8 <Ap_RadioMenu_ExeCmd+0x14>
	           			AM_Freq_Index--;
 8000322:	1e58      	subs	r0, r3, #1
 8000324:	f8a9 0000 	strh.w	r0, [r9]
 8000328:	e74e      	b.n	80001c8 <Ap_RadioMenu_ExeCmd+0x14>
           case '7':
               printf("Volume Down : %d \n", Ap_Radio_VolumeSetDown(10));               
               break;  

           case '8':           		
           		if( Ap_Radio_BandGet() == MODE_RADIO_BAND_FM )
 800032a:	47b0      	blx	r6
 800032c:	2801      	cmp	r0, #1
 800032e:	f000 80df 	beq.w	80004f0 <Ap_RadioMenu_ExeCmd+0x33c>
	           			FM_Freq_Index--;
	           		}				
	           	}
	           	else
	           	{
	        		Ret  = Ap_Radio_ChannelSet( AM_Freq[AM_Freq_Index] );
 8000332:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 80004e4 <Ap_RadioMenu_ExeCmd+0x330>
 8000336:	4b53      	ldr	r3, [pc, #332]	; (8000484 <Ap_RadioMenu_ExeCmd+0x2d0>)
 8000338:	f8b9 a000 	ldrh.w	sl, [r9]
 800033c:	f837 001a 	ldrh.w	r0, [r7, sl, lsl #1]
 8000340:	4798      	blx	r3
	           		Ret |= Ap_Radio_ChannelGet( &Channel );
 8000342:	4951      	ldr	r1, [pc, #324]	; (8000488 <Ap_RadioMenu_ExeCmd+0x2d4>)
	           			FM_Freq_Index--;
	           		}				
	           	}
	           	else
	           	{
	        		Ret  = Ap_Radio_ChannelSet( AM_Freq[AM_Freq_Index] );
 8000344:	4682      	mov	sl, r0
	           		Ret |= Ap_Radio_ChannelGet( &Channel );
 8000346:	a801      	add	r0, sp, #4
 8000348:	4788      	blx	r1
 800034a:	ea40 020a 	orr.w	r2, r0, sl
					printf("Korea AM Freq : %d  Ret : %d\n", Channel, Ret );				
 800034e:	b292      	uxth	r2, r2
 8000350:	484e      	ldr	r0, [pc, #312]	; (800048c <Ap_RadioMenu_ExeCmd+0x2d8>)
 8000352:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8000356:	47a8      	blx	r5
					
	           		AM_Freq_Index++;
 8000358:	f8b9 2000 	ldrh.w	r2, [r9]
 800035c:	1c53      	adds	r3, r2, #1
 800035e:	fa1f fc83 	uxth.w	ip, r3
	           		
	           		if( AM_Freq[AM_Freq_Index] == 0 )
 8000362:	f837 001c 	ldrh.w	r0, [r7, ip, lsl #1]
	           	{
	        		Ret  = Ap_Radio_ChannelSet( AM_Freq[AM_Freq_Index] );
	           		Ret |= Ap_Radio_ChannelGet( &Channel );
					printf("Korea AM Freq : %d  Ret : %d\n", Channel, Ret );				
					
	           		AM_Freq_Index++;
 8000366:	f8a9 c000 	strh.w	ip, [r9]
	           		
	           		if( AM_Freq[AM_Freq_Index] == 0 )
 800036a:	2800      	cmp	r0, #0
 800036c:	f47f af2c 	bne.w	80001c8 <Ap_RadioMenu_ExeCmd+0x14>
	           		{
	           			AM_Freq_Index--;
 8000370:	f8a9 2000 	strh.w	r2, [r9]
 8000374:	e728      	b.n	80001c8 <Ap_RadioMenu_ExeCmd+0x14>
           case '6':
               printf("Volume Up : %d \n", Ap_Radio_VolumeSetUp(10));               
               break;  

           case '7':
               printf("Volume Down : %d \n", Ap_Radio_VolumeSetDown(10));               
 8000376:	200a      	movs	r0, #10
 8000378:	4a45      	ldr	r2, [pc, #276]	; (8000490 <Ap_RadioMenu_ExeCmd+0x2dc>)
 800037a:	4790      	blx	r2
 800037c:	4601      	mov	r1, r0
 800037e:	4845      	ldr	r0, [pc, #276]	; (8000494 <Ap_RadioMenu_ExeCmd+0x2e0>)
 8000380:	47a8      	blx	r5
               break;  
 8000382:	e721      	b.n	80001c8 <Ap_RadioMenu_ExeCmd+0x14>
				}    

               break;  

           case '6':
               printf("Volume Up : %d \n", Ap_Radio_VolumeSetUp(10));               
 8000384:	200a      	movs	r0, #10
 8000386:	4b44      	ldr	r3, [pc, #272]	; (8000498 <Ap_RadioMenu_ExeCmd+0x2e4>)
 8000388:	4798      	blx	r3
 800038a:	4601      	mov	r1, r0
 800038c:	4843      	ldr	r0, [pc, #268]	; (800049c <Ap_RadioMenu_ExeCmd+0x2e8>)
 800038e:	47a8      	blx	r5
               break;  
 8000390:	e71a      	b.n	80001c8 <Ap_RadioMenu_ExeCmd+0x14>
				}
				
               break;  

           case '5':
				Ret = Ap_Radio_SeekToFirst( &FreqValid );
 8000392:	f10d 0007 	add.w	r0, sp, #7
 8000396:	4a42      	ldr	r2, [pc, #264]	; (80004a0 <Ap_RadioMenu_ExeCmd+0x2ec>)
 8000398:	4790      	blx	r2
				
				if( Ret == ERR_NONE )
 800039a:	4601      	mov	r1, r0
 800039c:	b968      	cbnz	r0, 80003ba <Ap_RadioMenu_ExeCmd+0x206>
				{
					if( FreqValid == 1 )
 800039e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80003a2:	2801      	cmp	r0, #1
 80003a4:	d041      	beq.n	800042a <Ap_RadioMenu_ExeCmd+0x276>
           				Ret = Ap_Radio_ChannelGet( &Channel );
						printf("Found Freq : %d  Ret : %d\n", Channel, Ret );
					}
					else
					{
						printf("Not Found\n");
 80003a6:	483f      	ldr	r0, [pc, #252]	; (80004a4 <Ap_RadioMenu_ExeCmd+0x2f0>)
 80003a8:	47a8      	blx	r5
 80003aa:	e70d      	b.n	80001c8 <Ap_RadioMenu_ExeCmd+0x14>
           		Ret |= Ap_Radio_ChannelGet( &Channel );
				printf("Freq : %d  Ret : %d\n", Channel, Ret );
               break; 

           case '4':
				Ret = Ap_Radio_SeekToLast( &FreqValid );
 80003ac:	f10d 0007 	add.w	r0, sp, #7
 80003b0:	4b3d      	ldr	r3, [pc, #244]	; (80004a8 <Ap_RadioMenu_ExeCmd+0x2f4>)
 80003b2:	4798      	blx	r3
				
				if( Ret == ERR_NONE )
 80003b4:	4601      	mov	r1, r0
 80003b6:	2800      	cmp	r0, #0
 80003b8:	d0f1      	beq.n	800039e <Ap_RadioMenu_ExeCmd+0x1ea>
						printf("Not Found\n");
					}
				}
				else
				{
					printf("ErrCode  Ret : %d\n", Ret );
 80003ba:	483c      	ldr	r0, [pc, #240]	; (80004ac <Ap_RadioMenu_ExeCmd+0x2f8>)
 80003bc:	47a8      	blx	r5
 80003be:	e703      	b.n	80001c8 <Ap_RadioMenu_ExeCmd+0x14>
				printf("Freq : %d  Ret : %d\n", Channel, Ret );
					         	
               break;

           case '3':
           		if( Ap_Radio_BandGet() == MODE_RADIO_BAND_FM )	ChannelGap = 10;
 80003c0:	47b0      	blx	r6
           		else											ChannelGap = 1;
           		Ret  = Ap_Radio_ChannelSetPrev( 10 );
 80003c2:	4b3b      	ldr	r3, [pc, #236]	; (80004b0 <Ap_RadioMenu_ExeCmd+0x2fc>)
 80003c4:	200a      	movs	r0, #10
 80003c6:	4798      	blx	r3
           		Ret |= Ap_Radio_ChannelGet( &Channel );
 80003c8:	492f      	ldr	r1, [pc, #188]	; (8000488 <Ap_RadioMenu_ExeCmd+0x2d4>)
               break;

           case '3':
           		if( Ap_Radio_BandGet() == MODE_RADIO_BAND_FM )	ChannelGap = 10;
           		else											ChannelGap = 1;
           		Ret  = Ap_Radio_ChannelSetPrev( 10 );
 80003ca:	4681      	mov	r9, r0
           		Ret |= Ap_Radio_ChannelGet( &Channel );
 80003cc:	a801      	add	r0, sp, #4
 80003ce:	4788      	blx	r1
 80003d0:	ea40 0209 	orr.w	r2, r0, r9
				printf("Freq : %d  Ret : %d\n", Channel, Ret );
 80003d4:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 80003d8:	4836      	ldr	r0, [pc, #216]	; (80004b4 <Ap_RadioMenu_ExeCmd+0x300>)
 80003da:	b292      	uxth	r2, r2
 80003dc:	47a8      	blx	r5
               break; 
 80003de:	e6f3      	b.n	80001c8 <Ap_RadioMenu_ExeCmd+0x14>
               	}
               	Band_Mode ^= 1;
               	break;

           case '2':
           		if( Ap_Radio_BandGet() == MODE_RADIO_BAND_FM )	ChannelGap = 10;
 80003e0:	47b0      	blx	r6
           		else											ChannelGap = 1;
           		Ret  = Ap_Radio_ChannelSetNext( ChannelGap );
 80003e2:	4b35      	ldr	r3, [pc, #212]	; (80004b8 <Ap_RadioMenu_ExeCmd+0x304>)
 80003e4:	2801      	cmp	r0, #1
 80003e6:	bf14      	ite	ne
 80003e8:	2001      	movne	r0, #1
 80003ea:	200a      	moveq	r0, #10
 80003ec:	e7eb      	b.n	80003c6 <Ap_RadioMenu_ExeCmd+0x212>
    while( (key = Ap_RadioMenu_GetCmd()) != 0 )
    {
        switch(key)
        {
           case '1':
           		if( Band_Mode == 0 )
 80003ee:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 80004e8 <Ap_RadioMenu_ExeCmd+0x334>
 80003f2:	f899 3000 	ldrb.w	r3, [r9]
 80003f6:	b983      	cbnz	r3, 800041a <Ap_RadioMenu_ExeCmd+0x266>
           		{
               		printf("FM Config : %x \n", Ap_Radio_BandSetFM());     
 80003f8:	4930      	ldr	r1, [pc, #192]	; (80004bc <Ap_RadioMenu_ExeCmd+0x308>)
 80003fa:	4788      	blx	r1
 80003fc:	4601      	mov	r1, r0
 80003fe:	4830      	ldr	r0, [pc, #192]	; (80004c0 <Ap_RadioMenu_ExeCmd+0x30c>)
 8000400:	47a8      	blx	r5
               		Ap_Radio_ChannelSetFirst();      
 8000402:	4830      	ldr	r0, [pc, #192]	; (80004c4 <Ap_RadioMenu_ExeCmd+0x310>)
 8000404:	4780      	blx	r0
               	else
               	{
               		printf("AM Config : %x \n", Ap_Radio_BandSetAM());           
               		Ap_Radio_ChannelSetFirst();
               	}
               	Band_Mode ^= 1;
 8000406:	f899 e000 	ldrb.w	lr, [r9]
 800040a:	f08e 0c01 	eor.w	ip, lr, #1
 800040e:	f889 c000 	strb.w	ip, [r9]
               	break;
 8000412:	e6d9      	b.n	80001c8 <Ap_RadioMenu_ExeCmd+0x14>
	           			AM_Freq_Index--;
				}				
               break;

           case '0':
               printf("No.0\n");
 8000414:	482c      	ldr	r0, [pc, #176]	; (80004c8 <Ap_RadioMenu_ExeCmd+0x314>)
 8000416:	47a8      	blx	r5
               break;
 8000418:	e6d6      	b.n	80001c8 <Ap_RadioMenu_ExeCmd+0x14>
               		printf("FM Config : %x \n", Ap_Radio_BandSetFM());     
               		Ap_Radio_ChannelSetFirst();      
               	}
               	else
               	{
               		printf("AM Config : %x \n", Ap_Radio_BandSetAM());           
 800041a:	4b2c      	ldr	r3, [pc, #176]	; (80004cc <Ap_RadioMenu_ExeCmd+0x318>)
 800041c:	4798      	blx	r3
 800041e:	4601      	mov	r1, r0
 8000420:	482b      	ldr	r0, [pc, #172]	; (80004d0 <Ap_RadioMenu_ExeCmd+0x31c>)
 8000422:	47a8      	blx	r5
               		Ap_Radio_ChannelSetFirst();
 8000424:	4a27      	ldr	r2, [pc, #156]	; (80004c4 <Ap_RadioMenu_ExeCmd+0x310>)
 8000426:	4790      	blx	r2
 8000428:	e7ed      	b.n	8000406 <Ap_RadioMenu_ExeCmd+0x252>
				
				if( Ret == ERR_NONE )
				{
					if( FreqValid == 1 )
					{
           				Ret = Ap_Radio_ChannelGet( &Channel );
 800042a:	a801      	add	r0, sp, #4
 800042c:	4916      	ldr	r1, [pc, #88]	; (8000488 <Ap_RadioMenu_ExeCmd+0x2d4>)
 800042e:	4788      	blx	r1
						printf("Found Freq : %d  Ret : %d\n", Channel, Ret );
 8000430:	f8bd 1004 	ldrh.w	r1, [sp, #4]
				
				if( Ret == ERR_NONE )
				{
					if( FreqValid == 1 )
					{
           				Ret = Ap_Radio_ChannelGet( &Channel );
 8000434:	4602      	mov	r2, r0
						printf("Found Freq : %d  Ret : %d\n", Channel, Ret );
 8000436:	4827      	ldr	r0, [pc, #156]	; (80004d4 <Ap_RadioMenu_ExeCmd+0x320>)
 8000438:	47a8      	blx	r5
 800043a:	e6c5      	b.n	80001c8 <Ap_RadioMenu_ExeCmd+0x14>
               break;

           case '9': 
           		if( Ap_Radio_BandGet() == MODE_RADIO_BAND_FM )
           		{				           		           		
	        		Ret  = Ap_Radio_ChannelSet( FM_Freq[FM_Freq_Index] );
 800043c:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 80004ec <Ap_RadioMenu_ExeCmd+0x338>
 8000440:	4825      	ldr	r0, [pc, #148]	; (80004d8 <Ap_RadioMenu_ExeCmd+0x324>)
 8000442:	f8b9 e000 	ldrh.w	lr, [r9]
 8000446:	490f      	ldr	r1, [pc, #60]	; (8000484 <Ap_RadioMenu_ExeCmd+0x2d0>)
 8000448:	f830 001e 	ldrh.w	r0, [r0, lr, lsl #1]
 800044c:	4788      	blx	r1
	           		Ret |= Ap_Radio_ChannelGet( &Channel );
 800044e:	4a0e      	ldr	r2, [pc, #56]	; (8000488 <Ap_RadioMenu_ExeCmd+0x2d4>)
               break;

           case '9': 
           		if( Ap_Radio_BandGet() == MODE_RADIO_BAND_FM )
           		{				           		           		
	        		Ret  = Ap_Radio_ChannelSet( FM_Freq[FM_Freq_Index] );
 8000450:	4682      	mov	sl, r0
	           		Ret |= Ap_Radio_ChannelGet( &Channel );
 8000452:	a801      	add	r0, sp, #4
 8000454:	4790      	blx	r2
 8000456:	ea40 0c0a 	orr.w	ip, r0, sl
					printf("Korea FM Freq : %d  Ret : %d\n", Channel, Ret );
 800045a:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 800045e:	481f      	ldr	r0, [pc, #124]	; (80004dc <Ap_RadioMenu_ExeCmd+0x328>)
 8000460:	fa1f f28c 	uxth.w	r2, ip
 8000464:	47a8      	blx	r5
					
	           		if( FM_Freq_Index > 0 )
 8000466:	f8b9 3000 	ldrh.w	r3, [r9]
 800046a:	2b00      	cmp	r3, #0
 800046c:	f43f aeac 	beq.w	80001c8 <Ap_RadioMenu_ExeCmd+0x14>
 8000470:	e757      	b.n	8000322 <Ap_RadioMenu_ExeCmd+0x16e>
 8000472:	bf00      	nop
 8000474:	08000115 	.word	0x08000115
 8000478:	08000a6d 	.word	0x08000a6d
 800047c:	08000595 	.word	0x08000595
 8000480:	08004acc 	.word	0x08004acc
 8000484:	0800073d 	.word	0x0800073d
 8000488:	080007d9 	.word	0x080007d9
 800048c:	08004aa4 	.word	0x08004aa4
 8000490:	08000629 	.word	0x08000629
 8000494:	08004a70 	.word	0x08004a70
 8000498:	08000661 	.word	0x08000661
 800049c:	08004a5c 	.word	0x08004a5c
 80004a0:	080008f1 	.word	0x080008f1
 80004a4:	08004a3c 	.word	0x08004a3c
 80004a8:	08000989 	.word	0x08000989
 80004ac:	08004a48 	.word	0x08004a48
 80004b0:	080008c9 	.word	0x080008c9
 80004b4:	08004a08 	.word	0x08004a08
 80004b8:	080008a1 	.word	0x080008a1
 80004bc:	0800054d 	.word	0x0800054d
 80004c0:	080049e0 	.word	0x080049e0
 80004c4:	08000821 	.word	0x08000821
 80004c8:	08004ac4 	.word	0x08004ac4
 80004cc:	08000571 	.word	0x08000571
 80004d0:	080049f4 	.word	0x080049f4
 80004d4:	08004a20 	.word	0x08004a20
 80004d8:	08004698 	.word	0x08004698
 80004dc:	08004a84 	.word	0x08004a84
 80004e0:	08000091 	.word	0x08000091
 80004e4:	20000200 	.word	0x20000200
 80004e8:	20000204 	.word	0x20000204
 80004ec:	20000202 	.word	0x20000202
               break;  

           case '8':           		
           		if( Ap_Radio_BandGet() == MODE_RADIO_BAND_FM )
           		{
	        		Ret  = Ap_Radio_ChannelSet( FM_Freq[FM_Freq_Index] );
 80004f0:	f8df 9050 	ldr.w	r9, [pc, #80]	; 8000544 <Ap_RadioMenu_ExeCmd+0x390>
 80004f4:	f8df a050 	ldr.w	sl, [pc, #80]	; 8000548 <Ap_RadioMenu_ExeCmd+0x394>
 80004f8:	f8b9 b000 	ldrh.w	fp, [r9]
 80004fc:	490e      	ldr	r1, [pc, #56]	; (8000538 <Ap_RadioMenu_ExeCmd+0x384>)
 80004fe:	f83a 001b 	ldrh.w	r0, [sl, fp, lsl #1]
 8000502:	4788      	blx	r1
	           		Ret |= Ap_Radio_ChannelGet( &Channel );
 8000504:	4a0d      	ldr	r2, [pc, #52]	; (800053c <Ap_RadioMenu_ExeCmd+0x388>)
               break;  

           case '8':           		
           		if( Ap_Radio_BandGet() == MODE_RADIO_BAND_FM )
           		{
	        		Ret  = Ap_Radio_ChannelSet( FM_Freq[FM_Freq_Index] );
 8000506:	4683      	mov	fp, r0
	           		Ret |= Ap_Radio_ChannelGet( &Channel );
 8000508:	a801      	add	r0, sp, #4
 800050a:	4790      	blx	r2
 800050c:	ea40 030b 	orr.w	r3, r0, fp
					printf("Korea FM Freq : %d  Ret : %d\n", Channel, Ret );				
 8000510:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8000514:	480a      	ldr	r0, [pc, #40]	; (8000540 <Ap_RadioMenu_ExeCmd+0x38c>)
 8000516:	b29a      	uxth	r2, r3
 8000518:	47a8      	blx	r5
					
	           		FM_Freq_Index++;
 800051a:	f8b9 2000 	ldrh.w	r2, [r9]
 800051e:	1c51      	adds	r1, r2, #1
 8000520:	fa1f fc81 	uxth.w	ip, r1
	           		
	           		if( FM_Freq[FM_Freq_Index] == 0 )
 8000524:	f83a 001c 	ldrh.w	r0, [sl, ip, lsl #1]
           		{
	        		Ret  = Ap_Radio_ChannelSet( FM_Freq[FM_Freq_Index] );
	           		Ret |= Ap_Radio_ChannelGet( &Channel );
					printf("Korea FM Freq : %d  Ret : %d\n", Channel, Ret );				
					
	           		FM_Freq_Index++;
 8000528:	f8a9 c000 	strh.w	ip, [r9]
	           		
	           		if( FM_Freq[FM_Freq_Index] == 0 )
 800052c:	2800      	cmp	r0, #0
 800052e:	f47f ae4b 	bne.w	80001c8 <Ap_RadioMenu_ExeCmd+0x14>
					
	           		AM_Freq_Index++;
	           		
	           		if( AM_Freq[AM_Freq_Index] == 0 )
	           		{
	           			AM_Freq_Index--;
 8000532:	f8a9 2000 	strh.w	r2, [r9]
 8000536:	e647      	b.n	80001c8 <Ap_RadioMenu_ExeCmd+0x14>
 8000538:	0800073d 	.word	0x0800073d
 800053c:	080007d9 	.word	0x080007d9
 8000540:	08004a84 	.word	0x08004a84
 8000544:	20000202 	.word	0x20000202
 8000548:	08004698 	.word	0x08004698

0800054c <Ap_Radio_BandSetFM>:
     ARG     : void
     RET     : 
     			u16 - Error Code
---------------------------------------------------------------------------*/
u16 Ap_Radio_BandSetFM( void )
{
 800054c:	b510      	push	{r4, lr}
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Ap_Radio_ApiStart( void )
{
	Ap_Radio_Log.Err_Hw = 0;
 800054e:	4c06      	ldr	r4, [pc, #24]	; (8000568 <Ap_Radio_BandSetFM+0x1c>)
 8000550:	2000      	movs	r0, #0
 8000552:	82a0      	strh	r0, [r4, #20]
{
	u16 Ret = ERR_NONE;
	
	Ap_Radio_ApiStart();
	
	Ap_Radio_Log.Err_Hw = Hw_Si47xx_FM_Config();	
 8000554:	4b05      	ldr	r3, [pc, #20]	; (800056c <Ap_Radio_BandSetFM+0x20>)
 8000556:	4798      	blx	r3
 8000558:	82a0      	strh	r0, [r4, #20]
	
	if( Ap_Radio_Log.Err_Hw == ERR_NONE )
 800055a:	b910      	cbnz	r0, 8000562 <Ap_Radio_BandSetFM+0x16>
	{
		Ap_Radio_Log.Band_Mode = MODE_RADIO_BAND_FM;
 800055c:	2101      	movs	r1, #1
 800055e:	8021      	strh	r1, [r4, #0]
 8000560:	bd10      	pop	{r4, pc}
	}
	else
	{
		Ret = ERR_RADIO_HW_ERR;
 8000562:	2002      	movs	r0, #2
	}
	
	return Ret;
}
 8000564:	bd10      	pop	{r4, pc}
 8000566:	bf00      	nop
 8000568:	200002b4 	.word	0x200002b4
 800056c:	08002ad5 	.word	0x08002ad5

08000570 <Ap_Radio_BandSetAM>:
     ARG     : void
     RET     : 
     			u16 - Error Code     
---------------------------------------------------------------------------*/
u16 Ap_Radio_BandSetAM( void )
{
 8000570:	b510      	push	{r4, lr}
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Ap_Radio_ApiStart( void )
{
	Ap_Radio_Log.Err_Hw = 0;
 8000572:	4c06      	ldr	r4, [pc, #24]	; (800058c <Ap_Radio_BandSetAM+0x1c>)
 8000574:	2000      	movs	r0, #0
 8000576:	82a0      	strh	r0, [r4, #20]
	u16 Ret = ERR_NONE;
	
	Ap_Radio_ApiStart();
	
	
	Ap_Radio_Log.Err_Hw = Hw_Si47xx_AM_Config();	
 8000578:	4b05      	ldr	r3, [pc, #20]	; (8000590 <Ap_Radio_BandSetAM+0x20>)
 800057a:	4798      	blx	r3
 800057c:	82a0      	strh	r0, [r4, #20]
	
	if( Ap_Radio_Log.Err_Hw == ERR_NONE )
 800057e:	b910      	cbnz	r0, 8000586 <Ap_Radio_BandSetAM+0x16>
	{
		Ap_Radio_Log.Band_Mode = MODE_RADIO_BAND_AM;
 8000580:	2102      	movs	r1, #2
 8000582:	8021      	strh	r1, [r4, #0]
 8000584:	bd10      	pop	{r4, pc}
	}
	else
	{
		Ret = ERR_RADIO_HW_ERR;
 8000586:	2002      	movs	r0, #2
	}

	
	return Ret;
}
 8000588:	bd10      	pop	{r4, pc}
 800058a:	bf00      	nop
 800058c:	200002b4 	.word	0x200002b4
 8000590:	08002a31 	.word	0x08002a31

08000594 <Ap_Radio_BandGet>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Ap_Radio_ApiStart( void )
{
	Ap_Radio_Log.Err_Hw = 0;
 8000594:	4b02      	ldr	r3, [pc, #8]	; (80005a0 <Ap_Radio_BandGet+0xc>)
 8000596:	2200      	movs	r2, #0
 8000598:	829a      	strh	r2, [r3, #20]
u16 Ap_Radio_BandGet( void )
{
	Ap_Radio_ApiStart();
	
	return Ap_Radio_Log.Band_Mode;
}
 800059a:	8818      	ldrh	r0, [r3, #0]
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	200002b4 	.word	0x200002b4

080005a4 <Ap_Radio_VolumeSet>:
	   			u16 Volume - Volume value(0~100)
     RET     : 
     			u16 - Error Code     
---------------------------------------------------------------------------*/
u16 Ap_Radio_VolumeSet( u16 Volume )
{
 80005a4:	b510      	push	{r4, lr}
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Ap_Radio_ApiStart( void )
{
	Ap_Radio_Log.Err_Hw = 0;
 80005a6:	4c0a      	ldr	r4, [pc, #40]	; (80005d0 <Ap_Radio_VolumeSet+0x2c>)
 80005a8:	2300      	movs	r3, #0
	u16 Radio_Volume;
	
	Ap_Radio_ApiStart();
	
	
	if( Volume > Ap_Radio_Log.Volume_Max ) Volume = Ap_Radio_Log.Volume_Max;
 80005aa:	f8b4 c006 	ldrh.w	ip, [r4, #6]
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Ap_Radio_ApiStart( void )
{
	Ap_Radio_Log.Err_Hw = 0;
 80005ae:	82a3      	strh	r3, [r4, #20]
	Ap_Radio_ApiStart();
	
	
	if( Volume > Ap_Radio_Log.Volume_Max ) Volume = Ap_Radio_Log.Volume_Max;
	
	Radio_Volume = Volume * 63 / Ap_Radio_Log.Volume_Max;
 80005b0:	4560      	cmp	r0, ip
 80005b2:	bf28      	it	cs
 80005b4:	4660      	movcs	r0, ip
 80005b6:	0182      	lsls	r2, r0, #6
 80005b8:	1a10      	subs	r0, r2, r0
 80005ba:	fb90 f1fc 	sdiv	r1, r0, ip
	
	Ret = Hw_Si47xx_SET_PROPERTY( 0x4000, Radio_Volume );	
 80005be:	b289      	uxth	r1, r1
 80005c0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80005c4:	4b03      	ldr	r3, [pc, #12]	; (80005d4 <Ap_Radio_VolumeSet+0x30>)
 80005c6:	4798      	blx	r3
		
	if( Ret != ERR_NONE )
 80005c8:	b108      	cbz	r0, 80005ce <Ap_Radio_VolumeSet+0x2a>
	{
		Ap_Radio_Log.Err_Hw = Ret;
 80005ca:	82a0      	strh	r0, [r4, #20]
		
		Ret = ERR_RADIO_HW_ERR;
 80005cc:	2002      	movs	r0, #2
	}
	
	return Ret;
}
 80005ce:	bd10      	pop	{r4, pc}
 80005d0:	200002b4 	.word	0x200002b4
 80005d4:	080029e9 	.word	0x080029e9

080005d8 <Ap_Radio_VolumeGet>:
     			u16 *pVolume - Pointer of volume value
     RET     : 
     			u16 - Error Code     
---------------------------------------------------------------------------*/
u16 Ap_Radio_VolumeGet( u16 *pVolume )
{
 80005d8:	b530      	push	{r4, r5, lr}
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Ap_Radio_ApiStart( void )
{
	Ap_Radio_Log.Err_Hw = 0;
 80005da:	4c10      	ldr	r4, [pc, #64]	; (800061c <Ap_Radio_VolumeGet+0x44>)
     			u16 *pVolume - Pointer of volume value
     RET     : 
     			u16 - Error Code     
---------------------------------------------------------------------------*/
u16 Ap_Radio_VolumeGet( u16 *pVolume )
{
 80005dc:	b083      	sub	sp, #12
	u16 Ret;
	u16 Volume = 0;
 80005de:	2200      	movs	r2, #0
 80005e0:	a902      	add	r1, sp, #8
     			u16 *pVolume - Pointer of volume value
     RET     : 
     			u16 - Error Code     
---------------------------------------------------------------------------*/
u16 Ap_Radio_VolumeGet( u16 *pVolume )
{
 80005e2:	4605      	mov	r5, r0
	u16 Ret;
	u16 Volume = 0;
 80005e4:	f821 2d02 	strh.w	r2, [r1, #-2]!
	
	Ap_Radio_ApiStart();
	
	
	Ret = Hw_Si47xx_GET_PROPERTY( 0x4000, &Volume );
 80005e8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Ap_Radio_ApiStart( void )
{
	Ap_Radio_Log.Err_Hw = 0;
 80005ec:	82a2      	strh	r2, [r4, #20]
	u16 Volume = 0;
	
	Ap_Radio_ApiStart();
	
	
	Ret = Hw_Si47xx_GET_PROPERTY( 0x4000, &Volume );
 80005ee:	4b0c      	ldr	r3, [pc, #48]	; (8000620 <Ap_Radio_VolumeGet+0x48>)
 80005f0:	4798      	blx	r3
	
	if( Ret == ERR_NONE )
 80005f2:	b118      	cbz	r0, 80005fc <Ap_Radio_VolumeGet+0x24>
		
		*pVolume = Volume * Ap_Radio_Log.Volume_Max / 63;
	}
	else
	{
		Ap_Radio_Log.Err_Hw = Ret;
 80005f4:	82a0      	strh	r0, [r4, #20]
		
		Ret = ERR_RADIO_HW_ERR;
 80005f6:	2002      	movs	r0, #2
	}
	
	return Ret;
}
 80005f8:	b003      	add	sp, #12
 80005fa:	bd30      	pop	{r4, r5, pc}
	Ret = Hw_Si47xx_GET_PROPERTY( 0x4000, &Volume );
	
	if( Ret == ERR_NONE )
	{
		
		*pVolume = Volume * Ap_Radio_Log.Volume_Max / 63;
 80005fc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8000600:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 8000604:	4907      	ldr	r1, [pc, #28]	; (8000624 <Ap_Radio_VolumeGet+0x4c>)
 8000606:	fb02 f30c 	mul.w	r3, r2, ip
 800060a:	fb81 2e03 	smull	r2, lr, r1, r3
 800060e:	17da      	asrs	r2, r3, #31
 8000610:	eb0e 0c03 	add.w	ip, lr, r3
 8000614:	ebc2 116c 	rsb	r1, r2, ip, asr #5
 8000618:	8029      	strh	r1, [r5, #0]
 800061a:	e7ed      	b.n	80005f8 <Ap_Radio_VolumeGet+0x20>
 800061c:	200002b4 	.word	0x200002b4
 8000620:	080029a1 	.word	0x080029a1
 8000624:	82082083 	.word	0x82082083

08000628 <Ap_Radio_VolumeSetDown>:
	   			u16 Step - Volume decresement step (0~100)     
     RET     : 
     			u16 - Error Code     
---------------------------------------------------------------------------*/
u16 Ap_Radio_VolumeSetDown( u16 Step )
{
 8000628:	b510      	push	{r4, lr}
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Ap_Radio_ApiStart( void )
{
	Ap_Radio_Log.Err_Hw = 0;
 800062a:	490a      	ldr	r1, [pc, #40]	; (8000654 <Ap_Radio_VolumeSetDown+0x2c>)
	   			u16 Step - Volume decresement step (0~100)     
     RET     : 
     			u16 - Error Code     
---------------------------------------------------------------------------*/
u16 Ap_Radio_VolumeSetDown( u16 Step )
{
 800062c:	b082      	sub	sp, #8
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Ap_Radio_ApiStart( void )
{
	Ap_Radio_Log.Err_Hw = 0;
 800062e:	2200      	movs	r2, #0
	   			u16 Step - Volume decresement step (0~100)     
     RET     : 
     			u16 - Error Code     
---------------------------------------------------------------------------*/
u16 Ap_Radio_VolumeSetDown( u16 Step )
{
 8000630:	4604      	mov	r4, r0
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Ap_Radio_ApiStart( void )
{
	Ap_Radio_Log.Err_Hw = 0;
 8000632:	828a      	strh	r2, [r1, #20]
	u16 VolumeTarget;
	
	Ap_Radio_ApiStart();
	
	
	Ret = Ap_Radio_VolumeGet( &Volume );
 8000634:	f10d 0006 	add.w	r0, sp, #6
 8000638:	4b07      	ldr	r3, [pc, #28]	; (8000658 <Ap_Radio_VolumeSetDown+0x30>)
 800063a:	4798      	blx	r3
	
	if( Ret == ERR_NONE )
 800063c:	b940      	cbnz	r0, 8000650 <Ap_Radio_VolumeSetDown+0x28>
	{
		if( Volume > Step )
 800063e:	f8bd c006 	ldrh.w	ip, [sp, #6]
		else
		{
			VolumeTarget = 0;
		}
				
		Ret = Ap_Radio_VolumeSet( VolumeTarget );	
 8000642:	4b06      	ldr	r3, [pc, #24]	; (800065c <Ap_Radio_VolumeSetDown+0x34>)
	
	Ret = Ap_Radio_VolumeGet( &Volume );
	
	if( Ret == ERR_NONE )
	{
		if( Volume > Step )
 8000644:	45a4      	cmp	ip, r4
		{
			VolumeTarget = Volume - Step;
 8000646:	bf84      	itt	hi
 8000648:	ebc4 000c 	rsbhi	r0, r4, ip
 800064c:	b280      	uxthhi	r0, r0
		else
		{
			VolumeTarget = 0;
		}
				
		Ret = Ap_Radio_VolumeSet( VolumeTarget );	
 800064e:	4798      	blx	r3
	}	
	
	return Ret;
}
 8000650:	b002      	add	sp, #8
 8000652:	bd10      	pop	{r4, pc}
 8000654:	200002b4 	.word	0x200002b4
 8000658:	080005d9 	.word	0x080005d9
 800065c:	080005a5 	.word	0x080005a5

08000660 <Ap_Radio_VolumeSetUp>:
	   			u16 Step - Volume incresement step (0~100)
     RET     : 
     			u16 - Error Code     
---------------------------------------------------------------------------*/
u16 Ap_Radio_VolumeSetUp( u16 Step )
{
 8000660:	b530      	push	{r4, r5, lr}
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Ap_Radio_ApiStart( void )
{
	Ap_Radio_Log.Err_Hw = 0;
 8000662:	4c0b      	ldr	r4, [pc, #44]	; (8000690 <Ap_Radio_VolumeSetUp+0x30>)
	   			u16 Step - Volume incresement step (0~100)
     RET     : 
     			u16 - Error Code     
---------------------------------------------------------------------------*/
u16 Ap_Radio_VolumeSetUp( u16 Step )
{
 8000664:	b083      	sub	sp, #12
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Ap_Radio_ApiStart( void )
{
	Ap_Radio_Log.Err_Hw = 0;
 8000666:	2100      	movs	r1, #0
	   			u16 Step - Volume incresement step (0~100)
     RET     : 
     			u16 - Error Code     
---------------------------------------------------------------------------*/
u16 Ap_Radio_VolumeSetUp( u16 Step )
{
 8000668:	4605      	mov	r5, r0
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Ap_Radio_ApiStart( void )
{
	Ap_Radio_Log.Err_Hw = 0;
 800066a:	82a1      	strh	r1, [r4, #20]
	u16 VolumeTarget;
	
	Ap_Radio_ApiStart();
	
	
	Ret = Ap_Radio_VolumeGet( &Volume );
 800066c:	f10d 0006 	add.w	r0, sp, #6
 8000670:	4b08      	ldr	r3, [pc, #32]	; (8000694 <Ap_Radio_VolumeSetUp+0x34>)
 8000672:	4798      	blx	r3
	
	if( Ret == ERR_NONE )
 8000674:	b950      	cbnz	r0, 800068c <Ap_Radio_VolumeSetUp+0x2c>
	{
		VolumeTarget = Volume + Step;
 8000676:	f8bd 0006 	ldrh.w	r0, [sp, #6]
		
		if( VolumeTarget > Ap_Radio_Log.Volume_Max ) VolumeTarget = Ap_Radio_Log.Volume_Max;
		
		Ret = Ap_Radio_VolumeSet( VolumeTarget );	
 800067a:	f8b4 c006 	ldrh.w	ip, [r4, #6]
	
	Ret = Ap_Radio_VolumeGet( &Volume );
	
	if( Ret == ERR_NONE )
	{
		VolumeTarget = Volume + Step;
 800067e:	182d      	adds	r5, r5, r0
 8000680:	b2a8      	uxth	r0, r5
		
		if( VolumeTarget > Ap_Radio_Log.Volume_Max ) VolumeTarget = Ap_Radio_Log.Volume_Max;
		
		Ret = Ap_Radio_VolumeSet( VolumeTarget );	
 8000682:	4560      	cmp	r0, ip
 8000684:	bf28      	it	cs
 8000686:	4660      	movcs	r0, ip
 8000688:	4a03      	ldr	r2, [pc, #12]	; (8000698 <Ap_Radio_VolumeSetUp+0x38>)
 800068a:	4790      	blx	r2
	}
	
	return Ret;
}
 800068c:	b003      	add	sp, #12
 800068e:	bd30      	pop	{r4, r5, pc}
 8000690:	200002b4 	.word	0x200002b4
 8000694:	080005d9 	.word	0x080005d9
 8000698:	080005a5 	.word	0x080005a5

0800069c <Ap_Radio_FM_ChannelSet>:
     			u16 Channel - Frequency
     RET     : 
     			u16 - Error Code     
---------------------------------------------------------------------------*/
u16 Ap_Radio_FM_ChannelSet( u16 Channel )
{
 800069c:	b510      	push	{r4, lr}
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Ap_Radio_ApiStart( void )
{
	Ap_Radio_Log.Err_Hw = 0;
 800069e:	4c0f      	ldr	r4, [pc, #60]	; (80006dc <Ap_Radio_FM_ChannelSet+0x40>)
 80006a0:	2100      	movs	r1, #0
 80006a2:	8922      	ldrh	r2, [r4, #8]


	if( Channel < Ap_Radio_Log.FM_Channel_Min ) Channel = Ap_Radio_Log.FM_Channel_Min;
	if( Channel > Ap_Radio_Log.FM_Channel_Max ) Channel = Ap_Radio_Log.FM_Channel_Max;

	Ret = Hw_Si47xx_FM_TUNE_FREQ( Channel );
 80006a4:	f8b4 c00a 	ldrh.w	ip, [r4, #10]
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Ap_Radio_ApiStart( void )
{
	Ap_Radio_Log.Err_Hw = 0;
 80006a8:	4290      	cmp	r0, r2
 80006aa:	bf38      	it	cc
 80006ac:	4610      	movcc	r0, r2


	if( Channel < Ap_Radio_Log.FM_Channel_Min ) Channel = Ap_Radio_Log.FM_Channel_Min;
	if( Channel > Ap_Radio_Log.FM_Channel_Max ) Channel = Ap_Radio_Log.FM_Channel_Max;

	Ret = Hw_Si47xx_FM_TUNE_FREQ( Channel );
 80006ae:	4560      	cmp	r0, ip
 80006b0:	bf28      	it	cs
 80006b2:	4660      	movcs	r0, ip
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Ap_Radio_ApiStart( void )
{
	Ap_Radio_Log.Err_Hw = 0;
 80006b4:	82a1      	strh	r1, [r4, #20]


	if( Channel < Ap_Radio_Log.FM_Channel_Min ) Channel = Ap_Radio_Log.FM_Channel_Min;
	if( Channel > Ap_Radio_Log.FM_Channel_Max ) Channel = Ap_Radio_Log.FM_Channel_Max;

	Ret = Hw_Si47xx_FM_TUNE_FREQ( Channel );
 80006b6:	4b0a      	ldr	r3, [pc, #40]	; (80006e0 <Ap_Radio_FM_ChannelSet+0x44>)
 80006b8:	4798      	blx	r3
		
	if( Ret == ERR_NONE )
 80006ba:	b110      	cbz	r0, 80006c2 <Ap_Radio_FM_ChannelSet+0x26>
	}
	
	
	if( Ret != ERR_NONE )
	{
		Ap_Radio_Log.Err_Hw = Ret;
 80006bc:	82a0      	strh	r0, [r4, #20]
		
		Ret = ERR_RADIO_HW_ERR;		
 80006be:	2002      	movs	r0, #2
	}
			
	return Ret;
}
 80006c0:	bd10      	pop	{r4, pc}

	Ret = Hw_Si47xx_FM_TUNE_FREQ( Channel );
		
	if( Ret == ERR_NONE )
	{
		Ret = Hw_Si47xx_WaitForSTC( 500 );		if( Ret != ERR_NONE ) return Ret;
 80006c2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006c6:	4b07      	ldr	r3, [pc, #28]	; (80006e4 <Ap_Radio_FM_ChannelSet+0x48>)
 80006c8:	4798      	blx	r3
 80006ca:	2800      	cmp	r0, #0
 80006cc:	d1f8      	bne.n	80006c0 <Ap_Radio_FM_ChannelSet+0x24>
		
		if( Ret == ERR_NONE )
		{
			Ret = Hw_Si47xx_FM_TUNE_STATUS(1);
 80006ce:	2001      	movs	r0, #1
 80006d0:	4905      	ldr	r1, [pc, #20]	; (80006e8 <Ap_Radio_FM_ChannelSet+0x4c>)
 80006d2:	4788      	blx	r1
			}
		}
	}
	
	
	if( Ret != ERR_NONE )
 80006d4:	2800      	cmp	r0, #0
 80006d6:	d0f3      	beq.n	80006c0 <Ap_Radio_FM_ChannelSet+0x24>
 80006d8:	e7f0      	b.n	80006bc <Ap_Radio_FM_ChannelSet+0x20>
 80006da:	bf00      	nop
 80006dc:	200002b4 	.word	0x200002b4
 80006e0:	08002965 	.word	0x08002965
 80006e4:	0800288d 	.word	0x0800288d
 80006e8:	08002835 	.word	0x08002835

080006ec <Ap_Radio_AM_ChannelSet>:
     			u16 Channel - Frequency
     RET     : 
     			u16 - Error Code     
---------------------------------------------------------------------------*/
u16 Ap_Radio_AM_ChannelSet( u16 Channel )
{
 80006ec:	b510      	push	{r4, lr}
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Ap_Radio_ApiStart( void )
{
	Ap_Radio_Log.Err_Hw = 0;
 80006ee:	4c0f      	ldr	r4, [pc, #60]	; (800072c <Ap_Radio_AM_ChannelSet+0x40>)
 80006f0:	2100      	movs	r1, #0
 80006f2:	89a2      	ldrh	r2, [r4, #12]


	if( Channel < Ap_Radio_Log.AM_Channel_Min ) Channel = Ap_Radio_Log.AM_Channel_Min;
	if( Channel > Ap_Radio_Log.AM_Channel_Max ) Channel = Ap_Radio_Log.AM_Channel_Max;

	Ret = Hw_Si47xx_AM_TUNE_FREQ( Channel );
 80006f4:	f8b4 c00e 	ldrh.w	ip, [r4, #14]
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Ap_Radio_ApiStart( void )
{
	Ap_Radio_Log.Err_Hw = 0;
 80006f8:	4290      	cmp	r0, r2
 80006fa:	bf38      	it	cc
 80006fc:	4610      	movcc	r0, r2


	if( Channel < Ap_Radio_Log.AM_Channel_Min ) Channel = Ap_Radio_Log.AM_Channel_Min;
	if( Channel > Ap_Radio_Log.AM_Channel_Max ) Channel = Ap_Radio_Log.AM_Channel_Max;

	Ret = Hw_Si47xx_AM_TUNE_FREQ( Channel );
 80006fe:	4560      	cmp	r0, ip
 8000700:	bf28      	it	cs
 8000702:	4660      	movcs	r0, ip
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Ap_Radio_ApiStart( void )
{
	Ap_Radio_Log.Err_Hw = 0;
 8000704:	82a1      	strh	r1, [r4, #20]


	if( Channel < Ap_Radio_Log.AM_Channel_Min ) Channel = Ap_Radio_Log.AM_Channel_Min;
	if( Channel > Ap_Radio_Log.AM_Channel_Max ) Channel = Ap_Radio_Log.AM_Channel_Max;

	Ret = Hw_Si47xx_AM_TUNE_FREQ( Channel );
 8000706:	4b0a      	ldr	r3, [pc, #40]	; (8000730 <Ap_Radio_AM_ChannelSet+0x44>)
 8000708:	4798      	blx	r3
		
	if( Ret == ERR_NONE )
 800070a:	b110      	cbz	r0, 8000712 <Ap_Radio_AM_ChannelSet+0x26>
	}
	
	
	if( Ret != ERR_NONE )
	{
		Ap_Radio_Log.Err_Hw = Ret;
 800070c:	82a0      	strh	r0, [r4, #20]
		
		Ret = ERR_RADIO_HW_ERR;		
 800070e:	2002      	movs	r0, #2
	}
			
	return Ret;
}
 8000710:	bd10      	pop	{r4, pc}

	Ret = Hw_Si47xx_AM_TUNE_FREQ( Channel );
		
	if( Ret == ERR_NONE )
	{
		Ret = Hw_Si47xx_WaitForSTC( 500 );		if( Ret != ERR_NONE ) return Ret;
 8000712:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000716:	4b07      	ldr	r3, [pc, #28]	; (8000734 <Ap_Radio_AM_ChannelSet+0x48>)
 8000718:	4798      	blx	r3
 800071a:	2800      	cmp	r0, #0
 800071c:	d1f8      	bne.n	8000710 <Ap_Radio_AM_ChannelSet+0x24>
		
		if( Ret == ERR_NONE )
		{
			Ret = Hw_Si47xx_AM_TUNE_STATUS(1);
 800071e:	2001      	movs	r0, #1
 8000720:	4905      	ldr	r1, [pc, #20]	; (8000738 <Ap_Radio_AM_ChannelSet+0x4c>)
 8000722:	4788      	blx	r1
			}
		}
	}
	
	
	if( Ret != ERR_NONE )
 8000724:	2800      	cmp	r0, #0
 8000726:	d0f3      	beq.n	8000710 <Ap_Radio_AM_ChannelSet+0x24>
 8000728:	e7f0      	b.n	800070c <Ap_Radio_AM_ChannelSet+0x20>
 800072a:	bf00      	nop
 800072c:	200002b4 	.word	0x200002b4
 8000730:	08002925 	.word	0x08002925
 8000734:	0800288d 	.word	0x0800288d
 8000738:	0800280d 	.word	0x0800280d

0800073c <Ap_Radio_ChannelSet>:
     			u16 Channel - Frequency
     RET     : 
     			u16 - Error Code     
---------------------------------------------------------------------------*/
u16 Ap_Radio_ChannelSet( u16 Channel )
{
 800073c:	b508      	push	{r3, lr}
	u16 Ret;
	
	if( Ap_Radio_Log.Band_Mode == MODE_RADIO_BAND_FM ) 
 800073e:	4b07      	ldr	r3, [pc, #28]	; (800075c <Ap_Radio_ChannelSet+0x20>)
 8000740:	881b      	ldrh	r3, [r3, #0]
 8000742:	2b01      	cmp	r3, #1
 8000744:	d006      	beq.n	8000754 <Ap_Radio_ChannelSet+0x18>
	{
		Ret = Ap_Radio_FM_ChannelSet( Channel );
	}
	else
	if( Ap_Radio_Log.Band_Mode == MODE_RADIO_BAND_AM )
 8000746:	2b02      	cmp	r3, #2
 8000748:	d001      	beq.n	800074e <Ap_Radio_ChannelSet+0x12>
	{
		Ret = Ap_Radio_AM_ChannelSet( Channel );
	}
	else
	{
		Ret = ERR_RADIO_BAND_ERR;
 800074a:	2003      	movs	r0, #3
	}
	
	return Ret;
}
 800074c:	bd08      	pop	{r3, pc}
		Ret = Ap_Radio_FM_ChannelSet( Channel );
	}
	else
	if( Ap_Radio_Log.Band_Mode == MODE_RADIO_BAND_AM )
	{
		Ret = Ap_Radio_AM_ChannelSet( Channel );
 800074e:	4a04      	ldr	r2, [pc, #16]	; (8000760 <Ap_Radio_ChannelSet+0x24>)
 8000750:	4790      	blx	r2
 8000752:	bd08      	pop	{r3, pc}
{
	u16 Ret;
	
	if( Ap_Radio_Log.Band_Mode == MODE_RADIO_BAND_FM ) 
	{
		Ret = Ap_Radio_FM_ChannelSet( Channel );
 8000754:	4903      	ldr	r1, [pc, #12]	; (8000764 <Ap_Radio_ChannelSet+0x28>)
 8000756:	4788      	blx	r1
 8000758:	bd08      	pop	{r3, pc}
 800075a:	bf00      	nop
 800075c:	200002b4 	.word	0x200002b4
 8000760:	080006ed 	.word	0x080006ed
 8000764:	0800069d 	.word	0x0800069d

08000768 <Ap_Radio_FM_ChannelGet>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Ap_Radio_ApiStart( void )
{
	Ap_Radio_Log.Err_Hw = 0;
 8000768:	490a      	ldr	r1, [pc, #40]	; (8000794 <Ap_Radio_FM_ChannelGet+0x2c>)
 800076a:	2200      	movs	r2, #0
     			u16 *pChannel - Pointer of Frequency
     RET     : 
     			u16 - Error Code     
---------------------------------------------------------------------------*/
u16 Ap_Radio_FM_ChannelGet( u16 *pChannel )
{
 800076c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800076e:	4605      	mov	r5, r0
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Ap_Radio_ApiStart( void )
{
	Ap_Radio_Log.Err_Hw = 0;
 8000770:	828a      	strh	r2, [r1, #20]
{
	u16 Ret;
	
	Ap_Radio_ApiStart();
	
	Ret = Hw_Si47xx_FM_TUNE_STATUS(1);
 8000772:	2001      	movs	r0, #1
 8000774:	4b08      	ldr	r3, [pc, #32]	; (8000798 <Ap_Radio_FM_ChannelGet+0x30>)
 8000776:	4798      	blx	r3
			
	if( Ret == ERR_NONE )
 8000778:	4604      	mov	r4, r0
 800077a:	b940      	cbnz	r0, 800078e <Ap_Radio_FM_ChannelGet+0x26>
	{
		*pChannel = (Hw_Si47xx_ReadResp(2)<<8) | (Hw_Si47xx_ReadResp(3)<<0);	
 800077c:	4e07      	ldr	r6, [pc, #28]	; (800079c <Ap_Radio_FM_ChannelGet+0x34>)
 800077e:	2002      	movs	r0, #2
 8000780:	47b0      	blx	r6
 8000782:	4607      	mov	r7, r0
 8000784:	2003      	movs	r0, #3
 8000786:	47b0      	blx	r6
 8000788:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
 800078c:	8028      	strh	r0, [r5, #0]
	}
	
	return Ret;				
}
 800078e:	4620      	mov	r0, r4
 8000790:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000792:	bf00      	nop
 8000794:	200002b4 	.word	0x200002b4
 8000798:	08002835 	.word	0x08002835
 800079c:	080026b9 	.word	0x080026b9

080007a0 <Ap_Radio_AM_ChannelGet>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Ap_Radio_ApiStart( void )
{
	Ap_Radio_Log.Err_Hw = 0;
 80007a0:	490a      	ldr	r1, [pc, #40]	; (80007cc <Ap_Radio_AM_ChannelGet+0x2c>)
 80007a2:	2200      	movs	r2, #0
     			u16 *pChannel - Pointer of Frequency
     RET     : 
     			u16 - Error Code     
---------------------------------------------------------------------------*/
u16 Ap_Radio_AM_ChannelGet( u16 *pChannel )
{
 80007a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007a6:	4605      	mov	r5, r0
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Ap_Radio_ApiStart( void )
{
	Ap_Radio_Log.Err_Hw = 0;
 80007a8:	828a      	strh	r2, [r1, #20]
{
	u16 Ret;
	
	Ap_Radio_ApiStart();
	
	Ret = Hw_Si47xx_AM_TUNE_STATUS(1);
 80007aa:	2001      	movs	r0, #1
 80007ac:	4b08      	ldr	r3, [pc, #32]	; (80007d0 <Ap_Radio_AM_ChannelGet+0x30>)
 80007ae:	4798      	blx	r3
			
	if( Ret == ERR_NONE )
 80007b0:	4604      	mov	r4, r0
 80007b2:	b940      	cbnz	r0, 80007c6 <Ap_Radio_AM_ChannelGet+0x26>
	{
		*pChannel = (Hw_Si47xx_ReadResp(2)<<8) | (Hw_Si47xx_ReadResp(3)<<0);	
 80007b4:	4e07      	ldr	r6, [pc, #28]	; (80007d4 <Ap_Radio_AM_ChannelGet+0x34>)
 80007b6:	2002      	movs	r0, #2
 80007b8:	47b0      	blx	r6
 80007ba:	4607      	mov	r7, r0
 80007bc:	2003      	movs	r0, #3
 80007be:	47b0      	blx	r6
 80007c0:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
 80007c4:	8028      	strh	r0, [r5, #0]
	}
	
	return Ret;				
}
 80007c6:	4620      	mov	r0, r4
 80007c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80007ca:	bf00      	nop
 80007cc:	200002b4 	.word	0x200002b4
 80007d0:	0800280d 	.word	0x0800280d
 80007d4:	080026b9 	.word	0x080026b9

080007d8 <Ap_Radio_ChannelGet>:
     			u16 *pChannel - Pointer of Frequency
     RET     : 
     			u16 - Error Code     
---------------------------------------------------------------------------*/
u16 Ap_Radio_ChannelGet( u16 *pChannel )
{
 80007d8:	b510      	push	{r4, lr}
	u16 Ret;
	u16 Channel;
	
	if( Ap_Radio_Log.Band_Mode == MODE_RADIO_BAND_FM ) 
 80007da:	4b0e      	ldr	r3, [pc, #56]	; (8000814 <Ap_Radio_ChannelGet+0x3c>)
     			u16 *pChannel - Pointer of Frequency
     RET     : 
     			u16 - Error Code     
---------------------------------------------------------------------------*/
u16 Ap_Radio_ChannelGet( u16 *pChannel )
{
 80007dc:	b082      	sub	sp, #8
	u16 Ret;
	u16 Channel;
	
	if( Ap_Radio_Log.Band_Mode == MODE_RADIO_BAND_FM ) 
 80007de:	881b      	ldrh	r3, [r3, #0]
     			u16 *pChannel - Pointer of Frequency
     RET     : 
     			u16 - Error Code     
---------------------------------------------------------------------------*/
u16 Ap_Radio_ChannelGet( u16 *pChannel )
{
 80007e0:	4604      	mov	r4, r0
	u16 Ret;
	u16 Channel;
	
	if( Ap_Radio_Log.Band_Mode == MODE_RADIO_BAND_FM ) 
 80007e2:	2b01      	cmp	r3, #1
 80007e4:	d00f      	beq.n	8000806 <Ap_Radio_ChannelGet+0x2e>
		Ret = Ap_Radio_FM_ChannelGet( &Channel );

		if( Ret == ERR_NONE ) *pChannel = Channel;
	}
	else
	if( Ap_Radio_Log.Band_Mode == MODE_RADIO_BAND_AM )
 80007e6:	2b02      	cmp	r3, #2
 80007e8:	d002      	beq.n	80007f0 <Ap_Radio_ChannelGet+0x18>

		if( Ret == ERR_NONE ) *pChannel = Channel;
	}
	else
	{
		Ret = ERR_RADIO_BAND_ERR;
 80007ea:	2003      	movs	r0, #3
	}
	
	return Ret;	
}
 80007ec:	b002      	add	sp, #8
 80007ee:	bd10      	pop	{r4, pc}
		if( Ret == ERR_NONE ) *pChannel = Channel;
	}
	else
	if( Ap_Radio_Log.Band_Mode == MODE_RADIO_BAND_AM )
	{
		Ret = Ap_Radio_AM_ChannelGet( &Channel );
 80007f0:	f10d 0006 	add.w	r0, sp, #6
 80007f4:	4a08      	ldr	r2, [pc, #32]	; (8000818 <Ap_Radio_ChannelGet+0x40>)
 80007f6:	4790      	blx	r2

		if( Ret == ERR_NONE ) *pChannel = Channel;
 80007f8:	2800      	cmp	r0, #0
 80007fa:	d1f7      	bne.n	80007ec <Ap_Radio_ChannelGet+0x14>
 80007fc:	f8bd c006 	ldrh.w	ip, [sp, #6]
 8000800:	f8a4 c000 	strh.w	ip, [r4]
 8000804:	e7f2      	b.n	80007ec <Ap_Radio_ChannelGet+0x14>
	u16 Ret;
	u16 Channel;
	
	if( Ap_Radio_Log.Band_Mode == MODE_RADIO_BAND_FM ) 
	{
		Ret = Ap_Radio_FM_ChannelGet( &Channel );
 8000806:	f10d 0006 	add.w	r0, sp, #6
 800080a:	4904      	ldr	r1, [pc, #16]	; (800081c <Ap_Radio_ChannelGet+0x44>)
 800080c:	4788      	blx	r1

		if( Ret == ERR_NONE ) *pChannel = Channel;
 800080e:	2800      	cmp	r0, #0
 8000810:	d1ec      	bne.n	80007ec <Ap_Radio_ChannelGet+0x14>
 8000812:	e7f3      	b.n	80007fc <Ap_Radio_ChannelGet+0x24>
 8000814:	200002b4 	.word	0x200002b4
 8000818:	080007a1 	.word	0x080007a1
 800081c:	08000769 	.word	0x08000769

08000820 <Ap_Radio_ChannelSetFirst>:
---------------------------------------------------------------------------*/
u16 Ap_Radio_ChannelSetFirst( void )
{
	u16 Ret;
	
	if( Ap_Radio_Log.Band_Mode == MODE_RADIO_BAND_FM ) 
 8000820:	4a08      	ldr	r2, [pc, #32]	; (8000844 <Ap_Radio_ChannelSetFirst+0x24>)
     ARG     : void
     RET     : 
     			u16 - Error Code     
---------------------------------------------------------------------------*/
u16 Ap_Radio_ChannelSetFirst( void )
{
 8000822:	b508      	push	{r3, lr}
	u16 Ret;
	
	if( Ap_Radio_Log.Band_Mode == MODE_RADIO_BAND_FM ) 
 8000824:	8813      	ldrh	r3, [r2, #0]
 8000826:	2b01      	cmp	r3, #1
 8000828:	d007      	beq.n	800083a <Ap_Radio_ChannelSetFirst+0x1a>
	{
		Ret = Ap_Radio_FM_ChannelSet( Ap_Radio_Log.FM_Channel_Min );
	}
	else
	if( Ap_Radio_Log.Band_Mode == MODE_RADIO_BAND_AM )
 800082a:	2b02      	cmp	r3, #2
 800082c:	d001      	beq.n	8000832 <Ap_Radio_ChannelSetFirst+0x12>
	{
		Ret = Ap_Radio_AM_ChannelSet( Ap_Radio_Log.AM_Channel_Min );
	}
	else
	{
		Ret = ERR_RADIO_BAND_ERR;
 800082e:	2003      	movs	r0, #3
	}	
	
	return Ret;
}
 8000830:	bd08      	pop	{r3, pc}
		Ret = Ap_Radio_FM_ChannelSet( Ap_Radio_Log.FM_Channel_Min );
	}
	else
	if( Ap_Radio_Log.Band_Mode == MODE_RADIO_BAND_AM )
	{
		Ret = Ap_Radio_AM_ChannelSet( Ap_Radio_Log.AM_Channel_Min );
 8000832:	8990      	ldrh	r0, [r2, #12]
 8000834:	4904      	ldr	r1, [pc, #16]	; (8000848 <Ap_Radio_ChannelSetFirst+0x28>)
 8000836:	4788      	blx	r1
 8000838:	bd08      	pop	{r3, pc}
{
	u16 Ret;
	
	if( Ap_Radio_Log.Band_Mode == MODE_RADIO_BAND_FM ) 
	{
		Ret = Ap_Radio_FM_ChannelSet( Ap_Radio_Log.FM_Channel_Min );
 800083a:	8910      	ldrh	r0, [r2, #8]
 800083c:	4b03      	ldr	r3, [pc, #12]	; (800084c <Ap_Radio_ChannelSetFirst+0x2c>)
 800083e:	4798      	blx	r3
 8000840:	bd08      	pop	{r3, pc}
 8000842:	bf00      	nop
 8000844:	200002b4 	.word	0x200002b4
 8000848:	080006ed 	.word	0x080006ed
 800084c:	0800069d 	.word	0x0800069d

08000850 <Ap_Radio_Init>:
     ARG     : void
     RET     : 
     			u16 - Error Code     
---------------------------------------------------------------------------*/
u16 Ap_Radio_Init(void)
{
 8000850:	b508      	push	{r3, lr}
	u16 Ret = ERR_NONE;
	
		
	Hw_Si47xx_Init();
 8000852:	480f      	ldr	r0, [pc, #60]	; (8000890 <Ap_Radio_Init+0x40>)
 8000854:	4780      	blx	r0
	
	
	//-- Set default values
	//
	Ap_Radio_Log.FM_Channel_Min = 7600;
 8000856:	480f      	ldr	r0, [pc, #60]	; (8000894 <Ap_Radio_Init+0x44>)
 8000858:	f641 53b0 	movw	r3, #7600	; 0x1db0
	Ap_Radio_Log.FM_Channel_Max = 10790;
 800085c:	f642 2126 	movw	r1, #10790	; 0x2a26
	Ap_Radio_Log.AM_Channel_Min = 520;
 8000860:	f44f 7202 	mov.w	r2, #520	; 0x208
	Hw_Si47xx_Init();
	
	
	//-- Set default values
	//
	Ap_Radio_Log.FM_Channel_Min = 7600;
 8000864:	8103      	strh	r3, [r0, #8]
	Ap_Radio_Log.FM_Channel_Max = 10790;
 8000866:	8141      	strh	r1, [r0, #10]
	Ap_Radio_Log.AM_Channel_Min = 520;
	Ap_Radio_Log.AM_Channel_Max = 1710;
	
	Ap_Radio_Log.Volume_Min = 0;
 8000868:	2300      	movs	r3, #0
	
	//-- Set default values
	//
	Ap_Radio_Log.FM_Channel_Min = 7600;
	Ap_Radio_Log.FM_Channel_Max = 10790;
	Ap_Radio_Log.AM_Channel_Min = 520;
 800086a:	8182      	strh	r2, [r0, #12]
	Ap_Radio_Log.AM_Channel_Max = 1710;
 800086c:	f240 6cae 	movw	ip, #1710	; 0x6ae
	
	Ap_Radio_Log.Volume_Min = 0;
	Ap_Radio_Log.Volume_Max = 63;	
	
	Ap_Radio_Log.Band_Mode = MODE_RADIO_BAND_NONE;
 8000870:	2200      	movs	r2, #0
	Ap_Radio_Log.FM_Channel_Max = 10790;
	Ap_Radio_Log.AM_Channel_Min = 520;
	Ap_Radio_Log.AM_Channel_Max = 1710;
	
	Ap_Radio_Log.Volume_Min = 0;
	Ap_Radio_Log.Volume_Max = 63;	
 8000872:	213f      	movs	r1, #63	; 0x3f
	Ap_Radio_Log.FM_Channel_Min = 7600;
	Ap_Radio_Log.FM_Channel_Max = 10790;
	Ap_Radio_Log.AM_Channel_Min = 520;
	Ap_Radio_Log.AM_Channel_Max = 1710;
	
	Ap_Radio_Log.Volume_Min = 0;
 8000874:	8083      	strh	r3, [r0, #4]
	//-- Set default values
	//
	Ap_Radio_Log.FM_Channel_Min = 7600;
	Ap_Radio_Log.FM_Channel_Max = 10790;
	Ap_Radio_Log.AM_Channel_Min = 520;
	Ap_Radio_Log.AM_Channel_Max = 1710;
 8000876:	f8a0 c00e 	strh.w	ip, [r0, #14]
	
	Ap_Radio_Log.Volume_Min = 0;
	Ap_Radio_Log.Volume_Max = 63;	
 800087a:	80c1      	strh	r1, [r0, #6]
	
	Ap_Radio_Log.Band_Mode = MODE_RADIO_BAND_NONE;
 800087c:	8002      	strh	r2, [r0, #0]
	Ap_Radio_Log.Mute_Mode = 0;
 800087e:	8042      	strh	r2, [r0, #2]
	
	Ap_Radio_Log.Err_Hw = 0;
 8000880:	8282      	strh	r2, [r0, #20]
	
	
	Ret = Ap_Radio_BandSetFM();
 8000882:	4b05      	ldr	r3, [pc, #20]	; (8000898 <Ap_Radio_Init+0x48>)
 8000884:	4798      	blx	r3
	
	if( Ret == ERR_NONE )
 8000886:	b908      	cbnz	r0, 800088c <Ap_Radio_Init+0x3c>
	{
		Ret = Ap_Radio_ChannelSetFirst();
 8000888:	4a04      	ldr	r2, [pc, #16]	; (800089c <Ap_Radio_Init+0x4c>)
 800088a:	4790      	blx	r2
	}
	
	return Ret;
}
 800088c:	bd08      	pop	{r3, pc}
 800088e:	bf00      	nop
 8000890:	08002689 	.word	0x08002689
 8000894:	200002b4 	.word	0x200002b4
 8000898:	0800054d 	.word	0x0800054d
 800089c:	08000821 	.word	0x08000821

080008a0 <Ap_Radio_ChannelSetNext>:
     ARG     : void
     RET     : 
     			u16 - Error Code     
---------------------------------------------------------------------------*/
u16 Ap_Radio_ChannelSetNext ( u16 Step )
{
 80008a0:	b510      	push	{r4, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	4604      	mov	r4, r0
	u16 Ret;
	u16 Channel;
	
	Ret = Ap_Radio_ChannelGet( &Channel );
 80008a6:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <Ap_Radio_ChannelSetNext+0x20>)
 80008a8:	f10d 0006 	add.w	r0, sp, #6
 80008ac:	4798      	blx	r3
	
	if( Ret == ERR_NONE )
 80008ae:	b928      	cbnz	r0, 80008bc <Ap_Radio_ChannelSetNext+0x1c>
	{
		Ret = Ap_Radio_ChannelSet( Channel + Step );
 80008b0:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 80008b4:	4903      	ldr	r1, [pc, #12]	; (80008c4 <Ap_Radio_ChannelSetNext+0x24>)
 80008b6:	1824      	adds	r4, r4, r0
 80008b8:	b2a0      	uxth	r0, r4
 80008ba:	4788      	blx	r1
	}
	
	return Ret;		
}
 80008bc:	b002      	add	sp, #8
 80008be:	bd10      	pop	{r4, pc}
 80008c0:	080007d9 	.word	0x080007d9
 80008c4:	0800073d 	.word	0x0800073d

080008c8 <Ap_Radio_ChannelSetPrev>:
     ARG     : void
     RET     : 
     			u16 - Error Code     
---------------------------------------------------------------------------*/
u16 Ap_Radio_ChannelSetPrev( u16 Step )
{
 80008c8:	b510      	push	{r4, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	4604      	mov	r4, r0
	u16 Ret;
	u16 Channel;
	
	Ret = Ap_Radio_ChannelGet( &Channel );
 80008ce:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <Ap_Radio_ChannelSetPrev+0x20>)
 80008d0:	f10d 0006 	add.w	r0, sp, #6
 80008d4:	4798      	blx	r3
	
	if( Ret == ERR_NONE )
 80008d6:	b928      	cbnz	r0, 80008e4 <Ap_Radio_ChannelSetPrev+0x1c>
	{
		Ret = Ap_Radio_ChannelSet( Channel - Step );
 80008d8:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 80008dc:	4903      	ldr	r1, [pc, #12]	; (80008ec <Ap_Radio_ChannelSetPrev+0x24>)
 80008de:	1b04      	subs	r4, r0, r4
 80008e0:	b2a0      	uxth	r0, r4
 80008e2:	4788      	blx	r1
	}
	
	return Ret;			
}
 80008e4:	b002      	add	sp, #8
 80008e6:	bd10      	pop	{r4, pc}
 80008e8:	080007d9 	.word	0x080007d9
 80008ec:	0800073d 	.word	0x0800073d

080008f0 <Ap_Radio_SeekToFirst>:
     ARG     : void
     RET     : 
     			u16 - Error Code     
---------------------------------------------------------------------------*/
u16 Ap_Radio_SeekToFirst(  u8 *pFreqValid )
{
 80008f0:	b570      	push	{r4, r5, r6, lr}
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Ap_Radio_ApiStart( void )
{
	Ap_Radio_Log.Err_Hw = 0;
 80008f2:	4c1e      	ldr	r4, [pc, #120]	; (800096c <Ap_Radio_SeekToFirst+0x7c>)
 80008f4:	2200      	movs	r2, #0
{
	u16 Ret;
	
	Ap_Radio_ApiStart();

	if( Ap_Radio_Log.Band_Mode == MODE_RADIO_BAND_NONE ) return ERR_RADIO_BAND_ERR; 
 80008f6:	8823      	ldrh	r3, [r4, #0]
     ARG     : void
     RET     : 
     			u16 - Error Code     
---------------------------------------------------------------------------*/
u16 Ap_Radio_SeekToFirst(  u8 *pFreqValid )
{
 80008f8:	4605      	mov	r5, r0
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Ap_Radio_ApiStart( void )
{
	Ap_Radio_Log.Err_Hw = 0;
 80008fa:	82a2      	strh	r2, [r4, #20]
{
	u16 Ret;
	
	Ap_Radio_ApiStart();

	if( Ap_Radio_Log.Band_Mode == MODE_RADIO_BAND_NONE ) return ERR_RADIO_BAND_ERR; 
 80008fc:	b15b      	cbz	r3, 8000916 <Ap_Radio_SeekToFirst+0x26>


	if( Ap_Radio_Log.Band_Mode == MODE_RADIO_BAND_FM )
 80008fe:	2b01      	cmp	r3, #1
 8000900:	d00c      	beq.n	800091c <Ap_Radio_SeekToFirst+0x2c>
	{
    	Ret = Hw_Si47xx_FM_SEEK_START(0, 0);
    }
    else
    {
    	Ret = Hw_Si47xx_AM_SEEK_START(0, 0);
 8000902:	2000      	movs	r0, #0
 8000904:	4e1a      	ldr	r6, [pc, #104]	; (8000970 <Ap_Radio_SeekToFirst+0x80>)
 8000906:	4601      	mov	r1, r0
 8000908:	47b0      	blx	r6
 800090a:	4606      	mov	r6, r0
    }
    
    if( Ret == ERR_NONE )
 800090c:	b16e      	cbz	r6, 800092a <Ap_Radio_SeekToFirst+0x3a>
	}
	
	
	if( Ret != ERR_NONE )
	{
		Ap_Radio_Log.Err_Hw = Ret;
 800090e:	82a6      	strh	r6, [r4, #20]
		
		Ret = ERR_RADIO_HW_ERR;
 8000910:	2602      	movs	r6, #2
	}
	
	return Ret;	
}
 8000912:	4630      	mov	r0, r6
 8000914:	bd70      	pop	{r4, r5, r6, pc}
{
	u16 Ret;
	
	Ap_Radio_ApiStart();

	if( Ap_Radio_Log.Band_Mode == MODE_RADIO_BAND_NONE ) return ERR_RADIO_BAND_ERR; 
 8000916:	2603      	movs	r6, #3
		
		Ret = ERR_RADIO_HW_ERR;
	}
	
	return Ret;	
}
 8000918:	4630      	mov	r0, r6
 800091a:	bd70      	pop	{r4, r5, r6, pc}
	if( Ap_Radio_Log.Band_Mode == MODE_RADIO_BAND_NONE ) return ERR_RADIO_BAND_ERR; 


	if( Ap_Radio_Log.Band_Mode == MODE_RADIO_BAND_FM )
	{
    	Ret = Hw_Si47xx_FM_SEEK_START(0, 0);
 800091c:	2000      	movs	r0, #0
 800091e:	4601      	mov	r1, r0
 8000920:	4b14      	ldr	r3, [pc, #80]	; (8000974 <Ap_Radio_SeekToFirst+0x84>)
 8000922:	4798      	blx	r3
 8000924:	4606      	mov	r6, r0
    else
    {
    	Ret = Hw_Si47xx_AM_SEEK_START(0, 0);
    }
    
    if( Ret == ERR_NONE )
 8000926:	2e00      	cmp	r6, #0
 8000928:	d1f1      	bne.n	800090e <Ap_Radio_SeekToFirst+0x1e>
    {
    	Ret = Hw_Si47xx_WaitForSTC( 20000 );		
 800092a:	f644 6020 	movw	r0, #20000	; 0x4e20
 800092e:	4912      	ldr	r1, [pc, #72]	; (8000978 <Ap_Radio_SeekToFirst+0x88>)
 8000930:	4788      	blx	r1
    	
    	if( Ret == ERR_NONE ) 
 8000932:	4606      	mov	r6, r0
 8000934:	2800      	cmp	r0, #0
 8000936:	d1ea      	bne.n	800090e <Ap_Radio_SeekToFirst+0x1e>
    	{
    		if( Ap_Radio_Log.Band_Mode == MODE_RADIO_BAND_FM )
 8000938:	8820      	ldrh	r0, [r4, #0]
 800093a:	2801      	cmp	r0, #1
 800093c:	d010      	beq.n	8000960 <Ap_Radio_SeekToFirst+0x70>
    		{
    			Ret = Hw_Si47xx_FM_TUNE_STATUS(1);   
    		}
    		else
    		{
    			Ret = Hw_Si47xx_AM_TUNE_STATUS(1);   
 800093e:	2001      	movs	r0, #1
 8000940:	4b0e      	ldr	r3, [pc, #56]	; (800097c <Ap_Radio_SeekToFirst+0x8c>)
 8000942:	4798      	blx	r3
 8000944:	4606      	mov	r6, r0
    		}
    		
    		if( Ret == ERR_NONE && Hw_Si47xx_ReadResp(1) & (1<<0) )
 8000946:	b116      	cbz	r6, 800094e <Ap_Radio_SeekToFirst+0x5e>
    		{
    			*pFreqValid = 1;
    		}
    		else
    		{
    			*pFreqValid = 0;
 8000948:	2200      	movs	r2, #0
 800094a:	702a      	strb	r2, [r5, #0]
 800094c:	e7df      	b.n	800090e <Ap_Radio_SeekToFirst+0x1e>
    		else
    		{
    			Ret = Hw_Si47xx_AM_TUNE_STATUS(1);   
    		}
    		
    		if( Ret == ERR_NONE && Hw_Si47xx_ReadResp(1) & (1<<0) )
 800094e:	2001      	movs	r0, #1
 8000950:	490b      	ldr	r1, [pc, #44]	; (8000980 <Ap_Radio_SeekToFirst+0x90>)
 8000952:	4788      	blx	r1
 8000954:	f010 0f01 	tst.w	r0, #1
 8000958:	d006      	beq.n	8000968 <Ap_Radio_SeekToFirst+0x78>
    		{
    			*pFreqValid = 1;
 800095a:	2001      	movs	r0, #1
 800095c:	7028      	strb	r0, [r5, #0]
 800095e:	e7d8      	b.n	8000912 <Ap_Radio_SeekToFirst+0x22>
    	
    	if( Ret == ERR_NONE ) 
    	{
    		if( Ap_Radio_Log.Band_Mode == MODE_RADIO_BAND_FM )
    		{
    			Ret = Hw_Si47xx_FM_TUNE_STATUS(1);   
 8000960:	4a08      	ldr	r2, [pc, #32]	; (8000984 <Ap_Radio_SeekToFirst+0x94>)
 8000962:	4790      	blx	r2
 8000964:	4606      	mov	r6, r0
 8000966:	e7ee      	b.n	8000946 <Ap_Radio_SeekToFirst+0x56>
    		{
    			*pFreqValid = 1;
    		}
    		else
    		{
    			*pFreqValid = 0;
 8000968:	702e      	strb	r6, [r5, #0]
 800096a:	e7d2      	b.n	8000912 <Ap_Radio_SeekToFirst+0x22>
 800096c:	200002b4 	.word	0x200002b4
 8000970:	080028c5 	.word	0x080028c5
 8000974:	080028f5 	.word	0x080028f5
 8000978:	0800288d 	.word	0x0800288d
 800097c:	0800280d 	.word	0x0800280d
 8000980:	080026b9 	.word	0x080026b9
 8000984:	08002835 	.word	0x08002835

08000988 <Ap_Radio_SeekToLast>:
     ARG     : void
     RET     : 
     			u16 - Error Code     
---------------------------------------------------------------------------*/
u16 Ap_Radio_SeekToLast(  u8 *pFreqValid )
{
 8000988:	b570      	push	{r4, r5, r6, lr}
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Ap_Radio_ApiStart( void )
{
	Ap_Radio_Log.Err_Hw = 0;
 800098a:	4c1e      	ldr	r4, [pc, #120]	; (8000a04 <Ap_Radio_SeekToLast+0x7c>)
     ARG     : void
     RET     : 
     			u16 - Error Code     
---------------------------------------------------------------------------*/
u16 Ap_Radio_SeekToLast(  u8 *pFreqValid )
{
 800098c:	4605      	mov	r5, r0
	u16 Ret;
	
	Ap_Radio_ApiStart();

	if( Ap_Radio_Log.Band_Mode == MODE_RADIO_BAND_NONE ) return ERR_RADIO_BAND_ERR; 
 800098e:	8820      	ldrh	r0, [r4, #0]
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Ap_Radio_ApiStart( void )
{
	Ap_Radio_Log.Err_Hw = 0;
 8000990:	2300      	movs	r3, #0
 8000992:	82a3      	strh	r3, [r4, #20]
{
	u16 Ret;
	
	Ap_Radio_ApiStart();

	if( Ap_Radio_Log.Band_Mode == MODE_RADIO_BAND_NONE ) return ERR_RADIO_BAND_ERR; 
 8000994:	b158      	cbz	r0, 80009ae <Ap_Radio_SeekToLast+0x26>

	
	if( Ap_Radio_Log.Band_Mode == MODE_RADIO_BAND_FM )
 8000996:	2801      	cmp	r0, #1
 8000998:	d00c      	beq.n	80009b4 <Ap_Radio_SeekToLast+0x2c>
	{
    	Ret = Hw_Si47xx_FM_SEEK_START(1, 0);
    }
    else
    {
    	Ret = Hw_Si47xx_AM_SEEK_START(1, 0);
 800099a:	4e1b      	ldr	r6, [pc, #108]	; (8000a08 <Ap_Radio_SeekToLast+0x80>)
 800099c:	2001      	movs	r0, #1
 800099e:	2100      	movs	r1, #0
 80009a0:	47b0      	blx	r6
 80009a2:	4606      	mov	r6, r0
    }
    
    if( Ret == ERR_NONE )
 80009a4:	b166      	cbz	r6, 80009c0 <Ap_Radio_SeekToLast+0x38>
	}
	
	
	if( Ret != ERR_NONE )
	{
		Ap_Radio_Log.Err_Hw = Ret;
 80009a6:	82a6      	strh	r6, [r4, #20]
		
		Ret = ERR_RADIO_HW_ERR;
 80009a8:	2602      	movs	r6, #2
	}
	
	return Ret;		
}
 80009aa:	4630      	mov	r0, r6
 80009ac:	bd70      	pop	{r4, r5, r6, pc}
{
	u16 Ret;
	
	Ap_Radio_ApiStart();

	if( Ap_Radio_Log.Band_Mode == MODE_RADIO_BAND_NONE ) return ERR_RADIO_BAND_ERR; 
 80009ae:	2603      	movs	r6, #3
		
		Ret = ERR_RADIO_HW_ERR;
	}
	
	return Ret;		
}
 80009b0:	4630      	mov	r0, r6
 80009b2:	bd70      	pop	{r4, r5, r6, pc}
	if( Ap_Radio_Log.Band_Mode == MODE_RADIO_BAND_NONE ) return ERR_RADIO_BAND_ERR; 

	
	if( Ap_Radio_Log.Band_Mode == MODE_RADIO_BAND_FM )
	{
    	Ret = Hw_Si47xx_FM_SEEK_START(1, 0);
 80009b4:	2100      	movs	r1, #0
 80009b6:	4a15      	ldr	r2, [pc, #84]	; (8000a0c <Ap_Radio_SeekToLast+0x84>)
 80009b8:	4790      	blx	r2
 80009ba:	4606      	mov	r6, r0
    else
    {
    	Ret = Hw_Si47xx_AM_SEEK_START(1, 0);
    }
    
    if( Ret == ERR_NONE )
 80009bc:	2e00      	cmp	r6, #0
 80009be:	d1f2      	bne.n	80009a6 <Ap_Radio_SeekToLast+0x1e>
    {
    	Ret = Hw_Si47xx_WaitForSTC( 20000 );		
 80009c0:	f644 6020 	movw	r0, #20000	; 0x4e20
 80009c4:	4912      	ldr	r1, [pc, #72]	; (8000a10 <Ap_Radio_SeekToLast+0x88>)
 80009c6:	4788      	blx	r1
    	
    	if( Ret == ERR_NONE ) 
 80009c8:	4606      	mov	r6, r0
 80009ca:	2800      	cmp	r0, #0
 80009cc:	d1eb      	bne.n	80009a6 <Ap_Radio_SeekToLast+0x1e>
    	{
    		if( Ap_Radio_Log.Band_Mode == MODE_RADIO_BAND_FM )
 80009ce:	8820      	ldrh	r0, [r4, #0]
 80009d0:	2801      	cmp	r0, #1
 80009d2:	d010      	beq.n	80009f6 <Ap_Radio_SeekToLast+0x6e>
    		{
    			Ret = Hw_Si47xx_FM_TUNE_STATUS(1);   
    		}
    		else
    		{
    			Ret = Hw_Si47xx_AM_TUNE_STATUS(1);   
 80009d4:	2001      	movs	r0, #1
 80009d6:	4a0f      	ldr	r2, [pc, #60]	; (8000a14 <Ap_Radio_SeekToLast+0x8c>)
 80009d8:	4790      	blx	r2
 80009da:	4606      	mov	r6, r0
    		}
    		
    		if( Ret == ERR_NONE && Hw_Si47xx_ReadResp(1) & (1<<0) )
 80009dc:	b116      	cbz	r6, 80009e4 <Ap_Radio_SeekToLast+0x5c>
    		{
    			*pFreqValid = 1;
    		}
    		else
    		{
    			*pFreqValid = 0;
 80009de:	2300      	movs	r3, #0
 80009e0:	702b      	strb	r3, [r5, #0]
 80009e2:	e7e0      	b.n	80009a6 <Ap_Radio_SeekToLast+0x1e>
    		else
    		{
    			Ret = Hw_Si47xx_AM_TUNE_STATUS(1);   
    		}
    		
    		if( Ret == ERR_NONE && Hw_Si47xx_ReadResp(1) & (1<<0) )
 80009e4:	2001      	movs	r0, #1
 80009e6:	490c      	ldr	r1, [pc, #48]	; (8000a18 <Ap_Radio_SeekToLast+0x90>)
 80009e8:	4788      	blx	r1
 80009ea:	f010 0f01 	tst.w	r0, #1
 80009ee:	d006      	beq.n	80009fe <Ap_Radio_SeekToLast+0x76>
    		{
    			*pFreqValid = 1;
 80009f0:	2001      	movs	r0, #1
 80009f2:	7028      	strb	r0, [r5, #0]
 80009f4:	e7d9      	b.n	80009aa <Ap_Radio_SeekToLast+0x22>
    	
    	if( Ret == ERR_NONE ) 
    	{
    		if( Ap_Radio_Log.Band_Mode == MODE_RADIO_BAND_FM )
    		{
    			Ret = Hw_Si47xx_FM_TUNE_STATUS(1);   
 80009f6:	4b09      	ldr	r3, [pc, #36]	; (8000a1c <Ap_Radio_SeekToLast+0x94>)
 80009f8:	4798      	blx	r3
 80009fa:	4606      	mov	r6, r0
 80009fc:	e7ee      	b.n	80009dc <Ap_Radio_SeekToLast+0x54>
    		{
    			*pFreqValid = 1;
    		}
    		else
    		{
    			*pFreqValid = 0;
 80009fe:	702e      	strb	r6, [r5, #0]
 8000a00:	e7d3      	b.n	80009aa <Ap_Radio_SeekToLast+0x22>
 8000a02:	bf00      	nop
 8000a04:	200002b4 	.word	0x200002b4
 8000a08:	080028c5 	.word	0x080028c5
 8000a0c:	080028f5 	.word	0x080028f5
 8000a10:	0800288d 	.word	0x0800288d
 8000a14:	0800280d 	.word	0x0800280d
 8000a18:	080026b9 	.word	0x080026b9
 8000a1c:	08002835 	.word	0x08002835

08000a20 <DecToLong>:
// 역할 : 10진수 문자열 s에서 정수를 만들어 retval이 가리키는 위치에 기록.
// 매개 : s      : 변환할 문자열의 주소.
//        retval : 변환된 값이 기록될 주소.
// 반환 : return : 1 : success                0 : failure.
// 주의 :
int DecToLong(char *s, long *retval){
 8000a20:	b410      	push	{r4}
        long remainder;
        if (!s || !s[0]) return false;
 8000a22:	b1e0      	cbz	r0, 8000a5e <DecToLong+0x3e>
 8000a24:	7802      	ldrb	r2, [r0, #0]
 8000a26:	b1e2      	cbz	r2, 8000a62 <DecToLong+0x42>


        for (*retval=0; *s; s++){
 8000a28:	2200      	movs	r2, #0
 8000a2a:	600a      	str	r2, [r1, #0]
 8000a2c:	7803      	ldrb	r3, [r0, #0]
 8000a2e:	b1ab      	cbz	r3, 8000a5c <DecToLong+0x3c>
                if (*s < '0' || *s > '9') return false;
 8000a30:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
 8000a34:	b2e4      	uxtb	r4, r4
 8000a36:	2c09      	cmp	r4, #9
 8000a38:	d902      	bls.n	8000a40 <DecToLong+0x20>
 8000a3a:	e012      	b.n	8000a62 <DecToLong+0x42>
 8000a3c:	2c09      	cmp	r4, #9
 8000a3e:	d812      	bhi.n	8000a66 <DecToLong+0x46>
                remainder = *s - '0';
                *retval = *retval * 10 + remainder;
 8000a40:	eb02 0282 	add.w	r2, r2, r2, lsl #2
        if (!s || !s[0]) return false;


        for (*retval=0; *s; s++){
                if (*s < '0' || *s > '9') return false;
                remainder = *s - '0';
 8000a44:	eb03 0242 	add.w	r2, r3, r2, lsl #1
                *retval = *retval * 10 + remainder;
 8000a48:	3a30      	subs	r2, #48	; 0x30
 8000a4a:	600a      	str	r2, [r1, #0]
int DecToLong(char *s, long *retval){
        long remainder;
        if (!s || !s[0]) return false;


        for (*retval=0; *s; s++){
 8000a4c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
                if (*s < '0' || *s > '9') return false;
 8000a50:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 8000a54:	fa5f f48c 	uxtb.w	r4, ip
int DecToLong(char *s, long *retval){
        long remainder;
        if (!s || !s[0]) return false;


        for (*retval=0; *s; s++){
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d1ef      	bne.n	8000a3c <DecToLong+0x1c>
                remainder = *s - '0';
                *retval = *retval * 10 + remainder;
        }


        return true;
 8000a5c:	2001      	movs	r0, #1
}        // DecToLong.
 8000a5e:	bc10      	pop	{r4}
 8000a60:	4770      	bx	lr
        long remainder;
        if (!s || !s[0]) return false;


        for (*retval=0; *s; s++){
                if (*s < '0' || *s > '9') return false;
 8000a62:	4610      	mov	r0, r2
 8000a64:	e7fb      	b.n	8000a5e <DecToLong+0x3e>
 8000a66:	2000      	movs	r0, #0
 8000a68:	e7f9      	b.n	8000a5e <DecToLong+0x3e>
 8000a6a:	bf00      	nop

08000a6c <printf>:
// 매개 : fmt : printf()와 동일하나 "%s", "%c", "%d", "%x" 사용 가능.
//              %d, %x의 경우에는 "%08x", "%8x"와 같이 나타낼 길이와 빈 공간을 0으로 채울지 선택 가능.
// 반환 : 없음.
// 주의 : 없음.
void printf(char *fmt, ...)
{
 8000a6c:	b40f      	push	{r0, r1, r2, r3}
 8000a6e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a72:	b08d      	sub	sp, #52	; 0x34
        int                i;
        va_list args;
        char        *s=fmt;
 8000a74:	f10d 0858 	add.w	r8, sp, #88	; 0x58
 8000a78:	f858 5b04 	ldr.w	r5, [r8], #4
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000a7c:	f8df 92c4 	ldr.w	r9, [pc, #708]	; 8000d44 <printf+0x2d8>
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
                                tol[j] = s[i++];
                        }
                        tol[j] = '\0';
                        i--;
                        DecToLong(tol, &flagcnt);
 8000a80:	4fae      	ldr	r7, [pc, #696]	; (8000d3c <printf+0x2d0>)
        va_list args;
        char        *s=fmt;
        char        format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
        
        va_start(args, fmt);
        while (*s){
 8000a82:	7828      	ldrb	r0, [r5, #0]
 8000a84:	2800      	cmp	r0, #0
 8000a86:	f000 80ca 	beq.w	8000c1e <printf+0x1b2>
                if (*s=='%'){
 8000a8a:	2825      	cmp	r0, #37	; 0x25
 8000a8c:	f040 80cc 	bne.w	8000c28 <printf+0x1bc>
                        s++;
                        // s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
                        format[0] = '%';
 8000a90:	f88d 001c 	strb.w	r0, [sp, #28]
                        for (i=1; i<10;){
                                if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%'){
 8000a94:	7868      	ldrb	r0, [r5, #1]
        char        format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
        
        va_start(args, fmt);
        while (*s){
                if (*s=='%'){
                        s++;
 8000a96:	3501      	adds	r5, #1
                        // s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
                        format[0] = '%';
                        for (i=1; i<10;){
                                if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%'){
 8000a98:	f1a0 0163 	sub.w	r1, r0, #99	; 0x63
 8000a9c:	b2cb      	uxtb	r3, r1
 8000a9e:	2b01      	cmp	r3, #1
 8000aa0:	f240 82fd 	bls.w	800109e <printf+0x632>
 8000aa4:	2873      	cmp	r0, #115	; 0x73
 8000aa6:	f000 82fa 	beq.w	800109e <printf+0x632>
 8000aaa:	2878      	cmp	r0, #120	; 0x78
 8000aac:	f000 82f7 	beq.w	800109e <printf+0x632>
 8000ab0:	2825      	cmp	r0, #37	; 0x25
 8000ab2:	f000 82f4 	beq.w	800109e <printf+0x632>
                                        format[i++] = *s;
                                        format[i] = '\0';
                                        break;
                                }
                                else {
                                        format[i++] = *s++;
 8000ab6:	f88d 001d 	strb.w	r0, [sp, #29]
                if (*s=='%'){
                        s++;
                        // s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
                        format[0] = '%';
                        for (i=1; i<10;){
                                if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%'){
 8000aba:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 8000abe:	f1a0 0c63 	sub.w	ip, r0, #99	; 0x63
 8000ac2:	fa5f f28c 	uxtb.w	r2, ip
 8000ac6:	2a01      	cmp	r2, #1
 8000ac8:	f240 82f3 	bls.w	80010b2 <printf+0x646>
 8000acc:	2873      	cmp	r0, #115	; 0x73
 8000ace:	f000 82f0 	beq.w	80010b2 <printf+0x646>
 8000ad2:	2878      	cmp	r0, #120	; 0x78
 8000ad4:	f000 82ed 	beq.w	80010b2 <printf+0x646>
 8000ad8:	2825      	cmp	r0, #37	; 0x25
 8000ada:	f000 82ea 	beq.w	80010b2 <printf+0x646>
                                        format[i++] = *s;
                                        format[i] = '\0';
                                        break;
                                }
                                else {
                                        format[i++] = *s++;
 8000ade:	f88d 001e 	strb.w	r0, [sp, #30]
                if (*s=='%'){
                        s++;
                        // s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
                        format[0] = '%';
                        for (i=1; i<10;){
                                if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%'){
 8000ae2:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 8000ae6:	f1a0 0163 	sub.w	r1, r0, #99	; 0x63
 8000aea:	b2cb      	uxtb	r3, r1
 8000aec:	2b01      	cmp	r3, #1
 8000aee:	f240 82e2 	bls.w	80010b6 <printf+0x64a>
 8000af2:	2873      	cmp	r0, #115	; 0x73
 8000af4:	f000 82df 	beq.w	80010b6 <printf+0x64a>
 8000af8:	2878      	cmp	r0, #120	; 0x78
 8000afa:	f000 82dc 	beq.w	80010b6 <printf+0x64a>
 8000afe:	2825      	cmp	r0, #37	; 0x25
 8000b00:	f000 82d9 	beq.w	80010b6 <printf+0x64a>
                                        format[i++] = *s;
                                        format[i] = '\0';
                                        break;
                                }
                                else {
                                        format[i++] = *s++;
 8000b04:	f88d 001f 	strb.w	r0, [sp, #31]
                if (*s=='%'){
                        s++;
                        // s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
                        format[0] = '%';
                        for (i=1; i<10;){
                                if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%'){
 8000b08:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 8000b0c:	f1a0 0c63 	sub.w	ip, r0, #99	; 0x63
 8000b10:	fa5f f28c 	uxtb.w	r2, ip
 8000b14:	2a01      	cmp	r2, #1
 8000b16:	f240 82d0 	bls.w	80010ba <printf+0x64e>
 8000b1a:	2873      	cmp	r0, #115	; 0x73
 8000b1c:	f000 82cd 	beq.w	80010ba <printf+0x64e>
 8000b20:	2878      	cmp	r0, #120	; 0x78
 8000b22:	f000 82ca 	beq.w	80010ba <printf+0x64e>
 8000b26:	2825      	cmp	r0, #37	; 0x25
 8000b28:	f000 82c7 	beq.w	80010ba <printf+0x64e>
                                        format[i++] = *s;
                                        format[i] = '\0';
                                        break;
                                }
                                else {
                                        format[i++] = *s++;
 8000b2c:	f88d 0020 	strb.w	r0, [sp, #32]
                if (*s=='%'){
                        s++;
                        // s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
                        format[0] = '%';
                        for (i=1; i<10;){
                                if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%'){
 8000b30:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 8000b34:	f1a0 0163 	sub.w	r1, r0, #99	; 0x63
 8000b38:	b2cb      	uxtb	r3, r1
 8000b3a:	2b01      	cmp	r3, #1
 8000b3c:	f240 82bf 	bls.w	80010be <printf+0x652>
 8000b40:	2873      	cmp	r0, #115	; 0x73
 8000b42:	f000 82bc 	beq.w	80010be <printf+0x652>
 8000b46:	2878      	cmp	r0, #120	; 0x78
 8000b48:	f000 82b9 	beq.w	80010be <printf+0x652>
 8000b4c:	2825      	cmp	r0, #37	; 0x25
 8000b4e:	f000 82b6 	beq.w	80010be <printf+0x652>
                                        format[i++] = *s;
                                        format[i] = '\0';
                                        break;
                                }
                                else {
                                        format[i++] = *s++;
 8000b52:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
                if (*s=='%'){
                        s++;
                        // s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
                        format[0] = '%';
                        for (i=1; i<10;){
                                if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%'){
 8000b56:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 8000b5a:	f1a0 0c63 	sub.w	ip, r0, #99	; 0x63
 8000b5e:	fa5f f28c 	uxtb.w	r2, ip
 8000b62:	2a01      	cmp	r2, #1
 8000b64:	f240 82ad 	bls.w	80010c2 <printf+0x656>
 8000b68:	2873      	cmp	r0, #115	; 0x73
 8000b6a:	f000 82aa 	beq.w	80010c2 <printf+0x656>
 8000b6e:	2878      	cmp	r0, #120	; 0x78
 8000b70:	f000 82a7 	beq.w	80010c2 <printf+0x656>
 8000b74:	2825      	cmp	r0, #37	; 0x25
 8000b76:	f000 82a4 	beq.w	80010c2 <printf+0x656>
                                        format[i++] = *s;
                                        format[i] = '\0';
                                        break;
                                }
                                else {
                                        format[i++] = *s++;
 8000b7a:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
                if (*s=='%'){
                        s++;
                        // s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
                        format[0] = '%';
                        for (i=1; i<10;){
                                if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%'){
 8000b7e:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 8000b82:	f1a0 0163 	sub.w	r1, r0, #99	; 0x63
 8000b86:	b2cb      	uxtb	r3, r1
 8000b88:	2b01      	cmp	r3, #1
 8000b8a:	f240 829c 	bls.w	80010c6 <printf+0x65a>
 8000b8e:	2873      	cmp	r0, #115	; 0x73
 8000b90:	f000 8299 	beq.w	80010c6 <printf+0x65a>
 8000b94:	2878      	cmp	r0, #120	; 0x78
 8000b96:	f000 8296 	beq.w	80010c6 <printf+0x65a>
 8000b9a:	2825      	cmp	r0, #37	; 0x25
 8000b9c:	f000 8293 	beq.w	80010c6 <printf+0x65a>
                                        format[i++] = *s;
                                        format[i] = '\0';
                                        break;
                                }
                                else {
                                        format[i++] = *s++;
 8000ba0:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
                if (*s=='%'){
                        s++;
                        // s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
                        format[0] = '%';
                        for (i=1; i<10;){
                                if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%'){
 8000ba4:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 8000ba8:	f1a0 0c63 	sub.w	ip, r0, #99	; 0x63
 8000bac:	fa5f f28c 	uxtb.w	r2, ip
 8000bb0:	2a01      	cmp	r2, #1
 8000bb2:	f240 828a 	bls.w	80010ca <printf+0x65e>
 8000bb6:	2873      	cmp	r0, #115	; 0x73
 8000bb8:	f000 8287 	beq.w	80010ca <printf+0x65e>
 8000bbc:	2878      	cmp	r0, #120	; 0x78
 8000bbe:	f000 8284 	beq.w	80010ca <printf+0x65e>
 8000bc2:	2825      	cmp	r0, #37	; 0x25
 8000bc4:	f000 8281 	beq.w	80010ca <printf+0x65e>
                                        format[i++] = *s;
                                        format[i] = '\0';
                                        break;
                                }
                                else {
                                        format[i++] = *s++;
 8000bc8:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
                if (*s=='%'){
                        s++;
                        // s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
                        format[0] = '%';
                        for (i=1; i<10;){
                                if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%'){
 8000bcc:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 8000bd0:	f1a0 0163 	sub.w	r1, r0, #99	; 0x63
 8000bd4:	b2cb      	uxtb	r3, r1
 8000bd6:	2b01      	cmp	r3, #1
 8000bd8:	f240 844a 	bls.w	8001470 <printf+0xa04>
 8000bdc:	2873      	cmp	r0, #115	; 0x73
 8000bde:	f000 8447 	beq.w	8001470 <printf+0xa04>
 8000be2:	2878      	cmp	r0, #120	; 0x78
 8000be4:	f000 8444 	beq.w	8001470 <printf+0xa04>
 8000be8:	2825      	cmp	r0, #37	; 0x25
 8000bea:	f000 8441 	beq.w	8001470 <printf+0xa04>
                                        format[i++] = *s;
                                        format[i] = '\0';
                                        break;
                                }
                                else {
                                        format[i++] = *s++;
 8000bee:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8000bf2:	f815 0f01 	ldrb.w	r0, [r5, #1]!
                                }
                        }
                        // "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
                        switch (*s++){
 8000bf6:	3501      	adds	r5, #1
 8000bf8:	2864      	cmp	r0, #100	; 0x64
 8000bfa:	f000 80a5 	beq.w	8000d48 <printf+0x2dc>
 8000bfe:	d817      	bhi.n	8000c30 <printf+0x1c4>
 8000c00:	2825      	cmp	r0, #37	; 0x25
 8000c02:	f000 8088 	beq.w	8000d16 <printf+0x2aa>
 8000c06:	2863      	cmp	r0, #99	; 0x63
 8000c08:	f47f af3b 	bne.w	8000a82 <printf+0x16>
                                case 'c' :
                                        PrintChar(format, va_arg(args, int));
 8000c0c:	f858 0b04 	ldr.w	r0, [r8], #4
        return;
}

void PrintChar(char *fmt, char c)
{
        print_byte(c);
 8000c10:	4b4b      	ldr	r3, [pc, #300]	; (8000d40 <printf+0x2d4>)
 8000c12:	b2c0      	uxtb	r0, r0
 8000c14:	4798      	blx	r3
        va_list args;
        char        *s=fmt;
        char        format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
        
        va_start(args, fmt);
        while (*s){
 8000c16:	7828      	ldrb	r0, [r5, #0]
 8000c18:	2800      	cmp	r0, #0
 8000c1a:	f47f af36 	bne.w	8000a8a <printf+0x1e>
                        s++;
                }
        }
        va_end(args);
        return;
}
 8000c1e:	b00d      	add	sp, #52	; 0x34
 8000c20:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

void PrintChar(char *fmt, char c)
{
        print_byte(c);
 8000c28:	4945      	ldr	r1, [pc, #276]	; (8000d40 <printf+0x2d4>)
 8000c2a:	4788      	blx	r1
                                        break;
                        }
                }
                else {
                        PrintChar("%c", *s);
                        s++;
 8000c2c:	3501      	adds	r5, #1
 8000c2e:	e728      	b.n	8000a82 <printf+0x16>
                                else {
                                        format[i++] = *s++;
                                }
                        }
                        // "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
                        switch (*s++){
 8000c30:	2873      	cmp	r0, #115	; 0x73
 8000c32:	d073      	beq.n	8000d1c <printf+0x2b0>
 8000c34:	2878      	cmp	r0, #120	; 0x78
 8000c36:	f47f af24 	bne.w	8000a82 <printf+0x16>
                                        break;
                                case 'd' :
                                        PrintDec(format, va_arg(args, int));
                                        break;
                                case 'x' :
                                        PrintHex(format, va_arg(args, int));
 8000c3a:	f858 2b04 	ldr.w	r2, [r8], #4
        char        uHex, lHex;
        int                cnt;                                                // "%5x"의 경우 5개만 출력하도록 출력한 개수.


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
 8000c3e:	f89d 301c 	ldrb.w	r3, [sp, #28]

void PrintHex(char *fmt, int l){
        int                i, j;
        char        c, *s=fmt, tol[10];
        bool        flag0=false, flagl=false;        // flags.
        long        flagcnt=0;
 8000c42:	2400      	movs	r4, #0
                                        break;
                                case 'd' :
                                        PrintDec(format, va_arg(args, int));
                                        break;
                                case 'x' :
                                        PrintHex(format, va_arg(args, int));
 8000c44:	920b      	str	r2, [sp, #44]	; 0x2c

void PrintHex(char *fmt, int l){
        int                i, j;
        char        c, *s=fmt, tol[10];
        bool        flag0=false, flagl=false;        // flags.
        long        flagcnt=0;
 8000c46:	940a      	str	r4, [sp, #40]	; 0x28
        char        uHex, lHex;
        int                cnt;                                                // "%5x"의 경우 5개만 출력하도록 출력한 개수.


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	f000 8471 	beq.w	8001530 <printf+0xac4>
                if (c=='x') break;
 8000c4e:	2b78      	cmp	r3, #120	; 0x78
 8000c50:	d033      	beq.n	8000cba <printf+0x24e>
 8000c52:	4626      	mov	r6, r4
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
                                tol[j] = s[i++];
                        }
                        tol[j] = '\0';
 8000c54:	46a2      	mov	sl, r4


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='x') break;
                else if (c>='1' && c<='9'){
 8000c56:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8000c5a:	fa5f fc81 	uxtb.w	ip, r1
 8000c5e:	f1bc 0f08 	cmp.w	ip, #8
 8000c62:	d854      	bhi.n	8000d0e <printf+0x2a2>
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
 8000c64:	aa0c      	add	r2, sp, #48	; 0x30
 8000c66:	eb02 0e06 	add.w	lr, r2, r6
 8000c6a:	f81e 2c14 	ldrb.w	r2, [lr, #-20]
 8000c6e:	f1a2 0030 	sub.w	r0, r2, #48	; 0x30
 8000c72:	b2c3      	uxtb	r3, r0
 8000c74:	2b09      	cmp	r3, #9
 8000c76:	f200 820f 	bhi.w	8001098 <printf+0x62c>
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	a804      	add	r0, sp, #16
 8000c7e:	f10d 0e1c 	add.w	lr, sp, #28
                                tol[j] = s[i++];
 8000c82:	3601      	adds	r6, #1
 8000c84:	54c2      	strb	r2, [r0, r3]

        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='x') break;
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
 8000c86:	f81e 2006 	ldrb.w	r2, [lr, r6]
 8000c8a:	3301      	adds	r3, #1
 8000c8c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8000c90:	fa5f fc81 	uxtb.w	ip, r1
 8000c94:	f1bc 0f09 	cmp.w	ip, #9
 8000c98:	d9f3      	bls.n	8000c82 <printf+0x216>
                                tol[j] = s[i++];
                        }
                        tol[j] = '\0';
 8000c9a:	f10d 0e30 	add.w	lr, sp, #48	; 0x30
 8000c9e:	4473      	add	r3, lr
                        i--;
                        DecToLong(tol, &flagcnt);
 8000ca0:	a90a      	add	r1, sp, #40	; 0x28
                if (c=='x') break;
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
                                tol[j] = s[i++];
                        }
                        tol[j] = '\0';
 8000ca2:	f803 ac20 	strb.w	sl, [r3, #-32]
                        i--;
 8000ca6:	3e01      	subs	r6, #1
                        DecToLong(tol, &flagcnt);
 8000ca8:	47b8      	blx	r7
        char        uHex, lHex;
        int                cnt;                                                // "%5x"의 경우 5개만 출력하도록 출력한 개수.


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
 8000caa:	3601      	adds	r6, #1
 8000cac:	aa0c      	add	r2, sp, #48	; 0x30
 8000cae:	1990      	adds	r0, r2, r6
 8000cb0:	f810 3c14 	ldrb.w	r3, [r0, #-20]
 8000cb4:	b10b      	cbz	r3, 8000cba <printf+0x24e>
                if (c=='x') break;
 8000cb6:	2b78      	cmp	r3, #120	; 0x78
 8000cb8:	d1cd      	bne.n	8000c56 <printf+0x1ea>
                else continue;
        }


        s = (char *)(&l);
        l = SWAP32(l);                // little, big endian에 따라서.(big이 출력하기 쉬워 순서를 바꿈)
 8000cba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        
        // 위의 flag에 따라 출력.
        if (flagcnt){
 8000cbc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
                else continue;
        }


        s = (char *)(&l);
        l = SWAP32(l);                // little, big endian에 따라서.(big이 출력하기 쉬워 순서를 바꿈)
 8000cbe:	f403 007f 	and.w	r0, r3, #16711680	; 0xff0000
 8000cc2:	f403 4c7f 	and.w	ip, r3, #65280	; 0xff00
 8000cc6:	1201      	asrs	r1, r0, #8
 8000cc8:	ea41 200c 	orr.w	r0, r1, ip, lsl #8
 8000ccc:	ea40 6c03 	orr.w	ip, r0, r3, lsl #24
 8000cd0:	ea4c 6113 	orr.w	r1, ip, r3, lsr #24
 8000cd4:	910b      	str	r1, [sp, #44]	; 0x2c
        
        // 위의 flag에 따라 출력.
        if (flagcnt){
 8000cd6:	2a00      	cmp	r2, #0
 8000cd8:	f000 80df 	beq.w	8000e9a <printf+0x42e>
                if (flagcnt&0x01){        // flagcnt가 홀수 일때, upper를 무시, lower만 출력.
 8000cdc:	f012 0f01 	tst.w	r2, #1
 8000ce0:	f000 8297 	beq.w	8001212 <printf+0x7a6>
                        c = s[(8-(flagcnt+1))/2]; // 홀수 일때 그 위치를 포함하는 곳의 값을 가져 옵니다.
 8000ce4:	43d0      	mvns	r0, r2
 8000ce6:	3008      	adds	r0, #8
 8000ce8:	eb00 71d0 	add.w	r1, r0, r0, lsr #31
 8000cec:	104a      	asrs	r2, r1, #1
                        
                        // lower 4 bits를 가져와서 ascii code로.
                        lHex = ((c>>0)&0x0f);
 8000cee:	ab0b      	add	r3, sp, #44	; 0x2c
 8000cf0:	f813 e002 	ldrb.w	lr, [r3, r2]
                        if (lHex!=0) leading_zero=false;
 8000cf4:	f01e 030f 	ands.w	r3, lr, #15
 8000cf8:	f000 83d3 	beq.w	80014a2 <printf+0xa36>
                        if (lHex<10) lHex+='0';
 8000cfc:	2b09      	cmp	r3, #9
 8000cfe:	f240 8438 	bls.w	8001572 <printf+0xb06>
                        else         lHex+='A'-10;
 8000d02:	3337      	adds	r3, #55	; 0x37
                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte('0');
                                else       print_byte(' ');
                        }
                        else print_byte(lHex);
 8000d04:	490e      	ldr	r1, [pc, #56]	; (8000d40 <printf+0x2d4>)
 8000d06:	4618      	mov	r0, r3
 8000d08:	4788      	blx	r1
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	e3cf      	b.n	80014ae <printf+0xa42>
                        }
                        tol[j] = '\0';
                        i--;
                        DecToLong(tol, &flagcnt);
                }
                else if (c=='0') flag0=true;
 8000d0e:	2b30      	cmp	r3, #48	; 0x30
 8000d10:	bf08      	it	eq
 8000d12:	2401      	moveq	r4, #1
 8000d14:	e7c9      	b.n	8000caa <printf+0x23e>
        return;
}

void PrintChar(char *fmt, char c)
{
        print_byte(c);
 8000d16:	4b0a      	ldr	r3, [pc, #40]	; (8000d40 <printf+0x2d4>)
 8000d18:	4798      	blx	r3
                                case 's' :
                                        PrintString(format, va_arg(args, char *));
                                        break;
                                case '%' :
                                        PrintChar("%c", '%');
                                        break;
 8000d1a:	e6b2      	b.n	8000a82 <printf+0x16>
                                        break;
                                case 'x' :
                                        PrintHex(format, va_arg(args, int));
                                        break;
                                case 's' :
                                        PrintString(format, va_arg(args, char *));
 8000d1c:	f858 4b04 	ldr.w	r4, [r8], #4
        return;
}

void PrintString(char *fmt, char *s)
{
        if (!fmt || !s) return;
 8000d20:	2c00      	cmp	r4, #0
 8000d22:	f43f aeae 	beq.w	8000a82 <printf+0x16>
        while (*s) print_byte(*s++);
 8000d26:	7820      	ldrb	r0, [r4, #0]
 8000d28:	2800      	cmp	r0, #0
 8000d2a:	f43f aeaa 	beq.w	8000a82 <printf+0x16>
 8000d2e:	4e04      	ldr	r6, [pc, #16]	; (8000d40 <printf+0x2d4>)
 8000d30:	47b0      	blx	r6
 8000d32:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8000d36:	2800      	cmp	r0, #0
 8000d38:	d1fa      	bne.n	8000d30 <printf+0x2c4>
 8000d3a:	e6a2      	b.n	8000a82 <printf+0x16>
 8000d3c:	08000a21 	.word	0x08000a21
 8000d40:	08001819 	.word	0x08001819
 8000d44:	66666667 	.word	0x66666667
        bool        leading_zero=true;                        // long형의 data를 출력하기 위한 변수.
        long        divisor, result, remainder;


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
 8000d48:	f89d 301c 	ldrb.w	r3, [sp, #28]
void PrintDec(char *fmt, int l)
{
        int        i, j;
        char        c, *s=fmt, tol[10];
        bool        flag0=false, flagl=false;	// "%08lx"에서 '0', 'l'의 존재 여부.
        long        flagcnt=0;                                        // "%08lx"에서 "8"을 찾아서 long형으로.
 8000d4c:	2600      	movs	r6, #0
                        switch (*s++){
                                case 'c' :
                                        PrintChar(format, va_arg(args, int));
                                        break;
                                case 'd' :
                                        PrintDec(format, va_arg(args, int));
 8000d4e:	f858 bb04 	ldr.w	fp, [r8], #4
void PrintDec(char *fmt, int l)
{
        int        i, j;
        char        c, *s=fmt, tol[10];
        bool        flag0=false, flagl=false;	// "%08lx"에서 '0', 'l'의 존재 여부.
        long        flagcnt=0;                                        // "%08lx"에서 "8"을 찾아서 long형으로.
 8000d52:	960a      	str	r6, [sp, #40]	; 0x28
        bool        leading_zero=true;                        // long형의 data를 출력하기 위한 변수.
        long        divisor, result, remainder;


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	f000 80f3 	beq.w	8000f40 <printf+0x4d4>
                if (c=='d') break;
 8000d5a:	2b64      	cmp	r3, #100	; 0x64
 8000d5c:	f000 80f0 	beq.w	8000f40 <printf+0x4d4>
 8000d60:	4634      	mov	r4, r6
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
                                tol[j] = s[i++];
                        }
                        tol[j] = '\0';
 8000d62:	46b2      	mov	sl, r6


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='d') break;
                else if (c>='1' && c<='9'){
 8000d64:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8000d68:	fa5f fe82 	uxtb.w	lr, r2
 8000d6c:	f1be 0f08 	cmp.w	lr, #8
 8000d70:	f200 808f 	bhi.w	8000e92 <printf+0x426>
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
 8000d74:	a80c      	add	r0, sp, #48	; 0x30
 8000d76:	1903      	adds	r3, r0, r4
 8000d78:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8000d7c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8000d80:	fa5f fc81 	uxtb.w	ip, r1
 8000d84:	f1bc 0f09 	cmp.w	ip, #9
 8000d88:	f200 8183 	bhi.w	8001092 <printf+0x626>
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	a804      	add	r0, sp, #16
 8000d90:	f10d 0e1c 	add.w	lr, sp, #28
                                tol[j] = s[i++];
 8000d94:	3401      	adds	r4, #1
 8000d96:	54c2      	strb	r2, [r0, r3]

        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='d') break;
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
 8000d98:	f81e 2004 	ldrb.w	r2, [lr, r4]
 8000d9c:	3301      	adds	r3, #1
 8000d9e:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8000da2:	fa5f fc81 	uxtb.w	ip, r1
 8000da6:	f1bc 0f09 	cmp.w	ip, #9
 8000daa:	d9f3      	bls.n	8000d94 <printf+0x328>
                                tol[j] = s[i++];
                        }
                        tol[j] = '\0';
 8000dac:	aa0c      	add	r2, sp, #48	; 0x30
 8000dae:	eb02 0e03 	add.w	lr, r2, r3
                        i--;
                        DecToLong(tol, &flagcnt);
 8000db2:	a90a      	add	r1, sp, #40	; 0x28
                if (c=='d') break;
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
                                tol[j] = s[i++];
                        }
                        tol[j] = '\0';
 8000db4:	f80e ac20 	strb.w	sl, [lr, #-32]
                        i--;
 8000db8:	3c01      	subs	r4, #1
                        DecToLong(tol, &flagcnt);
 8000dba:	47b8      	blx	r7
        bool        leading_zero=true;                        // long형의 data를 출력하기 위한 변수.
        long        divisor, result, remainder;


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
 8000dbc:	3401      	adds	r4, #1
 8000dbe:	a80c      	add	r0, sp, #48	; 0x30
 8000dc0:	1903      	adds	r3, r0, r4
 8000dc2:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8000dc6:	b10b      	cbz	r3, 8000dcc <printf+0x360>
                if (c=='d') break;
 8000dc8:	2b64      	cmp	r3, #100	; 0x64
 8000dca:	d1cb      	bne.n	8000d64 <printf+0x2f8>
                else continue;
        }


        // 위의 flag에 따라 출력.
        if (flagcnt){
 8000dcc:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000dce:	2900      	cmp	r1, #0
 8000dd0:	f000 80b6 	beq.w	8000f40 <printf+0x4d4>
                if (flagcnt>9) flagcnt=9;
 8000dd4:	2909      	cmp	r1, #9
 8000dd6:	f340 82dd 	ble.w	8001394 <printf+0x928>
 8000dda:	2009      	movs	r0, #9
 8000ddc:	2407      	movs	r4, #7
 8000dde:	900a      	str	r0, [sp, #40]	; 0x28
 8000de0:	2106      	movs	r1, #6
{
        long retval=num;
        cnt--;


        while (cnt--){
 8000de2:	4620      	mov	r0, r4
 8000de4:	f000 0e01 	and.w	lr, r0, #1
                retval *= num;
 8000de8:	2364      	movs	r3, #100	; 0x64
{
        long retval=num;
        cnt--;


        while (cnt--){
 8000dea:	1e42      	subs	r2, r0, #1
 8000dec:	b190      	cbz	r0, 8000e14 <printf+0x3a8>
 8000dee:	f1be 0f00 	cmp.w	lr, #0
 8000df2:	d005      	beq.n	8000e00 <printf+0x394>
 8000df4:	3a01      	subs	r2, #1
 8000df6:	f1b2 3fff 	cmp.w	r2, #4294967295
                retval *= num;
 8000dfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{
        long retval=num;
        cnt--;


        while (cnt--){
 8000dfe:	d009      	beq.n	8000e14 <printf+0x3a8>
                retval *= num;
 8000e00:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000e04:	00d8      	lsls	r0, r3, #3
 8000e06:	eb00 0343 	add.w	r3, r0, r3, lsl #1
{
        long retval=num;
        cnt--;


        while (cnt--){
 8000e0a:	3a02      	subs	r2, #2
                retval *= num;
 8000e0c:	005b      	lsls	r3, r3, #1
{
        long retval=num;
        cnt--;


        while (cnt--){
 8000e0e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8000e12:	d1f5      	bne.n	8000e00 <printf+0x394>


        // 위의 flag에 따라 출력.
        if (flagcnt){
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.
 8000e14:	fb9b faf3 	sdiv	sl, fp, r3
 8000e18:	fb03 bb1a 	mls	fp, r3, sl, fp
{
        long retval=num;
        cnt--;


        while (cnt--){
 8000e1c:	2c00      	cmp	r4, #0
 8000e1e:	f000 8385 	beq.w	800152c <printf+0xac0>
 8000e22:	f001 0201 	and.w	r2, r1, #1
                retval *= num;
 8000e26:	2464      	movs	r4, #100	; 0x64
{
        long retval=num;
        cnt--;


        while (cnt--){
 8000e28:	1e4b      	subs	r3, r1, #1
 8000e2a:	b181      	cbz	r1, 8000e4e <printf+0x3e2>
 8000e2c:	b12a      	cbz	r2, 8000e3a <printf+0x3ce>
 8000e2e:	3b01      	subs	r3, #1
 8000e30:	f1b3 3fff 	cmp.w	r3, #4294967295
                retval *= num;
 8000e34:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
{
        long retval=num;
        cnt--;


        while (cnt--){
 8000e38:	d009      	beq.n	8000e4e <printf+0x3e2>
                retval *= num;
 8000e3a:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8000e3e:	00ca      	lsls	r2, r1, #3
 8000e40:	eb02 0441 	add.w	r4, r2, r1, lsl #1
{
        long retval=num;
        cnt--;


        while (cnt--){
 8000e44:	3b02      	subs	r3, #2
                retval *= num;
 8000e46:	0064      	lsls	r4, r4, #1
{
        long retval=num;
        cnt--;


        while (cnt--){
 8000e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e4c:	d1f5      	bne.n	8000e3a <printf+0x3ce>
        return;
}

int Power(int num, int cnt)
{
        long retval=num;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	f8df a27c 	ldr.w	sl, [pc, #636]	; 80010d0 <printf+0x664>
 8000e54:	9503      	str	r5, [sp, #12]
 8000e56:	4635      	mov	r5, r6
 8000e58:	461e      	mov	r6, r3
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000e5a:	fb9b f1f4 	sdiv	r1, fp, r4

                        if (leading_zero==true){
                                if (flag0)        print_byte('0');
                                else                print_byte(' ');
                        }
                        else print_byte((char)(result)+'0');
 8000e5e:	b2c8      	uxtb	r0, r1
 8000e60:	3030      	adds	r0, #48	; 0x30
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 8000e62:	fb04 bb11 	mls	fp, r4, r1, fp


                        if (result!=0 || divisor==1) leading_zero = false;
 8000e66:	2900      	cmp	r1, #0
 8000e68:	f040 8110 	bne.w	800108c <printf+0x620>
 8000e6c:	2c01      	cmp	r4, #1
 8000e6e:	f000 810d 	beq.w	800108c <printf+0x620>


                        if (leading_zero==true){
 8000e72:	2e00      	cmp	r6, #0
 8000e74:	f000 810a 	beq.w	800108c <printf+0x620>
                                if (flag0)        print_byte('0');
 8000e78:	2030      	movs	r0, #48	; 0x30
 8000e7a:	b905      	cbnz	r5, 8000e7e <printf+0x412>
                                else                print_byte(' ');
 8000e7c:	2020      	movs	r0, #32
 8000e7e:	47d0      	blx	sl
        if (flagcnt){
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
 8000e80:	fb89 0e04 	smull	r0, lr, r9, r4
 8000e84:	17e0      	asrs	r0, r4, #31
 8000e86:	ebc0 04ae 	rsb	r4, r0, lr, asr #2
 8000e8a:	2c00      	cmp	r4, #0
 8000e8c:	dce5      	bgt.n	8000e5a <printf+0x3ee>
 8000e8e:	9d03      	ldr	r5, [sp, #12]
 8000e90:	e5f7      	b.n	8000a82 <printf+0x16>
                        }
                        tol[j] = '\0';
                        i--;
                        DecToLong(tol, &flagcnt);
                }
                else if (c=='0') flag0=true;
 8000e92:	2b30      	cmp	r3, #48	; 0x30
 8000e94:	bf08      	it	eq
 8000e96:	2601      	moveq	r6, #1
 8000e98:	e790      	b.n	8000dbc <printf+0x350>
                        else print_byte(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
                        c = s[i];
 8000e9a:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000e9e:	0913      	lsrs	r3, r2, #4
                for (i=0; i<4; i++){
                        c = s[i];
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8000ea0:	f002 040f 	and.w	r4, r2, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000ea4:	f040 82dc 	bne.w	8001460 <printf+0x9f4>
 8000ea8:	4e89      	ldr	r6, [pc, #548]	; (80010d0 <printf+0x664>)
 8000eaa:	2301      	movs	r3, #1
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
 8000eac:	2c00      	cmp	r4, #0
 8000eae:	f040 8291 	bne.w	80013d4 <printf+0x968>
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte(lHex);
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	f000 8345 	beq.w	8001542 <printf+0xad6>
                        else print_byte(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
                        c = s[i];
 8000eb8:	f89d c02d 	ldrb.w	ip, [sp, #45]	; 0x2d
                        if (!leading_zero) print_byte(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte(lHex);
 8000ebc:	2201      	movs	r2, #1
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000ebe:	ea5f 131c 	movs.w	r3, ip, lsr #4
                for (i=0; i<4; i++){
                        c = s[i];
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8000ec2:	f00c 040f 	and.w	r4, ip, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000ec6:	f000 8294 	beq.w	80013f2 <printf+0x986>
                        if (uHex<10) uHex+='0';
 8000eca:	2b09      	cmp	r3, #9
 8000ecc:	f240 835c 	bls.w	8001588 <printf+0xb1c>
                        else         uHex+='A'-10;
 8000ed0:	f103 0037 	add.w	r0, r3, #55	; 0x37
                        if (!leading_zero) print_byte(uHex);
 8000ed4:	47b0      	blx	r6
 8000ed6:	2300      	movs	r3, #0
                        
                        if (lHex!=0 || i==3) leading_zero = false;
 8000ed8:	2c00      	cmp	r4, #0
 8000eda:	f040 8291 	bne.w	8001400 <printf+0x994>
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte(lHex);
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	f000 8332 	beq.w	8001548 <printf+0xadc>
                        else print_byte(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
                        c = s[i];
 8000ee4:	f89d e02e 	ldrb.w	lr, [sp, #46]	; 0x2e
                        if (!leading_zero) print_byte(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte(lHex);
 8000ee8:	2201      	movs	r2, #1
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000eea:	ea5f 131e 	movs.w	r3, lr, lsr #4
                for (i=0; i<4; i++){
                        c = s[i];
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8000eee:	f00e 040f 	and.w	r4, lr, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000ef2:	f000 8294 	beq.w	800141e <printf+0x9b2>
                        if (uHex<10) uHex+='0';
 8000ef6:	2b09      	cmp	r3, #9
 8000ef8:	f240 8329 	bls.w	800154e <printf+0xae2>
                        else         uHex+='A'-10;
 8000efc:	f103 0037 	add.w	r0, r3, #55	; 0x37
                        if (!leading_zero) print_byte(uHex);
 8000f00:	47b0      	blx	r6
 8000f02:	2300      	movs	r3, #0
                        
                        if (lHex!=0 || i==3) leading_zero = false;
 8000f04:	2c00      	cmp	r4, #0
 8000f06:	f040 8291 	bne.w	800142c <printf+0x9c0>
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte(lHex);
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	f000 8322 	beq.w	8001554 <printf+0xae8>
                        else print_byte(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
                        c = s[i];
 8000f10:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
                        if (!leading_zero) print_byte(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte(lHex);
 8000f14:	2201      	movs	r2, #1
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000f16:	0903      	lsrs	r3, r0, #4
                for (i=0; i<4; i++){
                        c = s[i];
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8000f18:	f000 040f 	and.w	r4, r0, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000f1c:	f000 8294 	beq.w	8001448 <printf+0x9dc>
                        if (uHex<10) uHex+='0';
 8000f20:	2b09      	cmp	r3, #9
 8000f22:	f240 8294 	bls.w	800144e <printf+0x9e2>
                        else         uHex+='A'-10;
 8000f26:	f103 0037 	add.w	r0, r3, #55	; 0x37
                        if (!leading_zero) print_byte(uHex);
 8000f2a:	47b0      	blx	r6
                        
                        if (lHex!=0 || i==3) leading_zero = false;
 8000f2c:	2c00      	cmp	r4, #0
 8000f2e:	f000 8292 	beq.w	8001456 <printf+0x9ea>
                        if (lHex<10) lHex+='0';
 8000f32:	2c09      	cmp	r4, #9
 8000f34:	f240 828f 	bls.w	8001456 <printf+0x9ea>
                        else         lHex+='A'-10;
 8000f38:	f104 0037 	add.w	r0, r4, #55	; 0x37
                        if (!leading_zero) print_byte(lHex);
 8000f3c:	47b0      	blx	r6
 8000f3e:	e5a0      	b.n	8000a82 <printf+0x16>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000f40:	4964      	ldr	r1, [pc, #400]	; (80010d4 <printf+0x668>)
 8000f42:	ea4f 76eb 	mov.w	r6, fp, asr #31
 8000f46:	fb81 3c0b 	smull	r3, ip, r1, fp
                        remainder %= divisor;
 8000f4a:	4c63      	ldr	r4, [pc, #396]	; (80010d8 <printf+0x66c>)
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000f4c:	ebc6 732c 	rsb	r3, r6, ip, asr #28
                        remainder %= divisor;
 8000f50:	fb04 bb13 	mls	fp, r4, r3, fp


                        if (result!=0 || divisor==1) leading_zero = false;
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	f000 80d7 	beq.w	8001108 <printf+0x69c>
                        if (leading_zero==false) print_byte((char)(result)+'0');
 8000f5a:	fa5f fe83 	uxtb.w	lr, r3
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000f5e:	4e5f      	ldr	r6, [pc, #380]	; (80010dc <printf+0x670>)
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte((char)(result)+'0');
 8000f60:	f10e 0030 	add.w	r0, lr, #48	; 0x30
 8000f64:	4c5a      	ldr	r4, [pc, #360]	; (80010d0 <printf+0x664>)
 8000f66:	47a0      	blx	r4
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000f68:	fb86 600b 	smull	r6, r0, r6, fp
 8000f6c:	ea4f 73eb 	mov.w	r3, fp, asr #31
                        remainder %= divisor;
 8000f70:	4a5b      	ldr	r2, [pc, #364]	; (80010e0 <printf+0x674>)
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000f72:	ebc3 6360 	rsb	r3, r3, r0, asr #25
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte((char)(result)+'0');
 8000f76:	2100      	movs	r1, #0
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 8000f78:	fb02 b613 	mls	r6, r2, r3, fp


                        if (result!=0 || divisor==1) leading_zero = false;
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	f000 80d2 	beq.w	8001126 <printf+0x6ba>
                        if (leading_zero==false) print_byte((char)(result)+'0');
 8000f82:	fa5f fc83 	uxtb.w	ip, r3
 8000f86:	f10c 0030 	add.w	r0, ip, #48	; 0x30
 8000f8a:	47a0      	blx	r4
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000f8c:	4855      	ldr	r0, [pc, #340]	; (80010e4 <printf+0x678>)
 8000f8e:	17f3      	asrs	r3, r6, #31
 8000f90:	fb80 0e06 	smull	r0, lr, r0, r6
                        remainder %= divisor;
 8000f94:	4a54      	ldr	r2, [pc, #336]	; (80010e8 <printf+0x67c>)
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000f96:	ebc3 53ae 	rsb	r3, r3, lr, asr #22
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte((char)(result)+'0');
 8000f9a:	2100      	movs	r1, #0
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 8000f9c:	fb02 6613 	mls	r6, r2, r3, r6


                        if (result!=0 || divisor==1) leading_zero = false;
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	f000 80d0 	beq.w	8001146 <printf+0x6da>
                        if (leading_zero==false) print_byte((char)(result)+'0');
 8000fa6:	b2d9      	uxtb	r1, r3
 8000fa8:	f101 0030 	add.w	r0, r1, #48	; 0x30
 8000fac:	47a0      	blx	r4
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000fae:	484f      	ldr	r0, [pc, #316]	; (80010ec <printf+0x680>)
 8000fb0:	17f3      	asrs	r3, r6, #31
 8000fb2:	fb80 0c06 	smull	r0, ip, r0, r6
                        remainder %= divisor;
 8000fb6:	4a4e      	ldr	r2, [pc, #312]	; (80010f0 <printf+0x684>)
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000fb8:	ebc3 43ac 	rsb	r3, r3, ip, asr #18
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte((char)(result)+'0');
 8000fbc:	2100      	movs	r1, #0
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 8000fbe:	fb02 6613 	mls	r6, r2, r3, r6


                        if (result!=0 || divisor==1) leading_zero = false;
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	f000 80cf 	beq.w	8001166 <printf+0x6fa>
                        if (leading_zero==false) print_byte((char)(result)+'0');
 8000fc8:	fa5f fe83 	uxtb.w	lr, r3
 8000fcc:	f10e 0030 	add.w	r0, lr, #48	; 0x30
 8000fd0:	47a0      	blx	r4
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000fd2:	4848      	ldr	r0, [pc, #288]	; (80010f4 <printf+0x688>)
 8000fd4:	17f3      	asrs	r3, r6, #31
 8000fd6:	fb80 0c06 	smull	r0, ip, r0, r6
                        remainder %= divisor;
 8000fda:	4a47      	ldr	r2, [pc, #284]	; (80010f8 <printf+0x68c>)
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000fdc:	ebc3 336c 	rsb	r3, r3, ip, asr #13
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte((char)(result)+'0');
 8000fe0:	2100      	movs	r1, #0
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 8000fe2:	fb02 6613 	mls	r6, r2, r3, r6


                        if (result!=0 || divisor==1) leading_zero = false;
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	f000 80cd 	beq.w	8001186 <printf+0x71a>
                        if (leading_zero==false) print_byte((char)(result)+'0');
 8000fec:	b2d9      	uxtb	r1, r3
 8000fee:	f101 0030 	add.w	r0, r1, #48	; 0x30
 8000ff2:	47a0      	blx	r4
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000ff4:	4841      	ldr	r0, [pc, #260]	; (80010fc <printf+0x690>)
 8000ff6:	17f3      	asrs	r3, r6, #31
 8000ff8:	fb80 0206 	smull	r0, r2, r0, r6
                        remainder %= divisor;
 8000ffc:	f242 7e10 	movw	lr, #10000	; 0x2710
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8001000:	ebc3 3322 	rsb	r3, r3, r2, asr #12
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte((char)(result)+'0');
 8001004:	2100      	movs	r1, #0
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 8001006:	fb0e 6613 	mls	r6, lr, r3, r6


                        if (result!=0 || divisor==1) leading_zero = false;
 800100a:	2b00      	cmp	r3, #0
 800100c:	f000 80cc 	beq.w	80011a8 <printf+0x73c>
                        if (leading_zero==false) print_byte((char)(result)+'0');
 8001010:	fa5f fc83 	uxtb.w	ip, r3
 8001014:	f10c 0030 	add.w	r0, ip, #48	; 0x30
 8001018:	47a0      	blx	r4
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 800101a:	4839      	ldr	r0, [pc, #228]	; (8001100 <printf+0x694>)
 800101c:	17f3      	asrs	r3, r6, #31
 800101e:	fb80 0206 	smull	r0, r2, r0, r6
                        remainder %= divisor;
 8001022:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8001026:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte((char)(result)+'0');
 800102a:	2100      	movs	r1, #0
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 800102c:	fb0e 6613 	mls	r6, lr, r3, r6


                        if (result!=0 || divisor==1) leading_zero = false;
 8001030:	2b00      	cmp	r3, #0
 8001032:	f000 80ca 	beq.w	80011ca <printf+0x75e>
                        if (leading_zero==false) print_byte((char)(result)+'0');
 8001036:	b2d9      	uxtb	r1, r3
 8001038:	f101 0030 	add.w	r0, r1, #48	; 0x30
 800103c:	47a0      	blx	r4
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 800103e:	4831      	ldr	r0, [pc, #196]	; (8001104 <printf+0x698>)
 8001040:	17f3      	asrs	r3, r6, #31
 8001042:	fb80 0c06 	smull	r0, ip, r0, r6
                        remainder %= divisor;
 8001046:	2264      	movs	r2, #100	; 0x64
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8001048:	ebc3 136c 	rsb	r3, r3, ip, asr #5
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte((char)(result)+'0');
 800104c:	2100      	movs	r1, #0
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 800104e:	fb02 6613 	mls	r6, r2, r3, r6


                        if (result!=0 || divisor==1) leading_zero = false;
 8001052:	2b00      	cmp	r3, #0
 8001054:	f000 80c9 	beq.w	80011ea <printf+0x77e>
                        if (leading_zero==false) print_byte((char)(result)+'0');
 8001058:	fa5f fe83 	uxtb.w	lr, r3
 800105c:	f10e 0030 	add.w	r0, lr, #48	; 0x30
 8001060:	47a0      	blx	r4
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8001062:	fb89 3c06 	smull	r3, ip, r9, r6
 8001066:	17f3      	asrs	r3, r6, #31
 8001068:	ebc3 03ac 	rsb	r3, r3, ip, asr #2
                        remainder %= divisor;
 800106c:	eb03 0283 	add.w	r2, r3, r3, lsl #2


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte((char)(result)+'0');
 8001070:	2100      	movs	r1, #0
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 8001072:	eba6 0642 	sub.w	r6, r6, r2, lsl #1


                        if (result!=0 || divisor==1) leading_zero = false;
 8001076:	2b00      	cmp	r3, #0
 8001078:	f000 80c7 	beq.w	800120a <printf+0x79e>
                        if (leading_zero==false) print_byte((char)(result)+'0');
 800107c:	b2d9      	uxtb	r1, r3
 800107e:	f101 0030 	add.w	r0, r1, #48	; 0x30
 8001082:	47a0      	blx	r4
 8001084:	b2f0      	uxtb	r0, r6
 8001086:	3030      	adds	r0, #48	; 0x30
 8001088:	47a0      	blx	r4
 800108a:	e4fa      	b.n	8000a82 <printf+0x16>

                        if (leading_zero==true){
                                if (flag0)        print_byte('0');
                                else                print_byte(' ');
                        }
                        else print_byte((char)(result)+'0');
 800108c:	47d0      	blx	sl
 800108e:	2600      	movs	r6, #0
 8001090:	e6f6      	b.n	8000e80 <printf+0x414>

        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='d') break;
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
 8001092:	2300      	movs	r3, #0
 8001094:	a804      	add	r0, sp, #16
 8001096:	e689      	b.n	8000dac <printf+0x340>

        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='x') break;
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
 8001098:	2300      	movs	r3, #0
 800109a:	a804      	add	r0, sp, #16
 800109c:	e5fd      	b.n	8000c9a <printf+0x22e>
        while (*s){
                if (*s=='%'){
                        s++;
                        // s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
                        format[0] = '%';
                        for (i=1; i<10;){
 800109e:	2301      	movs	r3, #1
                                if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%'){
                                        format[i++] = *s;
 80010a0:	a90c      	add	r1, sp, #48	; 0x30
 80010a2:	eb01 0c03 	add.w	ip, r1, r3
                                        format[i] = '\0';
 80010a6:	2200      	movs	r2, #0
                        s++;
                        // s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
                        format[0] = '%';
                        for (i=1; i<10;){
                                if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%'){
                                        format[i++] = *s;
 80010a8:	f80c 0c14 	strb.w	r0, [ip, #-20]
                                        format[i] = '\0';
 80010ac:	f80c 2c13 	strb.w	r2, [ip, #-19]
                                        break;
 80010b0:	e5a1      	b.n	8000bf6 <printf+0x18a>
                                }
                                else {
                                        format[i++] = *s++;
 80010b2:	2302      	movs	r3, #2
 80010b4:	e7f4      	b.n	80010a0 <printf+0x634>
 80010b6:	2303      	movs	r3, #3
 80010b8:	e7f2      	b.n	80010a0 <printf+0x634>
 80010ba:	2304      	movs	r3, #4
 80010bc:	e7f0      	b.n	80010a0 <printf+0x634>
 80010be:	2305      	movs	r3, #5
 80010c0:	e7ee      	b.n	80010a0 <printf+0x634>
 80010c2:	2306      	movs	r3, #6
 80010c4:	e7ec      	b.n	80010a0 <printf+0x634>
 80010c6:	2307      	movs	r3, #7
 80010c8:	e7ea      	b.n	80010a0 <printf+0x634>
 80010ca:	2308      	movs	r3, #8
 80010cc:	e7e8      	b.n	80010a0 <printf+0x634>
 80010ce:	bf00      	nop
 80010d0:	08001819 	.word	0x08001819
 80010d4:	44b82fa1 	.word	0x44b82fa1
 80010d8:	3b9aca00 	.word	0x3b9aca00
 80010dc:	55e63b89 	.word	0x55e63b89
 80010e0:	05f5e100 	.word	0x05f5e100
 80010e4:	6b5fca6b 	.word	0x6b5fca6b
 80010e8:	00989680 	.word	0x00989680
 80010ec:	431bde83 	.word	0x431bde83
 80010f0:	000f4240 	.word	0x000f4240
 80010f4:	14f8b589 	.word	0x14f8b589
 80010f8:	000186a0 	.word	0x000186a0
 80010fc:	68db8bad 	.word	0x68db8bad
 8001100:	10624dd3 	.word	0x10624dd3
 8001104:	51eb851f 	.word	0x51eb851f
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8001108:	4ea6      	ldr	r6, [pc, #664]	; (80013a4 <printf+0x938>)
 800110a:	ea4f 73eb 	mov.w	r3, fp, asr #31
 800110e:	fb86 600b 	smull	r6, r0, r6, fp
                        remainder %= divisor;
 8001112:	4aa5      	ldr	r2, [pc, #660]	; (80013a8 <printf+0x93c>)
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8001114:	ebc3 6360 	rsb	r3, r3, r0, asr #25
 8001118:	4ca4      	ldr	r4, [pc, #656]	; (80013ac <printf+0x940>)
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
 800111a:	2101      	movs	r1, #1
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 800111c:	fb02 b613 	mls	r6, r2, r3, fp


                        if (result!=0 || divisor==1) leading_zero = false;
 8001120:	2b00      	cmp	r3, #0
 8001122:	f47f af2e 	bne.w	8000f82 <printf+0x516>
                        if (leading_zero==false) print_byte((char)(result)+'0');
 8001126:	2900      	cmp	r1, #0
 8001128:	f43f af2b 	beq.w	8000f82 <printf+0x516>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 800112c:	48a0      	ldr	r0, [pc, #640]	; (80013b0 <printf+0x944>)
 800112e:	17f3      	asrs	r3, r6, #31
 8001130:	fb80 0e06 	smull	r0, lr, r0, r6
                        remainder %= divisor;
 8001134:	4a9f      	ldr	r2, [pc, #636]	; (80013b4 <printf+0x948>)
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8001136:	ebc3 53ae 	rsb	r3, r3, lr, asr #22
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte((char)(result)+'0');
 800113a:	2101      	movs	r1, #1
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 800113c:	fb02 6613 	mls	r6, r2, r3, r6


                        if (result!=0 || divisor==1) leading_zero = false;
 8001140:	2b00      	cmp	r3, #0
 8001142:	f47f af30 	bne.w	8000fa6 <printf+0x53a>
                        if (leading_zero==false) print_byte((char)(result)+'0');
 8001146:	2900      	cmp	r1, #0
 8001148:	f43f af2d 	beq.w	8000fa6 <printf+0x53a>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 800114c:	489a      	ldr	r0, [pc, #616]	; (80013b8 <printf+0x94c>)
 800114e:	17f3      	asrs	r3, r6, #31
 8001150:	fb80 0c06 	smull	r0, ip, r0, r6
                        remainder %= divisor;
 8001154:	4a99      	ldr	r2, [pc, #612]	; (80013bc <printf+0x950>)
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8001156:	ebc3 43ac 	rsb	r3, r3, ip, asr #18
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte((char)(result)+'0');
 800115a:	2101      	movs	r1, #1
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 800115c:	fb02 6613 	mls	r6, r2, r3, r6


                        if (result!=0 || divisor==1) leading_zero = false;
 8001160:	2b00      	cmp	r3, #0
 8001162:	f47f af31 	bne.w	8000fc8 <printf+0x55c>
                        if (leading_zero==false) print_byte((char)(result)+'0');
 8001166:	2900      	cmp	r1, #0
 8001168:	f43f af2e 	beq.w	8000fc8 <printf+0x55c>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 800116c:	4894      	ldr	r0, [pc, #592]	; (80013c0 <printf+0x954>)
 800116e:	17f3      	asrs	r3, r6, #31
 8001170:	fb80 0c06 	smull	r0, ip, r0, r6
                        remainder %= divisor;
 8001174:	4a93      	ldr	r2, [pc, #588]	; (80013c4 <printf+0x958>)
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8001176:	ebc3 336c 	rsb	r3, r3, ip, asr #13
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte((char)(result)+'0');
 800117a:	2101      	movs	r1, #1
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 800117c:	fb02 6613 	mls	r6, r2, r3, r6


                        if (result!=0 || divisor==1) leading_zero = false;
 8001180:	2b00      	cmp	r3, #0
 8001182:	f47f af33 	bne.w	8000fec <printf+0x580>
                        if (leading_zero==false) print_byte((char)(result)+'0');
 8001186:	2900      	cmp	r1, #0
 8001188:	f43f af30 	beq.w	8000fec <printf+0x580>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 800118c:	488e      	ldr	r0, [pc, #568]	; (80013c8 <printf+0x95c>)
 800118e:	17f3      	asrs	r3, r6, #31
 8001190:	fb80 0206 	smull	r0, r2, r0, r6
                        remainder %= divisor;
 8001194:	f242 7e10 	movw	lr, #10000	; 0x2710
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8001198:	ebc3 3322 	rsb	r3, r3, r2, asr #12
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte((char)(result)+'0');
 800119c:	2101      	movs	r1, #1
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 800119e:	fb0e 6613 	mls	r6, lr, r3, r6


                        if (result!=0 || divisor==1) leading_zero = false;
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	f47f af34 	bne.w	8001010 <printf+0x5a4>
                        if (leading_zero==false) print_byte((char)(result)+'0');
 80011a8:	2900      	cmp	r1, #0
 80011aa:	f43f af31 	beq.w	8001010 <printf+0x5a4>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80011ae:	4887      	ldr	r0, [pc, #540]	; (80013cc <printf+0x960>)
 80011b0:	17f3      	asrs	r3, r6, #31
 80011b2:	fb80 0206 	smull	r0, r2, r0, r6
                        remainder %= divisor;
 80011b6:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80011ba:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte((char)(result)+'0');
 80011be:	2101      	movs	r1, #1
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 80011c0:	fb0e 6613 	mls	r6, lr, r3, r6


                        if (result!=0 || divisor==1) leading_zero = false;
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	f47f af36 	bne.w	8001036 <printf+0x5ca>
                        if (leading_zero==false) print_byte((char)(result)+'0');
 80011ca:	2900      	cmp	r1, #0
 80011cc:	f43f af33 	beq.w	8001036 <printf+0x5ca>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80011d0:	487f      	ldr	r0, [pc, #508]	; (80013d0 <printf+0x964>)
 80011d2:	17f3      	asrs	r3, r6, #31
 80011d4:	fb80 0c06 	smull	r0, ip, r0, r6
                        remainder %= divisor;
 80011d8:	2264      	movs	r2, #100	; 0x64
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80011da:	ebc3 136c 	rsb	r3, r3, ip, asr #5
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte((char)(result)+'0');
 80011de:	2101      	movs	r1, #1
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 80011e0:	fb02 6613 	mls	r6, r2, r3, r6


                        if (result!=0 || divisor==1) leading_zero = false;
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	f47f af37 	bne.w	8001058 <printf+0x5ec>
                        if (leading_zero==false) print_byte((char)(result)+'0');
 80011ea:	2900      	cmp	r1, #0
 80011ec:	f43f af34 	beq.w	8001058 <printf+0x5ec>
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80011f0:	fb89 3c06 	smull	r3, ip, r9, r6
 80011f4:	17f3      	asrs	r3, r6, #31
 80011f6:	ebc3 03ac 	rsb	r3, r3, ip, asr #2
                        remainder %= divisor;
 80011fa:	eb03 0283 	add.w	r2, r3, r3, lsl #2


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte((char)(result)+'0');
 80011fe:	2101      	movs	r1, #1
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 8001200:	eba6 0642 	sub.w	r6, r6, r2, lsl #1


                        if (result!=0 || divisor==1) leading_zero = false;
 8001204:	2b00      	cmp	r3, #0
 8001206:	f47f af39 	bne.w	800107c <printf+0x610>
                        if (leading_zero==false) print_byte((char)(result)+'0');
 800120a:	2900      	cmp	r1, #0
 800120c:	f47f af3a 	bne.w	8001084 <printf+0x618>
 8001210:	e734      	b.n	800107c <printf+0x610>
void PrintHex(char *fmt, int l){
        int                i, j;
        char        c, *s=fmt, tol[10];
        bool        flag0=false, flagl=false;        // flags.
        long        flagcnt=0;
        bool        leading_zero=true;
 8001212:	2101      	movs	r1, #1
                        flagcnt--;
                }


                // byte단위의 data를 Hex로 출력.
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
 8001214:	f1c2 0c08 	rsb	ip, r2, #8
 8001218:	eb0c 72dc 	add.w	r2, ip, ip, lsr #31
 800121c:	1052      	asrs	r2, r2, #1
 800121e:	2a03      	cmp	r2, #3
 8001220:	f73f ac2f 	bgt.w	8000a82 <printf+0x16>
// 역할 : printf() 중 일부를 간단하게 구현.
// 매개 : fmt : printf()와 동일하나 "%s", "%c", "%d", "%x" 사용 가능.
//              %d, %x의 경우에는 "%08x", "%8x"와 같이 나타낼 길이와 빈 공간을 0으로 채울지 선택 가능.
// 반환 : 없음.
// 주의 : 없음.
void printf(char *fmt, ...)
 8001224:	f10d 0b2c 	add.w	fp, sp, #44	; 0x2c
 8001228:	eb0b 0302 	add.w	r3, fp, r2
                }


                // byte단위의 data를 Hex로 출력.
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
                        c = s[i];
 800122c:	f81b e002 	ldrb.w	lr, [fp, r2]
 8001230:	43d8      	mvns	r0, r3
 8001232:	f000 0601 	and.w	r6, r0, #1
 8001236:	9603      	str	r6, [sp, #12]
 8001238:	1c5e      	adds	r6, r3, #1
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 800123a:	ea5f 101e 	movs.w	r0, lr, lsr #4
// 역할 : printf() 중 일부를 간단하게 구현.
// 매개 : fmt : printf()와 동일하나 "%s", "%c", "%d", "%x" 사용 가능.
//              %d, %x의 경우에는 "%08x", "%8x"와 같이 나타낼 길이와 빈 공간을 0으로 채울지 선택 가능.
// 반환 : 없음.
// 주의 : 없음.
void printf(char *fmt, ...)
 800123e:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8001242:	f8df a168 	ldr.w	sl, [pc, #360]	; 80013ac <printf+0x940>
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
                        c = s[i];
                                
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8001246:	f00e 020f 	and.w	r2, lr, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 800124a:	f040 8113 	bne.w	8001474 <printf+0xa08>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;


                        // upper 4 bits 출력.
                        if (leading_zero){
 800124e:	2900      	cmp	r1, #0
 8001250:	f000 8198 	beq.w	8001584 <printf+0xb18>
                                if (flag0) print_byte('0');
 8001254:	2c00      	cmp	r4, #0
 8001256:	f040 8154 	bne.w	8001502 <printf+0xa96>
                                else       print_byte(' ');
 800125a:	2020      	movs	r0, #32
                        else         uHex+='A'-10;


                        // upper 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte('0');
 800125c:	9202      	str	r2, [sp, #8]
 800125e:	9301      	str	r3, [sp, #4]
 8001260:	47d0      	blx	sl
 8001262:	9a02      	ldr	r2, [sp, #8]
 8001264:	2101      	movs	r1, #1
 8001266:	9b01      	ldr	r3, [sp, #4]
                                else       print_byte(' ');
                        }
                        else print_byte(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
 8001268:	2a00      	cmp	r2, #0
 800126a:	f000 8110 	beq.w	800148e <printf+0xa22>
                        if (lHex<10) lHex+='0';
 800126e:	2a09      	cmp	r2, #9
 8001270:	f240 8185 	bls.w	800157e <printf+0xb12>
                        else         lHex+='A'-10;
 8001274:	f102 0037 	add.w	r0, r2, #55	; 0x37
                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte('0');
                                else       print_byte(' ');
                        }
                        else print_byte(lHex);
 8001278:	9301      	str	r3, [sp, #4]
 800127a:	47d0      	blx	sl
 800127c:	9b01      	ldr	r3, [sp, #4]
 800127e:	2200      	movs	r2, #0
                        flagcnt--;
                }


                // byte단위의 data를 Hex로 출력.
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
 8001280:	455e      	cmp	r6, fp
 8001282:	f43f abfe 	beq.w	8000a82 <printf+0x16>
 8001286:	9803      	ldr	r0, [sp, #12]
 8001288:	b1f0      	cbz	r0, 80012c8 <printf+0x85c>
                        c = s[i];
 800128a:	f893 c001 	ldrb.w	ip, [r3, #1]
 800128e:	3601      	adds	r6, #1
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 8001290:	ea5f 111c 	movs.w	r1, ip, lsr #4
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
                        c = s[i];
                                
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8001294:	f00c 030f 	and.w	r3, ip, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 8001298:	f000 8124 	beq.w	80014e4 <printf+0xa78>
                        if (uHex<10) uHex+='0';
 800129c:	2909      	cmp	r1, #9
 800129e:	f240 816b 	bls.w	8001578 <printf+0xb0c>
                        else         uHex+='A'-10;
 80012a2:	f101 0037 	add.w	r0, r1, #55	; 0x37
                        // upper 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte('0');
                                else       print_byte(' ');
                        }
                        else print_byte(uHex);
 80012a6:	9301      	str	r3, [sp, #4]
 80012a8:	47d0      	blx	sl
 80012aa:	9b01      	ldr	r3, [sp, #4]
 80012ac:	2200      	movs	r2, #0
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	f000 8111 	beq.w	80014d6 <printf+0xa6a>
                        if (lHex<10) lHex+='0';
 80012b4:	2b09      	cmp	r3, #9
 80012b6:	f240 8159 	bls.w	800156c <printf+0xb00>
                        else         lHex+='A'-10;
 80012ba:	f103 0037 	add.w	r0, r3, #55	; 0x37
                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte('0');
                                else       print_byte(' ');
                        }
                        else print_byte(lHex);
 80012be:	47d0      	blx	sl
 80012c0:	2200      	movs	r2, #0
                        flagcnt--;
                }


                // byte단위의 data를 Hex로 출력.
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
 80012c2:	455e      	cmp	r6, fp
 80012c4:	f43f abdd 	beq.w	8000a82 <printf+0x16>
 80012c8:	9503      	str	r5, [sp, #12]
                        c = s[i];
 80012ca:	f816 3b01 	ldrb.w	r3, [r6], #1
 80012ce:	4625      	mov	r5, r4
                                
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 80012d0:	f003 040f 	and.w	r4, r3, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 80012d4:	091b      	lsrs	r3, r3, #4
 80012d6:	d02e      	beq.n	8001336 <printf+0x8ca>
                        if (uHex<10) uHex+='0';
 80012d8:	2b09      	cmp	r3, #9
 80012da:	f240 8144 	bls.w	8001566 <printf+0xafa>
                        else         uHex+='A'-10;
 80012de:	f103 0037 	add.w	r0, r3, #55	; 0x37
                        // upper 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte('0');
                                else       print_byte(' ');
                        }
                        else print_byte(uHex);
 80012e2:	47d0      	blx	sl
 80012e4:	2300      	movs	r3, #0
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
 80012e6:	2c00      	cmp	r4, #0
 80012e8:	d030      	beq.n	800134c <printf+0x8e0>
                        if (lHex<10) lHex+='0';
 80012ea:	2c09      	cmp	r4, #9
 80012ec:	f240 8138 	bls.w	8001560 <printf+0xaf4>
                        else         lHex+='A'-10;
 80012f0:	f104 0037 	add.w	r0, r4, #55	; 0x37
                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte('0');
                                else       print_byte(' ');
                        }
                        else print_byte(lHex);
 80012f4:	47d0      	blx	sl
 80012f6:	2200      	movs	r2, #0
                }


                // byte단위의 data를 Hex로 출력.
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
                        c = s[i];
 80012f8:	f816 1b01 	ldrb.w	r1, [r6], #1
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 80012fc:	090b      	lsrs	r3, r1, #4
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
                        c = s[i];
                                
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 80012fe:	f001 040f 	and.w	r4, r1, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 8001302:	d032      	beq.n	800136a <printf+0x8fe>
                        if (uHex<10) uHex+='0';
 8001304:	2b09      	cmp	r3, #9
 8001306:	f240 8119 	bls.w	800153c <printf+0xad0>
                        else         uHex+='A'-10;
 800130a:	f103 0037 	add.w	r0, r3, #55	; 0x37
                        // upper 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte('0');
                                else       print_byte(' ');
                        }
                        else print_byte(uHex);
 800130e:	47d0      	blx	sl
 8001310:	2300      	movs	r3, #0
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
 8001312:	2c00      	cmp	r4, #0
 8001314:	d034      	beq.n	8001380 <printf+0x914>
                        if (lHex<10) lHex+='0';
 8001316:	2c09      	cmp	r4, #9
 8001318:	f240 810d 	bls.w	8001536 <printf+0xaca>
                        else         lHex+='A'-10;
 800131c:	f104 0037 	add.w	r0, r4, #55	; 0x37
                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte('0');
                                else       print_byte(' ');
                        }
                        else print_byte(lHex);
 8001320:	47d0      	blx	sl
 8001322:	2200      	movs	r2, #0
                        flagcnt--;
                }


                // byte단위의 data를 Hex로 출력.
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
 8001324:	455e      	cmp	r6, fp
 8001326:	f43f adb2 	beq.w	8000e8e <printf+0x422>
                        c = s[i];
 800132a:	f816 3b01 	ldrb.w	r3, [r6], #1
                                
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 800132e:	f003 040f 	and.w	r4, r3, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 8001332:	091b      	lsrs	r3, r3, #4
 8001334:	d1d0      	bne.n	80012d8 <printf+0x86c>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;


                        // upper 4 bits 출력.
                        if (leading_zero){
 8001336:	2a00      	cmp	r2, #0
 8001338:	f000 8115 	beq.w	8001566 <printf+0xafa>
                                if (flag0) print_byte('0');
 800133c:	2d00      	cmp	r5, #0
 800133e:	f000 80c6 	beq.w	80014ce <printf+0xa62>
 8001342:	2030      	movs	r0, #48	; 0x30
 8001344:	47d0      	blx	sl
 8001346:	2301      	movs	r3, #1
                                else       print_byte(' ');
                        }
                        else print_byte(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
 8001348:	2c00      	cmp	r4, #0
 800134a:	d1ce      	bne.n	80012ea <printf+0x87e>
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;


                        // lower 4 bits 출력.
                        if (leading_zero){
 800134c:	2b00      	cmp	r3, #0
 800134e:	f000 8107 	beq.w	8001560 <printf+0xaf4>
                                if (flag0) print_byte('0');
 8001352:	2d00      	cmp	r5, #0
 8001354:	f000 80b7 	beq.w	80014c6 <printf+0xa5a>
 8001358:	2030      	movs	r0, #48	; 0x30
 800135a:	47d0      	blx	sl
                }


                // byte단위의 data를 Hex로 출력.
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
                        c = s[i];
 800135c:	f816 1b01 	ldrb.w	r1, [r6], #1
                        else         lHex+='A'-10;


                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte('0');
 8001360:	2201      	movs	r2, #1
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 8001362:	090b      	lsrs	r3, r1, #4
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
                        c = s[i];
                                
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8001364:	f001 040f 	and.w	r4, r1, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 8001368:	d1cc      	bne.n	8001304 <printf+0x898>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;


                        // upper 4 bits 출력.
                        if (leading_zero){
 800136a:	2a00      	cmp	r2, #0
 800136c:	f000 80e6 	beq.w	800153c <printf+0xad0>
                                if (flag0) print_byte('0');
 8001370:	2d00      	cmp	r5, #0
 8001372:	f040 80a0 	bne.w	80014b6 <printf+0xa4a>
                                else       print_byte(' ');
 8001376:	2020      	movs	r0, #32
 8001378:	47d0      	blx	sl
 800137a:	2301      	movs	r3, #1
                        }
                        else print_byte(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
 800137c:	2c00      	cmp	r4, #0
 800137e:	d1ca      	bne.n	8001316 <printf+0x8aa>
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;


                        // lower 4 bits 출력.
                        if (leading_zero){
 8001380:	2b00      	cmp	r3, #0
 8001382:	f000 80d8 	beq.w	8001536 <printf+0xaca>
                                if (flag0) print_byte('0');
 8001386:	2d00      	cmp	r5, #0
 8001388:	f040 8099 	bne.w	80014be <printf+0xa52>
                                else       print_byte(' ');
 800138c:	2020      	movs	r0, #32
 800138e:	47d0      	blx	sl
 8001390:	2201      	movs	r2, #1
 8001392:	e7c7      	b.n	8001324 <printf+0x8b8>
{
        long retval=num;
        cnt--;


        while (cnt--){
 8001394:	1e48      	subs	r0, r1, #1
 8001396:	f000 80c5 	beq.w	8001524 <printf+0xab8>
 800139a:	1e8c      	subs	r4, r1, #2
 800139c:	3801      	subs	r0, #1
 800139e:	3903      	subs	r1, #3
 80013a0:	e520      	b.n	8000de4 <printf+0x378>
 80013a2:	bf00      	nop
 80013a4:	55e63b89 	.word	0x55e63b89
 80013a8:	05f5e100 	.word	0x05f5e100
 80013ac:	08001819 	.word	0x08001819
 80013b0:	6b5fca6b 	.word	0x6b5fca6b
 80013b4:	00989680 	.word	0x00989680
 80013b8:	431bde83 	.word	0x431bde83
 80013bc:	000f4240 	.word	0x000f4240
 80013c0:	14f8b589 	.word	0x14f8b589
 80013c4:	000186a0 	.word	0x000186a0
 80013c8:	68db8bad 	.word	0x68db8bad
 80013cc:	10624dd3 	.word	0x10624dd3
 80013d0:	51eb851f 	.word	0x51eb851f
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
 80013d4:	2c09      	cmp	r4, #9
 80013d6:	f240 80b4 	bls.w	8001542 <printf+0xad6>
                        else         lHex+='A'-10;
 80013da:	f104 0037 	add.w	r0, r4, #55	; 0x37
                        if (!leading_zero) print_byte(lHex);
 80013de:	47b0      	blx	r6
                        else print_byte(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
                        c = s[i];
 80013e0:	f89d c02d 	ldrb.w	ip, [sp, #45]	; 0x2d
                        if (!leading_zero) print_byte(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte(lHex);
 80013e4:	2200      	movs	r2, #0
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 80013e6:	ea5f 131c 	movs.w	r3, ip, lsr #4
                for (i=0; i<4; i++){
                        c = s[i];
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 80013ea:	f00c 040f 	and.w	r4, ip, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 80013ee:	f47f ad6c 	bne.w	8000eca <printf+0x45e>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte(uHex);
 80013f2:	2a00      	cmp	r2, #0
 80013f4:	f000 80c8 	beq.w	8001588 <printf+0xb1c>
 80013f8:	2301      	movs	r3, #1
                        
                        if (lHex!=0 || i==3) leading_zero = false;
 80013fa:	2c00      	cmp	r4, #0
 80013fc:	f43f ad6f 	beq.w	8000ede <printf+0x472>
                        if (lHex<10) lHex+='0';
 8001400:	2c09      	cmp	r4, #9
 8001402:	f240 80a1 	bls.w	8001548 <printf+0xadc>
                        else         lHex+='A'-10;
 8001406:	f104 0037 	add.w	r0, r4, #55	; 0x37
                        if (!leading_zero) print_byte(lHex);
 800140a:	47b0      	blx	r6
                        else print_byte(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
                        c = s[i];
 800140c:	f89d e02e 	ldrb.w	lr, [sp, #46]	; 0x2e
                        if (!leading_zero) print_byte(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte(lHex);
 8001410:	2200      	movs	r2, #0
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8001412:	ea5f 131e 	movs.w	r3, lr, lsr #4
                for (i=0; i<4; i++){
                        c = s[i];
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8001416:	f00e 040f 	and.w	r4, lr, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 800141a:	f47f ad6c 	bne.w	8000ef6 <printf+0x48a>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte(uHex);
 800141e:	2a00      	cmp	r2, #0
 8001420:	f000 8095 	beq.w	800154e <printf+0xae2>
 8001424:	2301      	movs	r3, #1
                        
                        if (lHex!=0 || i==3) leading_zero = false;
 8001426:	2c00      	cmp	r4, #0
 8001428:	f43f ad6f 	beq.w	8000f0a <printf+0x49e>
                        if (lHex<10) lHex+='0';
 800142c:	2c09      	cmp	r4, #9
 800142e:	f240 8091 	bls.w	8001554 <printf+0xae8>
                        else         lHex+='A'-10;
 8001432:	f104 0037 	add.w	r0, r4, #55	; 0x37
                        if (!leading_zero) print_byte(lHex);
 8001436:	47b0      	blx	r6
                        else print_byte(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
                        c = s[i];
 8001438:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
                        if (!leading_zero) print_byte(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte(lHex);
 800143c:	2200      	movs	r2, #0
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 800143e:	0903      	lsrs	r3, r0, #4
                for (i=0; i<4; i++){
                        c = s[i];
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8001440:	f000 040f 	and.w	r4, r0, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8001444:	f47f ad6c 	bne.w	8000f20 <printf+0x4b4>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte(uHex);
 8001448:	2a00      	cmp	r2, #0
 800144a:	f47f ad6f 	bne.w	8000f2c <printf+0x4c0>
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 800144e:	f103 0030 	add.w	r0, r3, #48	; 0x30
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte(uHex);
 8001452:	47b0      	blx	r6
 8001454:	e56a      	b.n	8000f2c <printf+0x4c0>
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
 8001456:	f104 0030 	add.w	r0, r4, #48	; 0x30
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte(lHex);
 800145a:	47b0      	blx	r6
 800145c:	f7ff bb11 	b.w	8000a82 <printf+0x16>
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8001460:	2b09      	cmp	r3, #9
 8001462:	d97a      	bls.n	800155a <printf+0xaee>
                        else         uHex+='A'-10;
 8001464:	f103 0037 	add.w	r0, r3, #55	; 0x37
                        if (!leading_zero) print_byte(uHex);
 8001468:	4e49      	ldr	r6, [pc, #292]	; (8001590 <printf+0xb24>)
 800146a:	47b0      	blx	r6
 800146c:	2300      	movs	r3, #0
 800146e:	e51d      	b.n	8000eac <printf+0x440>
                if (*s=='%'){
                        s++;
                        // s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
                        format[0] = '%';
                        for (i=1; i<10;){
                                if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%'){
 8001470:	2309      	movs	r3, #9
 8001472:	e615      	b.n	80010a0 <printf+0x634>


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8001474:	2809      	cmp	r0, #9
 8001476:	f240 8085 	bls.w	8001584 <printf+0xb18>
                        else         uHex+='A'-10;
 800147a:	3037      	adds	r0, #55	; 0x37
                        // upper 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte('0');
                                else       print_byte(' ');
                        }
                        else print_byte(uHex);
 800147c:	9202      	str	r2, [sp, #8]
 800147e:	9301      	str	r3, [sp, #4]
 8001480:	47d0      	blx	sl
 8001482:	9a02      	ldr	r2, [sp, #8]
 8001484:	2100      	movs	r1, #0
 8001486:	9b01      	ldr	r3, [sp, #4]
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
 8001488:	2a00      	cmp	r2, #0
 800148a:	f47f aef0 	bne.w	800126e <printf+0x802>
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;


                        // lower 4 bits 출력.
                        if (leading_zero){
 800148e:	2900      	cmp	r1, #0
 8001490:	d075      	beq.n	800157e <printf+0xb12>
                                if (flag0) print_byte('0');
 8001492:	2c00      	cmp	r4, #0
 8001494:	d12f      	bne.n	80014f6 <printf+0xa8a>
                                else       print_byte(' ');
 8001496:	9301      	str	r3, [sp, #4]
 8001498:	2020      	movs	r0, #32
 800149a:	47d0      	blx	sl
 800149c:	2201      	movs	r2, #1
 800149e:	9b01      	ldr	r3, [sp, #4]
 80014a0:	e6ee      	b.n	8001280 <printf+0x814>
                        else         lHex+='A'-10;


                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte('0');
 80014a2:	2c00      	cmp	r4, #0
 80014a4:	d039      	beq.n	800151a <printf+0xaae>
 80014a6:	2030      	movs	r0, #48	; 0x30
 80014a8:	4a39      	ldr	r2, [pc, #228]	; (8001590 <printf+0xb24>)
 80014aa:	4790      	blx	r2
 80014ac:	2101      	movs	r1, #1
                                else       print_byte(' ');
                        }
                        else print_byte(lHex);
                        
                        flagcnt--;
 80014ae:	980a      	ldr	r0, [sp, #40]	; 0x28
 80014b0:	1e42      	subs	r2, r0, #1
 80014b2:	920a      	str	r2, [sp, #40]	; 0x28
 80014b4:	e6ae      	b.n	8001214 <printf+0x7a8>
                        else         uHex+='A'-10;


                        // upper 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte('0');
 80014b6:	2030      	movs	r0, #48	; 0x30
 80014b8:	47d0      	blx	sl
 80014ba:	2301      	movs	r3, #1
 80014bc:	e729      	b.n	8001312 <printf+0x8a6>
                        else         lHex+='A'-10;


                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte('0');
 80014be:	2030      	movs	r0, #48	; 0x30
 80014c0:	47d0      	blx	sl
 80014c2:	2201      	movs	r2, #1
 80014c4:	e72e      	b.n	8001324 <printf+0x8b8>
                                else       print_byte(' ');
 80014c6:	2020      	movs	r0, #32
 80014c8:	47d0      	blx	sl
 80014ca:	2201      	movs	r2, #1
 80014cc:	e714      	b.n	80012f8 <printf+0x88c>


                        // upper 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte('0');
                                else       print_byte(' ');
 80014ce:	2020      	movs	r0, #32
 80014d0:	47d0      	blx	sl
 80014d2:	2301      	movs	r3, #1
 80014d4:	e707      	b.n	80012e6 <printf+0x87a>
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;


                        // lower 4 bits 출력.
                        if (leading_zero){
 80014d6:	2a00      	cmp	r2, #0
 80014d8:	d048      	beq.n	800156c <printf+0xb00>
                                if (flag0) print_byte('0');
 80014da:	b9d4      	cbnz	r4, 8001512 <printf+0xaa6>
                                else       print_byte(' ');
 80014dc:	2020      	movs	r0, #32
 80014de:	47d0      	blx	sl
 80014e0:	2201      	movs	r2, #1
 80014e2:	e6ee      	b.n	80012c2 <printf+0x856>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;


                        // upper 4 bits 출력.
                        if (leading_zero){
 80014e4:	2a00      	cmp	r2, #0
 80014e6:	d047      	beq.n	8001578 <printf+0xb0c>
                                if (flag0) print_byte('0');
 80014e8:	b96c      	cbnz	r4, 8001506 <printf+0xa9a>
                                else       print_byte(' ');
 80014ea:	9301      	str	r3, [sp, #4]
 80014ec:	2020      	movs	r0, #32
 80014ee:	47d0      	blx	sl
 80014f0:	2201      	movs	r2, #1
 80014f2:	9b01      	ldr	r3, [sp, #4]
 80014f4:	e6db      	b.n	80012ae <printf+0x842>
                        else         lHex+='A'-10;


                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte('0');
 80014f6:	9301      	str	r3, [sp, #4]
 80014f8:	2030      	movs	r0, #48	; 0x30
 80014fa:	47d0      	blx	sl
 80014fc:	2201      	movs	r2, #1
 80014fe:	9b01      	ldr	r3, [sp, #4]
 8001500:	e6be      	b.n	8001280 <printf+0x814>
                        else         uHex+='A'-10;


                        // upper 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte('0');
 8001502:	2030      	movs	r0, #48	; 0x30
 8001504:	e6aa      	b.n	800125c <printf+0x7f0>
 8001506:	9301      	str	r3, [sp, #4]
 8001508:	2030      	movs	r0, #48	; 0x30
 800150a:	47d0      	blx	sl
 800150c:	2201      	movs	r2, #1
 800150e:	9b01      	ldr	r3, [sp, #4]
 8001510:	e6cd      	b.n	80012ae <printf+0x842>
                        else         lHex+='A'-10;


                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte('0');
 8001512:	2030      	movs	r0, #48	; 0x30
 8001514:	47d0      	blx	sl
 8001516:	2201      	movs	r2, #1
 8001518:	e6d3      	b.n	80012c2 <printf+0x856>


                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte('0');
                                else       print_byte(' ');
 800151a:	2020      	movs	r0, #32
 800151c:	4b1c      	ldr	r3, [pc, #112]	; (8001590 <printf+0xb24>)
 800151e:	4798      	blx	r3
 8001520:	2101      	movs	r1, #1
 8001522:	e7c4      	b.n	80014ae <printf+0xa42>
{
        long retval=num;
        cnt--;


        while (cnt--){
 8001524:	1e8c      	subs	r4, r1, #2
        return;
}

int Power(int num, int cnt)
{
        long retval=num;
 8001526:	230a      	movs	r3, #10
        cnt--;


        while (cnt--){
 8001528:	3903      	subs	r1, #3
 800152a:	e473      	b.n	8000e14 <printf+0x3a8>
        return;
}

int Power(int num, int cnt)
{
        long retval=num;
 800152c:	240a      	movs	r4, #10
 800152e:	e48e      	b.n	8000e4e <printf+0x3e2>
}

void PrintHex(char *fmt, int l){
        int                i, j;
        char        c, *s=fmt, tol[10];
        bool        flag0=false, flagl=false;        // flags.
 8001530:	461c      	mov	r4, r3
 8001532:	f7ff bbc2 	b.w	8000cba <printf+0x24e>
                        }
                        else print_byte(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
                        if (lHex<10) lHex+='0';
 8001536:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800153a:	e6f1      	b.n	8001320 <printf+0x8b4>


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 800153c:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8001540:	e6e5      	b.n	800130e <printf+0x8a2>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
 8001542:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8001546:	e74a      	b.n	80013de <printf+0x972>
 8001548:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800154c:	e75d      	b.n	800140a <printf+0x99e>
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 800154e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8001552:	e4d5      	b.n	8000f00 <printf+0x494>
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
 8001554:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8001558:	e76d      	b.n	8001436 <printf+0x9ca>
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 800155a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800155e:	e783      	b.n	8001468 <printf+0x9fc>
                        }
                        else print_byte(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
                        if (lHex<10) lHex+='0';
 8001560:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8001564:	e6c6      	b.n	80012f4 <printf+0x888>


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8001566:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800156a:	e6ba      	b.n	80012e2 <printf+0x876>
                        }
                        else print_byte(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
                        if (lHex<10) lHex+='0';
 800156c:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8001570:	e6a5      	b.n	80012be <printf+0x852>
                        c = s[(8-(flagcnt+1))/2]; // 홀수 일때 그 위치를 포함하는 곳의 값을 가져 옵니다.
                        
                        // lower 4 bits를 가져와서 ascii code로.
                        lHex = ((c>>0)&0x0f);
                        if (lHex!=0) leading_zero=false;
                        if (lHex<10) lHex+='0';
 8001572:	3330      	adds	r3, #48	; 0x30
 8001574:	f7ff bbc6 	b.w	8000d04 <printf+0x298>


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8001578:	f101 0030 	add.w	r0, r1, #48	; 0x30
 800157c:	e693      	b.n	80012a6 <printf+0x83a>
                        }
                        else print_byte(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
                        if (lHex<10) lHex+='0';
 800157e:	f102 0030 	add.w	r0, r2, #48	; 0x30
 8001582:	e679      	b.n	8001278 <printf+0x80c>


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8001584:	3030      	adds	r0, #48	; 0x30
 8001586:	e779      	b.n	800147c <printf+0xa10>
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8001588:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800158c:	e4a2      	b.n	8000ed4 <printf+0x468>
 800158e:	bf00      	nop
 8001590:	08001819 	.word	0x08001819

08001594 <Hw_StartUp_Init>:
     			보드 리셋시에 처음 실행되는 함수
     ARG     : 	void
     RET     : 	void
---------------------------------------------------------------------------*/
void Hw_StartUp_Init(void)
{
 8001594:	4668      	mov	r0, sp
 8001596:	f020 0107 	bic.w	r1, r0, #7
 800159a:	468d      	mov	sp, r1
 800159c:	b579      	push	{r0, r3, r4, r5, r6, lr}
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 800159e:	492b      	ldr	r1, [pc, #172]	; (800164c <zero_loop+0x5a>)
 80015a0:	4c2b      	ldr	r4, [pc, #172]	; (8001650 <zero_loop+0x5e>)
 80015a2:	42a1      	cmp	r1, r4
 80015a4:	d221      	bcs.n	80015ea <Hw_StartUp_Init+0x56>
 80015a6:	482b      	ldr	r0, [pc, #172]	; (8001654 <zero_loop+0x62>)
	{
		*(pulDest++) = *(pulSrc++);
 80015a8:	460b      	mov	r3, r1
 80015aa:	4602      	mov	r2, r0
 80015ac:	f852 6b04 	ldr.w	r6, [r2], #4
 80015b0:	43cd      	mvns	r5, r1
 80015b2:	f843 6b04 	str.w	r6, [r3], #4
 80015b6:	1965      	adds	r5, r4, r5
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 80015b8:	42a3      	cmp	r3, r4
 80015ba:	f3c5 0580 	ubfx	r5, r5, #2, #1
 80015be:	d214      	bcs.n	80015ea <Hw_StartUp_Init+0x56>
 80015c0:	b13d      	cbz	r5, 80015d2 <Hw_StartUp_Init+0x3e>
	{
		*(pulDest++) = *(pulSrc++);
 80015c2:	6815      	ldr	r5, [r2, #0]
 80015c4:	f100 0208 	add.w	r2, r0, #8
 80015c8:	601d      	str	r5, [r3, #0]
 80015ca:	f101 0308 	add.w	r3, r1, #8
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 80015ce:	42a3      	cmp	r3, r4
 80015d0:	d20b      	bcs.n	80015ea <Hw_StartUp_Init+0x56>
	{
		*(pulDest++) = *(pulSrc++);
 80015d2:	4610      	mov	r0, r2
 80015d4:	f850 5b04 	ldr.w	r5, [r0], #4
 80015d8:	4619      	mov	r1, r3
 80015da:	f841 5b04 	str.w	r5, [r1], #4
 80015de:	6855      	ldr	r5, [r2, #4]
 80015e0:	1d02      	adds	r2, r0, #4
 80015e2:	605d      	str	r5, [r3, #4]
 80015e4:	1d0b      	adds	r3, r1, #4
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 80015e6:	42a3      	cmp	r3, r4
 80015e8:	d3f3      	bcc.n	80015d2 <Hw_StartUp_Init+0x3e>
		*(pulDest++) = *(pulSrc++);
	}
  
	/* Zero fill the bss segment.  This is done with inline assembly since this
	   will clear the value of pulDest if it is not kept in a register. */
	__asm("  ldr     r0, =_sbss\n"
 80015ea:	481e      	ldr	r0, [pc, #120]	; (8001664 <zero_loop+0x72>)
 80015ec:	491e      	ldr	r1, [pc, #120]	; (8001668 <zero_loop+0x76>)
 80015ee:	f04f 0200 	mov.w	r2, #0

080015f2 <zero_loop>:
 80015f2:	4288      	cmp	r0, r1
 80015f4:	bfb8      	it	lt
 80015f6:	f840 2b04 	strlt.w	r2, [r0], #4
 80015fa:	dbfa      	blt.n	80015f2 <zero_loop>
	
    // HSI or HSE 선택
            
    //-- CR_HSEON_Set
    //
	REG_RCC_CR |= (1<<16);	
 80015fc:	4916      	ldr	r1, [pc, #88]	; (8001658 <zero_loop+0x66>)
     RET     : 	void
---------------------------------------------------------------------------*/
void Hw_StartUp_Init(void)
{
	
	u32 TimeOutCnt  = 0;
 80015fe:	2300      	movs	r3, #0
	
    // HSI or HSE 선택
            
    //-- CR_HSEON_Set
    //
	REG_RCC_CR |= (1<<16);	
 8001600:	6808      	ldr	r0, [r1, #0]
		
	//-- 설정된 clock 이 설정 되었는지 확인
	//
	do
	{	
		HSEStatus = REG_RCC_CR & (1<<17);	// HSE 인경우
 8001602:	460a      	mov	r2, r1
	
    // HSI or HSE 선택
            
    //-- CR_HSEON_Set
    //
	REG_RCC_CR |= (1<<16);	
 8001604:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8001608:	6008      	str	r0, [r1, #0]
 800160a:	e006      	b.n	800161a <zero_loop+0x28>
		
	//-- 설정된 clock 이 설정 되었는지 확인
	//
	do
	{	
		HSEStatus = REG_RCC_CR & (1<<17);	// HSE 인경우
 800160c:	6810      	ldr	r0, [r2, #0]
		TimeOutCnt++;		
	} while( (HSEStatus == 0) && (TimeOutCnt < 1280) );
 800160e:	f410 3f00 	tst.w	r0, #131072	; 0x20000
 8001612:	d107      	bne.n	8001624 <zero_loop+0x32>
 8001614:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001618:	d004      	beq.n	8001624 <zero_loop+0x32>
		
	//-- 설정된 clock 이 설정 되었는지 확인
	//
	do
	{	
		HSEStatus = REG_RCC_CR & (1<<17);	// HSE 인경우
 800161a:	6811      	ldr	r1, [r2, #0]
		TimeOutCnt++;		
 800161c:	3302      	adds	r3, #2
	} while( (HSEStatus == 0) && (TimeOutCnt < 1280) );
 800161e:	f411 3f00 	tst.w	r1, #131072	; 0x20000
 8001622:	d0f3      	beq.n	800160c <zero_loop+0x1a>
  

	//-- FLASH Access 타이밍 설정
	//
	REG_FLASH_ACR |=  (1<<4);	// Prefetch buffer enable
 8001624:	490d      	ldr	r1, [pc, #52]	; (800165c <zero_loop+0x6a>)
 8001626:	680b      	ldr	r3, [r1, #0]
 8001628:	f043 0010 	orr.w	r0, r3, #16
 800162c:	6008      	str	r0, [r1, #0]
	REG_FLASH_ACR &= ~(3<<0);	// LATENCY Clear
 800162e:	680a      	ldr	r2, [r1, #0]
 8001630:	f022 0303 	bic.w	r3, r2, #3
 8001634:	600b      	str	r3, [r1, #0]
	REG_FLASH_ACR |=  (2<<0);	// LATENCY = two wait
 8001636:	6808      	ldr	r0, [r1, #0]


    main();
 8001638:	4b09      	ldr	r3, [pc, #36]	; (8001660 <zero_loop+0x6e>)

	//-- FLASH Access 타이밍 설정
	//
	REG_FLASH_ACR |=  (1<<4);	// Prefetch buffer enable
	REG_FLASH_ACR &= ~(3<<0);	// LATENCY Clear
	REG_FLASH_ACR |=  (2<<0);	// LATENCY = two wait
 800163a:	f040 0202 	orr.w	r2, r0, #2
 800163e:	600a      	str	r2, [r1, #0]


    main();
 8001640:	4798      	blx	r3

}
 8001642:	e8bd 4079 	ldmia.w	sp!, {r0, r3, r4, r5, r6, lr}
 8001646:	4685      	mov	sp, r0
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	20000000 	.word	0x20000000
 8001650:	200000e4 	.word	0x200000e4
 8001654:	08004b98 	.word	0x08004b98
 8001658:	40021000 	.word	0x40021000
 800165c:	40022000 	.word	0x40022000
 8001660:	08000019 	.word	0x08000019
 8001664:	20000200 	.word	0x20000200
 8001668:	20001044 	.word	0x20001044

0800166c <Hw_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Init( void )
{
 800166c:	b508      	push	{r3, lr}
	//-- PLL 설정
	//
	Hw_PLL_Init();
 800166e:	4a0e      	ldr	r2, [pc, #56]	; (80016a8 <Hw_Init+0x3c>)
 8001670:	4790      	blx	r2
	
	
	//-- 인터럽트 관련 초기화
	//
	Hw_ISR_Init();
 8001672:	490e      	ldr	r1, [pc, #56]	; (80016ac <Hw_Init+0x40>)
 8001674:	4788      	blx	r1
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
 8001676:	4a0e      	ldr	r2, [pc, #56]	; (80016b0 <Hw_Init+0x44>)
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
 8001678:	480e      	ldr	r0, [pc, #56]	; (80016b4 <Hw_Init+0x48>)
	Hw_ISR_Init();
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
 800167a:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
 800167e:	6013      	str	r3, [r2, #0]
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
 8001680:	490d      	ldr	r1, [pc, #52]	; (80016b8 <Hw_Init+0x4c>)
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
 8001682:	6050      	str	r0, [r2, #4]
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
 8001684:	480d      	ldr	r0, [pc, #52]	; (80016bc <Hw_Init+0x50>)
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
 8001686:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
 800168a:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
 800168e:	6008      	str	r0, [r1, #0]
	
	Hw_Uart_Init();
 8001690:	4b0b      	ldr	r3, [pc, #44]	; (80016c0 <Hw_Init+0x54>)
 8001692:	4798      	blx	r3
	Hw_Led_Init();
 8001694:	4a0b      	ldr	r2, [pc, #44]	; (80016c4 <Hw_Init+0x58>)
 8001696:	4790      	blx	r2
	Hw_Timer_Init();
 8001698:	490b      	ldr	r1, [pc, #44]	; (80016c8 <Hw_Init+0x5c>)
 800169a:	4788      	blx	r1
	Hw_Si47xx_Init();
 800169c:	480b      	ldr	r0, [pc, #44]	; (80016cc <Hw_Init+0x60>)
 800169e:	4780      	blx	r0
	
	Hw_VCom_Init();
 80016a0:	4b0b      	ldr	r3, [pc, #44]	; (80016d0 <Hw_Init+0x64>)
 80016a2:	4798      	blx	r3
}
 80016a4:	bd08      	pop	{r3, pc}
 80016a6:	bf00      	nop
 80016a8:	08001859 	.word	0x08001859
 80016ac:	08001a65 	.word	0x08001a65
 80016b0:	40010800 	.word	0x40010800
 80016b4:	333334b3 	.word	0x333334b3
 80016b8:	40011004 	.word	0x40011004
 80016bc:	33444444 	.word	0x33444444
 80016c0:	080017b1 	.word	0x080017b1
 80016c4:	080018c5 	.word	0x080018c5
 80016c8:	08001ae1 	.word	0x08001ae1
 80016cc:	08002689 	.word	0x08002689
 80016d0:	08001d85 	.word	0x08001d85

080016d4 <Hw_Wait>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Wait( u32 delay )
{
 80016d4:	b082      	sub	sp, #8
    volatile u32 i;
    for ( i = 0 ; i < delay ; i++ ){ };
 80016d6:	2100      	movs	r1, #0
 80016d8:	9101      	str	r1, [sp, #4]
 80016da:	9b01      	ldr	r3, [sp, #4]
 80016dc:	4298      	cmp	r0, r3
 80016de:	d905      	bls.n	80016ec <Hw_Wait+0x18>
 80016e0:	9901      	ldr	r1, [sp, #4]
 80016e2:	1c4b      	adds	r3, r1, #1
 80016e4:	9301      	str	r3, [sp, #4]
 80016e6:	9a01      	ldr	r2, [sp, #4]
 80016e8:	4282      	cmp	r2, r0
 80016ea:	d3f9      	bcc.n	80016e0 <Hw_Wait+0xc>
}
 80016ec:	b002      	add	sp, #8
 80016ee:	4770      	bx	lr

080016f0 <Hw_Wait_Usec>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Wait_Usec( u32 usec )
{
 80016f0:	b082      	sub	sp, #8
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Wait( u32 delay )
{
    volatile u32 i;
    for ( i = 0 ; i < delay ; i++ ){ };
 80016f2:	2100      	movs	r1, #0
 80016f4:	9101      	str	r1, [sp, #4]
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Wait_Usec( u32 usec )
{
    Hw_Wait( usec * 6 );
 80016f6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Wait( u32 delay )
{
    volatile u32 i;
    for ( i = 0 ; i < delay ; i++ ){ };
 80016fa:	9b01      	ldr	r3, [sp, #4]
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Wait_Usec( u32 usec )
{
    Hw_Wait( usec * 6 );
 80016fc:	0042      	lsls	r2, r0, #1
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Wait( u32 delay )
{
    volatile u32 i;
    for ( i = 0 ; i < delay ; i++ ){ };
 80016fe:	429a      	cmp	r2, r3
 8001700:	d905      	bls.n	800170e <Hw_Wait_Usec+0x1e>
 8001702:	9901      	ldr	r1, [sp, #4]
 8001704:	1c48      	adds	r0, r1, #1
 8001706:	9001      	str	r0, [sp, #4]
 8001708:	9b01      	ldr	r3, [sp, #4]
 800170a:	429a      	cmp	r2, r3
 800170c:	d8f9      	bhi.n	8001702 <Hw_Wait_Usec+0x12>
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Wait_Usec( u32 usec )
{
    Hw_Wait( usec * 6 );
}
 800170e:	b002      	add	sp, #8
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop

08001714 <Hw_ISR_UART1_Handler>:


//-- UART1 ISR
//
void Hw_ISR_UART1_Handler(void)
{
 8001714:	b500      	push	{lr}
	u8 UartData;
				
	UartData = REG_USART1_DR;
 8001716:	4805      	ldr	r0, [pc, #20]	; (800172c <Hw_ISR_UART1_Handler+0x18>)


//-- UART1 ISR
//
void Hw_ISR_UART1_Handler(void)
{
 8001718:	b083      	sub	sp, #12
	u8 UartData;
				
	UartData = REG_USART1_DR;
 800171a:	6802      	ldr	r2, [r0, #0]
 800171c:	a902      	add	r1, sp, #8
	
	Hw_Uart_Q_Push( 0, &UartData );
 800171e:	2000      	movs	r0, #0
//
void Hw_ISR_UART1_Handler(void)
{
	u8 UartData;
				
	UartData = REG_USART1_DR;
 8001720:	f801 2d01 	strb.w	r2, [r1, #-1]!
	
	Hw_Uart_Q_Push( 0, &UartData );
 8001724:	4b02      	ldr	r3, [pc, #8]	; (8001730 <Hw_ISR_UART1_Handler+0x1c>)
 8001726:	4798      	blx	r3
}
 8001728:	b003      	add	sp, #12
 800172a:	bd00      	pop	{pc}
 800172c:	40013804 	.word	0x40013804
 8001730:	08001979 	.word	0x08001979

08001734 <Hw_Uart_Open_COM1>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Open_COM1( u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	
 8001734:	b570      	push	{r4, r5, r6, lr}
	Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr = ISR_FuncPtr;
	
	
	//-- Clock Enable
	//
	SET_BIT( REG_RCC_APB2ENR, 14 );		// USART1 Clock Enable
 8001736:	4d12      	ldr	r5, [pc, #72]	; (8001780 <Hw_Uart_Open_COM1+0x4c>)
	//
	
	
	//-- USART1 설정
	//	
	REG_USART1_CR1  = 0 
 8001738:	4c12      	ldr	r4, [pc, #72]	; (8001784 <Hw_Uart_Open_COM1+0x50>)
	Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr = ISR_FuncPtr;
	
	
	//-- Clock Enable
	//
	SET_BIT( REG_RCC_APB2ENR, 14 );		// USART1 Clock Enable
 800173a:	682b      	ldr	r3, [r5, #0]
	REG_USART1_CR1  = 0 
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART1_CR2  = ( 0 << 12 );		// 1 stop bit	
 800173c:	2200      	movs	r2, #0
	Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr = ISR_FuncPtr;
	
	
	//-- Clock Enable
	//
	SET_BIT( REG_RCC_APB2ENR, 14 );		// USART1 Clock Enable
 800173e:	f443 4680 	orr.w	r6, r3, #16384	; 0x4000
 8001742:	602e      	str	r6, [r5, #0]
	//
	
	
	//-- USART1 설정
	//	
	REG_USART1_CR1  = 0 
 8001744:	250c      	movs	r5, #12
 8001746:	6025      	str	r5, [r4, #0]
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART1_CR2  = ( 0 << 12 );		// 1 stop bit	
 8001748:	4d0f      	ldr	r5, [pc, #60]	; (8001788 <Hw_Uart_Open_COM1+0x54>)
					| (  1 << 0 );		// DIV Fraction
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
 800174a:	4b10      	ldr	r3, [pc, #64]	; (800178c <Hw_Uart_Open_COM1+0x58>)
	REG_USART1_CR3  = 0;
	
	
	//-- 115200bps로 통신 속도 설정
	//
	REG_USART1_BRR  = 0
 800174c:	f240 2671 	movw	r6, #625	; 0x271
	REG_USART1_CR1  = 0 
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART1_CR2  = ( 0 << 12 );		// 1 stop bit	
 8001750:	602a      	str	r2, [r5, #0]
	REG_USART1_CR3  = 0;
 8001752:	606a      	str	r2, [r5, #4]
	
	
	//-- 115200bps로 통신 속도 설정
	//
	REG_USART1_BRR  = 0
 8001754:	f845 6c08 	str.w	r6, [r5, #-8]
					| (  1 << 0 );		// DIV Fraction
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
 8001758:	681e      	ldr	r6, [r3, #0]
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Open_COM1( u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	

	Hw_Uart_Ch[HW_UART_COM1].Baud 		 = BaudData;
 800175a:	4d0d      	ldr	r5, [pc, #52]	; (8001790 <Hw_Uart_Open_COM1+0x5c>)
					| (  1 << 0 );		// DIV Fraction
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
 800175c:	f046 0620 	orr.w	r6, r6, #32
 8001760:	601e      	str	r6, [r3, #0]
	SET_BIT( REG_USART1_CR1, 5 );				// RX 인터럽트 활성화
 8001762:	6823      	ldr	r3, [r4, #0]
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Open_COM1( u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	

	Hw_Uart_Ch[HW_UART_COM1].Baud 		 = BaudData;
 8001764:	6068      	str	r0, [r5, #4]
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
	SET_BIT( REG_USART1_CR1, 5 );				// RX 인터럽트 활성화
 8001766:	f043 0320 	orr.w	r3, r3, #32
---------------------------------------------------------------------------*/
void Hw_Uart_Open_COM1( u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	

	Hw_Uart_Ch[HW_UART_COM1].Baud 		 = BaudData;
	Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr = ISR_FuncPtr;
 800176a:	60a9      	str	r1, [r5, #8]
	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
	SET_BIT( REG_USART1_CR1, 5 );				// RX 인터럽트 활성화
	
	Hw_ISR_SetIRQFunc( 37, (u32)Hw_ISR_UART1_Handler, 0 );
 800176c:	2025      	movs	r0, #37	; 0x25
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
	SET_BIT( REG_USART1_CR1, 5 );				// RX 인터럽트 활성화
 800176e:	6023      	str	r3, [r4, #0]
	
	Hw_ISR_SetIRQFunc( 37, (u32)Hw_ISR_UART1_Handler, 0 );
 8001770:	4908      	ldr	r1, [pc, #32]	; (8001794 <Hw_Uart_Open_COM1+0x60>)
 8001772:	4b09      	ldr	r3, [pc, #36]	; (8001798 <Hw_Uart_Open_COM1+0x64>)
 8001774:	4798      	blx	r3
	
	REG_USART1_CR1 |= ( 1 << 13 );	    // USART Enable
 8001776:	6820      	ldr	r0, [r4, #0]
 8001778:	f440 5300 	orr.w	r3, r0, #8192	; 0x2000
 800177c:	6023      	str	r3, [r4, #0]
}
 800177e:	bd70      	pop	{r4, r5, r6, pc}
 8001780:	40021018 	.word	0x40021018
 8001784:	4001380c 	.word	0x4001380c
 8001788:	40013810 	.word	0x40013810
 800178c:	e000e104 	.word	0xe000e104
 8001790:	200002cc 	.word	0x200002cc
 8001794:	08001715 	.word	0x08001715
 8001798:	08001a75 	.word	0x08001a75

0800179c <Hw_Uart_Open>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Open( u8 Ch, u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	
 800179c:	b508      	push	{r3, lr}
	switch( Ch )
 800179e:	b918      	cbnz	r0, 80017a8 <Hw_Uart_Open+0xc>
	{
		case HW_UART_COM1:
			Hw_Uart_Open_COM1( BaudData, ISR_FuncPtr );
 80017a0:	4608      	mov	r0, r1
 80017a2:	4b02      	ldr	r3, [pc, #8]	; (80017ac <Hw_Uart_Open+0x10>)
 80017a4:	4611      	mov	r1, r2
 80017a6:	4798      	blx	r3
 80017a8:	bd08      	pop	{r3, pc}
 80017aa:	bf00      	nop
 80017ac:	08001735 	.word	0x08001735

080017b0 <Hw_Uart_Init>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Init( void )
{
 80017b0:	b510      	push	{r4, lr}
	u32 i;
	
	Hw_Uart_Q_Init();
 80017b2:	480a      	ldr	r0, [pc, #40]	; (80017dc <Hw_Uart_Init+0x2c>)
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 80017b4:	4c0a      	ldr	r4, [pc, #40]	; (80017e0 <Hw_Uart_Init+0x30>)
---------------------------------------------------------------------------*/
void Hw_Uart_Init( void )
{
	u32 i;
	
	Hw_Uart_Q_Init();
 80017b6:	4780      	blx	r0
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 80017b8:	2300      	movs	r3, #0
		Hw_Uart_Ch[i].ISR_FuncPtr = NULL;
	}	
	
	
	Hw_Uart_Open( HW_UART_COM1, 115200, NULL );
 80017ba:	4618      	mov	r0, r3
 80017bc:	461a      	mov	r2, r3
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 80017be:	6063      	str	r3, [r4, #4]
		Hw_Uart_Ch[i].ISR_FuncPtr = NULL;
 80017c0:	60a3      	str	r3, [r4, #8]
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 80017c2:	6123      	str	r3, [r4, #16]
		Hw_Uart_Ch[i].ISR_FuncPtr = NULL;
 80017c4:	6163      	str	r3, [r4, #20]
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 80017c6:	61e3      	str	r3, [r4, #28]
		Hw_Uart_Ch[i].ISR_FuncPtr = NULL;
 80017c8:	6223      	str	r3, [r4, #32]
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 80017ca:	62a3      	str	r3, [r4, #40]	; 0x28
		Hw_Uart_Ch[i].ISR_FuncPtr = NULL;
 80017cc:	62e3      	str	r3, [r4, #44]	; 0x2c
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 80017ce:	6363      	str	r3, [r4, #52]	; 0x34
		Hw_Uart_Ch[i].ISR_FuncPtr = NULL;
 80017d0:	63a3      	str	r3, [r4, #56]	; 0x38
	}	
	
	
	Hw_Uart_Open( HW_UART_COM1, 115200, NULL );
 80017d2:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80017d6:	4b03      	ldr	r3, [pc, #12]	; (80017e4 <Hw_Uart_Init+0x34>)
 80017d8:	4798      	blx	r3
}
 80017da:	bd10      	pop	{r4, pc}
 80017dc:	08001919 	.word	0x08001919
 80017e0:	200002cc 	.word	0x200002cc
 80017e4:	0800179d 	.word	0x0800179d

080017e8 <Hw_Uart_Getch>:
			: 시리얼 포트에서 문자 1바이트 읽는다.
     ARG
     RET
---------------------------------------------------------------------------*/
u8 Hw_Uart_Getch( u8 Ch )
{
 80017e8:	b530      	push	{r4, r5, lr}
	u8 Uart_GetData = 0;
 80017ea:	2300      	movs	r3, #0
			: 시리얼 포트에서 문자 1바이트 읽는다.
     ARG
     RET
---------------------------------------------------------------------------*/
u8 Hw_Uart_Getch( u8 Ch )
{
 80017ec:	b083      	sub	sp, #12
 80017ee:	4d08      	ldr	r5, [pc, #32]	; (8001810 <Hw_Uart_Getch+0x28>)
 80017f0:	4604      	mov	r4, r0
	u8 Uart_GetData = 0;
 80017f2:	f88d 3007 	strb.w	r3, [sp, #7]

	while( 1 )
	{
		// 버퍼에 데이터 들어올때까지 기다린다.
		if( HW_UART_Q_VAILD(Ch) > 0 ) break;
 80017f6:	4620      	mov	r0, r4
 80017f8:	47a8      	blx	r5
 80017fa:	2800      	cmp	r0, #0
 80017fc:	d0fb      	beq.n	80017f6 <Hw_Uart_Getch+0xe>
	}

	Hw_Uart_Q_Pop( Ch, &Uart_GetData );
 80017fe:	4620      	mov	r0, r4
 8001800:	f10d 0107 	add.w	r1, sp, #7
 8001804:	4a03      	ldr	r2, [pc, #12]	; (8001814 <Hw_Uart_Getch+0x2c>)
 8001806:	4790      	blx	r2

	return Uart_GetData;
}
 8001808:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800180c:	b003      	add	sp, #12
 800180e:	bd30      	pop	{r4, r5, pc}
 8001810:	08001945 	.word	0x08001945
 8001814:	080019f1 	.word	0x080019f1

08001818 <print_byte>:
#if HW_USE_USB_VCOM == 1
	if (c == '\n') Hw_VCom_Putch('\r');
    
    Hw_VCom_Putch(c);
#else	
	if (c == '\n') Hw_Uart_Putch(HW_UART_COM1, '\r');
 8001818:	280a      	cmp	r0, #10
 800181a:	d008      	beq.n	800182e <print_byte+0x16>
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Uart_Putch( u8 Ch,  char Uart_PutData )
{
    while( !(REG_USART1_SR & 0x80) );
 800181c:	4a08      	ldr	r2, [pc, #32]	; (8001840 <print_byte+0x28>)
    
    Hw_VCom_Putch(c);
#else	
	if (c == '\n') Hw_Uart_Putch(HW_UART_COM1, '\r');
    
    Hw_Uart_Putch(HW_UART_COM1, c);
 800181e:	b2c0      	uxtb	r0, r0
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Uart_Putch( u8 Ch,  char Uart_PutData )
{
    while( !(REG_USART1_SR & 0x80) );
 8001820:	6813      	ldr	r3, [r2, #0]
 8001822:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001826:	d0fb      	beq.n	8001820 <print_byte+0x8>
    
    REG_USART1_DR = Uart_PutData;
 8001828:	4a06      	ldr	r2, [pc, #24]	; (8001844 <print_byte+0x2c>)
 800182a:	6010      	str	r0, [r2, #0]
#else	
	if (c == '\n') Hw_Uart_Putch(HW_UART_COM1, '\r');
    
    Hw_Uart_Putch(HW_UART_COM1, c);
#endif    
}
 800182c:	4770      	bx	lr
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Uart_Putch( u8 Ch,  char Uart_PutData )
{
    while( !(REG_USART1_SR & 0x80) );
 800182e:	4a04      	ldr	r2, [pc, #16]	; (8001840 <print_byte+0x28>)
 8001830:	6813      	ldr	r3, [r2, #0]
 8001832:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001836:	d0fb      	beq.n	8001830 <print_byte+0x18>
    
    REG_USART1_DR = Uart_PutData;
 8001838:	4902      	ldr	r1, [pc, #8]	; (8001844 <print_byte+0x2c>)
 800183a:	220d      	movs	r2, #13
 800183c:	600a      	str	r2, [r1, #0]
 800183e:	e7ed      	b.n	800181c <print_byte+0x4>
 8001840:	40013800 	.word	0x40013800
 8001844:	40013804 	.word	0x40013804

08001848 <get_byte>:
#endif    
}


char get_byte(void)
{
 8001848:	b508      	push	{r3, lr}
	char Ch;
	
#if HW_USE_USB_VCOM == 1	
	Ch = Hw_VCom_Getch();
#else	
	Ch = Hw_Uart_Getch(HW_UART_COM1);
 800184a:	2000      	movs	r0, #0
 800184c:	4b01      	ldr	r3, [pc, #4]	; (8001854 <get_byte+0xc>)
 800184e:	4798      	blx	r3
#endif
	
	return Ch;
}
 8001850:	bd08      	pop	{r3, pc}
 8001852:	bf00      	nop
 8001854:	080017e9 	.word	0x080017e9

08001858 <Hw_PLL_Init>:
{
	
#if	CLOCK_EXT == 1
	//-- PLL 설정 72Mhz로 설정함
	//
	REG_RCC_CFGR &= ~(0xF<<18 | 0x1<<17 | 0x1<<16);
 8001858:	4b17      	ldr	r3, [pc, #92]	; (80018b8 <Hw_PLL_Init+0x60>)
	REG_RCC_CFGR |=  (0x7<<18 | 0x1<<16);			// 8MHz
    REG_RCC_CR   |=  0x01 << 24;                    // PLLON
 800185a:	4918      	ldr	r1, [pc, #96]	; (80018bc <Hw_PLL_Init+0x64>)
{
	
#if	CLOCK_EXT == 1
	//-- PLL 설정 72Mhz로 설정함
	//
	REG_RCC_CFGR &= ~(0xF<<18 | 0x1<<17 | 0x1<<16);
 800185c:	6818      	ldr	r0, [r3, #0]
	REG_RCC_CFGR |=  (0x7<<18 | 0x1<<16);			// 8MHz
    REG_RCC_CR   |=  0x01 << 24;                    // PLLON

	while( (REG_RCC_CR & (1<<25)) == 0 );			// PLLRDY
 800185e:	460a      	mov	r2, r1
{
	
#if	CLOCK_EXT == 1
	//-- PLL 설정 72Mhz로 설정함
	//
	REG_RCC_CFGR &= ~(0xF<<18 | 0x1<<17 | 0x1<<16);
 8001860:	f420 107c 	bic.w	r0, r0, #4128768	; 0x3f0000
 8001864:	6018      	str	r0, [r3, #0]
	REG_RCC_CFGR |=  (0x7<<18 | 0x1<<16);			// 8MHz
 8001866:	6818      	ldr	r0, [r3, #0]
 8001868:	f440 10e8 	orr.w	r0, r0, #1900544	; 0x1d0000
 800186c:	6018      	str	r0, [r3, #0]
    REG_RCC_CR   |=  0x01 << 24;                    // PLLON
 800186e:	6808      	ldr	r0, [r1, #0]
 8001870:	f040 7380 	orr.w	r3, r0, #16777216	; 0x1000000
 8001874:	600b      	str	r3, [r1, #0]

	while( (REG_RCC_CR & (1<<25)) == 0 );			// PLLRDY
 8001876:	6811      	ldr	r1, [r2, #0]
 8001878:	f011 7f00 	tst.w	r1, #33554432	; 0x2000000
 800187c:	d0fb      	beq.n	8001876 <Hw_PLL_Init+0x1e>
    /////Bits 1:0 SW : System clock switch
    //00: HSI selected as system clock
    //01: HSE selected as system clock
    //10: PLL selected as system clock   <----------------- 선택됨
    //11: not allowed
	REG_RCC_CFGR &= ~0x3;
 800187e:	4b0e      	ldr	r3, [pc, #56]	; (80018b8 <Hw_PLL_Init+0x60>)
 8001880:	6819      	ldr	r1, [r3, #0]
	// USB 72M * 2 / 3 = 48Mhz
	//
	CLR_BIT( REG_RCC_CFGR, 22 );

    
    while( (REG_RCC_CFGR & 0xC) != 0x08 );
 8001882:	461a      	mov	r2, r3
    /////Bits 1:0 SW : System clock switch
    //00: HSI selected as system clock
    //01: HSE selected as system clock
    //10: PLL selected as system clock   <----------------- 선택됨
    //11: not allowed
	REG_RCC_CFGR &= ~0x3;
 8001884:	f021 0003 	bic.w	r0, r1, #3
 8001888:	6018      	str	r0, [r3, #0]
	REG_RCC_CFGR |=  0x2;
 800188a:	6819      	ldr	r1, [r3, #0]
 800188c:	f041 0002 	orr.w	r0, r1, #2
 8001890:	6018      	str	r0, [r3, #0]

	// USB 72M * 2 / 3 = 48Mhz
	//
	CLR_BIT( REG_RCC_CFGR, 22 );
 8001892:	6819      	ldr	r1, [r3, #0]
 8001894:	f421 0080 	bic.w	r0, r1, #4194304	; 0x400000
 8001898:	6018      	str	r0, [r3, #0]

    
    while( (REG_RCC_CFGR & 0xC) != 0x08 );
 800189a:	6813      	ldr	r3, [r2, #0]
 800189c:	f003 0c0c 	and.w	ip, r3, #12
 80018a0:	f1bc 0f08 	cmp.w	ip, #8
 80018a4:	d1f9      	bne.n	800189a <Hw_PLL_Init+0x42>
    
    //APB2에 있는 UART 등 주변장치에 Clock 소스 동작제어
    //UART가 동작되기 위해서는 GPIO와 Alternation Function IO가 동작상태에 있어야 함
	REG_RCC_APB2ENR |= 0  |
 80018a6:	4a06      	ldr	r2, [pc, #24]	; (80018c0 <Hw_PLL_Init+0x68>)
 80018a8:	6813      	ldr	r3, [r2, #0]
 80018aa:	f443 4180 	orr.w	r1, r3, #16384	; 0x4000
 80018ae:	f041 001d 	orr.w	r0, r1, #29
 80018b2:	6010      	str	r0, [r2, #0]
				0x1 <<  4 | // IOPC
				0x1 <<  3 | // IOPB
				0x1 <<  2 | // IOPA
				0x1 <<  0;  // AFIO
					
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	40021004 	.word	0x40021004
 80018bc:	40021000 	.word	0x40021000
 80018c0:	40021018 	.word	0x40021018

080018c4 <Hw_Led_Init>:
{
	u32 PinNum;

	//-- JTAG 핀을 Disable하고 PB3,4를 GPIO로 사용한다.(핀구성에 따라 사용하지 않을수 있음)
	//
	REG_AFIO_MAPR &= ~(0x07 << 24);
 80018c4:	4a0c      	ldr	r2, [pc, #48]	; (80018f8 <Hw_Led_Init+0x34>)
	REG_AFIO_MAPR |=  (0x04 << 24);
	
	PinNum = 3;
	REG_GPIOB_CRL &= ~(0x0F << (PinNum*4+0));	// Clear
 80018c6:	4b0d      	ldr	r3, [pc, #52]	; (80018fc <Hw_Led_Init+0x38>)
{
	u32 PinNum;

	//-- JTAG 핀을 Disable하고 PB3,4를 GPIO로 사용한다.(핀구성에 따라 사용하지 않을수 있음)
	//
	REG_AFIO_MAPR &= ~(0x07 << 24);
 80018c8:	6810      	ldr	r0, [r2, #0]
void Hw_Led_Off( u8 Ch )
{
	switch( Ch )
	{
		case 0:
			SET_BIT( REG_GPIOB_ODR, 3 );
 80018ca:	490d      	ldr	r1, [pc, #52]	; (8001900 <Hw_Led_Init+0x3c>)
{
	u32 PinNum;

	//-- JTAG 핀을 Disable하고 PB3,4를 GPIO로 사용한다.(핀구성에 따라 사용하지 않을수 있음)
	//
	REG_AFIO_MAPR &= ~(0x07 << 24);
 80018cc:	f020 60e0 	bic.w	r0, r0, #117440512	; 0x7000000
 80018d0:	6010      	str	r0, [r2, #0]
	REG_AFIO_MAPR |=  (0x04 << 24);
 80018d2:	6810      	ldr	r0, [r2, #0]
 80018d4:	f040 6080 	orr.w	r0, r0, #67108864	; 0x4000000
 80018d8:	6010      	str	r0, [r2, #0]
	
	PinNum = 3;
	REG_GPIOB_CRL &= ~(0x0F << (PinNum*4+0));	// Clear
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	f422 4070 	bic.w	r0, r2, #61440	; 0xf000
 80018e0:	6018      	str	r0, [r3, #0]
	REG_GPIOB_CRL |=  (0x03 << (PinNum*4+0));	// MODE, PB.3 Output mode, max speed 50Mhz
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	f442 5040 	orr.w	r0, r2, #12288	; 0x3000
 80018e8:	6018      	str	r0, [r3, #0]
	REG_GPIOB_CRL |=  (0x00 << (PinNum*4+2));	// CNF,  PB.3 General purpose output push-pul
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	601a      	str	r2, [r3, #0]
void Hw_Led_Off( u8 Ch )
{
	switch( Ch )
	{
		case 0:
			SET_BIT( REG_GPIOB_ODR, 3 );
 80018ee:	6808      	ldr	r0, [r1, #0]
 80018f0:	f040 0308 	orr.w	r3, r0, #8
 80018f4:	600b      	str	r3, [r1, #0]
	REG_GPIOB_CRL |=  (0x03 << (PinNum*4+0));	// MODE, PB.3 Output mode, max speed 50Mhz
	REG_GPIOB_CRL |=  (0x00 << (PinNum*4+2));	// CNF,  PB.3 General purpose output push-pul
	
		
	Hw_Led_Off(0);
}
 80018f6:	4770      	bx	lr
 80018f8:	40010004 	.word	0x40010004
 80018fc:	40010c00 	.word	0x40010c00
 8001900:	40010c0c 	.word	0x40010c0c

08001904 <Hw_Led_Toggle>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Led_Toggle( u8 Ch )
{
	switch( Ch )
 8001904:	b920      	cbnz	r0, 8001910 <Hw_Led_Toggle+0xc>
	{
		case 0:
			TGL_BIT( REG_GPIOB_ODR, 3 );
 8001906:	4b03      	ldr	r3, [pc, #12]	; (8001914 <Hw_Led_Toggle+0x10>)
 8001908:	6818      	ldr	r0, [r3, #0]
 800190a:	f080 0208 	eor.w	r2, r0, #8
 800190e:	601a      	str	r2, [r3, #0]
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	40010c0c 	.word	0x40010c0c

08001918 <Hw_Uart_Q_Init>:
{
	u8 i;

	for( i=0; i<HW_UART_Q_CH_MAX; i++ )
	{
		Hw_Uart_Q_Start[i] = Hw_Uart_Q_End[i] = 0;
 8001918:	4908      	ldr	r1, [pc, #32]	; (800193c <Hw_Uart_Q_Init+0x24>)
 800191a:	4a09      	ldr	r2, [pc, #36]	; (8001940 <Hw_Uart_Q_Init+0x28>)
 800191c:	2300      	movs	r3, #0
 800191e:	800b      	strh	r3, [r1, #0]
 8001920:	8013      	strh	r3, [r2, #0]
 8001922:	804b      	strh	r3, [r1, #2]
 8001924:	8053      	strh	r3, [r2, #2]
 8001926:	808b      	strh	r3, [r1, #4]
 8001928:	8093      	strh	r3, [r2, #4]
 800192a:	80cb      	strh	r3, [r1, #6]
 800192c:	80d3      	strh	r3, [r2, #6]
 800192e:	810b      	strh	r3, [r1, #8]
 8001930:	8113      	strh	r3, [r2, #8]
 8001932:	814b      	strh	r3, [r1, #10]
 8001934:	8153      	strh	r3, [r2, #10]
 8001936:	818b      	strh	r3, [r1, #12]
 8001938:	8193      	strh	r3, [r2, #12]
	}
}
 800193a:	4770      	bx	lr
 800193c:	20000400 	.word	0x20000400
 8001940:	20000410 	.word	0x20000410

08001944 <HW_UART_Q_VAILD>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 8001944:	4909      	ldr	r1, [pc, #36]	; (800196c <HW_UART_Q_VAILD+0x28>)
 8001946:	4b0a      	ldr	r3, [pc, #40]	; (8001970 <HW_UART_Q_VAILD+0x2c>)
 8001948:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 800194c:	f933 2010 	ldrsh.w	r2, [r3, r0, lsl #1]
 8001950:	3120      	adds	r1, #32
 8001952:	4808      	ldr	r0, [pc, #32]	; (8001974 <HW_UART_Q_VAILD+0x30>)
 8001954:	1a8b      	subs	r3, r1, r2
 8001956:	ea03 0000 	and.w	r0, r3, r0
 800195a:	2800      	cmp	r0, #0
 800195c:	db00      	blt.n	8001960 <HW_UART_Q_VAILD+0x1c>
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_VAILD( u8 Ch )
{
	return HW_UART_Q_SIZE(Ch);
}
 800195e:	4770      	bx	lr
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 8001960:	1e42      	subs	r2, r0, #1
 8001962:	f062 001f 	orn	r0, r2, #31
 8001966:	3001      	adds	r0, #1
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_VAILD( u8 Ch )
{
	return HW_UART_Q_SIZE(Ch);
}
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	20000410 	.word	0x20000410
 8001970:	20000400 	.word	0x20000400
 8001974:	8000001f 	.word	0x8000001f

08001978 <Hw_Uart_Q_Push>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 8001978:	4a19      	ldr	r2, [pc, #100]	; (80019e0 <Hw_Uart_Q_Push+0x68>)
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{
 800197a:	b470      	push	{r4, r5, r6}
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 800197c:	4e19      	ldr	r6, [pc, #100]	; (80019e4 <Hw_Uart_Q_Push+0x6c>)
 800197e:	f832 4010 	ldrh.w	r4, [r2, r0, lsl #1]
 8001982:	f936 5010 	ldrsh.w	r5, [r6, r0, lsl #1]
 8001986:	b222      	sxth	r2, r4
 8001988:	f102 0620 	add.w	r6, r2, #32
 800198c:	4b16      	ldr	r3, [pc, #88]	; (80019e8 <Hw_Uart_Q_Push+0x70>)
 800198e:	1b75      	subs	r5, r6, r5
 8001990:	ea05 0303 	and.w	r3, r5, r3
 8001994:	2b00      	cmp	r3, #0
 8001996:	db16      	blt.n	80019c6 <Hw_Uart_Q_Push+0x4e>
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;
 8001998:	2b1f      	cmp	r3, #31
 800199a:	d01a      	beq.n	80019d2 <Hw_Uart_Q_Push+0x5a>

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
 800199c:	3401      	adds	r4, #1
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 800199e:	4b12      	ldr	r3, [pc, #72]	; (80019e8 <Hw_Uart_Q_Push+0x70>)
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
 80019a0:	0145      	lsls	r5, r0, #5
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 80019a2:	b224      	sxth	r4, r4
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
 80019a4:	182e      	adds	r6, r5, r0
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 80019a6:	ea04 0303 	and.w	r3, r4, r3
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
 80019aa:	780d      	ldrb	r5, [r1, #0]
 80019ac:	490f      	ldr	r1, [pc, #60]	; (80019ec <Hw_Uart_Q_Push+0x74>)
 80019ae:	eb06 0c02 	add.w	ip, r6, r2
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 80019b2:	2b00      	cmp	r3, #0
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
 80019b4:	f801 500c 	strb.w	r5, [r1, ip]
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 80019b8:	db0d      	blt.n	80019d6 <Hw_Uart_Q_Push+0x5e>
 80019ba:	4a09      	ldr	r2, [pc, #36]	; (80019e0 <Hw_Uart_Q_Push+0x68>)
 80019bc:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]

	return TRUE;
 80019c0:	2001      	movs	r0, #1
}
 80019c2:	bc70      	pop	{r4, r5, r6}
 80019c4:	4770      	bx	lr
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 80019c6:	3b01      	subs	r3, #1
 80019c8:	f063 031f 	orn	r3, r3, #31
 80019cc:	3301      	adds	r3, #1
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;
 80019ce:	2b1f      	cmp	r3, #31
 80019d0:	d1e4      	bne.n	800199c <Hw_Uart_Q_Push+0x24>
 80019d2:	2000      	movs	r0, #0
 80019d4:	e7f5      	b.n	80019c2 <Hw_Uart_Q_Push+0x4a>

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 80019d6:	1e59      	subs	r1, r3, #1
 80019d8:	f061 021f 	orn	r2, r1, #31
 80019dc:	1c53      	adds	r3, r2, #1
 80019de:	e7ec      	b.n	80019ba <Hw_Uart_Q_Push+0x42>
 80019e0:	20000410 	.word	0x20000410
 80019e4:	20000400 	.word	0x20000400
 80019e8:	8000001f 	.word	0x8000001f
 80019ec:	20000308 	.word	0x20000308

080019f0 <Hw_Uart_Q_Pop>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
 80019f0:	b430      	push	{r4, r5}
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 80019f2:	4a18      	ldr	r2, [pc, #96]	; (8001a54 <Hw_Uart_Q_Pop+0x64>)
 80019f4:	4c18      	ldr	r4, [pc, #96]	; (8001a58 <Hw_Uart_Q_Pop+0x68>)
 80019f6:	f832 2010 	ldrh.w	r2, [r2, r0, lsl #1]
 80019fa:	f934 5010 	ldrsh.w	r5, [r4, r0, lsl #1]
 80019fe:	4b17      	ldr	r3, [pc, #92]	; (8001a5c <Hw_Uart_Q_Pop+0x6c>)
 8001a00:	3520      	adds	r5, #32
 8001a02:	b214      	sxth	r4, r2
 8001a04:	1b2d      	subs	r5, r5, r4
 8001a06:	ea05 0303 	and.w	r3, r5, r3
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	db14      	blt.n	8001a38 <Hw_Uart_Q_Pop+0x48>
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;
 8001a0e:	b1cb      	cbz	r3, 8001a44 <Hw_Uart_Q_Pop+0x54>

	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];
 8001a10:	0143      	lsls	r3, r0, #5
 8001a12:	181d      	adds	r5, r3, r0
 8001a14:	192c      	adds	r4, r5, r4
 8001a16:	3201      	adds	r2, #1

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;
 8001a18:	4b10      	ldr	r3, [pc, #64]	; (8001a5c <Hw_Uart_Q_Pop+0x6c>)
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;

	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];
 8001a1a:	4d11      	ldr	r5, [pc, #68]	; (8001a60 <Hw_Uart_Q_Pop+0x70>)

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;
 8001a1c:	fa0f fc82 	sxth.w	ip, r2
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;

	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];
 8001a20:	5d2c      	ldrb	r4, [r5, r4]

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;
 8001a22:	ea0c 0303 	and.w	r3, ip, r3
 8001a26:	2b00      	cmp	r3, #0
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;

	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];
 8001a28:	700c      	strb	r4, [r1, #0]

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;
 8001a2a:	db0d      	blt.n	8001a48 <Hw_Uart_Q_Pop+0x58>
 8001a2c:	4909      	ldr	r1, [pc, #36]	; (8001a54 <Hw_Uart_Q_Pop+0x64>)
 8001a2e:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]

    return TRUE;
 8001a32:	2001      	movs	r0, #1
}
 8001a34:	bc30      	pop	{r4, r5}
 8001a36:	4770      	bx	lr
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 8001a38:	3b01      	subs	r3, #1
 8001a3a:	f063 031f 	orn	r3, r3, #31
 8001a3e:	3301      	adds	r3, #1
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d1e5      	bne.n	8001a10 <Hw_Uart_Q_Pop+0x20>
 8001a44:	4618      	mov	r0, r3
 8001a46:	e7f5      	b.n	8001a34 <Hw_Uart_Q_Pop+0x44>

	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;
 8001a48:	1e5a      	subs	r2, r3, #1
 8001a4a:	f062 011f 	orn	r1, r2, #31
 8001a4e:	1c4b      	adds	r3, r1, #1
 8001a50:	e7ec      	b.n	8001a2c <Hw_Uart_Q_Pop+0x3c>
 8001a52:	bf00      	nop
 8001a54:	20000400 	.word	0x20000400
 8001a58:	20000410 	.word	0x20000410
 8001a5c:	8000001f 	.word	0x8000001f
 8001a60:	20000308 	.word	0x20000308

08001a64 <Hw_ISR_Init>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_ISR_Init( void )
{
	REG_SCB_VTOR = (u32)Hw_ISR_VectorTable;
 8001a64:	4b01      	ldr	r3, [pc, #4]	; (8001a6c <Hw_ISR_Init+0x8>)
 8001a66:	4a02      	ldr	r2, [pc, #8]	; (8001a70 <Hw_ISR_Init+0xc>)
 8001a68:	601a      	str	r2, [r3, #0]
}
 8001a6a:	4770      	bx	lr
 8001a6c:	e000ed08 	.word	0xe000ed08
 8001a70:	20000600 	.word	0x20000600

08001a74 <Hw_ISR_SetIRQFunc>:
---------------------------------------------------------------------------*/
void Hw_ISR_SetIRQFunc( u8 ISR_Num, u32 FuncAddress, u8 ISR_Priority )
{	
	u32 ISR_StartOffset = 16;
	
	Hw_ISR_VectorTable[ ISR_StartOffset + ISR_Num ] = FuncAddress;	
 8001a74:	4b02      	ldr	r3, [pc, #8]	; (8001a80 <Hw_ISR_SetIRQFunc+0xc>)
 8001a76:	3010      	adds	r0, #16
 8001a78:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	20000600 	.word	0x20000600

08001a84 <Hw_ISR_SetIRQFuncByAddr>:
---------------------------------------------------------------------------*/
void Hw_ISR_SetIRQFuncByAddr( u32 ISR_Addr, u32 FuncAddress, u8 ISR_Priority )
{	
	u32 ISR_StartOffset = ISR_Addr/4;
	
	Hw_ISR_VectorTable[ ISR_StartOffset ] = FuncAddress;	
 8001a84:	4b02      	ldr	r3, [pc, #8]	; (8001a90 <Hw_ISR_SetIRQFuncByAddr+0xc>)
     			u8  ISR_Priority : 인터럽트 우선순위(작은값이 우선순위 높음)
     RET     : void
---------------------------------------------------------------------------*/
void Hw_ISR_SetIRQFuncByAddr( u32 ISR_Addr, u32 FuncAddress, u8 ISR_Priority )
{	
	u32 ISR_StartOffset = ISR_Addr/4;
 8001a86:	0880      	lsrs	r0, r0, #2
	
	Hw_ISR_VectorTable[ ISR_StartOffset ] = FuncAddress;	
 8001a88:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	20000600 	.word	0x20000600

08001a94 <Hw_Timer_SetupISR>:
     	 	 	 타이머 H/W 기능을 초기화 한다.
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_SetupISR( void )
{	
 8001a94:	b508      	push	{r3, lr}
	Hw_ISR_SetIRQFuncByAddr( 0x003C, (u32)Hw_Timer_ISR, 0 );	
 8001a96:	203c      	movs	r0, #60	; 0x3c
 8001a98:	4902      	ldr	r1, [pc, #8]	; (8001aa4 <Hw_Timer_SetupISR+0x10>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	4b02      	ldr	r3, [pc, #8]	; (8001aa8 <Hw_Timer_SetupISR+0x14>)
 8001a9e:	4798      	blx	r3
}
 8001aa0:	bd08      	pop	{r3, pc}
 8001aa2:	bf00      	nop
 8001aa4:	08001d29 	.word	0x08001d29
 8001aa8:	08001a85 	.word	0x08001a85

08001aac <Hw_Timer_Setup>:
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_Setup( void )
{

	REG_STK_LOAD = 72000 - 1;	// 72000000 / 72000 = 1000us = 1ms
 8001aac:	4a09      	ldr	r2, [pc, #36]	; (8001ad4 <Hw_Timer_Setup+0x28>)
 8001aae:	490a      	ldr	r1, [pc, #40]	; (8001ad8 <Hw_Timer_Setup+0x2c>)
	
	REG_STK_VAL  = 0;	
	
	SET_BIT( REG_STK_CTRL, 2 );	// CLKSOURCE = Processor Clock 72Mhz		
 8001ab0:	4b0a      	ldr	r3, [pc, #40]	; (8001adc <Hw_Timer_Setup+0x30>)
void Hw_Timer_Setup( void )
{

	REG_STK_LOAD = 72000 - 1;	// 72000000 / 72000 = 1000us = 1ms
	
	REG_STK_VAL  = 0;	
 8001ab2:	2000      	movs	r0, #0
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_Setup( void )
{

	REG_STK_LOAD = 72000 - 1;	// 72000000 / 72000 = 1000us = 1ms
 8001ab4:	6011      	str	r1, [r2, #0]
	
	REG_STK_VAL  = 0;	
 8001ab6:	6050      	str	r0, [r2, #4]
	
	SET_BIT( REG_STK_CTRL, 2 );	// CLKSOURCE = Processor Clock 72Mhz		
 8001ab8:	6819      	ldr	r1, [r3, #0]
 8001aba:	f041 0004 	orr.w	r0, r1, #4
 8001abe:	6018      	str	r0, [r3, #0]
	SET_BIT( REG_STK_CTRL, 1 );	// 인터럽트 활성화		
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	f042 0102 	orr.w	r1, r2, #2
 8001ac6:	6019      	str	r1, [r3, #0]
	SET_BIT( REG_STK_CTRL, 0 );	// Counter Enable
 8001ac8:	6818      	ldr	r0, [r3, #0]
 8001aca:	f040 0201 	orr.w	r2, r0, #1
 8001ace:	601a      	str	r2, [r3, #0]
	
}
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	e000e014 	.word	0xe000e014
 8001ad8:	0001193f 	.word	0x0001193f
 8001adc:	e000e010 	.word	0xe000e010

08001ae0 <Hw_Timer_Init>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_Init( void )
{
 8001ae0:	b510      	push	{r4, lr}
	u8 i;
	static u8 Excute = 0;

	
	if( Excute == 1 ) return;  // 이미 한번 실행했다면 정지.
 8001ae2:	4c1a      	ldr	r4, [pc, #104]	; (8001b4c <Hw_Timer_Init+0x6c>)
 8001ae4:	7823      	ldrb	r3, [r4, #0]
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d02e      	beq.n	8001b48 <Hw_Timer_Init+0x68>
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 8001aea:	4b19      	ldr	r3, [pc, #100]	; (8001b50 <Hw_Timer_Init+0x70>)
 8001aec:	2000      	movs	r0, #0
 8001aee:	7018      	strb	r0, [r3, #0]
		Timer_Tbl[i].Timer_Ctn  = 0;
 8001af0:	8058      	strh	r0, [r3, #2]
		Timer_Tbl[i].Timer_Init = 0;
 8001af2:	8098      	strh	r0, [r3, #4]
		Timer_Tbl[i].TmrFnct    = NULL;
 8001af4:	6098      	str	r0, [r3, #8]
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 8001af6:	7418      	strb	r0, [r3, #16]
		Timer_Tbl[i].Timer_Ctn  = 0;
 8001af8:	8258      	strh	r0, [r3, #18]
		Timer_Tbl[i].Timer_Init = 0;
 8001afa:	8298      	strh	r0, [r3, #20]
		Timer_Tbl[i].TmrFnct    = NULL;
 8001afc:	6198      	str	r0, [r3, #24]
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 8001afe:	f883 0020 	strb.w	r0, [r3, #32]
		Timer_Tbl[i].Timer_Ctn  = 0;
 8001b02:	8458      	strh	r0, [r3, #34]	; 0x22
		Timer_Tbl[i].Timer_Init = 0;
 8001b04:	8498      	strh	r0, [r3, #36]	; 0x24
		Timer_Tbl[i].TmrFnct    = NULL;
 8001b06:	6298      	str	r0, [r3, #40]	; 0x28
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 8001b08:	f883 0030 	strb.w	r0, [r3, #48]	; 0x30
		Timer_Tbl[i].Timer_Ctn  = 0;
 8001b0c:	8658      	strh	r0, [r3, #50]	; 0x32
		Timer_Tbl[i].Timer_Init = 0;
 8001b0e:	8698      	strh	r0, [r3, #52]	; 0x34
		Timer_Tbl[i].TmrFnct    = NULL;
 8001b10:	6398      	str	r0, [r3, #56]	; 0x38
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 8001b12:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
		Timer_Tbl[i].Timer_Ctn  = 0;
 8001b16:	f8a3 0042 	strh.w	r0, [r3, #66]	; 0x42
		Timer_Tbl[i].Timer_Init = 0;
 8001b1a:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
		Timer_Tbl[i].TmrFnct    = NULL;
 8001b1e:	6498      	str	r0, [r3, #72]	; 0x48
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 8001b20:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
		Timer_Tbl[i].Timer_Ctn  = 0;
 8001b24:	f8a3 0052 	strh.w	r0, [r3, #82]	; 0x52
		Timer_Tbl[i].Timer_Init = 0;
 8001b28:	f8a3 0054 	strh.w	r0, [r3, #84]	; 0x54
		Timer_Tbl[i].TmrFnct    = NULL;
 8001b2c:	6598      	str	r0, [r3, #88]	; 0x58
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 8001b2e:	f883 0060 	strb.w	r0, [r3, #96]	; 0x60
		Timer_Tbl[i].Timer_Ctn  = 0;
 8001b32:	f8a3 0062 	strh.w	r0, [r3, #98]	; 0x62
		Timer_Tbl[i].Timer_Init = 0;
 8001b36:	f8a3 0064 	strh.w	r0, [r3, #100]	; 0x64
		Timer_Tbl[i].TmrFnct    = NULL;
 8001b3a:	6698      	str	r0, [r3, #104]	; 0x68
	}	                   
	
	
	Hw_Timer_SetupISR();
 8001b3c:	4a05      	ldr	r2, [pc, #20]	; (8001b54 <Hw_Timer_Init+0x74>)
 8001b3e:	4790      	blx	r2
	Hw_Timer_Setup();	
 8001b40:	4905      	ldr	r1, [pc, #20]	; (8001b58 <Hw_Timer_Init+0x78>)
 8001b42:	4788      	blx	r1

	Excute = 1;
 8001b44:	2001      	movs	r0, #1
 8001b46:	7020      	strb	r0, [r4, #0]
 8001b48:	bd10      	pop	{r4, pc}
 8001b4a:	bf00      	nop
 8001b4c:	2000027c 	.word	0x2000027c
 8001b50:	20000208 	.word	0x20000208
 8001b54:	08001a95 	.word	0x08001a95
 8001b58:	08001aad 	.word	0x08001aad

08001b5c <Hw_Timer_Tick>:
			타이머인터럽트 발생시에 실행되는 함수(1ms 혹은 10ms 단위로 실행)
     ARG	: void
     RET	: void
---------------------------------------------------------------------------*/
void Hw_Timer_Tick(void)
{
 8001b5c:	b510      	push	{r4, lr}
	u8 i;

	
	Hw_Timer_Counter++;
 8001b5e:	4c6f      	ldr	r4, [pc, #444]	; (8001d1c <Hw_Timer_Tick+0x1c0>)


	if( Tmr_Ctn ) Tmr_Ctn--;
 8001b60:	4a6f      	ldr	r2, [pc, #444]	; (8001d20 <Hw_Timer_Tick+0x1c4>)
void Hw_Timer_Tick(void)
{
	u8 i;

	
	Hw_Timer_Counter++;
 8001b62:	6823      	ldr	r3, [r4, #0]
 8001b64:	1c59      	adds	r1, r3, #1
 8001b66:	6021      	str	r1, [r4, #0]


	if( Tmr_Ctn ) Tmr_Ctn--;
 8001b68:	8810      	ldrh	r0, [r2, #0]
 8001b6a:	b283      	uxth	r3, r0
 8001b6c:	b113      	cbz	r3, 8001b74 <Hw_Timer_Tick+0x18>
 8001b6e:	8811      	ldrh	r1, [r2, #0]
 8001b70:	1e48      	subs	r0, r1, #1
 8001b72:	8010      	strh	r0, [r2, #0]
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
	{
		if( Timer_Tbl[i].Timer_En == ON)   					// 타이머가 활성화 됬니?
 8001b74:	4c6b      	ldr	r4, [pc, #428]	; (8001d24 <Hw_Timer_Tick+0x1c8>)
 8001b76:	7822      	ldrb	r2, [r4, #0]
 8001b78:	2a01      	cmp	r2, #1
 8001b7a:	d01e      	beq.n	8001bba <Hw_Timer_Tick+0x5e>
 8001b7c:	7c23      	ldrb	r3, [r4, #16]
 8001b7e:	4a69      	ldr	r2, [pc, #420]	; (8001d24 <Hw_Timer_Tick+0x1c8>)
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d030      	beq.n	8001be6 <Hw_Timer_Tick+0x8a>
 8001b84:	f894 3020 	ldrb.w	r3, [r4, #32]
 8001b88:	4a66      	ldr	r2, [pc, #408]	; (8001d24 <Hw_Timer_Tick+0x1c8>)
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d041      	beq.n	8001c12 <Hw_Timer_Tick+0xb6>
 8001b8e:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8001b92:	4a64      	ldr	r2, [pc, #400]	; (8001d24 <Hw_Timer_Tick+0x1c8>)
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d052      	beq.n	8001c3e <Hw_Timer_Tick+0xe2>
 8001b98:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8001b9c:	4a61      	ldr	r2, [pc, #388]	; (8001d24 <Hw_Timer_Tick+0x1c8>)
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d063      	beq.n	8001c6a <Hw_Timer_Tick+0x10e>
 8001ba2:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8001ba6:	4a5f      	ldr	r2, [pc, #380]	; (8001d24 <Hw_Timer_Tick+0x1c8>)
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d076      	beq.n	8001c9a <Hw_Timer_Tick+0x13e>
 8001bac:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8001bb0:	4a5c      	ldr	r2, [pc, #368]	; (8001d24 <Hw_Timer_Tick+0x1c8>)
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	f000 808a 	beq.w	8001ccc <Hw_Timer_Tick+0x170>
 8001bb8:	bd10      	pop	{r4, pc}
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소
 8001bba:	8860      	ldrh	r0, [r4, #2]
 8001bbc:	1e43      	subs	r3, r0, #1
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	8063      	strh	r3, [r4, #2]

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d1da      	bne.n	8001b7c <Hw_Timer_Tick+0x20>
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 8001bc6:	f894 c001 	ldrb.w	ip, [r4, #1]
 8001bca:	f1bc 0f01 	cmp.w	ip, #1
 8001bce:	f000 8096 	beq.w	8001cfe <Hw_Timer_Tick+0x1a2>

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8001bd2:	f8b4 e004 	ldrh.w	lr, [r4, #4]

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8001bd6:	68a1      	ldr	r1, [r4, #8]
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8001bd8:	f8a4 e002 	strh.w	lr, [r4, #2]

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8001bdc:	4788      	blx	r1
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
	{
		if( Timer_Tbl[i].Timer_En == ON)   					// 타이머가 활성화 됬니?
 8001bde:	7c23      	ldrb	r3, [r4, #16]
 8001be0:	4a50      	ldr	r2, [pc, #320]	; (8001d24 <Hw_Timer_Tick+0x1c8>)
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d1ce      	bne.n	8001b84 <Hw_Timer_Tick+0x28>
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소
 8001be6:	8a51      	ldrh	r1, [r2, #18]
 8001be8:	1e48      	subs	r0, r1, #1
 8001bea:	b283      	uxth	r3, r0
 8001bec:	8253      	strh	r3, [r2, #18]

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d1c8      	bne.n	8001b84 <Hw_Timer_Tick+0x28>
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 8001bf2:	f892 c011 	ldrb.w	ip, [r2, #17]
 8001bf6:	f1bc 0f01 	cmp.w	ip, #1
 8001bfa:	d07e      	beq.n	8001cfa <Hw_Timer_Tick+0x19e>

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8001bfc:	f8b4 e014 	ldrh.w	lr, [r4, #20]

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8001c00:	69a2      	ldr	r2, [r4, #24]
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8001c02:	f8a4 e012 	strh.w	lr, [r4, #18]

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8001c06:	4790      	blx	r2
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
	{
		if( Timer_Tbl[i].Timer_En == ON)   					// 타이머가 활성화 됬니?
 8001c08:	f894 3020 	ldrb.w	r3, [r4, #32]
 8001c0c:	4a45      	ldr	r2, [pc, #276]	; (8001d24 <Hw_Timer_Tick+0x1c8>)
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d1bd      	bne.n	8001b8e <Hw_Timer_Tick+0x32>
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소
 8001c12:	8c51      	ldrh	r1, [r2, #34]	; 0x22
 8001c14:	1e48      	subs	r0, r1, #1
 8001c16:	b283      	uxth	r3, r0
 8001c18:	8453      	strh	r3, [r2, #34]	; 0x22

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d1b7      	bne.n	8001b8e <Hw_Timer_Tick+0x32>
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 8001c1e:	f892 c021 	ldrb.w	ip, [r2, #33]	; 0x21
 8001c22:	f1bc 0f01 	cmp.w	ip, #1
 8001c26:	d075      	beq.n	8001d14 <Hw_Timer_Tick+0x1b8>

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8001c28:	f8b4 e024 	ldrh.w	lr, [r4, #36]	; 0x24

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8001c2c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8001c2e:	f8a4 e022 	strh.w	lr, [r4, #34]	; 0x22

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8001c32:	4790      	blx	r2
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
	{
		if( Timer_Tbl[i].Timer_En == ON)   					// 타이머가 활성화 됬니?
 8001c34:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8001c38:	4a3a      	ldr	r2, [pc, #232]	; (8001d24 <Hw_Timer_Tick+0x1c8>)
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d1ac      	bne.n	8001b98 <Hw_Timer_Tick+0x3c>
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소
 8001c3e:	8e51      	ldrh	r1, [r2, #50]	; 0x32
 8001c40:	1e48      	subs	r0, r1, #1
 8001c42:	b283      	uxth	r3, r0
 8001c44:	8653      	strh	r3, [r2, #50]	; 0x32

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d1a6      	bne.n	8001b98 <Hw_Timer_Tick+0x3c>
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 8001c4a:	f892 c031 	ldrb.w	ip, [r2, #49]	; 0x31
 8001c4e:	f1bc 0f01 	cmp.w	ip, #1
 8001c52:	d05c      	beq.n	8001d0e <Hw_Timer_Tick+0x1b2>

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8001c54:	f8b4 e034 	ldrh.w	lr, [r4, #52]	; 0x34

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8001c58:	6ba2      	ldr	r2, [r4, #56]	; 0x38
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8001c5a:	f8a4 e032 	strh.w	lr, [r4, #50]	; 0x32

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8001c5e:	4790      	blx	r2
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
	{
		if( Timer_Tbl[i].Timer_En == ON)   					// 타이머가 활성화 됬니?
 8001c60:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8001c64:	4a2f      	ldr	r2, [pc, #188]	; (8001d24 <Hw_Timer_Tick+0x1c8>)
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d19b      	bne.n	8001ba2 <Hw_Timer_Tick+0x46>
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소
 8001c6a:	f8b2 1042 	ldrh.w	r1, [r2, #66]	; 0x42
 8001c6e:	1e48      	subs	r0, r1, #1
 8001c70:	b283      	uxth	r3, r0
 8001c72:	f8a2 3042 	strh.w	r3, [r2, #66]	; 0x42

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d193      	bne.n	8001ba2 <Hw_Timer_Tick+0x46>
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 8001c7a:	f892 c041 	ldrb.w	ip, [r2, #65]	; 0x41
 8001c7e:	f1bc 0f01 	cmp.w	ip, #1
 8001c82:	d041      	beq.n	8001d08 <Hw_Timer_Tick+0x1ac>

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8001c84:	f8b4 e044 	ldrh.w	lr, [r4, #68]	; 0x44

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8001c88:	6ca2      	ldr	r2, [r4, #72]	; 0x48
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8001c8a:	f8a4 e042 	strh.w	lr, [r4, #66]	; 0x42

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8001c8e:	4790      	blx	r2
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
	{
		if( Timer_Tbl[i].Timer_En == ON)   					// 타이머가 활성화 됬니?
 8001c90:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8001c94:	4a23      	ldr	r2, [pc, #140]	; (8001d24 <Hw_Timer_Tick+0x1c8>)
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d188      	bne.n	8001bac <Hw_Timer_Tick+0x50>
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소
 8001c9a:	f8b2 1052 	ldrh.w	r1, [r2, #82]	; 0x52
 8001c9e:	1e48      	subs	r0, r1, #1
 8001ca0:	b283      	uxth	r3, r0
 8001ca2:	f8a2 3052 	strh.w	r3, [r2, #82]	; 0x52

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d180      	bne.n	8001bac <Hw_Timer_Tick+0x50>
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 8001caa:	f892 c051 	ldrb.w	ip, [r2, #81]	; 0x51
 8001cae:	f1bc 0f01 	cmp.w	ip, #1
 8001cb2:	d026      	beq.n	8001d02 <Hw_Timer_Tick+0x1a6>

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8001cb4:	f8b4 e054 	ldrh.w	lr, [r4, #84]	; 0x54

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8001cb8:	6da2      	ldr	r2, [r4, #88]	; 0x58
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8001cba:	f8a4 e052 	strh.w	lr, [r4, #82]	; 0x52

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8001cbe:	4790      	blx	r2
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
	{
		if( Timer_Tbl[i].Timer_En == ON)   					// 타이머가 활성화 됬니?
 8001cc0:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8001cc4:	4a17      	ldr	r2, [pc, #92]	; (8001d24 <Hw_Timer_Tick+0x1c8>)
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	f47f af76 	bne.w	8001bb8 <Hw_Timer_Tick+0x5c>
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소
 8001ccc:	f8b2 1062 	ldrh.w	r1, [r2, #98]	; 0x62
 8001cd0:	1e48      	subs	r0, r1, #1
 8001cd2:	b283      	uxth	r3, r0
 8001cd4:	f8a2 3062 	strh.w	r3, [r2, #98]	; 0x62

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	f47f af6d 	bne.w	8001bb8 <Hw_Timer_Tick+0x5c>
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 8001cde:	f892 e061 	ldrb.w	lr, [r2, #97]	; 0x61

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8001ce2:	f8b4 c064 	ldrh.w	ip, [r4, #100]	; 0x64
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 8001ce6:	f1be 0f01 	cmp.w	lr, #1

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.
 8001cea:	bf08      	it	eq
 8001cec:	f882 3060 	strbeq.w	r3, [r2, #96]	; 0x60

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8001cf0:	f8a4 c062 	strh.w	ip, [r4, #98]	; 0x62

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8001cf4:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8001cf6:	4790      	blx	r2
 8001cf8:	bd10      	pop	{r4, pc}

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.
 8001cfa:	7413      	strb	r3, [r2, #16]
 8001cfc:	e77e      	b.n	8001bfc <Hw_Timer_Tick+0xa0>
 8001cfe:	7023      	strb	r3, [r4, #0]
 8001d00:	e767      	b.n	8001bd2 <Hw_Timer_Tick+0x76>
 8001d02:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
 8001d06:	e7d5      	b.n	8001cb4 <Hw_Timer_Tick+0x158>
 8001d08:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
 8001d0c:	e7ba      	b.n	8001c84 <Hw_Timer_Tick+0x128>
 8001d0e:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
 8001d12:	e79f      	b.n	8001c54 <Hw_Timer_Tick+0xf8>
 8001d14:	f882 3020 	strb.w	r3, [r2, #32]
 8001d18:	e786      	b.n	8001c28 <Hw_Timer_Tick+0xcc>
 8001d1a:	bf00      	nop
 8001d1c:	20000278 	.word	0x20000278
 8001d20:	2000027e 	.word	0x2000027e
 8001d24:	20000208 	.word	0x20000208

08001d28 <Hw_Timer_ISR>:
void Hw_Timer_Setup( void );



void Hw_Timer_ISR(void)
{
 8001d28:	b508      	push	{r3, lr}

	Hw_Timer_Tick();  
 8001d2a:	4b01      	ldr	r3, [pc, #4]	; (8001d30 <Hw_Timer_ISR+0x8>)
 8001d2c:	4798      	blx	r3

}
 8001d2e:	bd08      	pop	{r3, pc}
 8001d30:	08001b5d 	.word	0x08001b5d

08001d34 <Hw_Timer_Set>:
			void (*Fnct)(void),void *arg : 실행할 타이머 함수.
     RET
     	 	void
---------------------------------------------------------------------------*/
void Hw_Timer_Set(u8 TmrNum, u16 TmrData, u8 TmrMode, void (*Fnct)(void),void *arg)
{
 8001d34:	b410      	push	{r4}
	Timer_Tbl[TmrNum].Timer_Mode = TmrMode;    // 모트설정
 8001d36:	4c05      	ldr	r4, [pc, #20]	; (8001d4c <Hw_Timer_Set+0x18>)
 8001d38:	eb04 1000 	add.w	r0, r4, r0, lsl #4
 8001d3c:	7042      	strb	r2, [r0, #1]
	Timer_Tbl[TmrNum].TmrFnct    = Fnct;       // 실행할 함수
 8001d3e:	6083      	str	r3, [r0, #8]
	Timer_Tbl[TmrNum].TmrFnctArg = arg;        // 매개변수
 8001d40:	9b01      	ldr	r3, [sp, #4]
	Timer_Tbl[TmrNum].Timer_Ctn  = TmrData;
 8001d42:	8041      	strh	r1, [r0, #2]
---------------------------------------------------------------------------*/
void Hw_Timer_Set(u8 TmrNum, u16 TmrData, u8 TmrMode, void (*Fnct)(void),void *arg)
{
	Timer_Tbl[TmrNum].Timer_Mode = TmrMode;    // 모트설정
	Timer_Tbl[TmrNum].TmrFnct    = Fnct;       // 실행할 함수
	Timer_Tbl[TmrNum].TmrFnctArg = arg;        // 매개변수
 8001d44:	60c3      	str	r3, [r0, #12]
	Timer_Tbl[TmrNum].Timer_Ctn  = TmrData;
	Timer_Tbl[TmrNum].Timer_Init = TmrData;
 8001d46:	8081      	strh	r1, [r0, #4]
}
 8001d48:	bc10      	pop	{r4}
 8001d4a:	4770      	bx	lr
 8001d4c:	20000208 	.word	0x20000208

08001d50 <Hw_Timer_Start>:
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Timer_Start(u8 TmrNum)
{
	if(TmrNum < TIMER_MAX)
 8001d50:	2806      	cmp	r0, #6
 8001d52:	d803      	bhi.n	8001d5c <Hw_Timer_Start+0xc>
		Timer_Tbl[TmrNum].Timer_En = ON;
 8001d54:	4b02      	ldr	r3, [pc, #8]	; (8001d60 <Hw_Timer_Start+0x10>)
 8001d56:	0100      	lsls	r0, r0, #4
 8001d58:	2201      	movs	r2, #1
 8001d5a:	541a      	strb	r2, [r3, r0]
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	20000208 	.word	0x20000208

08001d64 <Hw_Timer_Delay_ms>:
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Timer_Delay_ms( u16 DelayData )
{
	Tmr_Ctn = DelayData;
 8001d64:	4b03      	ldr	r3, [pc, #12]	; (8001d74 <Hw_Timer_Delay_ms+0x10>)
 8001d66:	8018      	strh	r0, [r3, #0]
	
	while( Tmr_Ctn );
 8001d68:	8818      	ldrh	r0, [r3, #0]
 8001d6a:	b282      	uxth	r2, r0
 8001d6c:	2a00      	cmp	r2, #0
 8001d6e:	d1fb      	bne.n	8001d68 <Hw_Timer_Delay_ms+0x4>
}
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	2000027e 	.word	0x2000027e

08001d78 <Hw_Timer_Get_CountValue>:
     ARG
     RET
---------------------------------------------------------------------------*/
u32 Hw_Timer_Get_CountValue( void )
{
	return Hw_Timer_Counter;
 8001d78:	4b01      	ldr	r3, [pc, #4]	; (8001d80 <Hw_Timer_Get_CountValue+0x8>)
 8001d7a:	6818      	ldr	r0, [r3, #0]
}
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	20000278 	.word	0x20000278

08001d84 <Hw_VCom_Init>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_VCom_Init( void )
{
 8001d84:	b508      	push	{r3, lr}
	Set_System();
 8001d86:	4a04      	ldr	r2, [pc, #16]	; (8001d98 <Hw_VCom_Init+0x14>)
 8001d88:	4790      	blx	r2
	Set_USBClock();
 8001d8a:	4904      	ldr	r1, [pc, #16]	; (8001d9c <Hw_VCom_Init+0x18>)
 8001d8c:	4788      	blx	r1
	USB_Interrupts_Config();
 8001d8e:	4804      	ldr	r0, [pc, #16]	; (8001da0 <Hw_VCom_Init+0x1c>)
 8001d90:	4780      	blx	r0
	USB_Init();	
 8001d92:	4b04      	ldr	r3, [pc, #16]	; (8001da4 <Hw_VCom_Init+0x20>)
 8001d94:	4798      	blx	r3
}
 8001d96:	bd08      	pop	{r3, pc}
 8001d98:	080033d5 	.word	0x080033d5
 8001d9c:	080033f1 	.word	0x080033f1
 8001da0:	08003431 	.word	0x08003431
 8001da4:	080040c5 	.word	0x080040c5

08001da8 <Hw_I2C_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_Init( void )
{
 8001da8:	b508      	push	{r3, lr}
	//-- I/O 초기화
	//
	Hw_I2C_SW_Init();	
 8001daa:	4b01      	ldr	r3, [pc, #4]	; (8001db0 <Hw_I2C_Init+0x8>)
 8001dac:	4798      	blx	r3
}
 8001dae:	bd08      	pop	{r3, pc}
 8001db0:	08001e41 	.word	0x08001e41

08001db4 <Hw_I2C_Write>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_Write( u8 Ch, u16 i2c_addr, u8 *pdata, u16 len )
{
 8001db4:	b510      	push	{r4, lr}
	u16 Ret;
	
	#if HW_I2C_USE_SW_I2C == 1
	
	Ret = Hw_I2C_SW_Write( Ch, i2c_addr, pdata, len );
 8001db6:	4c01      	ldr	r4, [pc, #4]	; (8001dbc <Hw_I2C_Write+0x8>)
 8001db8:	47a0      	blx	r4
	#else
	
	#endif

    return Ret;
}
 8001dba:	bd10      	pop	{r4, pc}
 8001dbc:	080025b9 	.word	0x080025b9

08001dc0 <Hw_I2C_Read>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_Read( u8 Ch, u16 i2c_addr, u8 *pdata, u16 len )
{
 8001dc0:	b510      	push	{r4, lr}
	u16 Ret;

	#if HW_I2C_USE_SW_I2C == 1
	
	Ret = Hw_I2C_SW_Read( Ch, i2c_addr, pdata, len );	
 8001dc2:	4c01      	ldr	r4, [pc, #4]	; (8001dc8 <Hw_I2C_Read+0x8>)
 8001dc4:	47a0      	blx	r4
	#else
	
	#endif
	
    return Ret;
}
 8001dc6:	bd10      	pop	{r4, pc}
 8001dc8:	08002499 	.word	0x08002499

08001dcc <Hw_I2C_SW_SCL_HIGH>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SCL_HIGH( u8 Ch )
{
 8001dcc:	b538      	push	{r3, r4, r5, lr}
 8001dce:	4605      	mov	r5, r0
	Hw_Wait_Usec(HW_I2C_SW_PULSE_DELAY);
 8001dd0:	4c05      	ldr	r4, [pc, #20]	; (8001de8 <Hw_I2C_SW_SCL_HIGH+0x1c>)
 8001dd2:	200a      	movs	r0, #10
 8001dd4:	47a0      	blx	r4

	if( Ch == 0 )  
 8001dd6:	b925      	cbnz	r5, 8001de2 <Hw_I2C_SW_SCL_HIGH+0x16>
	{
		SET_BIT( REG_GPIOB_ODR, 6 );
 8001dd8:	4b04      	ldr	r3, [pc, #16]	; (8001dec <Hw_I2C_SW_SCL_HIGH+0x20>)
 8001dda:	6818      	ldr	r0, [r3, #0]
 8001ddc:	f040 0240 	orr.w	r2, r0, #64	; 0x40
 8001de0:	601a      	str	r2, [r3, #0]
	}
	else           
	{
	}

	Hw_Wait_Usec(HW_I2C_SW_PULSE_DELAY);
 8001de2:	200a      	movs	r0, #10
 8001de4:	47a0      	blx	r4
}
 8001de6:	bd38      	pop	{r3, r4, r5, pc}
 8001de8:	080016f1 	.word	0x080016f1
 8001dec:	40010c0c 	.word	0x40010c0c

08001df0 <Hw_I2C_SW_IO_Setup>:
{
	u8 i;

	//-- SCL PB.6
	//
	REG_GPIOB_CRL &= ~(0x0F << (24));	// Clear
 8001df0:	4b10      	ldr	r3, [pc, #64]	; (8001e34 <Hw_I2C_SW_IO_Setup+0x44>)
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_SW_IO_Setup( void )
{
 8001df2:	b510      	push	{r4, lr}
	u8 i;

	//-- SCL PB.6
	//
	REG_GPIOB_CRL &= ~(0x0F << (24));	// Clear
 8001df4:	6819      	ldr	r1, [r3, #0]


	// 핀 기본 상태 
	for( i=0; i<HW_I2C_SW_CH_MAX; i++ )
	{
		Hw_I2C_SW_SCL_HIGH( i );
 8001df6:	2000      	movs	r0, #0
{
	u8 i;

	//-- SCL PB.6
	//
	REG_GPIOB_CRL &= ~(0x0F << (24));	// Clear
 8001df8:	f021 6270 	bic.w	r2, r1, #251658240	; 0xf000000
 8001dfc:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x03 << (24));	// MODE, PB.6 Output mode, max speed 50Mhz
 8001dfe:	6819      	ldr	r1, [r3, #0]


	// 핀 기본 상태 
	for( i=0; i<HW_I2C_SW_CH_MAX; i++ )
	{
		Hw_I2C_SW_SCL_HIGH( i );
 8001e00:	4c0d      	ldr	r4, [pc, #52]	; (8001e38 <Hw_I2C_SW_IO_Setup+0x48>)
	u8 i;

	//-- SCL PB.6
	//
	REG_GPIOB_CRL &= ~(0x0F << (24));	// Clear
	REG_GPIOB_CRL |=  (0x03 << (24));	// MODE, PB.6 Output mode, max speed 50Mhz
 8001e02:	f041 7240 	orr.w	r2, r1, #50331648	; 0x3000000
 8001e06:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x00 << (26));	// CNF,  PB.6 General purpose output push-pul	
 8001e08:	6819      	ldr	r1, [r3, #0]
 8001e0a:	6019      	str	r1, [r3, #0]


	//-- SDA PB.7
	//
	REG_GPIOB_CRL &= ~(0x0F << (28));	// Clear
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	f022 4170 	bic.w	r1, r2, #4026531840	; 0xf0000000
 8001e12:	6019      	str	r1, [r3, #0]
	REG_GPIOB_CRL |=  (0x03 << (28));	// MODE, PB.7 Output mode, max speed 50Mhz
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	f042 5140 	orr.w	r1, r2, #805306368	; 0x30000000
 8001e1a:	6019      	str	r1, [r3, #0]
	REG_GPIOB_CRL |=  (0x00 << (30));	// CNF,  PB.7 General purpose output push-pul	
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	601a      	str	r2, [r3, #0]


	// 핀 기본 상태 
	for( i=0; i<HW_I2C_SW_CH_MAX; i++ )
	{
		Hw_I2C_SW_SCL_HIGH( i );
 8001e20:	47a0      	blx	r4
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_HIGH( u8 Ch )
{
	if( Ch == 0 )
	{
		SET_BIT( REG_GPIOB_ODR, 7 );
 8001e22:	4b06      	ldr	r3, [pc, #24]	; (8001e3c <Hw_I2C_SW_IO_Setup+0x4c>)


	// 핀 기본 상태 
	for( i=0; i<HW_I2C_SW_CH_MAX; i++ )
	{
		Hw_I2C_SW_SCL_HIGH( i );
 8001e24:	2001      	movs	r0, #1
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_HIGH( u8 Ch )
{
	if( Ch == 0 )
	{
		SET_BIT( REG_GPIOB_ODR, 7 );
 8001e26:	6819      	ldr	r1, [r3, #0]
 8001e28:	f041 0280 	orr.w	r2, r1, #128	; 0x80
 8001e2c:	601a      	str	r2, [r3, #0]


	// 핀 기본 상태 
	for( i=0; i<HW_I2C_SW_CH_MAX; i++ )
	{
		Hw_I2C_SW_SCL_HIGH( i );
 8001e2e:	47a0      	blx	r4
		Hw_I2C_SW_SDA_HIGH( i );
	}

}
 8001e30:	bd10      	pop	{r4, pc}
 8001e32:	bf00      	nop
 8001e34:	40010c00 	.word	0x40010c00
 8001e38:	08001dcd 	.word	0x08001dcd
 8001e3c:	40010c0c 	.word	0x40010c0c

08001e40 <Hw_I2C_SW_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_SW_Init( void )
{
 8001e40:	b508      	push	{r3, lr}
	//-- I/O 초기화
	//
	Hw_I2C_SW_IO_Setup();	
 8001e42:	4b01      	ldr	r3, [pc, #4]	; (8001e48 <Hw_I2C_SW_Init+0x8>)
 8001e44:	4798      	blx	r3
}
 8001e46:	bd08      	pop	{r3, pc}
 8001e48:	08001df1 	.word	0x08001df1

08001e4c <Hw_I2C_SW_SCL_LOW>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SCL_LOW( u8 Ch )
{
 8001e4c:	b538      	push	{r3, r4, r5, lr}
 8001e4e:	4605      	mov	r5, r0
	Hw_Wait_Usec(HW_I2C_SW_PULSE_DELAY);
 8001e50:	4c05      	ldr	r4, [pc, #20]	; (8001e68 <Hw_I2C_SW_SCL_LOW+0x1c>)
 8001e52:	200a      	movs	r0, #10
 8001e54:	47a0      	blx	r4

	if( Ch == 0 )  
 8001e56:	b925      	cbnz	r5, 8001e62 <Hw_I2C_SW_SCL_LOW+0x16>
	{
		CLR_BIT( REG_GPIOB_ODR, 6 );	
 8001e58:	4b04      	ldr	r3, [pc, #16]	; (8001e6c <Hw_I2C_SW_SCL_LOW+0x20>)
 8001e5a:	6818      	ldr	r0, [r3, #0]
 8001e5c:	f020 0240 	bic.w	r2, r0, #64	; 0x40
 8001e60:	601a      	str	r2, [r3, #0]
	}
	else           
	{
	}

	Hw_Wait_Usec(HW_I2C_SW_PULSE_DELAY);
 8001e62:	200a      	movs	r0, #10
 8001e64:	47a0      	blx	r4
}
 8001e66:	bd38      	pop	{r3, r4, r5, pc}
 8001e68:	080016f1 	.word	0x080016f1
 8001e6c:	40010c0c 	.word	0x40010c0c

08001e70 <Hw_I2C_SW_EndTransmit>:
     ARG     : 
     			u8 Ch : I2C 채널
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_SW_EndTransmit( u8 Ch )
{
 8001e70:	b570      	push	{r4, r5, r6, lr}
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_LOW( u8 Ch )
{
	if( Ch == 0 )  
 8001e72:	4605      	mov	r5, r0
 8001e74:	b980      	cbnz	r0, 8001e98 <Hw_I2C_SW_EndTransmit+0x28>
	{
		CLR_BIT( REG_GPIOB_ODR, 7 );
 8001e76:	4e0c      	ldr	r6, [pc, #48]	; (8001ea8 <Hw_I2C_SW_EndTransmit+0x38>)
{
	//-- SDA Falling Edge 생성
	//
								// SCL	SDA   
	Hw_I2C_SW_SDA_LOW ( Ch );	//  0    0
	Hw_I2C_SW_SCL_LOW ( Ch );	//  0    0
 8001e78:	490c      	ldr	r1, [pc, #48]	; (8001eac <Hw_I2C_SW_EndTransmit+0x3c>)
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_LOW( u8 Ch )
{
	if( Ch == 0 )  
	{
		CLR_BIT( REG_GPIOB_ODR, 7 );
 8001e7a:	6833      	ldr	r3, [r6, #0]
	//-- SDA Falling Edge 생성
	//
								// SCL	SDA   
	Hw_I2C_SW_SDA_LOW ( Ch );	//  0    0
	Hw_I2C_SW_SCL_LOW ( Ch );	//  0    0
	Hw_I2C_SW_SCL_HIGH( Ch );	//  1    0
 8001e7c:	4c0c      	ldr	r4, [pc, #48]	; (8001eb0 <Hw_I2C_SW_EndTransmit+0x40>)
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_LOW( u8 Ch )
{
	if( Ch == 0 )  
	{
		CLR_BIT( REG_GPIOB_ODR, 7 );
 8001e7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001e82:	6032      	str	r2, [r6, #0]
{
	//-- SDA Falling Edge 생성
	//
								// SCL	SDA   
	Hw_I2C_SW_SDA_LOW ( Ch );	//  0    0
	Hw_I2C_SW_SCL_LOW ( Ch );	//  0    0
 8001e84:	4788      	blx	r1
	Hw_I2C_SW_SCL_HIGH( Ch );	//  1    0
 8001e86:	4628      	mov	r0, r5
 8001e88:	47a0      	blx	r4
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_HIGH( u8 Ch )
{
	if( Ch == 0 )
	{
		SET_BIT( REG_GPIOB_ODR, 7 );
 8001e8a:	6830      	ldr	r0, [r6, #0]
 8001e8c:	f040 0380 	orr.w	r3, r0, #128	; 0x80
 8001e90:	6033      	str	r3, [r6, #0]
								// SCL	SDA   
	Hw_I2C_SW_SDA_LOW ( Ch );	//  0    0
	Hw_I2C_SW_SCL_LOW ( Ch );	//  0    0
	Hw_I2C_SW_SCL_HIGH( Ch );	//  1    0
	Hw_I2C_SW_SDA_HIGH( Ch );	//  1    1
	Hw_I2C_SW_SCL_HIGH( Ch );	//  1    1
 8001e92:	4628      	mov	r0, r5
 8001e94:	47a0      	blx	r4
}
 8001e96:	bd70      	pop	{r4, r5, r6, pc}
{
	//-- SDA Falling Edge 생성
	//
								// SCL	SDA   
	Hw_I2C_SW_SDA_LOW ( Ch );	//  0    0
	Hw_I2C_SW_SCL_LOW ( Ch );	//  0    0
 8001e98:	4c04      	ldr	r4, [pc, #16]	; (8001eac <Hw_I2C_SW_EndTransmit+0x3c>)
 8001e9a:	47a0      	blx	r4
	Hw_I2C_SW_SCL_HIGH( Ch );	//  1    0
 8001e9c:	4628      	mov	r0, r5
 8001e9e:	4c04      	ldr	r4, [pc, #16]	; (8001eb0 <Hw_I2C_SW_EndTransmit+0x40>)
 8001ea0:	47a0      	blx	r4
	Hw_I2C_SW_SDA_HIGH( Ch );	//  1    1
	Hw_I2C_SW_SCL_HIGH( Ch );	//  1    1
 8001ea2:	4628      	mov	r0, r5
 8001ea4:	47a0      	blx	r4
}
 8001ea6:	bd70      	pop	{r4, r5, r6, pc}
 8001ea8:	40010c0c 	.word	0x40010c0c
 8001eac:	08001e4d 	.word	0x08001e4d
 8001eb0:	08001dcd 	.word	0x08001dcd

08001eb4 <Hw_I2C_SW_StartTransmit>:
     ARG     : 
     			u8 Ch : I2C 채널
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_SW_StartTransmit( u8 Ch )
{
 8001eb4:	b570      	push	{r4, r5, r6, lr}
 8001eb6:	4604      	mov	r4, r0
	//-- SDA Rising Edge 생성
	//
								// SCL	SDA
	Hw_I2C_SW_SCL_HIGH( Ch );	//  1    1
 8001eb8:	4d0b      	ldr	r5, [pc, #44]	; (8001ee8 <Hw_I2C_SW_StartTransmit+0x34>)
 8001eba:	47a8      	blx	r5
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_HIGH( u8 Ch )
{
	if( Ch == 0 )
 8001ebc:	b974      	cbnz	r4, 8001edc <Hw_I2C_SW_StartTransmit+0x28>
	{
		SET_BIT( REG_GPIOB_ODR, 7 );
 8001ebe:	4e0b      	ldr	r6, [pc, #44]	; (8001eec <Hw_I2C_SW_StartTransmit+0x38>)
	//-- SDA Rising Edge 생성
	//
								// SCL	SDA
	Hw_I2C_SW_SCL_HIGH( Ch );	//  1    1
	Hw_I2C_SW_SDA_HIGH( Ch );	//  1    1
	Hw_I2C_SW_SCL_HIGH( Ch );	//	1    1
 8001ec0:	4620      	mov	r0, r4
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_HIGH( u8 Ch )
{
	if( Ch == 0 )
	{
		SET_BIT( REG_GPIOB_ODR, 7 );
 8001ec2:	6832      	ldr	r2, [r6, #0]
 8001ec4:	f042 0180 	orr.w	r1, r2, #128	; 0x80
 8001ec8:	6031      	str	r1, [r6, #0]
	//-- SDA Rising Edge 생성
	//
								// SCL	SDA
	Hw_I2C_SW_SCL_HIGH( Ch );	//  1    1
	Hw_I2C_SW_SDA_HIGH( Ch );	//  1    1
	Hw_I2C_SW_SCL_HIGH( Ch );	//	1    1
 8001eca:	47a8      	blx	r5
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_LOW( u8 Ch )
{
	if( Ch == 0 )  
	{
		CLR_BIT( REG_GPIOB_ODR, 7 );
 8001ecc:	6830      	ldr	r0, [r6, #0]
 8001ece:	f020 0380 	bic.w	r3, r0, #128	; 0x80
 8001ed2:	6033      	str	r3, [r6, #0]
								// SCL	SDA
	Hw_I2C_SW_SCL_HIGH( Ch );	//  1    1
	Hw_I2C_SW_SDA_HIGH( Ch );	//  1    1
	Hw_I2C_SW_SCL_HIGH( Ch );	//	1    1
	Hw_I2C_SW_SDA_LOW ( Ch );	//  1    0
	Hw_I2C_SW_SCL_LOW ( Ch );	//  0    0
 8001ed4:	4620      	mov	r0, r4
 8001ed6:	4b06      	ldr	r3, [pc, #24]	; (8001ef0 <Hw_I2C_SW_StartTransmit+0x3c>)
 8001ed8:	4798      	blx	r3
}
 8001eda:	bd70      	pop	{r4, r5, r6, pc}
	//-- SDA Rising Edge 생성
	//
								// SCL	SDA
	Hw_I2C_SW_SCL_HIGH( Ch );	//  1    1
	Hw_I2C_SW_SDA_HIGH( Ch );	//  1    1
	Hw_I2C_SW_SCL_HIGH( Ch );	//	1    1
 8001edc:	4620      	mov	r0, r4
 8001ede:	47a8      	blx	r5
	Hw_I2C_SW_SDA_LOW ( Ch );	//  1    0
	Hw_I2C_SW_SCL_LOW ( Ch );	//  0    0
 8001ee0:	4620      	mov	r0, r4
 8001ee2:	4b03      	ldr	r3, [pc, #12]	; (8001ef0 <Hw_I2C_SW_StartTransmit+0x3c>)
 8001ee4:	4798      	blx	r3
}
 8001ee6:	bd70      	pop	{r4, r5, r6, pc}
 8001ee8:	08001dcd 	.word	0x08001dcd
 8001eec:	40010c0c 	.word	0x40010c0c
 8001ef0:	08001e4d 	.word	0x08001e4d

08001ef4 <Hw_I2C_SW_SetDir_SDA_Input>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SetDir_SDA_Input( u8 Ch )
{
	if( Ch == 0 )
 8001ef4:	b978      	cbnz	r0, 8001f16 <Hw_I2C_SW_SetDir_SDA_Input+0x22>
	{
		REG_GPIOB_CRL &= ~(0x0F << (28));	// Clear
 8001ef6:	4b08      	ldr	r3, [pc, #32]	; (8001f18 <Hw_I2C_SW_SetDir_SDA_Input+0x24>)
		REG_GPIOB_CRL |=  (0x00 << (28));	// MODE, PB.7 Input Mode
		//REG_GPIOB_CRL |=  (0x01 << (30));	// CNF,  PB.7 Floating input	
		REG_GPIOB_CRL |=  (0x02 << (30));	// CNF,  PB.7 input	pull-up/pull-down
		
		SET_BIT( REG_GPIOB_ODR, 7 );
 8001ef8:	4a08      	ldr	r2, [pc, #32]	; (8001f1c <Hw_I2C_SW_SetDir_SDA_Input+0x28>)
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SetDir_SDA_Input( u8 Ch )
{
	if( Ch == 0 )
	{
		REG_GPIOB_CRL &= ~(0x0F << (28));	// Clear
 8001efa:	6819      	ldr	r1, [r3, #0]
 8001efc:	f021 4070 	bic.w	r0, r1, #4026531840	; 0xf0000000
 8001f00:	6018      	str	r0, [r3, #0]
		REG_GPIOB_CRL |=  (0x00 << (28));	// MODE, PB.7 Input Mode
 8001f02:	6819      	ldr	r1, [r3, #0]
 8001f04:	6019      	str	r1, [r3, #0]
		//REG_GPIOB_CRL |=  (0x01 << (30));	// CNF,  PB.7 Floating input	
		REG_GPIOB_CRL |=  (0x02 << (30));	// CNF,  PB.7 input	pull-up/pull-down
 8001f06:	6818      	ldr	r0, [r3, #0]
 8001f08:	f040 4100 	orr.w	r1, r0, #2147483648	; 0x80000000
 8001f0c:	6019      	str	r1, [r3, #0]
		
		SET_BIT( REG_GPIOB_ODR, 7 );
 8001f0e:	6810      	ldr	r0, [r2, #0]
 8001f10:	f040 0380 	orr.w	r3, r0, #128	; 0x80
 8001f14:	6013      	str	r3, [r2, #0]
 8001f16:	4770      	bx	lr
 8001f18:	40010c00 	.word	0x40010c00
 8001f1c:	40010c0c 	.word	0x40010c0c

08001f20 <Hw_I2C_SW_ReadByte_Ack>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_I2C_SW_ReadByte_Ack( u8 Ch, u8 *pData )
{
 8001f20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001f24:	4604      	mov	r4, r0
	u8 i;
	u8 Data = 0;
	u8 Ack = 0;


	Hw_I2C_SW_SetDir_SDA_Input( Ch );
 8001f26:	4b5d      	ldr	r3, [pc, #372]	; (800209c <Hw_I2C_SW_ReadByte_Ack+0x17c>)
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_I2C_SW_ReadByte_Ack( u8 Ch, u8 *pData )
{
 8001f28:	460f      	mov	r7, r1

	for( i=0; i<8; i++ )
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001f2a:	4d5d      	ldr	r5, [pc, #372]	; (80020a0 <Hw_I2C_SW_ReadByte_Ack+0x180>)
	u8 i;
	u8 Data = 0;
	u8 Ack = 0;


	Hw_I2C_SW_SetDir_SDA_Input( Ch );
 8001f2c:	4798      	blx	r3

	for( i=0; i<8; i++ )
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001f2e:	4620      	mov	r0, r4
 8001f30:	47a8      	blx	r5
---------------------------------------------------------------------------*/
u8 Hw_I2C_SW_SDA( u8 Ch )
{
	u8 Data = 0;

	if( Ch == 0 )
 8001f32:	2c00      	cmp	r4, #0
 8001f34:	f040 8089 	bne.w	800204a <Hw_I2C_SW_ReadByte_Ack+0x12a>
	{
		if( REG_GPIOB_IDR & (1<<7) ) Data = 1;
 8001f38:	f8df 816c 	ldr.w	r8, [pc, #364]	; 80020a8 <Hw_I2C_SW_ReadByte_Ack+0x188>

		Hw_I2C_SW_SCL_HIGH( Ch );
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;

		Hw_I2C_SW_SCL_LOW( Ch );
 8001f3c:	4620      	mov	r0, r4
{
	u8 Data = 0;

	if( Ch == 0 )
	{
		if( REG_GPIOB_IDR & (1<<7) ) Data = 1;
 8001f3e:	f8d8 9000 	ldr.w	r9, [r8]

		Hw_I2C_SW_SCL_HIGH( Ch );
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;

		Hw_I2C_SW_SCL_LOW( Ch );
 8001f42:	4e58      	ldr	r6, [pc, #352]	; (80020a4 <Hw_I2C_SW_ReadByte_Ack+0x184>)
 8001f44:	47b0      	blx	r6
     TITLE   : Hw_I2C_SW_ReadByte_Ack
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_I2C_SW_ReadByte_Ack( u8 Ch, u8 *pData )
 8001f46:	f3c9 11c0 	ubfx	r1, r9, #7, #1

	for( i=0; i<8; i++ )
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001f4a:	4620      	mov	r0, r4

	Hw_I2C_SW_SetDir_SDA_Input( Ch );

	for( i=0; i<8; i++ )
	{
		Data <<= 1;
 8001f4c:	ea4f 0941 	mov.w	r9, r1, lsl #1

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001f50:	47a8      	blx	r5
{
	u8 Data = 0;

	if( Ch == 0 )
	{
		if( REG_GPIOB_IDR & (1<<7) ) Data = 1;
 8001f52:	f8d8 0000 	ldr.w	r0, [r8]

	Hw_I2C_SW_SetDir_SDA_Input( Ch );

	for( i=0; i<8; i++ )
	{
		Data <<= 1;
 8001f56:	fa5f f989 	uxtb.w	r9, r9
{
	u8 Data = 0;

	if( Ch == 0 )
	{
		if( REG_GPIOB_IDR & (1<<7) ) Data = 1;
 8001f5a:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001f5e:	d001      	beq.n	8001f64 <Hw_I2C_SW_ReadByte_Ack+0x44>
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;
 8001f60:	f049 0901 	orr.w	r9, r9, #1

		Hw_I2C_SW_SCL_LOW( Ch );
 8001f64:	2000      	movs	r0, #0
 8001f66:	47b0      	blx	r6

	for( i=0; i<8; i++ )
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001f68:	2000      	movs	r0, #0

	Hw_I2C_SW_SetDir_SDA_Input( Ch );

	for( i=0; i<8; i++ )
	{
		Data <<= 1;
 8001f6a:	ea4f 0c49 	mov.w	ip, r9, lsl #1
 8001f6e:	fa5f f88c 	uxtb.w	r8, ip

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001f72:	47a8      	blx	r5
{
	u8 Data = 0;

	if( Ch == 0 )
	{
		if( REG_GPIOB_IDR & (1<<7) ) Data = 1;
 8001f74:	4b4c      	ldr	r3, [pc, #304]	; (80020a8 <Hw_I2C_SW_ReadByte_Ack+0x188>)
 8001f76:	6818      	ldr	r0, [r3, #0]
 8001f78:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001f7c:	d001      	beq.n	8001f82 <Hw_I2C_SW_ReadByte_Ack+0x62>
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;
 8001f7e:	f048 0801 	orr.w	r8, r8, #1

		Hw_I2C_SW_SCL_LOW( Ch );
 8001f82:	2000      	movs	r0, #0
 8001f84:	47b0      	blx	r6

	for( i=0; i<8; i++ )
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001f86:	2000      	movs	r0, #0
 8001f88:	47a8      	blx	r5
{
	u8 Data = 0;

	if( Ch == 0 )
	{
		if( REG_GPIOB_IDR & (1<<7) ) Data = 1;
 8001f8a:	4a47      	ldr	r2, [pc, #284]	; (80020a8 <Hw_I2C_SW_ReadByte_Ack+0x188>)

	Hw_I2C_SW_SetDir_SDA_Input( Ch );

	for( i=0; i<8; i++ )
	{
		Data <<= 1;
 8001f8c:	ea4f 0848 	mov.w	r8, r8, lsl #1
{
	u8 Data = 0;

	if( Ch == 0 )
	{
		if( REG_GPIOB_IDR & (1<<7) ) Data = 1;
 8001f90:	6811      	ldr	r1, [r2, #0]

	Hw_I2C_SW_SetDir_SDA_Input( Ch );

	for( i=0; i<8; i++ )
	{
		Data <<= 1;
 8001f92:	fa5f f888 	uxtb.w	r8, r8
{
	u8 Data = 0;

	if( Ch == 0 )
	{
		if( REG_GPIOB_IDR & (1<<7) ) Data = 1;
 8001f96:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001f9a:	d001      	beq.n	8001fa0 <Hw_I2C_SW_ReadByte_Ack+0x80>
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;
 8001f9c:	f048 0801 	orr.w	r8, r8, #1

		Hw_I2C_SW_SCL_LOW( Ch );
 8001fa0:	2000      	movs	r0, #0
 8001fa2:	47b0      	blx	r6

	for( i=0; i<8; i++ )
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001fa4:	2000      	movs	r0, #0

	Hw_I2C_SW_SetDir_SDA_Input( Ch );

	for( i=0; i<8; i++ )
	{
		Data <<= 1;
 8001fa6:	ea4f 0c48 	mov.w	ip, r8, lsl #1
 8001faa:	fa5f f88c 	uxtb.w	r8, ip

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001fae:	47a8      	blx	r5
{
	u8 Data = 0;

	if( Ch == 0 )
	{
		if( REG_GPIOB_IDR & (1<<7) ) Data = 1;
 8001fb0:	4b3d      	ldr	r3, [pc, #244]	; (80020a8 <Hw_I2C_SW_ReadByte_Ack+0x188>)
 8001fb2:	6818      	ldr	r0, [r3, #0]
 8001fb4:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001fb8:	d001      	beq.n	8001fbe <Hw_I2C_SW_ReadByte_Ack+0x9e>
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;
 8001fba:	f048 0801 	orr.w	r8, r8, #1

		Hw_I2C_SW_SCL_LOW( Ch );
 8001fbe:	2000      	movs	r0, #0
 8001fc0:	47b0      	blx	r6

	for( i=0; i<8; i++ )
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001fc2:	2000      	movs	r0, #0
 8001fc4:	47a8      	blx	r5
{
	u8 Data = 0;

	if( Ch == 0 )
	{
		if( REG_GPIOB_IDR & (1<<7) ) Data = 1;
 8001fc6:	4a38      	ldr	r2, [pc, #224]	; (80020a8 <Hw_I2C_SW_ReadByte_Ack+0x188>)

	Hw_I2C_SW_SetDir_SDA_Input( Ch );

	for( i=0; i<8; i++ )
	{
		Data <<= 1;
 8001fc8:	ea4f 0848 	mov.w	r8, r8, lsl #1
{
	u8 Data = 0;

	if( Ch == 0 )
	{
		if( REG_GPIOB_IDR & (1<<7) ) Data = 1;
 8001fcc:	6811      	ldr	r1, [r2, #0]

	Hw_I2C_SW_SetDir_SDA_Input( Ch );

	for( i=0; i<8; i++ )
	{
		Data <<= 1;
 8001fce:	fa5f f888 	uxtb.w	r8, r8
{
	u8 Data = 0;

	if( Ch == 0 )
	{
		if( REG_GPIOB_IDR & (1<<7) ) Data = 1;
 8001fd2:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001fd6:	d001      	beq.n	8001fdc <Hw_I2C_SW_ReadByte_Ack+0xbc>
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;
 8001fd8:	f048 0801 	orr.w	r8, r8, #1

		Hw_I2C_SW_SCL_LOW( Ch );
 8001fdc:	2000      	movs	r0, #0
 8001fde:	47b0      	blx	r6

	for( i=0; i<8; i++ )
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001fe0:	2000      	movs	r0, #0

	Hw_I2C_SW_SetDir_SDA_Input( Ch );

	for( i=0; i<8; i++ )
	{
		Data <<= 1;
 8001fe2:	ea4f 0c48 	mov.w	ip, r8, lsl #1
 8001fe6:	fa5f f88c 	uxtb.w	r8, ip

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001fea:	47a8      	blx	r5
{
	u8 Data = 0;

	if( Ch == 0 )
	{
		if( REG_GPIOB_IDR & (1<<7) ) Data = 1;
 8001fec:	4b2e      	ldr	r3, [pc, #184]	; (80020a8 <Hw_I2C_SW_ReadByte_Ack+0x188>)
 8001fee:	6818      	ldr	r0, [r3, #0]
 8001ff0:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001ff4:	d001      	beq.n	8001ffa <Hw_I2C_SW_ReadByte_Ack+0xda>
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;
 8001ff6:	f048 0801 	orr.w	r8, r8, #1

		Hw_I2C_SW_SCL_LOW( Ch );
 8001ffa:	2000      	movs	r0, #0
 8001ffc:	47b0      	blx	r6

	for( i=0; i<8; i++ )
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8001ffe:	2000      	movs	r0, #0
 8002000:	47a8      	blx	r5
{
	u8 Data = 0;

	if( Ch == 0 )
	{
		if( REG_GPIOB_IDR & (1<<7) ) Data = 1;
 8002002:	4a29      	ldr	r2, [pc, #164]	; (80020a8 <Hw_I2C_SW_ReadByte_Ack+0x188>)

	Hw_I2C_SW_SetDir_SDA_Input( Ch );

	for( i=0; i<8; i++ )
	{
		Data <<= 1;
 8002004:	ea4f 0848 	mov.w	r8, r8, lsl #1
{
	u8 Data = 0;

	if( Ch == 0 )
	{
		if( REG_GPIOB_IDR & (1<<7) ) Data = 1;
 8002008:	6811      	ldr	r1, [r2, #0]
 800200a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800200e:	d001      	beq.n	8002014 <Hw_I2C_SW_ReadByte_Ack+0xf4>
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;
 8002010:	f048 0801 	orr.w	r8, r8, #1

		Hw_I2C_SW_SCL_LOW( Ch );
 8002014:	2000      	movs	r0, #0
 8002016:	47b0      	blx	r6
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SetDir_SDA_Output( u8 Ch )
{
	if( Ch == 0 )
	{
		REG_GPIOB_CRL &= ~(0x0F << (28));	// Clear
 8002018:	4b24      	ldr	r3, [pc, #144]	; (80020ac <Hw_I2C_SW_ReadByte_Ack+0x18c>)
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;

		Hw_I2C_SW_SCL_LOW( Ch );
	}

	*pData = Data;
 800201a:	f887 8000 	strb.w	r8, [r7]
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SetDir_SDA_Output( u8 Ch )
{
	if( Ch == 0 )
	{
		REG_GPIOB_CRL &= ~(0x0F << (28));	// Clear
 800201e:	681a      	ldr	r2, [r3, #0]
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_LOW( u8 Ch )
{
	if( Ch == 0 )  
	{
		CLR_BIT( REG_GPIOB_ODR, 7 );
 8002020:	4823      	ldr	r0, [pc, #140]	; (80020b0 <Hw_I2C_SW_ReadByte_Ack+0x190>)
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SetDir_SDA_Output( u8 Ch )
{
	if( Ch == 0 )
	{
		REG_GPIOB_CRL &= ~(0x0F << (28));	// Clear
 8002022:	f022 4170 	bic.w	r1, r2, #4026531840	; 0xf0000000
 8002026:	6019      	str	r1, [r3, #0]
		REG_GPIOB_CRL |=  (0x03 << (28));	// MODE, PB.7 Output mode, max speed 50Mhz
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	f042 5140 	orr.w	r1, r2, #805306368	; 0x30000000
 800202e:	6019      	str	r1, [r3, #0]
		REG_GPIOB_CRL |=  (0x00 << (30));	// CNF,  PB.7 General purpose output push-pul	
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	601a      	str	r2, [r3, #0]
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_LOW( u8 Ch )
{
	if( Ch == 0 )  
	{
		CLR_BIT( REG_GPIOB_ODR, 7 );
 8002034:	6801      	ldr	r1, [r0, #0]
 8002036:	f021 0380 	bic.w	r3, r1, #128	; 0x80
 800203a:	6003      	str	r3, [r0, #0]

	// Ack 발생 
	//
	Hw_I2C_SW_SDA_LOW( Ch );

	Hw_I2C_SW_SCL_HIGH( Ch );
 800203c:	4620      	mov	r0, r4
 800203e:	47a8      	blx	r5
	Hw_I2C_SW_SCL_LOW( Ch );
 8002040:	4620      	mov	r0, r4
 8002042:	47b0      	blx	r6


	return Ack;
}
 8002044:	2000      	movs	r0, #0
 8002046:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

		Hw_I2C_SW_SCL_HIGH( Ch );
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;

		Hw_I2C_SW_SCL_LOW( Ch );
 800204a:	4e16      	ldr	r6, [pc, #88]	; (80020a4 <Hw_I2C_SW_ReadByte_Ack+0x184>)
 800204c:	4620      	mov	r0, r4
 800204e:	47b0      	blx	r6

	for( i=0; i<8; i++ )
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8002050:	4620      	mov	r0, r4
 8002052:	47a8      	blx	r5
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;

		Hw_I2C_SW_SCL_LOW( Ch );
 8002054:	4620      	mov	r0, r4
 8002056:	47b0      	blx	r6

	for( i=0; i<8; i++ )
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8002058:	4620      	mov	r0, r4
 800205a:	47a8      	blx	r5
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;

		Hw_I2C_SW_SCL_LOW( Ch );
 800205c:	4620      	mov	r0, r4
 800205e:	47b0      	blx	r6

	for( i=0; i<8; i++ )
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8002060:	4620      	mov	r0, r4
 8002062:	47a8      	blx	r5
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;

		Hw_I2C_SW_SCL_LOW( Ch );
 8002064:	4620      	mov	r0, r4
 8002066:	47b0      	blx	r6

	for( i=0; i<8; i++ )
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8002068:	4620      	mov	r0, r4
 800206a:	47a8      	blx	r5
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;

		Hw_I2C_SW_SCL_LOW( Ch );
 800206c:	4620      	mov	r0, r4
 800206e:	47b0      	blx	r6

	for( i=0; i<8; i++ )
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8002070:	4620      	mov	r0, r4
 8002072:	47a8      	blx	r5
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;

		Hw_I2C_SW_SCL_LOW( Ch );
 8002074:	4620      	mov	r0, r4
 8002076:	47b0      	blx	r6

	for( i=0; i<8; i++ )
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8002078:	4620      	mov	r0, r4
 800207a:	47a8      	blx	r5
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;

		Hw_I2C_SW_SCL_LOW( Ch );
 800207c:	4620      	mov	r0, r4
 800207e:	47b0      	blx	r6

	for( i=0; i<8; i++ )
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8002080:	4620      	mov	r0, r4
 8002082:	47a8      	blx	r5
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;

		Hw_I2C_SW_SCL_LOW( Ch );
 8002084:	4620      	mov	r0, r4
 8002086:	47b0      	blx	r6
	}

	*pData = Data;
 8002088:	2200      	movs	r2, #0
 800208a:	703a      	strb	r2, [r7, #0]

	// Ack 발생 
	//
	Hw_I2C_SW_SDA_LOW( Ch );

	Hw_I2C_SW_SCL_HIGH( Ch );
 800208c:	4620      	mov	r0, r4
 800208e:	47a8      	blx	r5
	Hw_I2C_SW_SCL_LOW( Ch );
 8002090:	4620      	mov	r0, r4
 8002092:	47b0      	blx	r6


	return Ack;
}
 8002094:	2000      	movs	r0, #0
 8002096:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800209a:	bf00      	nop
 800209c:	08001ef5 	.word	0x08001ef5
 80020a0:	08001dcd 	.word	0x08001dcd
 80020a4:	08001e4d 	.word	0x08001e4d
 80020a8:	40010c08 	.word	0x40010c08
 80020ac:	40010c00 	.word	0x40010c00
 80020b0:	40010c0c 	.word	0x40010c0c

080020b4 <Hw_I2C_SW_ReadByte_NoAck>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_I2C_SW_ReadByte_NoAck( u8 Ch, u8 *pData )
{
 80020b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80020b8:	4604      	mov	r4, r0
	u8 i;
	u8 Data = 0;


	Hw_I2C_SW_SetDir_SDA_Input( Ch );
 80020ba:	4b53      	ldr	r3, [pc, #332]	; (8002208 <Hw_I2C_SW_ReadByte_NoAck+0x154>)
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_I2C_SW_ReadByte_NoAck( u8 Ch, u8 *pData )
{
 80020bc:	4688      	mov	r8, r1

	for( i=0; i<8; i++ )
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 80020be:	4d53      	ldr	r5, [pc, #332]	; (800220c <Hw_I2C_SW_ReadByte_NoAck+0x158>)
{
	u8 i;
	u8 Data = 0;


	Hw_I2C_SW_SetDir_SDA_Input( Ch );
 80020c0:	4798      	blx	r3

	for( i=0; i<8; i++ )
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 80020c2:	4620      	mov	r0, r4
 80020c4:	47a8      	blx	r5
---------------------------------------------------------------------------*/
u8 Hw_I2C_SW_SDA( u8 Ch )
{
	u8 Data = 0;

	if( Ch == 0 )
 80020c6:	2c00      	cmp	r4, #0
 80020c8:	d175      	bne.n	80021b6 <Hw_I2C_SW_ReadByte_NoAck+0x102>
	{
		if( REG_GPIOB_IDR & (1<<7) ) Data = 1;
 80020ca:	4f51      	ldr	r7, [pc, #324]	; (8002210 <Hw_I2C_SW_ReadByte_NoAck+0x15c>)

		Hw_I2C_SW_SCL_HIGH( Ch );
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;

		Hw_I2C_SW_SCL_LOW( Ch );
 80020cc:	4620      	mov	r0, r4
{
	u8 Data = 0;

	if( Ch == 0 )
	{
		if( REG_GPIOB_IDR & (1<<7) ) Data = 1;
 80020ce:	f8d7 9000 	ldr.w	r9, [r7]

		Hw_I2C_SW_SCL_HIGH( Ch );
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;

		Hw_I2C_SW_SCL_LOW( Ch );
 80020d2:	4e50      	ldr	r6, [pc, #320]	; (8002214 <Hw_I2C_SW_ReadByte_NoAck+0x160>)
 80020d4:	47b0      	blx	r6
     TITLE   : Hw_I2C_SW_ReadByte_NoAck
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_I2C_SW_ReadByte_NoAck( u8 Ch, u8 *pData )
 80020d6:	f3c9 11c0 	ubfx	r1, r9, #7, #1

	for( i=0; i<8; i++ )
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 80020da:	4620      	mov	r0, r4

	Hw_I2C_SW_SetDir_SDA_Input( Ch );

	for( i=0; i<8; i++ )
	{
		Data <<= 1;
 80020dc:	ea4f 0941 	mov.w	r9, r1, lsl #1

		Hw_I2C_SW_SCL_HIGH( Ch );
 80020e0:	47a8      	blx	r5
{
	u8 Data = 0;

	if( Ch == 0 )
	{
		if( REG_GPIOB_IDR & (1<<7) ) Data = 1;
 80020e2:	6838      	ldr	r0, [r7, #0]

	Hw_I2C_SW_SetDir_SDA_Input( Ch );

	for( i=0; i<8; i++ )
	{
		Data <<= 1;
 80020e4:	fa5f f989 	uxtb.w	r9, r9
{
	u8 Data = 0;

	if( Ch == 0 )
	{
		if( REG_GPIOB_IDR & (1<<7) ) Data = 1;
 80020e8:	f010 0f80 	tst.w	r0, #128	; 0x80
 80020ec:	d001      	beq.n	80020f2 <Hw_I2C_SW_ReadByte_NoAck+0x3e>
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;
 80020ee:	f049 0901 	orr.w	r9, r9, #1

		Hw_I2C_SW_SCL_LOW( Ch );
 80020f2:	2000      	movs	r0, #0
 80020f4:	47b0      	blx	r6

	Hw_I2C_SW_SetDir_SDA_Input( Ch );

	for( i=0; i<8; i++ )
	{
		Data <<= 1;
 80020f6:	ea4f 0c49 	mov.w	ip, r9, lsl #1

		Hw_I2C_SW_SCL_HIGH( Ch );
 80020fa:	2000      	movs	r0, #0

	Hw_I2C_SW_SetDir_SDA_Input( Ch );

	for( i=0; i<8; i++ )
	{
		Data <<= 1;
 80020fc:	fa5f f78c 	uxtb.w	r7, ip

		Hw_I2C_SW_SCL_HIGH( Ch );
 8002100:	47a8      	blx	r5
{
	u8 Data = 0;

	if( Ch == 0 )
	{
		if( REG_GPIOB_IDR & (1<<7) ) Data = 1;
 8002102:	4943      	ldr	r1, [pc, #268]	; (8002210 <Hw_I2C_SW_ReadByte_NoAck+0x15c>)
 8002104:	680b      	ldr	r3, [r1, #0]
 8002106:	f013 0f80 	tst.w	r3, #128	; 0x80
 800210a:	d001      	beq.n	8002110 <Hw_I2C_SW_ReadByte_NoAck+0x5c>
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;
 800210c:	f047 0701 	orr.w	r7, r7, #1

		Hw_I2C_SW_SCL_LOW( Ch );
 8002110:	2000      	movs	r0, #0
 8002112:	47b0      	blx	r6

	for( i=0; i<8; i++ )
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8002114:	2000      	movs	r0, #0
 8002116:	47a8      	blx	r5
{
	u8 Data = 0;

	if( Ch == 0 )
	{
		if( REG_GPIOB_IDR & (1<<7) ) Data = 1;
 8002118:	483d      	ldr	r0, [pc, #244]	; (8002210 <Hw_I2C_SW_ReadByte_NoAck+0x15c>)

	Hw_I2C_SW_SetDir_SDA_Input( Ch );

	for( i=0; i<8; i++ )
	{
		Data <<= 1;
 800211a:	007f      	lsls	r7, r7, #1
{
	u8 Data = 0;

	if( Ch == 0 )
	{
		if( REG_GPIOB_IDR & (1<<7) ) Data = 1;
 800211c:	6802      	ldr	r2, [r0, #0]

	Hw_I2C_SW_SetDir_SDA_Input( Ch );

	for( i=0; i<8; i++ )
	{
		Data <<= 1;
 800211e:	b2ff      	uxtb	r7, r7
{
	u8 Data = 0;

	if( Ch == 0 )
	{
		if( REG_GPIOB_IDR & (1<<7) ) Data = 1;
 8002120:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002124:	d001      	beq.n	800212a <Hw_I2C_SW_ReadByte_NoAck+0x76>
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;
 8002126:	f047 0701 	orr.w	r7, r7, #1

		Hw_I2C_SW_SCL_LOW( Ch );
 800212a:	2000      	movs	r0, #0
 800212c:	47b0      	blx	r6

	Hw_I2C_SW_SetDir_SDA_Input( Ch );

	for( i=0; i<8; i++ )
	{
		Data <<= 1;
 800212e:	007a      	lsls	r2, r7, #1

		Hw_I2C_SW_SCL_HIGH( Ch );
 8002130:	2000      	movs	r0, #0

	Hw_I2C_SW_SetDir_SDA_Input( Ch );

	for( i=0; i<8; i++ )
	{
		Data <<= 1;
 8002132:	b2d7      	uxtb	r7, r2

		Hw_I2C_SW_SCL_HIGH( Ch );
 8002134:	47a8      	blx	r5
{
	u8 Data = 0;

	if( Ch == 0 )
	{
		if( REG_GPIOB_IDR & (1<<7) ) Data = 1;
 8002136:	4936      	ldr	r1, [pc, #216]	; (8002210 <Hw_I2C_SW_ReadByte_NoAck+0x15c>)
 8002138:	680b      	ldr	r3, [r1, #0]
 800213a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800213e:	d001      	beq.n	8002144 <Hw_I2C_SW_ReadByte_NoAck+0x90>
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;
 8002140:	f047 0701 	orr.w	r7, r7, #1

		Hw_I2C_SW_SCL_LOW( Ch );
 8002144:	2000      	movs	r0, #0
 8002146:	47b0      	blx	r6

	for( i=0; i<8; i++ )
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8002148:	2000      	movs	r0, #0
 800214a:	47a8      	blx	r5
{
	u8 Data = 0;

	if( Ch == 0 )
	{
		if( REG_GPIOB_IDR & (1<<7) ) Data = 1;
 800214c:	4b30      	ldr	r3, [pc, #192]	; (8002210 <Hw_I2C_SW_ReadByte_NoAck+0x15c>)

	Hw_I2C_SW_SetDir_SDA_Input( Ch );

	for( i=0; i<8; i++ )
	{
		Data <<= 1;
 800214e:	007f      	lsls	r7, r7, #1
{
	u8 Data = 0;

	if( Ch == 0 )
	{
		if( REG_GPIOB_IDR & (1<<7) ) Data = 1;
 8002150:	6818      	ldr	r0, [r3, #0]

	Hw_I2C_SW_SetDir_SDA_Input( Ch );

	for( i=0; i<8; i++ )
	{
		Data <<= 1;
 8002152:	b2ff      	uxtb	r7, r7
{
	u8 Data = 0;

	if( Ch == 0 )
	{
		if( REG_GPIOB_IDR & (1<<7) ) Data = 1;
 8002154:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002158:	d001      	beq.n	800215e <Hw_I2C_SW_ReadByte_NoAck+0xaa>
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;
 800215a:	f047 0701 	orr.w	r7, r7, #1

		Hw_I2C_SW_SCL_LOW( Ch );
 800215e:	2000      	movs	r0, #0
 8002160:	47b0      	blx	r6

	Hw_I2C_SW_SetDir_SDA_Input( Ch );

	for( i=0; i<8; i++ )
	{
		Data <<= 1;
 8002162:	007b      	lsls	r3, r7, #1

		Hw_I2C_SW_SCL_HIGH( Ch );
 8002164:	2000      	movs	r0, #0

	Hw_I2C_SW_SetDir_SDA_Input( Ch );

	for( i=0; i<8; i++ )
	{
		Data <<= 1;
 8002166:	b2df      	uxtb	r7, r3

		Hw_I2C_SW_SCL_HIGH( Ch );
 8002168:	47a8      	blx	r5
{
	u8 Data = 0;

	if( Ch == 0 )
	{
		if( REG_GPIOB_IDR & (1<<7) ) Data = 1;
 800216a:	4a29      	ldr	r2, [pc, #164]	; (8002210 <Hw_I2C_SW_ReadByte_NoAck+0x15c>)
 800216c:	6811      	ldr	r1, [r2, #0]
 800216e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002172:	d001      	beq.n	8002178 <Hw_I2C_SW_ReadByte_NoAck+0xc4>
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;
 8002174:	f047 0701 	orr.w	r7, r7, #1

		Hw_I2C_SW_SCL_LOW( Ch );
 8002178:	2000      	movs	r0, #0
 800217a:	47b0      	blx	r6

	for( i=0; i<8; i++ )
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 800217c:	2000      	movs	r0, #0
 800217e:	47a8      	blx	r5
{
	u8 Data = 0;

	if( Ch == 0 )
	{
		if( REG_GPIOB_IDR & (1<<7) ) Data = 1;
 8002180:	4923      	ldr	r1, [pc, #140]	; (8002210 <Hw_I2C_SW_ReadByte_NoAck+0x15c>)

	Hw_I2C_SW_SetDir_SDA_Input( Ch );

	for( i=0; i<8; i++ )
	{
		Data <<= 1;
 8002182:	007f      	lsls	r7, r7, #1
{
	u8 Data = 0;

	if( Ch == 0 )
	{
		if( REG_GPIOB_IDR & (1<<7) ) Data = 1;
 8002184:	6808      	ldr	r0, [r1, #0]
 8002186:	f010 0f80 	tst.w	r0, #128	; 0x80
 800218a:	d001      	beq.n	8002190 <Hw_I2C_SW_ReadByte_NoAck+0xdc>
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;
 800218c:	f047 0701 	orr.w	r7, r7, #1

		Hw_I2C_SW_SCL_LOW( Ch );
 8002190:	2000      	movs	r0, #0
 8002192:	47b0      	blx	r6
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_HIGH( u8 Ch )
{
	if( Ch == 0 )
	{
		SET_BIT( REG_GPIOB_ODR, 7 );
 8002194:	4a20      	ldr	r2, [pc, #128]	; (8002218 <Hw_I2C_SW_ReadByte_NoAck+0x164>)
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SetDir_SDA_Output( u8 Ch )
{
	if( Ch == 0 )
	{
		REG_GPIOB_CRL &= ~(0x0F << (28));	// Clear
 8002196:	4b21      	ldr	r3, [pc, #132]	; (800221c <Hw_I2C_SW_ReadByte_NoAck+0x168>)
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_HIGH( u8 Ch )
{
	if( Ch == 0 )
	{
		SET_BIT( REG_GPIOB_ODR, 7 );
 8002198:	6810      	ldr	r0, [r2, #0]
 800219a:	f040 0180 	orr.w	r1, r0, #128	; 0x80
 800219e:	6011      	str	r1, [r2, #0]
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SetDir_SDA_Output( u8 Ch )
{
	if( Ch == 0 )
	{
		REG_GPIOB_CRL &= ~(0x0F << (28));	// Clear
 80021a0:	6818      	ldr	r0, [r3, #0]
 80021a2:	f020 4270 	bic.w	r2, r0, #4026531840	; 0xf0000000
 80021a6:	601a      	str	r2, [r3, #0]
		REG_GPIOB_CRL |=  (0x03 << (28));	// MODE, PB.7 Output mode, max speed 50Mhz
 80021a8:	6819      	ldr	r1, [r3, #0]
 80021aa:	f041 5040 	orr.w	r0, r1, #805306368	; 0x30000000
 80021ae:	6018      	str	r0, [r3, #0]
		REG_GPIOB_CRL |=  (0x00 << (30));	// CNF,  PB.7 General purpose output push-pul	
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	601a      	str	r2, [r3, #0]
 80021b4:	e01f      	b.n	80021f6 <Hw_I2C_SW_ReadByte_NoAck+0x142>

		Hw_I2C_SW_SCL_HIGH( Ch );
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;

		Hw_I2C_SW_SCL_LOW( Ch );
 80021b6:	4e17      	ldr	r6, [pc, #92]	; (8002214 <Hw_I2C_SW_ReadByte_NoAck+0x160>)
 80021b8:	4620      	mov	r0, r4
 80021ba:	47b0      	blx	r6

	for( i=0; i<8; i++ )
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 80021bc:	4620      	mov	r0, r4
 80021be:	47a8      	blx	r5
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;

		Hw_I2C_SW_SCL_LOW( Ch );
 80021c0:	4620      	mov	r0, r4
 80021c2:	47b0      	blx	r6

	for( i=0; i<8; i++ )
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 80021c4:	4620      	mov	r0, r4
 80021c6:	47a8      	blx	r5
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;

		Hw_I2C_SW_SCL_LOW( Ch );
 80021c8:	4620      	mov	r0, r4
 80021ca:	47b0      	blx	r6

	for( i=0; i<8; i++ )
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 80021cc:	4620      	mov	r0, r4
 80021ce:	47a8      	blx	r5
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;

		Hw_I2C_SW_SCL_LOW( Ch );
 80021d0:	4620      	mov	r0, r4
 80021d2:	47b0      	blx	r6

	for( i=0; i<8; i++ )
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 80021d4:	4620      	mov	r0, r4
 80021d6:	47a8      	blx	r5
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;

		Hw_I2C_SW_SCL_LOW( Ch );
 80021d8:	4620      	mov	r0, r4
 80021da:	47b0      	blx	r6

	for( i=0; i<8; i++ )
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 80021dc:	4620      	mov	r0, r4
 80021de:	47a8      	blx	r5
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;

		Hw_I2C_SW_SCL_LOW( Ch );
 80021e0:	4620      	mov	r0, r4
 80021e2:	47b0      	blx	r6

	for( i=0; i<8; i++ )
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 80021e4:	4620      	mov	r0, r4
 80021e6:	47a8      	blx	r5
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;

		Hw_I2C_SW_SCL_LOW( Ch );
 80021e8:	4620      	mov	r0, r4
 80021ea:	47b0      	blx	r6

	for( i=0; i<8; i++ )
	{
		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 80021ec:	4620      	mov	r0, r4
 80021ee:	47a8      	blx	r5
		
		if( Hw_I2C_SW_SDA( Ch ) == 1 ) Data |= 1;

		Hw_I2C_SW_SCL_LOW( Ch );
 80021f0:	4620      	mov	r0, r4
 80021f2:	47b0      	blx	r6
 80021f4:	2700      	movs	r7, #0

	Hw_I2C_SW_SDA_HIGH( Ch );

	Hw_I2C_SW_SetDir_SDA_Output( Ch );

	Hw_I2C_SW_SCL_HIGH( Ch );
 80021f6:	4620      	mov	r0, r4
 80021f8:	47a8      	blx	r5
	Hw_I2C_SW_SCL_LOW( Ch );
 80021fa:	4620      	mov	r0, r4
 80021fc:	47b0      	blx	r6

	*pData = Data;
 80021fe:	f888 7000 	strb.w	r7, [r8]

	return 0;
}
 8002202:	2000      	movs	r0, #0
 8002204:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002208:	08001ef5 	.word	0x08001ef5
 800220c:	08001dcd 	.word	0x08001dcd
 8002210:	40010c08 	.word	0x40010c08
 8002214:	08001e4d 	.word	0x08001e4d
 8002218:	40010c0c 	.word	0x40010c0c
 800221c:	40010c00 	.word	0x40010c00

08002220 <Hw_I2C_SW_WriteByte_Ack>:
	u8 i;
	u8 Ack = 1;

	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
 8002220:	f011 0f80 	tst.w	r1, #128	; 0x80
     			u8 Data : 전송할 바이트
     RET     : 
     			u8 : 0 -> Ack
---------------------------------------------------------------------------*/
u8 Hw_I2C_SW_WriteByte_Ack( u8 Ch, u8 Data )
{
 8002224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002226:	460f      	mov	r7, r1
 8002228:	4604      	mov	r4, r0
	u8 i;
	u8 Ack = 1;

	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
 800222a:	f040 8111 	bne.w	8002450 <Hw_I2C_SW_WriteByte_Ack+0x230>
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_LOW( u8 Ch )
{
	if( Ch == 0 )  
 800222e:	2800      	cmp	r0, #0
 8002230:	f000 80ff 	beq.w	8002432 <Hw_I2C_SW_WriteByte_Ack+0x212>
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8002234:	4620      	mov	r0, r4
	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;
 8002236:	007f      	lsls	r7, r7, #1

		Hw_I2C_SW_SCL_HIGH( Ch );
 8002238:	4e91      	ldr	r6, [pc, #580]	; (8002480 <Hw_I2C_SW_WriteByte_Ack+0x260>)
 800223a:	47b0      	blx	r6
		Hw_I2C_SW_SCL_LOW( Ch );
 800223c:	4d91      	ldr	r5, [pc, #580]	; (8002484 <Hw_I2C_SW_WriteByte_Ack+0x264>)
 800223e:	4620      	mov	r0, r4
	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;
 8002240:	b2ff      	uxtb	r7, r7

		Hw_I2C_SW_SCL_HIGH( Ch );
		Hw_I2C_SW_SCL_LOW( Ch );
 8002242:	47a8      	blx	r5
	u8 i;
	u8 Ack = 1;

	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
 8002244:	f017 0f80 	tst.w	r7, #128	; 0x80
 8002248:	f040 80f9 	bne.w	800243e <Hw_I2C_SW_WriteByte_Ack+0x21e>
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_LOW( u8 Ch )
{
	if( Ch == 0 )  
 800224c:	2c00      	cmp	r4, #0
 800224e:	f000 80d8 	beq.w	8002402 <Hw_I2C_SW_WriteByte_Ack+0x1e2>
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8002252:	4620      	mov	r0, r4
	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;
 8002254:	007f      	lsls	r7, r7, #1

		Hw_I2C_SW_SCL_HIGH( Ch );
 8002256:	47b0      	blx	r6
	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;
 8002258:	b2ff      	uxtb	r7, r7

		Hw_I2C_SW_SCL_HIGH( Ch );
		Hw_I2C_SW_SCL_LOW( Ch );
 800225a:	4620      	mov	r0, r4
 800225c:	47a8      	blx	r5
	u8 i;
	u8 Ack = 1;

	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
 800225e:	f017 0f80 	tst.w	r7, #128	; 0x80
 8002262:	f040 80dd 	bne.w	8002420 <Hw_I2C_SW_WriteByte_Ack+0x200>
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_LOW( u8 Ch )
{
	if( Ch == 0 )  
 8002266:	2c00      	cmp	r4, #0
 8002268:	f000 80b3 	beq.w	80023d2 <Hw_I2C_SW_WriteByte_Ack+0x1b2>
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 800226c:	4620      	mov	r0, r4
	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;
 800226e:	007f      	lsls	r7, r7, #1

		Hw_I2C_SW_SCL_HIGH( Ch );
 8002270:	47b0      	blx	r6
	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;
 8002272:	b2ff      	uxtb	r7, r7

		Hw_I2C_SW_SCL_HIGH( Ch );
		Hw_I2C_SW_SCL_LOW( Ch );
 8002274:	4620      	mov	r0, r4
 8002276:	47a8      	blx	r5
	u8 i;
	u8 Ack = 1;

	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
 8002278:	f017 0f80 	tst.w	r7, #128	; 0x80
 800227c:	f040 80b8 	bne.w	80023f0 <Hw_I2C_SW_WriteByte_Ack+0x1d0>
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_LOW( u8 Ch )
{
	if( Ch == 0 )  
 8002280:	2c00      	cmp	r4, #0
 8002282:	f000 808e 	beq.w	80023a2 <Hw_I2C_SW_WriteByte_Ack+0x182>
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8002286:	4620      	mov	r0, r4
	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;
 8002288:	007f      	lsls	r7, r7, #1

		Hw_I2C_SW_SCL_HIGH( Ch );
 800228a:	47b0      	blx	r6
	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;
 800228c:	b2ff      	uxtb	r7, r7

		Hw_I2C_SW_SCL_HIGH( Ch );
		Hw_I2C_SW_SCL_LOW( Ch );
 800228e:	4620      	mov	r0, r4
 8002290:	47a8      	blx	r5
	u8 i;
	u8 Ack = 1;

	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
 8002292:	f017 0f80 	tst.w	r7, #128	; 0x80
 8002296:	f040 8093 	bne.w	80023c0 <Hw_I2C_SW_WriteByte_Ack+0x1a0>
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_LOW( u8 Ch )
{
	if( Ch == 0 )  
 800229a:	2c00      	cmp	r4, #0
 800229c:	d06b      	beq.n	8002376 <Hw_I2C_SW_WriteByte_Ack+0x156>
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 800229e:	4620      	mov	r0, r4
	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;
 80022a0:	007f      	lsls	r7, r7, #1

		Hw_I2C_SW_SCL_HIGH( Ch );
 80022a2:	47b0      	blx	r6
	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;
 80022a4:	b2ff      	uxtb	r7, r7

		Hw_I2C_SW_SCL_HIGH( Ch );
		Hw_I2C_SW_SCL_LOW( Ch );
 80022a6:	4620      	mov	r0, r4
 80022a8:	47a8      	blx	r5
	u8 i;
	u8 Ack = 1;

	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
 80022aa:	f017 0f80 	tst.w	r7, #128	; 0x80
 80022ae:	d170      	bne.n	8002392 <Hw_I2C_SW_WriteByte_Ack+0x172>
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_LOW( u8 Ch )
{
	if( Ch == 0 )  
 80022b0:	2c00      	cmp	r4, #0
 80022b2:	d04a      	beq.n	800234a <Hw_I2C_SW_WriteByte_Ack+0x12a>
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 80022b4:	4620      	mov	r0, r4
	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;
 80022b6:	007f      	lsls	r7, r7, #1

		Hw_I2C_SW_SCL_HIGH( Ch );
 80022b8:	47b0      	blx	r6
	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;
 80022ba:	b2ff      	uxtb	r7, r7

		Hw_I2C_SW_SCL_HIGH( Ch );
		Hw_I2C_SW_SCL_LOW( Ch );
 80022bc:	4620      	mov	r0, r4
 80022be:	47a8      	blx	r5
	u8 i;
	u8 Ack = 1;

	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
 80022c0:	f017 0f80 	tst.w	r7, #128	; 0x80
 80022c4:	d14f      	bne.n	8002366 <Hw_I2C_SW_WriteByte_Ack+0x146>
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_LOW( u8 Ch )
{
	if( Ch == 0 )  
 80022c6:	2c00      	cmp	r4, #0
 80022c8:	d02a      	beq.n	8002320 <Hw_I2C_SW_WriteByte_Ack+0x100>
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 80022ca:	4620      	mov	r0, r4
 80022cc:	47b0      	blx	r6
		Hw_I2C_SW_SCL_LOW( Ch );
 80022ce:	4620      	mov	r0, r4
 80022d0:	47a8      	blx	r5
	u8 i;
	u8 Ack = 1;

	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
 80022d2:	f017 0f40 	tst.w	r7, #64	; 0x40
 80022d6:	d12f      	bne.n	8002338 <Hw_I2C_SW_WriteByte_Ack+0x118>
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_LOW( u8 Ch )
{
	if( Ch == 0 )  
 80022d8:	2c00      	cmp	r4, #0
 80022da:	f040 80c2 	bne.w	8002462 <Hw_I2C_SW_WriteByte_Ack+0x242>
	{
		CLR_BIT( REG_GPIOB_ODR, 7 );
 80022de:	496a      	ldr	r1, [pc, #424]	; (8002488 <Hw_I2C_SW_WriteByte_Ack+0x268>)
 80022e0:	680c      	ldr	r4, [r1, #0]
 80022e2:	f024 0080 	bic.w	r0, r4, #128	; 0x80
 80022e6:	6008      	str	r0, [r1, #0]
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 80022e8:	2000      	movs	r0, #0
 80022ea:	47b0      	blx	r6
		Hw_I2C_SW_SCL_LOW( Ch );
 80022ec:	2000      	movs	r0, #0
 80022ee:	47a8      	blx	r5
	}


	Hw_I2C_SW_SetDir_SDA_Input( Ch );
 80022f0:	4a66      	ldr	r2, [pc, #408]	; (800248c <Hw_I2C_SW_WriteByte_Ack+0x26c>)
 80022f2:	2000      	movs	r0, #0
 80022f4:	4790      	blx	r2



	// Ack 검사 
	//
	Hw_I2C_SW_SCL_HIGH( Ch );
 80022f6:	2000      	movs	r0, #0
 80022f8:	47b0      	blx	r6
{
	u8 Data = 0;

	if( Ch == 0 )
	{
		if( REG_GPIOB_IDR & (1<<7) ) Data = 1;
 80022fa:	4b65      	ldr	r3, [pc, #404]	; (8002490 <Hw_I2C_SW_WriteByte_Ack+0x270>)
	//
	Hw_I2C_SW_SCL_HIGH( Ch );

	if( Hw_I2C_SW_SDA( Ch ) == 0 ) Ack = 0;

	Hw_I2C_SW_SCL_LOW( Ch );
 80022fc:	2000      	movs	r0, #0
{
	u8 Data = 0;

	if( Ch == 0 )
	{
		if( REG_GPIOB_IDR & (1<<7) ) Data = 1;
 80022fe:	681c      	ldr	r4, [r3, #0]
	//
	Hw_I2C_SW_SCL_HIGH( Ch );

	if( Hw_I2C_SW_SDA( Ch ) == 0 ) Ack = 0;

	Hw_I2C_SW_SCL_LOW( Ch );
 8002300:	47a8      	blx	r5
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SetDir_SDA_Output( u8 Ch )
{
	if( Ch == 0 )
	{
		REG_GPIOB_CRL &= ~(0x0F << (28));	// Clear
 8002302:	4864      	ldr	r0, [pc, #400]	; (8002494 <Hw_I2C_SW_WriteByte_Ack+0x274>)
     			u8 : 0 -> Ack
---------------------------------------------------------------------------*/
u8 Hw_I2C_SW_WriteByte_Ack( u8 Ch, u8 Data )
{
	u8 i;
	u8 Ack = 1;
 8002304:	f3c4 14c0 	ubfx	r4, r4, #7, #1
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SetDir_SDA_Output( u8 Ch )
{
	if( Ch == 0 )
	{
		REG_GPIOB_CRL &= ~(0x0F << (28));	// Clear
 8002308:	6801      	ldr	r1, [r0, #0]
 800230a:	f021 4270 	bic.w	r2, r1, #4026531840	; 0xf0000000
 800230e:	6002      	str	r2, [r0, #0]
		REG_GPIOB_CRL |=  (0x03 << (28));	// MODE, PB.7 Output mode, max speed 50Mhz
 8002310:	6803      	ldr	r3, [r0, #0]
 8002312:	f043 5140 	orr.w	r1, r3, #805306368	; 0x30000000
 8002316:	6001      	str	r1, [r0, #0]
		REG_GPIOB_CRL |=  (0x00 << (30));	// CNF,  PB.7 General purpose output push-pul	
 8002318:	6802      	ldr	r2, [r0, #0]
 800231a:	6002      	str	r2, [r0, #0]


	Hw_I2C_SW_SetDir_SDA_Output( Ch );

	return Ack;
}
 800231c:	4620      	mov	r0, r4
 800231e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_LOW( u8 Ch )
{
	if( Ch == 0 )  
	{
		CLR_BIT( REG_GPIOB_ODR, 7 );
 8002320:	4959      	ldr	r1, [pc, #356]	; (8002488 <Hw_I2C_SW_WriteByte_Ack+0x268>)
 8002322:	680b      	ldr	r3, [r1, #0]
 8002324:	f023 0080 	bic.w	r0, r3, #128	; 0x80
 8002328:	6008      	str	r0, [r1, #0]
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 800232a:	4620      	mov	r0, r4
 800232c:	47b0      	blx	r6
		Hw_I2C_SW_SCL_LOW( Ch );
 800232e:	4620      	mov	r0, r4
 8002330:	47a8      	blx	r5
	u8 i;
	u8 Ack = 1;

	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
 8002332:	f017 0f40 	tst.w	r7, #64	; 0x40
 8002336:	d0cf      	beq.n	80022d8 <Hw_I2C_SW_WriteByte_Ack+0xb8>
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_HIGH( u8 Ch )
{
	if( Ch == 0 )
 8002338:	2c00      	cmp	r4, #0
 800233a:	f040 8092 	bne.w	8002462 <Hw_I2C_SW_WriteByte_Ack+0x242>
	{
		SET_BIT( REG_GPIOB_ODR, 7 );
 800233e:	4b52      	ldr	r3, [pc, #328]	; (8002488 <Hw_I2C_SW_WriteByte_Ack+0x268>)
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	f042 0480 	orr.w	r4, r2, #128	; 0x80
 8002346:	601c      	str	r4, [r3, #0]
 8002348:	e7ce      	b.n	80022e8 <Hw_I2C_SW_WriteByte_Ack+0xc8>
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_LOW( u8 Ch )
{
	if( Ch == 0 )  
	{
		CLR_BIT( REG_GPIOB_ODR, 7 );
 800234a:	4b4f      	ldr	r3, [pc, #316]	; (8002488 <Hw_I2C_SW_WriteByte_Ack+0x268>)
	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;
 800234c:	007f      	lsls	r7, r7, #1
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_LOW( u8 Ch )
{
	if( Ch == 0 )  
	{
		CLR_BIT( REG_GPIOB_ODR, 7 );
 800234e:	6818      	ldr	r0, [r3, #0]
	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;
 8002350:	b2ff      	uxtb	r7, r7
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_LOW( u8 Ch )
{
	if( Ch == 0 )  
	{
		CLR_BIT( REG_GPIOB_ODR, 7 );
 8002352:	f020 0280 	bic.w	r2, r0, #128	; 0x80
 8002356:	601a      	str	r2, [r3, #0]
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8002358:	4620      	mov	r0, r4
 800235a:	47b0      	blx	r6
		Hw_I2C_SW_SCL_LOW( Ch );
 800235c:	4620      	mov	r0, r4
 800235e:	47a8      	blx	r5
	u8 i;
	u8 Ack = 1;

	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
 8002360:	f017 0f80 	tst.w	r7, #128	; 0x80
 8002364:	d0af      	beq.n	80022c6 <Hw_I2C_SW_WriteByte_Ack+0xa6>
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_HIGH( u8 Ch )
{
	if( Ch == 0 )
 8002366:	2c00      	cmp	r4, #0
 8002368:	d1af      	bne.n	80022ca <Hw_I2C_SW_WriteByte_Ack+0xaa>
	{
		SET_BIT( REG_GPIOB_ODR, 7 );
 800236a:	4847      	ldr	r0, [pc, #284]	; (8002488 <Hw_I2C_SW_WriteByte_Ack+0x268>)
 800236c:	6801      	ldr	r1, [r0, #0]
 800236e:	f041 0280 	orr.w	r2, r1, #128	; 0x80
 8002372:	6002      	str	r2, [r0, #0]
 8002374:	e7a9      	b.n	80022ca <Hw_I2C_SW_WriteByte_Ack+0xaa>
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_LOW( u8 Ch )
{
	if( Ch == 0 )  
	{
		CLR_BIT( REG_GPIOB_ODR, 7 );
 8002376:	4944      	ldr	r1, [pc, #272]	; (8002488 <Hw_I2C_SW_WriteByte_Ack+0x268>)
	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;
 8002378:	007f      	lsls	r7, r7, #1
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_LOW( u8 Ch )
{
	if( Ch == 0 )  
	{
		CLR_BIT( REG_GPIOB_ODR, 7 );
 800237a:	680b      	ldr	r3, [r1, #0]
	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;
 800237c:	b2ff      	uxtb	r7, r7
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_LOW( u8 Ch )
{
	if( Ch == 0 )  
	{
		CLR_BIT( REG_GPIOB_ODR, 7 );
 800237e:	f023 0080 	bic.w	r0, r3, #128	; 0x80
 8002382:	6008      	str	r0, [r1, #0]
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8002384:	4620      	mov	r0, r4
 8002386:	47b0      	blx	r6
		Hw_I2C_SW_SCL_LOW( Ch );
 8002388:	4620      	mov	r0, r4
 800238a:	47a8      	blx	r5
	u8 i;
	u8 Ack = 1;

	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
 800238c:	f017 0f80 	tst.w	r7, #128	; 0x80
 8002390:	d08e      	beq.n	80022b0 <Hw_I2C_SW_WriteByte_Ack+0x90>
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_HIGH( u8 Ch )
{
	if( Ch == 0 )
 8002392:	2c00      	cmp	r4, #0
 8002394:	d18e      	bne.n	80022b4 <Hw_I2C_SW_WriteByte_Ack+0x94>
	{
		SET_BIT( REG_GPIOB_ODR, 7 );
 8002396:	4b3c      	ldr	r3, [pc, #240]	; (8002488 <Hw_I2C_SW_WriteByte_Ack+0x268>)
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	f042 0180 	orr.w	r1, r2, #128	; 0x80
 800239e:	6019      	str	r1, [r3, #0]
 80023a0:	e788      	b.n	80022b4 <Hw_I2C_SW_WriteByte_Ack+0x94>
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_LOW( u8 Ch )
{
	if( Ch == 0 )  
	{
		CLR_BIT( REG_GPIOB_ODR, 7 );
 80023a2:	4b39      	ldr	r3, [pc, #228]	; (8002488 <Hw_I2C_SW_WriteByte_Ack+0x268>)
	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;
 80023a4:	007f      	lsls	r7, r7, #1
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_LOW( u8 Ch )
{
	if( Ch == 0 )  
	{
		CLR_BIT( REG_GPIOB_ODR, 7 );
 80023a6:	6818      	ldr	r0, [r3, #0]
	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;
 80023a8:	b2ff      	uxtb	r7, r7
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_LOW( u8 Ch )
{
	if( Ch == 0 )  
	{
		CLR_BIT( REG_GPIOB_ODR, 7 );
 80023aa:	f020 0280 	bic.w	r2, r0, #128	; 0x80
 80023ae:	601a      	str	r2, [r3, #0]
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 80023b0:	4620      	mov	r0, r4
 80023b2:	47b0      	blx	r6
		Hw_I2C_SW_SCL_LOW( Ch );
 80023b4:	4620      	mov	r0, r4
 80023b6:	47a8      	blx	r5
	u8 i;
	u8 Ack = 1;

	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
 80023b8:	f017 0f80 	tst.w	r7, #128	; 0x80
 80023bc:	f43f af6d 	beq.w	800229a <Hw_I2C_SW_WriteByte_Ack+0x7a>
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_HIGH( u8 Ch )
{
	if( Ch == 0 )
 80023c0:	2c00      	cmp	r4, #0
 80023c2:	f47f af6c 	bne.w	800229e <Hw_I2C_SW_WriteByte_Ack+0x7e>
	{
		SET_BIT( REG_GPIOB_ODR, 7 );
 80023c6:	4830      	ldr	r0, [pc, #192]	; (8002488 <Hw_I2C_SW_WriteByte_Ack+0x268>)
 80023c8:	6801      	ldr	r1, [r0, #0]
 80023ca:	f041 0280 	orr.w	r2, r1, #128	; 0x80
 80023ce:	6002      	str	r2, [r0, #0]
 80023d0:	e765      	b.n	800229e <Hw_I2C_SW_WriteByte_Ack+0x7e>
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_LOW( u8 Ch )
{
	if( Ch == 0 )  
	{
		CLR_BIT( REG_GPIOB_ODR, 7 );
 80023d2:	492d      	ldr	r1, [pc, #180]	; (8002488 <Hw_I2C_SW_WriteByte_Ack+0x268>)
	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;
 80023d4:	007f      	lsls	r7, r7, #1
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_LOW( u8 Ch )
{
	if( Ch == 0 )  
	{
		CLR_BIT( REG_GPIOB_ODR, 7 );
 80023d6:	680b      	ldr	r3, [r1, #0]
	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;
 80023d8:	b2ff      	uxtb	r7, r7
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_LOW( u8 Ch )
{
	if( Ch == 0 )  
	{
		CLR_BIT( REG_GPIOB_ODR, 7 );
 80023da:	f023 0080 	bic.w	r0, r3, #128	; 0x80
 80023de:	6008      	str	r0, [r1, #0]
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 80023e0:	4620      	mov	r0, r4
 80023e2:	47b0      	blx	r6
		Hw_I2C_SW_SCL_LOW( Ch );
 80023e4:	4620      	mov	r0, r4
 80023e6:	47a8      	blx	r5
	u8 i;
	u8 Ack = 1;

	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
 80023e8:	f017 0f80 	tst.w	r7, #128	; 0x80
 80023ec:	f43f af48 	beq.w	8002280 <Hw_I2C_SW_WriteByte_Ack+0x60>
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_HIGH( u8 Ch )
{
	if( Ch == 0 )
 80023f0:	2c00      	cmp	r4, #0
 80023f2:	f47f af48 	bne.w	8002286 <Hw_I2C_SW_WriteByte_Ack+0x66>
	{
		SET_BIT( REG_GPIOB_ODR, 7 );
 80023f6:	4b24      	ldr	r3, [pc, #144]	; (8002488 <Hw_I2C_SW_WriteByte_Ack+0x268>)
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	f042 0180 	orr.w	r1, r2, #128	; 0x80
 80023fe:	6019      	str	r1, [r3, #0]
 8002400:	e741      	b.n	8002286 <Hw_I2C_SW_WriteByte_Ack+0x66>
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_LOW( u8 Ch )
{
	if( Ch == 0 )  
	{
		CLR_BIT( REG_GPIOB_ODR, 7 );
 8002402:	4b21      	ldr	r3, [pc, #132]	; (8002488 <Hw_I2C_SW_WriteByte_Ack+0x268>)
	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;
 8002404:	007f      	lsls	r7, r7, #1
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_LOW( u8 Ch )
{
	if( Ch == 0 )  
	{
		CLR_BIT( REG_GPIOB_ODR, 7 );
 8002406:	6818      	ldr	r0, [r3, #0]
	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;
 8002408:	b2ff      	uxtb	r7, r7
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_LOW( u8 Ch )
{
	if( Ch == 0 )  
	{
		CLR_BIT( REG_GPIOB_ODR, 7 );
 800240a:	f020 0280 	bic.w	r2, r0, #128	; 0x80
 800240e:	601a      	str	r2, [r3, #0]
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8002410:	4620      	mov	r0, r4
 8002412:	47b0      	blx	r6
		Hw_I2C_SW_SCL_LOW( Ch );
 8002414:	4620      	mov	r0, r4
 8002416:	47a8      	blx	r5
	u8 i;
	u8 Ack = 1;

	for( i=0; i<8; i++ )
	{
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
 8002418:	f017 0f80 	tst.w	r7, #128	; 0x80
 800241c:	f43f af23 	beq.w	8002266 <Hw_I2C_SW_WriteByte_Ack+0x46>
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_HIGH( u8 Ch )
{
	if( Ch == 0 )
 8002420:	2c00      	cmp	r4, #0
 8002422:	f47f af23 	bne.w	800226c <Hw_I2C_SW_WriteByte_Ack+0x4c>
	{
		SET_BIT( REG_GPIOB_ODR, 7 );
 8002426:	4818      	ldr	r0, [pc, #96]	; (8002488 <Hw_I2C_SW_WriteByte_Ack+0x268>)
 8002428:	6801      	ldr	r1, [r0, #0]
 800242a:	f041 0280 	orr.w	r2, r1, #128	; 0x80
 800242e:	6002      	str	r2, [r0, #0]
 8002430:	e71c      	b.n	800226c <Hw_I2C_SW_WriteByte_Ack+0x4c>
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_LOW( u8 Ch )
{
	if( Ch == 0 )  
	{
		CLR_BIT( REG_GPIOB_ODR, 7 );
 8002432:	4b15      	ldr	r3, [pc, #84]	; (8002488 <Hw_I2C_SW_WriteByte_Ack+0x268>)
 8002434:	6818      	ldr	r0, [r3, #0]
 8002436:	f020 0280 	bic.w	r2, r0, #128	; 0x80
 800243a:	601a      	str	r2, [r3, #0]
 800243c:	e6fa      	b.n	8002234 <Hw_I2C_SW_WriteByte_Ack+0x14>
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_HIGH( u8 Ch )
{
	if( Ch == 0 )
 800243e:	2c00      	cmp	r4, #0
 8002440:	f47f af07 	bne.w	8002252 <Hw_I2C_SW_WriteByte_Ack+0x32>
	{
		SET_BIT( REG_GPIOB_ODR, 7 );
 8002444:	4b10      	ldr	r3, [pc, #64]	; (8002488 <Hw_I2C_SW_WriteByte_Ack+0x268>)
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	f042 0180 	orr.w	r1, r2, #128	; 0x80
 800244c:	6019      	str	r1, [r3, #0]
 800244e:	e700      	b.n	8002252 <Hw_I2C_SW_WriteByte_Ack+0x32>
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_SW_SDA_HIGH( u8 Ch )
{
	if( Ch == 0 )
 8002450:	2800      	cmp	r0, #0
 8002452:	f47f aeef 	bne.w	8002234 <Hw_I2C_SW_WriteByte_Ack+0x14>
	{
		SET_BIT( REG_GPIOB_ODR, 7 );
 8002456:	4d0c      	ldr	r5, [pc, #48]	; (8002488 <Hw_I2C_SW_WriteByte_Ack+0x268>)
 8002458:	682e      	ldr	r6, [r5, #0]
 800245a:	f046 0180 	orr.w	r1, r6, #128	; 0x80
 800245e:	6029      	str	r1, [r5, #0]
 8002460:	e6e8      	b.n	8002234 <Hw_I2C_SW_WriteByte_Ack+0x14>
		if( Data & (1<<7) )  Hw_I2C_SW_SDA_HIGH( Ch );
		else                 Hw_I2C_SW_SDA_LOW ( Ch );

		Data <<= 1;

		Hw_I2C_SW_SCL_HIGH( Ch );
 8002462:	4620      	mov	r0, r4
 8002464:	47b0      	blx	r6
		Hw_I2C_SW_SCL_LOW( Ch );
 8002466:	4620      	mov	r0, r4
 8002468:	47a8      	blx	r5
	}


	Hw_I2C_SW_SetDir_SDA_Input( Ch );
 800246a:	4b08      	ldr	r3, [pc, #32]	; (800248c <Hw_I2C_SW_WriteByte_Ack+0x26c>)
 800246c:	4620      	mov	r0, r4
 800246e:	4798      	blx	r3



	// Ack 검사 
	//
	Hw_I2C_SW_SCL_HIGH( Ch );
 8002470:	4620      	mov	r0, r4
 8002472:	47b0      	blx	r6

	if( Hw_I2C_SW_SDA( Ch ) == 0 ) Ack = 0;

	Hw_I2C_SW_SCL_LOW( Ch );
 8002474:	4620      	mov	r0, r4

	// Ack 검사 
	//
	Hw_I2C_SW_SCL_HIGH( Ch );

	if( Hw_I2C_SW_SDA( Ch ) == 0 ) Ack = 0;
 8002476:	2400      	movs	r4, #0

	Hw_I2C_SW_SCL_LOW( Ch );
 8002478:	47a8      	blx	r5


	Hw_I2C_SW_SetDir_SDA_Output( Ch );

	return Ack;
}
 800247a:	4620      	mov	r0, r4
 800247c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800247e:	bf00      	nop
 8002480:	08001dcd 	.word	0x08001dcd
 8002484:	08001e4d 	.word	0x08001e4d
 8002488:	40010c0c 	.word	0x40010c0c
 800248c:	08001ef5 	.word	0x08001ef5
 8002490:	40010c08 	.word	0x40010c08
 8002494:	40010c00 	.word	0x40010c00

08002498 <Hw_I2C_SW_Read>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_SW_Read( u8 Ch, u16 i2c_addr, u8 *pdata, u16 len )
{
 8002498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u16 Ret = 0;
	u8  i;
	u8  LastIndex = 0;

	if( len > 0 ) LastIndex = len - 1;
 800249c:	461d      	mov	r5, r3
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_SW_Read( u8 Ch, u16 i2c_addr, u8 *pdata, u16 len )
{
 800249e:	b083      	sub	sp, #12
 80024a0:	4604      	mov	r4, r0
 80024a2:	460e      	mov	r6, r1
 80024a4:	4617      	mov	r7, r2
	u16 Ret = 0;
	u8  i;
	u8  LastIndex = 0;

	if( len > 0 ) LastIndex = len - 1;
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d062      	beq.n	8002570 <Hw_I2C_SW_Read+0xd8>

	Hw_I2C_SW_StartTransmit(Ch);
 80024aa:	4a3e      	ldr	r2, [pc, #248]	; (80025a4 <Hw_I2C_SW_Read+0x10c>)
 80024ac:	4790      	blx	r2

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (1<<0));  		// Address
 80024ae:	0070      	lsls	r0, r6, #1
 80024b0:	f040 0101 	orr.w	r1, r0, #1
 80024b4:	b2c9      	uxtb	r1, r1
 80024b6:	4620      	mov	r0, r4
 80024b8:	4b3b      	ldr	r3, [pc, #236]	; (80025a8 <Hw_I2C_SW_Read+0x110>)
 80024ba:	4798      	blx	r3
{
	u16 Ret = 0;
	u8  i;
	u8  LastIndex = 0;

	if( len > 0 ) LastIndex = len - 1;
 80024bc:	1e6e      	subs	r6, r5, #1
 80024be:	fa5f f986 	uxtb.w	r9, r6
 80024c2:	f006 0601 	and.w	r6, r6, #1

	Hw_I2C_SW_StartTransmit(Ch);

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (1<<0));  		// Address
 80024c6:	4680      	mov	r8, r0
		{
			Ret |= Hw_I2C_SW_ReadByte_Ack(Ch, &pdata[i] );				// Read Data
		}
		else
		{
			Ret |= Hw_I2C_SW_ReadByte_NoAck(Ch, &pdata[i] );			// Read Data 마지막 데이터는 NACK 처리
 80024c8:	f8df b0e4 	ldr.w	fp, [pc, #228]	; 80025b0 <Hw_I2C_SW_Read+0x118>

	for( i=0; i<len; i++ )
	{
		if( i < LastIndex )
		{
			Ret |= Hw_I2C_SW_ReadByte_Ack(Ch, &pdata[i] );				// Read Data
 80024cc:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80025b4 <Hw_I2C_SW_Read+0x11c>
 80024d0:	9601      	str	r6, [sp, #4]

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (1<<0));  		// Address

	for( i=0; i<len; i++ )
	{
		if( i < LastIndex )
 80024d2:	f1b9 0f00 	cmp.w	r9, #0
 80024d6:	d15c      	bne.n	8002592 <Hw_I2C_SW_Read+0xfa>
		{
			Ret |= Hw_I2C_SW_ReadByte_Ack(Ch, &pdata[i] );				// Read Data
		}
		else
		{
			Ret |= Hw_I2C_SW_ReadByte_NoAck(Ch, &pdata[i] );			// Read Data 마지막 데이터는 NACK 처리
 80024d8:	4620      	mov	r0, r4
 80024da:	4639      	mov	r1, r7
 80024dc:	47d8      	blx	fp
 80024de:	ea40 0808 	orr.w	r8, r0, r8
 80024e2:	fa1f f888 	uxth.w	r8, r8

	Hw_I2C_SW_StartTransmit(Ch);

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (1<<0));  		// Address

	for( i=0; i<len; i++ )
 80024e6:	2601      	movs	r6, #1
 80024e8:	42b5      	cmp	r5, r6
 80024ea:	d94b      	bls.n	8002584 <Hw_I2C_SW_Read+0xec>
 80024ec:	9a01      	ldr	r2, [sp, #4]
 80024ee:	b162      	cbz	r2, 800250a <Hw_I2C_SW_Read+0x72>
	{
		if( i < LastIndex )
 80024f0:	45b1      	cmp	r9, r6
 80024f2:	d835      	bhi.n	8002560 <Hw_I2C_SW_Read+0xc8>
		{
			Ret |= Hw_I2C_SW_ReadByte_Ack(Ch, &pdata[i] );				// Read Data
		}
		else
		{
			Ret |= Hw_I2C_SW_ReadByte_NoAck(Ch, &pdata[i] );			// Read Data 마지막 데이터는 NACK 처리
 80024f4:	19b9      	adds	r1, r7, r6
 80024f6:	4620      	mov	r0, r4
 80024f8:	47d8      	blx	fp
 80024fa:	ea40 0108 	orr.w	r1, r0, r8
 80024fe:	fa1f f881 	uxth.w	r8, r1

	Hw_I2C_SW_StartTransmit(Ch);

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (1<<0));  		// Address

	for( i=0; i<len; i++ )
 8002502:	3601      	adds	r6, #1
 8002504:	b2f6      	uxtb	r6, r6
 8002506:	42b5      	cmp	r5, r6
 8002508:	d93c      	bls.n	8002584 <Hw_I2C_SW_Read+0xec>
	{
		if( i < LastIndex )
 800250a:	45b1      	cmp	r9, r6
		{
			Ret |= Hw_I2C_SW_ReadByte_Ack(Ch, &pdata[i] );				// Read Data
		}
		else
		{
			Ret |= Hw_I2C_SW_ReadByte_NoAck(Ch, &pdata[i] );			// Read Data 마지막 데이터는 NACK 처리
 800250c:	eb07 0106 	add.w	r1, r7, r6
 8002510:	4620      	mov	r0, r4

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (1<<0));  		// Address

	for( i=0; i<len; i++ )
	{
		if( i < LastIndex )
 8002512:	d919      	bls.n	8002548 <Hw_I2C_SW_Read+0xb0>
		{
			Ret |= Hw_I2C_SW_ReadByte_Ack(Ch, &pdata[i] );				// Read Data
 8002514:	47d0      	blx	sl

	Hw_I2C_SW_StartTransmit(Ch);

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (1<<0));  		// Address

	for( i=0; i<len; i++ )
 8002516:	3601      	adds	r6, #1
 8002518:	b2f6      	uxtb	r6, r6
	{
		if( i < LastIndex )
		{
			Ret |= Hw_I2C_SW_ReadByte_Ack(Ch, &pdata[i] );				// Read Data
 800251a:	ea40 0808 	orr.w	r8, r0, r8

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (1<<0));  		// Address

	for( i=0; i<len; i++ )
	{
		if( i < LastIndex )
 800251e:	45b1      	cmp	r9, r6
		{
			Ret |= Hw_I2C_SW_ReadByte_Ack(Ch, &pdata[i] );				// Read Data
 8002520:	fa1f f888 	uxth.w	r8, r8
		}
		else
		{
			Ret |= Hw_I2C_SW_ReadByte_NoAck(Ch, &pdata[i] );			// Read Data 마지막 데이터는 NACK 처리
 8002524:	4620      	mov	r0, r4
 8002526:	eb07 0106 	add.w	r1, r7, r6

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (1<<0));  		// Address

	for( i=0; i<len; i++ )
	{
		if( i < LastIndex )
 800252a:	d819      	bhi.n	8002560 <Hw_I2C_SW_Read+0xc8>
		{
			Ret |= Hw_I2C_SW_ReadByte_Ack(Ch, &pdata[i] );				// Read Data
		}
		else
		{
			Ret |= Hw_I2C_SW_ReadByte_NoAck(Ch, &pdata[i] );			// Read Data 마지막 데이터는 NACK 처리
 800252c:	47d8      	blx	fp

	Hw_I2C_SW_StartTransmit(Ch);

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (1<<0));  		// Address

	for( i=0; i<len; i++ )
 800252e:	3601      	adds	r6, #1
 8002530:	b2f6      	uxtb	r6, r6
		{
			Ret |= Hw_I2C_SW_ReadByte_Ack(Ch, &pdata[i] );				// Read Data
		}
		else
		{
			Ret |= Hw_I2C_SW_ReadByte_NoAck(Ch, &pdata[i] );			// Read Data 마지막 데이터는 NACK 처리
 8002532:	ea40 0008 	orr.w	r0, r0, r8

	Hw_I2C_SW_StartTransmit(Ch);

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (1<<0));  		// Address

	for( i=0; i<len; i++ )
 8002536:	42b5      	cmp	r5, r6
		{
			Ret |= Hw_I2C_SW_ReadByte_Ack(Ch, &pdata[i] );				// Read Data
		}
		else
		{
			Ret |= Hw_I2C_SW_ReadByte_NoAck(Ch, &pdata[i] );			// Read Data 마지막 데이터는 NACK 처리
 8002538:	fa1f f880 	uxth.w	r8, r0

	Hw_I2C_SW_StartTransmit(Ch);

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (1<<0));  		// Address

	for( i=0; i<len; i++ )
 800253c:	d922      	bls.n	8002584 <Hw_I2C_SW_Read+0xec>
	{
		if( i < LastIndex )
 800253e:	45b1      	cmp	r9, r6
		{
			Ret |= Hw_I2C_SW_ReadByte_Ack(Ch, &pdata[i] );				// Read Data
		}
		else
		{
			Ret |= Hw_I2C_SW_ReadByte_NoAck(Ch, &pdata[i] );			// Read Data 마지막 데이터는 NACK 처리
 8002540:	eb07 0106 	add.w	r1, r7, r6
 8002544:	4620      	mov	r0, r4

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (1<<0));  		// Address

	for( i=0; i<len; i++ )
	{
		if( i < LastIndex )
 8002546:	d8e5      	bhi.n	8002514 <Hw_I2C_SW_Read+0x7c>
		{
			Ret |= Hw_I2C_SW_ReadByte_Ack(Ch, &pdata[i] );				// Read Data
		}
		else
		{
			Ret |= Hw_I2C_SW_ReadByte_NoAck(Ch, &pdata[i] );			// Read Data 마지막 데이터는 NACK 처리
 8002548:	47d8      	blx	fp

	Hw_I2C_SW_StartTransmit(Ch);

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (1<<0));  		// Address

	for( i=0; i<len; i++ )
 800254a:	3601      	adds	r6, #1
 800254c:	b2f6      	uxtb	r6, r6
		{
			Ret |= Hw_I2C_SW_ReadByte_Ack(Ch, &pdata[i] );				// Read Data
		}
		else
		{
			Ret |= Hw_I2C_SW_ReadByte_NoAck(Ch, &pdata[i] );			// Read Data 마지막 데이터는 NACK 처리
 800254e:	ea40 0c08 	orr.w	ip, r0, r8

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (1<<0));  		// Address

	for( i=0; i<len; i++ )
	{
		if( i < LastIndex )
 8002552:	45b1      	cmp	r9, r6
		{
			Ret |= Hw_I2C_SW_ReadByte_Ack(Ch, &pdata[i] );				// Read Data
		}
		else
		{
			Ret |= Hw_I2C_SW_ReadByte_NoAck(Ch, &pdata[i] );			// Read Data 마지막 데이터는 NACK 처리
 8002554:	fa1f f88c 	uxth.w	r8, ip
 8002558:	4620      	mov	r0, r4
 800255a:	eb07 0106 	add.w	r1, r7, r6

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (1<<0));  		// Address

	for( i=0; i<len; i++ )
	{
		if( i < LastIndex )
 800255e:	d9e5      	bls.n	800252c <Hw_I2C_SW_Read+0x94>
		{
			Ret |= Hw_I2C_SW_ReadByte_Ack(Ch, &pdata[i] );				// Read Data
 8002560:	4620      	mov	r0, r4
 8002562:	19b9      	adds	r1, r7, r6
 8002564:	47d0      	blx	sl
 8002566:	ea40 0308 	orr.w	r3, r0, r8
 800256a:	fa1f f883 	uxth.w	r8, r3
 800256e:	e7c8      	b.n	8002502 <Hw_I2C_SW_Read+0x6a>
	u8  i;
	u8  LastIndex = 0;

	if( len > 0 ) LastIndex = len - 1;

	Hw_I2C_SW_StartTransmit(Ch);
 8002570:	4b0c      	ldr	r3, [pc, #48]	; (80025a4 <Hw_I2C_SW_Read+0x10c>)
 8002572:	4798      	blx	r3

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (1<<0));  		// Address
 8002574:	0070      	lsls	r0, r6, #1
 8002576:	f040 0101 	orr.w	r1, r0, #1
 800257a:	b2c9      	uxtb	r1, r1
 800257c:	4620      	mov	r0, r4
 800257e:	4a0a      	ldr	r2, [pc, #40]	; (80025a8 <Hw_I2C_SW_Read+0x110>)
 8002580:	4790      	blx	r2
 8002582:	4680      	mov	r8, r0
		{
			Ret |= Hw_I2C_SW_ReadByte_NoAck(Ch, &pdata[i] );			// Read Data 마지막 데이터는 NACK 처리
		}
	}
	
	Hw_I2C_SW_EndTransmit(Ch);
 8002584:	4620      	mov	r0, r4
 8002586:	4b09      	ldr	r3, [pc, #36]	; (80025ac <Hw_I2C_SW_Read+0x114>)
 8002588:	4798      	blx	r3
	

    return Ret;
}
 800258a:	4640      	mov	r0, r8
 800258c:	b003      	add	sp, #12
 800258e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

	for( i=0; i<len; i++ )
	{
		if( i < LastIndex )
		{
			Ret |= Hw_I2C_SW_ReadByte_Ack(Ch, &pdata[i] );				// Read Data
 8002592:	4620      	mov	r0, r4
 8002594:	4639      	mov	r1, r7
 8002596:	47d0      	blx	sl
 8002598:	ea40 0c08 	orr.w	ip, r0, r8
 800259c:	fa1f f88c 	uxth.w	r8, ip
 80025a0:	e7a1      	b.n	80024e6 <Hw_I2C_SW_Read+0x4e>
 80025a2:	bf00      	nop
 80025a4:	08001eb5 	.word	0x08001eb5
 80025a8:	08002221 	.word	0x08002221
 80025ac:	08001e71 	.word	0x08001e71
 80025b0:	080020b5 	.word	0x080020b5
 80025b4:	08001f21 	.word	0x08001f21

080025b8 <Hw_I2C_SW_Write>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_SW_Write( u8 Ch, u16 i2c_addr, u8* pdata, u16 len )
{
 80025b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80025bc:	460e      	mov	r6, r1
 80025be:	4699      	mov	r9, r3
    u16 Ret = 0;;
	u8  i;

	Hw_I2C_SW_StartTransmit(Ch);
 80025c0:	4b1f      	ldr	r3, [pc, #124]	; (8002640 <Hw_I2C_SW_Write+0x88>)
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_SW_Write( u8 Ch, u16 i2c_addr, u8* pdata, u16 len )
{
 80025c2:	4604      	mov	r4, r0
 80025c4:	4615      	mov	r5, r2
    u16 Ret = 0;;
	u8  i;

	Hw_I2C_SW_StartTransmit(Ch);
 80025c6:	4798      	blx	r3

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (0<<0)); // Address
 80025c8:	0071      	lsls	r1, r6, #1
 80025ca:	4620      	mov	r0, r4
 80025cc:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 80025d0:	f8df 8074 	ldr.w	r8, [pc, #116]	; 8002648 <Hw_I2C_SW_Write+0x90>
 80025d4:	47c0      	blx	r8
 80025d6:	4607      	mov	r7, r0


	for( i=0; i<len; i++ )
 80025d8:	f1b9 0f00 	cmp.w	r9, #0
 80025dc:	d02a      	beq.n	8002634 <Hw_I2C_SW_Write+0x7c>
	{
		Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, pdata[i]);  			// Data	
 80025de:	4620      	mov	r0, r4
 80025e0:	7829      	ldrb	r1, [r5, #0]
 80025e2:	47c0      	blx	r8
	Hw_I2C_SW_StartTransmit(Ch);

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (0<<0)); // Address


	for( i=0; i<len; i++ )
 80025e4:	2601      	movs	r6, #1
 80025e6:	f109 3aff 	add.w	sl, r9, #4294967295
	{
		Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, pdata[i]);  			// Data	
 80025ea:	ea40 0707 	orr.w	r7, r0, r7
	Hw_I2C_SW_StartTransmit(Ch);

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (0<<0)); // Address


	for( i=0; i<len; i++ )
 80025ee:	454e      	cmp	r6, r9
 80025f0:	f00a 0a01 	and.w	sl, sl, #1
	{
		Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, pdata[i]);  			// Data	
 80025f4:	b2bf      	uxth	r7, r7
	Hw_I2C_SW_StartTransmit(Ch);

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (0<<0)); // Address


	for( i=0; i<len; i++ )
 80025f6:	d21d      	bcs.n	8002634 <Hw_I2C_SW_Write+0x7c>
 80025f8:	f1ba 0f00 	cmp.w	sl, #0
 80025fc:	d009      	beq.n	8002612 <Hw_I2C_SW_Write+0x5a>
	{
		Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, pdata[i]);  			// Data	
 80025fe:	4620      	mov	r0, r4
 8002600:	7869      	ldrb	r1, [r5, #1]
 8002602:	47c0      	blx	r8
	Hw_I2C_SW_StartTransmit(Ch);

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (0<<0)); // Address


	for( i=0; i<len; i++ )
 8002604:	2602      	movs	r6, #2
	{
		Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, pdata[i]);  			// Data	
 8002606:	ea40 0c07 	orr.w	ip, r0, r7
	Hw_I2C_SW_StartTransmit(Ch);

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (0<<0)); // Address


	for( i=0; i<len; i++ )
 800260a:	454e      	cmp	r6, r9
	{
		Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, pdata[i]);  			// Data	
 800260c:	fa1f f78c 	uxth.w	r7, ip
	Hw_I2C_SW_StartTransmit(Ch);

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (0<<0)); // Address


	for( i=0; i<len; i++ )
 8002610:	d210      	bcs.n	8002634 <Hw_I2C_SW_Write+0x7c>
	{
		Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, pdata[i]);  			// Data	
 8002612:	5da9      	ldrb	r1, [r5, r6]
 8002614:	4620      	mov	r0, r4
 8002616:	47c0      	blx	r8
	Hw_I2C_SW_StartTransmit(Ch);

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (0<<0)); // Address


	for( i=0; i<len; i++ )
 8002618:	1c71      	adds	r1, r6, #1
 800261a:	b2ce      	uxtb	r6, r1
	{
		Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, pdata[i]);  			// Data	
 800261c:	ea40 0207 	orr.w	r2, r0, r7
 8002620:	5da9      	ldrb	r1, [r5, r6]
 8002622:	4620      	mov	r0, r4
 8002624:	b297      	uxth	r7, r2
 8002626:	47c0      	blx	r8
	Hw_I2C_SW_StartTransmit(Ch);

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (0<<0)); // Address


	for( i=0; i<len; i++ )
 8002628:	3601      	adds	r6, #1
 800262a:	b2f6      	uxtb	r6, r6
	{
		Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, pdata[i]);  			// Data	
 800262c:	4338      	orrs	r0, r7
	Hw_I2C_SW_StartTransmit(Ch);

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (0<<0)); // Address


	for( i=0; i<len; i++ )
 800262e:	454e      	cmp	r6, r9
	{
		Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, pdata[i]);  			// Data	
 8002630:	b287      	uxth	r7, r0
	Hw_I2C_SW_StartTransmit(Ch);

	Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, (i2c_addr<<1) | (0<<0)); // Address


	for( i=0; i<len; i++ )
 8002632:	d3ee      	bcc.n	8002612 <Hw_I2C_SW_Write+0x5a>
	{
		Ret |= Hw_I2C_SW_WriteByte_Ack(Ch, pdata[i]);  			// Data	
	}
	
	Hw_I2C_SW_EndTransmit(Ch);
 8002634:	4620      	mov	r0, r4
 8002636:	4b03      	ldr	r3, [pc, #12]	; (8002644 <Hw_I2C_SW_Write+0x8c>)
 8002638:	4798      	blx	r3

    return Ret;
}
 800263a:	4638      	mov	r0, r7
 800263c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002640:	08001eb5 	.word	0x08001eb5
 8002644:	08001e71 	.word	0x08001e71
 8002648:	08002221 	.word	0x08002221

0800264c <Hw_Si47xx_Reset>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Si47xx_Reset( void )
{
 800264c:	b538      	push	{r3, r4, r5, lr}
	Hw_Wait(100);
	SET_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 1	
 800264e:	4c0c      	ldr	r4, [pc, #48]	; (8002680 <Hw_Si47xx_Reset+0x34>)
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Si47xx_Reset( void )
{
	Hw_Wait(100);
 8002650:	4d0c      	ldr	r5, [pc, #48]	; (8002684 <Hw_Si47xx_Reset+0x38>)
 8002652:	2064      	movs	r0, #100	; 0x64
 8002654:	47a8      	blx	r5
	SET_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 1	
 8002656:	6822      	ldr	r2, [r4, #0]
	Hw_Wait(100);
 8002658:	2064      	movs	r0, #100	; 0x64
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Si47xx_Reset( void )
{
	Hw_Wait(100);
	SET_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 1	
 800265a:	f042 0120 	orr.w	r1, r2, #32
 800265e:	6021      	str	r1, [r4, #0]
	Hw_Wait(100);
 8002660:	47a8      	blx	r5
	CLR_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 0	
 8002662:	6823      	ldr	r3, [r4, #0]
	Hw_Wait(500);	
 8002664:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
void Hw_Si47xx_Reset( void )
{
	Hw_Wait(100);
	SET_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 1	
	Hw_Wait(100);
	CLR_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 0	
 8002668:	f023 0220 	bic.w	r2, r3, #32
 800266c:	6022      	str	r2, [r4, #0]
	Hw_Wait(500);	
 800266e:	47a8      	blx	r5
	SET_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 1		
 8002670:	6821      	ldr	r1, [r4, #0]
	Hw_Wait(100);
 8002672:	2064      	movs	r0, #100	; 0x64
	Hw_Wait(100);
	SET_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 1	
	Hw_Wait(100);
	CLR_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 0	
	Hw_Wait(500);	
	SET_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 1		
 8002674:	f041 0320 	orr.w	r3, r1, #32
 8002678:	6023      	str	r3, [r4, #0]
	Hw_Wait(100);
 800267a:	47a8      	blx	r5
}
 800267c:	bd38      	pop	{r3, r4, r5, pc}
 800267e:	bf00      	nop
 8002680:	40010c0c 	.word	0x40010c0c
 8002684:	080016d5 	.word	0x080016d5

08002688 <Hw_Si47xx_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Si47xx_Init( void )
{
 8002688:	b508      	push	{r3, lr}
	Hw_I2C_Init();
 800268a:	4808      	ldr	r0, [pc, #32]	; (80026ac <Hw_Si47xx_Init+0x24>)
 800268c:	4780      	blx	r0

	//-- Reset 핀 GPIO 초기화 PB.5
	//
	//-- RSTB PB.5
	//
	REG_GPIOB_CRL &= ~(0x0F << (20));	// Clear
 800268e:	4808      	ldr	r0, [pc, #32]	; (80026b0 <Hw_Si47xx_Init+0x28>)
 8002690:	6801      	ldr	r1, [r0, #0]
 8002692:	f421 0270 	bic.w	r2, r1, #15728640	; 0xf00000
 8002696:	6002      	str	r2, [r0, #0]
	REG_GPIOB_CRL |=  (0x03 << (20));	// MODE, PB.5 Output mode, max speed 50Mhz
 8002698:	6803      	ldr	r3, [r0, #0]
 800269a:	f443 1140 	orr.w	r1, r3, #3145728	; 0x300000
 800269e:	6001      	str	r1, [r0, #0]
	REG_GPIOB_CRL |=  (0x00 << (22));	// CNF,  PB.5 General purpose output push-pul	
 80026a0:	6802      	ldr	r2, [r0, #0]
	

	Hw_Si47xx_Reset();
 80026a2:	4b04      	ldr	r3, [pc, #16]	; (80026b4 <Hw_Si47xx_Init+0x2c>)
	//
	//-- RSTB PB.5
	//
	REG_GPIOB_CRL &= ~(0x0F << (20));	// Clear
	REG_GPIOB_CRL |=  (0x03 << (20));	// MODE, PB.5 Output mode, max speed 50Mhz
	REG_GPIOB_CRL |=  (0x00 << (22));	// CNF,  PB.5 General purpose output push-pul	
 80026a4:	6002      	str	r2, [r0, #0]
	

	Hw_Si47xx_Reset();
 80026a6:	4798      	blx	r3
}
 80026a8:	bd08      	pop	{r3, pc}
 80026aa:	bf00      	nop
 80026ac:	08001da9 	.word	0x08001da9
 80026b0:	40010c00 	.word	0x40010c00
 80026b4:	0800264d 	.word	0x0800264d

080026b8 <Hw_Si47xx_ReadResp>:
u8 Hw_Si47xx_ReadResp( u8 Index )
{
	if( Index > HW_SI47XX_MAX_LENGTH_RESP ) Index = HW_SI47XX_MAX_LENGTH_RESP;
	
	return Hw_Si47xx_LastResp[ Index ];
}
 80026b8:	4b02      	ldr	r3, [pc, #8]	; (80026c4 <Hw_Si47xx_ReadResp+0xc>)
---------------------------------------------------------------------------*/
u8 Hw_Si47xx_ReadResp( u8 Index )
{
	if( Index > HW_SI47XX_MAX_LENGTH_RESP ) Index = HW_SI47XX_MAX_LENGTH_RESP;
	
	return Hw_Si47xx_LastResp[ Index ];
 80026ba:	2810      	cmp	r0, #16
 80026bc:	bf28      	it	cs
 80026be:	2010      	movcs	r0, #16
}
 80026c0:	5c18      	ldrb	r0, [r3, r0]
 80026c2:	4770      	bx	lr
 80026c4:	20000790 	.word	0x20000790

080026c8 <Hw_Si47xx_SendCommand>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_Si47xx_SendCommand( u8 *pCmd, u16 Length )
{
 80026c8:	b510      	push	{r4, lr}
 80026ca:	4602      	mov	r2, r0
 80026cc:	460b      	mov	r3, r1
	u16 Ret;
	
	Ret = Hw_I2C_Write( 0, HW_SI47XX_ADDR, pCmd, Length );
 80026ce:	2000      	movs	r0, #0
 80026d0:	2163      	movs	r1, #99	; 0x63
 80026d2:	4c01      	ldr	r4, [pc, #4]	; (80026d8 <Hw_Si47xx_SendCommand+0x10>)
 80026d4:	47a0      	blx	r4
	
	return Ret;	
}
 80026d6:	bd10      	pop	{r4, pc}
 80026d8:	08001db5 	.word	0x08001db5

080026dc <Hw_Si47xx_ReceiveResponse>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_Si47xx_ReceiveResponse( u8 *pResp, u16 Length, u32 TimeOut )
{
 80026dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	u16 Ret;
	u32 TimeStart;
	u32 TimeEnd;
	u32 i;
	
	TimeStart = Hw_Timer_Get_CountValue();
 80026e0:	4e1c      	ldr	r6, [pc, #112]	; (8002754 <Hw_Si47xx_ReceiveResponse+0x78>)
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_Si47xx_ReceiveResponse( u8 *pResp, u16 Length, u32 TimeOut )
{
 80026e2:	4604      	mov	r4, r0
 80026e4:	460d      	mov	r5, r1
 80026e6:	4690      	mov	r8, r2
	u16 Ret;
	u32 TimeStart;
	u32 TimeEnd;
	u32 i;
	
	TimeStart = Hw_Timer_Get_CountValue();
 80026e8:	47b0      	blx	r6
 80026ea:	4f1b      	ldr	r7, [pc, #108]	; (8002758 <Hw_Si47xx_ReceiveResponse+0x7c>)
 80026ec:	4681      	mov	r9, r0
	
	while(1)
	{	
		Ret = Hw_I2C_Read( 0, HW_SI47XX_ADDR, pResp, Length );
 80026ee:	2163      	movs	r1, #99	; 0x63
 80026f0:	4622      	mov	r2, r4
 80026f2:	462b      	mov	r3, r5
 80026f4:	2000      	movs	r0, #0
 80026f6:	47b8      	blx	r7
		
		if( Ret == ERR_NONE )
 80026f8:	b918      	cbnz	r0, 8002702 <Hw_Si47xx_ReceiveResponse+0x26>
		{
			if( pResp[0] & (1<<7) )
 80026fa:	f994 3000 	ldrsb.w	r3, [r4]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	db07      	blt.n	8002712 <Hw_Si47xx_ReceiveResponse+0x36>
			}
		}
	
		//-- 타임 아웃 처리
		//
		TimeEnd = Hw_Timer_Get_CountValue();
 8002702:	47b0      	blx	r6
		
		if( (TimeEnd - TimeStart) > TimeOut )
 8002704:	ebc9 0000 	rsb	r0, r9, r0
 8002708:	4540      	cmp	r0, r8
 800270a:	d9f0      	bls.n	80026ee <Hw_Si47xx_ReceiveResponse+0x12>
		{
			Ret = HW_SI47XX_ERR_TIME_OUT;
 800270c:	2002      	movs	r0, #2
			Hw_Si47xx_LastResp[i] = pResp[i];
		}
	}
	
	return Ret;	
}
 800270e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		}
	}
	
	if( Ret == ERR_NONE )
	{
		for( i=0; i<Length; i++)
 8002712:	2d00      	cmp	r5, #0
 8002714:	d0fb      	beq.n	800270e <Hw_Si47xx_ReceiveResponse+0x32>
 8002716:	2301      	movs	r3, #1
 8002718:	4910      	ldr	r1, [pc, #64]	; (800275c <Hw_Si47xx_ReceiveResponse+0x80>)
		{
			Hw_Si47xx_LastResp[i] = pResp[i];
 800271a:	7826      	ldrb	r6, [r4, #0]
 800271c:	1e6a      	subs	r2, r5, #1
		}
	}
	
	if( Ret == ERR_NONE )
	{
		for( i=0; i<Length; i++)
 800271e:	42ab      	cmp	r3, r5
		{
			Hw_Si47xx_LastResp[i] = pResp[i];
 8002720:	700e      	strb	r6, [r1, #0]
 8002722:	ea02 0203 	and.w	r2, r2, r3
		}
	}
	
	if( Ret == ERR_NONE )
	{
		for( i=0; i<Length; i++)
 8002726:	d211      	bcs.n	800274c <Hw_Si47xx_ReceiveResponse+0x70>
 8002728:	b132      	cbz	r2, 8002738 <Hw_Si47xx_ReceiveResponse+0x5c>
		{
			Hw_Si47xx_LastResp[i] = pResp[i];
 800272a:	f894 c001 	ldrb.w	ip, [r4, #1]
		}
	}
	
	if( Ret == ERR_NONE )
	{
		for( i=0; i<Length; i++)
 800272e:	2302      	movs	r3, #2
 8002730:	42ab      	cmp	r3, r5
		{
			Hw_Si47xx_LastResp[i] = pResp[i];
 8002732:	f881 c001 	strb.w	ip, [r1, #1]
		}
	}
	
	if( Ret == ERR_NONE )
	{
		for( i=0; i<Length; i++)
 8002736:	d20b      	bcs.n	8002750 <Hw_Si47xx_ReceiveResponse+0x74>
		{
			Hw_Si47xx_LastResp[i] = pResp[i];
 8002738:	5ce6      	ldrb	r6, [r4, r3]
		}
	}
	
	if( Ret == ERR_NONE )
	{
		for( i=0; i<Length; i++)
 800273a:	1c5a      	adds	r2, r3, #1
		{
			Hw_Si47xx_LastResp[i] = pResp[i];
 800273c:	54ce      	strb	r6, [r1, r3]
 800273e:	5ca6      	ldrb	r6, [r4, r2]
		}
	}
	
	if( Ret == ERR_NONE )
	{
		for( i=0; i<Length; i++)
 8002740:	3302      	adds	r3, #2
 8002742:	42ab      	cmp	r3, r5
		{
			Hw_Si47xx_LastResp[i] = pResp[i];
 8002744:	548e      	strb	r6, [r1, r2]
		}
	}
	
	if( Ret == ERR_NONE )
	{
		for( i=0; i<Length; i++)
 8002746:	d3f7      	bcc.n	8002738 <Hw_Si47xx_ReceiveResponse+0x5c>
 8002748:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800274c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002750:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002754:	08001d79 	.word	0x08001d79
 8002758:	08001dc1 	.word	0x08001dc1
 800275c:	20000790 	.word	0x20000790

08002760 <Hw_Si47xx_POWER_UP>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_Si47xx_POWER_UP( u8 Mode )
{
 8002760:	b510      	push	{r4, lr}
 8002762:	4604      	mov	r4, r0
 8002764:	b086      	sub	sp, #24
	u8  Resp[HW_SI47XX_MAX_LENGTH_RESP];
	u16 i;

	//-- 보드 리셋
	//
	Hw_Si47xx_Reset();
 8002766:	480e      	ldr	r0, [pc, #56]	; (80027a0 <Hw_Si47xx_POWER_UP+0x40>)
 8002768:	4780      	blx	r0


	Cmd[0] = 0x01;		// POWER_UP 명령
 800276a:	2301      	movs	r3, #1
 800276c:	f88d 3010 	strb.w	r3, [sp, #16]
	
	if( Mode == HW_SI47XX_BAND_MODE_FM )
 8002770:	b994      	cbnz	r4, 8002798 <Hw_Si47xx_POWER_UP+0x38>
	{
		Cmd[1] = 0			// FM
 8002772:	2110      	movs	r1, #16
 8002774:	f88d 1011 	strb.w	r1, [sp, #17]
				| (0<<7)	// CTS interrupt enabled 
				| (1<<4);	// Crystal Oscillator Enable
	}

	
	Cmd[2] = 0xB5;		// Analog Output
 8002778:	22b5      	movs	r2, #181	; 0xb5



	
	Ret = Hw_Si47xx_SendCommand( Cmd, 3 );
 800277a:	a804      	add	r0, sp, #16
 800277c:	2103      	movs	r1, #3
				| (0<<7)	// CTS interrupt enabled 
				| (1<<4);	// Crystal Oscillator Enable
	}

	
	Cmd[2] = 0xB5;		// Analog Output
 800277e:	f88d 2012 	strb.w	r2, [sp, #18]



	
	Ret = Hw_Si47xx_SendCommand( Cmd, 3 );
 8002782:	4b08      	ldr	r3, [pc, #32]	; (80027a4 <Hw_Si47xx_POWER_UP+0x44>)
 8002784:	4798      	blx	r3
		
	if( Ret == ERR_NONE )
 8002786:	b928      	cbnz	r0, 8002794 <Hw_Si47xx_POWER_UP+0x34>
	{
		Ret = Hw_Si47xx_ReceiveResponse( Resp, 0+1, 1000 );
 8002788:	4668      	mov	r0, sp
 800278a:	2101      	movs	r1, #1
 800278c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002790:	4b05      	ldr	r3, [pc, #20]	; (80027a8 <Hw_Si47xx_POWER_UP+0x48>)
 8002792:	4798      	blx	r3
	#if HW_SI47XX_DEBUG_SHOW == 1
	printf("Ret : %x , St : %x \n", Ret, Resp[0] );
	#endif
	
	return Ret;	
}
 8002794:	b006      	add	sp, #24
 8002796:	bd10      	pop	{r4, pc}
				| (1<<4);	// Crystal Oscillator Enable
				
	}
	else
	{
		Cmd[1] = 1			// AM
 8002798:	2211      	movs	r2, #17
 800279a:	f88d 2011 	strb.w	r2, [sp, #17]
 800279e:	e7eb      	b.n	8002778 <Hw_Si47xx_POWER_UP+0x18>
 80027a0:	0800264d 	.word	0x0800264d
 80027a4:	080026c9 	.word	0x080026c9
 80027a8:	080026dd 	.word	0x080026dd

080027ac <Hw_Si47xx_WaitForCTS>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_Si47xx_WaitForCTS( void  )
{
 80027ac:	b500      	push	{lr}
 80027ae:	b083      	sub	sp, #12
	u16 Ret;
	u8  Resp[1];

	Ret = Hw_Si47xx_ReceiveResponse( Resp, 1, 1000 );	
 80027b0:	a801      	add	r0, sp, #4
 80027b2:	2101      	movs	r1, #1
 80027b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80027b8:	4b01      	ldr	r3, [pc, #4]	; (80027c0 <Hw_Si47xx_WaitForCTS+0x14>)
 80027ba:	4798      	blx	r3
	
	return Ret;	
 80027bc:	b003      	add	sp, #12
 80027be:	bd00      	pop	{pc}
 80027c0:	080026dd 	.word	0x080026dd

080027c4 <Hw_Si47xx_CommandResp>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_Si47xx_CommandResp( u8 *pCmd, u16 CmdLength, u8 *pResp, u16 RespLength, u32 TimeOut )
{
 80027c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027c6:	461f      	mov	r7, r3
	u16 Ret;
	#if HW_SI47XX_DEBUG_SHOW_RESP == 1
	u32 i;
	#endif
	
	Ret = Hw_Si47xx_WaitForCTS();
 80027c8:	4b0d      	ldr	r3, [pc, #52]	; (8002800 <Hw_Si47xx_CommandResp+0x3c>)
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_Si47xx_CommandResp( u8 *pCmd, u16 CmdLength, u8 *pResp, u16 RespLength, u32 TimeOut )
{
 80027ca:	4604      	mov	r4, r0
 80027cc:	460e      	mov	r6, r1
 80027ce:	4615      	mov	r5, r2
	u16 Ret;
	#if HW_SI47XX_DEBUG_SHOW_RESP == 1
	u32 i;
	#endif
	
	Ret = Hw_Si47xx_WaitForCTS();
 80027d0:	4798      	blx	r3

	if( Ret == ERR_NONE )
 80027d2:	b100      	cbz	r0, 80027d6 <Hw_Si47xx_CommandResp+0x12>
	}
	#endif
	
	
	return Ret;	
}
 80027d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	
	Ret = Hw_Si47xx_WaitForCTS();

	if( Ret == ERR_NONE )
	{
		Ret = Hw_Si47xx_SendCommand( pCmd, CmdLength );
 80027d6:	4620      	mov	r0, r4
 80027d8:	4631      	mov	r1, r6
 80027da:	4a0a      	ldr	r2, [pc, #40]	; (8002804 <Hw_Si47xx_CommandResp+0x40>)
 80027dc:	4790      	blx	r2
		
		if( Ret == ERR_NONE )
 80027de:	2800      	cmp	r0, #0
 80027e0:	d1f8      	bne.n	80027d4 <Hw_Si47xx_CommandResp+0x10>
		{
			Ret = Hw_Si47xx_ReceiveResponse( pResp, RespLength+1, TimeOut );			
 80027e2:	1c79      	adds	r1, r7, #1
 80027e4:	4628      	mov	r0, r5
 80027e6:	b289      	uxth	r1, r1
 80027e8:	9a06      	ldr	r2, [sp, #24]
 80027ea:	4b07      	ldr	r3, [pc, #28]	; (8002808 <Hw_Si47xx_CommandResp+0x44>)
 80027ec:	4798      	blx	r3
			
			if( Ret == ERR_NONE )
 80027ee:	2800      	cmp	r0, #0
 80027f0:	d1f0      	bne.n	80027d4 <Hw_Si47xx_CommandResp+0x10>
			{
				if( pResp[0] & (1<<6) )
 80027f2:	f895 c000 	ldrb.w	ip, [r5]
 80027f6:	f01c 0f40 	tst.w	ip, #64	; 0x40
				{
					Ret = HW_SI47XX_ERR_RESP;
 80027fa:	bf18      	it	ne
 80027fc:	2003      	movne	r0, #3
 80027fe:	e7e9      	b.n	80027d4 <Hw_Si47xx_CommandResp+0x10>
 8002800:	080027ad 	.word	0x080027ad
 8002804:	080026c9 	.word	0x080026c9
 8002808:	080026dd 	.word	0x080026dd

0800280c <Hw_Si47xx_AM_TUNE_STATUS>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_Si47xx_AM_TUNE_STATUS( u8 Option )
{
 800280c:	b510      	push	{r4, lr}
	HW_SI47XX_PRINTF("AM_TUNE_STATUS\n" );
	#endif

	Index = 0;
	
	Cmd[Index++] = 0x42;	
 800280e:	2442      	movs	r4, #66	; 0x42
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_Si47xx_AM_TUNE_STATUS( u8 Option )
{
 8002810:	b088      	sub	sp, #32
	HW_SI47XX_PRINTF("AM_TUNE_STATUS\n" );
	#endif

	Index = 0;
	
	Cmd[Index++] = 0x42;	
 8002812:	f88d 4018 	strb.w	r4, [sp, #24]
	Cmd[Index++] = Option;	
	Ret = Hw_Si47xx_CommandResp( Cmd, Index, Resp, 7, 1000 );
 8002816:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
	#endif

	Index = 0;
	
	Cmd[Index++] = 0x42;	
	Cmd[Index++] = Option;	
 800281a:	f88d 0019 	strb.w	r0, [sp, #25]
	Ret = Hw_Si47xx_CommandResp( Cmd, Index, Resp, 7, 1000 );
 800281e:	9400      	str	r4, [sp, #0]
 8002820:	a806      	add	r0, sp, #24
 8002822:	2102      	movs	r1, #2
 8002824:	aa02      	add	r2, sp, #8
 8002826:	2307      	movs	r3, #7
 8002828:	4c01      	ldr	r4, [pc, #4]	; (8002830 <Hw_Si47xx_AM_TUNE_STATUS+0x24>)
 800282a:	47a0      	blx	r4
		
	return Ret;	
}
 800282c:	b008      	add	sp, #32
 800282e:	bd10      	pop	{r4, pc}
 8002830:	080027c5 	.word	0x080027c5

08002834 <Hw_Si47xx_FM_TUNE_STATUS>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_Si47xx_FM_TUNE_STATUS( u8 Option )
{
 8002834:	b510      	push	{r4, lr}
	HW_SI47XX_PRINTF("FM_TUNE_STATUS\n" );
	#endif

	Index = 0;
	
	Cmd[Index++] = 0x22;	
 8002836:	2422      	movs	r4, #34	; 0x22
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_Si47xx_FM_TUNE_STATUS( u8 Option )
{
 8002838:	b088      	sub	sp, #32
	HW_SI47XX_PRINTF("FM_TUNE_STATUS\n" );
	#endif

	Index = 0;
	
	Cmd[Index++] = 0x22;	
 800283a:	f88d 4018 	strb.w	r4, [sp, #24]
	Cmd[Index++] = Option;	
	Ret = Hw_Si47xx_CommandResp( Cmd, Index, Resp, 7, 1000 );
 800283e:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
	#endif

	Index = 0;
	
	Cmd[Index++] = 0x22;	
	Cmd[Index++] = Option;	
 8002842:	f88d 0019 	strb.w	r0, [sp, #25]
	Ret = Hw_Si47xx_CommandResp( Cmd, Index, Resp, 7, 1000 );
 8002846:	9400      	str	r4, [sp, #0]
 8002848:	a806      	add	r0, sp, #24
 800284a:	2102      	movs	r1, #2
 800284c:	aa02      	add	r2, sp, #8
 800284e:	2307      	movs	r3, #7
 8002850:	4c01      	ldr	r4, [pc, #4]	; (8002858 <Hw_Si47xx_FM_TUNE_STATUS+0x24>)
 8002852:	47a0      	blx	r4
		
	return Ret;	
}
 8002854:	b008      	add	sp, #32
 8002856:	bd10      	pop	{r4, pc}
 8002858:	080027c5 	.word	0x080027c5

0800285c <Hw_Si47xx_GET_INT_STATUS>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_Si47xx_GET_INT_STATUS( u8 *pStatus )
{
 800285c:	b530      	push	{r4, r5, lr}
 800285e:	b089      	sub	sp, #36	; 0x24
	HW_SI47XX_PRINTF("GET_INT_STATUS\n" );
	#endif

	Index = 0;
	
	Cmd[Index++] = 0x14;	
 8002860:	a908      	add	r1, sp, #32
 8002862:	2214      	movs	r2, #20
 8002864:	f801 2d08 	strb.w	r2, [r1, #-8]!
	Ret = Hw_Si47xx_CommandResp( Cmd, Index, Resp, 0, 1000 );
 8002868:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_Si47xx_GET_INT_STATUS( u8 *pStatus )
{
 800286c:	4604      	mov	r4, r0
	#endif

	Index = 0;
	
	Cmd[Index++] = 0x14;	
	Ret = Hw_Si47xx_CommandResp( Cmd, Index, Resp, 0, 1000 );
 800286e:	2300      	movs	r3, #0
 8002870:	9500      	str	r5, [sp, #0]
 8002872:	4608      	mov	r0, r1
 8002874:	aa02      	add	r2, sp, #8
 8002876:	2101      	movs	r1, #1
 8002878:	4d03      	ldr	r5, [pc, #12]	; (8002888 <Hw_Si47xx_GET_INT_STATUS+0x2c>)
 800287a:	47a8      	blx	r5
	
	*pStatus = Resp[0];
 800287c:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8002880:	7023      	strb	r3, [r4, #0]
		
	return Ret;	
}
 8002882:	b009      	add	sp, #36	; 0x24
 8002884:	bd30      	pop	{r4, r5, pc}
 8002886:	bf00      	nop
 8002888:	080027c5 	.word	0x080027c5

0800288c <Hw_Si47xx_WaitForSTC>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_Si47xx_WaitForSTC( u32 TimeOut )
{
 800288c:	b5f0      	push	{r4, r5, r6, r7, lr}
	u16 Ret;
	u32 TimeStart;
	u32 TimeEnd;
	u8  Status;
	
	TimeStart = Hw_Timer_Get_CountValue();
 800288e:	4c0b      	ldr	r4, [pc, #44]	; (80028bc <Hw_Si47xx_WaitForSTC+0x30>)
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_Si47xx_WaitForSTC( u32 TimeOut )
{
 8002890:	b083      	sub	sp, #12
 8002892:	4607      	mov	r7, r0
	u16 Ret;
	u32 TimeStart;
	u32 TimeEnd;
	u8  Status;
	
	TimeStart = Hw_Timer_Get_CountValue();
 8002894:	47a0      	blx	r4
 8002896:	4d0a      	ldr	r5, [pc, #40]	; (80028c0 <Hw_Si47xx_WaitForSTC+0x34>)
 8002898:	4606      	mov	r6, r0
	
	while(1)
	{	
		Ret = Hw_Si47xx_GET_INT_STATUS( &Status );
 800289a:	f10d 0007 	add.w	r0, sp, #7
 800289e:	47a8      	blx	r5
		
		if( Ret == ERR_NONE )
 80028a0:	b920      	cbnz	r0, 80028ac <Hw_Si47xx_WaitForSTC+0x20>
		{
			if( Status & (1<<0) )
 80028a2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80028a6:	f013 0f01 	tst.w	r3, #1
 80028aa:	d104      	bne.n	80028b6 <Hw_Si47xx_WaitForSTC+0x2a>
			}
		}
	
		//-- 타임 아웃 처리
		//
		TimeEnd = Hw_Timer_Get_CountValue();
 80028ac:	47a0      	blx	r4
		
		if( (TimeEnd - TimeStart) > TimeOut )
 80028ae:	1b80      	subs	r0, r0, r6
 80028b0:	42b8      	cmp	r0, r7
 80028b2:	d9f2      	bls.n	800289a <Hw_Si47xx_WaitForSTC+0xe>
		{
			Ret = HW_SI47XX_ERR_TIME_OUT;
 80028b4:	2002      	movs	r0, #2
			break;
		}
	}
	
	return Ret;		
}
 80028b6:	b003      	add	sp, #12
 80028b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028ba:	bf00      	nop
 80028bc:	08001d79 	.word	0x08001d79
 80028c0:	0800285d 	.word	0x0800285d

080028c4 <Hw_Si47xx_AM_SEEK_START>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_Si47xx_AM_SEEK_START( u8 Dir, u8 Mode )
{
 80028c4:	b530      	push	{r4, r5, lr}
	#endif

	Index = 0;
	
	Cmd[Index++] = 0x41;
	Cmd[Index++] = (Dir<<3) | (Mode<<2);
 80028c6:	00c0      	lsls	r0, r0, #3
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_Si47xx_AM_SEEK_START( u8 Dir, u8 Mode )
{
 80028c8:	b089      	sub	sp, #36	; 0x24
	#endif

	Index = 0;
	
	Cmd[Index++] = 0x41;
	Cmd[Index++] = (Dir<<3) | (Mode<<2);
 80028ca:	ea40 0c81 	orr.w	ip, r0, r1, lsl #2
	HW_SI47XX_PRINTF("AM_SEEK_START\n" );
	#endif

	Index = 0;
	
	Cmd[Index++] = 0x41;
 80028ce:	2541      	movs	r5, #65	; 0x41
	Cmd[Index++] = (Dir<<3) | (Mode<<2);
	
	Ret = Hw_Si47xx_CommandResp( Cmd, Index, Resp, 0, 1000 );
 80028d0:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80028d4:	9400      	str	r4, [sp, #0]
 80028d6:	a806      	add	r0, sp, #24
 80028d8:	2102      	movs	r1, #2
 80028da:	aa02      	add	r2, sp, #8
 80028dc:	2300      	movs	r3, #0
	HW_SI47XX_PRINTF("AM_SEEK_START\n" );
	#endif

	Index = 0;
	
	Cmd[Index++] = 0x41;
 80028de:	f88d 5018 	strb.w	r5, [sp, #24]
	Cmd[Index++] = (Dir<<3) | (Mode<<2);
 80028e2:	f88d c019 	strb.w	ip, [sp, #25]
	
	Ret = Hw_Si47xx_CommandResp( Cmd, Index, Resp, 0, 1000 );
 80028e6:	4c02      	ldr	r4, [pc, #8]	; (80028f0 <Hw_Si47xx_AM_SEEK_START+0x2c>)
 80028e8:	47a0      	blx	r4
		
	return Ret;	
}
 80028ea:	b009      	add	sp, #36	; 0x24
 80028ec:	bd30      	pop	{r4, r5, pc}
 80028ee:	bf00      	nop
 80028f0:	080027c5 	.word	0x080027c5

080028f4 <Hw_Si47xx_FM_SEEK_START>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_Si47xx_FM_SEEK_START( u8 Dir, u8 Mode )
{
 80028f4:	b530      	push	{r4, r5, lr}
	#endif

	Index = 0;
	
	Cmd[Index++] = 0x21;
	Cmd[Index++] = (Dir<<3) | (Mode<<2);
 80028f6:	00c0      	lsls	r0, r0, #3
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_Si47xx_FM_SEEK_START( u8 Dir, u8 Mode )
{
 80028f8:	b089      	sub	sp, #36	; 0x24
	#endif

	Index = 0;
	
	Cmd[Index++] = 0x21;
	Cmd[Index++] = (Dir<<3) | (Mode<<2);
 80028fa:	ea40 0c81 	orr.w	ip, r0, r1, lsl #2
	HW_SI47XX_PRINTF("FM_SEEK_START\n" );
	#endif

	Index = 0;
	
	Cmd[Index++] = 0x21;
 80028fe:	2521      	movs	r5, #33	; 0x21
	Cmd[Index++] = (Dir<<3) | (Mode<<2);
	
	Ret = Hw_Si47xx_CommandResp( Cmd, Index, Resp, 0, 1000 );
 8002900:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8002904:	9400      	str	r4, [sp, #0]
 8002906:	a806      	add	r0, sp, #24
 8002908:	2102      	movs	r1, #2
 800290a:	aa02      	add	r2, sp, #8
 800290c:	2300      	movs	r3, #0
	HW_SI47XX_PRINTF("FM_SEEK_START\n" );
	#endif

	Index = 0;
	
	Cmd[Index++] = 0x21;
 800290e:	f88d 5018 	strb.w	r5, [sp, #24]
	Cmd[Index++] = (Dir<<3) | (Mode<<2);
 8002912:	f88d c019 	strb.w	ip, [sp, #25]
	
	Ret = Hw_Si47xx_CommandResp( Cmd, Index, Resp, 0, 1000 );
 8002916:	4c02      	ldr	r4, [pc, #8]	; (8002920 <Hw_Si47xx_FM_SEEK_START+0x2c>)
 8002918:	47a0      	blx	r4
		
	return Ret;	
}
 800291a:	b009      	add	sp, #36	; 0x24
 800291c:	bd30      	pop	{r4, r5, pc}
 800291e:	bf00      	nop
 8002920:	080027c5 	.word	0x080027c5

08002924 <Hw_Si47xx_AM_TUNE_FREQ>:
     			520khz -> 1710khz
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_Si47xx_AM_TUNE_FREQ( u16 Frequency )
{
 8002924:	b5f0      	push	{r4, r5, r6, r7, lr}
	#endif

	Index = 0;
	
	Cmd[Index++] = 0x40;
	Cmd[Index++] = 0x00;
 8002926:	2400      	movs	r4, #0
     			520khz -> 1710khz
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_Si47xx_AM_TUNE_FREQ( u16 Frequency )
{
 8002928:	b089      	sub	sp, #36	; 0x24
 800292a:	4605      	mov	r5, r0

	Index = 0;
	
	Cmd[Index++] = 0x40;
	Cmd[Index++] = 0x00;
	Cmd[Index++] = ( Frequency >> 8 ) & 0xFF;			// FREQ_h
 800292c:	0a06      	lsrs	r6, r0, #8
	Cmd[Index++] = ( Frequency >> 0 ) & 0xFF;			// FREQ_l
	Cmd[Index++] = 0x00; 								// ANTCAP
	Cmd[Index++] = 0x00; 								// ANTCAP
	
	Ret = Hw_Si47xx_CommandResp( Cmd, Index, Resp, 0, 1000 );
 800292e:	4623      	mov	r3, r4
	HW_SI47XX_PRINTF("AM_TUNE_FREQ\n" );
	#endif

	Index = 0;
	
	Cmd[Index++] = 0x40;
 8002930:	2740      	movs	r7, #64	; 0x40
	Cmd[Index++] = 0x00;
 8002932:	f88d 4019 	strb.w	r4, [sp, #25]
	Cmd[Index++] = ( Frequency >> 8 ) & 0xFF;			// FREQ_h
	Cmd[Index++] = ( Frequency >> 0 ) & 0xFF;			// FREQ_l
	Cmd[Index++] = 0x00; 								// ANTCAP
 8002936:	f88d 401c 	strb.w	r4, [sp, #28]
	Cmd[Index++] = 0x00; 								// ANTCAP
 800293a:	f88d 401d 	strb.w	r4, [sp, #29]
	
	Ret = Hw_Si47xx_CommandResp( Cmd, Index, Resp, 0, 1000 );
 800293e:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8002942:	9400      	str	r4, [sp, #0]
 8002944:	a806      	add	r0, sp, #24
 8002946:	2106      	movs	r1, #6
 8002948:	aa02      	add	r2, sp, #8
	HW_SI47XX_PRINTF("AM_TUNE_FREQ\n" );
	#endif

	Index = 0;
	
	Cmd[Index++] = 0x40;
 800294a:	f88d 7018 	strb.w	r7, [sp, #24]
	Cmd[Index++] = 0x00;
	Cmd[Index++] = ( Frequency >> 8 ) & 0xFF;			// FREQ_h
 800294e:	f88d 601a 	strb.w	r6, [sp, #26]
	Cmd[Index++] = ( Frequency >> 0 ) & 0xFF;			// FREQ_l
 8002952:	f88d 501b 	strb.w	r5, [sp, #27]
	Cmd[Index++] = 0x00; 								// ANTCAP
	Cmd[Index++] = 0x00; 								// ANTCAP
	
	Ret = Hw_Si47xx_CommandResp( Cmd, Index, Resp, 0, 1000 );
 8002956:	4c02      	ldr	r4, [pc, #8]	; (8002960 <Hw_Si47xx_AM_TUNE_FREQ+0x3c>)
 8002958:	47a0      	blx	r4
		
	return Ret;	
}
 800295a:	b009      	add	sp, #36	; 0x24
 800295c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800295e:	bf00      	nop
 8002960:	080027c5 	.word	0x080027c5

08002964 <Hw_Si47xx_FM_TUNE_FREQ>:
     			107.7Mhz -> 10770
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_Si47xx_FM_TUNE_FREQ( u16 Frequency )
{
 8002964:	b5f0      	push	{r4, r5, r6, r7, lr}
	#endif

	Index = 0;
	
	Cmd[Index++] = 0x20;
	Cmd[Index++] = 0x00;
 8002966:	2400      	movs	r4, #0
     			107.7Mhz -> 10770
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_Si47xx_FM_TUNE_FREQ( u16 Frequency )
{
 8002968:	b089      	sub	sp, #36	; 0x24
 800296a:	4605      	mov	r5, r0

	Index = 0;
	
	Cmd[Index++] = 0x20;
	Cmd[Index++] = 0x00;
	Cmd[Index++] = ( Frequency >> 8 ) & 0xFF;			// FREQ_h
 800296c:	0a06      	lsrs	r6, r0, #8
	Cmd[Index++] = ( Frequency >> 0 ) & 0xFF;			// FREQ_l
	Cmd[Index++] = 0x00; 								// ANTCAP
	
	Ret = Hw_Si47xx_CommandResp( Cmd, Index, Resp, 0, 1000 );
 800296e:	4623      	mov	r3, r4
	HW_SI47XX_PRINTF("FM_TUNE_FREQ\n" );
	#endif

	Index = 0;
	
	Cmd[Index++] = 0x20;
 8002970:	2720      	movs	r7, #32
	Cmd[Index++] = 0x00;
 8002972:	f88d 4019 	strb.w	r4, [sp, #25]
	Cmd[Index++] = ( Frequency >> 8 ) & 0xFF;			// FREQ_h
	Cmd[Index++] = ( Frequency >> 0 ) & 0xFF;			// FREQ_l
	Cmd[Index++] = 0x00; 								// ANTCAP
 8002976:	f88d 401c 	strb.w	r4, [sp, #28]
	
	Ret = Hw_Si47xx_CommandResp( Cmd, Index, Resp, 0, 1000 );
 800297a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800297e:	9400      	str	r4, [sp, #0]
 8002980:	a806      	add	r0, sp, #24
 8002982:	2105      	movs	r1, #5
 8002984:	aa02      	add	r2, sp, #8
	HW_SI47XX_PRINTF("FM_TUNE_FREQ\n" );
	#endif

	Index = 0;
	
	Cmd[Index++] = 0x20;
 8002986:	f88d 7018 	strb.w	r7, [sp, #24]
	Cmd[Index++] = 0x00;
	Cmd[Index++] = ( Frequency >> 8 ) & 0xFF;			// FREQ_h
 800298a:	f88d 601a 	strb.w	r6, [sp, #26]
	Cmd[Index++] = ( Frequency >> 0 ) & 0xFF;			// FREQ_l
 800298e:	f88d 501b 	strb.w	r5, [sp, #27]
	Cmd[Index++] = 0x00; 								// ANTCAP
	
	Ret = Hw_Si47xx_CommandResp( Cmd, Index, Resp, 0, 1000 );
 8002992:	4c02      	ldr	r4, [pc, #8]	; (800299c <Hw_Si47xx_FM_TUNE_FREQ+0x38>)
 8002994:	47a0      	blx	r4
		
	return Ret;	
}
 8002996:	b009      	add	sp, #36	; 0x24
 8002998:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800299a:	bf00      	nop
 800299c:	080027c5 	.word	0x080027c5

080029a0 <Hw_Si47xx_GET_PROPERTY>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_Si47xx_GET_PROPERTY( u16 PropertyName, u16 *pPropertyValue )
{
 80029a0:	b5f0      	push	{r4, r5, r6, r7, lr}
	HW_SI47XX_PRINTF("GET_PROPERTY : %x\n", PropertyName );
	#endif

	Index = 0;
	
	Cmd[Index++] = 0x13;
 80029a2:	2713      	movs	r7, #19
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_Si47xx_GET_PROPERTY( u16 PropertyName, u16 *pPropertyValue )
{
 80029a4:	b089      	sub	sp, #36	; 0x24
 80029a6:	4684      	mov	ip, r0

	Index = 0;
	
	Cmd[Index++] = 0x13;
	Cmd[Index++] = 0x00;
	Cmd[Index++] = ( PropertyName  >> 8 ) & 0xFF;	
 80029a8:	0a06      	lsrs	r6, r0, #8
	Cmd[Index++] = ( PropertyName  >> 0 ) & 0xFF;
	
	Ret = Hw_Si47xx_CommandResp( Cmd, Index, Resp, 3, 1000 );
 80029aa:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
	HW_SI47XX_PRINTF("GET_PROPERTY : %x\n", PropertyName );
	#endif

	Index = 0;
	
	Cmd[Index++] = 0x13;
 80029ae:	f88d 7018 	strb.w	r7, [sp, #24]
	Cmd[Index++] = 0x00;
 80029b2:	2700      	movs	r7, #0
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_Si47xx_GET_PROPERTY( u16 PropertyName, u16 *pPropertyValue )
{
 80029b4:	460d      	mov	r5, r1
	Cmd[Index++] = 0x13;
	Cmd[Index++] = 0x00;
	Cmd[Index++] = ( PropertyName  >> 8 ) & 0xFF;	
	Cmd[Index++] = ( PropertyName  >> 0 ) & 0xFF;
	
	Ret = Hw_Si47xx_CommandResp( Cmd, Index, Resp, 3, 1000 );
 80029b6:	9400      	str	r4, [sp, #0]
 80029b8:	a806      	add	r0, sp, #24
 80029ba:	2104      	movs	r1, #4
 80029bc:	aa02      	add	r2, sp, #8
 80029be:	2303      	movs	r3, #3
	#endif

	Index = 0;
	
	Cmd[Index++] = 0x13;
	Cmd[Index++] = 0x00;
 80029c0:	f88d 7019 	strb.w	r7, [sp, #25]
	Cmd[Index++] = ( PropertyName  >> 8 ) & 0xFF;	
 80029c4:	f88d 601a 	strb.w	r6, [sp, #26]
	Cmd[Index++] = ( PropertyName  >> 0 ) & 0xFF;
 80029c8:	f88d c01b 	strb.w	ip, [sp, #27]
	
	Ret = Hw_Si47xx_CommandResp( Cmd, Index, Resp, 3, 1000 );
 80029cc:	4c05      	ldr	r4, [pc, #20]	; (80029e4 <Hw_Si47xx_GET_PROPERTY+0x44>)
 80029ce:	47a0      	blx	r4
	
	if( Ret == ERR_NONE )
 80029d0:	b930      	cbnz	r0, 80029e0 <Hw_Si47xx_GET_PROPERTY+0x40>
	{
		*pPropertyValue = (Resp[2]<<8) | (Resp[3]<<0);
 80029d2:	f89d 200a 	ldrb.w	r2, [sp, #10]
 80029d6:	f89d 100b 	ldrb.w	r1, [sp, #11]
 80029da:	ea41 2302 	orr.w	r3, r1, r2, lsl #8
 80029de:	802b      	strh	r3, [r5, #0]
	}
	
	return Ret;	
}
 80029e0:	b009      	add	sp, #36	; 0x24
 80029e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029e4:	080027c5 	.word	0x080027c5

080029e8 <Hw_Si47xx_SET_PROPERTY>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_Si47xx_SET_PROPERTY( u16 PropertyName, u16 PropertyValue )
{
 80029e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029ea:	460c      	mov	r4, r1
 80029ec:	b089      	sub	sp, #36	; 0x24
 80029ee:	4605      	mov	r5, r0
	#endif

	Index = 0;
	
	Cmd[Index++] = 0x12;
	Cmd[Index++] = 0x00;
 80029f0:	2600      	movs	r6, #0
	Cmd[Index++] = ( PropertyName  >> 8 ) & 0xFF;
 80029f2:	ea4f 2e10 	mov.w	lr, r0, lsr #8
	Cmd[Index++] = ( PropertyName  >> 0 ) & 0xFF;
	Cmd[Index++] = ( PropertyValue >> 8 ) & 0xFF;
 80029f6:	0a0f      	lsrs	r7, r1, #8
	HW_SI47XX_PRINTF("SET_PROPERTY : %x, %x\n", PropertyName, PropertyValue );
	#endif

	Index = 0;
	
	Cmd[Index++] = 0x12;
 80029f8:	f04f 0c12 	mov.w	ip, #18
	Cmd[Index++] = 0x00;
	Cmd[Index++] = ( PropertyName  >> 8 ) & 0xFF;
	Cmd[Index++] = ( PropertyName  >> 0 ) & 0xFF;
	Cmd[Index++] = ( PropertyValue >> 8 ) & 0xFF;
	Cmd[Index++] = ( PropertyValue >> 0 ) & 0xFF;
 80029fc:	f88d 401d 	strb.w	r4, [sp, #29]
	
	Ret = Hw_Si47xx_CommandResp( Cmd, Index, Resp, 0, 1000 );
 8002a00:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8002a04:	9400      	str	r4, [sp, #0]
 8002a06:	a806      	add	r0, sp, #24
 8002a08:	2106      	movs	r1, #6
 8002a0a:	aa02      	add	r2, sp, #8
 8002a0c:	4633      	mov	r3, r6
	HW_SI47XX_PRINTF("SET_PROPERTY : %x, %x\n", PropertyName, PropertyValue );
	#endif

	Index = 0;
	
	Cmd[Index++] = 0x12;
 8002a0e:	f88d c018 	strb.w	ip, [sp, #24]
	Cmd[Index++] = 0x00;
 8002a12:	f88d 6019 	strb.w	r6, [sp, #25]
	Cmd[Index++] = ( PropertyName  >> 8 ) & 0xFF;
 8002a16:	f88d e01a 	strb.w	lr, [sp, #26]
	Cmd[Index++] = ( PropertyName  >> 0 ) & 0xFF;
 8002a1a:	f88d 501b 	strb.w	r5, [sp, #27]
	Cmd[Index++] = ( PropertyValue >> 8 ) & 0xFF;
 8002a1e:	f88d 701c 	strb.w	r7, [sp, #28]
	Cmd[Index++] = ( PropertyValue >> 0 ) & 0xFF;
	
	Ret = Hw_Si47xx_CommandResp( Cmd, Index, Resp, 0, 1000 );
 8002a22:	4c02      	ldr	r4, [pc, #8]	; (8002a2c <Hw_Si47xx_SET_PROPERTY+0x44>)
 8002a24:	47a0      	blx	r4
	
	return Ret;	
}
 8002a26:	b009      	add	sp, #36	; 0x24
 8002a28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	080027c5 	.word	0x080027c5

08002a30 <Hw_Si47xx_AM_Config>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_Si47xx_AM_Config( void )
{
 8002a30:	b530      	push	{r4, r5, lr}
	u8  Cmd [HW_SI47XX_MAX_LENGTH_CMD];
	u8  Resp[HW_SI47XX_MAX_LENGTH_RESP];	

	u16 PropertyValue;
	
	if( (Ret = Hw_Si47xx_POWER_UP(HW_SI47XX_BAND_MODE_AM)) != ERR_NONE )	return Ret;
 8002a32:	2001      	movs	r0, #1
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_Si47xx_AM_Config( void )
{
 8002a34:	b089      	sub	sp, #36	; 0x24
	u8  Cmd [HW_SI47XX_MAX_LENGTH_CMD];
	u8  Resp[HW_SI47XX_MAX_LENGTH_RESP];	

	u16 PropertyValue;
	
	if( (Ret = Hw_Si47xx_POWER_UP(HW_SI47XX_BAND_MODE_AM)) != ERR_NONE )	return Ret;
 8002a36:	4b23      	ldr	r3, [pc, #140]	; (8002ac4 <Hw_Si47xx_AM_Config+0x94>)
 8002a38:	4798      	blx	r3
 8002a3a:	4604      	mov	r4, r0
 8002a3c:	b110      	cbz	r0, 8002a44 <Hw_Si47xx_AM_Config+0x14>
	Ret = Hw_Si47xx_SET_PROPERTY( 0x4001, 0  );
	Ret = Hw_Si47xx_SET_PROPERTY( 0x4000, 63 );				

	
	return Ret;
}
 8002a3e:	4620      	mov	r0, r4
 8002a40:	b009      	add	sp, #36	; 0x24
 8002a42:	bd30      	pop	{r4, r5, pc}

	u16 PropertyValue;
	
	if( (Ret = Hw_Si47xx_POWER_UP(HW_SI47XX_BAND_MODE_AM)) != ERR_NONE )	return Ret;
		
	Hw_Timer_Delay_ms(120);
 8002a44:	2078      	movs	r0, #120	; 0x78
 8002a46:	4a20      	ldr	r2, [pc, #128]	; (8002ac8 <Hw_Si47xx_AM_Config+0x98>)
 8002a48:	4790      	blx	r2
	#if HW_SI47XX_DEBUG_SHOW == 1
	HW_SI47XX_PRINTF("GET_REV\n");
	#endif

	Cmd[0] = 0x10;
	if( (Ret = Hw_Si47xx_CommandResp( Cmd, 1, Resp, 8, 1000 )) != ERR_NONE ) return Ret;
 8002a4a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
	//
	#if HW_SI47XX_DEBUG_SHOW == 1
	HW_SI47XX_PRINTF("GET_REV\n");
	#endif

	Cmd[0] = 0x10;
 8002a4e:	a808      	add	r0, sp, #32
 8002a50:	2110      	movs	r1, #16
 8002a52:	f800 1d08 	strb.w	r1, [r0, #-8]!
	if( (Ret = Hw_Si47xx_CommandResp( Cmd, 1, Resp, 8, 1000 )) != ERR_NONE ) return Ret;
 8002a56:	aa02      	add	r2, sp, #8
 8002a58:	9400      	str	r4, [sp, #0]
 8002a5a:	2101      	movs	r1, #1
 8002a5c:	4c1b      	ldr	r4, [pc, #108]	; (8002acc <Hw_Si47xx_AM_Config+0x9c>)
 8002a5e:	2308      	movs	r3, #8
 8002a60:	47a0      	blx	r4
 8002a62:	4604      	mov	r4, r0
 8002a64:	2800      	cmp	r0, #0
 8002a66:	d1ea      	bne.n	8002a3e <Hw_Si47xx_AM_Config+0xe>
	
	
	Ret = Hw_Si47xx_SET_PROPERTY( 0x0001, 0x0005 );		// Seek/Tune Complete Interrupt Enable
 8002a68:	4d19      	ldr	r5, [pc, #100]	; (8002ad0 <Hw_Si47xx_AM_Config+0xa0>)
 8002a6a:	2105      	movs	r1, #5
 8002a6c:	2001      	movs	r0, #1
 8002a6e:	47a8      	blx	r5
	Ret = Hw_Si47xx_SET_PROPERTY( 0x0201, 32768 );		// REFCLK_FREQ
 8002a70:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a74:	f240 2001 	movw	r0, #513	; 0x201
 8002a78:	47a8      	blx	r5
	Ret = Hw_Si47xx_SET_PROPERTY( 0x0202, 1     );		// PRESCALE
 8002a7a:	2101      	movs	r1, #1
 8002a7c:	f240 2002 	movw	r0, #514	; 0x202
 8002a80:	47a8      	blx	r5

		
	Ret = Hw_Si47xx_SET_PROPERTY( 0x3102, 1     );		// AM_CHANNEL_FILTER - 4khz
 8002a82:	2101      	movs	r1, #1
 8002a84:	f243 1002 	movw	r0, #12546	; 0x3102
 8002a88:	47a8      	blx	r5
	Ret = Hw_Si47xx_SET_PROPERTY( 0x3100, 1     );		// AM_DEEMPHASIS
 8002a8a:	2101      	movs	r1, #1
 8002a8c:	f44f 5044 	mov.w	r0, #12544	; 0x3100
 8002a90:	47a8      	blx	r5
	Ret = Hw_Si47xx_SET_PROPERTY( 0x3400, 520 	);		// AM_SEEK_BAND_BOTTOM
 8002a92:	f44f 7102 	mov.w	r1, #520	; 0x208
 8002a96:	f44f 5050 	mov.w	r0, #13312	; 0x3400
 8002a9a:	47a8      	blx	r5
	Ret = Hw_Si47xx_SET_PROPERTY( 0x3401, 1710 	);		// AM_SEEK_BAND_TOP
 8002a9c:	f240 61ae 	movw	r1, #1710	; 0x6ae
 8002aa0:	f243 4001 	movw	r0, #13313	; 0x3401
 8002aa4:	47a8      	blx	r5
	Ret = Hw_Si47xx_SET_PROPERTY( 0x3402, 1    	);		// AM_SEEK_FREQ_SPACING
 8002aa6:	2101      	movs	r1, #1
 8002aa8:	f243 4002 	movw	r0, #13314	; 0x3402
 8002aac:	47a8      	blx	r5
	//Ret = Hw_Si47xx_SET_PROPERTY( 0x3403, 11    );		// AM_SEEK_TUNE_SNR_THRESHOLD   3
	//Ret = Hw_Si47xx_SET_PROPERTY( 0x3404, 42    );		// AM_SEEK_TUNE_RSSI_THRESHOLD


	Ret = Hw_Si47xx_SET_PROPERTY( 0x4001, 0  );
 8002aae:	4621      	mov	r1, r4
 8002ab0:	f244 0001 	movw	r0, #16385	; 0x4001
 8002ab4:	47a8      	blx	r5
	Ret = Hw_Si47xx_SET_PROPERTY( 0x4000, 63 );				
 8002ab6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002aba:	213f      	movs	r1, #63	; 0x3f
 8002abc:	47a8      	blx	r5
 8002abe:	4604      	mov	r4, r0

	
	return Ret;
 8002ac0:	e7bd      	b.n	8002a3e <Hw_Si47xx_AM_Config+0xe>
 8002ac2:	bf00      	nop
 8002ac4:	08002761 	.word	0x08002761
 8002ac8:	08001d65 	.word	0x08001d65
 8002acc:	080027c5 	.word	0x080027c5
 8002ad0:	080029e9 	.word	0x080029e9

08002ad4 <Hw_Si47xx_FM_Config>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_Si47xx_FM_Config( void )
{
 8002ad4:	b530      	push	{r4, r5, lr}
	u8  Cmd [HW_SI47XX_MAX_LENGTH_CMD];
	u8  Resp[HW_SI47XX_MAX_LENGTH_RESP];	

	u16 PropertyValue;
	
	if( (Ret = Hw_Si47xx_POWER_UP(HW_SI47XX_BAND_MODE_FM)) != ERR_NONE )	return Ret;
 8002ad6:	2000      	movs	r0, #0
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_Si47xx_FM_Config( void )
{
 8002ad8:	b089      	sub	sp, #36	; 0x24
	u8  Cmd [HW_SI47XX_MAX_LENGTH_CMD];
	u8  Resp[HW_SI47XX_MAX_LENGTH_RESP];	

	u16 PropertyValue;
	
	if( (Ret = Hw_Si47xx_POWER_UP(HW_SI47XX_BAND_MODE_FM)) != ERR_NONE )	return Ret;
 8002ada:	4b23      	ldr	r3, [pc, #140]	; (8002b68 <Hw_Si47xx_FM_Config+0x94>)
 8002adc:	4798      	blx	r3
 8002ade:	4604      	mov	r4, r0
 8002ae0:	b110      	cbz	r0, 8002ae8 <Hw_Si47xx_FM_Config+0x14>
	Ret = Hw_Si47xx_SET_PROPERTY( 0x4001, 0  );
	Ret = Hw_Si47xx_SET_PROPERTY( 0x4000, 63 );				

	
	return Ret;
}
 8002ae2:	4620      	mov	r0, r4
 8002ae4:	b009      	add	sp, #36	; 0x24
 8002ae6:	bd30      	pop	{r4, r5, pc}

	u16 PropertyValue;
	
	if( (Ret = Hw_Si47xx_POWER_UP(HW_SI47XX_BAND_MODE_FM)) != ERR_NONE )	return Ret;
		
	Hw_Timer_Delay_ms(120);
 8002ae8:	2078      	movs	r0, #120	; 0x78
 8002aea:	4a20      	ldr	r2, [pc, #128]	; (8002b6c <Hw_Si47xx_FM_Config+0x98>)
 8002aec:	4790      	blx	r2
	#if HW_SI47XX_DEBUG_SHOW == 1
	HW_SI47XX_PRINTF("GET_REV\n");
	#endif

	Cmd[0] = 0x10;
	if( (Ret = Hw_Si47xx_CommandResp( Cmd, 1, Resp, 8, 1000 )) != ERR_NONE ) return Ret;
 8002aee:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
	//
	#if HW_SI47XX_DEBUG_SHOW == 1
	HW_SI47XX_PRINTF("GET_REV\n");
	#endif

	Cmd[0] = 0x10;
 8002af2:	a808      	add	r0, sp, #32
 8002af4:	2110      	movs	r1, #16
 8002af6:	f800 1d08 	strb.w	r1, [r0, #-8]!
	if( (Ret = Hw_Si47xx_CommandResp( Cmd, 1, Resp, 8, 1000 )) != ERR_NONE ) return Ret;
 8002afa:	aa02      	add	r2, sp, #8
 8002afc:	9400      	str	r4, [sp, #0]
 8002afe:	2101      	movs	r1, #1
 8002b00:	4c1b      	ldr	r4, [pc, #108]	; (8002b70 <Hw_Si47xx_FM_Config+0x9c>)
 8002b02:	2308      	movs	r3, #8
 8002b04:	47a0      	blx	r4
 8002b06:	4604      	mov	r4, r0
 8002b08:	2800      	cmp	r0, #0
 8002b0a:	d1ea      	bne.n	8002ae2 <Hw_Si47xx_FM_Config+0xe>
	
	
	Ret = Hw_Si47xx_SET_PROPERTY( 0x0001, 0x0005 );		// Seek/Tune Complete Interrupt Enable
 8002b0c:	4d19      	ldr	r5, [pc, #100]	; (8002b74 <Hw_Si47xx_FM_Config+0xa0>)
 8002b0e:	2105      	movs	r1, #5
 8002b10:	2001      	movs	r0, #1
 8002b12:	47a8      	blx	r5
	Ret = Hw_Si47xx_SET_PROPERTY( 0x0201, 32768 );		// REFCLK_FREQ
 8002b14:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b18:	f240 2001 	movw	r0, #513	; 0x201
 8002b1c:	47a8      	blx	r5
	Ret = Hw_Si47xx_SET_PROPERTY( 0x0202, 1     );		// PRESCALE
 8002b1e:	2101      	movs	r1, #1
 8002b20:	f240 2002 	movw	r0, #514	; 0x202
 8002b24:	47a8      	blx	r5

		
	Ret = Hw_Si47xx_SET_PROPERTY( 0x1502, 0     );		// FM_RDS_CONFIG
 8002b26:	4621      	mov	r1, r4
 8002b28:	f241 5002 	movw	r0, #5378	; 0x1502
 8002b2c:	47a8      	blx	r5
	Ret = Hw_Si47xx_SET_PROPERTY( 0x1100, 1     );		// FM_DEEMPHASIS
 8002b2e:	2101      	movs	r1, #1
 8002b30:	f44f 5088 	mov.w	r0, #4352	; 0x1100
 8002b34:	47a8      	blx	r5
	Ret = Hw_Si47xx_SET_PROPERTY( 0x1400, 7600 );		// FM_SEEK_BAND_BOTTOM
 8002b36:	f641 51b0 	movw	r1, #7600	; 0x1db0
 8002b3a:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8002b3e:	47a8      	blx	r5
	Ret = Hw_Si47xx_SET_PROPERTY( 0x1401, 10790 );		// FM_SEEK_BAND_TOP
 8002b40:	f642 2126 	movw	r1, #10790	; 0x2a26
 8002b44:	f241 4001 	movw	r0, #5121	; 0x1401
 8002b48:	47a8      	blx	r5
	Ret = Hw_Si47xx_SET_PROPERTY( 0x1402, 10    );		// FM_SEEK_FREQ_SPACING
 8002b4a:	210a      	movs	r1, #10
 8002b4c:	f241 4002 	movw	r0, #5122	; 0x1402
 8002b50:	47a8      	blx	r5
	//Ret = Hw_Si47xx_SET_PROPERTY( 0x1403, 3     );		// FM_SEEK_TUNE_SNR_THRESHOLD   3
	//Ret = Hw_Si47xx_SET_PROPERTY( 0x1404, 20    );		// FM_SEEK_TUNE_RSSI_THRESHOLD


	Ret = Hw_Si47xx_SET_PROPERTY( 0x4001, 0  );
 8002b52:	4621      	mov	r1, r4
 8002b54:	f244 0001 	movw	r0, #16385	; 0x4001
 8002b58:	47a8      	blx	r5
	Ret = Hw_Si47xx_SET_PROPERTY( 0x4000, 63 );				
 8002b5a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002b5e:	213f      	movs	r1, #63	; 0x3f
 8002b60:	47a8      	blx	r5
 8002b62:	4604      	mov	r4, r0

	
	return Ret;
 8002b64:	e7bd      	b.n	8002ae2 <Hw_Si47xx_FM_Config+0xe>
 8002b66:	bf00      	nop
 8002b68:	08002761 	.word	0x08002761
 8002b6c:	08001d65 	.word	0x08001d65
 8002b70:	080027c5 	.word	0x080027c5
 8002b74:	080029e9 	.word	0x080029e9

08002b78 <EP1_IN_Callback>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void EP1_IN_Callback (void)
{
 8002b78:	b510      	push	{r4, lr}
  uint16_t USB_Tx_ptr;
  uint16_t USB_Tx_length;
  
  if (USB_Tx_State == 1)
 8002b7a:	4b16      	ldr	r3, [pc, #88]	; (8002bd4 <EP1_IN_Callback+0x5c>)
 8002b7c:	781a      	ldrb	r2, [r3, #0]
 8002b7e:	2a01      	cmp	r2, #1
 8002b80:	d000      	beq.n	8002b84 <EP1_IN_Callback+0xc>
 8002b82:	bd10      	pop	{r4, pc}
  {
    if (USART_Rx_length == 0) 
 8002b84:	4914      	ldr	r1, [pc, #80]	; (8002bd8 <EP1_IN_Callback+0x60>)
 8002b86:	680a      	ldr	r2, [r1, #0]
 8002b88:	b30a      	cbz	r2, 8002bce <EP1_IN_Callback+0x56>
    {
      USB_Tx_State = 0;
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
 8002b8a:	2a40      	cmp	r2, #64	; 0x40
 8002b8c:	d815      	bhi.n	8002bba <EP1_IN_Callback+0x42>
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
        USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;    
      }
      else 
      {
        USB_Tx_ptr = USART_Rx_ptr_out;
 8002b8e:	4813      	ldr	r0, [pc, #76]	; (8002bdc <EP1_IN_Callback+0x64>)
        USB_Tx_length = USART_Rx_length;
 8002b90:	b294      	uxth	r4, r2
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
        USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;    
      }
      else 
      {
        USB_Tx_ptr = USART_Rx_ptr_out;
 8002b92:	6803      	ldr	r3, [r0, #0]
        USB_Tx_length = USART_Rx_length;
        
        USART_Rx_ptr_out += USART_Rx_length;
 8002b94:	189a      	adds	r2, r3, r2
 8002b96:	6002      	str	r2, [r0, #0]
        USART_Rx_length = 0;
 8002b98:	2200      	movs	r2, #0
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
        USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;    
      }
      else 
      {
        USB_Tx_ptr = USART_Rx_ptr_out;
 8002b9a:	b29b      	uxth	r3, r3
        USB_Tx_length = USART_Rx_length;
        
        USART_Rx_ptr_out += USART_Rx_length;
        USART_Rx_length = 0;
 8002b9c:	600a      	str	r2, [r1, #0]
      }
      UserToPMABufferCopy(&USART_Rx_Buffer[USB_Tx_ptr], ENDP1_TXADDR, USB_Tx_length);
 8002b9e:	4810      	ldr	r0, [pc, #64]	; (8002be0 <EP1_IN_Callback+0x68>)
 8002ba0:	21c0      	movs	r1, #192	; 0xc0
 8002ba2:	18c0      	adds	r0, r0, r3
 8002ba4:	4622      	mov	r2, r4
 8002ba6:	4b0f      	ldr	r3, [pc, #60]	; (8002be4 <EP1_IN_Callback+0x6c>)
 8002ba8:	4798      	blx	r3
      SetEPTxCount(ENDP1, USB_Tx_length);
 8002baa:	2001      	movs	r0, #1
 8002bac:	4621      	mov	r1, r4
 8002bae:	4a0e      	ldr	r2, [pc, #56]	; (8002be8 <EP1_IN_Callback+0x70>)
 8002bb0:	4790      	blx	r2
      SetEPTxValid(ENDP1); 
 8002bb2:	2001      	movs	r0, #1
 8002bb4:	490d      	ldr	r1, [pc, #52]	; (8002bec <EP1_IN_Callback+0x74>)
 8002bb6:	4788      	blx	r1
 8002bb8:	bd10      	pop	{r4, pc}
      USB_Tx_State = 0;
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
        USB_Tx_ptr = USART_Rx_ptr_out;
 8002bba:	4808      	ldr	r0, [pc, #32]	; (8002bdc <EP1_IN_Callback+0x64>)
        USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
        
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
        USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;    
 8002bbc:	3a40      	subs	r2, #64	; 0x40
      USB_Tx_State = 0;
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
        USB_Tx_ptr = USART_Rx_ptr_out;
 8002bbe:	6803      	ldr	r3, [r0, #0]
        USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
        
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
        USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;    
 8002bc0:	600a      	str	r2, [r1, #0]
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
        USB_Tx_ptr = USART_Rx_ptr_out;
        USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
        
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
 8002bc2:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8002bc6:	6001      	str	r1, [r0, #0]
      USB_Tx_State = 0;
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
        USB_Tx_ptr = USART_Rx_ptr_out;
 8002bc8:	b29b      	uxth	r3, r3
        USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
 8002bca:	2440      	movs	r4, #64	; 0x40
 8002bcc:	e7e7      	b.n	8002b9e <EP1_IN_Callback+0x26>
  
  if (USB_Tx_State == 1)
  {
    if (USART_Rx_length == 0) 
    {
      USB_Tx_State = 0;
 8002bce:	701a      	strb	r2, [r3, #0]
 8002bd0:	bd10      	pop	{r4, pc}
 8002bd2:	bf00      	nop
 8002bd4:	200002a0 	.word	0x200002a0
 8002bd8:	200002ac 	.word	0x200002ac
 8002bdc:	200002a8 	.word	0x200002a8
 8002be0:	20000808 	.word	0x20000808
 8002be4:	080040fd 	.word	0x080040fd
 8002be8:	080043a9 	.word	0x080043a9
 8002bec:	08004265 	.word	0x08004265

08002bf0 <EP3_OUT_Callback>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void EP3_OUT_Callback(void)
{
 8002bf0:	b510      	push	{r4, lr}
  uint16_t USB_Rx_Cnt;
  
  /* Get the received data buffer and update the counter */
  USB_Rx_Cnt = USB_SIL_Read(EP3_OUT, USB_Rx_Buffer);
 8002bf2:	4c06      	ldr	r4, [pc, #24]	; (8002c0c <EP3_OUT_Callback+0x1c>)
 8002bf4:	4b06      	ldr	r3, [pc, #24]	; (8002c10 <EP3_OUT_Callback+0x20>)
 8002bf6:	4621      	mov	r1, r4
 8002bf8:	2003      	movs	r0, #3
 8002bfa:	4798      	blx	r3
  
  /* USB data will be immediately processed, this allow next USB traffic being 
  NAKed till the end of the USART Xfer */
  
  USB_To_USART_Send_Data(USB_Rx_Buffer, USB_Rx_Cnt);
 8002bfc:	4a05      	ldr	r2, [pc, #20]	; (8002c14 <EP3_OUT_Callback+0x24>)
 8002bfe:	b2c1      	uxtb	r1, r0
 8002c00:	4620      	mov	r0, r4
 8002c02:	4790      	blx	r2
 
  /* Enable the receive of data on EP3 */
  SetEPRxValid(ENDP3);
 8002c04:	2003      	movs	r0, #3
 8002c06:	4b04      	ldr	r3, [pc, #16]	; (8002c18 <EP3_OUT_Callback+0x28>)
 8002c08:	4798      	blx	r3
}
 8002c0a:	bd10      	pop	{r4, pc}
 8002c0c:	200007a0 	.word	0x200007a0
 8002c10:	08004461 	.word	0x08004461
 8002c14:	080034e5 	.word	0x080034e5
 8002c18:	08004289 	.word	0x08004289

08002c1c <SOF_Callback>:
*******************************************************************************/
void SOF_Callback(void)
{
  static uint32_t FrameCount = 0;
  
  if(bDeviceState == CONFIGURED)
 8002c1c:	4808      	ldr	r0, [pc, #32]	; (8002c40 <SOF_Callback+0x24>)
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SOF_Callback(void)
{
 8002c1e:	b508      	push	{r3, lr}
  static uint32_t FrameCount = 0;
  
  if(bDeviceState == CONFIGURED)
 8002c20:	6803      	ldr	r3, [r0, #0]
 8002c22:	2b05      	cmp	r3, #5
 8002c24:	d000      	beq.n	8002c28 <SOF_Callback+0xc>
 8002c26:	bd08      	pop	{r3, pc}
  {
    if (FrameCount++ == VCOMPORT_IN_FRAME_INTERVAL)
 8002c28:	4b06      	ldr	r3, [pc, #24]	; (8002c44 <SOF_Callback+0x28>)
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	1c51      	adds	r1, r2, #1
 8002c2e:	2a05      	cmp	r2, #5
 8002c30:	6019      	str	r1, [r3, #0]
 8002c32:	d1f8      	bne.n	8002c26 <SOF_Callback+0xa>
    {
      /* Reset the frame counter */
      FrameCount = 0;
 8002c34:	2000      	movs	r0, #0
 8002c36:	6018      	str	r0, [r3, #0]
      
      /* Check the data to be sent through IN pipe */
      Handle_USBAsynchXfer();
 8002c38:	4b03      	ldr	r3, [pc, #12]	; (8002c48 <SOF_Callback+0x2c>)
 8002c3a:	4798      	blx	r3
 8002c3c:	e7f3      	b.n	8002c26 <SOF_Callback+0xa>
 8002c3e:	bf00      	nop
 8002c40:	20000294 	.word	0x20000294
 8002c44:	20000280 	.word	0x20000280
 8002c48:	0800355d 	.word	0x0800355d

08002c4c <USB_Istr>:
void USB_Istr(void)
{
    uint32_t i=0;
 __IO uint32_t EP[8];
  
  wIstr = _GetISTR();
 8002c4c:	4a6f      	ldr	r2, [pc, #444]	; (8002e0c <USB_Istr+0x1c0>)
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Istr(void)
{
 8002c4e:	b530      	push	{r4, r5, lr}
    uint32_t i=0;
 __IO uint32_t EP[8];
  
  wIstr = _GetISTR();
 8002c50:	6813      	ldr	r3, [r2, #0]
 8002c52:	4c6f      	ldr	r4, [pc, #444]	; (8002e10 <USB_Istr+0x1c4>)

  //printf("%x %x %x %x  ", wIstr >> 16, wIstr & 0x0000FFFF, wInterrupt_Mask >> 16, wInterrupt_Mask&0x0000FFFF);

#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
 8002c54:	4d6f      	ldr	r5, [pc, #444]	; (8002e14 <USB_Istr+0x1c8>)
void USB_Istr(void)
{
    uint32_t i=0;
 __IO uint32_t EP[8];
  
  wIstr = _GetISTR();
 8002c56:	8023      	strh	r3, [r4, #0]

  //printf("%x %x %x %x  ", wIstr >> 16, wIstr & 0x0000FFFF, wInterrupt_Mask >> 16, wInterrupt_Mask&0x0000FFFF);

#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
 8002c58:	8820      	ldrh	r0, [r4, #0]
 8002c5a:	882b      	ldrh	r3, [r5, #0]
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Istr(void)
{
 8002c5c:	b089      	sub	sp, #36	; 0x24
  wIstr = _GetISTR();

  //printf("%x %x %x %x  ", wIstr >> 16, wIstr & 0x0000FFFF, wInterrupt_Mask >> 16, wInterrupt_Mask&0x0000FFFF);

#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
 8002c5e:	ea03 0100 	and.w	r1, r3, r0
 8002c62:	f411 7f00 	tst.w	r1, #512	; 0x200
 8002c66:	d15d      	bne.n	8002d24 <USB_Istr+0xd8>
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  
  
#if (IMR_MSK & ISTR_CTR)
  if (wIstr & ISTR_CTR & wInterrupt_Mask)
 8002c68:	8822      	ldrh	r2, [r4, #0]
 8002c6a:	f402 4c00 	and.w	ip, r2, #32768	; 0x8000
 8002c6e:	ea1c 0f03 	tst.w	ip, r3
 8002c72:	d153      	bne.n	8002d1c <USB_Istr+0xd0>
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  
#if (IMR_MSK & ISTR_RESET)
  if (wIstr & ISTR_RESET & wInterrupt_Mask)
 8002c74:	f8b4 c000 	ldrh.w	ip, [r4]
 8002c78:	f40c 6180 	and.w	r1, ip, #1024	; 0x400
 8002c7c:	4219      	tst	r1, r3
 8002c7e:	d144      	bne.n	8002d0a <USB_Istr+0xbe>
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_ERR)
  if (wIstr & ISTR_ERR & wInterrupt_Mask)
 8002c80:	8822      	ldrh	r2, [r4, #0]
 8002c82:	f402 5c00 	and.w	ip, r2, #8192	; 0x2000
 8002c86:	ea1c 0f03 	tst.w	ip, r3
 8002c8a:	d003      	beq.n	8002c94 <USB_Istr+0x48>
  {
    _SetISTR((uint16_t)CLR_ERR);
 8002c8c:	495f      	ldr	r1, [pc, #380]	; (8002e0c <USB_Istr+0x1c0>)
 8002c8e:	f64d 70ff 	movw	r0, #57343	; 0xdfff
 8002c92:	6008      	str	r0, [r1, #0]
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_WKUP)
  if (wIstr & ISTR_WKUP & wInterrupt_Mask)
 8002c94:	8822      	ldrh	r2, [r4, #0]
 8002c96:	f402 5c80 	and.w	ip, r2, #4096	; 0x1000
 8002c9a:	ea1c 0f03 	tst.w	ip, r3
 8002c9e:	d12b      	bne.n	8002cf8 <USB_Istr+0xac>
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_SUSP)
  if (wIstr & ISTR_SUSP & wInterrupt_Mask)
 8002ca0:	f8b4 c000 	ldrh.w	ip, [r4]
 8002ca4:	f40c 6000 	and.w	r0, ip, #2048	; 0x800
 8002ca8:	4218      	tst	r0, r3
 8002caa:	d00b      	beq.n	8002cc4 <USB_Istr+0x78>
  {
	//printf(" in susp ");
    /* check if SUSPEND is possible */
    if(fSuspendEnabled)
 8002cac:	495a      	ldr	r1, [pc, #360]	; (8002e18 <USB_Istr+0x1cc>)
 8002cae:	780b      	ldrb	r3, [r1, #0]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d11e      	bne.n	8002cf2 <USB_Istr+0xa6>
    }
    else
    {
      //printf("l\n");    	
      /* if not possible then resume after xx ms */
      Resume(RESUME_LATER);
 8002cb4:	2002      	movs	r0, #2
 8002cb6:	4b59      	ldr	r3, [pc, #356]	; (8002e1c <USB_Istr+0x1d0>)
 8002cb8:	4798      	blx	r3
    }
    
    //printf(" out susp ");
    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    _SetISTR((uint16_t)CLR_SUSP);
 8002cba:	4954      	ldr	r1, [pc, #336]	; (8002e0c <USB_Istr+0x1c0>)
 8002cbc:	f24f 70ff 	movw	r0, #63487	; 0xf7ff
 8002cc0:	882b      	ldrh	r3, [r5, #0]
 8002cc2:	6008      	str	r0, [r1, #0]
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/

#if (IMR_MSK & ISTR_ESOF)
  if (wIstr & ISTR_ESOF & wInterrupt_Mask)
 8002cc4:	8822      	ldrh	r2, [r4, #0]
 8002cc6:	f402 7c80 	and.w	ip, r2, #256	; 0x100
 8002cca:	ea1c 0f03 	tst.w	ip, r3
 8002cce:	d00e      	beq.n	8002cee <USB_Istr+0xa2>
  {
    /* clear ESOF flag in ISTR */
    _SetISTR((uint16_t)CLR_ESOF);
 8002cd0:	4b4e      	ldr	r3, [pc, #312]	; (8002e0c <USB_Istr+0x1c0>)
 8002cd2:	f64f 62ff 	movw	r2, #65279	; 0xfeff
    
    if ((_GetFNR()&FNR_RXDP)!=0)
 8002cd6:	4952      	ldr	r1, [pc, #328]	; (8002e20 <USB_Istr+0x1d4>)

#if (IMR_MSK & ISTR_ESOF)
  if (wIstr & ISTR_ESOF & wInterrupt_Mask)
  {
    /* clear ESOF flag in ISTR */
    _SetISTR((uint16_t)CLR_ESOF);
 8002cd8:	601a      	str	r2, [r3, #0]
    
    if ((_GetFNR()&FNR_RXDP)!=0)
 8002cda:	6808      	ldr	r0, [r1, #0]
 8002cdc:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8002ce0:	d12b      	bne.n	8002d3a <USB_Istr+0xee>
        esof_counter = 0;
      }
    }
    else
    {
        esof_counter = 0;
 8002ce2:	4850      	ldr	r0, [pc, #320]	; (8002e24 <USB_Istr+0x1d8>)
 8002ce4:	2100      	movs	r1, #0
 8002ce6:	6001      	str	r1, [r0, #0]
    }
    
    /* resume handling timing is made with ESOFs */
    Resume(RESUME_ESOF); /* request without change of the machine state */
 8002ce8:	2007      	movs	r0, #7
 8002cea:	4b4c      	ldr	r3, [pc, #304]	; (8002e1c <USB_Istr+0x1d0>)
 8002cec:	4798      	blx	r3
#ifdef ESOF_CALLBACK
    ESOF_Callback();
#endif
  }
#endif
} /* USB_Istr */
 8002cee:	b009      	add	sp, #36	; 0x24
 8002cf0:	bd30      	pop	{r4, r5, pc}
	//printf(" in susp ");
    /* check if SUSPEND is possible */
    if(fSuspendEnabled)
    {
      //printf("k\n");
      Suspend();
 8002cf2:	4a4d      	ldr	r2, [pc, #308]	; (8002e28 <USB_Istr+0x1dc>)
 8002cf4:	4790      	blx	r2
 8002cf6:	e7e0      	b.n	8002cba <USB_Istr+0x6e>
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_WKUP)
  if (wIstr & ISTR_WKUP & wInterrupt_Mask)
  {
    _SetISTR((uint16_t)CLR_WKUP);
 8002cf8:	4a44      	ldr	r2, [pc, #272]	; (8002e0c <USB_Istr+0x1c0>)
 8002cfa:	f64e 71ff 	movw	r1, #61439	; 0xefff
    Resume(RESUME_EXTERNAL);
 8002cfe:	4b47      	ldr	r3, [pc, #284]	; (8002e1c <USB_Istr+0x1d0>)
 8002d00:	2000      	movs	r0, #0
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_WKUP)
  if (wIstr & ISTR_WKUP & wInterrupt_Mask)
  {
    _SetISTR((uint16_t)CLR_WKUP);
 8002d02:	6011      	str	r1, [r2, #0]
    Resume(RESUME_EXTERNAL);
 8002d04:	4798      	blx	r3
 8002d06:	882b      	ldrh	r3, [r5, #0]
 8002d08:	e7ca      	b.n	8002ca0 <USB_Istr+0x54>
#if (IMR_MSK & ISTR_RESET)
  if (wIstr & ISTR_RESET & wInterrupt_Mask)
  {
  	//printf(" ISTR_RESET ");
  	
    _SetISTR((uint16_t)CLR_RESET);
 8002d0a:	4940      	ldr	r1, [pc, #256]	; (8002e0c <USB_Istr+0x1c0>)
    Device_Property.Reset();
 8002d0c:	4a47      	ldr	r2, [pc, #284]	; (8002e2c <USB_Istr+0x1e0>)
#if (IMR_MSK & ISTR_RESET)
  if (wIstr & ISTR_RESET & wInterrupt_Mask)
  {
  	//printf(" ISTR_RESET ");
  	
    _SetISTR((uint16_t)CLR_RESET);
 8002d0e:	f64f 30ff 	movw	r0, #64511	; 0xfbff
    Device_Property.Reset();
 8002d12:	6853      	ldr	r3, [r2, #4]
#if (IMR_MSK & ISTR_RESET)
  if (wIstr & ISTR_RESET & wInterrupt_Mask)
  {
  	//printf(" ISTR_RESET ");
  	
    _SetISTR((uint16_t)CLR_RESET);
 8002d14:	6008      	str	r0, [r1, #0]
    Device_Property.Reset();
 8002d16:	4798      	blx	r3
 8002d18:	882b      	ldrh	r3, [r5, #0]
 8002d1a:	e7b1      	b.n	8002c80 <USB_Istr+0x34>
#if (IMR_MSK & ISTR_CTR)
  if (wIstr & ISTR_CTR & wInterrupt_Mask)
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    CTR_LP();
 8002d1c:	4844      	ldr	r0, [pc, #272]	; (8002e30 <USB_Istr+0x1e4>)
 8002d1e:	4780      	blx	r0
 8002d20:	882b      	ldrh	r3, [r5, #0]
 8002d22:	e7a7      	b.n	8002c74 <USB_Istr+0x28>
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
  {
	//printf(" ISTR_SOF ");

    _SetISTR((uint16_t)CLR_SOF);
    bIntPackSOF++;
 8002d24:	4843      	ldr	r0, [pc, #268]	; (8002e34 <USB_Istr+0x1e8>)
#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
  {
	//printf(" ISTR_SOF ");

    _SetISTR((uint16_t)CLR_SOF);
 8002d26:	f64f 51ff 	movw	r1, #65023	; 0xfdff
 8002d2a:	6011      	str	r1, [r2, #0]
    bIntPackSOF++;
 8002d2c:	7803      	ldrb	r3, [r0, #0]

#ifdef SOF_CALLBACK
    SOF_Callback();
 8002d2e:	4a42      	ldr	r2, [pc, #264]	; (8002e38 <USB_Istr+0x1ec>)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
  {
	//printf(" ISTR_SOF ");

    _SetISTR((uint16_t)CLR_SOF);
    bIntPackSOF++;
 8002d30:	1c59      	adds	r1, r3, #1
 8002d32:	7001      	strb	r1, [r0, #0]

#ifdef SOF_CALLBACK
    SOF_Callback();
 8002d34:	4790      	blx	r2
 8002d36:	882b      	ldrh	r3, [r5, #0]
 8002d38:	e796      	b.n	8002c68 <USB_Istr+0x1c>
    _SetISTR((uint16_t)CLR_ESOF);
    
    if ((_GetFNR()&FNR_RXDP)!=0)
    {
      /* increment ESOF counter */
      esof_counter ++;
 8002d3a:	493a      	ldr	r1, [pc, #232]	; (8002e24 <USB_Istr+0x1d8>)
 8002d3c:	6808      	ldr	r0, [r1, #0]
 8002d3e:	1c42      	adds	r2, r0, #1
 8002d40:	600a      	str	r2, [r1, #0]
      
      /* test if we enter in ESOF more than 3 times with FSUSP =0 and RXDP =1=>> possible missing SUSP flag*/
      if ((esof_counter >3)&&((_GetCNTR()&CNTR_FSUSP)==0))
 8002d42:	6808      	ldr	r0, [r1, #0]
 8002d44:	2803      	cmp	r0, #3
 8002d46:	d9cf      	bls.n	8002ce8 <USB_Istr+0x9c>
 8002d48:	483c      	ldr	r0, [pc, #240]	; (8002e3c <USB_Istr+0x1f0>)
 8002d4a:	6802      	ldr	r2, [r0, #0]
 8002d4c:	f012 0f08 	tst.w	r2, #8
 8002d50:	d1ca      	bne.n	8002ce8 <USB_Istr+0x9c>
      {           
        /* this a sequence to apply a force RESET*/
      
        /*Store CNTR value */
        wCNTR = _GetCNTR(); 
 8002d52:	6804      	ldr	r4, [r0, #0]
 8002d54:	4a3a      	ldr	r2, [pc, #232]	; (8002e40 <USB_Istr+0x1f4>)
 8002d56:	b2a4      	uxth	r4, r4
 8002d58:	6014      	str	r4, [r2, #0]
      
        /*Store endpoints registers status */
        for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 8002d5a:	4c3a      	ldr	r4, [pc, #232]	; (8002e44 <USB_Istr+0x1f8>)
 8002d5c:	6824      	ldr	r4, [r4, #0]
 8002d5e:	b2a4      	uxth	r4, r4
 8002d60:	9400      	str	r4, [sp, #0]
 8002d62:	4c39      	ldr	r4, [pc, #228]	; (8002e48 <USB_Istr+0x1fc>)
 8002d64:	6824      	ldr	r4, [r4, #0]
 8002d66:	b2a4      	uxth	r4, r4
 8002d68:	9401      	str	r4, [sp, #4]
 8002d6a:	4c38      	ldr	r4, [pc, #224]	; (8002e4c <USB_Istr+0x200>)
 8002d6c:	6824      	ldr	r4, [r4, #0]
 8002d6e:	b2a4      	uxth	r4, r4
 8002d70:	9402      	str	r4, [sp, #8]
 8002d72:	4c37      	ldr	r4, [pc, #220]	; (8002e50 <USB_Istr+0x204>)
 8002d74:	6824      	ldr	r4, [r4, #0]
 8002d76:	b2a4      	uxth	r4, r4
 8002d78:	9403      	str	r4, [sp, #12]
 8002d7a:	4c36      	ldr	r4, [pc, #216]	; (8002e54 <USB_Istr+0x208>)
 8002d7c:	6824      	ldr	r4, [r4, #0]
 8002d7e:	b2a4      	uxth	r4, r4
 8002d80:	9404      	str	r4, [sp, #16]
 8002d82:	4c35      	ldr	r4, [pc, #212]	; (8002e58 <USB_Istr+0x20c>)
 8002d84:	6824      	ldr	r4, [r4, #0]
 8002d86:	b2a4      	uxth	r4, r4
 8002d88:	9405      	str	r4, [sp, #20]
 8002d8a:	4c34      	ldr	r4, [pc, #208]	; (8002e5c <USB_Istr+0x210>)
 8002d8c:	6824      	ldr	r4, [r4, #0]
 8002d8e:	b2a4      	uxth	r4, r4
 8002d90:	9406      	str	r4, [sp, #24]
 8002d92:	4c33      	ldr	r4, [pc, #204]	; (8002e60 <USB_Istr+0x214>)
 8002d94:	6824      	ldr	r4, [r4, #0]
 8002d96:	b2a4      	uxth	r4, r4
 8002d98:	9407      	str	r4, [sp, #28]
      
        /*apply FRES */
        wCNTR|=CNTR_FRES;
 8002d9a:	6814      	ldr	r4, [r2, #0]
 8002d9c:	f044 0401 	orr.w	r4, r4, #1
 8002da0:	6014      	str	r4, [r2, #0]
        _SetCNTR(wCNTR);
 8002da2:	6814      	ldr	r4, [r2, #0]
 8002da4:	b2a4      	uxth	r4, r4
 8002da6:	6004      	str	r4, [r0, #0]
 
        /*clear FRES*/
        wCNTR&=~CNTR_FRES;
 8002da8:	6814      	ldr	r4, [r2, #0]
 8002daa:	f024 0401 	bic.w	r4, r4, #1
 8002dae:	6014      	str	r4, [r2, #0]
        _SetCNTR(wCNTR);
 8002db0:	6812      	ldr	r2, [r2, #0]
 8002db2:	b292      	uxth	r2, r2
 8002db4:	6002      	str	r2, [r0, #0]
      
        /*poll for RESET flag in ISTR*/
        while((_GetISTR()&ISTR_RESET) == 0);
 8002db6:	6818      	ldr	r0, [r3, #0]
 8002db8:	f410 6f80 	tst.w	r0, #1024	; 0x400
 8002dbc:	d0fb      	beq.n	8002db6 <USB_Istr+0x16a>
  
        /* clear RESET flag in ISTR */
        _SetISTR((uint16_t)CLR_RESET);
 8002dbe:	4813      	ldr	r0, [pc, #76]	; (8002e0c <USB_Istr+0x1c0>)
 8002dc0:	f64f 32ff 	movw	r2, #64511	; 0xfbff
 8002dc4:	6002      	str	r2, [r0, #0]
   
       /*restore Enpoints*/
        for (i=0;i<8;i++)
        _SetENDPOINT(i, EP[i]);
 8002dc6:	9b00      	ldr	r3, [sp, #0]
 8002dc8:	b29a      	uxth	r2, r3
 8002dca:	f840 2c44 	str.w	r2, [r0, #-68]
 8002dce:	9b01      	ldr	r3, [sp, #4]
 8002dd0:	b29a      	uxth	r2, r3
 8002dd2:	f840 2c40 	str.w	r2, [r0, #-64]
 8002dd6:	9b02      	ldr	r3, [sp, #8]
 8002dd8:	b29a      	uxth	r2, r3
 8002dda:	f840 2c3c 	str.w	r2, [r0, #-60]
 8002dde:	9b03      	ldr	r3, [sp, #12]
 8002de0:	b29a      	uxth	r2, r3
 8002de2:	f840 2c38 	str.w	r2, [r0, #-56]
 8002de6:	9b04      	ldr	r3, [sp, #16]
 8002de8:	b29a      	uxth	r2, r3
 8002dea:	f840 2c34 	str.w	r2, [r0, #-52]
 8002dee:	9b05      	ldr	r3, [sp, #20]
 8002df0:	b29a      	uxth	r2, r3
 8002df2:	f840 2c30 	str.w	r2, [r0, #-48]
 8002df6:	9b06      	ldr	r3, [sp, #24]
 8002df8:	b29a      	uxth	r2, r3
 8002dfa:	f840 2c2c 	str.w	r2, [r0, #-44]
 8002dfe:	9b07      	ldr	r3, [sp, #28]
 8002e00:	b29a      	uxth	r2, r3
      
        esof_counter = 0;
 8002e02:	2300      	movs	r3, #0
        /* clear RESET flag in ISTR */
        _SetISTR((uint16_t)CLR_RESET);
   
       /*restore Enpoints*/
        for (i=0;i<8;i++)
        _SetENDPOINT(i, EP[i]);
 8002e04:	f840 2c28 	str.w	r2, [r0, #-40]
      
        esof_counter = 0;
 8002e08:	600b      	str	r3, [r1, #0]
 8002e0a:	e76d      	b.n	8002ce8 <USB_Istr+0x9c>
 8002e0c:	40005c44 	.word	0x40005c44
 8002e10:	200007e0 	.word	0x200007e0
 8002e14:	2000103c 	.word	0x2000103c
 8002e18:	20000298 	.word	0x20000298
 8002e1c:	0800328d 	.word	0x0800328d
 8002e20:	40005c48 	.word	0x40005c48
 8002e24:	2000028c 	.word	0x2000028c
 8002e28:	0800311d 	.word	0x0800311d
 8002e2c:	2000005c 	.word	0x2000005c
 8002e30:	08004491 	.word	0x08004491
 8002e34:	20000288 	.word	0x20000288
 8002e38:	08002c1d 	.word	0x08002c1d
 8002e3c:	40005c40 	.word	0x40005c40
 8002e40:	20000284 	.word	0x20000284
 8002e44:	40005c00 	.word	0x40005c00
 8002e48:	40005c04 	.word	0x40005c04
 8002e4c:	40005c08 	.word	0x40005c08
 8002e50:	40005c0c 	.word	0x40005c0c
 8002e54:	40005c10 	.word	0x40005c10
 8002e58:	40005c14 	.word	0x40005c14
 8002e5c:	40005c18 	.word	0x40005c18
 8002e60:	40005c1c 	.word	0x40005c1c

08002e64 <Virtual_Com_Port_SetConfiguration>:
*******************************************************************************/
void Virtual_Com_Port_SetConfiguration(void)
{
  DEVICE_INFO *pInfo = &Device_Info;

  if (pInfo->Current_Configuration != 0)
 8002e64:	4803      	ldr	r0, [pc, #12]	; (8002e74 <Virtual_Com_Port_SetConfiguration+0x10>)
 8002e66:	7a83      	ldrb	r3, [r0, #10]
 8002e68:	b113      	cbz	r3, 8002e70 <Virtual_Com_Port_SetConfiguration+0xc>
  {
    /* Device configured */
    bDeviceState = CONFIGURED;
 8002e6a:	4903      	ldr	r1, [pc, #12]	; (8002e78 <Virtual_Com_Port_SetConfiguration+0x14>)
 8002e6c:	2205      	movs	r2, #5
 8002e6e:	600a      	str	r2, [r1, #0]
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	20001018 	.word	0x20001018
 8002e78:	20000294 	.word	0x20000294

08002e7c <Virtual_Com_Port_SetDeviceAddress>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_SetDeviceAddress (void)
{
  bDeviceState = ADDRESSED;
 8002e7c:	4b01      	ldr	r3, [pc, #4]	; (8002e84 <Virtual_Com_Port_SetDeviceAddress+0x8>)
 8002e7e:	2204      	movs	r2, #4
 8002e80:	601a      	str	r2, [r3, #0]
}
 8002e82:	4770      	bx	lr
 8002e84:	20000294 	.word	0x20000294

08002e88 <Virtual_Com_Port_Status_In>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Status_In(void)
{
  if (Request == SET_LINE_CODING)
 8002e88:	4b03      	ldr	r3, [pc, #12]	; (8002e98 <Virtual_Com_Port_Status_In+0x10>)
 8002e8a:	781a      	ldrb	r2, [r3, #0]
 8002e8c:	2a20      	cmp	r2, #32
 8002e8e:	d101      	bne.n	8002e94 <Virtual_Com_Port_Status_In+0xc>
  {
    //USART_Config();
    Request = 0;
 8002e90:	2000      	movs	r0, #0
 8002e92:	7018      	strb	r0, [r3, #0]
 8002e94:	4770      	bx	lr
 8002e96:	bf00      	nop
 8002e98:	20000290 	.word	0x20000290

08002e9c <Virtual_Com_Port_Status_Out>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Status_Out(void)
{}
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop

08002ea0 <Virtual_Com_Port_Data_Setup>:
{
  uint8_t    *(*CopyRoutine)(uint16_t);

  CopyRoutine = NULL;

  if (RequestNo == GET_LINE_CODING)
 8002ea0:	2821      	cmp	r0, #33	; 0x21
* Input          : Request Nb.
* Output         : None.
* Return         : USB_UNSUPPORT or USB_SUCCESS.
*******************************************************************************/
RESULT Virtual_Com_Port_Data_Setup(uint8_t RequestNo)
{
 8002ea2:	b508      	push	{r3, lr}
  uint8_t    *(*CopyRoutine)(uint16_t);

  CopyRoutine = NULL;

  if (RequestNo == GET_LINE_CODING)
 8002ea4:	d003      	beq.n	8002eae <Virtual_Com_Port_Data_Setup+0xe>
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    {
      CopyRoutine = Virtual_Com_Port_GetLineCoding;
    }
  }
  else if (RequestNo == SET_LINE_CODING)
 8002ea6:	2820      	cmp	r0, #32
 8002ea8:	d00a      	beq.n	8002ec0 <Virtual_Com_Port_Data_Setup+0x20>
    Request = SET_LINE_CODING;
  }

  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
 8002eaa:	2002      	movs	r0, #2
 8002eac:	bd08      	pop	{r3, pc}

  CopyRoutine = NULL;

  if (RequestNo == GET_LINE_CODING)
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 8002eae:	4a10      	ldr	r2, [pc, #64]	; (8002ef0 <Virtual_Com_Port_Data_Setup+0x50>)
 8002eb0:	6811      	ldr	r1, [r2, #0]
 8002eb2:	7808      	ldrb	r0, [r1, #0]
 8002eb4:	f000 037f 	and.w	r3, r0, #127	; 0x7f
 8002eb8:	2b21      	cmp	r3, #33	; 0x21
 8002eba:	d1f6      	bne.n	8002eaa <Virtual_Com_Port_Data_Setup+0xa>
    {
      CopyRoutine = Virtual_Com_Port_GetLineCoding;
 8002ebc:	4b0d      	ldr	r3, [pc, #52]	; (8002ef4 <Virtual_Com_Port_Data_Setup+0x54>)
 8002ebe:	e00d      	b.n	8002edc <Virtual_Com_Port_Data_Setup+0x3c>
    }
  }
  else if (RequestNo == SET_LINE_CODING)
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 8002ec0:	4a0b      	ldr	r2, [pc, #44]	; (8002ef0 <Virtual_Com_Port_Data_Setup+0x50>)
    {
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
    }
    Request = SET_LINE_CODING;
 8002ec2:	490d      	ldr	r1, [pc, #52]	; (8002ef8 <Virtual_Com_Port_Data_Setup+0x58>)
      CopyRoutine = Virtual_Com_Port_GetLineCoding;
    }
  }
  else if (RequestNo == SET_LINE_CODING)
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 8002ec4:	6813      	ldr	r3, [r2, #0]
 8002ec6:	f893 c000 	ldrb.w	ip, [r3]
*******************************************************************************/
RESULT Virtual_Com_Port_Data_Setup(uint8_t RequestNo)
{
  uint8_t    *(*CopyRoutine)(uint16_t);

  CopyRoutine = NULL;
 8002eca:	4b0c      	ldr	r3, [pc, #48]	; (8002efc <Virtual_Com_Port_Data_Setup+0x5c>)
      CopyRoutine = Virtual_Com_Port_GetLineCoding;
    }
  }
  else if (RequestNo == SET_LINE_CODING)
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 8002ecc:	f00c 0c7f 	and.w	ip, ip, #127	; 0x7f
*******************************************************************************/
RESULT Virtual_Com_Port_Data_Setup(uint8_t RequestNo)
{
  uint8_t    *(*CopyRoutine)(uint16_t);

  CopyRoutine = NULL;
 8002ed0:	f1bc 0f21 	cmp.w	ip, #33	; 0x21
 8002ed4:	bf18      	it	ne
 8002ed6:	2300      	movne	r3, #0
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    {
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
    }
    Request = SET_LINE_CODING;
 8002ed8:	7008      	strb	r0, [r1, #0]
  }

  if (CopyRoutine == NULL)
 8002eda:	b13b      	cbz	r3, 8002eec <Virtual_Com_Port_Data_Setup+0x4c>
  {
    return USB_UNSUPPORT;
  }

  pInformation->Ctrl_Info.CopyData = CopyRoutine;
 8002edc:	6812      	ldr	r2, [r2, #0]
  pInformation->Ctrl_Info.Usb_wOffset = 0;
 8002ede:	2100      	movs	r1, #0
  (*CopyRoutine)(0);
 8002ee0:	2000      	movs	r0, #0
  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
  }

  pInformation->Ctrl_Info.CopyData = CopyRoutine;
 8002ee2:	6193      	str	r3, [r2, #24]
  pInformation->Ctrl_Info.Usb_wOffset = 0;
 8002ee4:	8251      	strh	r1, [r2, #18]
  (*CopyRoutine)(0);
 8002ee6:	4798      	blx	r3
  return USB_SUCCESS;
 8002ee8:	2000      	movs	r0, #0
 8002eea:	bd08      	pop	{r3, pc}
    Request = SET_LINE_CODING;
  }

  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
 8002eec:	2002      	movs	r0, #2

  pInformation->Ctrl_Info.CopyData = CopyRoutine;
  pInformation->Ctrl_Info.Usb_wOffset = 0;
  (*CopyRoutine)(0);
  return USB_SUCCESS;
}
 8002eee:	bd08      	pop	{r3, pc}
 8002ef0:	20001038 	.word	0x20001038
 8002ef4:	08002f39 	.word	0x08002f39
 8002ef8:	20000290 	.word	0x20000290
 8002efc:	08002f51 	.word	0x08002f51

08002f00 <Virtual_Com_Port_NoData_Setup>:
* Return         : USB_UNSUPPORT or USB_SUCCESS.
*******************************************************************************/
RESULT Virtual_Com_Port_NoData_Setup(uint8_t RequestNo)
{

  if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 8002f00:	4b08      	ldr	r3, [pc, #32]	; (8002f24 <Virtual_Com_Port_NoData_Setup+0x24>)
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	7811      	ldrb	r1, [r2, #0]
 8002f06:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8002f0a:	2b21      	cmp	r3, #33	; 0x21
 8002f0c:	d001      	beq.n	8002f12 <Virtual_Com_Port_NoData_Setup+0x12>
    {
      return USB_SUCCESS;
    }
  }

  return USB_UNSUPPORT;
 8002f0e:	2002      	movs	r0, #2
 8002f10:	4770      	bx	lr
RESULT Virtual_Com_Port_NoData_Setup(uint8_t RequestNo)
{

  if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
  {
    if (RequestNo == SET_COMM_FEATURE)
 8002f12:	2802      	cmp	r0, #2
 8002f14:	d004      	beq.n	8002f20 <Virtual_Com_Port_NoData_Setup+0x20>
    {
      return USB_SUCCESS;
    }
  }

  return USB_UNSUPPORT;
 8002f16:	2822      	cmp	r0, #34	; 0x22
 8002f18:	bf14      	ite	ne
 8002f1a:	2002      	movne	r0, #2
 8002f1c:	2000      	moveq	r0, #0
 8002f1e:	4770      	bx	lr

  if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
  {
    if (RequestNo == SET_COMM_FEATURE)
    {
      return USB_SUCCESS;
 8002f20:	2000      	movs	r0, #0
      return USB_SUCCESS;
    }
  }

  return USB_UNSUPPORT;
}
 8002f22:	4770      	bx	lr
 8002f24:	20001038 	.word	0x20001038

08002f28 <Virtual_Com_Port_Get_Interface_Setting>:
* Output         : None.
* Return         : The address of the string descriptors.
*******************************************************************************/
RESULT Virtual_Com_Port_Get_Interface_Setting(uint8_t Interface, uint8_t AlternateSetting)
{
  if (AlternateSetting > 0)
 8002f28:	b921      	cbnz	r1, 8002f34 <Virtual_Com_Port_Get_Interface_Setting+0xc>
  {
    return USB_UNSUPPORT;
  }
  else if (Interface > 1)
  {
    return USB_UNSUPPORT;
 8002f2a:	2801      	cmp	r0, #1
 8002f2c:	bf8c      	ite	hi
 8002f2e:	2002      	movhi	r0, #2
 8002f30:	2000      	movls	r0, #0
 8002f32:	4770      	bx	lr
*******************************************************************************/
RESULT Virtual_Com_Port_Get_Interface_Setting(uint8_t Interface, uint8_t AlternateSetting)
{
  if (AlternateSetting > 0)
  {
    return USB_UNSUPPORT;
 8002f34:	2002      	movs	r0, #2
  else if (Interface > 1)
  {
    return USB_UNSUPPORT;
  }
  return USB_SUCCESS;
}
 8002f36:	4770      	bx	lr

08002f38 <Virtual_Com_Port_GetLineCoding>:
* Output         : None.
* Return         : Linecoding structure base address.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetLineCoding(uint16_t Length)
{
  if (Length == 0)
 8002f38:	b108      	cbz	r0, 8002f3e <Virtual_Com_Port_GetLineCoding+0x6>
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
    return NULL;
  }
  return(uint8_t *)&linecoding;
 8002f3a:	4803      	ldr	r0, [pc, #12]	; (8002f48 <Virtual_Com_Port_GetLineCoding+0x10>)
}
 8002f3c:	4770      	bx	lr
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetLineCoding(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
 8002f3e:	4903      	ldr	r1, [pc, #12]	; (8002f4c <Virtual_Com_Port_GetLineCoding+0x14>)
 8002f40:	2208      	movs	r2, #8
 8002f42:	680b      	ldr	r3, [r1, #0]
 8002f44:	821a      	strh	r2, [r3, #16]
    return NULL;
 8002f46:	4770      	bx	lr
 8002f48:	200000d8 	.word	0x200000d8
 8002f4c:	20001038 	.word	0x20001038

08002f50 <Virtual_Com_Port_SetLineCoding>:
* Output         : None.
* Return         : Linecoding structure base address.
*******************************************************************************/
uint8_t *Virtual_Com_Port_SetLineCoding(uint16_t Length)
{
  if (Length == 0)
 8002f50:	b108      	cbz	r0, 8002f56 <Virtual_Com_Port_SetLineCoding+0x6>
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
    return NULL;
  }
  return(uint8_t *)&linecoding;
 8002f52:	4803      	ldr	r0, [pc, #12]	; (8002f60 <Virtual_Com_Port_SetLineCoding+0x10>)
}
 8002f54:	4770      	bx	lr
*******************************************************************************/
uint8_t *Virtual_Com_Port_SetLineCoding(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
 8002f56:	4903      	ldr	r1, [pc, #12]	; (8002f64 <Virtual_Com_Port_SetLineCoding+0x14>)
 8002f58:	2208      	movs	r2, #8
 8002f5a:	680b      	ldr	r3, [r1, #0]
 8002f5c:	821a      	strh	r2, [r3, #16]
    return NULL;
 8002f5e:	4770      	bx	lr
 8002f60:	200000d8 	.word	0x200000d8
 8002f64:	20001038 	.word	0x20001038

08002f68 <Virtual_Com_Port_GetStringDescriptor>:
* Input          : Length.
* Output         : None.
* Return         : The address of the string descriptors.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetStringDescriptor(uint16_t Length)
{
 8002f68:	b508      	push	{r3, lr}
  uint8_t wValue0 = pInformation->USBwValue0;
 8002f6a:	4906      	ldr	r1, [pc, #24]	; (8002f84 <Virtual_Com_Port_GetStringDescriptor+0x1c>)
 8002f6c:	680b      	ldr	r3, [r1, #0]
 8002f6e:	78db      	ldrb	r3, [r3, #3]
  if (wValue0 > 4)
 8002f70:	2b04      	cmp	r3, #4
 8002f72:	d901      	bls.n	8002f78 <Virtual_Com_Port_GetStringDescriptor+0x10>
  {
    return NULL;
 8002f74:	2000      	movs	r0, #0
  }
  else
  {
    return Standard_GetDescriptorData(Length, &String_Descriptor[wValue0]);
  }
}
 8002f76:	bd08      	pop	{r3, pc}
  {
    return NULL;
  }
  else
  {
    return Standard_GetDescriptorData(Length, &String_Descriptor[wValue0]);
 8002f78:	4903      	ldr	r1, [pc, #12]	; (8002f88 <Virtual_Com_Port_GetStringDescriptor+0x20>)
 8002f7a:	4a04      	ldr	r2, [pc, #16]	; (8002f8c <Virtual_Com_Port_GetStringDescriptor+0x24>)
 8002f7c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8002f80:	4790      	blx	r2
 8002f82:	bd08      	pop	{r3, pc}
 8002f84:	20001038 	.word	0x20001038
 8002f88:	200000b8 	.word	0x200000b8
 8002f8c:	08003a4d 	.word	0x08003a4d

08002f90 <Virtual_Com_Port_GetConfigDescriptor>:
* Input          : Length.
* Output         : None.
* Return         : The address of the configuration descriptor.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetConfigDescriptor(uint16_t Length)
{
 8002f90:	b508      	push	{r3, lr}
  return Standard_GetDescriptorData(Length, &Config_Descriptor);
 8002f92:	4902      	ldr	r1, [pc, #8]	; (8002f9c <Virtual_Com_Port_GetConfigDescriptor+0xc>)
 8002f94:	4b02      	ldr	r3, [pc, #8]	; (8002fa0 <Virtual_Com_Port_GetConfigDescriptor+0x10>)
 8002f96:	4798      	blx	r3
}
 8002f98:	bd08      	pop	{r3, pc}
 8002f9a:	bf00      	nop
 8002f9c:	20000054 	.word	0x20000054
 8002fa0:	08003a4d 	.word	0x08003a4d

08002fa4 <Virtual_Com_Port_GetDeviceDescriptor>:
* Input          : Length.
* Output         : None.
* Return         : The address of the device descriptor.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetDeviceDescriptor(uint16_t Length)
{
 8002fa4:	b508      	push	{r3, lr}
  return Standard_GetDescriptorData(Length, &Device_Descriptor);
 8002fa6:	4902      	ldr	r1, [pc, #8]	; (8002fb0 <Virtual_Com_Port_GetDeviceDescriptor+0xc>)
 8002fa8:	4b02      	ldr	r3, [pc, #8]	; (8002fb4 <Virtual_Com_Port_GetDeviceDescriptor+0x10>)
 8002faa:	4798      	blx	r3
}
 8002fac:	bd08      	pop	{r3, pc}
 8002fae:	bf00      	nop
 8002fb0:	200000b0 	.word	0x200000b0
 8002fb4:	08003a4d 	.word	0x08003a4d

08002fb8 <Virtual_Com_Port_Reset>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
 8002fb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 8002fbc:	4b30      	ldr	r3, [pc, #192]	; (8003080 <Virtual_Com_Port_Reset+0xc8>)

  /* Current Feature initialization */
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 8002fbe:	4c31      	ldr	r4, [pc, #196]	; (8003084 <Virtual_Com_Port_Reset+0xcc>)
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 8002fc0:	681e      	ldr	r6, [r3, #0]

  /* Current Feature initialization */
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 8002fc2:	f894 8007 	ldrb.w	r8, [r4, #7]
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 8002fc6:	2400      	movs	r4, #0

  /* Current Feature initialization */
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 8002fc8:	f886 8009 	strb.w	r8, [r6, #9]
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 8002fcc:	72b4      	strb	r4, [r6, #10]

  /* Current Feature initialization */
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];

  /* Set Virtual_Com_Port DEVICE with the default Interface*/
  pInformation->Current_Interface = 0;
 8002fce:	72f4      	strb	r4, [r6, #11]

  SetBTABLE(BTABLE_ADDRESS);
 8002fd0:	4620      	mov	r0, r4
 8002fd2:	4d2d      	ldr	r5, [pc, #180]	; (8003088 <Virtual_Com_Port_Reset+0xd0>)
 8002fd4:	47a8      	blx	r5

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
 8002fd6:	4e2d      	ldr	r6, [pc, #180]	; (800308c <Virtual_Com_Port_Reset+0xd4>)
 8002fd8:	4620      	mov	r0, r4
 8002fda:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002fde:	47b0      	blx	r6
  SetEPTxStatus(ENDP0, EP_TX_STALL);
 8002fe0:	4d2b      	ldr	r5, [pc, #172]	; (8003090 <Virtual_Com_Port_Reset+0xd8>)
 8002fe2:	2110      	movs	r1, #16
 8002fe4:	4620      	mov	r0, r4
 8002fe6:	47a8      	blx	r5
  SetEPRxAddr(ENDP0, ENDP0_RXADDR);
 8002fe8:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 80030ac <Virtual_Com_Port_Reset+0xf4>
 8002fec:	2140      	movs	r1, #64	; 0x40
 8002fee:	4620      	mov	r0, r4
 8002ff0:	47d0      	blx	sl
  SetEPTxAddr(ENDP0, ENDP0_TXADDR);
 8002ff2:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 80030b0 <Virtual_Com_Port_Reset+0xf8>
 8002ff6:	2180      	movs	r1, #128	; 0x80
 8002ff8:	4620      	mov	r0, r4
 8002ffa:	47c0      	blx	r8
  Clear_Status_Out(ENDP0);
 8002ffc:	4a25      	ldr	r2, [pc, #148]	; (8003094 <Virtual_Com_Port_Reset+0xdc>)
 8002ffe:	4620      	mov	r0, r4
 8003000:	4790      	blx	r2
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 8003002:	4825      	ldr	r0, [pc, #148]	; (8003098 <Virtual_Com_Port_Reset+0xe0>)
 8003004:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 80030b4 <Virtual_Com_Port_Reset+0xfc>
 8003008:	f890 102c 	ldrb.w	r1, [r0, #44]	; 0x2c
 800300c:	4620      	mov	r0, r4
 800300e:	47c8      	blx	r9
  SetEPRxValid(ENDP0);
 8003010:	4f22      	ldr	r7, [pc, #136]	; (800309c <Virtual_Com_Port_Reset+0xe4>)
 8003012:	4620      	mov	r0, r4
 8003014:	47b8      	blx	r7

  /* Initialize Endpoint 1 */
  SetEPType(ENDP1, EP_BULK);
 8003016:	2001      	movs	r0, #1
 8003018:	4621      	mov	r1, r4
 800301a:	47b0      	blx	r6
  SetEPTxAddr(ENDP1, ENDP1_TXADDR);
 800301c:	2001      	movs	r0, #1
 800301e:	21c0      	movs	r1, #192	; 0xc0
 8003020:	47c0      	blx	r8
  SetEPTxStatus(ENDP1, EP_TX_NAK);
 8003022:	2001      	movs	r0, #1
 8003024:	2120      	movs	r1, #32
 8003026:	47a8      	blx	r5
  SetEPRxStatus(ENDP1, EP_RX_DIS);
 8003028:	4f1d      	ldr	r7, [pc, #116]	; (80030a0 <Virtual_Com_Port_Reset+0xe8>)
 800302a:	2001      	movs	r0, #1
 800302c:	4621      	mov	r1, r4
 800302e:	47b8      	blx	r7

  /* Initialize Endpoint 2 */
  SetEPType(ENDP2, EP_INTERRUPT);
 8003030:	2002      	movs	r0, #2
 8003032:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003036:	47b0      	blx	r6
  SetEPTxAddr(ENDP2, ENDP2_TXADDR);
 8003038:	2002      	movs	r0, #2
 800303a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800303e:	47c0      	blx	r8
  SetEPRxStatus(ENDP2, EP_RX_DIS);
 8003040:	2002      	movs	r0, #2
 8003042:	4621      	mov	r1, r4
 8003044:	47b8      	blx	r7
  SetEPTxStatus(ENDP2, EP_TX_NAK);
 8003046:	2002      	movs	r0, #2
 8003048:	2120      	movs	r1, #32
 800304a:	47a8      	blx	r5

  /* Initialize Endpoint 3 */
  SetEPType(ENDP3, EP_BULK);
 800304c:	2003      	movs	r0, #3
 800304e:	4621      	mov	r1, r4
 8003050:	47b0      	blx	r6
  SetEPRxAddr(ENDP3, ENDP3_RXADDR);
 8003052:	2003      	movs	r0, #3
 8003054:	f44f 7188 	mov.w	r1, #272	; 0x110
 8003058:	47d0      	blx	sl
  SetEPRxCount(ENDP3, VIRTUAL_COM_PORT_DATA_SIZE);
 800305a:	2003      	movs	r0, #3
 800305c:	2140      	movs	r1, #64	; 0x40
 800305e:	47c8      	blx	r9
  SetEPRxStatus(ENDP3, EP_RX_VALID);
 8003060:	2003      	movs	r0, #3
 8003062:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8003066:	47b8      	blx	r7
  SetEPTxStatus(ENDP3, EP_TX_DIS);
 8003068:	4621      	mov	r1, r4
 800306a:	2003      	movs	r0, #3
 800306c:	47a8      	blx	r5

  /* Set this device to response on default address */
  SetDeviceAddress(0);
 800306e:	4620      	mov	r0, r4
 8003070:	490c      	ldr	r1, [pc, #48]	; (80030a4 <Virtual_Com_Port_Reset+0xec>)
 8003072:	4788      	blx	r1
  
  bDeviceState = ATTACHED;
 8003074:	4b0c      	ldr	r3, [pc, #48]	; (80030a8 <Virtual_Com_Port_Reset+0xf0>)
 8003076:	2201      	movs	r2, #1
 8003078:	601a      	str	r2, [r3, #0]
  
  //printf(" Reset ");
}
 800307a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800307e:	bf00      	nop
 8003080:	20001038 	.word	0x20001038
 8003084:	08004b54 	.word	0x08004b54
 8003088:	080041b5 	.word	0x080041b5
 800308c:	080041c9 	.word	0x080041c9
 8003090:	080041e5 	.word	0x080041e5
 8003094:	080042ad 	.word	0x080042ad
 8003098:	2000005c 	.word	0x2000005c
 800309c:	08004289 	.word	0x08004289
 80030a0:	08004225 	.word	0x08004225
 80030a4:	08003f8d 	.word	0x08003f8d
 80030a8:	20000294 	.word	0x20000294
 80030ac:	08004341 	.word	0x08004341
 80030b0:	0800431d 	.word	0x0800431d
 80030b4:	080043c9 	.word	0x080043c9

080030b8 <Virtual_Com_Port_init>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_init(void)
{
 80030b8:	b510      	push	{r4, lr}

  /* Update the serial number string descriptor with the data from the unique
  ID*/
  Get_SerialNum();
 80030ba:	4c06      	ldr	r4, [pc, #24]	; (80030d4 <Virtual_Com_Port_init+0x1c>)
 80030bc:	47a0      	blx	r4

  pInformation->Current_Configuration = 0;
 80030be:	4b06      	ldr	r3, [pc, #24]	; (80030d8 <Virtual_Com_Port_init+0x20>)
 80030c0:	2400      	movs	r4, #0
 80030c2:	681a      	ldr	r2, [r3, #0]

  /* Connect the device */
  PowerOn();
 80030c4:	4905      	ldr	r1, [pc, #20]	; (80030dc <Virtual_Com_Port_init+0x24>)

  /* Update the serial number string descriptor with the data from the unique
  ID*/
  Get_SerialNum();

  pInformation->Current_Configuration = 0;
 80030c6:	7294      	strb	r4, [r2, #10]

  /* Connect the device */
  PowerOn();
 80030c8:	4788      	blx	r1

  /* Perform basic device initialization operations */
  USB_SIL_Init();
 80030ca:	4805      	ldr	r0, [pc, #20]	; (80030e0 <Virtual_Com_Port_init+0x28>)
 80030cc:	4780      	blx	r0

  /* configure the USART to the default settings */
  //USART_Config_Default();

  bDeviceState = UNCONNECTED;
 80030ce:	4b05      	ldr	r3, [pc, #20]	; (80030e4 <Virtual_Com_Port_init+0x2c>)
 80030d0:	601c      	str	r4, [r3, #0]
}
 80030d2:	bd10      	pop	{r4, pc}
 80030d4:	080035f9 	.word	0x080035f9
 80030d8:	20001038 	.word	0x20001038
 80030dc:	080030e9 	.word	0x080030e9
 80030e0:	08004441 	.word	0x08004441
 80030e4:	20000294 	.word	0x20000294

080030e8 <PowerOn>:
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
RESULT PowerOn(void)
{
 80030e8:	b510      	push	{r4, lr}
  uint16_t wRegVal;

  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);
 80030ea:	2001      	movs	r0, #1
 80030ec:	4907      	ldr	r1, [pc, #28]	; (800310c <PowerOn+0x24>)
 80030ee:	4788      	blx	r1

  /*** CNTR_PWDN = 0 ***/
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);
 80030f0:	4b07      	ldr	r3, [pc, #28]	; (8003110 <PowerOn+0x28>)
 80030f2:	2401      	movs	r4, #1
 80030f4:	601c      	str	r4, [r3, #0]
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
  /*** Clear pending interrupts ***/
  _SetISTR(0);
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 80030f6:	4807      	ldr	r0, [pc, #28]	; (8003114 <PowerOn+0x2c>)

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
  /*** Clear pending interrupts ***/
  _SetISTR(0);
 80030f8:	4c07      	ldr	r4, [pc, #28]	; (8003118 <PowerOn+0x30>)
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
 80030fa:	2200      	movs	r2, #0
  /*** Clear pending interrupts ***/
  _SetISTR(0);
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 80030fc:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8003100:	8001      	strh	r1, [r0, #0]
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
 8003102:	601a      	str	r2, [r3, #0]
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
  _SetCNTR(wInterrupt_Mask);
  
  return USB_SUCCESS;
}
 8003104:	4610      	mov	r0, r2

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
  /*** Clear pending interrupts ***/
  _SetISTR(0);
 8003106:	6022      	str	r2, [r4, #0]
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
  _SetCNTR(wInterrupt_Mask);
 8003108:	6019      	str	r1, [r3, #0]
  
  return USB_SUCCESS;
}
 800310a:	bd10      	pop	{r4, pc}
 800310c:	080034c5 	.word	0x080034c5
 8003110:	40005c40 	.word	0x40005c40
 8003114:	2000103c 	.word	0x2000103c
 8003118:	40005c44 	.word	0x40005c44

0800311c <Suspend>:
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
void Suspend(void)
{
 800311c:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t savePWR_CR=0;
	/* suspend preparation */
	/* ... */
	
	/*Store CNTR value */
	wCNTR = _GetCNTR();  
 800311e:	4b45      	ldr	r3, [pc, #276]	; (8003234 <Suspend+0x118>)
void Suspend(void)
{
	uint32_t i =0;
	uint16_t wCNTR;
	uint32_t tmpreg = 0;
  __IO uint32_t savePWR_CR=0;
 8003120:	2400      	movs	r4, #0
	wCNTR = _GetCNTR();  

    /* This a sequence to apply a force RESET to handle a robustness case */
    
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 8003122:	4a45      	ldr	r2, [pc, #276]	; (8003238 <Suspend+0x11c>)
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
void Suspend(void)
{
 8003124:	b082      	sub	sp, #8
	uint32_t i =0;
	uint16_t wCNTR;
	uint32_t tmpreg = 0;
  __IO uint32_t savePWR_CR=0;
 8003126:	9401      	str	r4, [sp, #4]
	/* suspend preparation */
	/* ... */
	
	/*Store CNTR value */
	wCNTR = _GetCNTR();  
 8003128:	681c      	ldr	r4, [r3, #0]

    /* This a sequence to apply a force RESET to handle a robustness case */
    
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 800312a:	6810      	ldr	r0, [r2, #0]
 800312c:	4a43      	ldr	r2, [pc, #268]	; (800323c <Suspend+0x120>)
 800312e:	b285      	uxth	r5, r0
 8003130:	4e43      	ldr	r6, [pc, #268]	; (8003240 <Suspend+0x124>)
 8003132:	6015      	str	r5, [r2, #0]
 8003134:	6831      	ldr	r1, [r6, #0]
 8003136:	4d43      	ldr	r5, [pc, #268]	; (8003244 <Suspend+0x128>)
 8003138:	b288      	uxth	r0, r1
 800313a:	6050      	str	r0, [r2, #4]
 800313c:	682e      	ldr	r6, [r5, #0]
 800313e:	4842      	ldr	r0, [pc, #264]	; (8003248 <Suspend+0x12c>)
 8003140:	b2b1      	uxth	r1, r6
 8003142:	6091      	str	r1, [r2, #8]
 8003144:	6805      	ldr	r5, [r0, #0]
 8003146:	4941      	ldr	r1, [pc, #260]	; (800324c <Suspend+0x130>)
 8003148:	b2ae      	uxth	r6, r5
 800314a:	60d6      	str	r6, [r2, #12]
 800314c:	6808      	ldr	r0, [r1, #0]
 800314e:	4e40      	ldr	r6, [pc, #256]	; (8003250 <Suspend+0x134>)
 8003150:	b285      	uxth	r5, r0
 8003152:	6115      	str	r5, [r2, #16]
 8003154:	6831      	ldr	r1, [r6, #0]
 8003156:	4d3f      	ldr	r5, [pc, #252]	; (8003254 <Suspend+0x138>)
 8003158:	b288      	uxth	r0, r1
 800315a:	6150      	str	r0, [r2, #20]
 800315c:	682e      	ldr	r6, [r5, #0]
 800315e:	483e      	ldr	r0, [pc, #248]	; (8003258 <Suspend+0x13c>)
 8003160:	b2b1      	uxth	r1, r6
 8003162:	6191      	str	r1, [r2, #24]
  __IO uint32_t savePWR_CR=0;
	/* suspend preparation */
	/* ... */
	
	/*Store CNTR value */
	wCNTR = _GetCNTR();  
 8003164:	b2a5      	uxth	r5, r4

    /* This a sequence to apply a force RESET to handle a robustness case */
    
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 8003166:	6806      	ldr	r6, [r0, #0]
	
	/* unmask RESET flag */
	wCNTR|=CNTR_RESETM;
 8003168:	f445 6580 	orr.w	r5, r5, #1024	; 0x400
	_SetCNTR(wCNTR);
	
	/*apply FRES */
	wCNTR|=CNTR_FRES;
 800316c:	f045 0101 	orr.w	r1, r5, #1
	_SetCNTR(wCNTR);
	
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
 8003170:	f64f 74fe 	movw	r4, #65534	; 0xfffe
	wCNTR = _GetCNTR();  

    /* This a sequence to apply a force RESET to handle a robustness case */
    
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 8003174:	b2b6      	uxth	r6, r6
	/*apply FRES */
	wCNTR|=CNTR_FRES;
	_SetCNTR(wCNTR);
	
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
 8003176:	ea01 0404 	and.w	r4, r1, r4
	_SetCNTR(wCNTR);
	
	/*poll for RESET flag in ISTR*/
	while((_GetISTR()&ISTR_RESET) == 0);
 800317a:	4838      	ldr	r0, [pc, #224]	; (800325c <Suspend+0x140>)
	wCNTR = _GetCNTR();  

    /* This a sequence to apply a force RESET to handle a robustness case */
    
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 800317c:	61d6      	str	r6, [r2, #28]
	
	/* unmask RESET flag */
	wCNTR|=CNTR_RESETM;
	_SetCNTR(wCNTR);
 800317e:	601d      	str	r5, [r3, #0]
	
	/*apply FRES */
	wCNTR|=CNTR_FRES;
	_SetCNTR(wCNTR);
 8003180:	6019      	str	r1, [r3, #0]
	
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
	_SetCNTR(wCNTR);
 8003182:	601c      	str	r4, [r3, #0]
	
	/*poll for RESET flag in ISTR*/
	while((_GetISTR()&ISTR_RESET) == 0);
 8003184:	6803      	ldr	r3, [r0, #0]
 8003186:	4935      	ldr	r1, [pc, #212]	; (800325c <Suspend+0x140>)
 8003188:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800318c:	d0fa      	beq.n	8003184 <Suspend+0x68>
	
	/* clear RESET flag in ISTR */
	_SetISTR((uint16_t)CLR_RESET);
 800318e:	f64f 30ff 	movw	r0, #64511	; 0xfbff
 8003192:	6008      	str	r0, [r1, #0]
	
	/*restore Enpoints*/
	for (i=0;i<8;i++)
	_SetENDPOINT(i, EP[i]);
 8003194:	6813      	ldr	r3, [r2, #0]
	
	/* Now it is safe to enter macrocell in suspend mode */
	wCNTR |= CNTR_FSUSP;
	_SetCNTR(wCNTR);
 8003196:	f044 0408 	orr.w	r4, r4, #8
	/* clear RESET flag in ISTR */
	_SetISTR((uint16_t)CLR_RESET);
	
	/*restore Enpoints*/
	for (i=0;i<8;i++)
	_SetENDPOINT(i, EP[i]);
 800319a:	b298      	uxth	r0, r3
 800319c:	4b26      	ldr	r3, [pc, #152]	; (8003238 <Suspend+0x11c>)
 800319e:	6018      	str	r0, [r3, #0]
 80031a0:	6850      	ldr	r0, [r2, #4]
 80031a2:	b280      	uxth	r0, r0
 80031a4:	6058      	str	r0, [r3, #4]
 80031a6:	6890      	ldr	r0, [r2, #8]
 80031a8:	b280      	uxth	r0, r0
 80031aa:	6098      	str	r0, [r3, #8]
 80031ac:	68d0      	ldr	r0, [r2, #12]
 80031ae:	b280      	uxth	r0, r0
 80031b0:	60d8      	str	r0, [r3, #12]
 80031b2:	6910      	ldr	r0, [r2, #16]
 80031b4:	b280      	uxth	r0, r0
 80031b6:	6118      	str	r0, [r3, #16]
 80031b8:	6950      	ldr	r0, [r2, #20]
 80031ba:	b280      	uxth	r0, r0
 80031bc:	6158      	str	r0, [r3, #20]
 80031be:	6990      	ldr	r0, [r2, #24]
 80031c0:	b280      	uxth	r0, r0
 80031c2:	6198      	str	r0, [r3, #24]
 80031c4:	69d2      	ldr	r2, [r2, #28]
	
	/* Now it is safe to enter macrocell in suspend mode */
	wCNTR |= CNTR_FSUSP;
	_SetCNTR(wCNTR);
 80031c6:	3340      	adds	r3, #64	; 0x40
	/* clear RESET flag in ISTR */
	_SetISTR((uint16_t)CLR_RESET);
	
	/*restore Enpoints*/
	for (i=0;i<8;i++)
	_SetENDPOINT(i, EP[i]);
 80031c8:	b290      	uxth	r0, r2
 80031ca:	4a23      	ldr	r2, [pc, #140]	; (8003258 <Suspend+0x13c>)
 80031cc:	6010      	str	r0, [r2, #0]
	
	/* Now it is safe to enter macrocell in suspend mode */
	wCNTR |= CNTR_FSUSP;
	_SetCNTR(wCNTR);
 80031ce:	601c      	str	r4, [r3, #0]
	
	/* force low-power mode in the macrocell */
	wCNTR = _GetCNTR();
 80031d0:	6818      	ldr	r0, [r3, #0]
	wCNTR |= CNTR_LPMODE;
	_SetCNTR(wCNTR);
	
	/*prepare entry in low power mode (STOP mode)*/
	/* Select the regulator state in STOP mode*/
	savePWR_CR = REG_PWR_CR;
 80031d2:	f502 529e 	add.w	r2, r2, #5056	; 0x13c0
	/* Now it is safe to enter macrocell in suspend mode */
	wCNTR |= CNTR_FSUSP;
	_SetCNTR(wCNTR);
	
	/* force low-power mode in the macrocell */
	wCNTR = _GetCNTR();
 80031d6:	fa1f fc80 	uxth.w	ip, r0
	wCNTR |= CNTR_LPMODE;
	_SetCNTR(wCNTR);
 80031da:	f04c 0404 	orr.w	r4, ip, #4
 80031de:	601c      	str	r4, [r3, #0]
	
	/*prepare entry in low power mode (STOP mode)*/
	/* Select the regulator state in STOP mode*/
	savePWR_CR = REG_PWR_CR;
 80031e0:	3224      	adds	r2, #36	; 0x24
 80031e2:	6810      	ldr	r0, [r2, #0]
	REG_PWR_CR = tmpreg;
	/* Set SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)
        SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
#else
		REG_SCB_SCR |= SCB_SCR_SLEEPDEEP;       
 80031e4:	4c1e      	ldr	r4, [pc, #120]	; (8003260 <Suspend+0x144>)
	wCNTR |= CNTR_LPMODE;
	_SetCNTR(wCNTR);
	
	/*prepare entry in low power mode (STOP mode)*/
	/* Select the regulator state in STOP mode*/
	savePWR_CR = REG_PWR_CR;
 80031e6:	9001      	str	r0, [sp, #4]
	
	tmpreg = REG_PWR_CR;
 80031e8:	6810      	ldr	r0, [r2, #0]
	/* Clear PDDS and LPDS bits */
	tmpreg &= ((uint32_t)0xFFFFFFFC);
 80031ea:	f020 0c03 	bic.w	ip, r0, #3
	/* Set LPDS bit according to PWR_Regulator value */
	tmpreg |= PWR_Regulator_LowPower;
 80031ee:	f04c 0001 	orr.w	r0, ip, #1
	/* Store the new value */
	REG_PWR_CR = tmpreg;
 80031f2:	6010      	str	r0, [r2, #0]
	/* Set SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)
        SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
#else
		REG_SCB_SCR |= SCB_SCR_SLEEPDEEP;       
 80031f4:	6820      	ldr	r0, [r4, #0]
 80031f6:	f040 0004 	orr.w	r0, r0, #4
 80031fa:	6020      	str	r0, [r4, #0]
#endif
	
	/* enter system in STOP mode, only when wakeup flag in not set */
	if((_GetISTR()&ISTR_WKUP)==0)
 80031fc:	6808      	ldr	r0, [r1, #0]
 80031fe:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 8003202:	d010      	beq.n	8003226 <Suspend+0x10a>
#endif
	}
	else
	{
		/* Clear Wakeup flag */
		_SetISTR(CLR_WKUP);
 8003204:	f64e 70ff 	movw	r0, #61439	; 0xefff
 8003208:	6008      	str	r0, [r1, #0]
		/* clear FSUSP to abort entry in suspend mode  */
        wCNTR = _GetCNTR();
 800320a:	6819      	ldr	r1, [r3, #0]
        wCNTR&=~CNTR_FSUSP;
        _SetCNTR(wCNTR);
 800320c:	f64f 7cf7 	movw	ip, #65527	; 0xfff7
 8003210:	ea01 000c 	and.w	r0, r1, ip
 8003214:	6018      	str	r0, [r3, #0]
		
		/*restore sleep mode configuration */ 
		/* restore Power regulator config in sleep mode*/
		REG_PWR_CR = savePWR_CR;
 8003216:	9b01      	ldr	r3, [sp, #4]
 8003218:	6013      	str	r3, [r2, #0]
		
		/* Reset SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)		
                SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
#else
                REG_SCB_SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP);
 800321a:	6821      	ldr	r1, [r4, #0]
 800321c:	f021 0004 	bic.w	r0, r1, #4
 8003220:	6020      	str	r0, [r4, #0]
#endif
    }
}
 8003222:	b002      	add	sp, #8
 8003224:	bd70      	pop	{r4, r5, r6, pc}
#endif
	
	/* enter system in STOP mode, only when wakeup flag in not set */
	if((_GetISTR()&ISTR_WKUP)==0)
	{
		__WFI();
 8003226:	4b0f      	ldr	r3, [pc, #60]	; (8003264 <Suspend+0x148>)
 8003228:	4798      	blx	r3
		/* Reset SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)
                SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk); 
#else
                REG_SCB_SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP); 
 800322a:	6822      	ldr	r2, [r4, #0]
 800322c:	f022 0104 	bic.w	r1, r2, #4
 8003230:	6021      	str	r1, [r4, #0]
 8003232:	e7f6      	b.n	8003222 <Suspend+0x106>
 8003234:	40005c40 	.word	0x40005c40
 8003238:	40005c00 	.word	0x40005c00
 800323c:	200007e8 	.word	0x200007e8
 8003240:	40005c04 	.word	0x40005c04
 8003244:	40005c08 	.word	0x40005c08
 8003248:	40005c0c 	.word	0x40005c0c
 800324c:	40005c10 	.word	0x40005c10
 8003250:	40005c14 	.word	0x40005c14
 8003254:	40005c18 	.word	0x40005c18
 8003258:	40005c1c 	.word	0x40005c1c
 800325c:	40005c44 	.word	0x40005c44
 8003260:	e000ed10 	.word	0xe000ed10
 8003264:	08003631 	.word	0x08003631

08003268 <Resume_Init>:
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
void Resume_Init(void)
{
 8003268:	b510      	push	{r4, lr}
  /* ------------------ ONLY WITH BUS-POWERED DEVICES ---------------------- */
  /* restart the clocks */
  /* ...  */

  /* CNTR_LPMODE = 0 */
  wCNTR = _GetCNTR();
 800326a:	4c06      	ldr	r4, [pc, #24]	; (8003284 <Resume_Init+0x1c>)
  wCNTR &= (~CNTR_LPMODE);
  _SetCNTR(wCNTR);    
 800326c:	f64f 7cfb 	movw	ip, #65531	; 0xfffb
  /* ------------------ ONLY WITH BUS-POWERED DEVICES ---------------------- */
  /* restart the clocks */
  /* ...  */

  /* CNTR_LPMODE = 0 */
  wCNTR = _GetCNTR();
 8003270:	6822      	ldr	r2, [r4, #0]
  wCNTR &= (~CNTR_LPMODE);
  _SetCNTR(wCNTR);    
  
  /* restore full power */
  /* ... on connected devices */
  Leave_LowPowerMode();
 8003272:	4805      	ldr	r0, [pc, #20]	; (8003288 <Resume_Init+0x20>)
  /* ...  */

  /* CNTR_LPMODE = 0 */
  wCNTR = _GetCNTR();
  wCNTR &= (~CNTR_LPMODE);
  _SetCNTR(wCNTR);    
 8003274:	ea02 010c 	and.w	r1, r2, ip
 8003278:	6021      	str	r1, [r4, #0]
  
  /* restore full power */
  /* ... on connected devices */
  Leave_LowPowerMode();
 800327a:	4780      	blx	r0

  /* reset FSUSP bit */
  _SetCNTR(IMR_MSK);
 800327c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003280:	6023      	str	r3, [r4, #0]

  /* reverse suspend preparation */
  /* ... */ 

}
 8003282:	bd10      	pop	{r4, pc}
 8003284:	40005c40 	.word	0x40005c40
 8003288:	08003411 	.word	0x08003411

0800328c <Resume>:
*                  decrementing of the ESOF counter in different states.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Resume(RESUME_STATE eResumeSetVal)
{
 800328c:	b510      	push	{r4, lr}
 800328e:	4c28      	ldr	r4, [pc, #160]	; (8003330 <Resume+0xa4>)
  uint16_t wCNTR;

  if (eResumeSetVal != RESUME_ESOF)
 8003290:	2807      	cmp	r0, #7
    ResumeS.eState = eResumeSetVal;
 8003292:	bf18      	it	ne
 8003294:	7020      	strbne	r0, [r4, #0]
  switch (ResumeS.eState)
 8003296:	7823      	ldrb	r3, [r4, #0]
 8003298:	2b05      	cmp	r3, #5
 800329a:	d816      	bhi.n	80032ca <Resume+0x3e>
 800329c:	e8df f003 	tbb	[pc, r3]
 80032a0:	2c271f18 	.word	0x2c271f18
 80032a4:	0336      	.short	0x0336
      _SetCNTR(wCNTR);
      ResumeS.eState = RESUME_ON;
      ResumeS.bESOFcnt = 10;
      break;
    case RESUME_ON:    
      ResumeS.bESOFcnt--;
 80032a6:	7862      	ldrb	r2, [r4, #1]
 80032a8:	1e51      	subs	r1, r2, #1
 80032aa:	7061      	strb	r1, [r4, #1]
      if (ResumeS.bESOFcnt == 0)
 80032ac:	7863      	ldrb	r3, [r4, #1]
 80032ae:	b973      	cbnz	r3, 80032ce <Resume+0x42>
      {
        wCNTR = _GetCNTR();
 80032b0:	4920      	ldr	r1, [pc, #128]	; (8003334 <Resume+0xa8>)
        wCNTR &= (~CNTR_RESUME);
        _SetCNTR(wCNTR);
 80032b2:	f64f 7cef 	movw	ip, #65519	; 0xffef
      break;
    case RESUME_ON:    
      ResumeS.bESOFcnt--;
      if (ResumeS.bESOFcnt == 0)
      {
        wCNTR = _GetCNTR();
 80032b6:	680a      	ldr	r2, [r1, #0]
        wCNTR &= (~CNTR_RESUME);
        _SetCNTR(wCNTR);
 80032b8:	ea02 000c 	and.w	r0, r2, ip
 80032bc:	6008      	str	r0, [r1, #0]
        ResumeS.eState = RESUME_OFF;
 80032be:	4a1c      	ldr	r2, [pc, #112]	; (8003330 <Resume+0xa4>)
        remotewakeupon = 0;
 80032c0:	481d      	ldr	r0, [pc, #116]	; (8003338 <Resume+0xac>)
      if (ResumeS.bESOFcnt == 0)
      {
        wCNTR = _GetCNTR();
        wCNTR &= (~CNTR_RESUME);
        _SetCNTR(wCNTR);
        ResumeS.eState = RESUME_OFF;
 80032c2:	2106      	movs	r1, #6
 80032c4:	7011      	strb	r1, [r2, #0]
        remotewakeupon = 0;
 80032c6:	6003      	str	r3, [r0, #0]
 80032c8:	bd10      	pop	{r4, pc}
      }
      break;
    case RESUME_OFF:
    case RESUME_ESOF:
    default:
      ResumeS.eState = RESUME_OFF;
 80032ca:	2306      	movs	r3, #6
 80032cc:	7023      	strb	r3, [r4, #0]
 80032ce:	bd10      	pop	{r4, pc}
  if (eResumeSetVal != RESUME_ESOF)
    ResumeS.eState = eResumeSetVal;
  switch (ResumeS.eState)
  {
    case RESUME_EXTERNAL:
      if (remotewakeupon ==0)
 80032d0:	4919      	ldr	r1, [pc, #100]	; (8003338 <Resume+0xac>)
 80032d2:	6808      	ldr	r0, [r1, #0]
 80032d4:	2800      	cmp	r0, #0
 80032d6:	d025      	beq.n	8003324 <Resume+0x98>
        Resume_Init();
        ResumeS.eState = RESUME_OFF;
      }
      else /* RESUME detected during the RemoteWAkeup signalling => keep RemoteWakeup handling*/
      {
        ResumeS.eState = RESUME_ON;
 80032d8:	2005      	movs	r0, #5
 80032da:	7020      	strb	r0, [r4, #0]
 80032dc:	bd10      	pop	{r4, pc}
      }
      break;
    case RESUME_INTERNAL:
      Resume_Init();
 80032de:	4817      	ldr	r0, [pc, #92]	; (800333c <Resume+0xb0>)
 80032e0:	4780      	blx	r0
      ResumeS.eState = RESUME_START;
      remotewakeupon = 1;
 80032e2:	4a15      	ldr	r2, [pc, #84]	; (8003338 <Resume+0xac>)
        ResumeS.eState = RESUME_ON;
      }
      break;
    case RESUME_INTERNAL:
      Resume_Init();
      ResumeS.eState = RESUME_START;
 80032e4:	2304      	movs	r3, #4
      remotewakeupon = 1;
 80032e6:	2101      	movs	r1, #1
        ResumeS.eState = RESUME_ON;
      }
      break;
    case RESUME_INTERNAL:
      Resume_Init();
      ResumeS.eState = RESUME_START;
 80032e8:	7023      	strb	r3, [r4, #0]
      remotewakeupon = 1;
 80032ea:	6011      	str	r1, [r2, #0]
      break;
 80032ec:	bd10      	pop	{r4, pc}
    case RESUME_LATER:
      ResumeS.bESOFcnt = 2;
 80032ee:	2202      	movs	r2, #2
      ResumeS.eState = RESUME_WAIT;
 80032f0:	2103      	movs	r1, #3
      Resume_Init();
      ResumeS.eState = RESUME_START;
      remotewakeupon = 1;
      break;
    case RESUME_LATER:
      ResumeS.bESOFcnt = 2;
 80032f2:	7062      	strb	r2, [r4, #1]
      ResumeS.eState = RESUME_WAIT;
 80032f4:	7021      	strb	r1, [r4, #0]
      break;
 80032f6:	bd10      	pop	{r4, pc}
    case RESUME_WAIT:
      ResumeS.bESOFcnt--;
 80032f8:	7861      	ldrb	r1, [r4, #1]
 80032fa:	1e48      	subs	r0, r1, #1
 80032fc:	7060      	strb	r0, [r4, #1]
      if (ResumeS.bESOFcnt == 0)
 80032fe:	7863      	ldrb	r3, [r4, #1]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d1e4      	bne.n	80032ce <Resume+0x42>
        ResumeS.eState = RESUME_START;
 8003304:	4b0a      	ldr	r3, [pc, #40]	; (8003330 <Resume+0xa4>)
 8003306:	2204      	movs	r2, #4
 8003308:	701a      	strb	r2, [r3, #0]
 800330a:	bd10      	pop	{r4, pc}
      break;
    case RESUME_START:
      wCNTR = _GetCNTR();
 800330c:	4b09      	ldr	r3, [pc, #36]	; (8003334 <Resume+0xa8>)
      wCNTR |= CNTR_RESUME;
      _SetCNTR(wCNTR);
      ResumeS.eState = RESUME_ON;
 800330e:	2105      	movs	r1, #5
      ResumeS.bESOFcnt--;
      if (ResumeS.bESOFcnt == 0)
        ResumeS.eState = RESUME_START;
      break;
    case RESUME_START:
      wCNTR = _GetCNTR();
 8003310:	6818      	ldr	r0, [r3, #0]
 8003312:	fa1f fc80 	uxth.w	ip, r0
      wCNTR |= CNTR_RESUME;
      _SetCNTR(wCNTR);
 8003316:	f04c 0210 	orr.w	r2, ip, #16
      ResumeS.eState = RESUME_ON;
      ResumeS.bESOFcnt = 10;
 800331a:	200a      	movs	r0, #10
        ResumeS.eState = RESUME_START;
      break;
    case RESUME_START:
      wCNTR = _GetCNTR();
      wCNTR |= CNTR_RESUME;
      _SetCNTR(wCNTR);
 800331c:	601a      	str	r2, [r3, #0]
      ResumeS.eState = RESUME_ON;
 800331e:	7021      	strb	r1, [r4, #0]
      ResumeS.bESOFcnt = 10;
 8003320:	7060      	strb	r0, [r4, #1]
      break;
 8003322:	bd10      	pop	{r4, pc}
  switch (ResumeS.eState)
  {
    case RESUME_EXTERNAL:
      if (remotewakeupon ==0)
      {
        Resume_Init();
 8003324:	4b05      	ldr	r3, [pc, #20]	; (800333c <Resume+0xb0>)
 8003326:	4798      	blx	r3
        ResumeS.eState = RESUME_OFF;
 8003328:	2206      	movs	r2, #6
 800332a:	7022      	strb	r2, [r4, #0]
 800332c:	bd10      	pop	{r4, pc}
 800332e:	bf00      	nop
 8003330:	200007e4 	.word	0x200007e4
 8003334:	40005c40 	.word	0x40005c40
 8003338:	2000029c 	.word	0x2000029c
 800333c:	08003269 	.word	0x08003269

08003340 <USBWakeUp_IRQHandler>:


void USBWakeUp_IRQHandler(void)
{
	//EXTI_ClearITPendingBit(EXTI_Line18);
	REG_EXTI_PR = (1 << 18 );
 8003340:	4b02      	ldr	r3, [pc, #8]	; (800334c <USBWakeUp_IRQHandler+0xc>)
 8003342:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8003346:	601a      	str	r2, [r3, #0]
	
	//printf("wake");
}
 8003348:	4770      	bx	lr
 800334a:	bf00      	nop
 800334c:	40010414 	.word	0x40010414

08003350 <IntToUnicode>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
 8003350:	b470      	push	{r4, r5, r6}
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 8003352:	2a00      	cmp	r2, #0
 8003354:	d030      	beq.n	80033b8 <IntToUnicode+0x68>
* Description    : Convert Hex 32Bits value into char.
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
 8003356:	1e53      	subs	r3, r2, #1
 8003358:	b2da      	uxtb	r2, r3
 800335a:	1c56      	adds	r6, r2, #1
 800335c:	0076      	lsls	r6, r6, #1
 800335e:	2400      	movs	r4, #0
 8003360:	f016 0f02 	tst.w	r6, #2
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8003364:	4623      	mov	r3, r4
 8003366:	d11b      	bne.n	80033a0 <IntToUnicode+0x50>
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 8003368:	0f03      	lsrs	r3, r0, #28
 800336a:	2b09      	cmp	r3, #9
 800336c:	d929      	bls.n	80033c2 <IntToUnicode+0x72>
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 800336e:	3337      	adds	r3, #55	; 0x37
 8003370:	700b      	strb	r3, [r1, #0]
    }
    
    value = value << 4;
 8003372:	0100      	lsls	r0, r0, #4
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 8003374:	0f02      	lsrs	r2, r0, #28
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8003376:	2302      	movs	r3, #2
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 8003378:	2a09      	cmp	r2, #9
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 800337a:	704c      	strb	r4, [r1, #1]
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 800337c:	d813      	bhi.n	80033a6 <IntToUnicode+0x56>
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
 800337e:	3230      	adds	r2, #48	; 0x30
 8003380:	54ca      	strb	r2, [r1, r3]
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
 8003382:	0100      	lsls	r0, r0, #4
* Description    : Convert Hex 32Bits value into char.
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
 8003384:	18cd      	adds	r5, r1, r3
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8003386:	3302      	adds	r3, #2
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 8003388:	0f02      	lsrs	r2, r0, #28
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 800338a:	42b3      	cmp	r3, r6
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 800338c:	706c      	strb	r4, [r5, #1]
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 800338e:	d013      	beq.n	80033b8 <IntToUnicode+0x68>
  {
    if( ((value >> 28)) < 0xA )
 8003390:	2a09      	cmp	r2, #9
 8003392:	d813      	bhi.n	80033bc <IntToUnicode+0x6c>
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
 8003394:	3230      	adds	r2, #48	; 0x30
 8003396:	54ca      	strb	r2, [r1, r3]
* Description    : Convert Hex 32Bits value into char.
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
 8003398:	18cd      	adds	r5, r1, r3
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 800339a:	706c      	strb	r4, [r5, #1]
 800339c:	3302      	adds	r3, #2
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
 800339e:	0100      	lsls	r0, r0, #4
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 80033a0:	0f02      	lsrs	r2, r0, #28
 80033a2:	2a09      	cmp	r2, #9
 80033a4:	d9eb      	bls.n	800337e <IntToUnicode+0x2e>
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 80033a6:	3237      	adds	r2, #55	; 0x37
 80033a8:	54ca      	strb	r2, [r1, r3]
    }
    
    value = value << 4;
 80033aa:	0100      	lsls	r0, r0, #4
* Description    : Convert Hex 32Bits value into char.
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
 80033ac:	18cd      	adds	r5, r1, r3
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 80033ae:	3302      	adds	r3, #2
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
 80033b0:	0f02      	lsrs	r2, r0, #28
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 80033b2:	42b3      	cmp	r3, r6
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 80033b4:	706c      	strb	r4, [r5, #1]
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 80033b6:	d1eb      	bne.n	8003390 <IntToUnicode+0x40>
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
  }
}
 80033b8:	bc70      	pop	{r4, r5, r6}
 80033ba:	4770      	bx	lr
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 80033bc:	3237      	adds	r2, #55	; 0x37
 80033be:	54ca      	strb	r2, [r1, r3]
 80033c0:	e7ea      	b.n	8003398 <IntToUnicode+0x48>
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
 80033c2:	3330      	adds	r3, #48	; 0x30
 80033c4:	700b      	strb	r3, [r1, #0]
 80033c6:	e7d4      	b.n	8003372 <IntToUnicode+0x22>

080033c8 <USB_LP_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void USB_LP_IRQHandler(void)
{
 80033c8:	b508      	push	{r3, lr}
	//printf("USB\n");	
	USB_Istr();
 80033ca:	4b01      	ldr	r3, [pc, #4]	; (80033d0 <USB_LP_IRQHandler+0x8>)
 80033cc:	4798      	blx	r3
}
 80033ce:	bd08      	pop	{r3, pc}
 80033d0:	08002c4d 	.word	0x08002c4d

080033d4 <Set_System>:
*******************************************************************************/
void Set_System(void)
{  	
	#if HW_USE_USB_SMARTROBOT_BD == 1
	//-- PC.13
	REG_GPIOC_CRH &= ~(0x0F << (20));	// Clear
 80033d4:	4b05      	ldr	r3, [pc, #20]	; (80033ec <Set_System+0x18>)
 80033d6:	6818      	ldr	r0, [r3, #0]
 80033d8:	f420 0270 	bic.w	r2, r0, #15728640	; 0xf00000
 80033dc:	601a      	str	r2, [r3, #0]
	REG_GPIOC_CRH |=  (0x02 << (20));	// MODE, PC.13 Output mode, max speed 2Mhz
 80033de:	6819      	ldr	r1, [r3, #0]
 80033e0:	f441 1000 	orr.w	r0, r1, #2097152	; 0x200000
 80033e4:	6018      	str	r0, [r3, #0]
	REG_GPIOC_CRH |=  (0x00 << (22));	// CNF,  PC.13 General purpose output push-pul
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	601a      	str	r2, [r3, #0]
	//-- PC.2
	REG_GPIOC_CRL &= ~(0x0F << ( 8));	// Clear
	REG_GPIOC_CRL |=  (0x02 << ( 8));	// MODE, PC.2 Output mode, max speed 2Mhz
	REG_GPIOC_CRL |=  (0x00 << (10));	// CNF,  PC.2 General purpose output push-pul
	#endif
}
 80033ea:	4770      	bx	lr
 80033ec:	40011004 	.word	0x40011004

080033f0 <Set_USBClock>:
*******************************************************************************/
void Set_USBClock(void)
{
	//-- USB 72M * 2 / 3 = 48Mhz
	//
	CLR_BIT( REG_RCC_CFGR, 22 );	
 80033f0:	4a05      	ldr	r2, [pc, #20]	; (8003408 <Set_USBClock+0x18>)
	
	//-- USB Clock Enable 
	//
	SET_BIT( REG_RCC_APB1ENR, 23 );
 80033f2:	4b06      	ldr	r3, [pc, #24]	; (800340c <Set_USBClock+0x1c>)
*******************************************************************************/
void Set_USBClock(void)
{
	//-- USB 72M * 2 / 3 = 48Mhz
	//
	CLR_BIT( REG_RCC_CFGR, 22 );	
 80033f4:	6810      	ldr	r0, [r2, #0]
 80033f6:	f420 0180 	bic.w	r1, r0, #4194304	; 0x400000
 80033fa:	6011      	str	r1, [r2, #0]
	
	//-- USB Clock Enable 
	//
	SET_BIT( REG_RCC_APB1ENR, 23 );
 80033fc:	6818      	ldr	r0, [r3, #0]
 80033fe:	f440 0200 	orr.w	r2, r0, #8388608	; 0x800000
 8003402:	601a      	str	r2, [r3, #0]
}
 8003404:	4770      	bx	lr
 8003406:	bf00      	nop
 8003408:	40021004 	.word	0x40021004
 800340c:	4002101c 	.word	0x4002101c

08003410 <Leave_LowPowerMode>:
void Leave_LowPowerMode(void)
{
  DEVICE_INFO *pInfo = &Device_Info;

  /* Set the device state to the correct state */
  if (pInfo->Current_Configuration != 0)
 8003410:	4805      	ldr	r0, [pc, #20]	; (8003428 <Leave_LowPowerMode+0x18>)
 8003412:	7a83      	ldrb	r3, [r0, #10]
 8003414:	b91b      	cbnz	r3, 800341e <Leave_LowPowerMode+0xe>
    /* Device configured */
    bDeviceState = CONFIGURED;
  }
  else
  {
    bDeviceState = ATTACHED;
 8003416:	4b05      	ldr	r3, [pc, #20]	; (800342c <Leave_LowPowerMode+0x1c>)
 8003418:	2001      	movs	r0, #1
 800341a:	6018      	str	r0, [r3, #0]
 800341c:	4770      	bx	lr

  /* Set the device state to the correct state */
  if (pInfo->Current_Configuration != 0)
  {
    /* Device configured */
    bDeviceState = CONFIGURED;
 800341e:	4903      	ldr	r1, [pc, #12]	; (800342c <Leave_LowPowerMode+0x1c>)
 8003420:	2205      	movs	r2, #5
 8003422:	600a      	str	r2, [r1, #0]
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop
 8003428:	20001018 	.word	0x20001018
 800342c:	20000294 	.word	0x20000294

08003430 <USB_Interrupts_Config>:
void USB_Interrupts_Config(void)
{

	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
 8003430:	4a1b      	ldr	r2, [pc, #108]	; (80034a0 <USB_Interrupts_Config+0x70>)
* Description    : Configures the USB interrupts
* Input          : None.
* Return         : None.
*******************************************************************************/
void USB_Interrupts_Config(void)
{
 8003432:	b538      	push	{r3, r4, r5, lr}

	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
	
	CLR_BIT( REG_EXTI_IMR,  18 );
 8003434:	4b1b      	ldr	r3, [pc, #108]	; (80034a4 <USB_Interrupts_Config+0x74>)
void USB_Interrupts_Config(void)
{

	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
 8003436:	f44f 2580 	mov.w	r5, #262144	; 0x40000
 800343a:	6015      	str	r5, [r2, #0]
	
	CLR_BIT( REG_EXTI_IMR,  18 );
 800343c:	6819      	ldr	r1, [r3, #0]
 800343e:	f421 2480 	bic.w	r4, r1, #262144	; 0x40000
 8003442:	601c      	str	r4, [r3, #0]
	CLR_BIT( REG_EXTI_EMR,  18 );
 8003444:	f852 0c10 	ldr.w	r0, [r2, #-16]
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
 8003448:	4c17      	ldr	r4, [pc, #92]	; (80034a8 <USB_Interrupts_Config+0x78>)
	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
	
	CLR_BIT( REG_EXTI_IMR,  18 );
	CLR_BIT( REG_EXTI_EMR,  18 );
 800344a:	f420 2580 	bic.w	r5, r0, #262144	; 0x40000
 800344e:	f842 5c10 	str.w	r5, [r2, #-16]
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
 8003452:	6821      	ldr	r1, [r4, #0]
 8003454:	f441 2080 	orr.w	r0, r1, #262144	; 0x40000
 8003458:	6020      	str	r0, [r4, #0]
	CLR_BIT( REG_EXTI_FTSR, 18 );
 800345a:	f852 5c08 	ldr.w	r5, [r2, #-8]
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
 800345e:	2090      	movs	r0, #144	; 0x90
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
	
	CLR_BIT( REG_EXTI_IMR,  18 );
	CLR_BIT( REG_EXTI_EMR,  18 );
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
	CLR_BIT( REG_EXTI_FTSR, 18 );
 8003460:	f425 2180 	bic.w	r1, r5, #262144	; 0x40000
 8003464:	f842 1c08 	str.w	r1, [r2, #-8]
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable
 8003468:	681c      	ldr	r4, [r3, #0]

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
 800346a:	4910      	ldr	r1, [pc, #64]	; (80034ac <USB_Interrupts_Config+0x7c>)
	
	CLR_BIT( REG_EXTI_IMR,  18 );
	CLR_BIT( REG_EXTI_EMR,  18 );
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
	CLR_BIT( REG_EXTI_FTSR, 18 );
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable
 800346c:	f444 2580 	orr.w	r5, r4, #262144	; 0x40000
 8003470:	601d      	str	r5, [r3, #0]

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
 8003472:	2200      	movs	r2, #0
 8003474:	4c0e      	ldr	r4, [pc, #56]	; (80034b0 <USB_Interrupts_Config+0x80>)
 8003476:	47a0      	blx	r4
	SET_BIT( REG_NVIC_ISER( 20/32 ), 20%32 );	// NVIC 20번 USB_LP 인터럽트 활성화 
 8003478:	4b0e      	ldr	r3, [pc, #56]	; (80034b4 <USB_Interrupts_Config+0x84>)
	
	Hw_ISR_SetIRQFuncByAddr( 0x00E8, (u32)USBWakeUp_IRQHandler, 0 );
 800347a:	20e8      	movs	r0, #232	; 0xe8
	CLR_BIT( REG_EXTI_FTSR, 18 );
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
	SET_BIT( REG_NVIC_ISER( 20/32 ), 20%32 );	// NVIC 20번 USB_LP 인터럽트 활성화 
 800347c:	681d      	ldr	r5, [r3, #0]
	
	Hw_ISR_SetIRQFuncByAddr( 0x00E8, (u32)USBWakeUp_IRQHandler, 0 );
 800347e:	490e      	ldr	r1, [pc, #56]	; (80034b8 <USB_Interrupts_Config+0x88>)
	CLR_BIT( REG_EXTI_FTSR, 18 );
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
	SET_BIT( REG_NVIC_ISER( 20/32 ), 20%32 );	// NVIC 20번 USB_LP 인터럽트 활성화 
 8003480:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
	
	Hw_ISR_SetIRQFuncByAddr( 0x00E8, (u32)USBWakeUp_IRQHandler, 0 );
 8003484:	2200      	movs	r2, #0
	CLR_BIT( REG_EXTI_FTSR, 18 );
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
	SET_BIT( REG_NVIC_ISER( 20/32 ), 20%32 );	// NVIC 20번 USB_LP 인터럽트 활성화 
 8003486:	601d      	str	r5, [r3, #0]
	
	Hw_ISR_SetIRQFuncByAddr( 0x00E8, (u32)USBWakeUp_IRQHandler, 0 );
 8003488:	47a0      	blx	r4
	SET_BIT( REG_NVIC_ISER( 42/32 ), 42%32 );	// NVIC 42번 USB Wake Up 인터럽트 활성화 
 800348a:	4a0c      	ldr	r2, [pc, #48]	; (80034bc <USB_Interrupts_Config+0x8c>)

	SET_BIT( REG_EXTI_SWIER, 18 );
 800348c:	4b0c      	ldr	r3, [pc, #48]	; (80034c0 <USB_Interrupts_Config+0x90>)
  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
	SET_BIT( REG_NVIC_ISER( 20/32 ), 20%32 );	// NVIC 20번 USB_LP 인터럽트 활성화 
	
	Hw_ISR_SetIRQFuncByAddr( 0x00E8, (u32)USBWakeUp_IRQHandler, 0 );
	SET_BIT( REG_NVIC_ISER( 42/32 ), 42%32 );	// NVIC 42번 USB Wake Up 인터럽트 활성화 
 800348e:	6810      	ldr	r0, [r2, #0]
 8003490:	f440 6180 	orr.w	r1, r0, #1024	; 0x400
 8003494:	6011      	str	r1, [r2, #0]

	SET_BIT( REG_EXTI_SWIER, 18 );
 8003496:	6818      	ldr	r0, [r3, #0]
 8003498:	f440 2280 	orr.w	r2, r0, #262144	; 0x40000
 800349c:	601a      	str	r2, [r3, #0]
		 
}
 800349e:	bd38      	pop	{r3, r4, r5, pc}
 80034a0:	40010414 	.word	0x40010414
 80034a4:	40010400 	.word	0x40010400
 80034a8:	40010408 	.word	0x40010408
 80034ac:	080033c9 	.word	0x080033c9
 80034b0:	08001a85 	.word	0x08001a85
 80034b4:	e000e100 	.word	0xe000e100
 80034b8:	08003341 	.word	0x08003341
 80034bc:	e000e104 	.word	0xe000e104
 80034c0:	40010410 	.word	0x40010410

080034c4 <USB_Cable_Config>:
* Input          : None.
* Return         : Status
*******************************************************************************/
void USB_Cable_Config (char NewState)
{
  if (NewState != DISABLE)
 80034c4:	b928      	cbnz	r0, 80034d2 <USB_Cable_Config+0xe>
	#endif
  }
  else
  {
  	#if HW_USE_USB_SMARTROBOT_BD == 1
	SET_BIT( REG_GPIOC_ODR, 13 );    
 80034c6:	4b06      	ldr	r3, [pc, #24]	; (80034e0 <USB_Cable_Config+0x1c>)
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	f442 5100 	orr.w	r1, r2, #8192	; 0x2000
 80034ce:	6019      	str	r1, [r3, #0]
 80034d0:	4770      	bx	lr
void USB_Cable_Config (char NewState)
{
  if (NewState != DISABLE)
  {
  	#if HW_USE_USB_SMARTROBOT_BD == 1
	CLR_BIT( REG_GPIOC_ODR, 13 );
 80034d2:	4b03      	ldr	r3, [pc, #12]	; (80034e0 <USB_Cable_Config+0x1c>)
 80034d4:	6818      	ldr	r0, [r3, #0]
 80034d6:	f420 5200 	bic.w	r2, r0, #8192	; 0x2000
 80034da:	601a      	str	r2, [r3, #0]
 80034dc:	4770      	bx	lr
 80034de:	bf00      	nop
 80034e0:	4001100c 	.word	0x4001100c

080034e4 <USB_To_USART_Send_Data>:
* Input          : data_buffer: data address.
                   Nb_bytes: number of bytes to send.
* Return         : none.
*******************************************************************************/
void USB_To_USART_Send_Data(uint8_t* data_buffer, uint8_t Nb_bytes)
{
 80034e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 80034e8:	460f      	mov	r7, r1
* Input          : data_buffer: data address.
                   Nb_bytes: number of bytes to send.
* Return         : none.
*******************************************************************************/
void USB_To_USART_Send_Data(uint8_t* data_buffer, uint8_t Nb_bytes)
{
 80034ea:	b082      	sub	sp, #8
 80034ec:	4605      	mov	r5, r0
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 80034ee:	b379      	cbz	r1, 8003550 <USB_To_USART_Send_Data+0x6c>
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 80034f0:	7803      	ldrb	r3, [r0, #0]
 80034f2:	f101 38ff 	add.w	r8, r1, #4294967295
    Hw_Uart_Q_Push( 5, &UartData );	//
 80034f6:	2005      	movs	r0, #5
{
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 80034f8:	2401      	movs	r4, #1
 80034fa:	4e17      	ldr	r6, [pc, #92]	; (8003558 <USB_To_USART_Send_Data+0x74>)
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
    Hw_Uart_Q_Push( 5, &UartData );	//
 80034fc:	f10d 0107 	add.w	r1, sp, #7
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 8003500:	f88d 3007 	strb.w	r3, [sp, #7]
    Hw_Uart_Q_Push( 5, &UartData );	//
 8003504:	47b0      	blx	r6
{
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 8003506:	42bc      	cmp	r4, r7
 8003508:	ea08 0804 	and.w	r8, r8, r4
 800350c:	d220      	bcs.n	8003550 <USB_To_USART_Send_Data+0x6c>
 800350e:	f1b8 0f00 	cmp.w	r8, #0
 8003512:	d00a      	beq.n	800352a <USB_To_USART_Send_Data+0x46>
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 8003514:	f895 e001 	ldrb.w	lr, [r5, #1]
    Hw_Uart_Q_Push( 5, &UartData );	//
 8003518:	2005      	movs	r0, #5
 800351a:	f10d 0107 	add.w	r1, sp, #7
{
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 800351e:	2402      	movs	r4, #2
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 8003520:	f88d e007 	strb.w	lr, [sp, #7]
    Hw_Uart_Q_Push( 5, &UartData );	//
 8003524:	47b0      	blx	r6
{
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 8003526:	42bc      	cmp	r4, r7
 8003528:	d212      	bcs.n	8003550 <USB_To_USART_Send_Data+0x6c>
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 800352a:	f815 c004 	ldrb.w	ip, [r5, r4]
    Hw_Uart_Q_Push( 5, &UartData );	//
 800352e:	f10d 0107 	add.w	r1, sp, #7
{
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 8003532:	3401      	adds	r4, #1
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
    Hw_Uart_Q_Push( 5, &UartData );	//
 8003534:	2005      	movs	r0, #5
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 8003536:	f88d c007 	strb.w	ip, [sp, #7]
    Hw_Uart_Q_Push( 5, &UartData );	//
 800353a:	47b0      	blx	r6
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 800353c:	5d2a      	ldrb	r2, [r5, r4]
    Hw_Uart_Q_Push( 5, &UartData );	//
 800353e:	2005      	movs	r0, #5
 8003540:	f10d 0107 	add.w	r1, sp, #7
{
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 8003544:	3401      	adds	r4, #1
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 8003546:	f88d 2007 	strb.w	r2, [sp, #7]
    Hw_Uart_Q_Push( 5, &UartData );	//
 800354a:	47b0      	blx	r6
{
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 800354c:	42bc      	cmp	r4, r7
 800354e:	d3ec      	bcc.n	800352a <USB_To_USART_Send_Data+0x46>
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
    Hw_Uart_Q_Push( 5, &UartData );	//
  }  
}
 8003550:	b002      	add	sp, #8
 8003552:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003556:	bf00      	nop
 8003558:	08001979 	.word	0x08001979

0800355c <Handle_USBAsynchXfer>:
* Description    : send data to USB.
* Input          : None.
* Return         : none.
*******************************************************************************/
void Handle_USBAsynchXfer (void)
{
 800355c:	b538      	push	{r3, r4, r5, lr}
  
  uint16_t USB_Tx_ptr;
  uint16_t USB_Tx_length;
  
  if(USB_Tx_State != 1)
 800355e:	4b1e      	ldr	r3, [pc, #120]	; (80035d8 <Handle_USBAsynchXfer+0x7c>)
 8003560:	781a      	ldrb	r2, [r3, #0]
 8003562:	2a01      	cmp	r2, #1
 8003564:	d026      	beq.n	80035b4 <Handle_USBAsynchXfer+0x58>
  {
    if (USART_Rx_ptr_out == USART_RX_DATA_SIZE)
 8003566:	4a1d      	ldr	r2, [pc, #116]	; (80035dc <Handle_USBAsynchXfer+0x80>)
 8003568:	6810      	ldr	r0, [r2, #0]
 800356a:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 800356e:	d02a      	beq.n	80035c6 <Handle_USBAsynchXfer+0x6a>
    {
      USART_Rx_ptr_out = 0;
    }
    
    if(USART_Rx_ptr_out == USART_Rx_ptr_in) 
 8003570:	491b      	ldr	r1, [pc, #108]	; (80035e0 <Handle_USBAsynchXfer+0x84>)
 8003572:	680d      	ldr	r5, [r1, #0]
 8003574:	4285      	cmp	r5, r0
 8003576:	d02c      	beq.n	80035d2 <Handle_USBAsynchXfer+0x76>
      return;
    }
    
    if(USART_Rx_ptr_out > USART_Rx_ptr_in) /* rollback */
    { 
      USART_Rx_length = USART_RX_DATA_SIZE - USART_Rx_ptr_out;
 8003578:	bf34      	ite	cc
 800357a:	f5c0 6500 	rsbcc	r5, r0, #2048	; 0x800
    }
    else 
    {
      USART_Rx_length = USART_Rx_ptr_in - USART_Rx_ptr_out;
 800357e:	ebc0 0505 	rsbcs	r5, r0, r5
      return;
    }
    
    if(USART_Rx_ptr_out > USART_Rx_ptr_in) /* rollback */
    { 
      USART_Rx_length = USART_RX_DATA_SIZE - USART_Rx_ptr_out;
 8003582:	4918      	ldr	r1, [pc, #96]	; (80035e4 <Handle_USBAsynchXfer+0x88>)
    else 
    {
      USART_Rx_length = USART_Rx_ptr_in - USART_Rx_ptr_out;
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
 8003584:	2d40      	cmp	r5, #64	; 0x40
    { 
      USART_Rx_length = USART_RX_DATA_SIZE - USART_Rx_ptr_out;
    }
    else 
    {
      USART_Rx_length = USART_Rx_ptr_in - USART_Rx_ptr_out;
 8003586:	600d      	str	r5, [r1, #0]
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
 8003588:	d815      	bhi.n	80035b6 <Handle_USBAsynchXfer+0x5a>
    else
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = USART_Rx_length;
      
      USART_Rx_ptr_out += USART_Rx_length;
 800358a:	182c      	adds	r4, r5, r0
 800358c:	6014      	str	r4, [r2, #0]
      USART_Rx_length = 0;
 800358e:	2200      	movs	r2, #0
      USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;	
      USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;	
    }
    else
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
 8003590:	b280      	uxth	r0, r0
      USB_Tx_length = USART_Rx_length;
 8003592:	b2ad      	uxth	r5, r5
      
      USART_Rx_ptr_out += USART_Rx_length;
      USART_Rx_length = 0;
 8003594:	600a      	str	r2, [r1, #0]
    }
    USB_Tx_State = 1; 
    UserToPMABufferCopy(&USART_Rx_Buffer[USB_Tx_ptr], ENDP1_TXADDR, USB_Tx_length);
 8003596:	4914      	ldr	r1, [pc, #80]	; (80035e8 <Handle_USBAsynchXfer+0x8c>)
      USB_Tx_length = USART_Rx_length;
      
      USART_Rx_ptr_out += USART_Rx_length;
      USART_Rx_length = 0;
    }
    USB_Tx_State = 1; 
 8003598:	2401      	movs	r4, #1
    UserToPMABufferCopy(&USART_Rx_Buffer[USB_Tx_ptr], ENDP1_TXADDR, USB_Tx_length);
 800359a:	1808      	adds	r0, r1, r0
 800359c:	462a      	mov	r2, r5
 800359e:	21c0      	movs	r1, #192	; 0xc0
      USB_Tx_length = USART_Rx_length;
      
      USART_Rx_ptr_out += USART_Rx_length;
      USART_Rx_length = 0;
    }
    USB_Tx_State = 1; 
 80035a0:	701c      	strb	r4, [r3, #0]
    UserToPMABufferCopy(&USART_Rx_Buffer[USB_Tx_ptr], ENDP1_TXADDR, USB_Tx_length);
 80035a2:	4b12      	ldr	r3, [pc, #72]	; (80035ec <Handle_USBAsynchXfer+0x90>)
 80035a4:	4798      	blx	r3
    SetEPTxCount(ENDP1, USB_Tx_length);
 80035a6:	4620      	mov	r0, r4
 80035a8:	4629      	mov	r1, r5
 80035aa:	4a11      	ldr	r2, [pc, #68]	; (80035f0 <Handle_USBAsynchXfer+0x94>)
 80035ac:	4790      	blx	r2
    SetEPTxValid(ENDP1); 
 80035ae:	4620      	mov	r0, r4
 80035b0:	4b10      	ldr	r3, [pc, #64]	; (80035f4 <Handle_USBAsynchXfer+0x98>)
 80035b2:	4798      	blx	r3
 80035b4:	bd38      	pop	{r3, r4, r5, pc}
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
      
      USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;	
 80035b6:	f100 0440 	add.w	r4, r0, #64	; 0x40
      USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;	
 80035ba:	3d40      	subs	r5, #64	; 0x40
 80035bc:	600d      	str	r5, [r1, #0]
      USART_Rx_length = USART_Rx_ptr_in - USART_Rx_ptr_out;
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
 80035be:	b280      	uxth	r0, r0
      USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
      
      USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;	
 80035c0:	6014      	str	r4, [r2, #0]
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
 80035c2:	2540      	movs	r5, #64	; 0x40
 80035c4:	e7e7      	b.n	8003596 <Handle_USBAsynchXfer+0x3a>
    if (USART_Rx_ptr_out == USART_RX_DATA_SIZE)
    {
      USART_Rx_ptr_out = 0;
    }
    
    if(USART_Rx_ptr_out == USART_Rx_ptr_in) 
 80035c6:	4906      	ldr	r1, [pc, #24]	; (80035e0 <Handle_USBAsynchXfer+0x84>)
  
  if(USB_Tx_State != 1)
  {
    if (USART_Rx_ptr_out == USART_RX_DATA_SIZE)
    {
      USART_Rx_ptr_out = 0;
 80035c8:	2000      	movs	r0, #0
    }
    
    if(USART_Rx_ptr_out == USART_Rx_ptr_in) 
 80035ca:	680d      	ldr	r5, [r1, #0]
  
  if(USB_Tx_State != 1)
  {
    if (USART_Rx_ptr_out == USART_RX_DATA_SIZE)
    {
      USART_Rx_ptr_out = 0;
 80035cc:	6010      	str	r0, [r2, #0]
    }
    
    if(USART_Rx_ptr_out == USART_Rx_ptr_in) 
 80035ce:	4285      	cmp	r5, r0
 80035d0:	d1d2      	bne.n	8003578 <Handle_USBAsynchXfer+0x1c>
    {
      USB_Tx_State = 0; 
 80035d2:	2000      	movs	r0, #0
 80035d4:	7018      	strb	r0, [r3, #0]
      return;
 80035d6:	bd38      	pop	{r3, r4, r5, pc}
 80035d8:	200002a0 	.word	0x200002a0
 80035dc:	200002a8 	.word	0x200002a8
 80035e0:	200002a4 	.word	0x200002a4
 80035e4:	200002ac 	.word	0x200002ac
 80035e8:	20000808 	.word	0x20000808
 80035ec:	080040fd 	.word	0x080040fd
 80035f0:	080043a9 	.word	0x080043a9
 80035f4:	08004265 	.word	0x08004265

080035f8 <Get_SerialNum>:
*******************************************************************************/
void Get_SerialNum(void)
{
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(uint32_t*)ID1;
 80035f8:	4908      	ldr	r1, [pc, #32]	; (800361c <Get_SerialNum+0x24>)
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Get_SerialNum(void)
{
 80035fa:	b538      	push	{r3, r4, r5, lr}
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(uint32_t*)ID1;
 80035fc:	6808      	ldr	r0, [r1, #0]
  Device_Serial1 = *(uint32_t*)ID2;
  Device_Serial2 = *(uint32_t*)ID3;  

  Device_Serial0 += Device_Serial2;
 80035fe:	3108      	adds	r1, #8
 8003600:	680b      	ldr	r3, [r1, #0]
void Get_SerialNum(void)
{
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(uint32_t*)ID1;
  Device_Serial1 = *(uint32_t*)ID2;
 8003602:	4a07      	ldr	r2, [pc, #28]	; (8003620 <Get_SerialNum+0x28>)
  Device_Serial2 = *(uint32_t*)ID3;  

  Device_Serial0 += Device_Serial2;

  if (Device_Serial0 != 0)
 8003604:	18c0      	adds	r0, r0, r3
void Get_SerialNum(void)
{
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(uint32_t*)ID1;
  Device_Serial1 = *(uint32_t*)ID2;
 8003606:	6814      	ldr	r4, [r2, #0]
  Device_Serial2 = *(uint32_t*)ID3;  

  Device_Serial0 += Device_Serial2;

  if (Device_Serial0 != 0)
 8003608:	d007      	beq.n	800361a <Get_SerialNum+0x22>
  {
    IntToUnicode (Device_Serial0, &Virtual_Com_Port_StringSerial[2] , 8);
 800360a:	4906      	ldr	r1, [pc, #24]	; (8003624 <Get_SerialNum+0x2c>)
 800360c:	2208      	movs	r2, #8
 800360e:	4d06      	ldr	r5, [pc, #24]	; (8003628 <Get_SerialNum+0x30>)
 8003610:	47a8      	blx	r5
    IntToUnicode (Device_Serial1, &Virtual_Com_Port_StringSerial[18], 4);
 8003612:	4620      	mov	r0, r4
 8003614:	4905      	ldr	r1, [pc, #20]	; (800362c <Get_SerialNum+0x34>)
 8003616:	2204      	movs	r2, #4
 8003618:	47a8      	blx	r5
 800361a:	bd38      	pop	{r3, r4, r5, pc}
 800361c:	1ffff7e8 	.word	0x1ffff7e8
 8003620:	1ffff7ec 	.word	0x1ffff7ec
 8003624:	20000002 	.word	0x20000002
 8003628:	08003351 	.word	0x08003351
 800362c:	20000012 	.word	0x20000012

08003630 <__WFI>:
}


void __WFI(void)
{
	 __asm("wfi");
 8003630:	bf30      	wfi
}
 8003632:	4770      	bx	lr

08003634 <Standard_GetConfiguration>:
* Output         : None.
* Return         : Return 1 , if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
uint8_t *Standard_GetConfiguration(uint16_t Length)
{
 8003634:	b508      	push	{r3, lr}
  if (Length == 0)
 8003636:	b138      	cbz	r0, 8003648 <Standard_GetConfiguration+0x14>
  {
    pInformation->Ctrl_Info.Usb_wLength =
      sizeof(pInformation->Current_Configuration);
    return 0;
  }
  pUser_Standard_Requests->User_GetConfiguration();
 8003638:	4906      	ldr	r1, [pc, #24]	; (8003654 <Standard_GetConfiguration+0x20>)
 800363a:	680b      	ldr	r3, [r1, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	4790      	blx	r2
  return (uint8_t *)&pInformation->Current_Configuration;
 8003640:	4805      	ldr	r0, [pc, #20]	; (8003658 <Standard_GetConfiguration+0x24>)
 8003642:	6800      	ldr	r0, [r0, #0]
 8003644:	300a      	adds	r0, #10
}
 8003646:	bd08      	pop	{r3, pc}
*******************************************************************************/
uint8_t *Standard_GetConfiguration(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength =
 8003648:	4903      	ldr	r1, [pc, #12]	; (8003658 <Standard_GetConfiguration+0x24>)
 800364a:	2201      	movs	r2, #1
 800364c:	680b      	ldr	r3, [r1, #0]
 800364e:	821a      	strh	r2, [r3, #16]
      sizeof(pInformation->Current_Configuration);
    return 0;
 8003650:	bd08      	pop	{r3, pc}
 8003652:	bf00      	nop
 8003654:	20001034 	.word	0x20001034
 8003658:	20001038 	.word	0x20001038

0800365c <Standard_GetInterface>:
* Output         : None.
* Return         : Return 0, if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
uint8_t *Standard_GetInterface(uint16_t Length)
{
 800365c:	b508      	push	{r3, lr}
  if (Length == 0)
 800365e:	b138      	cbz	r0, 8003670 <Standard_GetInterface+0x14>
  {
    pInformation->Ctrl_Info.Usb_wLength =
      sizeof(pInformation->Current_AlternateSetting);
    return 0;
  }
  pUser_Standard_Requests->User_GetInterface();
 8003660:	4906      	ldr	r1, [pc, #24]	; (800367c <Standard_GetInterface+0x20>)
 8003662:	680b      	ldr	r3, [r1, #0]
 8003664:	689a      	ldr	r2, [r3, #8]
 8003666:	4790      	blx	r2
  return (uint8_t *)&pInformation->Current_AlternateSetting;
 8003668:	4805      	ldr	r0, [pc, #20]	; (8003680 <Standard_GetInterface+0x24>)
 800366a:	6800      	ldr	r0, [r0, #0]
 800366c:	300c      	adds	r0, #12
}
 800366e:	bd08      	pop	{r3, pc}
*******************************************************************************/
uint8_t *Standard_GetInterface(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength =
 8003670:	4903      	ldr	r1, [pc, #12]	; (8003680 <Standard_GetInterface+0x24>)
 8003672:	2201      	movs	r2, #1
 8003674:	680b      	ldr	r3, [r1, #0]
 8003676:	821a      	strh	r2, [r3, #16]
      sizeof(pInformation->Current_AlternateSetting);
    return 0;
 8003678:	bd08      	pop	{r3, pc}
 800367a:	bf00      	nop
 800367c:	20001034 	.word	0x20001034
 8003680:	20001038 	.word	0x20001038

08003684 <Standard_GetStatus>:
* Output         : None.
* Return         : Return 0, if the request is at end of data block,
*                  or is invalid when "Length" is 0.
*******************************************************************************/
uint8_t *Standard_GetStatus(uint16_t Length)
{
 8003684:	b508      	push	{r3, lr}
  if (Length == 0)
 8003686:	2800      	cmp	r0, #0
 8003688:	d029      	beq.n	80036de <Standard_GetStatus+0x5a>
  }

  /* Reset Status Information */
  StatusInfo.w = 0;

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800368a:	4a2a      	ldr	r2, [pc, #168]	; (8003734 <Standard_GetStatus+0xb0>)
    pInformation->Ctrl_Info.Usb_wLength = 2;
    return 0;
  }

  /* Reset Status Information */
  StatusInfo.w = 0;
 800368c:	482a      	ldr	r0, [pc, #168]	; (8003738 <Standard_GetStatus+0xb4>)
 800368e:	2300      	movs	r3, #0

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8003690:	6812      	ldr	r2, [r2, #0]
    pInformation->Ctrl_Info.Usb_wLength = 2;
    return 0;
  }

  /* Reset Status Information */
  StatusInfo.w = 0;
 8003692:	8003      	strh	r3, [r0, #0]

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8003694:	f892 c000 	ldrb.w	ip, [r2]
 8003698:	f01c 037f 	ands.w	r3, ip, #127	; 0x7f
 800369c:	d118      	bne.n	80036d0 <Standard_GetStatus+0x4c>
  {
    /*Get Device Status */
    uint8_t Feature = pInformation->Current_Feature;

    /* Remote Wakeup enabled */
    if (ValBit(Feature, 5))
 800369e:	7a51      	ldrb	r1, [r2, #9]
    {
      SetBit(StatusInfo0, 1);
 80036a0:	f890 e000 	ldrb.w	lr, [r0]
  {
    /*Get Device Status */
    uint8_t Feature = pInformation->Current_Feature;

    /* Remote Wakeup enabled */
    if (ValBit(Feature, 5))
 80036a4:	f011 0f20 	tst.w	r1, #32
    {
      SetBit(StatusInfo0, 1);
 80036a8:	bf14      	ite	ne
 80036aa:	f04e 0e02 	orrne.w	lr, lr, #2
    }
    else
    {
      ClrBit(StatusInfo0, 1);
 80036ae:	f00e 0efd 	andeq.w	lr, lr, #253	; 0xfd
    }      

    /* Bus-powered */
    if (ValBit(Feature, 6))
 80036b2:	f011 0f40 	tst.w	r1, #64	; 0x40
    {
      SetBit(StatusInfo0, 0);
 80036b6:	bf14      	ite	ne
 80036b8:	f04e 0e01 	orrne.w	lr, lr, #1
    }
    else /* Self-powered */
    {
      ClrBit(StatusInfo0, 0);
 80036bc:	f02e 0e01 	biceq.w	lr, lr, #1
 80036c0:	f880 e000 	strb.w	lr, [r0]
  }
  else
  {
    return NULL;
  }
  pUser_Standard_Requests->User_GetStatus();
 80036c4:	4b1d      	ldr	r3, [pc, #116]	; (800373c <Standard_GetStatus+0xb8>)
 80036c6:	6819      	ldr	r1, [r3, #0]
 80036c8:	6908      	ldr	r0, [r1, #16]
 80036ca:	4780      	blx	r0
  return (uint8_t *)&StatusInfo;
 80036cc:	481a      	ldr	r0, [pc, #104]	; (8003738 <Standard_GetStatus+0xb4>)
 80036ce:	bd08      	pop	{r3, pc}
    {
      ClrBit(StatusInfo0, 0);
    }
  }
  /*Interface Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d100      	bne.n	80036d6 <Standard_GetStatus+0x52>
  {
    return NULL;
  }
  pUser_Standard_Requests->User_GetStatus();
  return (uint8_t *)&StatusInfo;
}
 80036d4:	bd08      	pop	{r3, pc}
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
  {
    return (uint8_t *)&StatusInfo;
  }
  /*Get EndPoint Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d006      	beq.n	80036e8 <Standard_GetStatus+0x64>
    }

  }
  else
  {
    return NULL;
 80036da:	2000      	movs	r0, #0
 80036dc:	e7fa      	b.n	80036d4 <Standard_GetStatus+0x50>
*******************************************************************************/
uint8_t *Standard_GetStatus(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength = 2;
 80036de:	4915      	ldr	r1, [pc, #84]	; (8003734 <Standard_GetStatus+0xb0>)
 80036e0:	2202      	movs	r2, #2
 80036e2:	680b      	ldr	r3, [r1, #0]
 80036e4:	821a      	strh	r2, [r3, #16]
    return 0;
 80036e6:	bd08      	pop	{r3, pc}
  }
  /*Get EndPoint Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
  {
    uint8_t Related_Endpoint;
    uint8_t wIndex0 = pInformation->USBwIndex0;
 80036e8:	f892 c005 	ldrb.w	ip, [r2, #5]

    Related_Endpoint = (wIndex0 & 0x0f);
    if (ValBit(wIndex0, 7))
 80036ec:	f01c 0f80 	tst.w	ip, #128	; 0x80
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
  {
    uint8_t Related_Endpoint;
    uint8_t wIndex0 = pInformation->USBwIndex0;

    Related_Endpoint = (wIndex0 & 0x0f);
 80036f0:	f00c 020f 	and.w	r2, ip, #15
    if (ValBit(wIndex0, 7))
 80036f4:	d111      	bne.n	800371a <Standard_GetStatus+0x96>
      }
    }
    else
    {
      /* OUT endpoint */
      if (_GetRxStallStatus(Related_Endpoint))
 80036f6:	0093      	lsls	r3, r2, #2
 80036f8:	f103 4180 	add.w	r1, r3, #1073741824	; 0x40000000
 80036fc:	f501 4eb8 	add.w	lr, r1, #23552	; 0x5c00
 8003700:	f8de 2000 	ldr.w	r2, [lr]
 8003704:	f402 5c40 	and.w	ip, r2, #12288	; 0x3000
 8003708:	f5bc 5f80 	cmp.w	ip, #4096	; 0x1000
 800370c:	d1da      	bne.n	80036c4 <Standard_GetStatus+0x40>
      {
        SetBit(StatusInfo0, 0); /* OUT Endpoint stalled */
 800370e:	7802      	ldrb	r2, [r0, #0]
 8003710:	f042 0c01 	orr.w	ip, r2, #1
 8003714:	f880 c000 	strb.w	ip, [r0]
 8003718:	e7d4      	b.n	80036c4 <Standard_GetStatus+0x40>

    Related_Endpoint = (wIndex0 & 0x0f);
    if (ValBit(wIndex0, 7))
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 800371a:	0093      	lsls	r3, r2, #2
 800371c:	f103 4180 	add.w	r1, r3, #1073741824	; 0x40000000
 8003720:	f501 4eb8 	add.w	lr, r1, #23552	; 0x5c00
 8003724:	f8de 2000 	ldr.w	r2, [lr]
 8003728:	f002 0330 	and.w	r3, r2, #48	; 0x30
 800372c:	2b10      	cmp	r3, #16
 800372e:	d1c9      	bne.n	80036c4 <Standard_GetStatus+0x40>
 8003730:	e7ed      	b.n	800370e <Standard_GetStatus+0x8a>
 8003732:	bf00      	nop
 8003734:	20001038 	.word	0x20001038
 8003738:	20001008 	.word	0x20001008
 800373c:	20001034 	.word	0x20001034

08003740 <DataStageIn>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void DataStageIn(void)
{
 8003740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
 8003744:	4e25      	ldr	r6, [pc, #148]	; (80037dc <DataStageIn+0x9c>)
 8003746:	6834      	ldr	r4, [r6, #0]
  uint32_t save_wLength = pEPinfo->Usb_wLength;
 8003748:	8a23      	ldrh	r3, [r4, #16]
  uint32_t ControlState = pInformation->ControlState;
 800374a:	7a27      	ldrb	r7, [r4, #8]

  uint8_t *DataBuffer;
  uint32_t Length;

  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
 800374c:	b923      	cbnz	r3, 8003758 <DataStageIn+0x18>
 800374e:	2f04      	cmp	r7, #4
 8003750:	d02c      	beq.n	80037ac <DataStageIn+0x6c>
    }
    
    goto Expect_Status_Out;
  }

  Length = pEPinfo->PacketSize;
 8003752:	8aa5      	ldrh	r5, [r4, #20]
  ControlState = (save_wLength <= Length) ? LAST_IN_DATA : IN_DATA;
 8003754:	2704      	movs	r7, #4
 8003756:	e003      	b.n	8003760 <DataStageIn+0x20>
    }
    
    goto Expect_Status_Out;
  }

  Length = pEPinfo->PacketSize;
 8003758:	8aa5      	ldrh	r5, [r4, #20]
  ControlState = (save_wLength <= Length) ? LAST_IN_DATA : IN_DATA;
 800375a:	42ab      	cmp	r3, r5
 800375c:	d9fa      	bls.n	8003754 <DataStageIn+0x14>
 800375e:	2702      	movs	r7, #2
  if (Length > save_wLength)
  {
    Length = save_wLength;
  }

  DataBuffer = (*pEPinfo->CopyData)(Length);
 8003760:	429d      	cmp	r5, r3
 8003762:	bf28      	it	cs
 8003764:	461d      	movcs	r5, r3
 8003766:	69a2      	ldr	r2, [r4, #24]
 8003768:	4628      	mov	r0, r5
 800376a:	4790      	blx	r2
  
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);
 800376c:	491c      	ldr	r1, [pc, #112]	; (80037e0 <DataStageIn+0xa0>)
  if (Length > save_wLength)
  {
    Length = save_wLength;
  }

  DataBuffer = (*pEPinfo->CopyData)(Length);
 800376e:	4680      	mov	r8, r0
  
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);
 8003770:	2000      	movs	r0, #0
 8003772:	4788      	blx	r1
 8003774:	462a      	mov	r2, r5
 8003776:	4601      	mov	r1, r0
 8003778:	4b1a      	ldr	r3, [pc, #104]	; (80037e4 <DataStageIn+0xa4>)
 800377a:	4640      	mov	r0, r8
 800377c:	4798      	blx	r3

  SetEPTxCount(ENDP0, Length);
 800377e:	4629      	mov	r1, r5
 8003780:	2000      	movs	r0, #0
 8003782:	4a19      	ldr	r2, [pc, #100]	; (80037e8 <DataStageIn+0xa8>)
 8003784:	4790      	blx	r2

  pEPinfo->Usb_wLength -= Length;
 8003786:	8a20      	ldrh	r0, [r4, #16]
  pEPinfo->Usb_wOffset += Length;
 8003788:	8a61      	ldrh	r1, [r4, #18]
  
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);

  SetEPTxCount(ENDP0, Length);

  pEPinfo->Usb_wLength -= Length;
 800378a:	ebc5 0c00 	rsb	ip, r5, r0
  pEPinfo->Usb_wOffset += Length;
  vSetEPTxStatus(EP_TX_VALID);
 800378e:	4b17      	ldr	r3, [pc, #92]	; (80037ec <DataStageIn+0xac>)

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 8003790:	4817      	ldr	r0, [pc, #92]	; (80037f0 <DataStageIn+0xb0>)
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);

  SetEPTxCount(ENDP0, Length);

  pEPinfo->Usb_wLength -= Length;
  pEPinfo->Usb_wOffset += Length;
 8003792:	186d      	adds	r5, r5, r1
  vSetEPTxStatus(EP_TX_VALID);
 8003794:	2230      	movs	r2, #48	; 0x30

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 8003796:	f44f 5140 	mov.w	r1, #12288	; 0x3000
  
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);

  SetEPTxCount(ENDP0, Length);

  pEPinfo->Usb_wLength -= Length;
 800379a:	f8a4 c010 	strh.w	ip, [r4, #16]
  pEPinfo->Usb_wOffset += Length;
 800379e:	8265      	strh	r5, [r4, #18]
  vSetEPTxStatus(EP_TX_VALID);
 80037a0:	801a      	strh	r2, [r3, #0]

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 80037a2:	6834      	ldr	r4, [r6, #0]
 80037a4:	8001      	strh	r1, [r0, #0]

Expect_Status_Out:
  pInformation->ControlState = ControlState;
 80037a6:	7227      	strb	r7, [r4, #8]
}
 80037a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  uint8_t *DataBuffer;
  uint32_t Length;

  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
  {
    if(Data_Mul_MaxPacketSize == TRUE)
 80037ac:	4a11      	ldr	r2, [pc, #68]	; (80037f4 <DataStageIn+0xb4>)
 80037ae:	7811      	ldrb	r1, [r2, #0]
 80037b0:	2901      	cmp	r1, #1
 80037b2:	d006      	beq.n	80037c2 <DataStageIn+0x82>
    }
    else 
    {
      /* No more data to send so STALL the TX Status*/
      ControlState = WAIT_STATUS_OUT;
      vSetEPTxStatus(EP_TX_STALL);
 80037b4:	4b0d      	ldr	r3, [pc, #52]	; (80037ec <DataStageIn+0xac>)
 80037b6:	2707      	movs	r7, #7
 80037b8:	2210      	movs	r2, #16
 80037ba:	801a      	strh	r2, [r3, #0]
  vSetEPTxStatus(EP_TX_VALID);

  USB_StatusOut();/* Expect the host to abort the data IN stage */

Expect_Status_Out:
  pInformation->ControlState = ControlState;
 80037bc:	7227      	strb	r7, [r4, #8]
}
 80037be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
  {
    if(Data_Mul_MaxPacketSize == TRUE)
    {
      /* No more data to send and empty packet */
      Send0LengthData();
 80037c2:	480d      	ldr	r0, [pc, #52]	; (80037f8 <DataStageIn+0xb8>)
 80037c4:	490d      	ldr	r1, [pc, #52]	; (80037fc <DataStageIn+0xbc>)
 80037c6:	6800      	ldr	r0, [r0, #0]
 80037c8:	fa1f fc80 	uxth.w	ip, r0
 80037cc:	4461      	add	r1, ip
 80037ce:	0048      	lsls	r0, r1, #1
 80037d0:	4906      	ldr	r1, [pc, #24]	; (80037ec <DataStageIn+0xac>)
 80037d2:	6003      	str	r3, [r0, #0]
 80037d4:	2030      	movs	r0, #48	; 0x30
 80037d6:	8008      	strh	r0, [r1, #0]
      ControlState = LAST_IN_DATA;
      Data_Mul_MaxPacketSize = FALSE;
 80037d8:	7013      	strb	r3, [r2, #0]
 80037da:	e7e4      	b.n	80037a6 <DataStageIn+0x66>
 80037dc:	20001038 	.word	0x20001038
 80037e0:	08004369 	.word	0x08004369
 80037e4:	080040fd 	.word	0x080040fd
 80037e8:	080043a9 	.word	0x080043a9
 80037ec:	20001040 	.word	0x20001040
 80037f0:	2000103e 	.word	0x2000103e
 80037f4:	200002b0 	.word	0x200002b0
 80037f8:	40005c50 	.word	0x40005c50
 80037fc:	20003002 	.word	0x20003002

08003800 <Standard_SetConfiguration>:
* Output         : None.
* Return         : Return USB_SUCCESS, if the request is performed.
*                  Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetConfiguration(void)
{
 8003800:	b510      	push	{r4, lr}

  if ((pInformation->USBwValue0 <=
 8003802:	4b0b      	ldr	r3, [pc, #44]	; (8003830 <Standard_SetConfiguration+0x30>)
 8003804:	4a0b      	ldr	r2, [pc, #44]	; (8003834 <Standard_SetConfiguration+0x34>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	7851      	ldrb	r1, [r2, #1]
 800380a:	78da      	ldrb	r2, [r3, #3]
 800380c:	4291      	cmp	r1, r2
 800380e:	d305      	bcc.n	800381c <Standard_SetConfiguration+0x1c>
      Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
 8003810:	7898      	ldrb	r0, [r3, #2]
 8003812:	b918      	cbnz	r0, 800381c <Standard_SetConfiguration+0x1c>
      && (pInformation->USBwIndex == 0)) /*call Back usb spec 2.0*/
 8003814:	889c      	ldrh	r4, [r3, #4]
 8003816:	b11c      	cbz	r4, 8003820 <Standard_SetConfiguration+0x20>
    pUser_Standard_Requests->User_SetConfiguration();
    return USB_SUCCESS;
  }
  else
  {
    return USB_UNSUPPORT;
 8003818:	2002      	movs	r0, #2
  }
}
 800381a:	bd10      	pop	{r4, pc}
    pUser_Standard_Requests->User_SetConfiguration();
    return USB_SUCCESS;
  }
  else
  {
    return USB_UNSUPPORT;
 800381c:	2002      	movs	r0, #2
 800381e:	bd10      	pop	{r4, pc}

  if ((pInformation->USBwValue0 <=
      Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
      && (pInformation->USBwIndex == 0)) /*call Back usb spec 2.0*/
  {
    pInformation->Current_Configuration = pInformation->USBwValue0;
 8003820:	729a      	strb	r2, [r3, #10]
    pUser_Standard_Requests->User_SetConfiguration();
 8003822:	4b05      	ldr	r3, [pc, #20]	; (8003838 <Standard_SetConfiguration+0x38>)
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	6851      	ldr	r1, [r2, #4]
 8003828:	4788      	blx	r1
    return USB_SUCCESS;
 800382a:	4620      	mov	r0, r4
 800382c:	bd10      	pop	{r4, pc}
 800382e:	bf00      	nop
 8003830:	20001038 	.word	0x20001038
 8003834:	200000e0 	.word	0x200000e0
 8003838:	20001034 	.word	0x20001034

0800383c <Standard_SetInterface>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetInterface(void)
{
 800383c:	b538      	push	{r3, r4, r5, lr}
  RESULT Re;
  /*Test if the specified Interface and Alternate Setting are supported by
    the application Firmware*/
  Re = (*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, pInformation->USBwValue0);
 800383e:	4810      	ldr	r0, [pc, #64]	; (8003880 <Standard_SetInterface+0x44>)
 8003840:	4c10      	ldr	r4, [pc, #64]	; (8003884 <Standard_SetInterface+0x48>)
 8003842:	6802      	ldr	r2, [r0, #0]
 8003844:	6821      	ldr	r1, [r4, #0]
 8003846:	6993      	ldr	r3, [r2, #24]
 8003848:	7948      	ldrb	r0, [r1, #5]
 800384a:	78c9      	ldrb	r1, [r1, #3]
 800384c:	4798      	blx	r3

  if (pInformation->Current_Configuration != 0)
 800384e:	6823      	ldr	r3, [r4, #0]
 8003850:	7a9a      	ldrb	r2, [r3, #10]
 8003852:	b18a      	cbz	r2, 8003878 <Standard_SetInterface+0x3c>
  {
    if ((Re != USB_SUCCESS) || (pInformation->USBwIndex1 != 0)
 8003854:	b980      	cbnz	r0, 8003878 <Standard_SetInterface+0x3c>
 8003856:	7919      	ldrb	r1, [r3, #4]
 8003858:	b971      	cbnz	r1, 8003878 <Standard_SetInterface+0x3c>
        || (pInformation->USBwValue1 != 0))
 800385a:	789d      	ldrb	r5, [r3, #2]
 800385c:	b975      	cbnz	r5, 800387c <Standard_SetInterface+0x40>
    {
      return  USB_UNSUPPORT;
    }
    else if (Re == USB_SUCCESS)
    {
      pUser_Standard_Requests->User_SetInterface();
 800385e:	4b0a      	ldr	r3, [pc, #40]	; (8003888 <Standard_SetInterface+0x4c>)
 8003860:	6819      	ldr	r1, [r3, #0]
 8003862:	68c8      	ldr	r0, [r1, #12]
 8003864:	4780      	blx	r0
      pInformation->Current_Interface = pInformation->USBwIndex0;
 8003866:	6823      	ldr	r3, [r4, #0]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
      return USB_SUCCESS;
 8003868:	4628      	mov	r0, r5
      return  USB_UNSUPPORT;
    }
    else if (Re == USB_SUCCESS)
    {
      pUser_Standard_Requests->User_SetInterface();
      pInformation->Current_Interface = pInformation->USBwIndex0;
 800386a:	795a      	ldrb	r2, [r3, #5]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
 800386c:	f893 c003 	ldrb.w	ip, [r3, #3]
      return  USB_UNSUPPORT;
    }
    else if (Re == USB_SUCCESS)
    {
      pUser_Standard_Requests->User_SetInterface();
      pInformation->Current_Interface = pInformation->USBwIndex0;
 8003870:	72da      	strb	r2, [r3, #11]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
 8003872:	f883 c00c 	strb.w	ip, [r3, #12]
      return USB_SUCCESS;
 8003876:	bd38      	pop	{r3, r4, r5, pc}
  if (pInformation->Current_Configuration != 0)
  {
    if ((Re != USB_SUCCESS) || (pInformation->USBwIndex1 != 0)
        || (pInformation->USBwValue1 != 0))
    {
      return  USB_UNSUPPORT;
 8003878:	2002      	movs	r0, #2
 800387a:	bd38      	pop	{r3, r4, r5, pc}
 800387c:	2002      	movs	r0, #2
    }

  }

  return USB_UNSUPPORT;
}
 800387e:	bd38      	pop	{r3, r4, r5, pc}
 8003880:	20001010 	.word	0x20001010
 8003884:	20001038 	.word	0x20001038
 8003888:	20001034 	.word	0x20001034

0800388c <Standard_ClearFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_ClearFeature(void)
{
 800388c:	b538      	push	{r3, r4, r5, lr}
  uint32_t     Type_Rec = Type_Recipient;
 800388e:	4b3a      	ldr	r3, [pc, #232]	; (8003978 <Standard_ClearFeature+0xec>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	7818      	ldrb	r0, [r3, #0]
  uint32_t     Status;


  if (Type_Rec == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8003894:	f010 007f 	ands.w	r0, r0, #127	; 0x7f
 8003898:	d035      	beq.n	8003906 <Standard_ClearFeature+0x7a>
  {/*Device Clear Feature*/
    ClrBit(pInformation->Current_Feature, 5);
    return USB_SUCCESS;
  }
  else if (Type_Rec == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 800389a:	2802      	cmp	r0, #2
 800389c:	d001      	beq.n	80038a2 <Standard_ClearFeature+0x16>
    }

    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
        || (pInformation->Current_Configuration == 0))
    {
      return USB_UNSUPPORT;
 800389e:	2002      	movs	r0, #2
 80038a0:	bd38      	pop	{r3, r4, r5, pc}
    DEVICE* pDev;
    uint32_t Related_Endpoint;
    uint32_t wIndex0;
    uint32_t rEP;

    if ((pInformation->USBwValue != ENDPOINT_STALL)
 80038a2:	885a      	ldrh	r2, [r3, #2]
 80038a4:	2a00      	cmp	r2, #0
 80038a6:	d12d      	bne.n	8003904 <Standard_ClearFeature+0x78>
        || (pInformation->USBwIndex1 != 0))
 80038a8:	7919      	ldrb	r1, [r3, #4]
 80038aa:	bb59      	cbnz	r1, 8003904 <Standard_ClearFeature+0x78>
    {
      return USB_UNSUPPORT;
    }

    pDev = &Device_Table;
    wIndex0 = pInformation->USBwIndex0;
 80038ac:	795a      	ldrb	r2, [r3, #5]
    rEP = wIndex0 & ~0x80;
    Related_Endpoint = ENDP0 + rEP;

    if (ValBit(pInformation->USBwIndex0, 7))
 80038ae:	f012 0f80 	tst.w	r2, #128	; 0x80
      return USB_UNSUPPORT;
    }

    pDev = &Device_Table;
    wIndex0 = pInformation->USBwIndex0;
    rEP = wIndex0 & ~0x80;
 80038b2:	f022 0080 	bic.w	r0, r2, #128	; 0x80
    Related_Endpoint = ENDP0 + rEP;

    if (ValBit(pInformation->USBwIndex0, 7))
 80038b6:	d12b      	bne.n	8003910 <Standard_ClearFeature+0x84>
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
    }
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
 80038b8:	0084      	lsls	r4, r0, #2
 80038ba:	f104 4180 	add.w	r1, r4, #1073741824	; 0x40000000
 80038be:	f501 4cb8 	add.w	ip, r1, #23552	; 0x5c00
 80038c2:	f8dc 5000 	ldr.w	r5, [ip]
 80038c6:	f405 5540 	and.w	r5, r5, #12288	; 0x3000
    }

    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 80038ca:	492c      	ldr	r1, [pc, #176]	; (800397c <Standard_ClearFeature+0xf0>)
 80038cc:	f891 c000 	ldrb.w	ip, [r1]
 80038d0:	4560      	cmp	r0, ip
 80038d2:	d2e4      	bcs.n	800389e <Standard_ClearFeature+0x12>
 80038d4:	2d00      	cmp	r5, #0
 80038d6:	d0e2      	beq.n	800389e <Standard_ClearFeature+0x12>
        || (pInformation->Current_Configuration == 0))
 80038d8:	7a9b      	ldrb	r3, [r3, #10]
 80038da:	b193      	cbz	r3, 8003902 <Standard_ClearFeature+0x76>
    {
      return USB_UNSUPPORT;
    }


    if (wIndex0 & 0x80)
 80038dc:	f012 0f80 	tst.w	r2, #128	; 0x80
 80038e0:	d020      	beq.n	8003924 <Standard_ClearFeature+0x98>
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint ))
 80038e2:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 80038e6:	f504 44b8 	add.w	r4, r4, #23552	; 0x5c00
 80038ea:	6822      	ldr	r2, [r4, #0]
 80038ec:	f002 0e30 	and.w	lr, r2, #48	; 0x30
 80038f0:	f1be 0f10 	cmp.w	lr, #16
 80038f4:	d033      	beq.n	800395e <Standard_ClearFeature+0xd2>
          ClearDTOG_RX(Related_Endpoint);
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
        }
      }
    }
    pUser_Standard_Requests->User_ClearFeature();
 80038f6:	4922      	ldr	r1, [pc, #136]	; (8003980 <Standard_ClearFeature+0xf4>)
 80038f8:	680b      	ldr	r3, [r1, #0]
 80038fa:	6958      	ldr	r0, [r3, #20]
 80038fc:	4780      	blx	r0
    return USB_SUCCESS;
 80038fe:	2000      	movs	r0, #0
 8003900:	bd38      	pop	{r3, r4, r5, pc}
    }

    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
        || (pInformation->Current_Configuration == 0))
    {
      return USB_UNSUPPORT;
 8003902:	2002      	movs	r0, #2
    pUser_Standard_Requests->User_ClearFeature();
    return USB_SUCCESS;
  }

  return USB_UNSUPPORT;
}
 8003904:	bd38      	pop	{r3, r4, r5, pc}
  uint32_t     Status;


  if (Type_Rec == (STANDARD_REQUEST | DEVICE_RECIPIENT))
  {/*Device Clear Feature*/
    ClrBit(pInformation->Current_Feature, 5);
 8003906:	7a59      	ldrb	r1, [r3, #9]
 8003908:	f021 0220 	bic.w	r2, r1, #32
 800390c:	725a      	strb	r2, [r3, #9]
    return USB_SUCCESS;
 800390e:	bd38      	pop	{r3, r4, r5, pc}

    if (ValBit(pInformation->USBwIndex0, 7))
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 8003910:	0084      	lsls	r4, r0, #2
 8003912:	f104 4180 	add.w	r1, r4, #1073741824	; 0x40000000
 8003916:	f501 4cb8 	add.w	ip, r1, #23552	; 0x5c00
 800391a:	f8dc 5000 	ldr.w	r5, [ip]
 800391e:	f005 0530 	and.w	r5, r5, #48	; 0x30
 8003922:	e7d2      	b.n	80038ca <Standard_ClearFeature+0x3e>
      }
    }
    else
    {
      /* OUT endpoint */
      if (_GetRxStallStatus(Related_Endpoint))
 8003924:	f104 4e80 	add.w	lr, r4, #1073741824	; 0x40000000
 8003928:	f50e 44b8 	add.w	r4, lr, #23552	; 0x5c00
 800392c:	6822      	ldr	r2, [r4, #0]
 800392e:	f402 5c40 	and.w	ip, r2, #12288	; 0x3000
 8003932:	f5bc 5f80 	cmp.w	ip, #4096	; 0x1000
 8003936:	d1de      	bne.n	80038f6 <Standard_ClearFeature+0x6a>
      {
        if (Related_Endpoint == ENDP0)
 8003938:	b9d0      	cbnz	r0, 8003970 <Standard_ClearFeature+0xe4>
        {
          /* After clear the STALL, enable the default endpoint receiver */
          SetEPRxCount(Related_Endpoint, Device_Property.MaxPacketSize);
 800393a:	4912      	ldr	r1, [pc, #72]	; (8003984 <Standard_ClearFeature+0xf8>)
 800393c:	4b12      	ldr	r3, [pc, #72]	; (8003988 <Standard_ClearFeature+0xfc>)
 800393e:	f891 102c 	ldrb.w	r1, [r1, #44]	; 0x2c
 8003942:	4798      	blx	r3
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
        }
        else
        {
          ClearDTOG_RX(Related_Endpoint);
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
 8003944:	6822      	ldr	r2, [r4, #0]
 8003946:	f64b 718f 	movw	r1, #49039	; 0xbf8f
 800394a:	ea02 0301 	and.w	r3, r2, r1
 800394e:	f483 5e40 	eor.w	lr, r3, #12288	; 0x3000
 8003952:	f44e 4c00 	orr.w	ip, lr, #32768	; 0x8000
 8003956:	f04c 0080 	orr.w	r0, ip, #128	; 0x80
 800395a:	6020      	str	r0, [r4, #0]
 800395c:	e7cb      	b.n	80038f6 <Standard_ClearFeature+0x6a>
    if (wIndex0 & 0x80)
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint ))
      {
        ClearDTOG_TX(Related_Endpoint);
 800395e:	b2c4      	uxtb	r4, r0
 8003960:	4620      	mov	r0, r4
 8003962:	490a      	ldr	r1, [pc, #40]	; (800398c <Standard_ClearFeature+0x100>)
 8003964:	4788      	blx	r1
        SetEPTxStatus(Related_Endpoint, EP_TX_VALID);
 8003966:	4620      	mov	r0, r4
 8003968:	2130      	movs	r1, #48	; 0x30
 800396a:	4b09      	ldr	r3, [pc, #36]	; (8003990 <Standard_ClearFeature+0x104>)
 800396c:	4798      	blx	r3
 800396e:	e7c2      	b.n	80038f6 <Standard_ClearFeature+0x6a>
          SetEPRxCount(Related_Endpoint, Device_Property.MaxPacketSize);
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
        }
        else
        {
          ClearDTOG_RX(Related_Endpoint);
 8003970:	4a08      	ldr	r2, [pc, #32]	; (8003994 <Standard_ClearFeature+0x108>)
 8003972:	4790      	blx	r2
 8003974:	e7e6      	b.n	8003944 <Standard_ClearFeature+0xb8>
 8003976:	bf00      	nop
 8003978:	20001038 	.word	0x20001038
 800397c:	200000e0 	.word	0x200000e0
 8003980:	20001034 	.word	0x20001034
 8003984:	2000005c 	.word	0x2000005c
 8003988:	080043c9 	.word	0x080043c9
 800398c:	080042f5 	.word	0x080042f5
 8003990:	080041e5 	.word	0x080041e5
 8003994:	080042cd 	.word	0x080042cd

08003998 <Standard_SetEndPointFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetEndPointFeature(void)
{
 8003998:	b538      	push	{r3, r4, r5, lr}
  uint32_t    wIndex0;
  uint32_t    Related_Endpoint;
  uint32_t    rEP;
  uint32_t    Status;

  wIndex0 = pInformation->USBwIndex0;
 800399a:	4b29      	ldr	r3, [pc, #164]	; (8003a40 <Standard_SetEndPointFeature+0xa8>)
 800399c:	6819      	ldr	r1, [r3, #0]
 800399e:	794b      	ldrb	r3, [r1, #5]
  rEP = wIndex0 & ~0x80;
  Related_Endpoint = ENDP0 + rEP;

  if (ValBit(pInformation->USBwIndex0, 7))
 80039a0:	f013 0f80 	tst.w	r3, #128	; 0x80
  uint32_t    Related_Endpoint;
  uint32_t    rEP;
  uint32_t    Status;

  wIndex0 = pInformation->USBwIndex0;
  rEP = wIndex0 & ~0x80;
 80039a4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
  Related_Endpoint = ENDP0 + rEP;

  if (ValBit(pInformation->USBwIndex0, 7))
 80039a8:	d12b      	bne.n	8003a02 <Standard_SetEndPointFeature+0x6a>
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
  }
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
 80039aa:	0090      	lsls	r0, r2, #2
 80039ac:	f100 4c80 	add.w	ip, r0, #1073741824	; 0x40000000
 80039b0:	f50c 44b8 	add.w	r4, ip, #23552	; 0x5c00
 80039b4:	6825      	ldr	r5, [r4, #0]
 80039b6:	f405 5540 	and.w	r5, r5, #12288	; 0x3000
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
 80039ba:	4c22      	ldr	r4, [pc, #136]	; (8003a44 <Standard_SetEndPointFeature+0xac>)
 80039bc:	7824      	ldrb	r4, [r4, #0]
 80039be:	42a2      	cmp	r2, r4
 80039c0:	d21d      	bcs.n	80039fe <Standard_SetEndPointFeature+0x66>
      || pInformation->USBwValue != 0 || Status == 0
 80039c2:	884a      	ldrh	r2, [r1, #2]
 80039c4:	b9da      	cbnz	r2, 80039fe <Standard_SetEndPointFeature+0x66>
 80039c6:	b1d5      	cbz	r5, 80039fe <Standard_SetEndPointFeature+0x66>
      || pInformation->Current_Configuration == 0)
 80039c8:	7a89      	ldrb	r1, [r1, #10]
 80039ca:	b319      	cbz	r1, 8003a14 <Standard_SetEndPointFeature+0x7c>
  {
    return USB_UNSUPPORT;
  }
  else
  {
    if (wIndex0 & 0x80)
 80039cc:	f013 0f80 	tst.w	r3, #128	; 0x80
 80039d0:	d022      	beq.n	8003a18 <Standard_SetEndPointFeature+0x80>
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 80039d2:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 80039d6:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 80039da:	6803      	ldr	r3, [r0, #0]
 80039dc:	f648 71bf 	movw	r1, #36799	; 0x8fbf
 80039e0:	ea03 0201 	and.w	r2, r3, r1
 80039e4:	f082 0c10 	eor.w	ip, r2, #16
 80039e8:	f44c 4e00 	orr.w	lr, ip, #32768	; 0x8000
 80039ec:	f04e 0380 	orr.w	r3, lr, #128	; 0x80
 80039f0:	6003      	str	r3, [r0, #0]
    {
      /* OUT endpoint */
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
    }
  }
  pUser_Standard_Requests->User_SetEndPointFeature();
 80039f2:	4815      	ldr	r0, [pc, #84]	; (8003a48 <Standard_SetEndPointFeature+0xb0>)
 80039f4:	6803      	ldr	r3, [r0, #0]
 80039f6:	6999      	ldr	r1, [r3, #24]
 80039f8:	4788      	blx	r1
  return USB_SUCCESS;
 80039fa:	2000      	movs	r0, #0
 80039fc:	bd38      	pop	{r3, r4, r5, pc}

  if (Related_Endpoint >= Device_Table.Total_Endpoint
      || pInformation->USBwValue != 0 || Status == 0
      || pInformation->Current_Configuration == 0)
  {
    return USB_UNSUPPORT;
 80039fe:	2002      	movs	r0, #2
 8003a00:	bd38      	pop	{r3, r4, r5, pc}

  if (ValBit(pInformation->USBwIndex0, 7))
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 8003a02:	0090      	lsls	r0, r2, #2
 8003a04:	f100 4c80 	add.w	ip, r0, #1073741824	; 0x40000000
 8003a08:	f50c 44b8 	add.w	r4, ip, #23552	; 0x5c00
 8003a0c:	6825      	ldr	r5, [r4, #0]
 8003a0e:	f005 0530 	and.w	r5, r5, #48	; 0x30
 8003a12:	e7d2      	b.n	80039ba <Standard_SetEndPointFeature+0x22>

  if (Related_Endpoint >= Device_Table.Total_Endpoint
      || pInformation->USBwValue != 0 || Status == 0
      || pInformation->Current_Configuration == 0)
  {
    return USB_UNSUPPORT;
 8003a14:	2002      	movs	r0, #2
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
    }
  }
  pUser_Standard_Requests->User_SetEndPointFeature();
  return USB_SUCCESS;
}
 8003a16:	bd38      	pop	{r3, r4, r5, pc}
    }

    else
    {
      /* OUT endpoint */
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
 8003a18:	f100 4e80 	add.w	lr, r0, #1073741824	; 0x40000000
 8003a1c:	f50e 4eb8 	add.w	lr, lr, #23552	; 0x5c00
 8003a20:	f8de 2000 	ldr.w	r2, [lr]
 8003a24:	f64b 708f 	movw	r0, #49039	; 0xbf8f
 8003a28:	ea02 0300 	and.w	r3, r2, r0
 8003a2c:	f483 5180 	eor.w	r1, r3, #4096	; 0x1000
 8003a30:	f441 4c00 	orr.w	ip, r1, #32768	; 0x8000
 8003a34:	f04c 0280 	orr.w	r2, ip, #128	; 0x80
 8003a38:	f8ce 2000 	str.w	r2, [lr]
 8003a3c:	e7d9      	b.n	80039f2 <Standard_SetEndPointFeature+0x5a>
 8003a3e:	bf00      	nop
 8003a40:	20001038 	.word	0x20001038
 8003a44:	200000e0 	.word	0x200000e0
 8003a48:	20001034 	.word	0x20001034

08003a4c <Standard_GetDescriptorData>:
*******************************************************************************/
uint8_t *Standard_GetDescriptorData(uint16_t Length, ONE_DESCRIPTOR *pDesc)
{
  uint32_t  wOffset;

  wOffset = pInformation->Ctrl_Info.Usb_wOffset;
 8003a4c:	4b05      	ldr	r3, [pc, #20]	; (8003a64 <Standard_GetDescriptorData+0x18>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	8a5a      	ldrh	r2, [r3, #18]
  if (Length == 0)
 8003a52:	b110      	cbz	r0, 8003a5a <Standard_GetDescriptorData+0xe>
  {
    pInformation->Ctrl_Info.Usb_wLength = pDesc->Descriptor_Size - wOffset;
    return 0;
  }

  return pDesc->Descriptor + wOffset;
 8003a54:	6808      	ldr	r0, [r1, #0]
 8003a56:	1880      	adds	r0, r0, r2
}
 8003a58:	4770      	bx	lr
  uint32_t  wOffset;

  wOffset = pInformation->Ctrl_Info.Usb_wOffset;
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength = pDesc->Descriptor_Size - wOffset;
 8003a5a:	8889      	ldrh	r1, [r1, #4]
 8003a5c:	1a8a      	subs	r2, r1, r2
 8003a5e:	821a      	strh	r2, [r3, #16]
    return 0;
 8003a60:	4770      	bx	lr
 8003a62:	bf00      	nop
 8003a64:	20001038 	.word	0x20001038

08003a68 <Post0_Process>:
* Output         : None.
* Return         : - 0 if the control State is in PAUSE
*                  - 1 if not.
*******************************************************************************/
uint8_t Post0_Process(void)
{
 8003a68:	b508      	push	{r3, lr}
   
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 8003a6a:	490d      	ldr	r1, [pc, #52]	; (8003aa0 <Post0_Process+0x38>)
 8003a6c:	2000      	movs	r0, #0
 8003a6e:	f891 102c 	ldrb.w	r1, [r1, #44]	; 0x2c
 8003a72:	4a0c      	ldr	r2, [pc, #48]	; (8003aa4 <Post0_Process+0x3c>)
 8003a74:	4790      	blx	r2

  if (pInformation->ControlState == STALLED)
 8003a76:	480c      	ldr	r0, [pc, #48]	; (8003aa8 <Post0_Process+0x40>)
 8003a78:	6803      	ldr	r3, [r0, #0]
 8003a7a:	7a18      	ldrb	r0, [r3, #8]
 8003a7c:	2808      	cmp	r0, #8
 8003a7e:	d107      	bne.n	8003a90 <Post0_Process+0x28>
  {
    vSetEPRxStatus(EP_RX_STALL);
 8003a80:	490a      	ldr	r1, [pc, #40]	; (8003aac <Post0_Process+0x44>)
    vSetEPTxStatus(EP_TX_STALL);
 8003a82:	4b0b      	ldr	r3, [pc, #44]	; (8003ab0 <Post0_Process+0x48>)
   
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);

  if (pInformation->ControlState == STALLED)
  {
    vSetEPRxStatus(EP_RX_STALL);
 8003a84:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
    vSetEPTxStatus(EP_TX_STALL);
 8003a88:	2210      	movs	r2, #16
   
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);

  if (pInformation->ControlState == STALLED)
  {
    vSetEPRxStatus(EP_RX_STALL);
 8003a8a:	f8a1 c000 	strh.w	ip, [r1]
    vSetEPTxStatus(EP_TX_STALL);
 8003a8e:	801a      	strh	r2, [r3, #0]
  }

  return (pInformation->ControlState == PAUSE);
}
 8003a90:	f1a0 0009 	sub.w	r0, r0, #9
 8003a94:	f1d0 0e00 	rsbs	lr, r0, #0
 8003a98:	eb4e 0000 	adc.w	r0, lr, r0
 8003a9c:	bd08      	pop	{r3, pc}
 8003a9e:	bf00      	nop
 8003aa0:	2000005c 	.word	0x2000005c
 8003aa4:	080043c9 	.word	0x080043c9
 8003aa8:	20001038 	.word	0x20001038
 8003aac:	2000103e 	.word	0x2000103e
 8003ab0:	20001040 	.word	0x20001040

08003ab4 <Out0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t Out0_Process(void)
{
 8003ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t ControlState = pInformation->ControlState;
 8003ab6:	4d30      	ldr	r5, [pc, #192]	; (8003b78 <Out0_Process+0xc4>)
 8003ab8:	682c      	ldr	r4, [r5, #0]
 8003aba:	7a23      	ldrb	r3, [r4, #8]

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	d007      	beq.n	8003ad0 <Out0_Process+0x1c>
 8003ac0:	2b04      	cmp	r3, #4
 8003ac2:	d005      	beq.n	8003ad0 <Out0_Process+0x1c>
  {
    /* host aborts the transfer before finish */
    ControlState = STALLED;
  }
  else if ((ControlState == OUT_DATA) || (ControlState == LAST_OUT_DATA))
 8003ac4:	2b03      	cmp	r3, #3
 8003ac6:	d008      	beq.n	8003ada <Out0_Process+0x26>
 8003ac8:	2b05      	cmp	r3, #5
 8003aca:	d006      	beq.n	8003ada <Out0_Process+0x26>
  {
    DataStageOut();
    ControlState = pInformation->ControlState; /* may be changed outside the function */
  }

  else if (ControlState == WAIT_STATUS_OUT)
 8003acc:	2b07      	cmp	r3, #7
 8003ace:	d043      	beq.n	8003b58 <Out0_Process+0xa4>
 8003ad0:	2308      	movs	r3, #8
  else
  {
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;
 8003ad2:	7223      	strb	r3, [r4, #8]

  return Post0_Process();
 8003ad4:	4929      	ldr	r1, [pc, #164]	; (8003b7c <Out0_Process+0xc8>)
 8003ad6:	4788      	blx	r1
}
 8003ad8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
  uint32_t save_rLength;

  save_rLength = pEPinfo->Usb_rLength;

  if (pEPinfo->CopyData && save_rLength)
 8003ada:	69a3      	ldr	r3, [r4, #24]
void DataStageOut(void)
{
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
  uint32_t save_rLength;

  save_rLength = pEPinfo->Usb_rLength;
 8003adc:	8a22      	ldrh	r2, [r4, #16]

  if (pEPinfo->CopyData && save_rLength)
 8003ade:	b1c3      	cbz	r3, 8003b12 <Out0_Process+0x5e>
 8003ae0:	b32a      	cbz	r2, 8003b2e <Out0_Process+0x7a>
  {
    uint8_t *Buffer;
    uint32_t Length;

    Length = pEPinfo->PacketSize;
 8003ae2:	8aa6      	ldrh	r6, [r4, #20]
    if (Length > save_rLength)
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
 8003ae4:	4296      	cmp	r6, r2
 8003ae6:	bf28      	it	cs
 8003ae8:	4616      	movcs	r6, r2
 8003aea:	4630      	mov	r0, r6
 8003aec:	4798      	blx	r3
    pEPinfo->Usb_rLength -= Length;
 8003aee:	8a23      	ldrh	r3, [r4, #16]
    pEPinfo->Usb_rOffset += Length;
 8003af0:	f8b4 c012 	ldrh.w	ip, [r4, #18]
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
    pEPinfo->Usb_rLength -= Length;
 8003af4:	1b9a      	subs	r2, r3, r6
    if (Length > save_rLength)
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
 8003af6:	4607      	mov	r7, r0
    pEPinfo->Usb_rLength -= Length;
    pEPinfo->Usb_rOffset += Length;
 8003af8:	eb06 000c 	add.w	r0, r6, ip
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
    pEPinfo->Usb_rLength -= Length;
 8003afc:	8222      	strh	r2, [r4, #16]
    pEPinfo->Usb_rOffset += Length;
 8003afe:	8260      	strh	r0, [r4, #18]
    PMAToUserBufferCopy(Buffer, GetEPRxAddr(ENDP0), Length);
 8003b00:	491f      	ldr	r1, [pc, #124]	; (8003b80 <Out0_Process+0xcc>)
 8003b02:	2000      	movs	r0, #0
 8003b04:	4788      	blx	r1
 8003b06:	4632      	mov	r2, r6
 8003b08:	4601      	mov	r1, r0
 8003b0a:	4b1e      	ldr	r3, [pc, #120]	; (8003b84 <Out0_Process+0xd0>)
 8003b0c:	4638      	mov	r0, r7
 8003b0e:	4798      	blx	r3
 8003b10:	8a22      	ldrh	r2, [r4, #16]

  }

  if (pEPinfo->Usb_rLength != 0)
 8003b12:	b162      	cbz	r2, 8003b2e <Out0_Process+0x7a>
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 8003b14:	4b1c      	ldr	r3, [pc, #112]	; (8003b88 <Out0_Process+0xd4>)
    SetEPTxCount(ENDP0, 0);
 8003b16:	2000      	movs	r0, #0

  }

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 8003b18:	f44f 5e40 	mov.w	lr, #12288	; 0x3000
    SetEPTxCount(ENDP0, 0);
 8003b1c:	4601      	mov	r1, r0
 8003b1e:	4a1b      	ldr	r2, [pc, #108]	; (8003b8c <Out0_Process+0xd8>)

  }

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 8003b20:	f8a3 e000 	strh.w	lr, [r3]
    SetEPTxCount(ENDP0, 0);
 8003b24:	4790      	blx	r2
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
 8003b26:	481a      	ldr	r0, [pc, #104]	; (8003b90 <Out0_Process+0xdc>)
 8003b28:	2130      	movs	r1, #48	; 0x30
 8003b2a:	8a22      	ldrh	r2, [r4, #16]
 8003b2c:	8001      	strh	r1, [r0, #0]
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 8003b2e:	8aa4      	ldrh	r4, [r4, #20]
 8003b30:	4294      	cmp	r4, r2
 8003b32:	d918      	bls.n	8003b66 <Out0_Process+0xb2>
  {
    pInformation->ControlState = OUT_DATA;
  }
  else
  {
    if (pEPinfo->Usb_rLength > 0)
 8003b34:	b9da      	cbnz	r2, 8003b6e <Out0_Process+0xba>
    {
      pInformation->ControlState = LAST_OUT_DATA;
    }
    else if (pEPinfo->Usb_rLength == 0)
    {
      pInformation->ControlState = WAIT_STATUS_IN;
 8003b36:	682c      	ldr	r4, [r5, #0]
 8003b38:	2006      	movs	r0, #6
      USB_StatusIn();
 8003b3a:	4916      	ldr	r1, [pc, #88]	; (8003b94 <Out0_Process+0xe0>)
    {
      pInformation->ControlState = LAST_OUT_DATA;
    }
    else if (pEPinfo->Usb_rLength == 0)
    {
      pInformation->ControlState = WAIT_STATUS_IN;
 8003b3c:	7220      	strb	r0, [r4, #8]
      USB_StatusIn();
 8003b3e:	680b      	ldr	r3, [r1, #0]
 8003b40:	4815      	ldr	r0, [pc, #84]	; (8003b98 <Out0_Process+0xe4>)
 8003b42:	fa1f fc83 	uxth.w	ip, r3
 8003b46:	eb0c 0100 	add.w	r1, ip, r0
 8003b4a:	004b      	lsls	r3, r1, #1
 8003b4c:	4810      	ldr	r0, [pc, #64]	; (8003b90 <Out0_Process+0xdc>)
 8003b4e:	601a      	str	r2, [r3, #0]
 8003b50:	2130      	movs	r1, #48	; 0x30
 8003b52:	7a23      	ldrb	r3, [r4, #8]
 8003b54:	8001      	strh	r1, [r0, #0]
    ControlState = STALLED;
  }
  else if ((ControlState == OUT_DATA) || (ControlState == LAST_OUT_DATA))
  {
    DataStageOut();
    ControlState = pInformation->ControlState; /* may be changed outside the function */
 8003b56:	e7bc      	b.n	8003ad2 <Out0_Process+0x1e>
  }

  else if (ControlState == WAIT_STATUS_OUT)
  {
    (*pProperty->Process_Status_OUT)();
 8003b58:	4b10      	ldr	r3, [pc, #64]	; (8003b9c <Out0_Process+0xe8>)
 8003b5a:	681c      	ldr	r4, [r3, #0]
 8003b5c:	68e2      	ldr	r2, [r4, #12]
 8003b5e:	4790      	blx	r2
 8003b60:	682c      	ldr	r4, [r5, #0]
 8003b62:	2308      	movs	r3, #8
 8003b64:	e7b5      	b.n	8003ad2 <Out0_Process+0x1e>
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
  {
    pInformation->ControlState = OUT_DATA;
 8003b66:	682c      	ldr	r4, [r5, #0]
 8003b68:	2303      	movs	r3, #3
 8003b6a:	7223      	strb	r3, [r4, #8]
 8003b6c:	e7b1      	b.n	8003ad2 <Out0_Process+0x1e>
  }
  else
  {
    if (pEPinfo->Usb_rLength > 0)
    {
      pInformation->ControlState = LAST_OUT_DATA;
 8003b6e:	682c      	ldr	r4, [r5, #0]
 8003b70:	2305      	movs	r3, #5
 8003b72:	7223      	strb	r3, [r4, #8]
 8003b74:	e7ad      	b.n	8003ad2 <Out0_Process+0x1e>
 8003b76:	bf00      	nop
 8003b78:	20001038 	.word	0x20001038
 8003b7c:	08003a69 	.word	0x08003a69
 8003b80:	08004389 	.word	0x08004389
 8003b84:	08004165 	.word	0x08004165
 8003b88:	2000103e 	.word	0x2000103e
 8003b8c:	080043a9 	.word	0x080043a9
 8003b90:	20001040 	.word	0x20001040
 8003b94:	40005c50 	.word	0x40005c50
 8003b98:	20003002 	.word	0x20003002
 8003b9c:	20001010 	.word	0x20001010

08003ba0 <Setup0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t Setup0_Process(void)
{
 8003ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8003ba4:	4e99      	ldr	r6, [pc, #612]	; (8003e0c <Setup0_Process+0x26c>)

  if (pInformation->ControlState != PAUSE)
 8003ba6:	4c9a      	ldr	r4, [pc, #616]	; (8003e10 <Setup0_Process+0x270>)
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8003ba8:	6832      	ldr	r2, [r6, #0]

  if (pInformation->ControlState != PAUSE)
 8003baa:	6826      	ldr	r6, [r4, #0]
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8003bac:	4999      	ldr	r1, [pc, #612]	; (8003e14 <Setup0_Process+0x274>)
 8003bae:	fa1f fc82 	uxth.w	ip, r2

  if (pInformation->ControlState != PAUSE)
 8003bb2:	7a32      	ldrb	r2, [r6, #8]
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8003bb4:	eb0c 0001 	add.w	r0, ip, r1
 8003bb8:	0043      	lsls	r3, r0, #1

  if (pInformation->ControlState != PAUSE)
 8003bba:	2a09      	cmp	r2, #9
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t Setup0_Process(void)
{
 8003bbc:	b082      	sub	sp, #8
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8003bbe:	681b      	ldr	r3, [r3, #0]

  if (pInformation->ControlState != PAUSE)
 8003bc0:	d04a      	beq.n	8003c58 <Setup0_Process+0xb8>
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8003bc2:	b298      	uxth	r0, r3
 8003bc4:	f100 5700 	add.w	r7, r0, #536870912	; 0x20000000
 8003bc8:	f507 5840 	add.w	r8, r7, #12288	; 0x3000
 8003bcc:	ea4f 0848 	mov.w	r8, r8, lsl #1

  if (pInformation->ControlState != PAUSE)
  {
    pInformation->USBbmRequestType = *pBuf.b++; /* bmRequestType */
 8003bd0:	4645      	mov	r5, r8
 8003bd2:	f815 3b01 	ldrb.w	r3, [r5], #1
    pInformation->USBbRequest = *pBuf.b++; /* bRequest */
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwValue = ByteSwap(*pBuf.w++); /* wValue */
 8003bd6:	4f90      	ldr	r7, [pc, #576]	; (8003e18 <Setup0_Process+0x278>)
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */

  if (pInformation->ControlState != PAUSE)
  {
    pInformation->USBbmRequestType = *pBuf.b++; /* bmRequestType */
 8003bd8:	7033      	strb	r3, [r6, #0]
    pInformation->USBbRequest = *pBuf.b++; /* bRequest */
 8003bda:	f898 e001 	ldrb.w	lr, [r8, #1]
 8003bde:	f886 e001 	strb.w	lr, [r6, #1]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwValue = ByteSwap(*pBuf.w++); /* wValue */
 8003be2:	f8b5 0003 	ldrh.w	r0, [r5, #3]
 8003be6:	47b8      	blx	r7
 8003be8:	8070      	strh	r0, [r6, #2]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
 8003bea:	f8b5 0007 	ldrh.w	r0, [r5, #7]
 8003bee:	6825      	ldr	r5, [r4, #0]
 8003bf0:	47b8      	blx	r7
 8003bf2:	80a8      	strh	r0, [r5, #4]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwLength = *pBuf.w; /* wLength */
 8003bf4:	6826      	ldr	r6, [r4, #0]
 8003bf6:	f8b8 300c 	ldrh.w	r3, [r8, #12]
  }

  pInformation->ControlState = SETTING_UP;
 8003bfa:	2101      	movs	r1, #1
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwValue = ByteSwap(*pBuf.w++); /* wValue */
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwLength = *pBuf.w; /* wLength */
 8003bfc:	80f3      	strh	r3, [r6, #6]
  }

  pInformation->ControlState = SETTING_UP;
 8003bfe:	7231      	strb	r1, [r6, #8]
  if (pInformation->USBwLength == 0)
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d02e      	beq.n	8003c62 <Setup0_Process+0xc2>
*******************************************************************************/
void Data_Setup0(void)
{
  uint8_t *(*CopyRoutine)(uint16_t);
  RESULT Result;
  uint32_t Request_No = pInformation->USBbRequest;
 8003c04:	7871      	ldrb	r1, [r6, #1]

  CopyRoutine = NULL;
  wOffset = 0;

  /*GET DESCRIPTOR*/
  if (Request_No == GET_DESCRIPTOR)
 8003c06:	2906      	cmp	r1, #6
 8003c08:	f000 808e 	beq.w	8003d28 <Setup0_Process+0x188>
      }  /* End of GET_DESCRIPTOR */
    }
  }

  /*GET STATUS*/
  else if ((Request_No == GET_STATUS) && (pInformation->USBwValue == 0)
 8003c0c:	2900      	cmp	r1, #0
 8003c0e:	d149      	bne.n	8003ca4 <Setup0_Process+0x104>
 8003c10:	8872      	ldrh	r2, [r6, #2]
 8003c12:	2a00      	cmp	r2, #0
 8003c14:	f000 809f 	beq.w	8003d56 <Setup0_Process+0x1b6>
 8003c18:	4d80      	ldr	r5, [pc, #512]	; (8003e1c <Setup0_Process+0x27c>)
    (*CopyRoutine)(0);
    Result = USB_SUCCESS;
  }
  else
  {
    Result = (*pProperty->Class_Data_Setup)(pInformation->USBbRequest);
 8003c1a:	682b      	ldr	r3, [r5, #0]
 8003c1c:	4608      	mov	r0, r1
 8003c1e:	691a      	ldr	r2, [r3, #16]
 8003c20:	4790      	blx	r2
    if (Result == USB_NOT_READY)
 8003c22:	2803      	cmp	r0, #3
 8003c24:	f000 8112 	beq.w	8003e4c <Setup0_Process+0x2ac>
      pInformation->ControlState = PAUSE;
      return;
    }
  }

  if (pInformation->Ctrl_Info.Usb_wLength == 0xFFFF)
 8003c28:	6823      	ldr	r3, [r4, #0]
 8003c2a:	f64f 7cff 	movw	ip, #65535	; 0xffff
 8003c2e:	8a1a      	ldrh	r2, [r3, #16]
 8003c30:	4562      	cmp	r2, ip
 8003c32:	d04a      	beq.n	8003cca <Setup0_Process+0x12a>
  {
    /* Data is not ready, wait it */
    pInformation->ControlState = PAUSE;
    return;
  }
  if ((Result == USB_UNSUPPORT) || (pInformation->Ctrl_Info.Usb_wLength == 0))
 8003c34:	2802      	cmp	r0, #2
 8003c36:	d02e      	beq.n	8003c96 <Setup0_Process+0xf6>
 8003c38:	2a00      	cmp	r2, #0
 8003c3a:	d02c      	beq.n	8003c96 <Setup0_Process+0xf6>
    pInformation->ControlState = STALLED;
    return;
  }


  if (ValBit(pInformation->USBbmRequestType, 7))
 8003c3c:	f993 e000 	ldrsb.w	lr, [r3]
 8003c40:	f1be 0f00 	cmp.w	lr, #0
 8003c44:	f2c0 80bd 	blt.w	8003dc2 <Setup0_Process+0x222>
    DataStageIn();
  }
  else
  {
    pInformation->ControlState = OUT_DATA;
    vSetEPRxStatus(EP_RX_VALID); /* enable for next data reception */
 8003c48:	4975      	ldr	r1, [pc, #468]	; (8003e20 <Setup0_Process+0x280>)
    pInformation->Ctrl_Info.PacketSize = pProperty->MaxPacketSize;
    DataStageIn();
  }
  else
  {
    pInformation->ControlState = OUT_DATA;
 8003c4a:	2003      	movs	r0, #3
    vSetEPRxStatus(EP_RX_VALID); /* enable for next data reception */
 8003c4c:	f44f 5e40 	mov.w	lr, #12288	; 0x3000
    pInformation->Ctrl_Info.PacketSize = pProperty->MaxPacketSize;
    DataStageIn();
  }
  else
  {
    pInformation->ControlState = OUT_DATA;
 8003c50:	7218      	strb	r0, [r3, #8]
    vSetEPRxStatus(EP_RX_VALID); /* enable for next data reception */
 8003c52:	f8a1 e000 	strh.w	lr, [r1]
 8003c56:	e020      	b.n	8003c9a <Setup0_Process+0xfa>
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */

  if (pInformation->ControlState != PAUSE)
 8003c58:	88f3      	ldrh	r3, [r6, #6]
    pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwLength = *pBuf.w; /* wLength */
  }

  pInformation->ControlState = SETTING_UP;
 8003c5a:	2101      	movs	r1, #1
 8003c5c:	7231      	strb	r1, [r6, #8]
  if (pInformation->USBwLength == 0)
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d1d0      	bne.n	8003c04 <Setup0_Process+0x64>
{
  RESULT Result = USB_UNSUPPORT;
  uint32_t RequestNo = pInformation->USBbRequest;
  uint32_t ControlState;

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8003c62:	f896 c000 	ldrb.w	ip, [r6]
* Return         : None.
*******************************************************************************/
void NoData_Setup0(void)
{
  RESULT Result = USB_UNSUPPORT;
  uint32_t RequestNo = pInformation->USBbRequest;
 8003c66:	7875      	ldrb	r5, [r6, #1]
  uint32_t ControlState;

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8003c68:	f01c 037f 	ands.w	r3, ip, #127	; 0x7f
 8003c6c:	d030      	beq.n	8003cd0 <Setup0_Process+0x130>
    }

  }

  /* Interface Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	f000 80bd 	beq.w	8003dee <Setup0_Process+0x24e>
      Result = Standard_SetInterface();
    }
  }

  /* EndPoint Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8003c74:	2b02      	cmp	r3, #2
 8003c76:	f000 8101 	beq.w	8003e7c <Setup0_Process+0x2dc>
  }


  if (Result != USB_SUCCESS)
  {
    Result = (*pProperty->Class_NoData_Setup)(RequestNo);
 8003c7a:	4b68      	ldr	r3, [pc, #416]	; (8003e1c <Setup0_Process+0x27c>)
 8003c7c:	4628      	mov	r0, r5
 8003c7e:	681e      	ldr	r6, [r3, #0]
 8003c80:	6972      	ldr	r2, [r6, #20]
 8003c82:	4790      	blx	r2
    if (Result == USB_NOT_READY)
 8003c84:	2803      	cmp	r0, #3
 8003c86:	f000 8123 	beq.w	8003ed0 <Setup0_Process+0x330>
      ControlState = PAUSE;
      goto exit_NoData_Setup0;
    }
  }

  if (Result != USB_SUCCESS)
 8003c8a:	2800      	cmp	r0, #0
 8003c8c:	d03b      	beq.n	8003d06 <Setup0_Process+0x166>
 8003c8e:	6826      	ldr	r6, [r4, #0]
 8003c90:	2308      	movs	r3, #8
  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();

exit_NoData_Setup0:
  pInformation->ControlState = ControlState;
 8003c92:	7233      	strb	r3, [r6, #8]
 8003c94:	e001      	b.n	8003c9a <Setup0_Process+0xfa>
    return;
  }
  if ((Result == USB_UNSUPPORT) || (pInformation->Ctrl_Info.Usb_wLength == 0))
  {
    /* Unsupported request */
    pInformation->ControlState = STALLED;
 8003c96:	2108      	movs	r1, #8
 8003c98:	7219      	strb	r1, [r3, #8]
  else
  {
    /* Setup with data stage */
    Data_Setup0();
  }
  return Post0_Process();
 8003c9a:	4a62      	ldr	r2, [pc, #392]	; (8003e24 <Setup0_Process+0x284>)
 8003c9c:	4790      	blx	r2
}
 8003c9e:	b002      	add	sp, #8
 8003ca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }

  }

  /*GET CONFIGURATION*/
  else if (Request_No == GET_CONFIGURATION)
 8003ca4:	2908      	cmp	r1, #8
 8003ca6:	d169      	bne.n	8003d7c <Setup0_Process+0x1dc>
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8003ca8:	7832      	ldrb	r2, [r6, #0]
 8003caa:	f012 0f7f 	tst.w	r2, #127	; 0x7f
 8003cae:	d1b3      	bne.n	8003c18 <Setup0_Process+0x78>
    {
      CopyRoutine = Standard_GetConfiguration;
 8003cb0:	4b5d      	ldr	r3, [pc, #372]	; (8003e28 <Setup0_Process+0x288>)

  }
  
  if (CopyRoutine)
  {
    pInformation->Ctrl_Info.Usb_wOffset = wOffset;
 8003cb2:	2100      	movs	r1, #0
    pInformation->Ctrl_Info.CopyData = CopyRoutine;
 8003cb4:	61b3      	str	r3, [r6, #24]
    /* sb in the original the cast to word was directly */
    /* now the cast is made step by step */
    (*CopyRoutine)(0);
 8003cb6:	2000      	movs	r0, #0

  }
  
  if (CopyRoutine)
  {
    pInformation->Ctrl_Info.Usb_wOffset = wOffset;
 8003cb8:	8271      	strh	r1, [r6, #18]
    pInformation->Ctrl_Info.CopyData = CopyRoutine;
    /* sb in the original the cast to word was directly */
    /* now the cast is made step by step */
    (*CopyRoutine)(0);
 8003cba:	4798      	blx	r3
      pInformation->ControlState = PAUSE;
      return;
    }
  }

  if (pInformation->Ctrl_Info.Usb_wLength == 0xFFFF)
 8003cbc:	6823      	ldr	r3, [r4, #0]
 8003cbe:	f64f 7cff 	movw	ip, #65535	; 0xffff
 8003cc2:	8a1a      	ldrh	r2, [r3, #16]
    pInformation->Ctrl_Info.Usb_wOffset = wOffset;
    pInformation->Ctrl_Info.CopyData = CopyRoutine;
    /* sb in the original the cast to word was directly */
    /* now the cast is made step by step */
    (*CopyRoutine)(0);
    Result = USB_SUCCESS;
 8003cc4:	2000      	movs	r0, #0
      pInformation->ControlState = PAUSE;
      return;
    }
  }

  if (pInformation->Ctrl_Info.Usb_wLength == 0xFFFF)
 8003cc6:	4562      	cmp	r2, ip
 8003cc8:	d1b4      	bne.n	8003c34 <Setup0_Process+0x94>
  {
    /* Data is not ready, wait it */
    pInformation->ControlState = PAUSE;
 8003cca:	2209      	movs	r2, #9
 8003ccc:	721a      	strb	r2, [r3, #8]
 8003cce:	e7e4      	b.n	8003c9a <Setup0_Process+0xfa>

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
  {
    /* Device Request*/
    /* SET_CONFIGURATION*/
    if (RequestNo == SET_CONFIGURATION)
 8003cd0:	2d09      	cmp	r5, #9
 8003cd2:	f000 80f3 	beq.w	8003ebc <Setup0_Process+0x31c>
    {
      Result = Standard_SetConfiguration();
    }

    /*SET ADDRESS*/
    else if (RequestNo == SET_ADDRESS)
 8003cd6:	2d05      	cmp	r5, #5
 8003cd8:	f000 80c0 	beq.w	8003e5c <Setup0_Process+0x2bc>
      {
        Result = USB_SUCCESS;
      }
    }
    /*SET FEATURE for Device*/
    else if (RequestNo == SET_FEATURE)
 8003cdc:	2d03      	cmp	r5, #3
 8003cde:	f000 80d9 	beq.w	8003e94 <Setup0_Process+0x2f4>
      {
        Result = USB_UNSUPPORT;
      }
    }
    /*Clear FEATURE for Device */
    else if (RequestNo == CLEAR_FEATURE)
 8003ce2:	2d01      	cmp	r5, #1
 8003ce4:	d1c9      	bne.n	8003c7a <Setup0_Process+0xda>
    {
      if (pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP
 8003ce6:	f896 c003 	ldrb.w	ip, [r6, #3]
 8003cea:	f1bc 0f01 	cmp.w	ip, #1
 8003cee:	d1c4      	bne.n	8003c7a <Setup0_Process+0xda>
          && pInformation->USBwIndex == 0
 8003cf0:	88b2      	ldrh	r2, [r6, #4]
 8003cf2:	2a00      	cmp	r2, #0
 8003cf4:	d1c1      	bne.n	8003c7a <Setup0_Process+0xda>
          && ValBit(pInformation->Current_Feature, 5))
 8003cf6:	7a76      	ldrb	r6, [r6, #9]
 8003cf8:	f016 0f20 	tst.w	r6, #32
 8003cfc:	d0bd      	beq.n	8003c7a <Setup0_Process+0xda>
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
  {
    /*CLEAR FEATURE for EndPoint*/
    if (RequestNo == CLEAR_FEATURE)
    {
      Result = Standard_ClearFeature();
 8003cfe:	484b      	ldr	r0, [pc, #300]	; (8003e2c <Setup0_Process+0x28c>)
 8003d00:	4780      	blx	r0
  {
    Result = USB_UNSUPPORT;
  }


  if (Result != USB_SUCCESS)
 8003d02:	2800      	cmp	r0, #0
 8003d04:	d1b9      	bne.n	8003c7a <Setup0_Process+0xda>
    goto exit_NoData_Setup0;
  }

  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();
 8003d06:	4a41      	ldr	r2, [pc, #260]	; (8003e0c <Setup0_Process+0x26c>)
 8003d08:	4849      	ldr	r0, [pc, #292]	; (8003e30 <Setup0_Process+0x290>)
 8003d0a:	6811      	ldr	r1, [r2, #0]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	fa1f fe81 	uxth.w	lr, r1
 8003d12:	eb0e 0300 	add.w	r3, lr, r0
 8003d16:	005e      	lsls	r6, r3, #1
 8003d18:	6032      	str	r2, [r6, #0]
 8003d1a:	4946      	ldr	r1, [pc, #280]	; (8003e34 <Setup0_Process+0x294>)
 8003d1c:	6826      	ldr	r6, [r4, #0]
 8003d1e:	2030      	movs	r0, #48	; 0x30
 8003d20:	2306      	movs	r3, #6
 8003d22:	8008      	strh	r0, [r1, #0]

exit_NoData_Setup0:
  pInformation->ControlState = ControlState;
 8003d24:	7233      	strb	r3, [r6, #8]
 8003d26:	e7b8      	b.n	8003c9a <Setup0_Process+0xfa>
  wOffset = 0;

  /*GET DESCRIPTOR*/
  if (Request_No == GET_DESCRIPTOR)
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8003d28:	7835      	ldrb	r5, [r6, #0]
 8003d2a:	f015 0f7f 	tst.w	r5, #127	; 0x7f
 8003d2e:	f47f af73 	bne.w	8003c18 <Setup0_Process+0x78>
    {
      uint8_t wValue1 = pInformation->USBwValue1;
 8003d32:	78b3      	ldrb	r3, [r6, #2]
      if (wValue1 == DEVICE_DESCRIPTOR)
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	f000 80c7 	beq.w	8003ec8 <Setup0_Process+0x328>
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
      }
      else if (wValue1 == CONFIG_DESCRIPTOR)
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	f000 808a 	beq.w	8003e54 <Setup0_Process+0x2b4>
      {
        CopyRoutine = pProperty->GetConfigDescriptor;
      }
      else if (wValue1 == STRING_DESCRIPTOR)
 8003d40:	2b03      	cmp	r3, #3
 8003d42:	f47f af69 	bne.w	8003c18 <Setup0_Process+0x78>
      {
        CopyRoutine = pProperty->GetStringDescriptor;
 8003d46:	4d35      	ldr	r5, [pc, #212]	; (8003e1c <Setup0_Process+0x27c>)
 8003d48:	6829      	ldr	r1, [r5, #0]
 8003d4a:	6a4b      	ldr	r3, [r1, #36]	; 0x24
      CopyRoutine = Standard_GetInterface;
    }

  }
  
  if (CopyRoutine)
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d1b0      	bne.n	8003cb2 <Setup0_Process+0x112>
  {
    pInformation->Ctrl_Info.Usb_wOffset = wOffset;
    pInformation->Ctrl_Info.CopyData = CopyRoutine;
    /* sb in the original the cast to word was directly */
    /* now the cast is made step by step */
    (*CopyRoutine)(0);
 8003d50:	6820      	ldr	r0, [r4, #0]
 8003d52:	7841      	ldrb	r1, [r0, #1]
 8003d54:	e761      	b.n	8003c1a <Setup0_Process+0x7a>
  }

  /*GET STATUS*/
  else if ((Request_No == GET_STATUS) && (pInformation->USBwValue == 0)
           && (pInformation->USBwLength == 0x0002)
           && (pInformation->USBwIndex1 == 0))
 8003d56:	6873      	ldr	r3, [r6, #4]
 8003d58:	f423 4c7f 	bic.w	ip, r3, #65280	; 0xff00
 8003d5c:	f5bc 3f00 	cmp.w	ip, #131072	; 0x20000
 8003d60:	f47f af5a 	bne.w	8003c18 <Setup0_Process+0x78>
  {
    /* GET STATUS for Device*/
    if ((Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8003d64:	f896 e000 	ldrb.w	lr, [r6]
 8003d68:	f01e 037f 	ands.w	r3, lr, #127	; 0x7f
 8003d6c:	f040 80b4 	bne.w	8003ed8 <Setup0_Process+0x338>
        && (pInformation->USBwIndex == 0))
 8003d70:	88b0      	ldrh	r0, [r6, #4]
 8003d72:	2800      	cmp	r0, #0
 8003d74:	f47f af50 	bne.w	8003c18 <Setup0_Process+0x78>
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
          && (Status != 0))
      {
        CopyRoutine = Standard_GetStatus;
 8003d78:	4b2f      	ldr	r3, [pc, #188]	; (8003e38 <Setup0_Process+0x298>)
 8003d7a:	e79a      	b.n	8003cb2 <Setup0_Process+0x112>
    {
      CopyRoutine = Standard_GetConfiguration;
    }
  }
  /*GET INTERFACE*/
  else if (Request_No == GET_INTERFACE)
 8003d7c:	290a      	cmp	r1, #10
 8003d7e:	f47f af4b 	bne.w	8003c18 <Setup0_Process+0x78>
  {
    if ((Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8003d82:	7835      	ldrb	r5, [r6, #0]
 8003d84:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	f47f af45 	bne.w	8003c18 <Setup0_Process+0x78>
        && (pInformation->Current_Configuration != 0) && (pInformation->USBwValue == 0)
 8003d8e:	7ab0      	ldrb	r0, [r6, #10]
 8003d90:	2800      	cmp	r0, #0
 8003d92:	f43f af41 	beq.w	8003c18 <Setup0_Process+0x78>
 8003d96:	8872      	ldrh	r2, [r6, #2]
 8003d98:	2a00      	cmp	r2, #0
 8003d9a:	f47f af3d 	bne.w	8003c18 <Setup0_Process+0x78>
        && (pInformation->USBwIndex1 == 0) && (pInformation->USBwLength == 0x0001)
 8003d9e:	6873      	ldr	r3, [r6, #4]
 8003da0:	f423 4e7f 	bic.w	lr, r3, #65280	; 0xff00
 8003da4:	f5be 3f80 	cmp.w	lr, #65536	; 0x10000
 8003da8:	f47f af36 	bne.w	8003c18 <Setup0_Process+0x78>
        && ((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS))
 8003dac:	4d1b      	ldr	r5, [pc, #108]	; (8003e1c <Setup0_Process+0x27c>)
 8003dae:	4611      	mov	r1, r2
 8003db0:	682b      	ldr	r3, [r5, #0]
 8003db2:	7970      	ldrb	r0, [r6, #5]
 8003db4:	699a      	ldr	r2, [r3, #24]
 8003db6:	4790      	blx	r2
 8003db8:	2800      	cmp	r0, #0
 8003dba:	d1c9      	bne.n	8003d50 <Setup0_Process+0x1b0>
 8003dbc:	6826      	ldr	r6, [r4, #0]
    {
      CopyRoutine = Standard_GetInterface;
 8003dbe:	4b1f      	ldr	r3, [pc, #124]	; (8003e3c <Setup0_Process+0x29c>)
 8003dc0:	e777      	b.n	8003cb2 <Setup0_Process+0x112>


  if (ValBit(pInformation->USBbmRequestType, 7))
  {
    /* Device ==> Host */
    __IO uint32_t wLength = pInformation->USBwLength;
 8003dc2:	88d9      	ldrh	r1, [r3, #6]
 8003dc4:	9101      	str	r1, [sp, #4]
     
    /* Restrict the data length to be the one host asks for */
    if (pInformation->Ctrl_Info.Usb_wLength > wLength)
 8003dc6:	9801      	ldr	r0, [sp, #4]
 8003dc8:	4282      	cmp	r2, r0
 8003dca:	d818      	bhi.n	8003dfe <Setup0_Process+0x25e>
    {
      pInformation->Ctrl_Info.Usb_wLength = wLength;
    }
    
    else if (pInformation->Ctrl_Info.Usb_wLength < pInformation->USBwLength)
 8003dcc:	428a      	cmp	r2, r1
 8003dce:	f080 80a6 	bcs.w	8003f1e <Setup0_Process+0x37e>
    {
      if (pInformation->Ctrl_Info.Usb_wLength < pProperty->MaxPacketSize)
 8003dd2:	4912      	ldr	r1, [pc, #72]	; (8003e1c <Setup0_Process+0x27c>)
 8003dd4:	6808      	ldr	r0, [r1, #0]
 8003dd6:	f890 102c 	ldrb.w	r1, [r0, #44]	; 0x2c
 8003dda:	428a      	cmp	r2, r1
 8003ddc:	f080 80a4 	bcs.w	8003f28 <Setup0_Process+0x388>
      {
        Data_Mul_MaxPacketSize = FALSE;
 8003de0:	4a17      	ldr	r2, [pc, #92]	; (8003e40 <Setup0_Process+0x2a0>)
 8003de2:	2000      	movs	r0, #0
 8003de4:	7010      	strb	r0, [r2, #0]
      {
        Data_Mul_MaxPacketSize = TRUE;
      }
    }   

    pInformation->Ctrl_Info.PacketSize = pProperty->MaxPacketSize;
 8003de6:	8299      	strh	r1, [r3, #20]
    DataStageIn();
 8003de8:	4b16      	ldr	r3, [pc, #88]	; (8003e44 <Setup0_Process+0x2a4>)
 8003dea:	4798      	blx	r3
 8003dec:	e755      	b.n	8003c9a <Setup0_Process+0xfa>

  /* Interface Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
  {
    /*SET INTERFACE*/
    if (RequestNo == SET_INTERFACE)
 8003dee:	2d0b      	cmp	r5, #11
 8003df0:	f47f af43 	bne.w	8003c7a <Setup0_Process+0xda>
    {
      Result = Standard_SetInterface();
 8003df4:	4b14      	ldr	r3, [pc, #80]	; (8003e48 <Setup0_Process+0x2a8>)
 8003df6:	4798      	blx	r3
  {
    Result = USB_UNSUPPORT;
  }


  if (Result != USB_SUCCESS)
 8003df8:	2800      	cmp	r0, #0
 8003dfa:	d084      	beq.n	8003d06 <Setup0_Process+0x166>
 8003dfc:	e73d      	b.n	8003c7a <Setup0_Process+0xda>
    __IO uint32_t wLength = pInformation->USBwLength;
     
    /* Restrict the data length to be the one host asks for */
    if (pInformation->Ctrl_Info.Usb_wLength > wLength)
    {
      pInformation->Ctrl_Info.Usb_wLength = wLength;
 8003dfe:	4807      	ldr	r0, [pc, #28]	; (8003e1c <Setup0_Process+0x27c>)
 8003e00:	9901      	ldr	r1, [sp, #4]
 8003e02:	6802      	ldr	r2, [r0, #0]
 8003e04:	8219      	strh	r1, [r3, #16]
 8003e06:	f892 102c 	ldrb.w	r1, [r2, #44]	; 0x2c
 8003e0a:	e7ec      	b.n	8003de6 <Setup0_Process+0x246>
 8003e0c:	40005c50 	.word	0x40005c50
 8003e10:	20001038 	.word	0x20001038
 8003e14:	20003004 	.word	0x20003004
 8003e18:	08004435 	.word	0x08004435
 8003e1c:	20001010 	.word	0x20001010
 8003e20:	2000103e 	.word	0x2000103e
 8003e24:	08003a69 	.word	0x08003a69
 8003e28:	08003635 	.word	0x08003635
 8003e2c:	0800388d 	.word	0x0800388d
 8003e30:	20003002 	.word	0x20003002
 8003e34:	20001040 	.word	0x20001040
 8003e38:	08003685 	.word	0x08003685
 8003e3c:	0800365d 	.word	0x0800365d
 8003e40:	200002b0 	.word	0x200002b0
 8003e44:	08003741 	.word	0x08003741
 8003e48:	0800383d 	.word	0x0800383d
  else
  {
    Result = (*pProperty->Class_Data_Setup)(pInformation->USBbRequest);
    if (Result == USB_NOT_READY)
    {
      pInformation->ControlState = PAUSE;
 8003e4c:	6820      	ldr	r0, [r4, #0]
 8003e4e:	2109      	movs	r1, #9
 8003e50:	7201      	strb	r1, [r0, #8]
 8003e52:	e722      	b.n	8003c9a <Setup0_Process+0xfa>
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
      }
      else if (wValue1 == CONFIG_DESCRIPTOR)
      {
        CopyRoutine = pProperty->GetConfigDescriptor;
 8003e54:	4d46      	ldr	r5, [pc, #280]	; (8003f70 <Setup0_Process+0x3d0>)
 8003e56:	6828      	ldr	r0, [r5, #0]
 8003e58:	6a03      	ldr	r3, [r0, #32]
 8003e5a:	e777      	b.n	8003d4c <Setup0_Process+0x1ac>
    }

    /*SET ADDRESS*/
    else if (RequestNo == SET_ADDRESS)
    {
      if ((pInformation->USBwValue0 > 127) || (pInformation->USBwValue1 != 0)
 8003e5c:	f996 e003 	ldrsb.w	lr, [r6, #3]
 8003e60:	f1be 0f00 	cmp.w	lr, #0
 8003e64:	db07      	blt.n	8003e76 <Setup0_Process+0x2d6>
 8003e66:	78b3      	ldrb	r3, [r6, #2]
 8003e68:	b92b      	cbnz	r3, 8003e76 <Setup0_Process+0x2d6>
          || (pInformation->USBwIndex != 0)
 8003e6a:	88b0      	ldrh	r0, [r6, #4]
 8003e6c:	b918      	cbnz	r0, 8003e76 <Setup0_Process+0x2d6>
          || (pInformation->Current_Configuration != 0))
 8003e6e:	7ab1      	ldrb	r1, [r6, #10]
 8003e70:	2900      	cmp	r1, #0
 8003e72:	f43f af48 	beq.w	8003d06 <Setup0_Process+0x166>
 8003e76:	2308      	movs	r3, #8
  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();

exit_NoData_Setup0:
  pInformation->ControlState = ControlState;
 8003e78:	7233      	strb	r3, [r6, #8]
 8003e7a:	e70e      	b.n	8003c9a <Setup0_Process+0xfa>

  /* EndPoint Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
  {
    /*CLEAR FEATURE for EndPoint*/
    if (RequestNo == CLEAR_FEATURE)
 8003e7c:	2d01      	cmp	r5, #1
 8003e7e:	f43f af3e 	beq.w	8003cfe <Setup0_Process+0x15e>
    {
      Result = Standard_ClearFeature();
    }
    /* SET FEATURE for EndPoint*/
    else if (RequestNo == SET_FEATURE)
 8003e82:	2d03      	cmp	r5, #3
 8003e84:	f47f aef9 	bne.w	8003c7a <Setup0_Process+0xda>
    {
      Result = Standard_SetEndPointFeature();
 8003e88:	493a      	ldr	r1, [pc, #232]	; (8003f74 <Setup0_Process+0x3d4>)
 8003e8a:	4788      	blx	r1
  {
    Result = USB_UNSUPPORT;
  }


  if (Result != USB_SUCCESS)
 8003e8c:	2800      	cmp	r0, #0
 8003e8e:	f43f af3a 	beq.w	8003d06 <Setup0_Process+0x166>
 8003e92:	e6f2      	b.n	8003c7a <Setup0_Process+0xda>
      }
    }
    /*SET FEATURE for Device*/
    else if (RequestNo == SET_FEATURE)
    {
      if ((pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP) \
 8003e94:	f896 c003 	ldrb.w	ip, [r6, #3]
 8003e98:	f1bc 0f01 	cmp.w	ip, #1
 8003e9c:	f47f aeed 	bne.w	8003c7a <Setup0_Process+0xda>
          && (pInformation->USBwIndex == 0))
 8003ea0:	88b2      	ldrh	r2, [r6, #4]
 8003ea2:	2a00      	cmp	r2, #0
 8003ea4:	f47f aee9 	bne.w	8003c7a <Setup0_Process+0xda>
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetDeviceFeature(void)
{
  SetBit(pInformation->Current_Feature, 5);
 8003ea8:	7a71      	ldrb	r1, [r6, #9]
  pUser_Standard_Requests->User_SetDeviceFeature();
 8003eaa:	4833      	ldr	r0, [pc, #204]	; (8003f78 <Setup0_Process+0x3d8>)
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetDeviceFeature(void)
{
  SetBit(pInformation->Current_Feature, 5);
 8003eac:	f041 0e20 	orr.w	lr, r1, #32
 8003eb0:	f886 e009 	strb.w	lr, [r6, #9]
  pUser_Standard_Requests->User_SetDeviceFeature();
 8003eb4:	6803      	ldr	r3, [r0, #0]
 8003eb6:	69de      	ldr	r6, [r3, #28]
 8003eb8:	47b0      	blx	r6
 8003eba:	e724      	b.n	8003d06 <Setup0_Process+0x166>
  {
    /* Device Request*/
    /* SET_CONFIGURATION*/
    if (RequestNo == SET_CONFIGURATION)
    {
      Result = Standard_SetConfiguration();
 8003ebc:	4a2f      	ldr	r2, [pc, #188]	; (8003f7c <Setup0_Process+0x3dc>)
 8003ebe:	4790      	blx	r2
  {
    Result = USB_UNSUPPORT;
  }


  if (Result != USB_SUCCESS)
 8003ec0:	2800      	cmp	r0, #0
 8003ec2:	f43f af20 	beq.w	8003d06 <Setup0_Process+0x166>
 8003ec6:	e6d8      	b.n	8003c7a <Setup0_Process+0xda>
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
    {
      uint8_t wValue1 = pInformation->USBwValue1;
      if (wValue1 == DEVICE_DESCRIPTOR)
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
 8003ec8:	4d29      	ldr	r5, [pc, #164]	; (8003f70 <Setup0_Process+0x3d0>)
 8003eca:	682b      	ldr	r3, [r5, #0]
 8003ecc:	69db      	ldr	r3, [r3, #28]
 8003ece:	e73d      	b.n	8003d4c <Setup0_Process+0x1ac>


  if (Result != USB_SUCCESS)
  {
    Result = (*pProperty->Class_NoData_Setup)(RequestNo);
    if (Result == USB_NOT_READY)
 8003ed0:	6826      	ldr	r6, [r4, #0]
 8003ed2:	2309      	movs	r3, #9
  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();

exit_NoData_Setup0:
  pInformation->ControlState = ControlState;
 8003ed4:	7233      	strb	r3, [r6, #8]
 8003ed6:	e6e0      	b.n	8003c9a <Setup0_Process+0xfa>
    {
      CopyRoutine = Standard_GetStatus;
    }

    /* GET STATUS for Interface*/
    else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d030      	beq.n	8003f3e <Setup0_Process+0x39e>
        CopyRoutine = Standard_GetStatus;
      }
    }

    /* GET STATUS for EndPoint*/
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	f47f ae9b 	bne.w	8003c18 <Setup0_Process+0x78>
    {
      Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
 8003ee2:	7973      	ldrb	r3, [r6, #5]
      Reserved = pInformation->USBwIndex0 & 0x70;

      if (ValBit(pInformation->USBwIndex0, 7))
 8003ee4:	f013 0f80 	tst.w	r3, #128	; 0x80
    }

    /* GET STATUS for EndPoint*/
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
    {
      Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
 8003ee8:	f003 020f 	and.w	r2, r3, #15
      Reserved = pInformation->USBwIndex0 & 0x70;

      if (ValBit(pInformation->USBwIndex0, 7))
 8003eec:	d136      	bne.n	8003f5c <Setup0_Process+0x3bc>
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
      }
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
 8003eee:	0090      	lsls	r0, r2, #2
 8003ef0:	f100 4e80 	add.w	lr, r0, #1073741824	; 0x40000000
 8003ef4:	f50e 4cb8 	add.w	ip, lr, #23552	; 0x5c00
 8003ef8:	f8dc 5000 	ldr.w	r5, [ip]
 8003efc:	f405 5540 	and.w	r5, r5, #12288	; 0x3000
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 8003f00:	481f      	ldr	r0, [pc, #124]	; (8003f80 <Setup0_Process+0x3e0>)
 8003f02:	f890 c000 	ldrb.w	ip, [r0]
 8003f06:	4562      	cmp	r2, ip
 8003f08:	f4bf ae86 	bcs.w	8003c18 <Setup0_Process+0x78>
 8003f0c:	f013 0f70 	tst.w	r3, #112	; 0x70
 8003f10:	f47f ae82 	bne.w	8003c18 <Setup0_Process+0x78>
          && (Status != 0))
 8003f14:	2d00      	cmp	r5, #0
 8003f16:	f43f ae7f 	beq.w	8003c18 <Setup0_Process+0x78>
      {
        CopyRoutine = Standard_GetStatus;
 8003f1a:	4b1a      	ldr	r3, [pc, #104]	; (8003f84 <Setup0_Process+0x3e4>)
 8003f1c:	e6c9      	b.n	8003cb2 <Setup0_Process+0x112>
    if (pInformation->Ctrl_Info.Usb_wLength > wLength)
    {
      pInformation->Ctrl_Info.Usb_wLength = wLength;
    }
    
    else if (pInformation->Ctrl_Info.Usb_wLength < pInformation->USBwLength)
 8003f1e:	4914      	ldr	r1, [pc, #80]	; (8003f70 <Setup0_Process+0x3d0>)
 8003f20:	680a      	ldr	r2, [r1, #0]
 8003f22:	f892 102c 	ldrb.w	r1, [r2, #44]	; 0x2c
 8003f26:	e75e      	b.n	8003de6 <Setup0_Process+0x246>
    {
      if (pInformation->Ctrl_Info.Usb_wLength < pProperty->MaxPacketSize)
      {
        Data_Mul_MaxPacketSize = FALSE;
      }
      else if ((pInformation->Ctrl_Info.Usb_wLength % pProperty->MaxPacketSize) == 0)
 8003f28:	fb92 fcf1 	sdiv	ip, r2, r1
 8003f2c:	fb01 201c 	mls	r0, r1, ip, r2
 8003f30:	2800      	cmp	r0, #0
 8003f32:	f47f af58 	bne.w	8003de6 <Setup0_Process+0x246>
      {
        Data_Mul_MaxPacketSize = TRUE;
 8003f36:	4a14      	ldr	r2, [pc, #80]	; (8003f88 <Setup0_Process+0x3e8>)
 8003f38:	2001      	movs	r0, #1
 8003f3a:	7010      	strb	r0, [r2, #0]
 8003f3c:	e753      	b.n	8003de6 <Setup0_Process+0x246>
    }

    /* GET STATUS for Interface*/
    else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
    {
      if (((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS)
 8003f3e:	4d0c      	ldr	r5, [pc, #48]	; (8003f70 <Setup0_Process+0x3d0>)
 8003f40:	7970      	ldrb	r0, [r6, #5]
 8003f42:	682b      	ldr	r3, [r5, #0]
 8003f44:	699a      	ldr	r2, [r3, #24]
 8003f46:	4790      	blx	r2
 8003f48:	2800      	cmp	r0, #0
 8003f4a:	f47f af01 	bne.w	8003d50 <Setup0_Process+0x1b0>
          && (pInformation->Current_Configuration != 0))
 8003f4e:	6826      	ldr	r6, [r4, #0]
 8003f50:	7ab1      	ldrb	r1, [r6, #10]
 8003f52:	2900      	cmp	r1, #0
 8003f54:	f47f af10 	bne.w	8003d78 <Setup0_Process+0x1d8>
 8003f58:	7871      	ldrb	r1, [r6, #1]
 8003f5a:	e65e      	b.n	8003c1a <Setup0_Process+0x7a>

      if (ValBit(pInformation->USBwIndex0, 7))
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 8003f5c:	0090      	lsls	r0, r2, #2
 8003f5e:	f100 4e80 	add.w	lr, r0, #1073741824	; 0x40000000
 8003f62:	f50e 4cb8 	add.w	ip, lr, #23552	; 0x5c00
 8003f66:	f8dc 5000 	ldr.w	r5, [ip]
 8003f6a:	f005 0530 	and.w	r5, r5, #48	; 0x30
 8003f6e:	e7c7      	b.n	8003f00 <Setup0_Process+0x360>
 8003f70:	20001010 	.word	0x20001010
 8003f74:	08003999 	.word	0x08003999
 8003f78:	20001034 	.word	0x20001034
 8003f7c:	08003801 	.word	0x08003801
 8003f80:	200000e0 	.word	0x200000e0
 8003f84:	08003685 	.word	0x08003685
 8003f88:	200002b0 	.word	0x200002b0

08003f8c <SetDeviceAddress>:
* Input          : - Val: device address.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetDeviceAddress(uint8_t Val)
{
 8003f8c:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;
 8003f8e:	4b2a      	ldr	r3, [pc, #168]	; (8004038 <SetDeviceAddress+0xac>)
 8003f90:	781e      	ldrb	r6, [r3, #0]

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 8003f92:	2e00      	cmp	r6, #0
 8003f94:	d049      	beq.n	800402a <SetDeviceAddress+0x9e>
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 8003f96:	4a29      	ldr	r2, [pc, #164]	; (800403c <SetDeviceAddress+0xb0>)
 8003f98:	f640 7c0f 	movw	ip, #3855	; 0xf0f
 8003f9c:	6814      	ldr	r4, [r2, #0]
 8003f9e:	1e71      	subs	r1, r6, #1
 8003fa0:	ea04 030c 	and.w	r3, r4, ip
 8003fa4:	f443 4c00 	orr.w	ip, r3, #32768	; 0x8000
 8003fa8:	f04c 0380 	orr.w	r3, ip, #128	; 0x80
 8003fac:	6013      	str	r3, [r2, #0]
{
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 8003fae:	2301      	movs	r3, #1
 8003fb0:	429e      	cmp	r6, r3
 8003fb2:	f001 0101 	and.w	r1, r1, #1
 8003fb6:	d938      	bls.n	800402a <SetDeviceAddress+0x9e>
 8003fb8:	b169      	cbz	r1, 8003fd6 <SetDeviceAddress+0x4a>
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 8003fba:	4921      	ldr	r1, [pc, #132]	; (8004040 <SetDeviceAddress+0xb4>)
 8003fbc:	f640 720f 	movw	r2, #3855	; 0xf0f
 8003fc0:	680c      	ldr	r4, [r1, #0]
 8003fc2:	f248 0c81 	movw	ip, #32897	; 0x8081
 8003fc6:	ea04 0302 	and.w	r3, r4, r2
 8003fca:	ea43 020c 	orr.w	r2, r3, ip
{
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 8003fce:	2302      	movs	r3, #2
 8003fd0:	429e      	cmp	r6, r3
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 8003fd2:	600a      	str	r2, [r1, #0]
{
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 8003fd4:	d929      	bls.n	800402a <SetDeviceAddress+0x9e>
 8003fd6:	b2dc      	uxtb	r4, r3
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 8003fd8:	00a2      	lsls	r2, r4, #2
 8003fda:	f102 4180 	add.w	r1, r2, #1073741824	; 0x40000000
 8003fde:	f501 4cb8 	add.w	ip, r1, #23552	; 0x5c00
 8003fe2:	f8dc 7000 	ldr.w	r7, [ip]
{
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 8003fe6:	3301      	adds	r3, #1
 8003fe8:	b2d9      	uxtb	r1, r3
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 8003fea:	f444 4500 	orr.w	r5, r4, #32768	; 0x8000
 8003fee:	f640 740f 	movw	r4, #3855	; 0xf0f
 8003ff2:	ea07 0404 	and.w	r4, r7, r4
 8003ff6:	f045 0280 	orr.w	r2, r5, #128	; 0x80
 8003ffa:	008f      	lsls	r7, r1, #2
 8003ffc:	ea42 0504 	orr.w	r5, r2, r4
 8004000:	f107 4480 	add.w	r4, r7, #1073741824	; 0x40000000
 8004004:	f8cc 5000 	str.w	r5, [ip]
 8004008:	f504 44b8 	add.w	r4, r4, #23552	; 0x5c00
 800400c:	6825      	ldr	r5, [r4, #0]
 800400e:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8004012:	f640 720f 	movw	r2, #3855	; 0xf0f
 8004016:	f041 0c80 	orr.w	ip, r1, #128	; 0x80
 800401a:	ea05 0202 	and.w	r2, r5, r2
{
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 800401e:	3301      	adds	r3, #1
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 8004020:	ea4c 0102 	orr.w	r1, ip, r2
{
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 8004024:	429e      	cmp	r6, r3
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 8004026:	6021      	str	r1, [r4, #0]
{
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 8004028:	d8d5      	bhi.n	8003fd6 <SetDeviceAddress+0x4a>
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
  } /* for */
  _SetDADDR(Val | DADDR_EF); /* set device address and enable function */ 
 800402a:	4b06      	ldr	r3, [pc, #24]	; (8004044 <SetDeviceAddress+0xb8>)
 800402c:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8004030:	6018      	str	r0, [r3, #0]
}
 8004032:	bcf0      	pop	{r4, r5, r6, r7}
 8004034:	4770      	bx	lr
 8004036:	bf00      	nop
 8004038:	200000e0 	.word	0x200000e0
 800403c:	40005c00 	.word	0x40005c00
 8004040:	40005c04 	.word	0x40005c04
 8004044:	40005c4c 	.word	0x40005c4c

08004048 <In0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t In0_Process(void)
{
 8004048:	b510      	push	{r4, lr}
  uint32_t ControlState = pInformation->ControlState;
 800404a:	4c17      	ldr	r4, [pc, #92]	; (80040a8 <In0_Process+0x60>)
 800404c:	6823      	ldr	r3, [r4, #0]
 800404e:	7a1a      	ldrb	r2, [r3, #8]

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
 8004050:	2a02      	cmp	r2, #2
 8004052:	d015      	beq.n	8004080 <In0_Process+0x38>
 8004054:	2a04      	cmp	r2, #4
 8004056:	d013      	beq.n	8004080 <In0_Process+0x38>
    DataStageIn();
    /* ControlState may be changed outside the function */
    ControlState = pInformation->ControlState;
  }

  else if (ControlState == WAIT_STATUS_IN)
 8004058:	2a06      	cmp	r2, #6
 800405a:	d004      	beq.n	8004066 <In0_Process+0x1e>
 800405c:	2208      	movs	r2, #8
  else
  {
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;
 800405e:	721a      	strb	r2, [r3, #8]

  return Post0_Process();
 8004060:	4912      	ldr	r1, [pc, #72]	; (80040ac <In0_Process+0x64>)
 8004062:	4788      	blx	r1
}
 8004064:	bd10      	pop	{r4, pc}
    ControlState = pInformation->ControlState;
  }

  else if (ControlState == WAIT_STATUS_IN)
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 8004066:	785a      	ldrb	r2, [r3, #1]
 8004068:	2a05      	cmp	r2, #5
 800406a:	d011      	beq.n	8004090 <In0_Process+0x48>
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
    {
      SetDeviceAddress(pInformation->USBwValue0);
      pUser_Standard_Requests->User_SetDeviceAddress();
    }
    (*pProperty->Process_Status_IN)();
 800406c:	4a10      	ldr	r2, [pc, #64]	; (80040b0 <In0_Process+0x68>)
 800406e:	6813      	ldr	r3, [r2, #0]
 8004070:	6898      	ldr	r0, [r3, #8]
 8004072:	4780      	blx	r0
 8004074:	6823      	ldr	r3, [r4, #0]
 8004076:	2208      	movs	r2, #8
  else
  {
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;
 8004078:	721a      	strb	r2, [r3, #8]

  return Post0_Process();
 800407a:	490c      	ldr	r1, [pc, #48]	; (80040ac <In0_Process+0x64>)
 800407c:	4788      	blx	r1
}
 800407e:	bd10      	pop	{r4, pc}
{
  uint32_t ControlState = pInformation->ControlState;

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
  {
    DataStageIn();
 8004080:	4b0c      	ldr	r3, [pc, #48]	; (80040b4 <In0_Process+0x6c>)
 8004082:	4798      	blx	r3
    /* ControlState may be changed outside the function */
    ControlState = pInformation->ControlState;
 8004084:	6823      	ldr	r3, [r4, #0]
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;

  return Post0_Process();
 8004086:	4909      	ldr	r1, [pc, #36]	; (80040ac <In0_Process+0x64>)

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
  {
    DataStageIn();
    /* ControlState may be changed outside the function */
    ControlState = pInformation->ControlState;
 8004088:	7a1a      	ldrb	r2, [r3, #8]
  else
  {
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;
 800408a:	721a      	strb	r2, [r3, #8]

  return Post0_Process();
 800408c:	4788      	blx	r1
}
 800408e:	bd10      	pop	{r4, pc}
  }

  else if (ControlState == WAIT_STATUS_IN)
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
 8004090:	7818      	ldrb	r0, [r3, #0]
    ControlState = pInformation->ControlState;
  }

  else if (ControlState == WAIT_STATUS_IN)
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 8004092:	f010 0f7f 	tst.w	r0, #127	; 0x7f
 8004096:	d1e9      	bne.n	800406c <In0_Process+0x24>
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
    {
      SetDeviceAddress(pInformation->USBwValue0);
 8004098:	78d8      	ldrb	r0, [r3, #3]
 800409a:	4907      	ldr	r1, [pc, #28]	; (80040b8 <In0_Process+0x70>)
 800409c:	4788      	blx	r1
      pUser_Standard_Requests->User_SetDeviceAddress();
 800409e:	4a07      	ldr	r2, [pc, #28]	; (80040bc <In0_Process+0x74>)
 80040a0:	6813      	ldr	r3, [r2, #0]
 80040a2:	6a19      	ldr	r1, [r3, #32]
 80040a4:	4788      	blx	r1
 80040a6:	e7e1      	b.n	800406c <In0_Process+0x24>
 80040a8:	20001038 	.word	0x20001038
 80040ac:	08003a69 	.word	0x08003a69
 80040b0:	20001010 	.word	0x20001010
 80040b4:	08003741 	.word	0x08003741
 80040b8:	08003f8d 	.word	0x08003f8d
 80040bc:	20001034 	.word	0x20001034

080040c0 <NOP_Process>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
}
 80040c0:	4770      	bx	lr
 80040c2:	bf00      	nop

080040c4 <USB_Init>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Init(void)
{
 80040c4:	b508      	push	{r3, lr}
  pInformation = &Device_Info;
 80040c6:	4a07      	ldr	r2, [pc, #28]	; (80040e4 <USB_Init+0x20>)
 80040c8:	4b07      	ldr	r3, [pc, #28]	; (80040e8 <USB_Init+0x24>)
  pInformation->ControlState = 2;
 80040ca:	2102      	movs	r1, #2
  pProperty = &Device_Property;
 80040cc:	4807      	ldr	r0, [pc, #28]	; (80040ec <USB_Init+0x28>)
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Init(void)
{
  pInformation = &Device_Info;
 80040ce:	601a      	str	r2, [r3, #0]
  pInformation->ControlState = 2;
 80040d0:	7211      	strb	r1, [r2, #8]
  pProperty = &Device_Property;
 80040d2:	4b07      	ldr	r3, [pc, #28]	; (80040f0 <USB_Init+0x2c>)
  pUser_Standard_Requests = &User_Standard_Requests;
 80040d4:	4907      	ldr	r1, [pc, #28]	; (80040f4 <USB_Init+0x30>)
 80040d6:	4a08      	ldr	r2, [pc, #32]	; (80040f8 <USB_Init+0x34>)
*******************************************************************************/
void USB_Init(void)
{
  pInformation = &Device_Info;
  pInformation->ControlState = 2;
  pProperty = &Device_Property;
 80040d8:	6018      	str	r0, [r3, #0]
  pUser_Standard_Requests = &User_Standard_Requests;
 80040da:	6011      	str	r1, [r2, #0]
  /* Initialize devices one by one */
  pProperty->Init();
 80040dc:	6803      	ldr	r3, [r0, #0]
 80040de:	4798      	blx	r3
}
 80040e0:	bd08      	pop	{r3, pc}
 80040e2:	bf00      	nop
 80040e4:	20001018 	.word	0x20001018
 80040e8:	20001038 	.word	0x20001038
 80040ec:	2000005c 	.word	0x2000005c
 80040f0:	20001010 	.word	0x20001010
 80040f4:	2000008c 	.word	0x2000008c
 80040f8:	20001034 	.word	0x20001034

080040fc <UserToPMABufferCopy>:
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 80040fc:	3201      	adds	r2, #1
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 80040fe:	1052      	asrs	r2, r2, #1
*                  - wNBytes: no. of bytes to be copied.
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004100:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 8004102:	d02d      	beq.n	8004160 <UserToPMABufferCopy+0x64>
  {
    temp1 = (uint16_t) * pbUsrBuf;
 8004104:	4603      	mov	r3, r0
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8004106:	7844      	ldrb	r4, [r0, #1]
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
  {
    temp1 = (uint16_t) * pbUsrBuf;
 8004108:	f813 cb02 	ldrb.w	ip, [r3], #2
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
 800410c:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
 8004110:	3a01      	subs	r2, #1
 8004112:	f501 5540 	add.w	r5, r1, #12288	; 0x3000
  for (i = n; i != 0; i--)
  {
    temp1 = (uint16_t) * pbUsrBuf;
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8004116:	ea4c 2004 	orr.w	r0, ip, r4, lsl #8
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
 800411a:	006d      	lsls	r5, r5, #1
  for (i = n; i != 0; i--)
 800411c:	4611      	mov	r1, r2
  {
    temp1 = (uint16_t) * pbUsrBuf;
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
    *pdwVal++ = temp2;
 800411e:	8028      	strh	r0, [r5, #0]
 8004120:	f002 0201 	and.w	r2, r2, #1
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 8004124:	2004      	movs	r0, #4
 8004126:	b1d9      	cbz	r1, 8004160 <UserToPMABufferCopy+0x64>
 8004128:	b142      	cbz	r2, 800413c <UserToPMABufferCopy+0x40>
  {
    temp1 = (uint16_t) * pbUsrBuf;
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 800412a:	785c      	ldrb	r4, [r3, #1]
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
  {
    temp1 = (uint16_t) * pbUsrBuf;
 800412c:	f813 cb02 	ldrb.w	ip, [r3], #2
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 8004130:	2008      	movs	r0, #8
  {
    temp1 = (uint16_t) * pbUsrBuf;
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8004132:	ea4c 2204 	orr.w	r2, ip, r4, lsl #8
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 8004136:	3901      	subs	r1, #1
  {
    temp1 = (uint16_t) * pbUsrBuf;
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
    *pdwVal++ = temp2;
 8004138:	80aa      	strh	r2, [r5, #4]
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 800413a:	d011      	beq.n	8004160 <UserToPMABufferCopy+0x64>
  {
    temp1 = (uint16_t) * pbUsrBuf;
 800413c:	461a      	mov	r2, r3
 800413e:	f812 cb02 	ldrb.w	ip, [r2], #2
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8004142:	785f      	ldrb	r7, [r3, #1]
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 8004144:	1d04      	adds	r4, r0, #4
  {
    temp1 = (uint16_t) * pbUsrBuf;
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8004146:	ea4c 2607 	orr.w	r6, ip, r7, lsl #8
    *pdwVal++ = temp2;
 800414a:	5346      	strh	r6, [r0, r5]
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
  {
    temp1 = (uint16_t) * pbUsrBuf;
 800414c:	f893 c002 	ldrb.w	ip, [r3, #2]
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8004150:	7856      	ldrb	r6, [r2, #1]
*                  - wPMABufAddr: address into PMA.
*                  - wNBytes: no. of bytes to be copied.
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
 8004152:	1c93      	adds	r3, r2, #2
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
  {
    temp1 = (uint16_t) * pbUsrBuf;
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8004154:	ea4c 2006 	orr.w	r0, ip, r6, lsl #8
    *pdwVal++ = temp2;
 8004158:	5360      	strh	r0, [r4, r5]
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 800415a:	1d20      	adds	r0, r4, #4
 800415c:	3902      	subs	r1, #2
 800415e:	d1ed      	bne.n	800413c <UserToPMABufferCopy+0x40>
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
    *pdwVal++ = temp2;
    pdwVal++;
    pbUsrBuf++;
  }
}
 8004160:	bcf0      	pop	{r4, r5, r6, r7}
 8004162:	4770      	bx	lr

08004164 <PMAToUserBufferCopy>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void PMAToUserBufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
 8004164:	3201      	adds	r2, #1
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 8004166:	1052      	asrs	r2, r2, #1
*                  - wNBytes     = no. of bytes to be copied.
* Output         : None.
* Return         : None.
*******************************************************************************/
void PMAToUserBufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004168:	b470      	push	{r4, r5, r6}
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 800416a:	d020      	beq.n	80041ae <PMAToUserBufferCopy+0x4a>
void PMAToUserBufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
 800416c:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
 8004170:	f501 5340 	add.w	r3, r1, #12288	; 0x3000
  for (i = n; i != 0; i--)
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8004174:	005b      	lsls	r3, r3, #1
 8004176:	3a01      	subs	r2, #1
 8004178:	f853 4b04 	ldr.w	r4, [r3], #4
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 800417c:	4611      	mov	r1, r2
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 800417e:	f820 4b02 	strh.w	r4, [r0], #2
 8004182:	f002 0201 	and.w	r2, r2, #1
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 8004186:	b191      	cbz	r1, 80041ae <PMAToUserBufferCopy+0x4a>
 8004188:	b12a      	cbz	r2, 8004196 <PMAToUserBufferCopy+0x32>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 800418a:	f853 2b04 	ldr.w	r2, [r3], #4
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 800418e:	3901      	subs	r1, #1
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8004190:	f820 2b02 	strh.w	r2, [r0], #2
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 8004194:	d00b      	beq.n	80041ae <PMAToUserBufferCopy+0x4a>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8004196:	461c      	mov	r4, r3
 8004198:	f854 6b04 	ldr.w	r6, [r4], #4
 800419c:	685d      	ldr	r5, [r3, #4]
 800419e:	4602      	mov	r2, r0
 80041a0:	f822 6b02 	strh.w	r6, [r2], #2
 80041a4:	1d23      	adds	r3, r4, #4
 80041a6:	8045      	strh	r5, [r0, #2]
*                  - wPMABufAddr = address into PMA.
*                  - wNBytes     = no. of bytes to be copied.
* Output         : None.
* Return         : None.
*******************************************************************************/
void PMAToUserBufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
 80041a8:	1c90      	adds	r0, r2, #2
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 80041aa:	3902      	subs	r1, #2
 80041ac:	d1f3      	bne.n	8004196 <PMAToUserBufferCopy+0x32>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
    pbUsrBuf++;
  }
}
 80041ae:	bc70      	pop	{r4, r5, r6}
 80041b0:	4770      	bx	lr
 80041b2:	bf00      	nop

080041b4 <SetBTABLE>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetBTABLE(uint16_t wRegValue)
{
  _SetBTABLE(wRegValue);
 80041b4:	f64f 71f8 	movw	r1, #65528	; 0xfff8
 80041b8:	4a02      	ldr	r2, [pc, #8]	; (80041c4 <SetBTABLE+0x10>)
 80041ba:	ea00 0301 	and.w	r3, r0, r1
 80041be:	6013      	str	r3, [r2, #0]
}
 80041c0:	4770      	bx	lr
 80041c2:	bf00      	nop
 80041c4:	40005c50 	.word	0x40005c50

080041c8 <SetEPType>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPType(uint8_t bEpNum, uint16_t wType)
{
  _SetEPType(bEpNum, wType);
 80041c8:	0080      	lsls	r0, r0, #2
 80041ca:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 80041ce:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 80041d2:	6813      	ldr	r3, [r2, #0]
 80041d4:	f648 1c8f 	movw	ip, #35215	; 0x898f
 80041d8:	ea03 000c 	and.w	r0, r3, ip
 80041dc:	ea40 0301 	orr.w	r3, r0, r1
 80041e0:	6013      	str	r3, [r2, #0]
}
 80041e2:	4770      	bx	lr

080041e4 <SetEPTxStatus>:
*                  wState: new state.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxStatus(uint8_t bEpNum, uint16_t wState)
{
 80041e4:	b410      	push	{r4}
  _SetEPTxStatus(bEpNum, wState);
 80041e6:	0084      	lsls	r4, r0, #2
 80041e8:	f104 4080 	add.w	r0, r4, #1073741824	; 0x40000000
 80041ec:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 80041f0:	6804      	ldr	r4, [r0, #0]
 80041f2:	f001 0c10 	and.w	ip, r1, #16
 80041f6:	f648 73bf 	movw	r3, #36799	; 0x8fbf
 80041fa:	fa1f f28c 	uxth.w	r2, ip
 80041fe:	ea04 0303 	and.w	r3, r4, r3
 8004202:	b10a      	cbz	r2, 8004208 <SetEPTxStatus+0x24>
 8004204:	f083 0310 	eor.w	r3, r3, #16
 8004208:	f001 0220 	and.w	r2, r1, #32
 800420c:	b291      	uxth	r1, r2
 800420e:	b109      	cbz	r1, 8004214 <SetEPTxStatus+0x30>
 8004210:	f083 0320 	eor.w	r3, r3, #32
 8004214:	f443 4c00 	orr.w	ip, r3, #32768	; 0x8000
 8004218:	f04c 0380 	orr.w	r3, ip, #128	; 0x80
 800421c:	6003      	str	r3, [r0, #0]
}
 800421e:	bc10      	pop	{r4}
 8004220:	4770      	bx	lr
 8004222:	bf00      	nop

08004224 <SetEPRxStatus>:
*                  wState: new state.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxStatus(uint8_t bEpNum, uint16_t wState)
{
 8004224:	b410      	push	{r4}
  _SetEPRxStatus(bEpNum, wState);
 8004226:	0084      	lsls	r4, r0, #2
 8004228:	f104 4080 	add.w	r0, r4, #1073741824	; 0x40000000
 800422c:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8004230:	6804      	ldr	r4, [r0, #0]
 8004232:	f401 5c80 	and.w	ip, r1, #4096	; 0x1000
 8004236:	f64b 738f 	movw	r3, #49039	; 0xbf8f
 800423a:	fa1f f28c 	uxth.w	r2, ip
 800423e:	ea04 0303 	and.w	r3, r4, r3
 8004242:	b10a      	cbz	r2, 8004248 <SetEPRxStatus+0x24>
 8004244:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004248:	f401 5200 	and.w	r2, r1, #8192	; 0x2000
 800424c:	b291      	uxth	r1, r2
 800424e:	b109      	cbz	r1, 8004254 <SetEPRxStatus+0x30>
 8004250:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004254:	f443 4c00 	orr.w	ip, r3, #32768	; 0x8000
 8004258:	f04c 0380 	orr.w	r3, ip, #128	; 0x80
 800425c:	6003      	str	r3, [r0, #0]
}
 800425e:	bc10      	pop	{r4}
 8004260:	4770      	bx	lr
 8004262:	bf00      	nop

08004264 <SetEPTxValid>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxValid(uint8_t bEpNum)
{
  _SetEPTxStatus(bEpNum, EP_TX_VALID);
 8004264:	0081      	lsls	r1, r0, #2
 8004266:	f101 4280 	add.w	r2, r1, #1073741824	; 0x40000000
 800426a:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 800426e:	6810      	ldr	r0, [r2, #0]
 8004270:	f648 73bf 	movw	r3, #36799	; 0x8fbf
 8004274:	ea00 0c03 	and.w	ip, r0, r3
 8004278:	f08c 0130 	eor.w	r1, ip, #48	; 0x30
 800427c:	f441 4000 	orr.w	r0, r1, #32768	; 0x8000
 8004280:	f040 0380 	orr.w	r3, r0, #128	; 0x80
 8004284:	6013      	str	r3, [r2, #0]
}
 8004286:	4770      	bx	lr

08004288 <SetEPRxValid>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxValid(uint8_t bEpNum)
{
  _SetEPRxStatus(bEpNum, EP_RX_VALID);
 8004288:	0081      	lsls	r1, r0, #2
 800428a:	f101 4280 	add.w	r2, r1, #1073741824	; 0x40000000
 800428e:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 8004292:	6810      	ldr	r0, [r2, #0]
 8004294:	f64b 738f 	movw	r3, #49039	; 0xbf8f
 8004298:	ea00 0c03 	and.w	ip, r0, r3
 800429c:	f48c 5140 	eor.w	r1, ip, #12288	; 0x3000
 80042a0:	f441 4000 	orr.w	r0, r1, #32768	; 0x8000
 80042a4:	f040 0380 	orr.w	r3, r0, #128	; 0x80
 80042a8:	6013      	str	r3, [r2, #0]
}
 80042aa:	4770      	bx	lr

080042ac <Clear_Status_Out>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Clear_Status_Out(uint8_t bEpNum)
{
  _ClearEP_KIND(bEpNum);
 80042ac:	0080      	lsls	r0, r0, #2
 80042ae:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 80042b2:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 80042b6:	6813      	ldr	r3, [r2, #0]
 80042b8:	f640 6c0f 	movw	ip, #3599	; 0xe0f
 80042bc:	ea03 010c 	and.w	r1, r3, ip
 80042c0:	f441 4000 	orr.w	r0, r1, #32768	; 0x8000
 80042c4:	f040 0380 	orr.w	r3, r0, #128	; 0x80
 80042c8:	6013      	str	r3, [r2, #0]
}
 80042ca:	4770      	bx	lr

080042cc <ClearDTOG_RX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_RX(uint8_t bEpNum)
{
  _ClearDTOG_RX(bEpNum);
 80042cc:	0080      	lsls	r0, r0, #2
 80042ce:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 80042d2:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 80042dc:	d009      	beq.n	80042f2 <ClearDTOG_RX+0x26>
 80042de:	6819      	ldr	r1, [r3, #0]
 80042e0:	f640 700f 	movw	r0, #3855	; 0xf0f
 80042e4:	ea01 0200 	and.w	r2, r1, r0
 80042e8:	f442 4c40 	orr.w	ip, r2, #49152	; 0xc000
 80042ec:	f04c 0180 	orr.w	r1, ip, #128	; 0x80
 80042f0:	6019      	str	r1, [r3, #0]
 80042f2:	4770      	bx	lr

080042f4 <ClearDTOG_TX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_TX(uint8_t bEpNum)
{
  _ClearDTOG_TX(bEpNum);
 80042f4:	0080      	lsls	r0, r0, #2
 80042f6:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 80042fa:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004304:	d009      	beq.n	800431a <ClearDTOG_TX+0x26>
 8004306:	6819      	ldr	r1, [r3, #0]
 8004308:	f640 700f 	movw	r0, #3855	; 0xf0f
 800430c:	ea01 0200 	and.w	r2, r1, r0
 8004310:	f442 4c00 	orr.w	ip, r2, #32768	; 0x8000
 8004314:	f04c 01c0 	orr.w	r1, ip, #192	; 0xc0
 8004318:	6019      	str	r1, [r3, #0]
 800431a:	4770      	bx	lr

0800431c <SetEPTxAddr>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxAddr(uint8_t bEpNum, uint16_t wAddr)
{
  _SetEPTxAddr(bEpNum, wAddr);
 800431c:	4a07      	ldr	r2, [pc, #28]	; (800433c <SetEPTxAddr+0x20>)
 800431e:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8004322:	6812      	ldr	r2, [r2, #0]
 8004324:	ea01 0303 	and.w	r3, r1, r3
 8004328:	b292      	uxth	r2, r2
 800432a:	eb02 0cc0 	add.w	ip, r2, r0, lsl #3
 800432e:	f10c 5100 	add.w	r1, ip, #536870912	; 0x20000000
 8004332:	f501 5040 	add.w	r0, r1, #12288	; 0x3000
 8004336:	0042      	lsls	r2, r0, #1
 8004338:	6013      	str	r3, [r2, #0]
}
 800433a:	4770      	bx	lr
 800433c:	40005c50 	.word	0x40005c50

08004340 <SetEPRxAddr>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxAddr(uint8_t bEpNum, uint16_t wAddr)
{
  _SetEPRxAddr(bEpNum, wAddr);
 8004340:	4b07      	ldr	r3, [pc, #28]	; (8004360 <SetEPRxAddr+0x20>)
*                  wAddr: new address.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxAddr(uint8_t bEpNum, uint16_t wAddr)
{
 8004342:	b410      	push	{r4}
  _SetEPRxAddr(bEpNum, wAddr);
 8004344:	681c      	ldr	r4, [r3, #0]
 8004346:	4a07      	ldr	r2, [pc, #28]	; (8004364 <SetEPRxAddr+0x24>)
 8004348:	b2a4      	uxth	r4, r4
 800434a:	eb04 03c0 	add.w	r3, r4, r0, lsl #3
 800434e:	1898      	adds	r0, r3, r2
 8004350:	f64f 7cfe 	movw	ip, #65534	; 0xfffe
 8004354:	0042      	lsls	r2, r0, #1
 8004356:	ea01 030c 	and.w	r3, r1, ip
 800435a:	6013      	str	r3, [r2, #0]
}
 800435c:	bc10      	pop	{r4}
 800435e:	4770      	bx	lr
 8004360:	40005c50 	.word	0x40005c50
 8004364:	20003004 	.word	0x20003004

08004368 <GetEPTxAddr>:
* Output         : None.
* Return         : Rx buffer address. 
*******************************************************************************/
uint16_t GetEPTxAddr(uint8_t bEpNum)
{
  return(_GetEPTxAddr(bEpNum));
 8004368:	4906      	ldr	r1, [pc, #24]	; (8004384 <GetEPTxAddr+0x1c>)
 800436a:	680b      	ldr	r3, [r1, #0]
 800436c:	fa1f fc83 	uxth.w	ip, r3
 8004370:	eb0c 02c0 	add.w	r2, ip, r0, lsl #3
 8004374:	f102 5100 	add.w	r1, r2, #536870912	; 0x20000000
 8004378:	f501 5040 	add.w	r0, r1, #12288	; 0x3000
 800437c:	0043      	lsls	r3, r0, #1
}
 800437e:	8818      	ldrh	r0, [r3, #0]
 8004380:	4770      	bx	lr
 8004382:	bf00      	nop
 8004384:	40005c50 	.word	0x40005c50

08004388 <GetEPRxAddr>:
* Output         : None.
* Return         : Rx buffer address.
*******************************************************************************/
uint16_t GetEPRxAddr(uint8_t bEpNum)
{
  return(_GetEPRxAddr(bEpNum));
 8004388:	4a05      	ldr	r2, [pc, #20]	; (80043a0 <GetEPRxAddr+0x18>)
 800438a:	4906      	ldr	r1, [pc, #24]	; (80043a4 <GetEPRxAddr+0x1c>)
 800438c:	6813      	ldr	r3, [r2, #0]
 800438e:	fa1f fc83 	uxth.w	ip, r3
 8004392:	eb0c 02c0 	add.w	r2, ip, r0, lsl #3
 8004396:	1850      	adds	r0, r2, r1
 8004398:	0043      	lsls	r3, r0, #1
}
 800439a:	8818      	ldrh	r0, [r3, #0]
 800439c:	4770      	bx	lr
 800439e:	bf00      	nop
 80043a0:	40005c50 	.word	0x40005c50
 80043a4:	20003004 	.word	0x20003004

080043a8 <SetEPTxCount>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPTxCount(bEpNum, wCount);
 80043a8:	4a05      	ldr	r2, [pc, #20]	; (80043c0 <SetEPTxCount+0x18>)
 80043aa:	4b06      	ldr	r3, [pc, #24]	; (80043c4 <SetEPTxCount+0x1c>)
 80043ac:	6812      	ldr	r2, [r2, #0]
 80043ae:	fa1f fc82 	uxth.w	ip, r2
 80043b2:	eb0c 02c0 	add.w	r2, ip, r0, lsl #3
 80043b6:	18d0      	adds	r0, r2, r3
 80043b8:	0043      	lsls	r3, r0, #1
 80043ba:	6019      	str	r1, [r3, #0]
}
 80043bc:	4770      	bx	lr
 80043be:	bf00      	nop
 80043c0:	40005c50 	.word	0x40005c50
 80043c4:	20003002 	.word	0x20003002

080043c8 <SetEPRxCount>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPRxCount(bEpNum, wCount);
 80043c8:	4a0f      	ldr	r2, [pc, #60]	; (8004408 <SetEPRxCount+0x40>)
 80043ca:	4b10      	ldr	r3, [pc, #64]	; (800440c <SetEPRxCount+0x44>)
 80043cc:	6812      	ldr	r2, [r2, #0]
 80043ce:	fa1f fc82 	uxth.w	ip, r2
 80043d2:	eb0c 0203 	add.w	r2, ip, r3
 80043d6:	eb02 03c0 	add.w	r3, r2, r0, lsl #3
 80043da:	005b      	lsls	r3, r3, #1
 80043dc:	293e      	cmp	r1, #62	; 0x3e
 80043de:	d90a      	bls.n	80043f6 <SetEPRxCount+0x2e>
 80043e0:	094a      	lsrs	r2, r1, #5
 80043e2:	f011 0f1f 	tst.w	r1, #31
 80043e6:	d101      	bne.n	80043ec <SetEPRxCount+0x24>
 80043e8:	1e50      	subs	r0, r2, #1
 80043ea:	b282      	uxth	r2, r0
 80043ec:	0292      	lsls	r2, r2, #10
 80043ee:	f442 4100 	orr.w	r1, r2, #32768	; 0x8000
 80043f2:	6019      	str	r1, [r3, #0]
 80043f4:	4770      	bx	lr
 80043f6:	084a      	lsrs	r2, r1, #1
 80043f8:	f011 0f01 	tst.w	r1, #1
 80043fc:	bf18      	it	ne
 80043fe:	3201      	addne	r2, #1
 8004400:	0290      	lsls	r0, r2, #10
 8004402:	6018      	str	r0, [r3, #0]
 8004404:	4770      	bx	lr
 8004406:	bf00      	nop
 8004408:	40005c50 	.word	0x40005c50
 800440c:	20003006 	.word	0x20003006

08004410 <GetEPRxCount>:
* Output         : None.
* Return         : Rx count value.
*******************************************************************************/
uint16_t GetEPRxCount(uint8_t bEpNum)
{
  return(_GetEPRxCount(bEpNum));
 8004410:	4b06      	ldr	r3, [pc, #24]	; (800442c <GetEPRxCount+0x1c>)
 8004412:	4907      	ldr	r1, [pc, #28]	; (8004430 <GetEPRxCount+0x20>)
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	b293      	uxth	r3, r2
 8004418:	eb03 0cc0 	add.w	ip, r3, r0, lsl #3
 800441c:	eb0c 0201 	add.w	r2, ip, r1
 8004420:	0053      	lsls	r3, r2, #1
 8004422:	6819      	ldr	r1, [r3, #0]
}
 8004424:	0588      	lsls	r0, r1, #22
 8004426:	0d80      	lsrs	r0, r0, #22
 8004428:	4770      	bx	lr
 800442a:	bf00      	nop
 800442c:	40005c50 	.word	0x40005c50
 8004430:	20003006 	.word	0x20003006

08004434 <ByteSwap>:
uint16_t ByteSwap(uint16_t wSwW)
{
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
 8004434:	b2c3      	uxtb	r3, r0
 8004436:	0a00      	lsrs	r0, r0, #8
  return(wRet);
}
 8004438:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 800443c:	4770      	bx	lr
 800443e:	bf00      	nop

08004440 <USB_SIL_Init>:
*******************************************************************************/
uint32_t USB_SIL_Init(void)
{
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
 8004440:	4a04      	ldr	r2, [pc, #16]	; (8004454 <USB_SIL_Init+0x14>)
 8004442:	2000      	movs	r0, #0
 8004444:	6010      	str	r0, [r2, #0]
  wInterrupt_Mask = IMR_MSK;
 8004446:	4904      	ldr	r1, [pc, #16]	; (8004458 <USB_SIL_Init+0x18>)
  /* set interrupts mask */
  _SetCNTR(wInterrupt_Mask);
 8004448:	4a04      	ldr	r2, [pc, #16]	; (800445c <USB_SIL_Init+0x1c>)
uint32_t USB_SIL_Init(void)
{
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
  wInterrupt_Mask = IMR_MSK;
 800444a:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800444e:	800b      	strh	r3, [r1, #0]
  /* set interrupts mask */
  _SetCNTR(wInterrupt_Mask);
 8004450:	6013      	str	r3, [r2, #0]
  return 0;
}
 8004452:	4770      	bx	lr
 8004454:	40005c44 	.word	0x40005c44
 8004458:	2000103c 	.word	0x2000103c
 800445c:	40005c40 	.word	0x40005c40

08004460 <USB_SIL_Read>:
*                     received data buffer.
* Output         : None.
* Return         : Number of received data (in Bytes).
*******************************************************************************/
uint32_t USB_SIL_Read(uint8_t bEpAddr, uint8_t* pBufferPointer)
{
 8004460:	b570      	push	{r4, r5, r6, lr}
  uint32_t DataLength = 0;

  /* Get the number of received data on the selected Endpoint */
  DataLength = GetEPRxCount(bEpAddr & 0x7F);
 8004462:	f000 057f 	and.w	r5, r0, #127	; 0x7f
 8004466:	4a07      	ldr	r2, [pc, #28]	; (8004484 <USB_SIL_Read+0x24>)
 8004468:	4628      	mov	r0, r5
*                     received data buffer.
* Output         : None.
* Return         : Number of received data (in Bytes).
*******************************************************************************/
uint32_t USB_SIL_Read(uint8_t bEpAddr, uint8_t* pBufferPointer)
{
 800446a:	460e      	mov	r6, r1
  uint32_t DataLength = 0;

  /* Get the number of received data on the selected Endpoint */
  DataLength = GetEPRxCount(bEpAddr & 0x7F);
 800446c:	4790      	blx	r2
  
  /* Use the memory interface function to write to the selected endpoint */
  PMAToUserBufferCopy(pBufferPointer, GetEPRxAddr(bEpAddr & 0x7F), DataLength);
 800446e:	4906      	ldr	r1, [pc, #24]	; (8004488 <USB_SIL_Read+0x28>)
uint32_t USB_SIL_Read(uint8_t bEpAddr, uint8_t* pBufferPointer)
{
  uint32_t DataLength = 0;

  /* Get the number of received data on the selected Endpoint */
  DataLength = GetEPRxCount(bEpAddr & 0x7F);
 8004470:	4604      	mov	r4, r0
  
  /* Use the memory interface function to write to the selected endpoint */
  PMAToUserBufferCopy(pBufferPointer, GetEPRxAddr(bEpAddr & 0x7F), DataLength);
 8004472:	4628      	mov	r0, r5
 8004474:	4788      	blx	r1
 8004476:	4622      	mov	r2, r4
 8004478:	4601      	mov	r1, r0
 800447a:	4b04      	ldr	r3, [pc, #16]	; (800448c <USB_SIL_Read+0x2c>)
 800447c:	4630      	mov	r0, r6
 800447e:	4798      	blx	r3

  /* Return the number of received data */
  return DataLength;
}
 8004480:	4620      	mov	r0, r4
 8004482:	bd70      	pop	{r4, r5, r6, pc}
 8004484:	08004411 	.word	0x08004411
 8004488:	08004389 	.word	0x08004389
 800448c:	08004165 	.word	0x08004165

08004490 <CTR_LP>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void CTR_LP(void)
{
 8004490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004494:	4f65      	ldr	r7, [pc, #404]	; (800462c <CTR_LP+0x19c>)
 8004496:	b083      	sub	sp, #12
  __IO uint16_t wEPVal = 0;
 8004498:	2300      	movs	r3, #0
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 800449a:	f8df a1a8 	ldr.w	sl, [pc, #424]	; 8004644 <CTR_LP+0x1b4>
*******************************************************************************/
void CTR_LP(void)
{
  __IO uint16_t wEPVal = 0;
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 800449e:	f8df b1b8 	ldr.w	fp, [pc, #440]	; 8004658 <CTR_LP+0x1c8>
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 80044a2:	f8df 8194 	ldr.w	r8, [pc, #404]	; 8004638 <CTR_LP+0x1a8>
* Output         : None.
* Return         : None.
*******************************************************************************/
void CTR_LP(void)
{
  __IO uint16_t wEPVal = 0;
 80044a6:	f8ad 3006 	strh.w	r3, [sp, #6]
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 80044aa:	46b9      	mov	r9, r7
 80044ac:	f8db 0000 	ldr.w	r0, [fp]
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 80044b0:	4c5f      	ldr	r4, [pc, #380]	; (8004630 <CTR_LP+0x1a0>)
*******************************************************************************/
void CTR_LP(void)
{
  __IO uint16_t wEPVal = 0;
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 80044b2:	8038      	strh	r0, [r7, #0]
 80044b4:	8839      	ldrh	r1, [r7, #0]

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
	    SaveTState = SaveRState & EPTX_STAT;
 80044b6:	4d5f      	ldr	r5, [pc, #380]	; (8004634 <CTR_LP+0x1a4>)
*******************************************************************************/
void CTR_LP(void)
{
  __IO uint16_t wEPVal = 0;
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 80044b8:	b20b      	sxth	r3, r1
 80044ba:	2b00      	cmp	r3, #0
      
	    SaveRState = _GetENDPOINT(ENDP0);
	    SaveTState = SaveRState & EPTX_STAT;
	    SaveRState &=  EPRX_STAT;	

	    _SetEPRxTxStatus(ENDP0,EP_RX_NAK,EP_TX_NAK);
 80044bc:	f64b 72bf 	movw	r2, #49087	; 0xbfbf
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 80044c0:	4e5d      	ldr	r6, [pc, #372]	; (8004638 <CTR_LP+0x1a8>)
*******************************************************************************/
void CTR_LP(void)
{
  __IO uint16_t wEPVal = 0;
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 80044c2:	f280 80a7 	bge.w	8004614 <CTR_LP+0x184>
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 80044c6:	f8b9 c000 	ldrh.w	ip, [r9]
 80044ca:	f00c 000f 	and.w	r0, ip, #15
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
 80044ce:	0083      	lsls	r3, r0, #2
 80044d0:	f103 4180 	add.w	r1, r3, #1073741824	; 0x40000000
 80044d4:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
  __IO uint16_t wEPVal = 0;
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 80044d8:	f88a 0000 	strb.w	r0, [sl]
    if (EPindex == 0)
 80044dc:	2800      	cmp	r0, #0
 80044de:	d135      	bne.n	800454c <CTR_LP+0xbc>
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 80044e0:	6821      	ldr	r1, [r4, #0]
 80044e2:	f8a8 1000 	strh.w	r1, [r8]
	    SaveTState = SaveRState & EPTX_STAT;
 80044e6:	f8b8 0000 	ldrh.w	r0, [r8]
 80044ea:	f000 0c30 	and.w	ip, r0, #48	; 0x30
 80044ee:	f8a5 c000 	strh.w	ip, [r5]
	    SaveRState &=  EPRX_STAT;	
 80044f2:	f8b8 3000 	ldrh.w	r3, [r8]
 80044f6:	f403 5140 	and.w	r1, r3, #12288	; 0x3000
 80044fa:	f8a8 1000 	strh.w	r1, [r8]

	    _SetEPRxTxStatus(ENDP0,EP_RX_NAK,EP_TX_NAK);
 80044fe:	6820      	ldr	r0, [r4, #0]
 8004500:	ea00 0202 	and.w	r2, r0, r2
 8004504:	f482 5c00 	eor.w	ip, r2, #8192	; 0x2000
 8004508:	f08c 0320 	eor.w	r3, ip, #32
 800450c:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 8004510:	f041 0080 	orr.w	r0, r1, #128	; 0x80
 8004514:	6020      	str	r0, [r4, #0]

      /* DIR bit = origin of the interrupt */

      if ((wIstr & ISTR_DIR) == 0)
 8004516:	f8b9 2000 	ldrh.w	r2, [r9]
 800451a:	f012 0f10 	tst.w	r2, #16
 800451e:	d045      	beq.n	80045ac <CTR_LP+0x11c>
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */

        wEPVal = _GetENDPOINT(ENDP0);
 8004520:	6820      	ldr	r0, [r4, #0]
 8004522:	f8ad 0006 	strh.w	r0, [sp, #6]
        
        if ((wEPVal &EP_SETUP) != 0)
 8004526:	f8bd c006 	ldrh.w	ip, [sp, #6]
 800452a:	f41c 6f00 	tst.w	ip, #2048	; 0x800
 800452e:	d174      	bne.n	800461a <CTR_LP+0x18a>

		      _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
          return;
        }

        else if ((wEPVal & EP_CTR_RX) != 0)
 8004530:	f8bd c006 	ldrh.w	ip, [sp, #6]
 8004534:	fa0f f38c 	sxth.w	r3, ip
 8004538:	2b00      	cmp	r3, #0
 800453a:	dab7      	bge.n	80044ac <CTR_LP+0x1c>
        {
          _ClearEP_CTR_RX(ENDP0);
 800453c:	6822      	ldr	r2, [r4, #0]
 800453e:	f640 718f 	movw	r1, #3983	; 0xf8f
 8004542:	ea02 0001 	and.w	r0, r2, r1
 8004546:	6020      	str	r0, [r4, #0]
          Out0_Process();
 8004548:	4b3c      	ldr	r3, [pc, #240]	; (800463c <CTR_LP+0x1ac>)
 800454a:	e036      	b.n	80045ba <CTR_LP+0x12a>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
 800454c:	680e      	ldr	r6, [r1, #0]
 800454e:	f8ad 6006 	strh.w	r6, [sp, #6]
      if ((wEPVal & EP_CTR_RX) != 0)
 8004552:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 8004556:	b22c      	sxth	r4, r5
 8004558:	2c00      	cmp	r4, #0
 800455a:	db19      	blt.n	8004590 <CTR_LP+0x100>
        /* call OUT service function */
        (*pEpInt_OUT[EPindex-1])();

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & EP_CTR_TX) != 0)
 800455c:	f8bd c006 	ldrh.w	ip, [sp, #6]
 8004560:	f01c 0f80 	tst.w	ip, #128	; 0x80
 8004564:	d0a2      	beq.n	80044ac <CTR_LP+0x1c>
      {
        /* clear int flag */
        _ClearEP_CTR_TX(EPindex);
 8004566:	f89a 0000 	ldrb.w	r0, [sl]
 800456a:	f648 7e0f 	movw	lr, #36623	; 0x8f0f
 800456e:	0082      	lsls	r2, r0, #2
 8004570:	f102 4c80 	add.w	ip, r2, #1073741824	; 0x40000000
 8004574:	f50c 44b8 	add.w	r4, ip, #23552	; 0x5c00
 8004578:	6826      	ldr	r6, [r4, #0]

        /* call IN service function */
        (*pEpInt_IN[EPindex-1])();
 800457a:	4831      	ldr	r0, [pc, #196]	; (8004640 <CTR_LP+0x1b0>)
      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & EP_CTR_TX) != 0)
      {
        /* clear int flag */
        _ClearEP_CTR_TX(EPindex);
 800457c:	ea06 050e 	and.w	r5, r6, lr
 8004580:	6025      	str	r5, [r4, #0]

        /* call IN service function */
        (*pEpInt_IN[EPindex-1])();
 8004582:	f89a 1000 	ldrb.w	r1, [sl]
 8004586:	1e4b      	subs	r3, r1, #1
 8004588:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 800458c:	4790      	blx	r2
 800458e:	e78d      	b.n	80044ac <CTR_LP+0x1c>
      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
      if ((wEPVal & EP_CTR_RX) != 0)
      {
        /* clear int flag */
        _ClearEP_CTR_RX(EPindex);
 8004590:	680e      	ldr	r6, [r1, #0]
 8004592:	f640 7e8f 	movw	lr, #3983	; 0xf8f
 8004596:	ea06 050e 	and.w	r5, r6, lr

        /* call OUT service function */
        (*pEpInt_OUT[EPindex-1])();
 800459a:	4c2a      	ldr	r4, [pc, #168]	; (8004644 <CTR_LP+0x1b4>)
      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
      if ((wEPVal & EP_CTR_RX) != 0)
      {
        /* clear int flag */
        _ClearEP_CTR_RX(EPindex);
 800459c:	600d      	str	r5, [r1, #0]

        /* call OUT service function */
        (*pEpInt_OUT[EPindex-1])();
 800459e:	7821      	ldrb	r1, [r4, #0]
 80045a0:	4829      	ldr	r0, [pc, #164]	; (8004648 <CTR_LP+0x1b8>)
 80045a2:	1e4b      	subs	r3, r1, #1
 80045a4:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 80045a8:	4790      	blx	r2
 80045aa:	e7d7      	b.n	800455c <CTR_LP+0xcc>
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */

        _ClearEP_CTR_TX(ENDP0);
 80045ac:	6823      	ldr	r3, [r4, #0]
 80045ae:	f648 7e0f 	movw	lr, #36623	; 0x8f0f
 80045b2:	ea03 020e 	and.w	r2, r3, lr
        In0_Process();
 80045b6:	4b25      	ldr	r3, [pc, #148]	; (800464c <CTR_LP+0x1bc>)
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */

        _ClearEP_CTR_TX(ENDP0);
 80045b8:	6022      	str	r2, [r4, #0]
        }

        else if ((wEPVal & EP_CTR_RX) != 0)
        {
          _ClearEP_CTR_RX(ENDP0);
          Out0_Process();
 80045ba:	4798      	blx	r3
          /* before terminate set Tx & Rx status */
     
		     _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
 80045bc:	6821      	ldr	r1, [r4, #0]
 80045be:	8832      	ldrh	r2, [r6, #0]
 80045c0:	f64b 73bf 	movw	r3, #49087	; 0xbfbf
 80045c4:	f402 5c80 	and.w	ip, r2, #4096	; 0x1000
 80045c8:	fa1f f08c 	uxth.w	r0, ip
 80045cc:	ea01 0303 	and.w	r3, r1, r3
 80045d0:	b108      	cbz	r0, 80045d6 <CTR_LP+0x146>
 80045d2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80045d6:	8831      	ldrh	r1, [r6, #0]
 80045d8:	f401 5e00 	and.w	lr, r1, #8192	; 0x2000
 80045dc:	fa1f f08e 	uxth.w	r0, lr
 80045e0:	b108      	cbz	r0, 80045e6 <CTR_LP+0x156>
 80045e2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80045e6:	8828      	ldrh	r0, [r5, #0]
 80045e8:	f000 0c10 	and.w	ip, r0, #16
 80045ec:	fa1f f28c 	uxth.w	r2, ip
 80045f0:	b10a      	cbz	r2, 80045f6 <CTR_LP+0x166>
 80045f2:	f083 0310 	eor.w	r3, r3, #16
 80045f6:	882a      	ldrh	r2, [r5, #0]
 80045f8:	f002 0e20 	and.w	lr, r2, #32
 80045fc:	fa1f f18e 	uxth.w	r1, lr
 8004600:	b109      	cbz	r1, 8004606 <CTR_LP+0x176>
 8004602:	f083 0320 	eor.w	r3, r3, #32
 8004606:	4912      	ldr	r1, [pc, #72]	; (8004650 <CTR_LP+0x1c0>)
 8004608:	ea43 0c01 	orr.w	ip, r3, r1
 800460c:	4b08      	ldr	r3, [pc, #32]	; (8004630 <CTR_LP+0x1a0>)
 800460e:	fa1f f08c 	uxth.w	r0, ip
 8004612:	6018      	str	r0, [r3, #0]
      } /* if((wEPVal & EP_CTR_TX) != 0) */

    }/* if(EPindex == 0) else */

  }/* while(...) */
}
 8004614:	b003      	add	sp, #12
 8004616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

        wEPVal = _GetENDPOINT(ENDP0);
        
        if ((wEPVal &EP_SETUP) != 0)
        {
          _ClearEP_CTR_RX(ENDP0); /* SETUP bit kept frozen while CTR_RX = 1 */
 800461a:	6822      	ldr	r2, [r4, #0]
 800461c:	f640 7e8f 	movw	lr, #3983	; 0xf8f
 8004620:	ea02 010e 	and.w	r1, r2, lr
 8004624:	6021      	str	r1, [r4, #0]
          Setup0_Process();
 8004626:	4b0b      	ldr	r3, [pc, #44]	; (8004654 <CTR_LP+0x1c4>)
 8004628:	e7c7      	b.n	80045ba <CTR_LP+0x12a>
 800462a:	bf00      	nop
 800462c:	200007e0 	.word	0x200007e0
 8004630:	40005c00 	.word	0x40005c00
 8004634:	20001040 	.word	0x20001040
 8004638:	2000103e 	.word	0x2000103e
 800463c:	08003ab5 	.word	0x08003ab5
 8004640:	2000001c 	.word	0x2000001c
 8004644:	20001014 	.word	0x20001014
 8004648:	20000038 	.word	0x20000038
 800464c:	08004049 	.word	0x08004049
 8004650:	ffff8080 	.word	0xffff8080
 8004654:	08003ba1 	.word	0x08003ba1
 8004658:	40005c44 	.word	0x40005c44
 800465c:	69646152 	.word	0x69646152
 8004660:	3056206f 	.word	0x3056206f
 8004664:	000a322e 	.word	0x000a322e
 8004668:	69646152 	.word	0x69646152
 800466c:	6e49206f 	.word	0x6e49206f
 8004670:	4f207469 	.word	0x4f207469
 8004674:	203a204b 	.word	0x203a204b
 8004678:	4d204d46 	.word	0x4d204d46
 800467c:	0a65646f 	.word	0x0a65646f
 8004680:	00000000 	.word	0x00000000
 8004684:	69646152 	.word	0x69646152
 8004688:	6e49206f 	.word	0x6e49206f
 800468c:	46207469 	.word	0x46207469
 8004690:	0a6c6961 	.word	0x0a6c6961
 8004694:	00000000 	.word	0x00000000

08004698 <FM_Freq.4173>:
 8004698:	22ce2247 236e230a 245e23e6 24ea24ae     G".".#n#.#^$.$.$
 80046a8:	25762526 260225c6 26b62652 27422706     &%v%.%.&R&.&.'B'
 80046b8:	27ce2792 286e281e 28fa28d2 29722922     .'.'.(n(.(.(")r)
 80046c8:	2a1229c2 00000000 656d6954 69542072     .).*....Timer Ti
 80046d8:	000a6b63 00000a0a 2a2a2a2a 2a2a2a2a     ck......********
 80046e8:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
 80046f8:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
 8004708:	2a2a2a2a 2a2a2a2a 2a2a2a2a 0a2a2a2a     ***************.
 8004718:	00000000 20202020 20202020 20202020     ....            
 8004728:	20202020 20202020 61522020 206f6964               Radio 
 8004738:	332e3056 20202020 20202020 20202020     V0.3            
 8004748:	20202020 20202020 0a202020 00000000                .....
 8004758:	2e31202a 61422020 5320646e 63656c65     * 1.  Band Selec
 8004768:	20202074 20202020 20202020 20202020     t               
 8004778:	20202020 20202020 20202020 20202020                     
 8004788:	20202020 0a2a2020 00000000 2e32202a           *.....* 2.
 8004798:	48432020 202b2b20 20202020 20202020       CH ++         
 80047a8:	20202020 20202020 20202020 20202020                     
 80047b8:	20202020 20202020 20202020 20202020                     
 80047c8:	0a2a2020 00000000 2e33202a 48432020       *.....* 3.  CH
 80047d8:	202d2d20 20202020 20202020 20202020      --             
 80047e8:	20202020 20202020 20202020 20202020                     
 80047f8:	20202020 20202020 20202020 0a2a2020                   *.
 8004808:	00000000 2e34202a 65532020 2b206b65     ....* 4.  Seek +
 8004818:	20202020 20202020 20202020 20202020                     
 8004828:	20202020 20202020 20202020 20202020                     
 8004838:	20202020 20202020 0a2a2020 00000000               *.....
 8004848:	2e35202a 65532020 2d206b65 20202020     * 5.  Seek -    
 8004858:	20202020 20202020 20202020 20202020                     
 8004868:	20202020 20202020 20202020 20202020                     
 8004878:	20202020 0a2a2020 00000000 2e36202a           *.....* 6.
 8004888:	6f562020 656d756c 20202b20 20202020       Volume +      
 8004898:	20202020 20202020 20202020 20202020                     
 80048a8:	20202020 20202020 20202020 20202020                     
 80048b8:	0a2a2020 00000000 2e37202a 6f562020       *.....* 7.  Vo
 80048c8:	656d756c 20202d20 20202020 20202020     lume -          
 80048d8:	20202020 20202020 20202020 20202020                     
 80048e8:	20202020 20202020 20202020 0a2a2020                   *.
 80048f8:	00000000 2e38202a 6f4b2020 20616572     ....* 8.  Korea 
 8004908:	2b206843 2020202b 20202020 20202020     Ch ++           
 8004918:	20202020 20202020 20202020 20202020                     
 8004928:	20202020 20202020 0a2a2020 00000000               *.....
 8004938:	2e39202a 6f4b2020 20616572 2d206843     * 9.  Korea Ch -
 8004948:	2020202d 20202020 20202020 20202020     -               
 8004958:	20202020 20202020 20202020 20202020                     
 8004968:	20202020 0a2a2020 00000000 2e6d202a           *.....* m.
 8004978:	654d2020 2020756e 20202020 20202020       Menu          
 8004988:	20202020 20202020 20202020 20202020                     
 8004998:	20202020 20202020 20202020 20202020                     
 80049a8:	0a2a2020 00000000 25204d46 64252064       *.....FM %d %d
 80049b8:	3a202525 00000020 25204d41 64252064     %% : ...AM %d %d
 80049c8:	3a202525 00000020 444e4142 52524520     %% : ...BAND ERR
 80049d8:	3a20524f 00000020 43204d46 69666e6f     OR : ...FM Confi
 80049e8:	203a2067 0a207825 00000000 43204d41     g : %x .....AM C
 80049f8:	69666e6f 203a2067 0a207825 00000000     onfig : %x .....
 8004a08:	71657246 25203a20 52202064 3a207465     Freq : %d  Ret :
 8004a18:	0a642520 00000000 6e756f46 72462064      %d.....Found Fr
 8004a28:	3a207165 20642520 74655220 25203a20     eq : %d  Ret : %
 8004a38:	00000a64 20746f4e 6e756f46 00000a64     d...Not Found...
 8004a48:	43727245 2065646f 74655220 25203a20     ErrCode  Ret : %
 8004a58:	00000a64 756c6f56 5520656d 203a2070     d...Volume Up : 
 8004a68:	0a206425 00000000 756c6f56 4420656d     %d .....Volume D
 8004a78:	206e776f 6425203a 00000a20 65726f4b     own : %d ...Kore
 8004a88:	4d462061 65724620 203a2071 20206425     a FM Freq : %d  
 8004a98:	20746552 6425203a 0000000a 65726f4b     Ret : %d....Kore
 8004aa8:	4d412061 65724620 203a2071 20206425     a AM Freq : %d  
 8004ab8:	20746552 6425203a 0000000a 302e6f4e     Ret : %d....No.0
 8004ac8:	0000000a                                ....

08004acc <AM_Freq.4175>:
 8004acc:	027f025b 031802c7 03840345 046e03cc     [.......E.....n.
 8004adc:	000004a4                                ....

08004ae0 <Virtual_Com_Port_StringVendor>:
 8004ae0:	00530326 004d0054 00630069 006f0072     &.S.T.M.i.c.r.o.
 8004af0:	006c0065 00630065 00720074 006e006f     e.l.e.c.t.r.o.n.
 8004b00:	00630069 00000073                       i.c.s...

08004b08 <Virtual_Com_Port_DeviceDescriptor>:
 8004b08:	02000112 40000002 57400483 02010200     .......@..@W....
 8004b18:	00000103                                ....

08004b1c <Virtual_Com_Port_StringLangID>:
 8004b1c:	04090304                                ....

08004b20 <Virtual_Com_Port_StringProduct>:
 8004b20:	00530332 004d0054 00320033 00560020     2.S.T.M.3.2. .V.
 8004b30:	00720069 00750074 006c0061 00430020     i.r.t.u.a.l. .C.
 8004b40:	004d004f 00500020 0072006f 00200074     O.M. .P.o.r.t. .
 8004b50:	00000020                                 ...

08004b54 <Virtual_Com_Port_ConfigDescriptor>:
 8004b54:	00430209 c0000102 00040932 02020100     ..C.....2.......
 8004b64:	24050001 05011000 01000124 02022404     ...$....$....$..
 8004b74:	00062405 82050701 ff000803 00010409     .$..............
 8004b84:	00000a02 03050700 00004002 02810507     .........@......
 8004b94:	00000040                                @...
