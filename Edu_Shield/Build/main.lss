
main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000036f8  08000000  08000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000f4  20000000  080036f8  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00001118  20000200  08003a00  00010200  2**9
                  ALLOC
  3 ._usrstack    00000100  20001318  08004b18  00010200  2**0
                  ALLOC
  4 .debug_info   000078b4  00000000  00000000  000100f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00002afb  00000000  00000000  000179a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_loc    00004ea3  00000000  00000000  0001a4a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 000009a8  00000000  00000000  0001f346  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000dc8  00000000  00000000  0001fcee  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002998  00000000  00000000  00020ab6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000020b1  00000000  00000000  0002344e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      00000011  00000000  00000000  000254ff  2**0
                  CONTENTS, READONLY
 12 .ARM.attributes 00000033  00000000  00000000  00025510  2**0
                  CONTENTS, READONLY
 13 .debug_frame  000016e4  00000000  00000000  00025544  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000000 <g_pfnVectors>:
 8000000:	00 50 00 20 b9 08 00 08                             .P. ....

08000008 <LED_Tick>:
static void Main_Init( void );



void LED_Tick( void )
{
 8000008:	b508      	push	{r3, lr}
	Hw_Led_Toggle(0);
 800000a:	f640 43a1 	movw	r3, #3233	; 0xca1
 800000e:	2000      	movs	r0, #0
 8000010:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000014:	4798      	blx	r3
 8000016:	bd08      	pop	{r3, pc}

08000018 <main>:
     ARG     : 	void
     RET     : 	
     			int
---------------------------------------------------------------------------*/
int main(void)
{
 8000018:	b500      	push	{lr}
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Main_Init( void )
{
	Hw_Init();
 800001a:	4b0a      	ldr	r3, [pc, #40]	; (8000044 <main+0x2c>)
     ARG     : 	void
     RET     : 	
     			int
---------------------------------------------------------------------------*/
int main(void)
{
 800001c:	b083      	sub	sp, #12
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Main_Init( void )
{
	Hw_Init();
 800001e:	4798      	blx	r3
	Ap_Init();
	
	Hw_Timer_Set  ( HW_TIMER_CH_LED, 1000, LOOP_TIME, LED_Tick, NULL );
 8000020:	2400      	movs	r4, #0
     RET     : void
---------------------------------------------------------------------------*/
void Main_Init( void )
{
	Hw_Init();
	Ap_Init();
 8000022:	4b09      	ldr	r3, [pc, #36]	; (8000048 <main+0x30>)
 8000024:	4798      	blx	r3
	
	Hw_Timer_Set  ( HW_TIMER_CH_LED, 1000, LOOP_TIME, LED_Tick, NULL );
 8000026:	4d09      	ldr	r5, [pc, #36]	; (800004c <main+0x34>)
 8000028:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800002c:	2202      	movs	r2, #2
 800002e:	4b08      	ldr	r3, [pc, #32]	; (8000050 <main+0x38>)
 8000030:	4620      	mov	r0, r4
 8000032:	9400      	str	r4, [sp, #0]
 8000034:	47a8      	blx	r5
	Hw_Timer_Start( HW_TIMER_CH_LED );	
 8000036:	4b07      	ldr	r3, [pc, #28]	; (8000054 <main+0x3c>)
 8000038:	4620      	mov	r0, r4
 800003a:	4798      	blx	r3

	//-- 명령어 처리
	//
	//Ap_RadioMenu_ExeCmd();    
	//Ap_GLcdMenu_ExeCmd();    
	Ap_EduMenu_ExeCmd();
 800003c:	4b06      	ldr	r3, [pc, #24]	; (8000058 <main+0x40>)
 800003e:	4798      	blx	r3
 8000040:	e7fe      	b.n	8000040 <main+0x28>
 8000042:	bf00      	nop
 8000044:	08000969 	.word	0x08000969
 8000048:	0800005d 	.word	0x0800005d
 800004c:	08000f21 	.word	0x08000f21
 8000050:	08000009 	.word	0x08000009
 8000054:	08000f41 	.word	0x08000f41
 8000058:	08000189 	.word	0x08000189

0800005c <Ap_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Ap_Init( void )
{
 800005c:	4770      	bx	lr
 800005e:	bf00      	nop

08000060 <KeyPad_DownKeyEvent>:
	}
}

void KeyPad_DownKeyEvent( u32 Event )
{
	if( Event == HW_KEYPAD_EVENT_RELEASED || Event == HW_KEYPAD_EVENT_REPEAT )
 8000060:	3801      	subs	r0, #1
 8000062:	2801      	cmp	r0, #1
		Hw_7Seg_Print( 0, "%d", Seg_Count++ );
	}
}

void KeyPad_DownKeyEvent( u32 Event )
{
 8000064:	b510      	push	{r4, lr}
	if( Event == HW_KEYPAD_EVENT_RELEASED || Event == HW_KEYPAD_EVENT_REPEAT )
 8000066:	d900      	bls.n	800006a <KeyPad_DownKeyEvent+0xa>
 8000068:	bd10      	pop	{r4, pc}
	{
		Seg_Count -= 2;
 800006a:	4b05      	ldr	r3, [pc, #20]	; (8000080 <KeyPad_DownKeyEvent+0x20>)
		
		
		Hw_7Seg_Print( 0, "%d", Seg_Count++ );
 800006c:	2000      	movs	r0, #0

void KeyPad_DownKeyEvent( u32 Event )
{
	if( Event == HW_KEYPAD_EVENT_RELEASED || Event == HW_KEYPAD_EVENT_REPEAT )
	{
		Seg_Count -= 2;
 800006e:	881c      	ldrh	r4, [r3, #0]
		
		
		Hw_7Seg_Print( 0, "%d", Seg_Count++ );
 8000070:	4904      	ldr	r1, [pc, #16]	; (8000084 <KeyPad_DownKeyEvent+0x24>)

void KeyPad_DownKeyEvent( u32 Event )
{
	if( Event == HW_KEYPAD_EVENT_RELEASED || Event == HW_KEYPAD_EVENT_REPEAT )
	{
		Seg_Count -= 2;
 8000072:	1ea2      	subs	r2, r4, #2
		
		
		Hw_7Seg_Print( 0, "%d", Seg_Count++ );
 8000074:	3c01      	subs	r4, #1
 8000076:	801c      	strh	r4, [r3, #0]
 8000078:	b292      	uxth	r2, r2
 800007a:	4b03      	ldr	r3, [pc, #12]	; (8000088 <KeyPad_DownKeyEvent+0x28>)
 800007c:	4798      	blx	r3
 800007e:	bd10      	pop	{r4, pc}
 8000080:	20000200 	.word	0x20000200
 8000084:	080032e0 	.word	0x080032e0
 8000088:	080017e1 	.word	0x080017e1

0800008c <KeyPad_UpKeyEvent>:



void KeyPad_UpKeyEvent( u32 Event )
{
	if( Event == HW_KEYPAD_EVENT_RELEASED || Event == HW_KEYPAD_EVENT_REPEAT )
 800008c:	3801      	subs	r0, #1
 800008e:	2801      	cmp	r0, #1
void Ap_EduMenu_ShowMenu(void);



void KeyPad_UpKeyEvent( u32 Event )
{
 8000090:	b510      	push	{r4, lr}
	if( Event == HW_KEYPAD_EVENT_RELEASED || Event == HW_KEYPAD_EVENT_REPEAT )
 8000092:	d900      	bls.n	8000096 <KeyPad_UpKeyEvent+0xa>
 8000094:	bd10      	pop	{r4, pc}
	{
		Hw_7Seg_Print( 0, "%d", Seg_Count++ );
 8000096:	4b04      	ldr	r3, [pc, #16]	; (80000a8 <KeyPad_UpKeyEvent+0x1c>)
 8000098:	2000      	movs	r0, #0
 800009a:	881a      	ldrh	r2, [r3, #0]
 800009c:	4903      	ldr	r1, [pc, #12]	; (80000ac <KeyPad_UpKeyEvent+0x20>)
 800009e:	1c54      	adds	r4, r2, #1
 80000a0:	801c      	strh	r4, [r3, #0]
 80000a2:	4b03      	ldr	r3, [pc, #12]	; (80000b0 <KeyPad_UpKeyEvent+0x24>)
 80000a4:	4798      	blx	r3
 80000a6:	bd10      	pop	{r4, pc}
 80000a8:	20000200 	.word	0x20000200
 80000ac:	080032e0 	.word	0x080032e0
 80000b0:	080017e1 	.word	0x080017e1

080000b4 <Ap_EduMenu_ShowMenu>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Ap_EduMenu_ShowMenu(void)
{
 80000b4:	b538      	push	{r3, r4, r5, lr}
	u8 key;

	Lb_printf("\n\n");
 80000b6:	f243 20e4 	movw	r0, #13028	; 0x32e4
 80000ba:	f240 64d9 	movw	r4, #1753	; 0x6d9
	Lb_printf("*******************************************************\n");
 80000be:	f243 25e8 	movw	r5, #13032	; 0x32e8
---------------------------------------------------------------------------*/
void Ap_EduMenu_ShowMenu(void)
{
	u8 key;

	Lb_printf("\n\n");
 80000c2:	f6c0 0400 	movt	r4, #2048	; 0x800
	Lb_printf("*******************************************************\n");
 80000c6:	f6c0 0500 	movt	r5, #2048	; 0x800
---------------------------------------------------------------------------*/
void Ap_EduMenu_ShowMenu(void)
{
	u8 key;

	Lb_printf("\n\n");
 80000ca:	f6c0 0000 	movt	r0, #2048	; 0x800
 80000ce:	47a0      	blx	r4
	Lb_printf("*******************************************************\n");
 80000d0:	4628      	mov	r0, r5
 80000d2:	47a0      	blx	r4
	Lb_printf("                      Edu V0.3                         \n");
 80000d4:	f243 3024 	movw	r0, #13092	; 0x3324
 80000d8:	f6c0 0000 	movt	r0, #2048	; 0x800
 80000dc:	47a0      	blx	r4
	Lb_printf("*******************************************************\n");
 80000de:	4628      	mov	r0, r5
 80000e0:	47a0      	blx	r4
	Lb_printf("* 1. LED Test                                         *\n");
 80000e2:	f243 3060 	movw	r0, #13152	; 0x3360
 80000e6:	f6c0 0000 	movt	r0, #2048	; 0x800
 80000ea:	47a0      	blx	r4
	Lb_printf("* 2. KeyPad Test                                      *\n");
 80000ec:	f243 309c 	movw	r0, #13212	; 0x339c
 80000f0:	f6c0 0000 	movt	r0, #2048	; 0x800
 80000f4:	47a0      	blx	r4
	Lb_printf("* 3. 7Seg Test                                        *\n");
 80000f6:	f243 30d8 	movw	r0, #13272	; 0x33d8
 80000fa:	f6c0 0000 	movt	r0, #2048	; 0x800
 80000fe:	47a0      	blx	r4
	Lb_printf("* 4.                                                  *\n");
 8000100:	f243 4014 	movw	r0, #13332	; 0x3414
 8000104:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000108:	47a0      	blx	r4
	Lb_printf("* 5.                                                  *\n");
 800010a:	f243 4050 	movw	r0, #13392	; 0x3450
 800010e:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000112:	47a0      	blx	r4
	Lb_printf("* 6.                                                  *\n");
 8000114:	f243 408c 	movw	r0, #13452	; 0x348c
 8000118:	f6c0 0000 	movt	r0, #2048	; 0x800
 800011c:	47a0      	blx	r4
	Lb_printf("* 7.                                                  *\n");
 800011e:	f243 40c8 	movw	r0, #13512	; 0x34c8
 8000122:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000126:	47a0      	blx	r4
	Lb_printf("* 8.                                                  *\n");
 8000128:	f243 5004 	movw	r0, #13572	; 0x3504
 800012c:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000130:	47a0      	blx	r4
	Lb_printf("* 9.                                                  *\n");
 8000132:	f243 5040 	movw	r0, #13632	; 0x3540
 8000136:	f6c0 0000 	movt	r0, #2048	; 0x800
 800013a:	47a0      	blx	r4
	Lb_printf("* m.  Menu                                            *\n");
 800013c:	f243 507c 	movw	r0, #13692	; 0x357c
 8000140:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000144:	47a0      	blx	r4
	Lb_printf("*******************************************************\n");
 8000146:	4628      	mov	r0, r5
 8000148:	47a0      	blx	r4
	Lb_printf("\n");
 800014a:	f243 6024 	movw	r0, #13860	; 0x3624
 800014e:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000152:	47a0      	blx	r4
 8000154:	bd38      	pop	{r3, r4, r5, pc}
 8000156:	bf00      	nop

08000158 <Ap_EduMenu_GetCmd>:
     ARG     : void
     RET     : 
				u8 : 눌려진 메뉴키 데이터 
---------------------------------------------------------------------------*/
u8 Ap_EduMenu_GetCmd(void)
{
 8000158:	b538      	push	{r3, r4, r5, lr}
	u8  key;
	

	Lb_printf(">> ");
 800015a:	f243 50b8 	movw	r0, #13752	; 0x35b8
 800015e:	f240 64d9 	movw	r4, #1753	; 0x6d9
 8000162:	f6c0 0400 	movt	r4, #2048	; 0x800
 8000166:	f6c0 0000 	movt	r0, #2048	; 0x800
 800016a:	47a0      	blx	r4

    key=get_byte();
 800016c:	f640 3399 	movw	r3, #2969	; 0xb99
 8000170:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000174:	4798      	blx	r3
 8000176:	4605      	mov	r5, r0
	
	Lb_printf("\n");
 8000178:	f243 6024 	movw	r0, #13860	; 0x3624
 800017c:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000180:	47a0      	blx	r4
	
    return key;
}
 8000182:	4628      	mov	r0, r5
 8000184:	bd38      	pop	{r3, r4, r5, pc}
 8000186:	bf00      	nop

08000188 <Ap_EduMenu_ExeCmd>:
     ARG     : void
     RET     : 
				u8 : 눌려진 메뉴키 데이터 
---------------------------------------------------------------------------*/
u8 Ap_EduMenu_ExeCmd(void)
{
 8000188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u16 Ret = ERR_NONE;
			
	
	if( ExeFirst == TRUE )
	{
		Ap_EduMenu_ShowMenu();		
 800018c:	f240 03b5 	movw	r3, #181	; 0xb5
     ARG     : void
     RET     : 
				u8 : 눌려진 메뉴키 데이터 
---------------------------------------------------------------------------*/
u8 Ap_EduMenu_ExeCmd(void)
{
 8000190:	b083      	sub	sp, #12
	u16 Ret = ERR_NONE;
			
	
	if( ExeFirst == TRUE )
	{
		Ap_EduMenu_ShowMenu();		
 8000192:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000196:	4798      	blx	r3
		
		Hw_KeyPad_SetEventFunc( 2, KeyPad_UpKeyEvent );
 8000198:	4c42      	ldr	r4, [pc, #264]	; (80002a4 <Ap_EduMenu_ExeCmd+0x11c>)
 800019a:	2002      	movs	r0, #2
 800019c:	4942      	ldr	r1, [pc, #264]	; (80002a8 <Ap_EduMenu_ExeCmd+0x120>)
 800019e:	47a0      	blx	r4
		Hw_KeyPad_SetEventFunc( 0, KeyPad_DownKeyEvent );	
 80001a0:	2000      	movs	r0, #0
 80001a2:	4942      	ldr	r1, [pc, #264]	; (80002ac <Ap_EduMenu_ExeCmd+0x124>)
 80001a4:	47a0      	blx	r4
 80001a6:	f8df 8130 	ldr.w	r8, [pc, #304]	; 80002d8 <Ap_EduMenu_ExeCmd+0x150>
    while( (key = Ap_EduMenu_GetCmd()) != 0 )
    {
        switch(key)
        {
           case '1':
           		Hw_Led_Toggle( 0 );
 80001aa:	f8df 9130 	ldr.w	r9, [pc, #304]	; 80002dc <Ap_EduMenu_ExeCmd+0x154>
           		Hw_Timer_Delay_ms(500);
 80001ae:	f8df a130 	ldr.w	sl, [pc, #304]	; 80002e0 <Ap_EduMenu_ExeCmd+0x158>
		
		Hw_KeyPad_SetEventFunc( 2, KeyPad_UpKeyEvent );
		Hw_KeyPad_SetEventFunc( 0, KeyPad_DownKeyEvent );	
	}

    while( (key = Ap_EduMenu_GetCmd()) != 0 )
 80001b2:	47c0      	blx	r8
 80001b4:	4603      	mov	r3, r0
 80001b6:	b338      	cbz	r0, 8000208 <Ap_EduMenu_ExeCmd+0x80>
    {
        switch(key)
 80001b8:	2b33      	cmp	r3, #51	; 0x33
 80001ba:	d064      	beq.n	8000286 <Ap_EduMenu_ExeCmd+0xfe>
 80001bc:	d82d      	bhi.n	800021a <Ap_EduMenu_ExeCmd+0x92>
 80001be:	2b31      	cmp	r3, #49	; 0x31
 80001c0:	d04c      	beq.n	800025c <Ap_EduMenu_ExeCmd+0xd4>
 80001c2:	2b32      	cmp	r3, #50	; 0x32
 80001c4:	d1f5      	bne.n	80001b2 <Ap_EduMenu_ExeCmd+0x2a>
           		Hw_Led_Toggle( 3 );
           		Hw_Timer_Delay_ms(500);
               	break;

           case '2':
           		Lb_printf("KeyPad Start : press two keys to exit\n");
 80001c6:	483a      	ldr	r0, [pc, #232]	; (80002b0 <Ap_EduMenu_ExeCmd+0x128>)
 80001c8:	4e3a      	ldr	r6, [pc, #232]	; (80002b4 <Ap_EduMenu_ExeCmd+0x12c>)
 80001ca:	47b0      	blx	r6
 80001cc:	4d3a      	ldr	r5, [pc, #232]	; (80002b8 <Ap_EduMenu_ExeCmd+0x130>)
 80001ce:	4c3b      	ldr	r4, [pc, #236]	; (80002bc <Ap_EduMenu_ExeCmd+0x134>)
					else
					if( IS_SET_BIT( KeyEvent, HW_KEYPAD_EVENT_REPEAT) )
					{
						KeyNum = Hw_KeyPad_GetEventKeyNum(HW_KEYPAD_EVENT_REPEAT);
						
						Lb_printf("%x KeyRepeat Cnt : %d\n",Hw_KeyPad_GetEventKeyData(HW_KEYPAD_EVENT_REPEAT), Hw_KeyPad_GetRepeatCnt( KeyNum ) );           		           									
 80001d0:	4f3b      	ldr	r7, [pc, #236]	; (80002c0 <Ap_EduMenu_ExeCmd+0x138>)
 80001d2:	e006      	b.n	80001e2 <Ap_EduMenu_ExeCmd+0x5a>
           			if( IS_SET_BIT( KeyEvent, HW_KEYPAD_EVENT_PRESSED) )
           			{ 
           				Lb_printf("%x KeyPressed\n", Hw_KeyPad_GetEventKeyData(HW_KEYPAD_EVENT_PRESSED) );           		           			
					}										
					else
					if( IS_SET_BIT( KeyEvent, HW_KEYPAD_EVENT_RELEASED) )
 80001d4:	0742      	lsls	r2, r0, #29
 80001d6:	d41a      	bmi.n	800020e <Ap_EduMenu_ExeCmd+0x86>
					{
						Lb_printf("%x KeyReleased\n", Hw_KeyPad_GetEventKeyData(HW_KEYPAD_EVENT_RELEASED) );           		           									
					}
					else
					if( IS_SET_BIT( KeyEvent, HW_KEYPAD_EVENT_REPEAT) )
 80001d8:	0783      	lsls	r3, r0, #30
 80001da:	d428      	bmi.n	800022e <Ap_EduMenu_ExeCmd+0xa6>
						KeyNum = Hw_KeyPad_GetEventKeyNum(HW_KEYPAD_EVENT_REPEAT);
						
						Lb_printf("%x KeyRepeat Cnt : %d\n",Hw_KeyPad_GetEventKeyData(HW_KEYPAD_EVENT_REPEAT), Hw_KeyPad_GetRepeatCnt( KeyNum ) );           		           									
					}
					
					KeyPressedCnt = Hw_KeyPad_GetPressedCnt();
 80001dc:	47a0      	blx	r4
						
					if( KeyPressedCnt >= 2 )
 80001de:	2801      	cmp	r0, #1
 80001e0:	d80c      	bhi.n	80001fc <Ap_EduMenu_ExeCmd+0x74>

           case '2':
           		Lb_printf("KeyPad Start : press two keys to exit\n");
           		while(1)
           		{
           			KeyEvent = Hw_KeyPad_WaitForEvent(1000);
 80001e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001e6:	47a8      	blx	r5
           			 
           			if( IS_SET_BIT( KeyEvent, HW_KEYPAD_EVENT_PRESSED) )
 80001e8:	07c1      	lsls	r1, r0, #31
 80001ea:	d5f3      	bpl.n	80001d4 <Ap_EduMenu_ExeCmd+0x4c>
           			{ 
           				Lb_printf("%x KeyPressed\n", Hw_KeyPad_GetEventKeyData(HW_KEYPAD_EVENT_PRESSED) );           		           			
 80001ec:	2000      	movs	r0, #0
 80001ee:	47b8      	blx	r7
 80001f0:	4601      	mov	r1, r0
 80001f2:	4834      	ldr	r0, [pc, #208]	; (80002c4 <Ap_EduMenu_ExeCmd+0x13c>)
 80001f4:	47b0      	blx	r6
						KeyNum = Hw_KeyPad_GetEventKeyNum(HW_KEYPAD_EVENT_REPEAT);
						
						Lb_printf("%x KeyRepeat Cnt : %d\n",Hw_KeyPad_GetEventKeyData(HW_KEYPAD_EVENT_REPEAT), Hw_KeyPad_GetRepeatCnt( KeyNum ) );           		           									
					}
					
					KeyPressedCnt = Hw_KeyPad_GetPressedCnt();
 80001f6:	47a0      	blx	r4
						
					if( KeyPressedCnt >= 2 )
 80001f8:	2801      	cmp	r0, #1
 80001fa:	d9f2      	bls.n	80001e2 <Ap_EduMenu_ExeCmd+0x5a>
					{
						Lb_printf("Key Exit\n");
 80001fc:	4832      	ldr	r0, [pc, #200]	; (80002c8 <Ap_EduMenu_ExeCmd+0x140>)
 80001fe:	47b0      	blx	r6
		
		Hw_KeyPad_SetEventFunc( 2, KeyPad_UpKeyEvent );
		Hw_KeyPad_SetEventFunc( 0, KeyPad_DownKeyEvent );	
	}

    while( (key = Ap_EduMenu_GetCmd()) != 0 )
 8000200:	47c0      	blx	r8
 8000202:	4603      	mov	r3, r0
 8000204:	2800      	cmp	r0, #0
 8000206:	d1d7      	bne.n	80001b8 <Ap_EduMenu_ExeCmd+0x30>
               break;
        }
    }
    
    return Ret;
}
 8000208:	b003      	add	sp, #12
 800020a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
           				Lb_printf("%x KeyPressed\n", Hw_KeyPad_GetEventKeyData(HW_KEYPAD_EVENT_PRESSED) );           		           			
					}										
					else
					if( IS_SET_BIT( KeyEvent, HW_KEYPAD_EVENT_RELEASED) )
					{
						Lb_printf("%x KeyReleased\n", Hw_KeyPad_GetEventKeyData(HW_KEYPAD_EVENT_RELEASED) );           		           									
 800020e:	2002      	movs	r0, #2
 8000210:	47b8      	blx	r7
 8000212:	4601      	mov	r1, r0
 8000214:	482d      	ldr	r0, [pc, #180]	; (80002cc <Ap_EduMenu_ExeCmd+0x144>)
 8000216:	47b0      	blx	r6
 8000218:	e7e0      	b.n	80001dc <Ap_EduMenu_ExeCmd+0x54>
		Hw_KeyPad_SetEventFunc( 0, KeyPad_DownKeyEvent );	
	}

    while( (key = Ap_EduMenu_GetCmd()) != 0 )
    {
        switch(key)
 800021a:	2b4d      	cmp	r3, #77	; 0x4d
 800021c:	d001      	beq.n	8000222 <Ap_EduMenu_ExeCmd+0x9a>
 800021e:	2b6d      	cmp	r3, #109	; 0x6d
 8000220:	d1c7      	bne.n	80001b2 <Ap_EduMenu_ExeCmd+0x2a>
           case '0':
               break;

			case 'm':
			case 'M':
				Ap_EduMenu_ShowMenu();
 8000222:	f240 04b5 	movw	r4, #181	; 0xb5
 8000226:	f6c0 0400 	movt	r4, #2048	; 0x800
 800022a:	47a0      	blx	r4
				break;
 800022c:	e7c1      	b.n	80001b2 <Ap_EduMenu_ExeCmd+0x2a>
						Lb_printf("%x KeyReleased\n", Hw_KeyPad_GetEventKeyData(HW_KEYPAD_EVENT_RELEASED) );           		           									
					}
					else
					if( IS_SET_BIT( KeyEvent, HW_KEYPAD_EVENT_REPEAT) )
					{
						KeyNum = Hw_KeyPad_GetEventKeyNum(HW_KEYPAD_EVENT_REPEAT);
 800022e:	f241 63b5 	movw	r3, #5813	; 0x16b5
 8000232:	2001      	movs	r0, #1
 8000234:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000238:	4798      	blx	r3
 800023a:	4603      	mov	r3, r0
						
						Lb_printf("%x KeyRepeat Cnt : %d\n",Hw_KeyPad_GetEventKeyData(HW_KEYPAD_EVENT_REPEAT), Hw_KeyPad_GetRepeatCnt( KeyNum ) );           		           									
 800023c:	9301      	str	r3, [sp, #4]
 800023e:	2001      	movs	r0, #1
 8000240:	47b8      	blx	r7
 8000242:	9b01      	ldr	r3, [sp, #4]
 8000244:	4683      	mov	fp, r0
 8000246:	b2d8      	uxtb	r0, r3
 8000248:	f241 6341 	movw	r3, #5697	; 0x1641
 800024c:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000250:	4798      	blx	r3
 8000252:	4659      	mov	r1, fp
 8000254:	4602      	mov	r2, r0
 8000256:	481e      	ldr	r0, [pc, #120]	; (80002d0 <Ap_EduMenu_ExeCmd+0x148>)
 8000258:	47b0      	blx	r6
 800025a:	e7bf      	b.n	80001dc <Ap_EduMenu_ExeCmd+0x54>
    while( (key = Ap_EduMenu_GetCmd()) != 0 )
    {
        switch(key)
        {
           case '1':
           		Hw_Led_Toggle( 0 );
 800025c:	2000      	movs	r0, #0
 800025e:	47c8      	blx	r9
           		Hw_Timer_Delay_ms(500);
 8000260:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000264:	47d0      	blx	sl
           		Hw_Led_Toggle( 1 );
 8000266:	2001      	movs	r0, #1
 8000268:	47c8      	blx	r9
           		Hw_Timer_Delay_ms(500);
 800026a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800026e:	47d0      	blx	sl
           		Hw_Led_Toggle( 2 );;
 8000270:	2002      	movs	r0, #2
 8000272:	47c8      	blx	r9
           		Hw_Timer_Delay_ms(500);
 8000274:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000278:	47d0      	blx	sl
           		Hw_Led_Toggle( 3 );
 800027a:	2003      	movs	r0, #3
 800027c:	47c8      	blx	r9
           		Hw_Timer_Delay_ms(500);
 800027e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000282:	47d0      	blx	sl
               	break;
 8000284:	e795      	b.n	80001b2 <Ap_EduMenu_ExeCmd+0x2a>
					}	
				}
				break;

           case '3':	
           		Hw_7Seg_Print( 0, "%d", Seg_Count++ );
 8000286:	f240 2400 	movw	r4, #512	; 0x200
 800028a:	f2c2 0400 	movt	r4, #8192	; 0x2000
 800028e:	8822      	ldrh	r2, [r4, #0]
 8000290:	2000      	movs	r0, #0
 8000292:	1c53      	adds	r3, r2, #1
 8000294:	8023      	strh	r3, [r4, #0]
 8000296:	f241 73e1 	movw	r3, #6113	; 0x17e1
 800029a:	490e      	ldr	r1, [pc, #56]	; (80002d4 <Ap_EduMenu_ExeCmd+0x14c>)
 800029c:	f6c0 0300 	movt	r3, #2048	; 0x800
 80002a0:	4798      	blx	r3
               break; 
 80002a2:	e786      	b.n	80001b2 <Ap_EduMenu_ExeCmd+0x2a>
 80002a4:	08001629 	.word	0x08001629
 80002a8:	0800008d 	.word	0x0800008d
 80002ac:	08000061 	.word	0x08000061
 80002b0:	080035bc 	.word	0x080035bc
 80002b4:	080006d9 	.word	0x080006d9
 80002b8:	08001669 	.word	0x08001669
 80002bc:	0800165d 	.word	0x0800165d
 80002c0:	080016a1 	.word	0x080016a1
 80002c4:	080035e4 	.word	0x080035e4
 80002c8:	0800361c 	.word	0x0800361c
 80002cc:	080035f4 	.word	0x080035f4
 80002d0:	08003604 	.word	0x08003604
 80002d4:	080032e0 	.word	0x080032e0
 80002d8:	08000159 	.word	0x08000159
 80002dc:	08000ca1 	.word	0x08000ca1
 80002e0:	08000f55 	.word	0x08000f55

080002e4 <print_byte_out>:




void print_byte_out(unsigned int c)
{
 80002e4:	b538      	push	{r3, r4, r5, lr}
	if( StrPrintMode == LB_PRINT_OUT_UART )
 80002e6:	4b09      	ldr	r3, [pc, #36]	; (800030c <print_byte_out+0x28>)




void print_byte_out(unsigned int c)
{
 80002e8:	4605      	mov	r5, r0
	if( StrPrintMode == LB_PRINT_OUT_UART )
 80002ea:	781b      	ldrb	r3, [r3, #0]
 80002ec:	b153      	cbz	r3, 8000304 <print_byte_out+0x20>
	{
		print_byte(c);
	}
	else
	{
		pStrPrintBuf[ StrPrintBufIndex++ ] = c; 
 80002ee:	4a08      	ldr	r2, [pc, #32]	; (8000310 <print_byte_out+0x2c>)
 80002f0:	4908      	ldr	r1, [pc, #32]	; (8000314 <print_byte_out+0x30>)
 80002f2:	6814      	ldr	r4, [r2, #0]
 80002f4:	6808      	ldr	r0, [r1, #0]
 80002f6:	1c63      	adds	r3, r4, #1
 80002f8:	5505      	strb	r5, [r0, r4]
		pStrPrintBuf[ StrPrintBufIndex   ] = 0; 
 80002fa:	6809      	ldr	r1, [r1, #0]
	{
		print_byte(c);
	}
	else
	{
		pStrPrintBuf[ StrPrintBufIndex++ ] = c; 
 80002fc:	6013      	str	r3, [r2, #0]
		pStrPrintBuf[ StrPrintBufIndex   ] = 0; 
 80002fe:	2200      	movs	r2, #0
 8000300:	54ca      	strb	r2, [r1, r3]
 8000302:	bd38      	pop	{r3, r4, r5, pc}

void print_byte_out(unsigned int c)
{
	if( StrPrintMode == LB_PRINT_OUT_UART )
	{
		print_byte(c);
 8000304:	4b04      	ldr	r3, [pc, #16]	; (8000318 <print_byte_out+0x34>)
 8000306:	4798      	blx	r3
 8000308:	bd38      	pop	{r3, r4, r5, pc}
 800030a:	bf00      	nop
 800030c:	20000208 	.word	0x20000208
 8000310:	20000204 	.word	0x20000204
 8000314:	200002f4 	.word	0x200002f4
 8000318:	08000b5d 	.word	0x08000b5d

0800031c <PrintString.part.0>:
                }
        }
        return;
}

void PrintString(char *fmt, char *s)
 800031c:	b538      	push	{r3, r4, r5, lr}
 800031e:	4604      	mov	r4, r0
{
        if (!fmt || !s) return;
        while (*s) print_byte_out(*s++);
 8000320:	7800      	ldrb	r0, [r0, #0]
 8000322:	b128      	cbz	r0, 8000330 <PrintString.part.0+0x14>
 8000324:	4d03      	ldr	r5, [pc, #12]	; (8000334 <PrintString.part.0+0x18>)
 8000326:	47a8      	blx	r5
 8000328:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 800032c:	2800      	cmp	r0, #0
 800032e:	d1fa      	bne.n	8000326 <PrintString.part.0+0xa>
 8000330:	bd38      	pop	{r3, r4, r5, pc}
 8000332:	bf00      	nop
 8000334:	080002e5 	.word	0x080002e5

08000338 <DecToLong>:
// 역할 : 10진수 문자열 s에서 정수를 만들어 retval이 가리키는 위치에 기록.
// 매개 : s      : 변환할 문자열의 주소.
//        retval : 변환된 값이 기록될 주소.
// 반환 : return : 1 : success                0 : failure.
// 주의 :
int DecToLong(char *s, long *retval){
 8000338:	b430      	push	{r4, r5}
        long remainder;
        if (!s || !s[0]) return false;
 800033a:	b1d0      	cbz	r0, 8000372 <DecToLong+0x3a>
 800033c:	7803      	ldrb	r3, [r0, #0]
 800033e:	b1d3      	cbz	r3, 8000376 <DecToLong+0x3e>


        for (*retval=0; *s; s++){
 8000340:	2300      	movs	r3, #0
 8000342:	600b      	str	r3, [r1, #0]
 8000344:	7802      	ldrb	r2, [r0, #0]
 8000346:	b19a      	cbz	r2, 8000370 <DecToLong+0x38>
                if (*s < '0' || *s > '9') return false;
 8000348:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
 800034c:	b2e2      	uxtb	r2, r4
 800034e:	2a09      	cmp	r2, #9
 8000350:	d902      	bls.n	8000358 <DecToLong+0x20>
 8000352:	e012      	b.n	800037a <DecToLong+0x42>
 8000354:	2d09      	cmp	r5, #9
 8000356:	d810      	bhi.n	800037a <DecToLong+0x42>
                remainder = *s - '0';
                *retval = *retval * 10 + remainder;
 8000358:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800035c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8000360:	600b      	str	r3, [r1, #0]
int DecToLong(char *s, long *retval){
        long remainder;
        if (!s || !s[0]) return false;


        for (*retval=0; *s; s++){
 8000362:	f810 2f01 	ldrb.w	r2, [r0, #1]!
                if (*s < '0' || *s > '9') return false;
 8000366:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
 800036a:	b2e5      	uxtb	r5, r4
int DecToLong(char *s, long *retval){
        long remainder;
        if (!s || !s[0]) return false;


        for (*retval=0; *s; s++){
 800036c:	2a00      	cmp	r2, #0
 800036e:	d1f1      	bne.n	8000354 <DecToLong+0x1c>
                remainder = *s - '0';
                *retval = *retval * 10 + remainder;
        }


        return true;
 8000370:	2001      	movs	r0, #1
}        // DecToLong.
 8000372:	bc30      	pop	{r4, r5}
 8000374:	4770      	bx	lr
//        retval : 변환된 값이 기록될 주소.
// 반환 : return : 1 : success                0 : failure.
// 주의 :
int DecToLong(char *s, long *retval){
        long remainder;
        if (!s || !s[0]) return false;
 8000376:	4618      	mov	r0, r3
 8000378:	e7fb      	b.n	8000372 <DecToLong+0x3a>


        for (*retval=0; *s; s++){
                if (*s < '0' || *s > '9') return false;
 800037a:	2000      	movs	r0, #0
 800037c:	e7f9      	b.n	8000372 <DecToLong+0x3a>
 800037e:	bf00      	nop

08000380 <PrintDec>:
        return;
}


void PrintDec(char *fmt, int l)
{
 8000380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	bool        leading_zero=true;			// long형의 data를 출력하기 위한 변수.
	long        divisor, result, remainder;


	// fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
	for (i=0; (c=s[i]) != 0; i++)
 8000384:	7803      	ldrb	r3, [r0, #0]
        return;
}


void PrintDec(char *fmt, int l)
{
 8000386:	b084      	sub	sp, #16
	int        i, j;
	char        c, *s=fmt, tol[10];
	bool        flag0=false, flagl=false;	// "%08lx"에서 '0', 'l'의 존재 여부.
	long        flagcnt=0;              	// "%08lx"에서 "8"을 찾아서 long형으로.
 8000388:	2600      	movs	r6, #0
        return;
}


void PrintDec(char *fmt, int l)
{
 800038a:	4682      	mov	sl, r0
 800038c:	4689      	mov	r9, r1
	int        i, j;
	char        c, *s=fmt, tol[10];
	bool        flag0=false, flagl=false;	// "%08lx"에서 '0', 'l'의 존재 여부.
	long        flagcnt=0;              	// "%08lx"에서 "8"을 찾아서 long형으로.
 800038e:	9600      	str	r6, [sp, #0]
	bool        leading_zero=true;			// long형의 data를 출력하기 위한 변수.
	long        divisor, result, remainder;


	// fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
	for (i=0; (c=s[i]) != 0; i++)
 8000390:	2b00      	cmp	r3, #0
 8000392:	d07f      	beq.n	8000494 <PrintDec+0x114>
	{
		if (c=='d') break;
 8000394:	2b64      	cmp	r3, #100	; 0x64
 8000396:	d07d      	beq.n	8000494 <PrintDec+0x114>
			{
				tol[j] = s[i++];
			}
			tol[j] = '\0';
			i--;
			DecToLong(tol, &flagcnt);
 8000398:	4f56      	ldr	r7, [pc, #344]	; (80004f4 <PrintDec+0x174>)


	// fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
	for (i=0; (c=s[i]) != 0; i++)
	{
		if (c=='d') break;
 800039a:	4634      	mov	r4, r6
		{
			for (j=0; s[i]>='0' && s[i]<='9'; j++)
			{
				tol[j] = s[i++];
			}
			tol[j] = '\0';
 800039c:	46b0      	mov	r8, r6

	// fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
	for (i=0; (c=s[i]) != 0; i++)
	{
		if (c=='d') break;
		else if (c>='1' && c<='9')
 800039e:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80003a2:	2a08      	cmp	r2, #8
 80003a4:	d872      	bhi.n	800048c <PrintDec+0x10c>
		{
			for (j=0; s[i]>='0' && s[i]<='9'; j++)
 80003a6:	f81a 2004 	ldrb.w	r2, [sl, r4]
 80003aa:	eb0a 0504 	add.w	r5, sl, r4
 80003ae:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80003b2:	2b09      	cmp	r3, #9
 80003b4:	a801      	add	r0, sp, #4
 80003b6:	f04f 0300 	mov.w	r3, #0
 80003ba:	d808      	bhi.n	80003ce <PrintDec+0x4e>
			{
				tol[j] = s[i++];
 80003bc:	54c2      	strb	r2, [r0, r3]
	for (i=0; (c=s[i]) != 0; i++)
	{
		if (c=='d') break;
		else if (c>='1' && c<='9')
		{
			for (j=0; s[i]>='0' && s[i]<='9'; j++)
 80003be:	f815 2f01 	ldrb.w	r2, [r5, #1]!
			{
				tol[j] = s[i++];
 80003c2:	3401      	adds	r4, #1
	for (i=0; (c=s[i]) != 0; i++)
	{
		if (c=='d') break;
		else if (c>='1' && c<='9')
		{
			for (j=0; s[i]>='0' && s[i]<='9'; j++)
 80003c4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80003c8:	3301      	adds	r3, #1
 80003ca:	2909      	cmp	r1, #9
 80003cc:	d9f6      	bls.n	80003bc <PrintDec+0x3c>
			{
				tol[j] = s[i++];
			}
			tol[j] = '\0';
 80003ce:	aa04      	add	r2, sp, #16
 80003d0:	18d3      	adds	r3, r2, r3
			i--;
			DecToLong(tol, &flagcnt);
 80003d2:	4669      	mov	r1, sp
		{
			for (j=0; s[i]>='0' && s[i]<='9'; j++)
			{
				tol[j] = s[i++];
			}
			tol[j] = '\0';
 80003d4:	f803 8c0c 	strb.w	r8, [r3, #-12]
			i--;
 80003d8:	3c01      	subs	r4, #1
			DecToLong(tol, &flagcnt);
 80003da:	47b8      	blx	r7
	bool        leading_zero=true;			// long형의 data를 출력하기 위한 변수.
	long        divisor, result, remainder;


	// fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
	for (i=0; (c=s[i]) != 0; i++)
 80003dc:	3401      	adds	r4, #1
 80003de:	f81a 3004 	ldrb.w	r3, [sl, r4]
 80003e2:	b10b      	cbz	r3, 80003e8 <PrintDec+0x68>
	{
		if (c=='d') break;
 80003e4:	2b64      	cmp	r3, #100	; 0x64
 80003e6:	d1da      	bne.n	800039e <PrintDec+0x1e>
		else if (c=='l') flagl=true;
		else continue;
	}

	// 위의 flag에 따라 출력.
	if (flagcnt)
 80003e8:	9800      	ldr	r0, [sp, #0]
 80003ea:	2800      	cmp	r0, #0
 80003ec:	d052      	beq.n	8000494 <PrintDec+0x114>
	{
                if (flagcnt>9) flagcnt=9;
 80003ee:	2809      	cmp	r0, #9
 80003f0:	dd78      	ble.n	80004e4 <PrintDec+0x164>
 80003f2:	2009      	movs	r0, #9
 80003f4:	9000      	str	r0, [sp, #0]
 80003f6:	2206      	movs	r2, #6
{
        long retval=num;
        cnt--;


        while (cnt--){
 80003f8:	2107      	movs	r1, #7
 80003fa:	230a      	movs	r3, #10
                retval *= num;
 80003fc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
{
        long retval=num;
        cnt--;


        while (cnt--){
 8000400:	3901      	subs	r1, #1
                retval *= num;
 8000402:	005b      	lsls	r3, r3, #1
{
        long retval=num;
        cnt--;


        while (cnt--){
 8000404:	1c4c      	adds	r4, r1, #1
 8000406:	d1f9      	bne.n	80003fc <PrintDec+0x7c>

	// 위의 flag에 따라 출력.
	if (flagcnt)
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.
 8000408:	fb99 f1f3 	sdiv	r1, r9, r3
{
        long retval=num;
        cnt--;


        while (cnt--){
 800040c:	240a      	movs	r4, #10
 800040e:	2802      	cmp	r0, #2

	// 위의 flag에 따라 출력.
	if (flagcnt)
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.
 8000410:	fb03 9911 	mls	r9, r3, r1, r9
{
        long retval=num;
        cnt--;


        while (cnt--){
 8000414:	d005      	beq.n	8000422 <PrintDec+0xa2>
                retval *= num;
 8000416:	eb04 0484 	add.w	r4, r4, r4, lsl #2
{
        long retval=num;
        cnt--;


        while (cnt--){
 800041a:	3a01      	subs	r2, #1
                retval *= num;
 800041c:	0064      	lsls	r4, r4, #1
{
        long retval=num;
        cnt--;


        while (cnt--){
 800041e:	1c53      	adds	r3, r2, #1
 8000420:	d1f9      	bne.n	8000416 <PrintDec+0x96>
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
 8000422:	f246 6567 	movw	r5, #26215	; 0x6667
 8000426:	4f34      	ldr	r7, [pc, #208]	; (80004f8 <PrintDec+0x178>)
        return;
}

int Power(int num, int cnt)
{
        long retval=num;
 8000428:	f04f 0801 	mov.w	r8, #1
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
 800042c:	f2c6 6566 	movt	r5, #26214	; 0x6666
 8000430:	e00d      	b.n	800044e <PrintDec+0xce>


                        if (result!=0 || divisor==1) leading_zero = false;


                        if (leading_zero==true){
 8000432:	f1b8 0f00 	cmp.w	r8, #0
 8000436:	d01c      	beq.n	8000472 <PrintDec+0xf2>
                                if (flag0)        print_byte_out('0');
 8000438:	2030      	movs	r0, #48	; 0x30
 800043a:	b906      	cbnz	r6, 800043e <PrintDec+0xbe>
                                else                print_byte_out(' ');
 800043c:	2020      	movs	r0, #32
 800043e:	47b8      	blx	r7
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
 8000440:	fb85 2304 	smull	r2, r3, r5, r4
 8000444:	17e4      	asrs	r4, r4, #31
 8000446:	ebc4 04a3 	rsb	r4, r4, r3, asr #2
 800044a:	2c00      	cmp	r4, #0
 800044c:	dd1b      	ble.n	8000486 <PrintDec+0x106>
                        result = remainder/divisor;
 800044e:	fb99 f3f4 	sdiv	r3, r9, r4

                        if (leading_zero==true){
                                if (flag0)        print_byte_out('0');
                                else                print_byte_out(' ');
                        }
                        else print_byte_out((char)(result)+'0');
 8000452:	b2d8      	uxtb	r0, r3
 8000454:	3030      	adds	r0, #48	; 0x30
                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
 8000456:	f1b4 0e01 	subs.w	lr, r4, #1
 800045a:	f1de 0200 	rsbs	r2, lr, #0
 800045e:	eb52 020e 	adcs.w	r2, r2, lr
 8000462:	2b00      	cmp	r3, #0
 8000464:	bf18      	it	ne
 8000466:	f042 0201 	orrne.w	r2, r2, #1
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 800046a:	fb04 9913 	mls	r9, r4, r3, r9


                        if (result!=0 || divisor==1) leading_zero = false;
 800046e:	2a00      	cmp	r2, #0
 8000470:	d0df      	beq.n	8000432 <PrintDec+0xb2>

                        if (leading_zero==true){
                                if (flag0)        print_byte_out('0');
                                else                print_byte_out(' ');
                        }
                        else print_byte_out((char)(result)+'0');
 8000472:	47b8      	blx	r7
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
 8000474:	fb85 2304 	smull	r2, r3, r5, r4
 8000478:	17e4      	asrs	r4, r4, #31
 800047a:	ebc4 04a3 	rsb	r4, r4, r3, asr #2
 800047e:	2c00      	cmp	r4, #0

                        if (leading_zero==true){
                                if (flag0)        print_byte_out('0');
                                else                print_byte_out(' ');
                        }
                        else print_byte_out((char)(result)+'0');
 8000480:	f04f 0800 	mov.w	r8, #0
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
 8000484:	dce3      	bgt.n	800044e <PrintDec+0xce>
                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
                }
        }
        return;
}
 8000486:	b004      	add	sp, #16
 8000488:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			}
			tol[j] = '\0';
			i--;
			DecToLong(tol, &flagcnt);
		}
		else if (c=='0') flag0=true;
 800048c:	2b30      	cmp	r3, #48	; 0x30
 800048e:	bf08      	it	eq
 8000490:	2601      	moveq	r6, #1
 8000492:	e7a3      	b.n	80003dc <PrintDec+0x5c>

                        if (leading_zero==true){
                                if (flag0)        print_byte_out('0');
                                else                print_byte_out(' ');
                        }
                        else print_byte_out((char)(result)+'0');
 8000494:	f44f 444a 	mov.w	r4, #51712	; 0xca00
                }
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
 8000498:	f246 6767 	movw	r7, #26215	; 0x6667

                        if (leading_zero==true){
                                if (flag0)        print_byte_out('0');
                                else                print_byte_out(' ');
                        }
                        else print_byte_out((char)(result)+'0');
 800049c:	250a      	movs	r5, #10
 800049e:	f6c3 349a 	movt	r4, #15258	; 0x3b9a
 80004a2:	2101      	movs	r1, #1
                        result = remainder/divisor;
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 80004a4:	4e14      	ldr	r6, [pc, #80]	; (80004f8 <PrintDec+0x178>)
                }
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
 80004a6:	f2c6 6766 	movt	r7, #26214	; 0x6666
 80004aa:	e008      	b.n	80004be <PrintDec+0x13e>
                        result = remainder/divisor;
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 80004ac:	47b0      	blx	r6
 80004ae:	2100      	movs	r1, #0
                }
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
 80004b0:	fb87 2304 	smull	r2, r3, r7, r4
 80004b4:	17e4      	asrs	r4, r4, #31
 80004b6:	3d01      	subs	r5, #1
 80004b8:	ebc4 04a3 	rsb	r4, r4, r3, asr #2
 80004bc:	d0e3      	beq.n	8000486 <PrintDec+0x106>
                        result = remainder/divisor;
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
 80004be:	1e60      	subs	r0, r4, #1
 80004c0:	4242      	negs	r2, r0
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 80004c2:	fb99 f3f4 	sdiv	r3, r9, r4
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
 80004c6:	4142      	adcs	r2, r0
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	bf18      	it	ne
 80004cc:	f042 0201 	orrne.w	r2, r2, #1
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 80004d0:	b2d8      	uxtb	r0, r3
 80004d2:	3030      	adds	r0, #48	; 0x30
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 80004d4:	fb04 9913 	mls	r9, r4, r3, r9


                        if (result!=0 || divisor==1) leading_zero = false;
 80004d8:	2a00      	cmp	r2, #0
 80004da:	d1e7      	bne.n	80004ac <PrintDec+0x12c>
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 80004dc:	2900      	cmp	r1, #0
 80004de:	d0e5      	beq.n	80004ac <PrintDec+0x12c>
 80004e0:	2101      	movs	r1, #1
 80004e2:	e7e5      	b.n	80004b0 <PrintDec+0x130>
}

int Power(int num, int cnt)
{
        long retval=num;
        cnt--;
 80004e4:	1e43      	subs	r3, r0, #1


        while (cnt--){
 80004e6:	1e81      	subs	r1, r0, #2
 80004e8:	1ec2      	subs	r2, r0, #3
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d185      	bne.n	80003fa <PrintDec+0x7a>
        return;
}

int Power(int num, int cnt)
{
        long retval=num;
 80004ee:	230a      	movs	r3, #10
 80004f0:	e78a      	b.n	8000408 <PrintDec+0x88>
 80004f2:	bf00      	nop
 80004f4:	08000339 	.word	0x08000339
 80004f8:	080002e5 	.word	0x080002e5

080004fc <PrintHex>:
                }
        }
        return;
}

void PrintHex(char *fmt, int l){
 80004fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        char        uHex, lHex;
        int                cnt;                                                // "%5x"의 경우 5개만 출력하도록 출력한 개수.


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
 8000500:	7803      	ldrb	r3, [r0, #0]
                }
        }
        return;
}

void PrintHex(char *fmt, int l){
 8000502:	b087      	sub	sp, #28
        int                i, j;
        char        c, *s=fmt, tol[10];
        bool        flag0=false, flagl=false;        // flags.
        long        flagcnt=0;
 8000504:	2600      	movs	r6, #0
                }
        }
        return;
}

void PrintHex(char *fmt, int l){
 8000506:	4681      	mov	r9, r0
 8000508:	9101      	str	r1, [sp, #4]
        int                i, j;
        char        c, *s=fmt, tol[10];
        bool        flag0=false, flagl=false;        // flags.
        long        flagcnt=0;
 800050a:	9602      	str	r6, [sp, #8]
        char        uHex, lHex;
        int                cnt;                                                // "%5x"의 경우 5개만 출력하도록 출력한 개수.


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
 800050c:	2b00      	cmp	r3, #0
 800050e:	f000 8085 	beq.w	800061c <PrintHex+0x120>
                if (c=='x') break;
 8000512:	2b78      	cmp	r3, #120	; 0x78
 8000514:	f000 8082 	beq.w	800061c <PrintHex+0x120>
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
                                tol[j] = s[i++];
                        }
                        tol[j] = '\0';
                        i--;
                        DecToLong(tol, &flagcnt);
 8000518:	4f6d      	ldr	r7, [pc, #436]	; (80006d0 <PrintHex+0x1d4>)
        int                cnt;                                                // "%5x"의 경우 5개만 출력하도록 출력한 개수.


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='x') break;
 800051a:	4634      	mov	r4, r6
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
                                tol[j] = s[i++];
                        }
                        tol[j] = '\0';
 800051c:	46b0      	mov	r8, r6


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='x') break;
                else if (c>='1' && c<='9'){
 800051e:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8000522:	2a08      	cmp	r2, #8
 8000524:	d876      	bhi.n	8000614 <PrintHex+0x118>
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
 8000526:	f819 2004 	ldrb.w	r2, [r9, r4]
 800052a:	eb09 0104 	add.w	r1, r9, r4
 800052e:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8000532:	2b09      	cmp	r3, #9
 8000534:	a803      	add	r0, sp, #12
 8000536:	f04f 0300 	mov.w	r3, #0
 800053a:	d808      	bhi.n	800054e <PrintHex+0x52>
                                tol[j] = s[i++];
 800053c:	54c2      	strb	r2, [r0, r3]

        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='x') break;
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
 800053e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
                                tol[j] = s[i++];
 8000542:	3401      	adds	r4, #1

        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='x') break;
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
 8000544:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8000548:	3301      	adds	r3, #1
 800054a:	2d09      	cmp	r5, #9
 800054c:	d9f6      	bls.n	800053c <PrintHex+0x40>
                                tol[j] = s[i++];
                        }
                        tol[j] = '\0';
 800054e:	aa06      	add	r2, sp, #24
 8000550:	18d3      	adds	r3, r2, r3
                        i--;
                        DecToLong(tol, &flagcnt);
 8000552:	a902      	add	r1, sp, #8
                if (c=='x') break;
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
                                tol[j] = s[i++];
                        }
                        tol[j] = '\0';
 8000554:	f803 8c0c 	strb.w	r8, [r3, #-12]
                        i--;
 8000558:	3c01      	subs	r4, #1
                        DecToLong(tol, &flagcnt);
 800055a:	47b8      	blx	r7
        char        uHex, lHex;
        int                cnt;                                                // "%5x"의 경우 5개만 출력하도록 출력한 개수.


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
 800055c:	3401      	adds	r4, #1
 800055e:	f819 3004 	ldrb.w	r3, [r9, r4]
 8000562:	b10b      	cbz	r3, 8000568 <PrintHex+0x6c>
                if (c=='x') break;
 8000564:	2b78      	cmp	r3, #120	; 0x78
 8000566:	d1da      	bne.n	800051e <PrintHex+0x22>
 8000568:	9a01      	ldr	r2, [sp, #4]
 800056a:	9b02      	ldr	r3, [sp, #8]
 800056c:	ba12      	rev	r2, r2
                else continue;
        }


        s = (char *)(&l);
        l = SWAP32(l);                // little, big endian에 따라서.(big이 출력하기 쉬워 순서를 바꿈)
 800056e:	9201      	str	r2, [sp, #4]
        
        // 위의 flag에 따라 출력.
        if (flagcnt){
 8000570:	2b00      	cmp	r3, #0
 8000572:	d056      	beq.n	8000622 <PrintHex+0x126>
                if (flagcnt&0x01){        // flagcnt가 홀수 일때, upper를 무시, lower만 출력.
 8000574:	07da      	lsls	r2, r3, #31
void PrintHex(char *fmt, int l){
        int                i, j;
        char        c, *s=fmt, tol[10];
        bool        flag0=false, flagl=false;        // flags.
        long        flagcnt=0;
        bool        leading_zero=true;
 8000576:	bf58      	it	pl
 8000578:	f04f 0801 	movpl.w	r8, #1
        s = (char *)(&l);
        l = SWAP32(l);                // little, big endian에 따라서.(big이 출력하기 쉬워 순서를 바꿈)
        
        // 위의 flag에 따라 출력.
        if (flagcnt){
                if (flagcnt&0x01){        // flagcnt가 홀수 일때, upper를 무시, lower만 출력.
 800057c:	d521      	bpl.n	80005c2 <PrintHex+0xc6>
                        c = s[(8-(flagcnt+1))/2]; // 홀수 일때 그 위치를 포함하는 곳의 값을 가져 옵니다.
 800057e:	43db      	mvns	r3, r3
 8000580:	3308      	adds	r3, #8
 8000582:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8000586:	aa06      	add	r2, sp, #24
 8000588:	eb02 0363 	add.w	r3, r2, r3, asr #1
                        
                        // lower 4 bits를 가져와서 ascii code로.
                        lHex = ((c>>0)&0x0f);
 800058c:	f813 3c14 	ldrb.w	r3, [r3, #-20]
                        if (lHex!=0) leading_zero=false;
 8000590:	f013 030f 	ands.w	r3, r3, #15
 8000594:	d00b      	beq.n	80005ae <PrintHex+0xb2>
                        if (lHex<10) lHex+='0';
 8000596:	2b09      	cmp	r3, #9
 8000598:	bf98      	it	ls
 800059a:	f103 0030 	addls.w	r0, r3, #48	; 0x30
 800059e:	d901      	bls.n	80005a4 <PrintHex+0xa8>
                        else         lHex+='A'-10;
 80005a0:	f103 0037 	add.w	r0, r3, #55	; 0x37
                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(lHex);
 80005a4:	4f4b      	ldr	r7, [pc, #300]	; (80006d4 <PrintHex+0x1d8>)
 80005a6:	47b8      	blx	r7
 80005a8:	f04f 0800 	mov.w	r8, #0
 80005ac:	e006      	b.n	80005bc <PrintHex+0xc0>
                        else         lHex+='A'-10;


                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
 80005ae:	2e00      	cmp	r6, #0
 80005b0:	d07c      	beq.n	80006ac <PrintHex+0x1b0>
 80005b2:	2030      	movs	r0, #48	; 0x30
 80005b4:	4f47      	ldr	r7, [pc, #284]	; (80006d4 <PrintHex+0x1d8>)
 80005b6:	47b8      	blx	r7
 80005b8:	f04f 0801 	mov.w	r8, #1
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(lHex);
                        
                        flagcnt--;
 80005bc:	9b02      	ldr	r3, [sp, #8]
 80005be:	3b01      	subs	r3, #1
 80005c0:	9302      	str	r3, [sp, #8]
                }


                // byte단위의 data를 Hex로 출력.
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
 80005c2:	f1c3 0308 	rsb	r3, r3, #8
 80005c6:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80005ca:	105c      	asrs	r4, r3, #1
 80005cc:	2c03      	cmp	r4, #3
 80005ce:	dc1e      	bgt.n	800060e <PrintHex+0x112>
                }
        }
        return;
}

void PrintHex(char *fmt, int l){
 80005d0:	ab01      	add	r3, sp, #4
 80005d2:	4f40      	ldr	r7, [pc, #256]	; (80006d4 <PrintHex+0x1d8>)
 80005d4:	191c      	adds	r4, r3, r4
 80005d6:	f10d 0908 	add.w	r9, sp, #8
                }


                // byte단위의 data를 Hex로 출력.
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
                        c = s[i];
 80005da:	f814 3b01 	ldrb.w	r3, [r4], #1
                                
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 80005de:	f003 050f 	and.w	r5, r3, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 80005e2:	091b      	lsrs	r3, r3, #4
 80005e4:	d04d      	beq.n	8000682 <PrintHex+0x186>
                        if (uHex<10) uHex+='0';
 80005e6:	2b09      	cmp	r3, #9
                        else         uHex+='A'-10;
 80005e8:	bf88      	it	hi
 80005ea:	f103 0037 	addhi.w	r0, r3, #55	; 0x37


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 80005ee:	d969      	bls.n	80006c4 <PrintHex+0x1c8>
                        // upper 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(uHex);
 80005f0:	47b8      	blx	r7
 80005f2:	f04f 0800 	mov.w	r8, #0
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
 80005f6:	2d00      	cmp	r5, #0
 80005f8:	d04b      	beq.n	8000692 <PrintHex+0x196>
                        if (lHex<10) lHex+='0';
 80005fa:	2d09      	cmp	r5, #9
                        else         lHex+='A'-10;
 80005fc:	bf88      	it	hi
 80005fe:	f105 0037 	addhi.w	r0, r5, #55	; 0x37
                        }
                        else print_byte_out(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
                        if (lHex<10) lHex+='0';
 8000602:	d959      	bls.n	80006b8 <PrintHex+0x1bc>
                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(lHex);
 8000604:	47b8      	blx	r7
 8000606:	f04f 0800 	mov.w	r8, #0
                        flagcnt--;
                }


                // byte단위의 data를 Hex로 출력.
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
 800060a:	454c      	cmp	r4, r9
 800060c:	d1e5      	bne.n	80005da <PrintHex+0xde>
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte_out(lHex);
                }
        }
        return;
}
 800060e:	b007      	add	sp, #28
 8000610:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                        }
                        tol[j] = '\0';
                        i--;
                        DecToLong(tol, &flagcnt);
                }
                else if (c=='0') flag0=true;
 8000614:	2b30      	cmp	r3, #48	; 0x30
 8000616:	bf08      	it	eq
 8000618:	2601      	moveq	r6, #1
 800061a:	e79f      	b.n	800055c <PrintHex+0x60>
 800061c:	9b01      	ldr	r3, [sp, #4]
 800061e:	ba1b      	rev	r3, r3
                else continue;
        }


        s = (char *)(&l);
        l = SWAP32(l);                // little, big endian에 따라서.(big이 출력하기 쉬워 순서를 바꿈)
 8000620:	9301      	str	r3, [sp, #4]
                }
        }
        return;
}

void PrintHex(char *fmt, int l){
 8000622:	f10d 0603 	add.w	r6, sp, #3
                        else print_byte_out(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
                        c = s[i];
 8000626:	f816 3f01 	ldrb.w	r3, [r6, #1]!
                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(lHex);
 800062a:	2201      	movs	r2, #1
 800062c:	2400      	movs	r4, #0
                for (i=0; i<4; i++){
                        c = s[i];
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 800062e:	f003 050f 	and.w	r5, r3, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000632:	091b      	lsrs	r3, r3, #4
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
 8000634:	4f27      	ldr	r7, [pc, #156]	; (80006d4 <PrintHex+0x1d8>)
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000636:	d01e      	beq.n	8000676 <PrintHex+0x17a>
                        if (uHex<10) uHex+='0';
 8000638:	2b09      	cmp	r3, #9
                        else         uHex+='A'-10;
 800063a:	bf88      	it	hi
 800063c:	f103 0037 	addhi.w	r0, r3, #55	; 0x37
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8000640:	d93d      	bls.n	80006be <PrintHex+0x1c2>
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
 8000642:	47b8      	blx	r7
 8000644:	2200      	movs	r2, #0
                        
                        if (lHex!=0 || i==3) leading_zero = false;
 8000646:	1c2b      	adds	r3, r5, #0
 8000648:	bf18      	it	ne
 800064a:	2301      	movne	r3, #1
 800064c:	2c03      	cmp	r4, #3
 800064e:	bf08      	it	eq
 8000650:	f043 0301 	orreq.w	r3, r3, #1
 8000654:	b193      	cbz	r3, 800067c <PrintHex+0x180>
                        if (lHex<10) lHex+='0';
 8000656:	2d09      	cmp	r5, #9
                        else         lHex+='A'-10;
 8000658:	bf88      	it	hi
 800065a:	f105 0037 	addhi.w	r0, r5, #55	; 0x37
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
 800065e:	d934      	bls.n	80006ca <PrintHex+0x1ce>
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte_out(lHex);
 8000660:	47b8      	blx	r7
 8000662:	2200      	movs	r2, #0
                        }
                        else print_byte_out(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
 8000664:	3401      	adds	r4, #1
 8000666:	2c04      	cmp	r4, #4
 8000668:	d0d1      	beq.n	800060e <PrintHex+0x112>
                        c = s[i];
 800066a:	f816 3f01 	ldrb.w	r3, [r6, #1]!
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 800066e:	f003 050f 	and.w	r5, r3, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 8000672:	091b      	lsrs	r3, r3, #4
 8000674:	d1e0      	bne.n	8000638 <PrintHex+0x13c>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
 8000676:	b312      	cbz	r2, 80006be <PrintHex+0x1c2>
 8000678:	2201      	movs	r2, #1
 800067a:	e7e4      	b.n	8000646 <PrintHex+0x14a>
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte_out(lHex);
 800067c:	b32a      	cbz	r2, 80006ca <PrintHex+0x1ce>
 800067e:	2201      	movs	r2, #1
 8000680:	e7f0      	b.n	8000664 <PrintHex+0x168>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;


                        // upper 4 bits 출력.
                        if (leading_zero){
 8000682:	f1b8 0f00 	cmp.w	r8, #0
 8000686:	d01d      	beq.n	80006c4 <PrintHex+0x1c8>
                                if (flag0) print_byte_out('0');
 8000688:	b156      	cbz	r6, 80006a0 <PrintHex+0x1a4>
 800068a:	2030      	movs	r0, #48	; 0x30
 800068c:	47b8      	blx	r7
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
 800068e:	2d00      	cmp	r5, #0
 8000690:	d1b3      	bne.n	80005fa <PrintHex+0xfe>
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;


                        // lower 4 bits 출력.
                        if (leading_zero){
 8000692:	f1b8 0f00 	cmp.w	r8, #0
 8000696:	d00f      	beq.n	80006b8 <PrintHex+0x1bc>
                                if (flag0) print_byte_out('0');
 8000698:	b12e      	cbz	r6, 80006a6 <PrintHex+0x1aa>
 800069a:	2030      	movs	r0, #48	; 0x30
 800069c:	47b8      	blx	r7
 800069e:	e7b4      	b.n	800060a <PrintHex+0x10e>


                        // upper 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
 80006a0:	2020      	movs	r0, #32
 80006a2:	47b8      	blx	r7
 80006a4:	e7a7      	b.n	80005f6 <PrintHex+0xfa>


                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
 80006a6:	2020      	movs	r0, #32
 80006a8:	47b8      	blx	r7
 80006aa:	e7ae      	b.n	800060a <PrintHex+0x10e>


                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
 80006ac:	2020      	movs	r0, #32
 80006ae:	4f09      	ldr	r7, [pc, #36]	; (80006d4 <PrintHex+0x1d8>)
 80006b0:	47b8      	blx	r7
 80006b2:	f04f 0801 	mov.w	r8, #1
 80006b6:	e781      	b.n	80005bc <PrintHex+0xc0>
                        }
                        else print_byte_out(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
                        if (lHex<10) lHex+='0';
 80006b8:	f105 0030 	add.w	r0, r5, #48	; 0x30
 80006bc:	e7a2      	b.n	8000604 <PrintHex+0x108>
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 80006be:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80006c2:	e7be      	b.n	8000642 <PrintHex+0x146>


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 80006c4:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80006c8:	e792      	b.n	80005f0 <PrintHex+0xf4>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
 80006ca:	f105 0030 	add.w	r0, r5, #48	; 0x30
 80006ce:	e7c7      	b.n	8000660 <PrintHex+0x164>
 80006d0:	08000339 	.word	0x08000339
 80006d4:	080002e5 	.word	0x080002e5

080006d8 <Lb_printf>:
// 매개 : fmt : printf()와 동일하나 "%s", "%c", "%d", "%x" 사용 가능.
//              %d, %x의 경우에는 "%08x", "%8x"와 같이 나타낼 길이와 빈 공간을 0으로 채울지 선택 가능.
// 반환 : 없음.
// 주의 : 없음.
void Lb_printf(char *fmt, ...)
{
 80006d8:	b40f      	push	{r0, r1, r2, r3}
 80006da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006de:	b084      	sub	sp, #16
	int		i;
	va_list args;
	char	*s=fmt;
 80006e0:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
        
	va_start(args, fmt);
	
	StrPrintMode = LB_PRINT_OUT_UART;
 80006e4:	4b34      	ldr	r3, [pc, #208]	; (80007b8 <Lb_printf+0xe0>)
 80006e6:	2200      	movs	r2, #0
// 주의 : 없음.
void Lb_printf(char *fmt, ...)
{
	int		i;
	va_list args;
	char	*s=fmt;
 80006e8:	f85a 4b04 	ldr.w	r4, [sl], #4



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 80006ec:	4d33      	ldr	r5, [pc, #204]	; (80007bc <Lb_printf+0xe4>)
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
 80006ee:	4f34      	ldr	r7, [pc, #208]	; (80007c0 <Lb_printf+0xe8>)
 80006f0:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 80007c8 <Lb_printf+0xf0>
					break;
				case 'x' :
					PrintHex(format, va_arg(args, int));
 80006f4:	4e33      	ldr	r6, [pc, #204]	; (80007c4 <Lb_printf+0xec>)
	char	*s=fmt;
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
        
	va_start(args, fmt);
	
	StrPrintMode = LB_PRINT_OUT_UART;
 80006f6:	701a      	strb	r2, [r3, #0]
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
 80006f8:	f10d 0904 	add.w	r9, sp, #4
        
	va_start(args, fmt);
	
	StrPrintMode = LB_PRINT_OUT_UART;
	
	while (*s)
 80006fc:	7820      	ldrb	r0, [r4, #0]
 80006fe:	b350      	cbz	r0, 8000756 <Lb_printf+0x7e>
	{
		if (*s=='%')
 8000700:	2825      	cmp	r0, #37	; 0x25
 8000702:	d12d      	bne.n	8000760 <Lb_printf+0x88>
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
 8000704:	f88d 0004 	strb.w	r0, [sp, #4]
	
	while (*s)
	{
		if (*s=='%')
		{
			s++;
 8000708:	1c62      	adds	r2, r4, #1
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
 800070a:	2101      	movs	r1, #1
 800070c:	4694      	mov	ip, r2
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 800070e:	f812 3b01 	ldrb.w	r3, [r2], #1
 8000712:	f1a3 0463 	sub.w	r4, r3, #99	; 0x63
 8000716:	2b78      	cmp	r3, #120	; 0x78
 8000718:	bf18      	it	ne
 800071a:	2c01      	cmpne	r4, #1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 800071c:	4610      	mov	r0, r2
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 800071e:	d922      	bls.n	8000766 <Lb_printf+0x8e>
 8000720:	2b73      	cmp	r3, #115	; 0x73
 8000722:	d020      	beq.n	8000766 <Lb_printf+0x8e>
 8000724:	2b25      	cmp	r3, #37	; 0x25
 8000726:	d01e      	beq.n	8000766 <Lb_printf+0x8e>
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000728:	f801 3009 	strb.w	r3, [r1, r9]
 800072c:	3101      	adds	r1, #1
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
 800072e:	290a      	cmp	r1, #10
 8000730:	d1ec      	bne.n	800070c <Lb_printf+0x34>
 8000732:	f89c 3001 	ldrb.w	r3, [ip, #1]
					format[i++] = *s++;
				}
			}
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
 8000736:	1c44      	adds	r4, r0, #1
 8000738:	2b64      	cmp	r3, #100	; 0x64
 800073a:	d01f      	beq.n	800077c <Lb_printf+0xa4>
 800073c:	d825      	bhi.n	800078a <Lb_printf+0xb2>
 800073e:	2b25      	cmp	r3, #37	; 0x25
 8000740:	d036      	beq.n	80007b0 <Lb_printf+0xd8>
 8000742:	2b63      	cmp	r3, #99	; 0x63
 8000744:	d1da      	bne.n	80006fc <Lb_printf+0x24>



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 8000746:	f89a 0000 	ldrb.w	r0, [sl]
 800074a:	47a8      	blx	r5
        
	va_start(args, fmt);
	
	StrPrintMode = LB_PRINT_OUT_UART;
	
	while (*s)
 800074c:	7820      	ldrb	r0, [r4, #0]
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
 800074e:	f10a 0a04 	add.w	sl, sl, #4
        
	va_start(args, fmt);
	
	StrPrintMode = LB_PRINT_OUT_UART;
	
	while (*s)
 8000752:	2800      	cmp	r0, #0
 8000754:	d1d4      	bne.n	8000700 <Lb_printf+0x28>
			s++;
		}
	}
	va_end(args);
	return;
}
 8000756:	b004      	add	sp, #16
 8000758:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800075c:	b004      	add	sp, #16
 800075e:	4770      	bx	lr



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 8000760:	47a8      	blx	r5
            }
		}
		else 
		{
			PrintChar("%c", *s);
			s++;
 8000762:	3401      	adds	r4, #1
 8000764:	e7ca      	b.n	80006fc <Lb_printf+0x24>
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
				{
					format[i++] = *s;
 8000766:	aa04      	add	r2, sp, #16
					format[i] = '\0';
                	break;
 8000768:	4660      	mov	r0, ip
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
				{
					format[i++] = *s;
 800076a:	1851      	adds	r1, r2, r1
					format[i++] = *s++;
				}
			}
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
 800076c:	1c44      	adds	r4, r0, #1
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
				{
					format[i++] = *s;
					format[i] = '\0';
 800076e:	2200      	movs	r2, #0
					format[i++] = *s++;
				}
			}
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
 8000770:	2b64      	cmp	r3, #100	; 0x64
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
				{
					format[i++] = *s;
 8000772:	f801 3c0c 	strb.w	r3, [r1, #-12]
					format[i] = '\0';
 8000776:	f801 2c0b 	strb.w	r2, [r1, #-11]
					format[i++] = *s++;
				}
			}
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
 800077a:	d1df      	bne.n	800073c <Lb_printf+0x64>
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
 800077c:	f8da 1000 	ldr.w	r1, [sl]
 8000780:	4648      	mov	r0, r9
 8000782:	f10a 0a04 	add.w	sl, sl, #4
 8000786:	47b8      	blx	r7
					break;
 8000788:	e7b8      	b.n	80006fc <Lb_printf+0x24>
					format[i++] = *s++;
				}
			}
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
 800078a:	2b73      	cmp	r3, #115	; 0x73
 800078c:	d008      	beq.n	80007a0 <Lb_printf+0xc8>
 800078e:	2b78      	cmp	r3, #120	; 0x78
 8000790:	d1b4      	bne.n	80006fc <Lb_printf+0x24>
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
					break;
				case 'x' :
					PrintHex(format, va_arg(args, int));
 8000792:	f8da 1000 	ldr.w	r1, [sl]
 8000796:	4648      	mov	r0, r9
 8000798:	f10a 0a04 	add.w	sl, sl, #4
 800079c:	47b0      	blx	r6
					break;
 800079e:	e7ad      	b.n	80006fc <Lb_printf+0x24>
				case 's' :
					PrintString(format, va_arg(args, char *));
 80007a0:	f8da 0000 	ldr.w	r0, [sl]
 80007a4:	f10a 0a04 	add.w	sl, sl, #4
        return;
}

void PrintString(char *fmt, char *s)
{
        if (!fmt || !s) return;
 80007a8:	2800      	cmp	r0, #0
 80007aa:	d0a7      	beq.n	80006fc <Lb_printf+0x24>
 80007ac:	47c0      	blx	r8
 80007ae:	e7a5      	b.n	80006fc <Lb_printf+0x24>



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 80007b0:	4618      	mov	r0, r3
 80007b2:	47a8      	blx	r5
 80007b4:	e7a2      	b.n	80006fc <Lb_printf+0x24>
 80007b6:	bf00      	nop
 80007b8:	20000208 	.word	0x20000208
 80007bc:	080002e5 	.word	0x080002e5
 80007c0:	08000381 	.word	0x08000381
 80007c4:	080004fd 	.word	0x080004fd
 80007c8:	0800031d 	.word	0x0800031d

080007cc <Lb_vsprintf>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Lb_vsprintf( char *pStr, char *fmt, Lb_va_list args )
{
 80007cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int		i;
	char	*s=fmt;
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
	        	
	StrPrintMode = LB_PRINT_OUT_STR;
 80007d0:	4b32      	ldr	r3, [pc, #200]	; (800089c <Lb_vsprintf+0xd0>)
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Lb_vsprintf( char *pStr, char *fmt, Lb_va_list args )
{
 80007d2:	4615      	mov	r5, r2
	int		i;
	char	*s=fmt;
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
	        	
	StrPrintMode = LB_PRINT_OUT_STR;
 80007d4:	2201      	movs	r2, #1
 80007d6:	701a      	strb	r2, [r3, #0]
	pStrPrintBuf = pStr;
 80007d8:	4b31      	ldr	r3, [pc, #196]	; (80008a0 <Lb_vsprintf+0xd4>)
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Lb_vsprintf( char *pStr, char *fmt, Lb_va_list args )
{
 80007da:	b084      	sub	sp, #16
	int		i;
	char	*s=fmt;
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
	        	
	StrPrintMode = LB_PRINT_OUT_STR;
	pStrPrintBuf = pStr;
 80007dc:	6018      	str	r0, [r3, #0]
	StrPrintBufIndex = 0;
 80007de:	4b31      	ldr	r3, [pc, #196]	; (80008a4 <Lb_vsprintf+0xd8>)
 80007e0:	2200      	movs	r2, #0



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 80007e2:	4e31      	ldr	r6, [pc, #196]	; (80008a8 <Lb_vsprintf+0xdc>)
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
 80007e4:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 80008b0 <Lb_vsprintf+0xe4>
 80007e8:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 80008b4 <Lb_vsprintf+0xe8>
					break;
				case 'x' :
					PrintHex(format, va_arg(args, int));
 80007ec:	4f2f      	ldr	r7, [pc, #188]	; (80008ac <Lb_vsprintf+0xe0>)
	char	*s=fmt;
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
	        	
	StrPrintMode = LB_PRINT_OUT_STR;
	pStrPrintBuf = pStr;
	StrPrintBufIndex = 0;
 80007ee:	601a      	str	r2, [r3, #0]
     RET     : void
---------------------------------------------------------------------------*/
void Lb_vsprintf( char *pStr, char *fmt, Lb_va_list args )
{
	int		i;
	char	*s=fmt;
 80007f0:	460c      	mov	r4, r1
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
 80007f2:	f10d 0a04 	add.w	sl, sp, #4
	StrPrintMode = LB_PRINT_OUT_STR;
	pStrPrintBuf = pStr;
	StrPrintBufIndex = 0;
	
	
	while (*s)
 80007f6:	7820      	ldrb	r0, [r4, #0]
 80007f8:	b338      	cbz	r0, 800084a <Lb_vsprintf+0x7e>
	{
		if (*s=='%')
 80007fa:	2825      	cmp	r0, #37	; 0x25
 80007fc:	d128      	bne.n	8000850 <Lb_vsprintf+0x84>
		{
			s++;
 80007fe:	1c61      	adds	r1, r4, #1
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
 8000800:	f88d 0004 	strb.w	r0, [sp, #4]
			
			for (i=1; i<10;)
 8000804:	2401      	movs	r4, #1
 8000806:	4608      	mov	r0, r1
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000808:	f811 3b01 	ldrb.w	r3, [r1], #1
 800080c:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
 8000810:	2b78      	cmp	r3, #120	; 0x78
 8000812:	bf18      	it	ne
 8000814:	2a01      	cmpne	r2, #1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000816:	460a      	mov	r2, r1
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 8000818:	d91d      	bls.n	8000856 <Lb_vsprintf+0x8a>
 800081a:	2b73      	cmp	r3, #115	; 0x73
 800081c:	d01b      	beq.n	8000856 <Lb_vsprintf+0x8a>
 800081e:	2b25      	cmp	r3, #37	; 0x25
 8000820:	d019      	beq.n	8000856 <Lb_vsprintf+0x8a>
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 8000822:	f804 300a 	strb.w	r3, [r4, sl]
 8000826:	3401      	adds	r4, #1
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
 8000828:	2c0a      	cmp	r4, #10
 800082a:	d1ec      	bne.n	8000806 <Lb_vsprintf+0x3a>
 800082c:	7843      	ldrb	r3, [r0, #1]
					format[i++] = *s++;
				}
			}
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
 800082e:	1c54      	adds	r4, r2, #1
 8000830:	2b64      	cmp	r3, #100	; 0x64
 8000832:	d01b      	beq.n	800086c <Lb_vsprintf+0xa0>
 8000834:	d81f      	bhi.n	8000876 <Lb_vsprintf+0xaa>
 8000836:	2b25      	cmp	r3, #37	; 0x25
 8000838:	d02c      	beq.n	8000894 <Lb_vsprintf+0xc8>
 800083a:	2b63      	cmp	r3, #99	; 0x63
 800083c:	d1db      	bne.n	80007f6 <Lb_vsprintf+0x2a>



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 800083e:	7828      	ldrb	r0, [r5, #0]
 8000840:	47b0      	blx	r6
	StrPrintMode = LB_PRINT_OUT_STR;
	pStrPrintBuf = pStr;
	StrPrintBufIndex = 0;
	
	
	while (*s)
 8000842:	7820      	ldrb	r0, [r4, #0]
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
 8000844:	3504      	adds	r5, #4
	StrPrintMode = LB_PRINT_OUT_STR;
	pStrPrintBuf = pStr;
	StrPrintBufIndex = 0;
	
	
	while (*s)
 8000846:	2800      	cmp	r0, #0
 8000848:	d1d7      	bne.n	80007fa <Lb_vsprintf+0x2e>
			s++;
		}
	}
	
	return;
}
 800084a:	b004      	add	sp, #16
 800084c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 8000850:	47b0      	blx	r6
            }
		}
		else 
		{
			PrintChar("%c", *s);
			s++;
 8000852:	3401      	adds	r4, #1
 8000854:	e7cf      	b.n	80007f6 <Lb_vsprintf+0x2a>
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
				{
					format[i++] = *s;
 8000856:	aa04      	add	r2, sp, #16
 8000858:	1914      	adds	r4, r2, r4
					format[i] = '\0';
 800085a:	2200      	movs	r2, #0
 800085c:	f804 2c0b 	strb.w	r2, [r4, #-11]
                	break;
 8000860:	4602      	mov	r2, r0
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
				{
					format[i++] = *s;
 8000862:	f804 3c0c 	strb.w	r3, [r4, #-12]
					format[i++] = *s++;
				}
			}
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
 8000866:	1c54      	adds	r4, r2, #1
 8000868:	2b64      	cmp	r3, #100	; 0x64
 800086a:	d1e3      	bne.n	8000834 <Lb_vsprintf+0x68>
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
 800086c:	6829      	ldr	r1, [r5, #0]
 800086e:	4650      	mov	r0, sl
 8000870:	3504      	adds	r5, #4
 8000872:	47c0      	blx	r8
					break;
 8000874:	e7bf      	b.n	80007f6 <Lb_vsprintf+0x2a>
					format[i++] = *s++;
				}
			}
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
 8000876:	2b73      	cmp	r3, #115	; 0x73
 8000878:	d006      	beq.n	8000888 <Lb_vsprintf+0xbc>
 800087a:	2b78      	cmp	r3, #120	; 0x78
 800087c:	d1bb      	bne.n	80007f6 <Lb_vsprintf+0x2a>
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
					break;
				case 'x' :
					PrintHex(format, va_arg(args, int));
 800087e:	6829      	ldr	r1, [r5, #0]
 8000880:	4650      	mov	r0, sl
 8000882:	3504      	adds	r5, #4
 8000884:	47b8      	blx	r7
					break;
 8000886:	e7b6      	b.n	80007f6 <Lb_vsprintf+0x2a>
				case 's' :
					PrintString(format, va_arg(args, char *));
 8000888:	6828      	ldr	r0, [r5, #0]
 800088a:	3504      	adds	r5, #4
        return;
}

void PrintString(char *fmt, char *s)
{
        if (!fmt || !s) return;
 800088c:	2800      	cmp	r0, #0
 800088e:	d0b2      	beq.n	80007f6 <Lb_vsprintf+0x2a>
 8000890:	47c8      	blx	r9
 8000892:	e7b0      	b.n	80007f6 <Lb_vsprintf+0x2a>



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 8000894:	4618      	mov	r0, r3
 8000896:	47b0      	blx	r6
 8000898:	e7ad      	b.n	80007f6 <Lb_vsprintf+0x2a>
 800089a:	bf00      	nop
 800089c:	20000208 	.word	0x20000208
 80008a0:	200002f4 	.word	0x200002f4
 80008a4:	20000204 	.word	0x20000204
 80008a8:	080002e5 	.word	0x080002e5
 80008ac:	080004fd 	.word	0x080004fd
 80008b0:	08000381 	.word	0x08000381
 80008b4:	0800031d 	.word	0x0800031d

080008b8 <Hw_StartUp_Init>:
     			보드 리셋시에 처음 실행되는 함수
     ARG     : 	void
     RET     : 	void
---------------------------------------------------------------------------*/
void Hw_StartUp_Init(void)
{
 80008b8:	4668      	mov	r0, sp
 80008ba:	f020 0107 	bic.w	r1, r0, #7
 80008be:	468d      	mov	sp, r1
 80008c0:	b519      	push	{r0, r3, r4, lr}
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 80008c2:	4923      	ldr	r1, [pc, #140]	; (8000950 <zero_loop+0x66>)
 80008c4:	4b23      	ldr	r3, [pc, #140]	; (8000954 <zero_loop+0x6a>)
 80008c6:	4299      	cmp	r1, r3
 80008c8:	d20b      	bcs.n	80008e2 <Hw_StartUp_Init+0x2a>
     WORK    :	 
     			보드 리셋시에 처음 실행되는 함수
     ARG     : 	void
     RET     : 	void
---------------------------------------------------------------------------*/
void Hw_StartUp_Init(void)
 80008ca:	43c8      	mvns	r0, r1
 80008cc:	18c0      	adds	r0, r0, r3
 80008ce:	f020 0003 	bic.w	r0, r0, #3
 80008d2:	4c21      	ldr	r4, [pc, #132]	; (8000958 <zero_loop+0x6e>)
 80008d4:	3004      	adds	r0, #4
 80008d6:	2300      	movs	r3, #0
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
	{
		*(pulDest++) = *(pulSrc++);
 80008d8:	591a      	ldr	r2, [r3, r4]
 80008da:	505a      	str	r2, [r3, r1]
 80008dc:	3304      	adds	r3, #4
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 80008de:	4283      	cmp	r3, r0
 80008e0:	d1fa      	bne.n	80008d8 <Hw_StartUp_Init+0x20>
		*(pulDest++) = *(pulSrc++);
	}
  
	/* Zero fill the bss segment.  This is done with inline assembly since this
	   will clear the value of pulDest if it is not kept in a register. */
	__asm("  ldr     r0, =_sbss\n"
 80008e2:	481f      	ldr	r0, [pc, #124]	; (8000960 <zero_loop+0x76>)
 80008e4:	491f      	ldr	r1, [pc, #124]	; (8000964 <zero_loop+0x7a>)
 80008e6:	f04f 0200 	mov.w	r2, #0

080008ea <zero_loop>:
 80008ea:	4288      	cmp	r0, r1
 80008ec:	bfb8      	it	lt
 80008ee:	f840 2b04 	strlt.w	r2, [r0], #4
 80008f2:	f6ff affa 	blt.w	80008ea <zero_loop>
	
    // HSI or HSE 선택
            
    //-- CR_HSEON_Set
    //
	REG_RCC_CR |= (1<<16);	
 80008f6:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 80008fa:	f2c4 0402 	movt	r4, #16386	; 0x4002
 80008fe:	6822      	ldr	r2, [r4, #0]
     RET     : 	void
---------------------------------------------------------------------------*/
void Hw_StartUp_Init(void)
{
	
	u32 TimeOutCnt  = 0;
 8000900:	2300      	movs	r3, #0
	
    // HSI or HSE 선택
            
    //-- CR_HSEON_Set
    //
	REG_RCC_CR |= (1<<16);	
 8000902:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000906:	6022      	str	r2, [r4, #0]
	//
	do
	{	
		HSEStatus = REG_RCC_CR & (1<<17);	// HSE 인경우
		TimeOutCnt++;		
	} while( (HSEStatus == 0) && (TimeOutCnt < 1280) );
 8000908:	f240 40ff 	movw	r0, #1279	; 0x4ff
		
	//-- 설정된 clock 이 설정 되었는지 확인
	//
	do
	{	
		HSEStatus = REG_RCC_CR & (1<<17);	// HSE 인경우
 800090c:	6821      	ldr	r1, [r4, #0]
		TimeOutCnt++;		
 800090e:	3301      	adds	r3, #1
	} while( (HSEStatus == 0) && (TimeOutCnt < 1280) );
 8000910:	4283      	cmp	r3, r0
 8000912:	f481 3100 	eor.w	r1, r1, #131072	; 0x20000
 8000916:	bf8c      	ite	hi
 8000918:	2200      	movhi	r2, #0
 800091a:	2201      	movls	r2, #1
 800091c:	ea12 4251 	ands.w	r2, r2, r1, lsr #17
 8000920:	d1f4      	bne.n	800090c <zero_loop+0x22>
  

	//-- FLASH Access 타이밍 설정
	//
	REG_FLASH_ACR |=  (1<<4);	// Prefetch buffer enable
 8000922:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000926:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800092a:	681a      	ldr	r2, [r3, #0]
 800092c:	f042 0210 	orr.w	r2, r2, #16
 8000930:	601a      	str	r2, [r3, #0]
	REG_FLASH_ACR &= ~(3<<0);	// LATENCY Clear
 8000932:	681a      	ldr	r2, [r3, #0]
 8000934:	f022 0203 	bic.w	r2, r2, #3
 8000938:	601a      	str	r2, [r3, #0]
	REG_FLASH_ACR |=  (2<<0);	// LATENCY = two wait
 800093a:	681a      	ldr	r2, [r3, #0]
 800093c:	f042 0202 	orr.w	r2, r2, #2
 8000940:	601a      	str	r2, [r3, #0]


    main();
 8000942:	4b06      	ldr	r3, [pc, #24]	; (800095c <zero_loop+0x72>)
 8000944:	4798      	blx	r3

}
 8000946:	e8bd 4019 	ldmia.w	sp!, {r0, r3, r4, lr}
 800094a:	4685      	mov	sp, r0
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	20000000 	.word	0x20000000
 8000954:	200000f4 	.word	0x200000f4
 8000958:	080036f8 	.word	0x080036f8
 800095c:	08000019 	.word	0x08000019
 8000960:	20000200 	.word	0x20000200
 8000964:	20001318 	.word	0x20001318

08000968 <Hw_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Init( void )
{
 8000968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	//-- PLL 설정
	//
	Hw_PLL_Init();
 800096a:	f640 33a9 	movw	r3, #2985	; 0xba9
 800096e:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000972:	4798      	blx	r3
	
	
	//-- 인터럽트 관련 초기화
	//
	Hw_ISR_Init();
 8000974:	f640 53d9 	movw	r3, #3545	; 0xdd9
 8000978:	f6c0 0300 	movt	r3, #2048	; 0x800
 800097c:	4798      	blx	r3
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
 800097e:	f640 0604 	movw	r6, #2052	; 0x804
	Hw_ISR_Init();
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
 8000982:	f44f 6e00 	mov.w	lr, #2048	; 0x800
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
 8000986:	f243 47b3 	movw	r7, #13491	; 0x34b3
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
 800098a:	f44f 6540 	mov.w	r5, #3072	; 0xc00
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
 800098e:	f640 4404 	movw	r4, #3076	; 0xc04
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
 8000992:	f241 0104 	movw	r1, #4100	; 0x1004
 8000996:	f244 4044 	movw	r0, #17476	; 0x4444
	Hw_ISR_Init();
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
 800099a:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 800099e:	f2c4 0e01 	movt	lr, #16385	; 0x4001
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
 80009a2:	f2c4 0101 	movt	r1, #16385	; 0x4001
 80009a6:	f2c3 3044 	movt	r0, #13124	; 0x3344
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
 80009aa:	f2c4 0601 	movt	r6, #16385	; 0x4001
 80009ae:	f2c3 3733 	movt	r7, #13107	; 0x3333
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
 80009b2:	f2c4 0501 	movt	r5, #16385	; 0x4001
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
 80009b6:	f2c4 0401 	movt	r4, #16385	; 0x4001
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
	
	//Hw_DMA_Init();
	Hw_Uart_Init();
 80009ba:	f640 23f1 	movw	r3, #2801	; 0xaf1
	Hw_ISR_Init();
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
 80009be:	f8ce 2000 	str.w	r2, [lr]
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
	
	//Hw_DMA_Init();
	Hw_Uart_Init();
 80009c2:	f6c0 0300 	movt	r3, #2048	; 0x800
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
 80009c6:	6037      	str	r7, [r6, #0]
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
 80009c8:	602a      	str	r2, [r5, #0]
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
 80009ca:	6022      	str	r2, [r4, #0]
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
 80009cc:	6008      	str	r0, [r1, #0]
	
	//Hw_DMA_Init();
	Hw_Uart_Init();
 80009ce:	4798      	blx	r3
	Hw_Timer_Init();
 80009d0:	f640 6329 	movw	r3, #3625	; 0xe29
 80009d4:	f6c0 0300 	movt	r3, #2048	; 0x800
 80009d8:	4798      	blx	r3
	//Hw_Si47xx_Init();
	//Hw_N5110G_Init();
	Hw_VBus_Init();
 80009da:	f241 13b9 	movw	r3, #4537	; 0x11b9
 80009de:	f6c0 0300 	movt	r3, #2048	; 0x800
 80009e2:	4798      	blx	r3
	Hw_VCom_Init();
 80009e4:	f640 7375 	movw	r3, #3957	; 0xf75
 80009e8:	f6c0 0300 	movt	r3, #2048	; 0x800
 80009ec:	4798      	blx	r3
	
	Hw_Led_Init();
 80009ee:	f640 4379 	movw	r3, #3193	; 0xc79
 80009f2:	f6c0 0300 	movt	r3, #2048	; 0x800
 80009f6:	4798      	blx	r3
	Hw_KeyPad_Init();
 80009f8:	f241 5355 	movw	r3, #5461	; 0x1555
 80009fc:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000a00:	4798      	blx	r3
	Hw_7Seg_Init();
 8000a02:	f241 7301 	movw	r3, #5889	; 0x1701
 8000a06:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000a0a:	4798      	blx	r3
	Hw_CLcd_Init();
 8000a0c:	f641 1381 	movw	r3, #6529	; 0x1981
 8000a10:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000a14:	4798      	blx	r3
 8000a16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000a18 <Hw_Wait_Usec>:
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Wait( u32 delay )
{
    volatile u32 i;
    for ( i = 0 ; i < delay ; i++ ){ };
 8000a18:	2300      	movs	r3, #0
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Wait_Usec( u32 usec )
{
 8000a1a:	b082      	sub	sp, #8
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Wait( u32 delay )
{
    volatile u32 i;
    for ( i = 0 ; i < delay ; i++ ){ };
 8000a1c:	9301      	str	r3, [sp, #4]
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Wait_Usec( u32 usec )
{
    Hw_Wait( usec * 6 );
 8000a1e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Wait( u32 delay )
{
    volatile u32 i;
    for ( i = 0 ; i < delay ; i++ ){ };
 8000a22:	9b01      	ldr	r3, [sp, #4]
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Wait_Usec( u32 usec )
{
    Hw_Wait( usec * 6 );
 8000a24:	0042      	lsls	r2, r0, #1
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Wait( u32 delay )
{
    volatile u32 i;
    for ( i = 0 ; i < delay ; i++ ){ };
 8000a26:	429a      	cmp	r2, r3
 8000a28:	d905      	bls.n	8000a36 <Hw_Wait_Usec+0x1e>
 8000a2a:	9b01      	ldr	r3, [sp, #4]
 8000a2c:	3301      	adds	r3, #1
 8000a2e:	9301      	str	r3, [sp, #4]
 8000a30:	9b01      	ldr	r3, [sp, #4]
 8000a32:	429a      	cmp	r2, r3
 8000a34:	d8f9      	bhi.n	8000a2a <Hw_Wait_Usec+0x12>
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Wait_Usec( u32 usec )
{
    Hw_Wait( usec * 6 );
}
 8000a36:	b002      	add	sp, #8
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop

08000a3c <Hw_ISR_UART1_Handler>:


//-- UART1 ISR
//
void Hw_ISR_UART1_Handler(void)
{
 8000a3c:	b500      	push	{lr}
	u8 UartData;
				
	UartData = REG_USART1_DR;
 8000a3e:	f643 0304 	movw	r3, #14340	; 0x3804
 8000a42:	f2c4 0301 	movt	r3, #16385	; 0x4001


//-- UART1 ISR
//
void Hw_ISR_UART1_Handler(void)
{
 8000a46:	b083      	sub	sp, #12
	u8 UartData;
				
	UartData = REG_USART1_DR;
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	a902      	add	r1, sp, #8
 8000a4c:	f801 3d01 	strb.w	r3, [r1, #-1]!
	
	Hw_Uart_Q_Push( 0, &UartData );
 8000a50:	f640 5325 	movw	r3, #3365	; 0xd25
 8000a54:	2000      	movs	r0, #0
 8000a56:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000a5a:	4798      	blx	r3
}
 8000a5c:	b003      	add	sp, #12
 8000a5e:	bd00      	pop	{pc}

08000a60 <Hw_Uart_Open_COM1>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Open_COM1( u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	
 8000a60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr = ISR_FuncPtr;
	
	
	//-- Clock Enable
	//
	SET_BIT( REG_RCC_APB2ENR, 14 );		// USART1 Clock Enable
 8000a64:	f241 0618 	movw	r6, #4120	; 0x1018
 8000a68:	f2c4 0602 	movt	r6, #16386	; 0x4002
 8000a6c:	6835      	ldr	r5, [r6, #0]
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Open_COM1( u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	

	Hw_Uart_Ch[HW_UART_COM1].Baud 		 = BaudData;
 8000a6e:	f240 23f8 	movw	r3, #760	; 0x2f8
 8000a72:	f2c2 0300 	movt	r3, #8192	; 0x2000
	//
	
	
	//-- USART1 설정
	//	
	REG_USART1_CR1  = 0 
 8000a76:	f643 040c 	movw	r4, #14348	; 0x380c
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Open_COM1( u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	

	Hw_Uart_Ch[HW_UART_COM1].Baud 		 = BaudData;
 8000a7a:	6058      	str	r0, [r3, #4]
	Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr = ISR_FuncPtr;
 8000a7c:	6099      	str	r1, [r3, #8]
	//
	
	
	//-- USART1 설정
	//	
	REG_USART1_CR1  = 0 
 8000a7e:	f2c4 0401 	movt	r4, #16385	; 0x4001
	Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr = ISR_FuncPtr;
	
	
	//-- Clock Enable
	//
	SET_BIT( REG_RCC_APB2ENR, 14 );		// USART1 Clock Enable
 8000a82:	f445 4880 	orr.w	r8, r5, #16384	; 0x4000
	//
	
	
	//-- USART1 설정
	//	
	REG_USART1_CR1  = 0 
 8000a86:	230c      	movs	r3, #12
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART1_CR2  = ( 0 << 12 );		// 1 stop bit	
 8000a88:	f643 0c10 	movw	ip, #14352	; 0x3810
	REG_USART1_CR3  = 0;
 8000a8c:	f643 0e14 	movw	lr, #14356	; 0x3814
	
	
	//-- 115200bps로 통신 속도 설정
	//
	REG_USART1_BRR  = 0
 8000a90:	f643 0708 	movw	r7, #14344	; 0x3808
	Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr = ISR_FuncPtr;
	
	
	//-- Clock Enable
	//
	SET_BIT( REG_RCC_APB2ENR, 14 );		// USART1 Clock Enable
 8000a94:	f8c6 8000 	str.w	r8, [r6]
	REG_USART1_CR1  = 0 
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART1_CR2  = ( 0 << 12 );		// 1 stop bit	
 8000a98:	2200      	movs	r2, #0
	//
	
	
	//-- USART1 설정
	//	
	REG_USART1_CR1  = 0 
 8000a9a:	6023      	str	r3, [r4, #0]
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART1_CR2  = ( 0 << 12 );		// 1 stop bit	
 8000a9c:	f2c4 0c01 	movt	ip, #16385	; 0x4001
	REG_USART1_CR3  = 0;
 8000aa0:	f2c4 0e01 	movt	lr, #16385	; 0x4001
	
	
	//-- 115200bps로 통신 속도 설정
	//
	REG_USART1_BRR  = 0
 8000aa4:	f240 2371 	movw	r3, #625	; 0x271
 8000aa8:	f2c4 0701 	movt	r7, #16385	; 0x4001
					| (  1 << 0 );		// DIV Fraction
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
 8000aac:	f24e 1504 	movw	r5, #57604	; 0xe104
	REG_USART1_CR1  = 0 
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART1_CR2  = ( 0 << 12 );		// 1 stop bit	
 8000ab0:	f8cc 2000 	str.w	r2, [ip]
					| (  1 << 0 );		// DIV Fraction
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
 8000ab4:	f2ce 0500 	movt	r5, #57344	; 0xe000
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART1_CR2  = ( 0 << 12 );		// 1 stop bit	
	REG_USART1_CR3  = 0;
 8000ab8:	f8ce 2000 	str.w	r2, [lr]
	
	
	//-- 115200bps로 통신 속도 설정
	//
	REG_USART1_BRR  = 0
 8000abc:	603b      	str	r3, [r7, #0]
					| (  1 << 0 );		// DIV Fraction
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
 8000abe:	682b      	ldr	r3, [r5, #0]
	SET_BIT( REG_USART1_CR1, 5 );				// RX 인터럽트 활성화
	
	Hw_ISR_SetIRQFunc( 37, (u32)Hw_ISR_UART1_Handler, 0 );
 8000ac0:	2025      	movs	r0, #37	; 0x25
					| (  1 << 0 );		// DIV Fraction
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
 8000ac2:	f043 0320 	orr.w	r3, r3, #32
 8000ac6:	602b      	str	r3, [r5, #0]
	SET_BIT( REG_USART1_CR1, 5 );				// RX 인터럽트 활성화
 8000ac8:	6821      	ldr	r1, [r4, #0]
	
	Hw_ISR_SetIRQFunc( 37, (u32)Hw_ISR_UART1_Handler, 0 );
 8000aca:	f640 53ed 	movw	r3, #3565	; 0xded
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
	SET_BIT( REG_USART1_CR1, 5 );				// RX 인터럽트 활성화
 8000ace:	f041 0120 	orr.w	r1, r1, #32
 8000ad2:	6021      	str	r1, [r4, #0]
	
	Hw_ISR_SetIRQFunc( 37, (u32)Hw_ISR_UART1_Handler, 0 );
 8000ad4:	f640 213d 	movw	r1, #2621	; 0xa3d
 8000ad8:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000adc:	f6c0 0100 	movt	r1, #2048	; 0x800
 8000ae0:	4798      	blx	r3
	
	REG_USART1_CR1 |= ( 1 << 13 );	    // USART Enable
 8000ae2:	6823      	ldr	r3, [r4, #0]
 8000ae4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000ae8:	6023      	str	r3, [r4, #0]
 8000aea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000aee:	bf00      	nop

08000af0 <Hw_Uart_Init>:
---------------------------------------------------------------------------*/
void Hw_Uart_Init( void )
{
	u32 i;
	
	Hw_Uart_Q_Init();
 8000af0:	f640 43dd 	movw	r3, #3293	; 0xcdd
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Init( void )
{
 8000af4:	b510      	push	{r4, lr}
	u32 i;
	
	Hw_Uart_Q_Init();
 8000af6:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000afa:	4798      	blx	r3
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 8000afc:	f240 23f8 	movw	r3, #760	; 0x2f8
 8000b00:	2200      	movs	r2, #0
 8000b02:	f2c2 0300 	movt	r3, #8192	; 0x2000
void Hw_Uart_Open( u8 Ch, u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	
	switch( Ch )
	{
		case HW_UART_COM1:
			Hw_Uart_Open_COM1( BaudData, ISR_FuncPtr );
 8000b06:	f640 2461 	movw	r4, #2657	; 0xa61
 8000b0a:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 8000b0e:	4611      	mov	r1, r2
 8000b10:	f6c0 0400 	movt	r4, #2048	; 0x800
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 8000b14:	605a      	str	r2, [r3, #4]
		Hw_Uart_Ch[i].ISR_FuncPtr = NULL;
 8000b16:	609a      	str	r2, [r3, #8]
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 8000b18:	611a      	str	r2, [r3, #16]
		Hw_Uart_Ch[i].ISR_FuncPtr = NULL;
 8000b1a:	615a      	str	r2, [r3, #20]
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 8000b1c:	61da      	str	r2, [r3, #28]
		Hw_Uart_Ch[i].ISR_FuncPtr = NULL;
 8000b1e:	621a      	str	r2, [r3, #32]
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 8000b20:	629a      	str	r2, [r3, #40]	; 0x28
		Hw_Uart_Ch[i].ISR_FuncPtr = NULL;
 8000b22:	62da      	str	r2, [r3, #44]	; 0x2c
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 8000b24:	635a      	str	r2, [r3, #52]	; 0x34
		Hw_Uart_Ch[i].ISR_FuncPtr = NULL;
 8000b26:	639a      	str	r2, [r3, #56]	; 0x38
void Hw_Uart_Open( u8 Ch, u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	
	switch( Ch )
	{
		case HW_UART_COM1:
			Hw_Uart_Open_COM1( BaudData, ISR_FuncPtr );
 8000b28:	47a0      	blx	r4
 8000b2a:	bd10      	pop	{r4, pc}

08000b2c <Hw_Uart_Getch>:
			: 시리얼 포트에서 문자 1바이트 읽는다.
     ARG
     RET
---------------------------------------------------------------------------*/
u8 Hw_Uart_Getch( u8 Ch )
{
 8000b2c:	b530      	push	{r4, r5, lr}
	u8 Uart_GetData = 0;
 8000b2e:	2300      	movs	r3, #0
			: 시리얼 포트에서 문자 1바이트 읽는다.
     ARG
     RET
---------------------------------------------------------------------------*/
u8 Hw_Uart_Getch( u8 Ch )
{
 8000b30:	b083      	sub	sp, #12
 8000b32:	4d08      	ldr	r5, [pc, #32]	; (8000b54 <Hw_Uart_Getch+0x28>)
 8000b34:	4604      	mov	r4, r0
	u8 Uart_GetData = 0;
 8000b36:	f88d 3007 	strb.w	r3, [sp, #7]

	while( 1 )
	{
		// 버퍼에 데이터 들어올때까지 기다린다.
		if( HW_UART_Q_VAILD(Ch) > 0 ) break;
 8000b3a:	4620      	mov	r0, r4
 8000b3c:	47a8      	blx	r5
 8000b3e:	2800      	cmp	r0, #0
 8000b40:	d0fb      	beq.n	8000b3a <Hw_Uart_Getch+0xe>
	}

	Hw_Uart_Q_Pop( Ch, &Uart_GetData );
 8000b42:	4620      	mov	r0, r4
 8000b44:	f10d 0107 	add.w	r1, sp, #7
 8000b48:	4b03      	ldr	r3, [pc, #12]	; (8000b58 <Hw_Uart_Getch+0x2c>)
 8000b4a:	4798      	blx	r3

	return Uart_GetData;
}
 8000b4c:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8000b50:	b003      	add	sp, #12
 8000b52:	bd30      	pop	{r4, r5, pc}
 8000b54:	08000cf9 	.word	0x08000cf9
 8000b58:	08000d81 	.word	0x08000d81

08000b5c <print_byte>:
#if HW_USE_USB_VCOM == 1
	if (c == '\n') Hw_VCom_Putch('\r');
    
    Hw_VCom_Putch(c);
#else	
	if (c == '\n') Hw_Uart_Putch(HW_UART_COM1, '\r');
 8000b5c:	280a      	cmp	r0, #10
 8000b5e:	d00d      	beq.n	8000b7c <print_byte+0x20>
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Uart_Putch( u8 Ch,  char Uart_PutData )
{
    while( !(REG_USART1_SR & 0x80) );
 8000b60:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000b64:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8000b68:	6813      	ldr	r3, [r2, #0]
 8000b6a:	0619      	lsls	r1, r3, #24
 8000b6c:	d5fc      	bpl.n	8000b68 <print_byte+0xc>
    
    REG_USART1_DR = Uart_PutData;
 8000b6e:	f643 0304 	movw	r3, #14340	; 0x3804
 8000b72:	b2c0      	uxtb	r0, r0
 8000b74:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000b78:	6018      	str	r0, [r3, #0]
 8000b7a:	4770      	bx	lr
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Uart_Putch( u8 Ch,  char Uart_PutData )
{
    while( !(REG_USART1_SR & 0x80) );
 8000b7c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000b80:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8000b84:	6813      	ldr	r3, [r2, #0]
 8000b86:	061b      	lsls	r3, r3, #24
 8000b88:	d5fc      	bpl.n	8000b84 <print_byte+0x28>
    
    REG_USART1_DR = Uart_PutData;
 8000b8a:	f643 0304 	movw	r3, #14340	; 0x3804
 8000b8e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000b92:	220d      	movs	r2, #13
 8000b94:	601a      	str	r2, [r3, #0]
 8000b96:	e7e3      	b.n	8000b60 <print_byte+0x4>

08000b98 <get_byte>:
#endif    
}


char get_byte(void)
{
 8000b98:	b508      	push	{r3, lr}
	char Ch;
	
#if HW_USE_USB_VCOM == 1	
	Ch = Hw_VCom_Getch();
#else	
	Ch = Hw_Uart_Getch(HW_UART_COM1);
 8000b9a:	f640 332d 	movw	r3, #2861	; 0xb2d
 8000b9e:	2000      	movs	r0, #0
 8000ba0:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000ba4:	4798      	blx	r3
#endif
	
	return Ch;
}
 8000ba6:	bd08      	pop	{r3, pc}

08000ba8 <Hw_PLL_Init>:
{
	
#if	CLOCK_EXT == 1
	//-- PLL 설정 72Mhz로 설정함
	//
	REG_RCC_CFGR &= ~(0xF<<18 | 0x1<<17 | 0x1<<16 | 0xF<<4);
 8000ba8:	f241 0304 	movw	r3, #4100	; 0x1004
 8000bac:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000bb0:	681a      	ldr	r2, [r3, #0]
	REG_RCC_CFGR |=  (0x7<<18 | 0x1<<16);			// 8MHz
    REG_RCC_CR   |=  0x01 << 24;                    // PLLON
 8000bb2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
{
	
#if	CLOCK_EXT == 1
	//-- PLL 설정 72Mhz로 설정함
	//
	REG_RCC_CFGR &= ~(0xF<<18 | 0x1<<17 | 0x1<<16 | 0xF<<4);
 8000bb6:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 8000bba:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000bbe:	601a      	str	r2, [r3, #0]
	REG_RCC_CFGR |=  (0x7<<18 | 0x1<<16);			// 8MHz
 8000bc0:	681a      	ldr	r2, [r3, #0]
    REG_RCC_CR   |=  0x01 << 24;                    // PLLON
 8000bc2:	f2c4 0102 	movt	r1, #16386	; 0x4002
	
#if	CLOCK_EXT == 1
	//-- PLL 설정 72Mhz로 설정함
	//
	REG_RCC_CFGR &= ~(0xF<<18 | 0x1<<17 | 0x1<<16 | 0xF<<4);
	REG_RCC_CFGR |=  (0x7<<18 | 0x1<<16);			// 8MHz
 8000bc6:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
 8000bca:	601a      	str	r2, [r3, #0]
    REG_RCC_CR   |=  0x01 << 24;                    // PLLON
 8000bcc:	680b      	ldr	r3, [r1, #0]

	while( (REG_RCC_CR & (1<<25)) == 0 );			// PLLRDY
 8000bce:	460a      	mov	r2, r1
#if	CLOCK_EXT == 1
	//-- PLL 설정 72Mhz로 설정함
	//
	REG_RCC_CFGR &= ~(0xF<<18 | 0x1<<17 | 0x1<<16 | 0xF<<4);
	REG_RCC_CFGR |=  (0x7<<18 | 0x1<<16);			// 8MHz
    REG_RCC_CR   |=  0x01 << 24;                    // PLLON
 8000bd0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000bd4:	600b      	str	r3, [r1, #0]

	while( (REG_RCC_CR & (1<<25)) == 0 );			// PLLRDY
 8000bd6:	6813      	ldr	r3, [r2, #0]
 8000bd8:	019b      	lsls	r3, r3, #6
 8000bda:	d5fc      	bpl.n	8000bd6 <Hw_PLL_Init+0x2e>
    /////Bits 1:0 SW : System clock switch
    //00: HSI selected as system clock
    //01: HSE selected as system clock
    //10: PLL selected as system clock   <----------------- 선택됨
    //11: not allowed
	REG_RCC_CFGR &= ~0x3;
 8000bdc:	f241 0304 	movw	r3, #4100	; 0x1004
 8000be0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000be4:	6819      	ldr	r1, [r3, #0]
	//
	REG_RCC_CFGR &= ~(0x7<<11);
	REG_RCC_CFGR |=  (0x0<<11);

    
    while( (REG_RCC_CFGR & 0xC) != 0x08 );
 8000be6:	461a      	mov	r2, r3
    /////Bits 1:0 SW : System clock switch
    //00: HSI selected as system clock
    //01: HSE selected as system clock
    //10: PLL selected as system clock   <----------------- 선택됨
    //11: not allowed
	REG_RCC_CFGR &= ~0x3;
 8000be8:	f021 0103 	bic.w	r1, r1, #3
 8000bec:	6019      	str	r1, [r3, #0]
	REG_RCC_CFGR |=  0x2;
 8000bee:	6819      	ldr	r1, [r3, #0]
 8000bf0:	f041 0102 	orr.w	r1, r1, #2
 8000bf4:	6019      	str	r1, [r3, #0]

	// USB 72M * 2 / 3 = 48Mhz
	//
	CLR_BIT( REG_RCC_CFGR, 22 );
 8000bf6:	6819      	ldr	r1, [r3, #0]
 8000bf8:	f421 0180 	bic.w	r1, r1, #4194304	; 0x400000
 8000bfc:	6019      	str	r1, [r3, #0]

	// APB1 - PCLK1 36Mhz
	//
	REG_RCC_CFGR &= ~(0x7<<8);
 8000bfe:	6819      	ldr	r1, [r3, #0]
 8000c00:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 8000c04:	6019      	str	r1, [r3, #0]
	REG_RCC_CFGR |=  (0x4<<8);
 8000c06:	6819      	ldr	r1, [r3, #0]
 8000c08:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8000c0c:	6019      	str	r1, [r3, #0]
	
	// APB2 - PCLK2 72Mhz
	//
	REG_RCC_CFGR &= ~(0x7<<11);
 8000c0e:	6819      	ldr	r1, [r3, #0]
 8000c10:	f421 5160 	bic.w	r1, r1, #14336	; 0x3800
 8000c14:	6019      	str	r1, [r3, #0]
	REG_RCC_CFGR |=  (0x0<<11);
 8000c16:	6819      	ldr	r1, [r3, #0]
 8000c18:	6019      	str	r1, [r3, #0]

    
    while( (REG_RCC_CFGR & 0xC) != 0x08 );
 8000c1a:	6813      	ldr	r3, [r2, #0]
 8000c1c:	f003 030c 	and.w	r3, r3, #12
 8000c20:	2b08      	cmp	r3, #8
 8000c22:	d1fa      	bne.n	8000c1a <Hw_PLL_Init+0x72>
    
    //APB2에 있는 UART 등 주변장치에 Clock 소스 동작제어
    //UART가 동작되기 위해서는 GPIO와 Alternation Function IO가 동작상태에 있어야 함
	REG_RCC_APB2ENR |= 0  |
 8000c24:	f241 0318 	movw	r3, #4120	; 0x1018
 8000c28:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000c2c:	681a      	ldr	r2, [r3, #0]
 8000c2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000c32:	f042 021d 	orr.w	r2, r2, #29
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop

08000c3c <Hw_Led_Off>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Led_Off( u8 Ch )
{
 8000c3c:	b508      	push	{r3, lr}
	switch( Ch )
 8000c3e:	2803      	cmp	r0, #3
 8000c40:	d807      	bhi.n	8000c52 <Hw_Led_Off+0x16>
 8000c42:	e8df f000 	tbb	[pc, r0]
 8000c46:	0c11      	.short	0x0c11
 8000c48:	0207      	.short	0x0207
		case 2:
			Hw_VBus_SetBit( HW_VBUS_CS_LED_1, 2 );
			break;

		case 3:
			Hw_VBus_SetBit( HW_VBUS_CS_LED_1, 3 );
 8000c4a:	2012      	movs	r0, #18
 8000c4c:	2103      	movs	r1, #3
 8000c4e:	4b09      	ldr	r3, [pc, #36]	; (8000c74 <Hw_Led_Off+0x38>)
 8000c50:	4798      	blx	r3
 8000c52:	bd08      	pop	{r3, pc}
		case 1:
			Hw_VBus_SetBit( HW_VBUS_CS_LED_1, 1 );
			break;

		case 2:
			Hw_VBus_SetBit( HW_VBUS_CS_LED_1, 2 );
 8000c54:	2012      	movs	r0, #18
 8000c56:	2102      	movs	r1, #2
 8000c58:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <Hw_Led_Off+0x38>)
 8000c5a:	4798      	blx	r3
			break;
 8000c5c:	bd08      	pop	{r3, pc}
		case 0:
			Hw_VBus_SetBit( HW_VBUS_CS_LED_1, 0 );
			break;

		case 1:
			Hw_VBus_SetBit( HW_VBUS_CS_LED_1, 1 );
 8000c5e:	2012      	movs	r0, #18
 8000c60:	2101      	movs	r1, #1
 8000c62:	4b04      	ldr	r3, [pc, #16]	; (8000c74 <Hw_Led_Off+0x38>)
 8000c64:	4798      	blx	r3
			break;
 8000c66:	bd08      	pop	{r3, pc}
void Hw_Led_Off( u8 Ch )
{
	switch( Ch )
	{
		case 0:
			Hw_VBus_SetBit( HW_VBUS_CS_LED_1, 0 );
 8000c68:	2012      	movs	r0, #18
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	4b01      	ldr	r3, [pc, #4]	; (8000c74 <Hw_Led_Off+0x38>)
 8000c6e:	4798      	blx	r3
 8000c70:	bd08      	pop	{r3, pc}
 8000c72:	bf00      	nop
 8000c74:	0800136d 	.word	0x0800136d

08000c78 <Hw_Led_Init>:
 8000c78:	f241 336d 	movw	r3, #4973	; 0x136d
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Led_Init( void )
{		
 8000c7c:	b510      	push	{r4, lr}
void Hw_Led_Off( u8 Ch )
{
	switch( Ch )
	{
		case 0:
			Hw_VBus_SetBit( HW_VBUS_CS_LED_1, 0 );
 8000c7e:	2100      	movs	r1, #0
 8000c80:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000c84:	2012      	movs	r0, #18
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Led_Init( void )
{		
	Hw_Led_Off(0);
	Hw_Led_Off(1);
 8000c86:	f640 443d 	movw	r4, #3133	; 0xc3d
void Hw_Led_Off( u8 Ch )
{
	switch( Ch )
	{
		case 0:
			Hw_VBus_SetBit( HW_VBUS_CS_LED_1, 0 );
 8000c8a:	4798      	blx	r3
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Led_Init( void )
{		
	Hw_Led_Off(0);
	Hw_Led_Off(1);
 8000c8c:	f6c0 0400 	movt	r4, #2048	; 0x800
 8000c90:	2001      	movs	r0, #1
 8000c92:	47a0      	blx	r4
	Hw_Led_Off(2);
 8000c94:	2002      	movs	r0, #2
 8000c96:	47a0      	blx	r4
	Hw_Led_Off(3);
 8000c98:	2003      	movs	r0, #3
 8000c9a:	47a0      	blx	r4
 8000c9c:	bd10      	pop	{r4, pc}
 8000c9e:	bf00      	nop

08000ca0 <Hw_Led_Toggle>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Led_Toggle( u8 Ch )
{
 8000ca0:	b508      	push	{r3, lr}
	switch( Ch )
 8000ca2:	2803      	cmp	r0, #3
 8000ca4:	d807      	bhi.n	8000cb6 <Hw_Led_Toggle+0x16>
 8000ca6:	e8df f000 	tbb	[pc, r0]
 8000caa:	0c11      	.short	0x0c11
 8000cac:	0207      	.short	0x0207
		case 2:
			Hw_VBus_TglBit( HW_VBUS_CS_LED_1, 2 );
			break;

		case 3:
			Hw_VBus_TglBit( HW_VBUS_CS_LED_1, 3 );
 8000cae:	2012      	movs	r0, #18
 8000cb0:	2103      	movs	r1, #3
 8000cb2:	4b09      	ldr	r3, [pc, #36]	; (8000cd8 <Hw_Led_Toggle+0x38>)
 8000cb4:	4798      	blx	r3
 8000cb6:	bd08      	pop	{r3, pc}
		case 1:
			Hw_VBus_TglBit( HW_VBUS_CS_LED_1, 1 );
			break;

		case 2:
			Hw_VBus_TglBit( HW_VBUS_CS_LED_1, 2 );
 8000cb8:	2012      	movs	r0, #18
 8000cba:	2102      	movs	r1, #2
 8000cbc:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <Hw_Led_Toggle+0x38>)
 8000cbe:	4798      	blx	r3
			break;
 8000cc0:	bd08      	pop	{r3, pc}
		case 0:
			Hw_VBus_TglBit( HW_VBUS_CS_LED_1, 0 );
			break;

		case 1:
			Hw_VBus_TglBit( HW_VBUS_CS_LED_1, 1 );
 8000cc2:	2012      	movs	r0, #18
 8000cc4:	2101      	movs	r1, #1
 8000cc6:	4b04      	ldr	r3, [pc, #16]	; (8000cd8 <Hw_Led_Toggle+0x38>)
 8000cc8:	4798      	blx	r3
			break;
 8000cca:	bd08      	pop	{r3, pc}
void Hw_Led_Toggle( u8 Ch )
{
	switch( Ch )
	{
		case 0:
			Hw_VBus_TglBit( HW_VBUS_CS_LED_1, 0 );
 8000ccc:	2012      	movs	r0, #18
 8000cce:	2100      	movs	r1, #0
 8000cd0:	4b01      	ldr	r3, [pc, #4]	; (8000cd8 <Hw_Led_Toggle+0x38>)
 8000cd2:	4798      	blx	r3
			break;
 8000cd4:	bd08      	pop	{r3, pc}
 8000cd6:	bf00      	nop
 8000cd8:	080013c5 	.word	0x080013c5

08000cdc <Hw_Uart_Q_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Q_Init( void )
{
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4804      	ldr	r0, [pc, #16]	; (8000cf0 <Hw_Uart_Q_Init+0x14>)
 8000ce0:	4904      	ldr	r1, [pc, #16]	; (8000cf4 <Hw_Uart_Q_Init+0x18>)
	u8 i;

	for( i=0; i<HW_UART_Q_CH_MAX; i++ )
	{
		Hw_Uart_Q_Start[i] = Hw_Uart_Q_End[i] = 0;
 8000ce2:	461a      	mov	r2, r3
 8000ce4:	521a      	strh	r2, [r3, r0]
 8000ce6:	525a      	strh	r2, [r3, r1]
 8000ce8:	3302      	adds	r3, #2
---------------------------------------------------------------------------*/
void Hw_Uart_Q_Init( void )
{
	u8 i;

	for( i=0; i<HW_UART_Q_CH_MAX; i++ )
 8000cea:	2b0e      	cmp	r3, #14
 8000cec:	d1fa      	bne.n	8000ce4 <Hw_Uart_Q_Init+0x8>
	{
		Hw_Uart_Q_Start[i] = Hw_Uart_Q_End[i] = 0;
	}
}
 8000cee:	4770      	bx	lr
 8000cf0:	2000042c 	.word	0x2000042c
 8000cf4:	2000043c 	.word	0x2000043c

08000cf8 <HW_UART_Q_VAILD>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 8000cf8:	f240 423c 	movw	r2, #1084	; 0x43c
 8000cfc:	f240 432c 	movw	r3, #1068	; 0x42c
 8000d00:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000d04:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000d08:	f933 3010 	ldrsh.w	r3, [r3, r0, lsl #1]
 8000d0c:	f932 2010 	ldrsh.w	r2, [r2, r0, lsl #1]
 8000d10:	1ad2      	subs	r2, r2, r3
 8000d12:	3220      	adds	r2, #32
 8000d14:	17d3      	asrs	r3, r2, #31
 8000d16:	0edb      	lsrs	r3, r3, #27
 8000d18:	18d2      	adds	r2, r2, r3
 8000d1a:	f002 001f 	and.w	r0, r2, #31
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_VAILD( u8 Ch )
{
	return HW_UART_Q_SIZE(Ch);
}
 8000d1e:	1ac0      	subs	r0, r0, r3
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop

08000d24 <Hw_Uart_Q_Push>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{
 8000d24:	b470      	push	{r4, r5, r6}
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 8000d26:	4c13      	ldr	r4, [pc, #76]	; (8000d74 <Hw_Uart_Q_Push+0x50>)
 8000d28:	4b13      	ldr	r3, [pc, #76]	; (8000d78 <Hw_Uart_Q_Push+0x54>)
 8000d2a:	f834 6010 	ldrh.w	r6, [r4, r0, lsl #1]
 8000d2e:	f933 2010 	ldrsh.w	r2, [r3, r0, lsl #1]
 8000d32:	b235      	sxth	r5, r6
 8000d34:	1aaa      	subs	r2, r5, r2
 8000d36:	3220      	adds	r2, #32
 8000d38:	17d3      	asrs	r3, r2, #31
 8000d3a:	0edb      	lsrs	r3, r3, #27
 8000d3c:	18d2      	adds	r2, r2, r3
 8000d3e:	f002 021f 	and.w	r2, r2, #31
 8000d42:	1ad3      	subs	r3, r2, r3
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;
 8000d44:	2b1f      	cmp	r3, #31
 8000d46:	d012      	beq.n	8000d6e <Hw_Uart_Q_Push+0x4a>

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
 8000d48:	3601      	adds	r6, #1
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 8000d4a:	b236      	sxth	r6, r6
 8000d4c:	17f3      	asrs	r3, r6, #31
 8000d4e:	0edb      	lsrs	r3, r3, #27
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
 8000d50:	eb00 1240 	add.w	r2, r0, r0, lsl #5
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 8000d54:	18f6      	adds	r6, r6, r3
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
 8000d56:	7809      	ldrb	r1, [r1, #0]
 8000d58:	1955      	adds	r5, r2, r5
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 8000d5a:	f006 061f 	and.w	r6, r6, #31
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
 8000d5e:	4a07      	ldr	r2, [pc, #28]	; (8000d7c <Hw_Uart_Q_Push+0x58>)
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 8000d60:	1af3      	subs	r3, r6, r3
 8000d62:	f824 3010 	strh.w	r3, [r4, r0, lsl #1]
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
 8000d66:	5551      	strb	r1, [r2, r5]
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;

	return TRUE;
 8000d68:	2001      	movs	r0, #1
}
 8000d6a:	bc70      	pop	{r4, r5, r6}
 8000d6c:	4770      	bx	lr
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;
 8000d6e:	2000      	movs	r0, #0
 8000d70:	e7fb      	b.n	8000d6a <Hw_Uart_Q_Push+0x46>
 8000d72:	bf00      	nop
 8000d74:	2000043c 	.word	0x2000043c
 8000d78:	2000042c 	.word	0x2000042c
 8000d7c:	20000334 	.word	0x20000334

08000d80 <Hw_Uart_Q_Pop>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
 8000d80:	b470      	push	{r4, r5, r6}
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 8000d82:	4c12      	ldr	r4, [pc, #72]	; (8000dcc <Hw_Uart_Q_Pop+0x4c>)
 8000d84:	4a12      	ldr	r2, [pc, #72]	; (8000dd0 <Hw_Uart_Q_Pop+0x50>)
 8000d86:	f834 6010 	ldrh.w	r6, [r4, r0, lsl #1]
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
 8000d8a:	4603      	mov	r3, r0
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 8000d8c:	f932 0010 	ldrsh.w	r0, [r2, r0, lsl #1]
 8000d90:	b235      	sxth	r5, r6
 8000d92:	1b40      	subs	r0, r0, r5
 8000d94:	3020      	adds	r0, #32
 8000d96:	17c2      	asrs	r2, r0, #31
 8000d98:	0ed2      	lsrs	r2, r2, #27
 8000d9a:	1880      	adds	r0, r0, r2
 8000d9c:	f000 001f 	and.w	r0, r0, #31
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;
 8000da0:	1a80      	subs	r0, r0, r2
 8000da2:	d010      	beq.n	8000dc6 <Hw_Uart_Q_Pop+0x46>

	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];
 8000da4:	3601      	adds	r6, #1

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;
 8000da6:	b236      	sxth	r6, r6
 8000da8:	17f2      	asrs	r2, r6, #31
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;

	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];
 8000daa:	eb03 1043 	add.w	r0, r3, r3, lsl #5

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;
 8000dae:	0ed2      	lsrs	r2, r2, #27
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;

	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];
 8000db0:	1945      	adds	r5, r0, r5
 8000db2:	4808      	ldr	r0, [pc, #32]	; (8000dd4 <Hw_Uart_Q_Pop+0x54>)

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;
 8000db4:	18b6      	adds	r6, r6, r2
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;

	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];
 8000db6:	5d40      	ldrb	r0, [r0, r5]

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;
 8000db8:	f006 061f 	and.w	r6, r6, #31
 8000dbc:	1ab2      	subs	r2, r6, r2
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;

	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];
 8000dbe:	7008      	strb	r0, [r1, #0]

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;

    return TRUE;
 8000dc0:	2001      	movs	r0, #1
{
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;

	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;
 8000dc2:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]

    return TRUE;
}
 8000dc6:	bc70      	pop	{r4, r5, r6}
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	2000042c 	.word	0x2000042c
 8000dd0:	2000043c 	.word	0x2000043c
 8000dd4:	20000334 	.word	0x20000334

08000dd8 <Hw_ISR_Init>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_ISR_Init( void )
{
	REG_SCB_VTOR = (u32)Hw_ISR_VectorTable;
 8000dd8:	f240 6300 	movw	r3, #1536	; 0x600
 8000ddc:	f64e 5208 	movw	r2, #60680	; 0xed08
 8000de0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000de4:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8000de8:	6013      	str	r3, [r2, #0]
 8000dea:	4770      	bx	lr

08000dec <Hw_ISR_SetIRQFunc>:
---------------------------------------------------------------------------*/
void Hw_ISR_SetIRQFunc( u8 ISR_Num, u32 FuncAddress, u8 ISR_Priority )
{	
	u32 ISR_StartOffset = 16;
	
	Hw_ISR_VectorTable[ ISR_StartOffset + ISR_Num ] = FuncAddress;	
 8000dec:	f240 6300 	movw	r3, #1536	; 0x600
 8000df0:	3010      	adds	r0, #16
 8000df2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000df6:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 8000dfa:	4770      	bx	lr

08000dfc <Hw_ISR_SetIRQFuncByAddr>:
---------------------------------------------------------------------------*/
void Hw_ISR_SetIRQFuncByAddr( u32 ISR_Addr, u32 FuncAddress, u8 ISR_Priority )
{	
	u32 ISR_StartOffset = ISR_Addr/4;
	
	Hw_ISR_VectorTable[ ISR_StartOffset ] = FuncAddress;	
 8000dfc:	f240 6300 	movw	r3, #1536	; 0x600
     			u8  ISR_Priority : 인터럽트 우선순위(작은값이 우선순위 높음)
     RET     : void
---------------------------------------------------------------------------*/
void Hw_ISR_SetIRQFuncByAddr( u32 ISR_Addr, u32 FuncAddress, u8 ISR_Priority )
{	
	u32 ISR_StartOffset = ISR_Addr/4;
 8000e00:	0880      	lsrs	r0, r0, #2
	
	Hw_ISR_VectorTable[ ISR_StartOffset ] = FuncAddress;	
 8000e02:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000e06:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 8000e0a:	4770      	bx	lr

08000e0c <Hw_Timer_SetupISR>:
     	 	 	 타이머 H/W 기능을 초기화 한다.
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_SetupISR( void )
{	
 8000e0c:	b508      	push	{r3, lr}
	Hw_ISR_SetIRQFuncByAddr( 0x003C, (u32)Hw_Timer_ISR, 0 );	
 8000e0e:	f640 7111 	movw	r1, #3857	; 0xf11
 8000e12:	f640 53fd 	movw	r3, #3581	; 0xdfd
 8000e16:	203c      	movs	r0, #60	; 0x3c
 8000e18:	f6c0 0100 	movt	r1, #2048	; 0x800
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000e22:	4798      	blx	r3
 8000e24:	bd08      	pop	{r3, pc}
 8000e26:	bf00      	nop

08000e28 <Hw_Timer_Init>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_Init( void )
{
 8000e28:	b510      	push	{r4, lr}
	u8 i;
	static u8 Excute = 0;

	
	if( Excute == 1 ) return;  // 이미 한번 실행했다면 정지.
 8000e2a:	4c1b      	ldr	r4, [pc, #108]	; (8000e98 <Hw_Timer_Init+0x70>)
 8000e2c:	7823      	ldrb	r3, [r4, #0]
 8000e2e:	2b01      	cmp	r3, #1
 8000e30:	d030      	beq.n	8000e94 <Hw_Timer_Init+0x6c>
 8000e32:	4b1a      	ldr	r3, [pc, #104]	; (8000e9c <Hw_Timer_Init+0x74>)
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 8000e34:	2200      	movs	r2, #0
     TITLE   : Hw_Timer_Init
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_Init( void )
 8000e36:	f103 01a0 	add.w	r1, r3, #160	; 0xa0
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 8000e3a:	f803 2c08 	strb.w	r2, [r3, #-8]
		Timer_Tbl[i].Timer_Ctn  = 0;
 8000e3e:	f823 2c06 	strh.w	r2, [r3, #-6]
		Timer_Tbl[i].Timer_Init = 0;
 8000e42:	f823 2c04 	strh.w	r2, [r3, #-4]
		Timer_Tbl[i].TmrFnct    = NULL;
 8000e46:	f843 2b10 	str.w	r2, [r3], #16
	
	if( Excute == 1 ) return;  // 이미 한번 실행했다면 정지.
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
 8000e4a:	428b      	cmp	r3, r1
 8000e4c:	d1f5      	bne.n	8000e3a <Hw_Timer_Init+0x12>
		Timer_Tbl[i].Timer_Init = 0;
		Timer_Tbl[i].TmrFnct    = NULL;
	}	                   
	
	
	Hw_Timer_SetupISR();
 8000e4e:	4b14      	ldr	r3, [pc, #80]	; (8000ea0 <Hw_Timer_Init+0x78>)
 8000e50:	4798      	blx	r3
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_Setup( void )
{

	REG_STK_LOAD = 72000 - 1;	// 72000000 / 72000 = 1000us = 1ms
 8000e52:	f24e 0114 	movw	r1, #57364	; 0xe014
 8000e56:	f641 103f 	movw	r0, #6463	; 0x193f
 8000e5a:	f2ce 0100 	movt	r1, #57344	; 0xe000
	
	REG_STK_VAL  = 0;	
 8000e5e:	f24e 0218 	movw	r2, #57368	; 0xe018
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_Setup( void )
{

	REG_STK_LOAD = 72000 - 1;	// 72000000 / 72000 = 1000us = 1ms
 8000e62:	f2c0 0001 	movt	r0, #1
 8000e66:	6008      	str	r0, [r1, #0]
	
	REG_STK_VAL  = 0;	
 8000e68:	f2ce 0200 	movt	r2, #57344	; 0xe000
	
	SET_BIT( REG_STK_CTRL, 2 );	// CLKSOURCE = Processor Clock 72Mhz		
 8000e6c:	f24e 0310 	movw	r3, #57360	; 0xe010
void Hw_Timer_Setup( void )
{

	REG_STK_LOAD = 72000 - 1;	// 72000000 / 72000 = 1000us = 1ms
	
	REG_STK_VAL  = 0;	
 8000e70:	2100      	movs	r1, #0
	
	SET_BIT( REG_STK_CTRL, 2 );	// CLKSOURCE = Processor Clock 72Mhz		
 8000e72:	f2ce 0300 	movt	r3, #57344	; 0xe000
void Hw_Timer_Setup( void )
{

	REG_STK_LOAD = 72000 - 1;	// 72000000 / 72000 = 1000us = 1ms
	
	REG_STK_VAL  = 0;	
 8000e76:	6011      	str	r1, [r2, #0]
	
	SET_BIT( REG_STK_CTRL, 2 );	// CLKSOURCE = Processor Clock 72Mhz		
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	f042 0204 	orr.w	r2, r2, #4
 8000e7e:	601a      	str	r2, [r3, #0]
	SET_BIT( REG_STK_CTRL, 1 );	// 인터럽트 활성화		
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	f042 0202 	orr.w	r2, r2, #2
 8000e86:	601a      	str	r2, [r3, #0]
	SET_BIT( REG_STK_CTRL, 0 );	// Counter Enable
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	f042 0201 	orr.w	r2, r2, #1
 8000e8e:	601a      	str	r2, [r3, #0]
	
	
	Hw_Timer_SetupISR();
	Hw_Timer_Setup();	

	Excute = 1;
 8000e90:	2301      	movs	r3, #1
 8000e92:	7023      	strb	r3, [r4, #0]
 8000e94:	bd10      	pop	{r4, pc}
 8000e96:	bf00      	nop
 8000e98:	20000209 	.word	0x20000209
 8000e9c:	20000214 	.word	0x20000214
 8000ea0:	08000e0d 	.word	0x08000e0d

08000ea4 <Hw_Timer_Tick>:
void Hw_Timer_Tick(void)
{
	u8 i;

	
	Hw_Timer_Counter++;
 8000ea4:	4a17      	ldr	r2, [pc, #92]	; (8000f04 <Hw_Timer_Tick+0x60>)
			타이머인터럽트 발생시에 실행되는 함수(1ms 혹은 10ms 단위로 실행)
     ARG	: void
     RET	: void
---------------------------------------------------------------------------*/
void Hw_Timer_Tick(void)
{
 8000ea6:	b538      	push	{r3, r4, r5, lr}
	u8 i;

	
	Hw_Timer_Counter++;
 8000ea8:	6811      	ldr	r1, [r2, #0]


	if( Tmr_Ctn ) Tmr_Ctn--;
 8000eaa:	4b17      	ldr	r3, [pc, #92]	; (8000f08 <Hw_Timer_Tick+0x64>)
void Hw_Timer_Tick(void)
{
	u8 i;

	
	Hw_Timer_Counter++;
 8000eac:	3101      	adds	r1, #1
 8000eae:	6011      	str	r1, [r2, #0]


	if( Tmr_Ctn ) Tmr_Ctn--;
 8000eb0:	881a      	ldrh	r2, [r3, #0]
 8000eb2:	b292      	uxth	r2, r2
 8000eb4:	b11a      	cbz	r2, 8000ebe <Hw_Timer_Tick+0x1a>
 8000eb6:	881a      	ldrh	r2, [r3, #0]
 8000eb8:	3a01      	subs	r2, #1
 8000eba:	b292      	uxth	r2, r2
 8000ebc:	801a      	strh	r2, [r3, #0]
 8000ebe:	4c13      	ldr	r4, [pc, #76]	; (8000f0c <Hw_Timer_Tick+0x68>)
     WORK	:
			타이머인터럽트 발생시에 실행되는 함수(1ms 혹은 10ms 단위로 실행)
     ARG	: void
     RET	: void
---------------------------------------------------------------------------*/
void Hw_Timer_Tick(void)
 8000ec0:	f104 05a0 	add.w	r5, r4, #160	; 0xa0
 8000ec4:	e002      	b.n	8000ecc <Hw_Timer_Tick+0x28>
 8000ec6:	3410      	adds	r4, #16

	if( Tmr_Ctn ) Tmr_Ctn--;
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
 8000ec8:	42ac      	cmp	r4, r5
 8000eca:	d01a      	beq.n	8000f02 <Hw_Timer_Tick+0x5e>
	{
		if( Timer_Tbl[i].Timer_En == ON)   					// 타이머가 활성화 됬니?
 8000ecc:	f814 3c08 	ldrb.w	r3, [r4, #-8]
 8000ed0:	2b01      	cmp	r3, #1
 8000ed2:	d1f8      	bne.n	8000ec6 <Hw_Timer_Tick+0x22>
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소
 8000ed4:	f834 3c06 	ldrh.w	r3, [r4, #-6]
 8000ed8:	3b01      	subs	r3, #1
 8000eda:	b29b      	uxth	r3, r3
 8000edc:	f824 3c06 	strh.w	r3, [r4, #-6]

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d1f0      	bne.n	8000ec6 <Hw_Timer_Tick+0x22>
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 8000ee4:	f814 2c07 	ldrb.w	r2, [r4, #-7]
 8000ee8:	2a01      	cmp	r2, #1

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8000eea:	f834 2c04 	ldrh.w	r2, [r4, #-4]

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.
 8000eee:	bf08      	it	eq
 8000ef0:	f804 3c08 	strbeq.w	r3, [r4, #-8]

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8000ef4:	f824 2c06 	strh.w	r2, [r4, #-6]

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8000ef8:	6823      	ldr	r3, [r4, #0]
 8000efa:	3410      	adds	r4, #16
 8000efc:	4798      	blx	r3

	if( Tmr_Ctn ) Tmr_Ctn--;
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
 8000efe:	42ac      	cmp	r4, r5
 8000f00:	d1e4      	bne.n	8000ecc <Hw_Timer_Tick+0x28>
				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
			}
		}
	}
	
}
 8000f02:	bd38      	pop	{r3, r4, r5, pc}
 8000f04:	200002ac 	.word	0x200002ac
 8000f08:	200002b0 	.word	0x200002b0
 8000f0c:	20000214 	.word	0x20000214

08000f10 <Hw_Timer_ISR>:
void Hw_Timer_Setup( void );



void Hw_Timer_ISR(void)
{
 8000f10:	b508      	push	{r3, lr}

	Hw_Timer_Tick();  
 8000f12:	f640 63a5 	movw	r3, #3749	; 0xea5
 8000f16:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000f1a:	4798      	blx	r3
 8000f1c:	bd08      	pop	{r3, pc}
 8000f1e:	bf00      	nop

08000f20 <Hw_Timer_Set>:
			void (*Fnct)(void),void *arg : 실행할 타이머 함수.
     RET
     	 	void
---------------------------------------------------------------------------*/
void Hw_Timer_Set(u8 TmrNum, u16 TmrData, u8 TmrMode, void (*Fnct)(void),void *arg)
{
 8000f20:	b410      	push	{r4}
	Timer_Tbl[TmrNum].Timer_Mode = TmrMode;    // 모트설정
 8000f22:	f240 240c 	movw	r4, #524	; 0x20c
 8000f26:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8000f2a:	eb04 1000 	add.w	r0, r4, r0, lsl #4
	Timer_Tbl[TmrNum].TmrFnct    = Fnct;       // 실행할 함수
 8000f2e:	6083      	str	r3, [r0, #8]
	Timer_Tbl[TmrNum].TmrFnctArg = arg;        // 매개변수
 8000f30:	9b01      	ldr	r3, [sp, #4]
     RET
     	 	void
---------------------------------------------------------------------------*/
void Hw_Timer_Set(u8 TmrNum, u16 TmrData, u8 TmrMode, void (*Fnct)(void),void *arg)
{
	Timer_Tbl[TmrNum].Timer_Mode = TmrMode;    // 모트설정
 8000f32:	7042      	strb	r2, [r0, #1]
	Timer_Tbl[TmrNum].TmrFnct    = Fnct;       // 실행할 함수
	Timer_Tbl[TmrNum].TmrFnctArg = arg;        // 매개변수
 8000f34:	60c3      	str	r3, [r0, #12]
	Timer_Tbl[TmrNum].Timer_Ctn  = TmrData;
 8000f36:	8041      	strh	r1, [r0, #2]
	Timer_Tbl[TmrNum].Timer_Init = TmrData;
 8000f38:	8081      	strh	r1, [r0, #4]
}
 8000f3a:	bc10      	pop	{r4}
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop

08000f40 <Hw_Timer_Start>:
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Timer_Start(u8 TmrNum)
{
	if(TmrNum < TIMER_MAX)
 8000f40:	2809      	cmp	r0, #9
 8000f42:	d803      	bhi.n	8000f4c <Hw_Timer_Start+0xc>
		Timer_Tbl[TmrNum].Timer_En = ON;
 8000f44:	4b02      	ldr	r3, [pc, #8]	; (8000f50 <Hw_Timer_Start+0x10>)
 8000f46:	0100      	lsls	r0, r0, #4
 8000f48:	2201      	movs	r2, #1
 8000f4a:	541a      	strb	r2, [r3, r0]
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	2000020c 	.word	0x2000020c

08000f54 <Hw_Timer_Delay_ms>:
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Timer_Delay_ms( u16 DelayData )
{
	Tmr_Ctn = DelayData;
 8000f54:	4a03      	ldr	r2, [pc, #12]	; (8000f64 <Hw_Timer_Delay_ms+0x10>)
 8000f56:	8010      	strh	r0, [r2, #0]
	
	while( Tmr_Ctn );
 8000f58:	8813      	ldrh	r3, [r2, #0]
 8000f5a:	b29b      	uxth	r3, r3
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d1fb      	bne.n	8000f58 <Hw_Timer_Delay_ms+0x4>
}
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	200002b0 	.word	0x200002b0

08000f68 <Hw_Timer_Get_CountValue>:
     ARG
     RET
---------------------------------------------------------------------------*/
u32 Hw_Timer_Get_CountValue( void )
{
	return Hw_Timer_Counter;
 8000f68:	f240 23ac 	movw	r3, #684	; 0x2ac
 8000f6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000f70:	6818      	ldr	r0, [r3, #0]
}
 8000f72:	4770      	bx	lr

08000f74 <Hw_VCom_Init>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_VCom_Init( void )
{
 8000f74:	b508      	push	{r3, lr}
	Set_System();
 8000f76:	f242 13e5 	movw	r3, #8677	; 0x21e5
 8000f7a:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000f7e:	4798      	blx	r3
	Set_USBClock();
 8000f80:	f242 2305 	movw	r3, #8709	; 0x2205
 8000f84:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000f88:	4798      	blx	r3
	USB_Interrupts_Config();
 8000f8a:	f242 2349 	movw	r3, #8777	; 0x2249
 8000f8e:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000f92:	4798      	blx	r3
	USB_Init();	
 8000f94:	f642 53a9 	movw	r3, #11689	; 0x2da9
 8000f98:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000f9c:	4798      	blx	r3
 8000f9e:	bd08      	pop	{r3, pc}

08000fa0 <Hw_VBus_SetDataPortOutput>:
---------------------------------------------------------------------------*/
void Hw_VBus_SetDataPortOutput( void )
{
	//-- D0 PB.0
	//
	REG_GPIOB_CRL &= ~(0x0F << ( 0));	// Clear
 8000fa0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000fa4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	f022 020f 	bic.w	r2, r2, #15
 8000fae:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x03 << ( 0));	// MODE, PB.0 Output mode, max speed 50Mhz
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	f042 0203 	orr.w	r2, r2, #3
 8000fb6:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x00 << ( 2));	// CNF,  PB.0 General purpose output push-pul	
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	601a      	str	r2, [r3, #0]

	//-- D1 PB.1
	//
	REG_GPIOB_CRL &= ~(0x0F << ( 4));	// Clear
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000fc2:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x03 << ( 4));	// MODE, PB.1 Output mode, max speed 50Mhz
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8000fca:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x00 << ( 6));	// CNF,  PB.1 General purpose output push-pul	
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	601a      	str	r2, [r3, #0]

	//-- D2 PB.2
	//
	REG_GPIOB_CRL &= ~(0x0F << ( 8));	// Clear
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8000fd6:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x03 << ( 8));	// MODE, PB.2 Output mode, max speed 50Mhz
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8000fde:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x00 << (10));	// CNF,  PB.2 General purpose output push-pul	
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	601a      	str	r2, [r3, #0]

	//-- D3 PB.3
	//
	REG_GPIOB_CRL &= ~(0x0F << (12));	// Clear
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 8000fea:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x03 << (12));	// MODE, PB.2 Output mode, max speed 50Mhz
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8000ff2:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x00 << (14));	// CNF,  PB.2 General purpose output push-pul	
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	601a      	str	r2, [r3, #0]

	//-- D4 PB.4
	//
	REG_GPIOB_CRL &= ~(0x0F << (16));	// Clear
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8000ffe:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x03 << (16));	// MODE, PB.2 Output mode, max speed 50Mhz
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8001006:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x00 << (18));	// CNF,  PB.2 General purpose output push-pul	
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	601a      	str	r2, [r3, #0]
	
	//-- D5 PB.5
	//
	REG_GPIOB_CRL &= ~(0x0F << (20));	// Clear
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001012:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x03 << (20));	// MODE, PB.6 Output mode, max speed 50Mhz
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	f442 1240 	orr.w	r2, r2, #3145728	; 0x300000
 800101a:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x00 << (22));	// CNF,  PB.6 General purpose output push-pul	
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	601a      	str	r2, [r3, #0]
	
	//-- D6 PB.6
	//
	REG_GPIOB_CRL &= ~(0x0F << (24));	// Clear
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001026:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x03 << (24));	// MODE, PB.6 Output mode, max speed 50Mhz
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 800102e:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x00 << (26));	// CNF,  PB.6 General purpose output push-pul	
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	601a      	str	r2, [r3, #0]

	//-- D7 PB.7
	//
	REG_GPIOB_CRL &= ~(0x0F << (28));	// Clear
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800103a:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x03 << (28));	// MODE, PB.7 Output mode, max speed 50Mhz
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8001042:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x00 << (30));	// CNF,  PB.7 General purpose output push-pul				
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop

0800104c <Hw_VBus_SetDataPortInput>:
---------------------------------------------------------------------------*/
void Hw_VBus_SetDataPortInput( void )
{
	//-- D0 PB.0
	//
	REG_GPIOB_CRL &= ~(0x0F << ( 0));	// Clear
 800104c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001050:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	f022 020f 	bic.w	r2, r2, #15
 800105a:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x00 << ( 0));	// MODE, PB.0 Input Mode
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x01 << ( 2));	// CNF,  PB.0 Floating input
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	f042 0204 	orr.w	r2, r2, #4
 8001066:	601a      	str	r2, [r3, #0]
		
	//-- D1 PB.1
	//
	REG_GPIOB_CRL &= ~(0x0F << ( 4));	// Clear
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800106e:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x00 << ( 4));	// MODE, PB.1 Input Mode
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x01 << ( 6));	// CNF,  PB.1 Floating input
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800107a:	601a      	str	r2, [r3, #0]

	//-- D2 PB.2
	//
	REG_GPIOB_CRL &= ~(0x0F << ( 8));	// Clear
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8001082:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x00 << ( 8));	// MODE, PB.2 Input Mode
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x01 << (10));	// CNF,  PB.2 Floating input
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800108e:	601a      	str	r2, [r3, #0]

	//-- D3 PB.3
	//
	REG_GPIOB_CRL &= ~(0x0F << (12));	// Clear
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 8001096:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x00 << (12));	// MODE, PB.2 Input Mode
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x01 << (14));	// CNF,  PB.2 Floating input
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80010a2:	601a      	str	r2, [r3, #0]

	//-- D4 PB.4
	//
	REG_GPIOB_CRL &= ~(0x0F << (16));	// Clear
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 80010aa:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x00 << (16));	// MODE, PB.2 Input Mode
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x01 << (18));	// CNF,  PB.2 Floating input
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80010b6:	601a      	str	r2, [r3, #0]
	
	//-- D5 PB.5
	//
	REG_GPIOB_CRL &= ~(0x0F << (20));	// Clear
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80010be:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x00 << (20));	// MODE, PB.6 Input Mode
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x01 << (22));	// CNF,  PB.6 Floating input
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80010ca:	601a      	str	r2, [r3, #0]
	
	//-- D6 PB.6
	//
	REG_GPIOB_CRL &= ~(0x0F << (24));	// Clear
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80010d2:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x00 << (24));	// MODE, PB.6 Input Mode
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x01 << (26));	// CNF,  PB.6 Floating input
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80010de:	601a      	str	r2, [r3, #0]

	//-- D7 PB.7
	//
	REG_GPIOB_CRL &= ~(0x0F << (28));	// Clear
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80010e6:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x00 << (28));	// MODE, PB.7 Input Mode
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x01 << (30));	// CNF,  PB.7 Floating input
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop

080010f8 <Hw_VBus_SetAddress>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_VBus_SetAddress( u32 Address )
{
	if( Address & (1<<0) )	SET_BIT( REG_GPIOA_ODR, 13 );
 80010f8:	f640 030c 	movw	r3, #2060	; 0x80c
 80010fc:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	07c1      	lsls	r1, r0, #31
 8001104:	bf4c      	ite	mi
 8001106:	f442 5200 	orrmi.w	r2, r2, #8192	; 0x2000
	else					CLR_BIT( REG_GPIOA_ODR, 13 );
 800110a:	f422 5200 	bicpl.w	r2, r2, #8192	; 0x2000
 800110e:	601a      	str	r2, [r3, #0]

	if( Address & (1<<1) )	SET_BIT( REG_GPIOA_ODR, 14 );
 8001110:	f640 030c 	movw	r3, #2060	; 0x80c
 8001114:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	0781      	lsls	r1, r0, #30
 800111c:	bf4c      	ite	mi
 800111e:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
	else					CLR_BIT( REG_GPIOA_ODR, 14 );
 8001122:	f422 4280 	bicpl.w	r2, r2, #16384	; 0x4000
 8001126:	601a      	str	r2, [r3, #0]

	if( Address & (1<<2) )	SET_BIT( REG_GPIOA_ODR, 15 );
 8001128:	f640 030c 	movw	r3, #2060	; 0x80c
 800112c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	0741      	lsls	r1, r0, #29
 8001134:	bf4c      	ite	mi
 8001136:	f442 4200 	orrmi.w	r2, r2, #32768	; 0x8000
	else					CLR_BIT( REG_GPIOA_ODR, 15 );
 800113a:	f422 4200 	bicpl.w	r2, r2, #32768	; 0x8000
 800113e:	601a      	str	r2, [r3, #0]
	
	if( Address & (1<<3) )	SET_BIT( REG_GPIOC_ODR, 14 );
 8001140:	f241 030c 	movw	r3, #4108	; 0x100c
 8001144:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	0701      	lsls	r1, r0, #28
 800114c:	bf4c      	ite	mi
 800114e:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
	else					CLR_BIT( REG_GPIOC_ODR, 14 );
 8001152:	f422 4280 	bicpl.w	r2, r2, #16384	; 0x4000
 8001156:	601a      	str	r2, [r3, #0]

	if( Address & (1<<4) )	SET_BIT( REG_GPIOC_ODR, 15 );
 8001158:	f241 030c 	movw	r3, #4108	; 0x100c
 800115c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	06c1      	lsls	r1, r0, #27
 8001164:	bf4c      	ite	mi
 8001166:	f442 4200 	orrmi.w	r2, r2, #32768	; 0x8000
	else					CLR_BIT( REG_GPIOC_ODR, 15 );
 800116a:	f422 4200 	bicpl.w	r2, r2, #32768	; 0x8000
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop

08001174 <Hw_VBus_SetIdle>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_VBus_SetIdle( void )
{
 8001174:	b508      	push	{r3, lr}
	SET_BIT( REG_GPIOC_ODR, 14 );
 8001176:	f241 030c 	movw	r3, #4108	; 0x100c
 800117a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800117e:	6819      	ldr	r1, [r3, #0]
---------------------------------------------------------------------------*/
void Hw_VBus_SetData( u8 Data  )
{
	u32 RegData;
	
	RegData  = REG_GPIOB_ODR;
 8001180:	f640 420c 	movw	r2, #3084	; 0xc0c
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_VBus_SetIdle( void )
{
	SET_BIT( REG_GPIOC_ODR, 14 );
 8001184:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8001188:	6019      	str	r1, [r3, #0]
	SET_BIT( REG_GPIOC_ODR, 15 );	
 800118a:	6819      	ldr	r1, [r3, #0]
---------------------------------------------------------------------------*/
void Hw_VBus_SetData( u8 Data  )
{
	u32 RegData;
	
	RegData  = REG_GPIOB_ODR;
 800118c:	f2c4 0201 	movt	r2, #16385	; 0x4001
     RET     : void
---------------------------------------------------------------------------*/
void Hw_VBus_SetIdle( void )
{
	SET_BIT( REG_GPIOC_ODR, 14 );
	SET_BIT( REG_GPIOC_ODR, 15 );	
 8001190:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8001194:	6019      	str	r1, [r3, #0]
	
	#if HW_VBUS_BUG_FIX_FND == 1

	Hw_VBus_SetData(Hw_VBus_AddrTbl[ HW_VBUS_CS_FND_2 ].Data);
 8001196:	f240 7390 	movw	r3, #1936	; 0x790
---------------------------------------------------------------------------*/
void Hw_VBus_SetData( u8 Data  )
{
	u32 RegData;
	
	RegData  = REG_GPIOB_ODR;
 800119a:	6811      	ldr	r1, [r2, #0]
	SET_BIT( REG_GPIOC_ODR, 14 );
	SET_BIT( REG_GPIOC_ODR, 15 );	
	
	#if HW_VBUS_BUG_FIX_FND == 1

	Hw_VBus_SetData(Hw_VBus_AddrTbl[ HW_VBUS_CS_FND_2 ].Data);
 800119c:	f2c2 0300 	movt	r3, #8192	; 0x2000
{
	u32 RegData;
	
	RegData  = REG_GPIOB_ODR;
	RegData &= ~(0xFF);
	RegData |= Data;
 80011a0:	7e5b      	ldrb	r3, [r3, #25]
void Hw_VBus_SetData( u8 Data  )
{
	u32 RegData;
	
	RegData  = REG_GPIOB_ODR;
	RegData &= ~(0xFF);
 80011a2:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
	RegData |= Data;
 80011a6:	4319      	orrs	r1, r3
	SET_BIT( REG_GPIOC_ODR, 15 );	
	
	#if HW_VBUS_BUG_FIX_FND == 1

	Hw_VBus_SetData(Hw_VBus_AddrTbl[ HW_VBUS_CS_FND_2 ].Data);
	Hw_VBus_SetAddress( HW_VBUS_CS_FND_2 );
 80011a8:	f241 03f9 	movw	r3, #4345	; 0x10f9
	
	RegData  = REG_GPIOB_ODR;
	RegData &= ~(0xFF);
	RegData |= Data;
	
	REG_GPIOB_ODR = RegData; 
 80011ac:	6011      	str	r1, [r2, #0]
	SET_BIT( REG_GPIOC_ODR, 15 );	
	
	#if HW_VBUS_BUG_FIX_FND == 1

	Hw_VBus_SetData(Hw_VBus_AddrTbl[ HW_VBUS_CS_FND_2 ].Data);
	Hw_VBus_SetAddress( HW_VBUS_CS_FND_2 );
 80011ae:	200c      	movs	r0, #12
 80011b0:	f6c0 0300 	movt	r3, #2048	; 0x800
 80011b4:	4798      	blx	r3
 80011b6:	bd08      	pop	{r3, pc}

080011b8 <Hw_VBus_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_VBus_Init( void )
{
 80011b8:	b510      	push	{r4, lr}
 80011ba:	2300      	movs	r3, #0
 80011bc:	4c35      	ldr	r4, [pc, #212]	; (8001294 <Hw_VBus_Init+0xdc>)
	u32 i;
	
	for( i=0; i<256; i++ )
	{
		Hw_VBus_AddrTbl[i].Dir = HW_VBUS_PORT_DIR_OUT;
 80011be:	4618      	mov	r0, r3
 80011c0:	5518      	strb	r0, [r3, r4]
 80011c2:	3302      	adds	r3, #2
 80011c4:	2100      	movs	r1, #0
---------------------------------------------------------------------------*/
void Hw_VBus_Init( void )
{
	u32 i;
	
	for( i=0; i<256; i++ )
 80011c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
	{
		Hw_VBus_AddrTbl[i].Dir = HW_VBUS_PORT_DIR_OUT;
 80011ca:	4a32      	ldr	r2, [pc, #200]	; (8001294 <Hw_VBus_Init+0xdc>)
---------------------------------------------------------------------------*/
void Hw_VBus_Init( void )
{
	u32 i;
	
	for( i=0; i<256; i++ )
 80011cc:	d1f8      	bne.n	80011c0 <Hw_VBus_Init+0x8>
	

	Hw_VBus_AddrTbl[ HW_VBUS_CS_FND_0 ].Dir = HW_VBUS_PORT_DIR_OUT;
	Hw_VBus_AddrTbl[ HW_VBUS_CS_FND_2 ].Dir = HW_VBUS_PORT_DIR_OUT;
	Hw_VBus_AddrTbl[ HW_VBUS_CS_LCD   ].Dir = HW_VBUS_PORT_DIR_OUT;
	Hw_VBus_AddrTbl[ HW_VBUS_CS_KEY   ].Dir = HW_VBUS_PORT_DIR_IN;
 80011ce:	2001      	movs	r0, #1
	
	
	
	//-- JTAG 핀을 Disable하고 PB3,4를 GPIO로 사용한다.(핀구성에 따라 사용하지 않을수 있음)
	//
	REG_AFIO_MAPR &= ~(0x07 << 24);
 80011d0:	2304      	movs	r3, #4
		Hw_VBus_AddrTbl[i].Dir = HW_VBUS_PORT_DIR_OUT;
	}
	
	

	Hw_VBus_AddrTbl[ HW_VBUS_CS_FND_0 ].Dir = HW_VBUS_PORT_DIR_OUT;
 80011d2:	7511      	strb	r1, [r2, #20]
	Hw_VBus_AddrTbl[ HW_VBUS_CS_FND_2 ].Dir = HW_VBUS_PORT_DIR_OUT;
 80011d4:	7611      	strb	r1, [r2, #24]
	Hw_VBus_AddrTbl[ HW_VBUS_CS_LCD   ].Dir = HW_VBUS_PORT_DIR_OUT;
 80011d6:	f882 1020 	strb.w	r1, [r2, #32]
	Hw_VBus_AddrTbl[ HW_VBUS_CS_KEY   ].Dir = HW_VBUS_PORT_DIR_IN;
 80011da:	f882 0022 	strb.w	r0, [r2, #34]	; 0x22
	Hw_VBus_AddrTbl[ HW_VBUS_CS_LED_1 ].Dir = HW_VBUS_PORT_DIR_OUT;
 80011de:	f882 1024 	strb.w	r1, [r2, #36]	; 0x24
	Hw_VBus_AddrTbl[ HW_VBUS_CS_LED_2 ].Dir = HW_VBUS_PORT_DIR_OUT;
 80011e2:	f882 1026 	strb.w	r1, [r2, #38]	; 0x26
	Hw_VBus_AddrTbl[ HW_VBUS_CS_BUSIO ].Dir = HW_VBUS_PORT_DIR_OUT;
 80011e6:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
	
	Hw_VBus_AddrTbl[ HW_VBUS_CS_FND_0 ].Data = 0;
 80011ea:	7551      	strb	r1, [r2, #21]
	Hw_VBus_AddrTbl[ HW_VBUS_CS_FND_2 ].Data = 0;
 80011ec:	7651      	strb	r1, [r2, #25]
	Hw_VBus_AddrTbl[ HW_VBUS_CS_LCD   ].Data = 0;
 80011ee:	f882 1021 	strb.w	r1, [r2, #33]	; 0x21
	Hw_VBus_AddrTbl[ HW_VBUS_CS_KEY   ].Data = 0;
 80011f2:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
	Hw_VBus_AddrTbl[ HW_VBUS_CS_LED_1 ].Data = 0;
 80011f6:	f882 1025 	strb.w	r1, [r2, #37]	; 0x25
	Hw_VBus_AddrTbl[ HW_VBUS_CS_LED_2 ].Data = 0;
 80011fa:	f882 1027 	strb.w	r1, [r2, #39]	; 0x27
	Hw_VBus_AddrTbl[ HW_VBUS_CS_BUSIO ].Data = 0;	
 80011fe:	f882 1029 	strb.w	r1, [r2, #41]	; 0x29
	
	
	
	//-- JTAG 핀을 Disable하고 PB3,4를 GPIO로 사용한다.(핀구성에 따라 사용하지 않을수 있음)
	//
	REG_AFIO_MAPR &= ~(0x07 << 24);
 8001202:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 800120c:	601a      	str	r2, [r3, #0]
	REG_AFIO_MAPR |=  (0x04 << 24);
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001214:	601a      	str	r2, [r3, #0]
	
	
	//-- 데이터 버스 기본으로 출력으로 설정
	//
	Hw_VBus_SetDataPortOutput();
 8001216:	4b20      	ldr	r3, [pc, #128]	; (8001298 <Hw_VBus_Init+0xe0>)
 8001218:	4798      	blx	r3
	
	
	//-- A0 PA.13
	//
	REG_GPIOA_CRH &= ~(0x0F << (20));	// Clear
 800121a:	f640 0304 	movw	r3, #2052	; 0x804
 800121e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001222:	6819      	ldr	r1, [r3, #0]
	REG_GPIOA_CRH |=  (0x03 << (28));	// MODE, PA.15 Output mode, max speed 50Mhz
	REG_GPIOA_CRH |=  (0x00 << (30));	// CNF,  PA.15 General purpose output push-pul			

	//-- A3 PC.14
	//
	REG_GPIOC_CRH &= ~(0x0F << (24));	// Clear
 8001224:	f241 0204 	movw	r2, #4100	; 0x1004
	Hw_VBus_SetDataPortOutput();
	
	
	//-- A0 PA.13
	//
	REG_GPIOA_CRH &= ~(0x0F << (20));	// Clear
 8001228:	f421 0170 	bic.w	r1, r1, #15728640	; 0xf00000
 800122c:	6019      	str	r1, [r3, #0]
	REG_GPIOA_CRH |=  (0x03 << (20));	// MODE, PA.13 Output mode, max speed 50Mhz
 800122e:	6819      	ldr	r1, [r3, #0]
	REG_GPIOA_CRH |=  (0x03 << (28));	// MODE, PA.15 Output mode, max speed 50Mhz
	REG_GPIOA_CRH |=  (0x00 << (30));	// CNF,  PA.15 General purpose output push-pul			

	//-- A3 PC.14
	//
	REG_GPIOC_CRH &= ~(0x0F << (24));	// Clear
 8001230:	f2c4 0201 	movt	r2, #16385	; 0x4001
	
	
	//-- A0 PA.13
	//
	REG_GPIOA_CRH &= ~(0x0F << (20));	// Clear
	REG_GPIOA_CRH |=  (0x03 << (20));	// MODE, PA.13 Output mode, max speed 50Mhz
 8001234:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8001238:	6019      	str	r1, [r3, #0]
	REG_GPIOA_CRH |=  (0x00 << (22));	// CNF,  PA.13 General purpose output push-pul			
 800123a:	6819      	ldr	r1, [r3, #0]
 800123c:	6019      	str	r1, [r3, #0]
	

	//-- A1 PA.14
	//
	REG_GPIOA_CRH &= ~(0x0F << (24));	// Clear
 800123e:	6819      	ldr	r1, [r3, #0]
 8001240:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8001244:	6019      	str	r1, [r3, #0]
	REG_GPIOA_CRH |=  (0x03 << (24));	// MODE, PA.14 Output mode, max speed 50Mhz
 8001246:	6819      	ldr	r1, [r3, #0]
 8001248:	f041 7140 	orr.w	r1, r1, #50331648	; 0x3000000
 800124c:	6019      	str	r1, [r3, #0]
	REG_GPIOA_CRH |=  (0x00 << (26));	// CNF,  PA.14 General purpose output push-pul			
 800124e:	6819      	ldr	r1, [r3, #0]
 8001250:	6019      	str	r1, [r3, #0]

	//-- A2 PA.15
	//
	REG_GPIOA_CRH &= ~(0x0F << (28));	// Clear
 8001252:	6819      	ldr	r1, [r3, #0]
 8001254:	f021 4170 	bic.w	r1, r1, #4026531840	; 0xf0000000
 8001258:	6019      	str	r1, [r3, #0]
	REG_GPIOA_CRH |=  (0x03 << (28));	// MODE, PA.15 Output mode, max speed 50Mhz
 800125a:	6819      	ldr	r1, [r3, #0]
 800125c:	f041 5140 	orr.w	r1, r1, #805306368	; 0x30000000
 8001260:	6019      	str	r1, [r3, #0]
	REG_GPIOA_CRH |=  (0x00 << (30));	// CNF,  PA.15 General purpose output push-pul			
 8001262:	6819      	ldr	r1, [r3, #0]
 8001264:	6019      	str	r1, [r3, #0]

	//-- A3 PC.14
	//
	REG_GPIOC_CRH &= ~(0x0F << (24));	// Clear
 8001266:	6813      	ldr	r3, [r2, #0]
 8001268:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800126c:	6013      	str	r3, [r2, #0]
	REG_GPIOC_CRH |=  (0x03 << (24));	// MODE, PC.14 Output mode, max speed 50Mhz
 800126e:	6813      	ldr	r3, [r2, #0]
 8001270:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 8001274:	6013      	str	r3, [r2, #0]
	REG_GPIOC_CRH |=  (0x00 << (26));	// CNF,  PC.14 General purpose output push-pul			
 8001276:	6813      	ldr	r3, [r2, #0]
 8001278:	6013      	str	r3, [r2, #0]

	//-- A4 PC.15
	//
	REG_GPIOC_CRH &= ~(0x0F << (28));	// Clear
 800127a:	6813      	ldr	r3, [r2, #0]
 800127c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001280:	6013      	str	r3, [r2, #0]
	REG_GPIOC_CRH |=  (0x03 << (28));	// MODE, PC.15 Output mode, max speed 50Mhz
 8001282:	6813      	ldr	r3, [r2, #0]
 8001284:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8001288:	6013      	str	r3, [r2, #0]
	REG_GPIOC_CRH |=  (0x00 << (30));	// CNF,  PC.15 General purpose output push-pul		
 800128a:	6813      	ldr	r3, [r2, #0]
 800128c:	6013      	str	r3, [r2, #0]
	
	
	//-- 버스 상태를 Idle상태로 만든다.
	//
	Hw_VBus_SetIdle();
 800128e:	4b03      	ldr	r3, [pc, #12]	; (800129c <Hw_VBus_Init+0xe4>)
 8001290:	4798      	blx	r3
 8001292:	bd10      	pop	{r4, pc}
 8001294:	20000790 	.word	0x20000790
 8001298:	08000fa1 	.word	0x08000fa1
 800129c:	08001175 	.word	0x08001175

080012a0 <Hw_VBus_WriteData>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_VBus_WriteData( u32 Address, u8 ByteData )
{
 80012a0:	b510      	push	{r4, lr}
	u8 Dir;
	
	Dir = Hw_VBus_AddrTbl[ Address ].Dir;
 80012a2:	4b12      	ldr	r3, [pc, #72]	; (80012ec <Hw_VBus_WriteData+0x4c>)
 80012a4:	f813 4010 	ldrb.w	r4, [r3, r0, lsl #1]
	
	Hw_VBus_AddrTbl[ Address ].Data = ByteData;
 80012a8:	eb03 0340 	add.w	r3, r3, r0, lsl #1
	
	if( Dir == HW_VBUS_PORT_DIR_OUT || Dir == HW_VBUS_PORT_DIR_INOUT )
 80012ac:	f014 0ffd 	tst.w	r4, #253	; 0xfd
{
	u8 Dir;
	
	Dir = Hw_VBus_AddrTbl[ Address ].Dir;
	
	Hw_VBus_AddrTbl[ Address ].Data = ByteData;
 80012b0:	7059      	strb	r1, [r3, #1]
	
	if( Dir == HW_VBUS_PORT_DIR_OUT || Dir == HW_VBUS_PORT_DIR_INOUT )
 80012b2:	d11a      	bne.n	80012ea <Hw_VBus_WriteData+0x4a>
	{ 
		Disable_ISR();
 80012b4:	b672      	cpsid	i
		
		#if HW_VBUS_BUG_FIX_FND == 1
		SET_BIT( REG_GPIOC_ODR, 14 );
 80012b6:	f241 030c 	movw	r3, #4108	; 0x100c
 80012ba:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80012be:	681c      	ldr	r4, [r3, #0]
---------------------------------------------------------------------------*/
void Hw_VBus_SetData( u8 Data  )
{
	u32 RegData;
	
	RegData  = REG_GPIOB_ODR;
 80012c0:	f640 420c 	movw	r2, #3084	; 0xc0c
	if( Dir == HW_VBUS_PORT_DIR_OUT || Dir == HW_VBUS_PORT_DIR_INOUT )
	{ 
		Disable_ISR();
		
		#if HW_VBUS_BUG_FIX_FND == 1
		SET_BIT( REG_GPIOC_ODR, 14 );
 80012c4:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 80012c8:	601c      	str	r4, [r3, #0]
		SET_BIT( REG_GPIOC_ODR, 15 );	
 80012ca:	681c      	ldr	r4, [r3, #0]
---------------------------------------------------------------------------*/
void Hw_VBus_SetData( u8 Data  )
{
	u32 RegData;
	
	RegData  = REG_GPIOB_ODR;
 80012cc:	f2c4 0201 	movt	r2, #16385	; 0x4001
	{ 
		Disable_ISR();
		
		#if HW_VBUS_BUG_FIX_FND == 1
		SET_BIT( REG_GPIOC_ODR, 14 );
		SET_BIT( REG_GPIOC_ODR, 15 );	
 80012d0:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 80012d4:	601c      	str	r4, [r3, #0]
---------------------------------------------------------------------------*/
void Hw_VBus_SetData( u8 Data  )
{
	u32 RegData;
	
	RegData  = REG_GPIOB_ODR;
 80012d6:	6813      	ldr	r3, [r2, #0]
	RegData &= ~(0xFF);
 80012d8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
	RegData |= Data;
 80012dc:	4319      	orrs	r1, r3
	
	REG_GPIOB_ODR = RegData; 
 80012de:	6011      	str	r1, [r2, #0]
		SET_BIT( REG_GPIOC_ODR, 14 );
		SET_BIT( REG_GPIOC_ODR, 15 );	
		#endif
		
		Hw_VBus_SetData   ( ByteData );
		Hw_VBus_SetAddress( Address  );
 80012e0:	4b03      	ldr	r3, [pc, #12]	; (80012f0 <Hw_VBus_WriteData+0x50>)
 80012e2:	4798      	blx	r3
		Hw_VBus_SetIdle();		
 80012e4:	4b03      	ldr	r3, [pc, #12]	; (80012f4 <Hw_VBus_WriteData+0x54>)
 80012e6:	4798      	blx	r3
		Enable_ISR();		
 80012e8:	b662      	cpsie	i
 80012ea:	bd10      	pop	{r4, pc}
 80012ec:	20000790 	.word	0x20000790
 80012f0:	080010f9 	.word	0x080010f9
 80012f4:	08001175 	.word	0x08001175

080012f8 <Hw_VBus_ReadData>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_VBus_ReadData( u32 Address )
{
 80012f8:	b500      	push	{lr}
	u8 Ret = 0;
	u8 Dir;
	
	Dir = Hw_VBus_AddrTbl[ Address ].Dir;
 80012fa:	4b17      	ldr	r3, [pc, #92]	; (8001358 <Hw_VBus_ReadData+0x60>)
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_VBus_ReadData( u32 Address )
{
 80012fc:	b083      	sub	sp, #12
	u8 Ret = 0;
	u8 Dir;
	
	Dir = Hw_VBus_AddrTbl[ Address ].Dir;
	
	if( Dir == HW_VBUS_PORT_DIR_IN || Dir == HW_VBUS_PORT_DIR_INOUT )
 80012fe:	f813 2010 	ldrb.w	r2, [r3, r0, lsl #1]
 8001302:	3a01      	subs	r2, #1
 8001304:	2a01      	cmp	r2, #1
	
		Enable_ISR();
	}
	else
	{
		Ret = Hw_VBus_AddrTbl[ Address ].Data;
 8001306:	bf84      	itt	hi
 8001308:	eb03 0040 	addhi.w	r0, r3, r0, lsl #1
 800130c:	7840      	ldrbhi	r0, [r0, #1]
	u8 Ret = 0;
	u8 Dir;
	
	Dir = Hw_VBus_AddrTbl[ Address ].Dir;
	
	if( Dir == HW_VBUS_PORT_DIR_IN || Dir == HW_VBUS_PORT_DIR_INOUT )
 800130e:	d901      	bls.n	8001314 <Hw_VBus_ReadData+0x1c>
	{
		Ret = Hw_VBus_AddrTbl[ Address ].Data;
	}
		
	return Ret;	
}
 8001310:	b003      	add	sp, #12
 8001312:	bd00      	pop	{pc}
	
	Dir = Hw_VBus_AddrTbl[ Address ].Dir;
	
	if( Dir == HW_VBUS_PORT_DIR_IN || Dir == HW_VBUS_PORT_DIR_INOUT )
	{
		Disable_ISR();
 8001314:	b672      	cpsid	i
		
		#if HW_VBUS_BUG_FIX_FND == 1
		SET_BIT( REG_GPIOC_ODR, 14 );
 8001316:	f241 030c 	movw	r3, #4108	; 0x100c
 800131a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001324:	601a      	str	r2, [r3, #0]
		SET_BIT( REG_GPIOC_ODR, 15 );
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800132c:	601a      	str	r2, [r3, #0]
		#endif
					
		Hw_VBus_SetDataPortInput();
 800132e:	9001      	str	r0, [sp, #4]
 8001330:	4b0a      	ldr	r3, [pc, #40]	; (800135c <Hw_VBus_ReadData+0x64>)
 8001332:	4798      	blx	r3
		Hw_VBus_SetAddress( Address  );
 8001334:	9801      	ldr	r0, [sp, #4]
 8001336:	4b0a      	ldr	r3, [pc, #40]	; (8001360 <Hw_VBus_ReadData+0x68>)
 8001338:	4798      	blx	r3
---------------------------------------------------------------------------*/
u8 Hw_VBus_GetData( void  )
{
	u8 Data;
		
	Data = (u8)REG_GPIOB_IDR;
 800133a:	f640 4308 	movw	r3, #3080	; 0xc08
 800133e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001342:	6818      	ldr	r0, [r3, #0]
		Hw_VBus_SetDataPortInput();
		Hw_VBus_SetAddress( Address  );
		
		Ret = Hw_VBus_GetData();
	
		Hw_VBus_SetIdle();
 8001344:	4b07      	ldr	r3, [pc, #28]	; (8001364 <Hw_VBus_ReadData+0x6c>)
---------------------------------------------------------------------------*/
u8 Hw_VBus_GetData( void  )
{
	u8 Data;
		
	Data = (u8)REG_GPIOB_IDR;
 8001346:	b2c0      	uxtb	r0, r0
		Hw_VBus_SetDataPortInput();
		Hw_VBus_SetAddress( Address  );
		
		Ret = Hw_VBus_GetData();
	
		Hw_VBus_SetIdle();
 8001348:	9001      	str	r0, [sp, #4]
 800134a:	4798      	blx	r3
		
		Hw_VBus_SetDataPortOutput();
 800134c:	4b06      	ldr	r3, [pc, #24]	; (8001368 <Hw_VBus_ReadData+0x70>)
 800134e:	4798      	blx	r3
	
		Enable_ISR();
 8001350:	b662      	cpsie	i
 8001352:	9801      	ldr	r0, [sp, #4]
 8001354:	e7dc      	b.n	8001310 <Hw_VBus_ReadData+0x18>
 8001356:	bf00      	nop
 8001358:	20000790 	.word	0x20000790
 800135c:	0800104d 	.word	0x0800104d
 8001360:	080010f9 	.word	0x080010f9
 8001364:	08001175 	.word	0x08001175
 8001368:	08000fa1 	.word	0x08000fa1

0800136c <Hw_VBus_SetBit>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_VBus_SetBit( u32 Address, u8 BitNum )
{
 800136c:	b538      	push	{r3, r4, r5, lr}
	u8 Data;
	
	Data = Hw_VBus_ReadData( Address );
 800136e:	f241 23f9 	movw	r3, #4857	; 0x12f9
 8001372:	f6c0 0300 	movt	r3, #2048	; 0x800
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_VBus_SetBit( u32 Address, u8 BitNum )
{
 8001376:	460d      	mov	r5, r1
 8001378:	4604      	mov	r4, r0
	u8 Data;
	
	Data = Hw_VBus_ReadData( Address );
 800137a:	4798      	blx	r3
	
	SET_BIT( Data, BitNum );
 800137c:	2301      	movs	r3, #1
 800137e:	fa03 f505 	lsl.w	r5, r3, r5
	
	Hw_VBus_WriteData( Address, Data );
 8001382:	f241 23a1 	movw	r3, #4769	; 0x12a1
{
	u8 Data;
	
	Data = Hw_VBus_ReadData( Address );
	
	SET_BIT( Data, BitNum );
 8001386:	ea40 0105 	orr.w	r1, r0, r5
	
	Hw_VBus_WriteData( Address, Data );
 800138a:	b2c9      	uxtb	r1, r1
 800138c:	4620      	mov	r0, r4
 800138e:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001392:	4798      	blx	r3
 8001394:	bd38      	pop	{r3, r4, r5, pc}
 8001396:	bf00      	nop

08001398 <Hw_VBus_ClrBit>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_VBus_ClrBit( u32 Address, u8 BitNum )
{
 8001398:	b538      	push	{r3, r4, r5, lr}
	u8 Data;
	
	Data = Hw_VBus_ReadData( Address );
 800139a:	f241 23f9 	movw	r3, #4857	; 0x12f9
 800139e:	f6c0 0300 	movt	r3, #2048	; 0x800
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_VBus_ClrBit( u32 Address, u8 BitNum )
{
 80013a2:	460d      	mov	r5, r1
 80013a4:	4604      	mov	r4, r0
	u8 Data;
	
	Data = Hw_VBus_ReadData( Address );
 80013a6:	4798      	blx	r3
	
	CLR_BIT( Data, BitNum );
 80013a8:	2301      	movs	r3, #1
 80013aa:	fa03 f505 	lsl.w	r5, r3, r5
	
	Hw_VBus_WriteData( Address, Data );
 80013ae:	f241 23a1 	movw	r3, #4769	; 0x12a1
{
	u8 Data;
	
	Data = Hw_VBus_ReadData( Address );
	
	CLR_BIT( Data, BitNum );
 80013b2:	ea20 0105 	bic.w	r1, r0, r5
	
	Hw_VBus_WriteData( Address, Data );
 80013b6:	b2c9      	uxtb	r1, r1
 80013b8:	4620      	mov	r0, r4
 80013ba:	f6c0 0300 	movt	r3, #2048	; 0x800
 80013be:	4798      	blx	r3
 80013c0:	bd38      	pop	{r3, r4, r5, pc}
 80013c2:	bf00      	nop

080013c4 <Hw_VBus_TglBit>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_VBus_TglBit( u32 Address, u8 BitNum )
{
 80013c4:	b538      	push	{r3, r4, r5, lr}
	u8 Data;
	
	Data = Hw_VBus_ReadData( Address );
 80013c6:	f241 23f9 	movw	r3, #4857	; 0x12f9
 80013ca:	f6c0 0300 	movt	r3, #2048	; 0x800
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_VBus_TglBit( u32 Address, u8 BitNum )
{
 80013ce:	460d      	mov	r5, r1
 80013d0:	4604      	mov	r4, r0
	u8 Data;
	
	Data = Hw_VBus_ReadData( Address );
 80013d2:	4798      	blx	r3
	
	TGL_BIT( Data, BitNum );
 80013d4:	2301      	movs	r3, #1
 80013d6:	fa03 f505 	lsl.w	r5, r3, r5
	
	Hw_VBus_WriteData( Address, Data );
 80013da:	f241 23a1 	movw	r3, #4769	; 0x12a1
{
	u8 Data;
	
	Data = Hw_VBus_ReadData( Address );
	
	TGL_BIT( Data, BitNum );
 80013de:	ea80 0105 	eor.w	r1, r0, r5
	
	Hw_VBus_WriteData( Address, Data );
 80013e2:	b2c9      	uxtb	r1, r1
 80013e4:	4620      	mov	r0, r4
 80013e6:	f6c0 0300 	movt	r3, #2048	; 0x800
 80013ea:	4798      	blx	r3
 80013ec:	bd38      	pop	{r3, r4, r5, pc}
 80013ee:	bf00      	nop

080013f0 <Hw_KeyPad_StateTick>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_KeyPad_StateTick( HW_KEYPAD_LOG *pKey, u8 KeyData, u8 KeyNum  )
{
 80013f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u8  Value = 0;
	
	switch( pKey->State )
 80013f4:	6803      	ldr	r3, [r0, #0]
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_KeyPad_StateTick( HW_KEYPAD_LOG *pKey, u8 KeyData, u8 KeyNum  )
{
 80013f6:	b082      	sub	sp, #8
	u8  Value = 0;
	
	switch( pKey->State )
 80013f8:	2b04      	cmp	r3, #4
 80013fa:	d804      	bhi.n	8001406 <Hw_KeyPad_StateTick+0x16>
 80013fc:	e8df f003 	tbb	[pc, r3]
 8001400:	5e4f271f 	.word	0x5e4f271f
 8001404:	07          	.byte	0x07
 8001405:	00          	.byte	0x00
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_KeyPad_StateTick( HW_KEYPAD_LOG *pKey, u8 KeyData, u8 KeyNum  )
{
	u8  Value = 0;
 8001406:	2000      	movs	r0, #0

			break;
	}

	return Value;
}
 8001408:	b002      	add	sp, #8
 800140a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			
		case HW_KEYPAD_STATE_RELEASING:
			pKey->State = HW_KEYPAD_STATE_IDLE;
			Value       = 0;			
			
			if( Hw_KeyPad_PressedCount > 0 )
 800140e:	4b4d      	ldr	r3, [pc, #308]	; (8001544 <Hw_KeyPad_StateTick+0x154>)
			
			break;

			
		case HW_KEYPAD_STATE_RELEASING:
			pKey->State = HW_KEYPAD_STATE_IDLE;
 8001410:	2400      	movs	r4, #0
			Value       = 0;			
			
			if( Hw_KeyPad_PressedCount > 0 )
 8001412:	6819      	ldr	r1, [r3, #0]
			
			break;

			
		case HW_KEYPAD_STATE_RELEASING:
			pKey->State = HW_KEYPAD_STATE_IDLE;
 8001414:	6004      	str	r4, [r0, #0]
			Value       = 0;			
			
			if( Hw_KeyPad_PressedCount > 0 )
 8001416:	b109      	cbz	r1, 800141c <Hw_KeyPad_StateTick+0x2c>
			{
				Hw_KeyPad_PressedCount--;
 8001418:	3901      	subs	r1, #1
 800141a:	6019      	str	r1, [r3, #0]
			}

			if( IS_CLR_BIT( Hw_KeyPad_EventFlag, HW_KEYPAD_EVENT_RELEASED ) )
 800141c:	4b4a      	ldr	r3, [pc, #296]	; (8001548 <Hw_KeyPad_StateTick+0x158>)
 800141e:	6819      	ldr	r1, [r3, #0]
 8001420:	f011 0f04 	tst.w	r1, #4
			{
				SET_BIT( Hw_KeyPad_EventFlag, HW_KEYPAD_EVENT_RELEASED );
 8001424:	bf01      	itttt	eq
 8001426:	f041 0104 	orreq.w	r1, r1, #4
 800142a:	6019      	streq	r1, [r3, #0]
				Hw_KeyPad_EventList[HW_KEYPAD_EVENT_RELEASED] = KeyNum;				
 800142c:	4b47      	ldreq	r3, [pc, #284]	; (800154c <Hw_KeyPad_StateTick+0x15c>)
 800142e:	609a      	streq	r2, [r3, #8]
			}
			
			if( pKey->EventFnct != NULL )
 8001430:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001432:	2b00      	cmp	r3, #0
 8001434:	d0e7      	beq.n	8001406 <Hw_KeyPad_StateTick+0x16>
			{
				(*pKey->EventFnct)(HW_KEYPAD_EVENT_RELEASED);
 8001436:	2002      	movs	r0, #2
 8001438:	4798      	blx	r3
			break;

			
		case HW_KEYPAD_STATE_RELEASING:
			pKey->State = HW_KEYPAD_STATE_IDLE;
			Value       = 0;			
 800143a:	2000      	movs	r0, #0
 800143c:	e7e4      	b.n	8001408 <Hw_KeyPad_StateTick+0x18>

		case HW_KEYPAD_STATE_IDLE:
		
			Value = 0;
					
			if( KeyData > 0 )
 800143e:	2900      	cmp	r1, #0
 8001440:	d0e1      	beq.n	8001406 <Hw_KeyPad_StateTick+0x16>
			{
				pKey->State   = HW_KEYPAD_STATE_PRESSING;
				pKey->Cnt_Dly = 0;
 8001442:	2300      	movs	r3, #0
		
			Value = 0;
					
			if( KeyData > 0 )
			{
				pKey->State   = HW_KEYPAD_STATE_PRESSING;
 8001444:	2201      	movs	r2, #1
 8001446:	6002      	str	r2, [r0, #0]
				pKey->Cnt_Dly = 0;
 8001448:	60c3      	str	r3, [r0, #12]
	switch( pKey->State )
	{

		case HW_KEYPAD_STATE_IDLE:
		
			Value = 0;
 800144a:	4618      	mov	r0, r3
 800144c:	e7dc      	b.n	8001408 <Hw_KeyPad_StateTick+0x18>

		case HW_KEYPAD_STATE_PRESSING:
			
			Value = 0;
			
			pKey->Cnt_Dly++;
 800144e:	68c3      	ldr	r3, [r0, #12]
			
			if( pKey->Cnt_Dly > pKey->Dly_Pressing )
 8001450:	69c4      	ldr	r4, [r0, #28]

		case HW_KEYPAD_STATE_PRESSING:
			
			Value = 0;
			
			pKey->Cnt_Dly++;
 8001452:	3301      	adds	r3, #1
			
			if( pKey->Cnt_Dly > pKey->Dly_Pressing )
 8001454:	42a3      	cmp	r3, r4

		case HW_KEYPAD_STATE_PRESSING:
			
			Value = 0;
			
			pKey->Cnt_Dly++;
 8001456:	60c3      	str	r3, [r0, #12]
			
			if( pKey->Cnt_Dly > pKey->Dly_Pressing )
 8001458:	d9d5      	bls.n	8001406 <Hw_KeyPad_StateTick+0x16>
			{
				pKey->State        = HW_KEYPAD_STATE_PRESSED;
				pKey->Cnt_Pressed  = 0;
				pKey->Cnt_Released = 0;
				Value              = KeyData;	
				Hw_KeyPad_PressedList[ Hw_KeyPad_PressedCount ] = KeyNum;
 800145a:	4c3a      	ldr	r4, [pc, #232]	; (8001544 <Hw_KeyPad_StateTick+0x154>)
				Hw_KeyPad_PressedCount++;
				
				if( IS_CLR_BIT( Hw_KeyPad_EventFlag, HW_KEYPAD_EVENT_PRESSED ) )
 800145c:	4e3a      	ldr	r6, [pc, #232]	; (8001548 <Hw_KeyPad_StateTick+0x158>)
			{
				pKey->State        = HW_KEYPAD_STATE_PRESSED;
				pKey->Cnt_Pressed  = 0;
				pKey->Cnt_Released = 0;
				Value              = KeyData;	
				Hw_KeyPad_PressedList[ Hw_KeyPad_PressedCount ] = KeyNum;
 800145e:	6823      	ldr	r3, [r4, #0]
			
			pKey->Cnt_Dly++;
			
			if( pKey->Cnt_Dly > pKey->Dly_Pressing )
			{
				pKey->State        = HW_KEYPAD_STATE_PRESSED;
 8001460:	f04f 0802 	mov.w	r8, #2
				pKey->Cnt_Pressed  = 0;
				pKey->Cnt_Released = 0;
				Value              = KeyData;	
				Hw_KeyPad_PressedList[ Hw_KeyPad_PressedCount ] = KeyNum;
				Hw_KeyPad_PressedCount++;
 8001464:	f103 0c01 	add.w	ip, r3, #1
				
				if( IS_CLR_BIT( Hw_KeyPad_EventFlag, HW_KEYPAD_EVENT_PRESSED ) )
 8001468:	6837      	ldr	r7, [r6, #0]
			
			pKey->Cnt_Dly++;
			
			if( pKey->Cnt_Dly > pKey->Dly_Pressing )
			{
				pKey->State        = HW_KEYPAD_STATE_PRESSED;
 800146a:	f8c0 8000 	str.w	r8, [r0]
				pKey->Cnt_Pressed  = 0;
				pKey->Cnt_Released = 0;
				Value              = KeyData;	
				Hw_KeyPad_PressedList[ Hw_KeyPad_PressedCount ] = KeyNum;
				Hw_KeyPad_PressedCount++;
 800146e:	f8c4 c000 	str.w	ip, [r4]
			{
				pKey->State        = HW_KEYPAD_STATE_PRESSED;
				pKey->Cnt_Pressed  = 0;
				pKey->Cnt_Released = 0;
				Value              = KeyData;	
				Hw_KeyPad_PressedList[ Hw_KeyPad_PressedCount ] = KeyNum;
 8001472:	4c37      	ldr	r4, [pc, #220]	; (8001550 <Hw_KeyPad_StateTick+0x160>)
			pKey->Cnt_Dly++;
			
			if( pKey->Cnt_Dly > pKey->Dly_Pressing )
			{
				pKey->State        = HW_KEYPAD_STATE_PRESSED;
				pKey->Cnt_Pressed  = 0;
 8001474:	2500      	movs	r5, #0
 8001476:	6105      	str	r5, [r0, #16]
				pKey->Cnt_Released = 0;
 8001478:	6145      	str	r5, [r0, #20]
				Value              = KeyData;	
				Hw_KeyPad_PressedList[ Hw_KeyPad_PressedCount ] = KeyNum;
 800147a:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
				Hw_KeyPad_PressedCount++;
				
				if( IS_CLR_BIT( Hw_KeyPad_EventFlag, HW_KEYPAD_EVENT_PRESSED ) )
 800147e:	07fb      	lsls	r3, r7, #31
				{
					SET_BIT( Hw_KeyPad_EventFlag, HW_KEYPAD_EVENT_PRESSED );
					Hw_KeyPad_EventList[HW_KEYPAD_EVENT_PRESSED] = KeyNum;
 8001480:	bf5e      	ittt	pl
 8001482:	4b32      	ldrpl	r3, [pc, #200]	; (800154c <Hw_KeyPad_StateTick+0x15c>)
				Hw_KeyPad_PressedList[ Hw_KeyPad_PressedCount ] = KeyNum;
				Hw_KeyPad_PressedCount++;
				
				if( IS_CLR_BIT( Hw_KeyPad_EventFlag, HW_KEYPAD_EVENT_PRESSED ) )
				{
					SET_BIT( Hw_KeyPad_EventFlag, HW_KEYPAD_EVENT_PRESSED );
 8001484:	f047 0701 	orrpl.w	r7, r7, #1
					Hw_KeyPad_EventList[HW_KEYPAD_EVENT_PRESSED] = KeyNum;
 8001488:	601a      	strpl	r2, [r3, #0]
				}
				
				if( pKey->EventFnct != NULL )
 800148a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
				Hw_KeyPad_PressedList[ Hw_KeyPad_PressedCount ] = KeyNum;
				Hw_KeyPad_PressedCount++;
				
				if( IS_CLR_BIT( Hw_KeyPad_EventFlag, HW_KEYPAD_EVENT_PRESSED ) )
				{
					SET_BIT( Hw_KeyPad_EventFlag, HW_KEYPAD_EVENT_PRESSED );
 800148c:	bf58      	it	pl
 800148e:	6037      	strpl	r7, [r6, #0]
					Hw_KeyPad_EventList[HW_KEYPAD_EVENT_PRESSED] = KeyNum;
				}
				
				if( pKey->EventFnct != NULL )
 8001490:	b30b      	cbz	r3, 80014d6 <Hw_KeyPad_StateTick+0xe6>
				{
					(*pKey->EventFnct)(HW_KEYPAD_EVENT_PRESSED);
 8001492:	2000      	movs	r0, #0
 8001494:	9101      	str	r1, [sp, #4]
 8001496:	4798      	blx	r3
 8001498:	9901      	ldr	r1, [sp, #4]
 800149a:	4608      	mov	r0, r1
 800149c:	e7b4      	b.n	8001408 <Hw_KeyPad_StateTick+0x18>

		case HW_KEYPAD_STATE_PRESSED:
			
			Value = KeyData;

			pKey->Cnt_Pressed++;
 800149e:	6903      	ldr	r3, [r0, #16]
 80014a0:	3301      	adds	r3, #1
 80014a2:	6103      	str	r3, [r0, #16]
			
			if( KeyData == 0 )	pKey->Cnt_Released++;
 80014a4:	2900      	cmp	r1, #0
 80014a6:	d136      	bne.n	8001516 <Hw_KeyPad_StateTick+0x126>
 80014a8:	6944      	ldr	r4, [r0, #20]
			else			    pKey->Cnt_Released = 0;			

			if( pKey->Cnt_Released > pKey->Dly_Releasing )
 80014aa:	6a05      	ldr	r5, [r0, #32]
			
			Value = KeyData;

			pKey->Cnt_Pressed++;
			
			if( KeyData == 0 )	pKey->Cnt_Released++;
 80014ac:	3401      	adds	r4, #1
			else			    pKey->Cnt_Released = 0;			

			if( pKey->Cnt_Released > pKey->Dly_Releasing )
 80014ae:	42ac      	cmp	r4, r5
			
			Value = KeyData;

			pKey->Cnt_Pressed++;
			
			if( KeyData == 0 )	pKey->Cnt_Released++;
 80014b0:	6144      	str	r4, [r0, #20]
			else			    pKey->Cnt_Released = 0;			

			if( pKey->Cnt_Released > pKey->Dly_Releasing )
 80014b2:	d932      	bls.n	800151a <Hw_KeyPad_StateTick+0x12a>
			{
				pKey->State = HW_KEYPAD_STATE_RELEASING;
 80014b4:	2304      	movs	r3, #4
 80014b6:	6003      	str	r3, [r0, #0]
				Value       = 0;
 80014b8:	4608      	mov	r0, r1
 80014ba:	e7a5      	b.n	8001408 <Hw_KeyPad_StateTick+0x18>

		case HW_KEYPAD_STATE_REPEAT:

			Value = KeyData;

			pKey->Cnt_Pressed++;
 80014bc:	6903      	ldr	r3, [r0, #16]
 80014be:	3301      	adds	r3, #1
 80014c0:	6103      	str	r3, [r0, #16]
			
			if( KeyData == 0 )	pKey->Cnt_Released++;
 80014c2:	b951      	cbnz	r1, 80014da <Hw_KeyPad_StateTick+0xea>
 80014c4:	6944      	ldr	r4, [r0, #20]
			else			    pKey->Cnt_Released = 0;			

			if( pKey->Cnt_Released > pKey->Dly_Releasing )
 80014c6:	6a05      	ldr	r5, [r0, #32]

			Value = KeyData;

			pKey->Cnt_Pressed++;
			
			if( KeyData == 0 )	pKey->Cnt_Released++;
 80014c8:	3401      	adds	r4, #1
			else			    pKey->Cnt_Released = 0;			

			if( pKey->Cnt_Released > pKey->Dly_Releasing )
 80014ca:	42ac      	cmp	r4, r5

			Value = KeyData;

			pKey->Cnt_Pressed++;
			
			if( KeyData == 0 )	pKey->Cnt_Released++;
 80014cc:	6144      	str	r4, [r0, #20]
			else			    pKey->Cnt_Released = 0;			

			if( pKey->Cnt_Released > pKey->Dly_Releasing )
 80014ce:	d906      	bls.n	80014de <Hw_KeyPad_StateTick+0xee>
			{
				pKey->State      = HW_KEYPAD_STATE_RELEASING;
 80014d0:	2304      	movs	r3, #4
 80014d2:	6003      	str	r3, [r0, #0]
				Value            = 0;
				pKey->Cnt_Repeat = 0;
 80014d4:	6181      	str	r1, [r0, #24]
			else			    pKey->Cnt_Released = 0;			

			if( pKey->Cnt_Released > pKey->Dly_Releasing )
			{
				pKey->State      = HW_KEYPAD_STATE_RELEASING;
				Value            = 0;
 80014d6:	4608      	mov	r0, r1
 80014d8:	e796      	b.n	8001408 <Hw_KeyPad_StateTick+0x18>
			Value = KeyData;

			pKey->Cnt_Pressed++;
			
			if( KeyData == 0 )	pKey->Cnt_Released++;
			else			    pKey->Cnt_Released = 0;			
 80014da:	2400      	movs	r4, #0
 80014dc:	6144      	str	r4, [r0, #20]
				Value            = 0;
				pKey->Cnt_Repeat = 0;
			}
			else
			{			
				if( pKey->Cnt_Pressed > pKey->Dly_Repeat )
 80014de:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80014e0:	42a3      	cmp	r3, r4
 80014e2:	d9f8      	bls.n	80014d6 <Hw_KeyPad_StateTick+0xe6>
				{
					pKey->Cnt_Pressed  = 0;
					pKey->Cnt_Repeat++;

					if( IS_CLR_BIT( Hw_KeyPad_EventFlag, HW_KEYPAD_EVENT_REPEAT ) )
 80014e4:	4b18      	ldr	r3, [pc, #96]	; (8001548 <Hw_KeyPad_StateTick+0x158>)
			else
			{			
				if( pKey->Cnt_Pressed > pKey->Dly_Repeat )
				{
					pKey->Cnt_Pressed  = 0;
					pKey->Cnt_Repeat++;
 80014e6:	6985      	ldr	r5, [r0, #24]

					if( IS_CLR_BIT( Hw_KeyPad_EventFlag, HW_KEYPAD_EVENT_REPEAT ) )
 80014e8:	681c      	ldr	r4, [r3, #0]
			else
			{			
				if( pKey->Cnt_Pressed > pKey->Dly_Repeat )
				{
					pKey->Cnt_Pressed  = 0;
					pKey->Cnt_Repeat++;
 80014ea:	3501      	adds	r5, #1
			}
			else
			{			
				if( pKey->Cnt_Pressed > pKey->Dly_Repeat )
				{
					pKey->Cnt_Pressed  = 0;
 80014ec:	2600      	movs	r6, #0
					pKey->Cnt_Repeat++;

					if( IS_CLR_BIT( Hw_KeyPad_EventFlag, HW_KEYPAD_EVENT_REPEAT ) )
 80014ee:	f014 0f02 	tst.w	r4, #2
					{
						SET_BIT( Hw_KeyPad_EventFlag, HW_KEYPAD_EVENT_REPEAT );
 80014f2:	bf02      	ittt	eq
 80014f4:	f044 0402 	orreq.w	r4, r4, #2
 80014f8:	601c      	streq	r4, [r3, #0]
						Hw_KeyPad_EventList[HW_KEYPAD_EVENT_REPEAT] = KeyNum;						
 80014fa:	4b14      	ldreq	r3, [pc, #80]	; (800154c <Hw_KeyPad_StateTick+0x15c>)
			}
			else
			{			
				if( pKey->Cnt_Pressed > pKey->Dly_Repeat )
				{
					pKey->Cnt_Pressed  = 0;
 80014fc:	6106      	str	r6, [r0, #16]
					pKey->Cnt_Repeat++;
 80014fe:	6185      	str	r5, [r0, #24]

					if( IS_CLR_BIT( Hw_KeyPad_EventFlag, HW_KEYPAD_EVENT_REPEAT ) )
					{
						SET_BIT( Hw_KeyPad_EventFlag, HW_KEYPAD_EVENT_REPEAT );
						Hw_KeyPad_EventList[HW_KEYPAD_EVENT_REPEAT] = KeyNum;						
 8001500:	bf08      	it	eq
 8001502:	605a      	streq	r2, [r3, #4]
					}
					
					if( pKey->EventFnct != NULL )
 8001504:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001506:	2b00      	cmp	r3, #0
 8001508:	d0e5      	beq.n	80014d6 <Hw_KeyPad_StateTick+0xe6>
					{
						(*pKey->EventFnct)(HW_KEYPAD_EVENT_REPEAT);
 800150a:	2001      	movs	r0, #1
 800150c:	9101      	str	r1, [sp, #4]
 800150e:	4798      	blx	r3
 8001510:	9901      	ldr	r1, [sp, #4]
 8001512:	4608      	mov	r0, r1
 8001514:	e778      	b.n	8001408 <Hw_KeyPad_StateTick+0x18>
			Value = KeyData;

			pKey->Cnt_Pressed++;
			
			if( KeyData == 0 )	pKey->Cnt_Released++;
			else			    pKey->Cnt_Released = 0;			
 8001516:	2400      	movs	r4, #0
 8001518:	6144      	str	r4, [r0, #20]
				pKey->State = HW_KEYPAD_STATE_RELEASING;
				Value       = 0;
			}
			else
			{			
				if( pKey->Cnt_Pressed > pKey->Dly_Pressed )
 800151a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800151c:	42a3      	cmp	r3, r4
 800151e:	d9da      	bls.n	80014d6 <Hw_KeyPad_StateTick+0xe6>
					pKey->State        = HW_KEYPAD_STATE_REPEAT;
					pKey->Cnt_Pressed  = 0;
					pKey->Cnt_Released = 0;
					pKey->Cnt_Repeat   = 1;
					
					if( IS_CLR_BIT( Hw_KeyPad_EventFlag, HW_KEYPAD_EVENT_REPEAT ) )
 8001520:	4c09      	ldr	r4, [pc, #36]	; (8001548 <Hw_KeyPad_StateTick+0x158>)
			else
			{			
				if( pKey->Cnt_Pressed > pKey->Dly_Pressed )
				{
					pKey->State        = HW_KEYPAD_STATE_REPEAT;
					pKey->Cnt_Pressed  = 0;
 8001522:	2300      	movs	r3, #0
					pKey->Cnt_Released = 0;
					pKey->Cnt_Repeat   = 1;
					
					if( IS_CLR_BIT( Hw_KeyPad_EventFlag, HW_KEYPAD_EVENT_REPEAT ) )
 8001524:	6825      	ldr	r5, [r4, #0]
			else
			{			
				if( pKey->Cnt_Pressed > pKey->Dly_Pressed )
				{
					pKey->State        = HW_KEYPAD_STATE_REPEAT;
					pKey->Cnt_Pressed  = 0;
 8001526:	6103      	str	r3, [r0, #16]
					pKey->Cnt_Released = 0;
 8001528:	6143      	str	r3, [r0, #20]
					pKey->Cnt_Repeat   = 1;
 800152a:	2301      	movs	r3, #1
			}
			else
			{			
				if( pKey->Cnt_Pressed > pKey->Dly_Pressed )
				{
					pKey->State        = HW_KEYPAD_STATE_REPEAT;
 800152c:	2603      	movs	r6, #3
					pKey->Cnt_Pressed  = 0;
					pKey->Cnt_Released = 0;
					pKey->Cnt_Repeat   = 1;
 800152e:	6183      	str	r3, [r0, #24]
					
					if( IS_CLR_BIT( Hw_KeyPad_EventFlag, HW_KEYPAD_EVENT_REPEAT ) )
 8001530:	07ab      	lsls	r3, r5, #30
			}
			else
			{			
				if( pKey->Cnt_Pressed > pKey->Dly_Pressed )
				{
					pKey->State        = HW_KEYPAD_STATE_REPEAT;
 8001532:	6006      	str	r6, [r0, #0]
					pKey->Cnt_Pressed  = 0;
					pKey->Cnt_Released = 0;
					pKey->Cnt_Repeat   = 1;
					
					if( IS_CLR_BIT( Hw_KeyPad_EventFlag, HW_KEYPAD_EVENT_REPEAT ) )
 8001534:	d4e6      	bmi.n	8001504 <Hw_KeyPad_StateTick+0x114>
					{
						SET_BIT( Hw_KeyPad_EventFlag, HW_KEYPAD_EVENT_REPEAT );
						Hw_KeyPad_EventList[HW_KEYPAD_EVENT_REPEAT] = KeyNum;
 8001536:	4b05      	ldr	r3, [pc, #20]	; (800154c <Hw_KeyPad_StateTick+0x15c>)
					pKey->Cnt_Released = 0;
					pKey->Cnt_Repeat   = 1;
					
					if( IS_CLR_BIT( Hw_KeyPad_EventFlag, HW_KEYPAD_EVENT_REPEAT ) )
					{
						SET_BIT( Hw_KeyPad_EventFlag, HW_KEYPAD_EVENT_REPEAT );
 8001538:	f045 0502 	orr.w	r5, r5, #2
 800153c:	6025      	str	r5, [r4, #0]
						Hw_KeyPad_EventList[HW_KEYPAD_EVENT_REPEAT] = KeyNum;
 800153e:	605a      	str	r2, [r3, #4]
 8001540:	e7e0      	b.n	8001504 <Hw_KeyPad_StateTick+0x114>
 8001542:	bf00      	nop
 8001544:	200002b8 	.word	0x200002b8
 8001548:	200002b4 	.word	0x200002b4
 800154c:	20000994 	.word	0x20000994
 8001550:	20000a60 	.word	0x20000a60

08001554 <Hw_KeyPad_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_KeyPad_Init( void )
{
 8001554:	b530      	push	{r4, r5, lr}
	u8 i;
	
	Hw_KeyPad_Data = 0;
 8001556:	4913      	ldr	r1, [pc, #76]	; (80015a4 <Hw_KeyPad_Init+0x50>)
 8001558:	4b13      	ldr	r3, [pc, #76]	; (80015a8 <Hw_KeyPad_Init+0x54>)
 800155a:	2200      	movs	r2, #0
 800155c:	600a      	str	r2, [r1, #0]
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_KeyPad_Init( void )
{
 800155e:	b083      	sub	sp, #12
     TITLE   : Hw_KeyPad_Init
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_KeyPad_Init( void )
 8001560:	f103 05c0 	add.w	r5, r3, #192	; 0xc0
		Hw_KeyPad_Log[i].Cnt_Dly       = 0;
		Hw_KeyPad_Log[i].Cnt_Pressed   = 0; 
		Hw_KeyPad_Log[i].Cnt_Released  = 0;
		Hw_KeyPad_Log[i].Cnt_Repeat    = 0;
		
		Hw_KeyPad_Log[i].Dly_Pressing  = 50  /10; // 50ms
 8001564:	2105      	movs	r1, #5
		Hw_KeyPad_Log[i].Dly_Releasing = 50  /10; // 50ms
		Hw_KeyPad_Log[i].Dly_Pressed   = 1000/10; // 1000ms
 8001566:	2464      	movs	r4, #100	; 0x64
		Hw_KeyPad_Log[i].Dly_Repeat    = 500 /10; // 500ms	
 8001568:	2032      	movs	r0, #50	; 0x32
	Hw_KeyPad_Data = 0;


	for( i=0; i<HW_KEYPAD_MAX; i++ )
	{	
		Hw_KeyPad_Log[i].State         = HW_KEYPAD_STATE_IDLE;
 800156a:	601a      	str	r2, [r3, #0]
		Hw_KeyPad_Log[i].Event		   = 0;
 800156c:	609a      	str	r2, [r3, #8]
		Hw_KeyPad_Log[i].Value         = 0;
 800156e:	711a      	strb	r2, [r3, #4]
		Hw_KeyPad_Log[i].Cnt_Dly       = 0;
 8001570:	60da      	str	r2, [r3, #12]
		Hw_KeyPad_Log[i].Cnt_Pressed   = 0; 
 8001572:	611a      	str	r2, [r3, #16]
		Hw_KeyPad_Log[i].Cnt_Released  = 0;
 8001574:	615a      	str	r2, [r3, #20]
		Hw_KeyPad_Log[i].Cnt_Repeat    = 0;
 8001576:	619a      	str	r2, [r3, #24]
		
		Hw_KeyPad_Log[i].Dly_Pressing  = 50  /10; // 50ms
 8001578:	61d9      	str	r1, [r3, #28]
		Hw_KeyPad_Log[i].Dly_Releasing = 50  /10; // 50ms
 800157a:	6219      	str	r1, [r3, #32]
		Hw_KeyPad_Log[i].Dly_Pressed   = 1000/10; // 1000ms
 800157c:	625c      	str	r4, [r3, #36]	; 0x24
		Hw_KeyPad_Log[i].Dly_Repeat    = 500 /10; // 500ms	
 800157e:	6298      	str	r0, [r3, #40]	; 0x28
		
		Hw_KeyPad_Log[i].EventFnct     = NULL;				
 8001580:	62da      	str	r2, [r3, #44]	; 0x2c
 8001582:	3330      	adds	r3, #48	; 0x30
	u8 i;
	
	Hw_KeyPad_Data = 0;


	for( i=0; i<HW_KEYPAD_MAX; i++ )
 8001584:	42ab      	cmp	r3, r5
 8001586:	d1f0      	bne.n	800156a <Hw_KeyPad_Init+0x16>
	}

	
	//-- KeyPad 처리용 타이머 시작
	//
	Hw_Timer_Set  ( HW_TIMER_CH_KEYPAD, 10, LOOP_TIME, Hw_KeyPad_Tick, NULL );
 8001588:	2300      	movs	r3, #0
 800158a:	2004      	movs	r0, #4
 800158c:	9300      	str	r3, [sp, #0]
 800158e:	210a      	movs	r1, #10
 8001590:	2202      	movs	r2, #2
 8001592:	4b06      	ldr	r3, [pc, #24]	; (80015ac <Hw_KeyPad_Init+0x58>)
 8001594:	4c06      	ldr	r4, [pc, #24]	; (80015b0 <Hw_KeyPad_Init+0x5c>)
 8001596:	47a0      	blx	r4
	Hw_Timer_Start( HW_TIMER_CH_KEYPAD );
 8001598:	2004      	movs	r0, #4
 800159a:	4b06      	ldr	r3, [pc, #24]	; (80015b4 <Hw_KeyPad_Init+0x60>)
 800159c:	4798      	blx	r3
}
 800159e:	b003      	add	sp, #12
 80015a0:	bd30      	pop	{r4, r5, pc}
 80015a2:	bf00      	nop
 80015a4:	20000990 	.word	0x20000990
 80015a8:	200009a0 	.word	0x200009a0
 80015ac:	080015c9 	.word	0x080015c9
 80015b0:	08000f21 	.word	0x08000f21
 80015b4:	08000f41 	.word	0x08000f41

080015b8 <Hw_KeyPad_Scan>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 Hw_KeyPad_Scan( void )
{
 80015b8:	b508      	push	{r3, lr}
	u32 ScanData = 0;
	
	
	ScanData = Hw_VBus_ReadData( HW_VBUS_CS_KEY );
 80015ba:	f241 23f9 	movw	r3, #4857	; 0x12f9
 80015be:	2011      	movs	r0, #17
 80015c0:	f6c0 0300 	movt	r3, #2048	; 0x800
 80015c4:	4798      	blx	r3
		    
	return ScanData;
}
 80015c6:	bd08      	pop	{r3, pc}

080015c8 <Hw_KeyPad_Tick>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_KeyPad_Tick( void )
{
 80015c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	u32 i;
	u32 scan_data = 0;
	u32 key_data  = 0;
	u32 Cnt = 0;
	
	scan_data = Hw_KeyPad_Scan();
 80015cc:	4b12      	ldr	r3, [pc, #72]	; (8001618 <Hw_KeyPad_Tick+0x50>)
 80015ce:	4798      	blx	r3
---------------------------------------------------------------------------*/
void Hw_KeyPad_Tick( void )
{
	u32 i;
	u32 scan_data = 0;
	u32 key_data  = 0;
 80015d0:	2500      	movs	r5, #0
 80015d2:	4f12      	ldr	r7, [pc, #72]	; (800161c <Hw_KeyPad_Tick+0x54>)
 80015d4:	f8df 904c 	ldr.w	r9, [pc, #76]	; 8001624 <Hw_KeyPad_Tick+0x5c>
	u32 Cnt = 0;
	
	scan_data = Hw_KeyPad_Scan();
 80015d8:	4606      	mov	r6, r0
	

	
	for( i=0; i<HW_KEYPAD_MAX; i++ )
 80015da:	462c      	mov	r4, r5
	{
		if( scan_data & (1<<i) )  key_data |= Hw_KeyPad_StateTick( &Hw_KeyPad_Log[i], 1, i ) << i; 
 80015dc:	f04f 0801 	mov.w	r8, #1
 80015e0:	fa08 f304 	lsl.w	r3, r8, r4
 80015e4:	eb04 0044 	add.w	r0, r4, r4, lsl #1
		else					  key_data |= Hw_KeyPad_StateTick( &Hw_KeyPad_Log[i], 0, i ) << i; 		
 80015e8:	4686      	mov	lr, r0
	

	
	for( i=0; i<HW_KEYPAD_MAX; i++ )
	{
		if( scan_data & (1<<i) )  key_data |= Hw_KeyPad_StateTick( &Hw_KeyPad_Log[i], 1, i ) << i; 
 80015ea:	2101      	movs	r1, #1
 80015ec:	4033      	ands	r3, r6
 80015ee:	b2e2      	uxtb	r2, r4
		else					  key_data |= Hw_KeyPad_StateTick( &Hw_KeyPad_Log[i], 0, i ) << i; 		
 80015f0:	bf04      	itt	eq
 80015f2:	4619      	moveq	r1, r3
 80015f4:	b2e2      	uxtbeq	r2, r4
	

	
	for( i=0; i<HW_KEYPAD_MAX; i++ )
	{
		if( scan_data & (1<<i) )  key_data |= Hw_KeyPad_StateTick( &Hw_KeyPad_Log[i], 1, i ) << i; 
 80015f6:	eb07 1000 	add.w	r0, r7, r0, lsl #4
		else					  key_data |= Hw_KeyPad_StateTick( &Hw_KeyPad_Log[i], 0, i ) << i; 		
 80015fa:	bf08      	it	eq
 80015fc:	eb07 100e 	addeq.w	r0, r7, lr, lsl #4
 8001600:	47c8      	blx	r9
 8001602:	fa00 f004 	lsl.w	r0, r0, r4
	
	scan_data = Hw_KeyPad_Scan();
	

	
	for( i=0; i<HW_KEYPAD_MAX; i++ )
 8001606:	3401      	adds	r4, #1
 8001608:	2c04      	cmp	r4, #4
	{
		if( scan_data & (1<<i) )  key_data |= Hw_KeyPad_StateTick( &Hw_KeyPad_Log[i], 1, i ) << i; 
		else					  key_data |= Hw_KeyPad_StateTick( &Hw_KeyPad_Log[i], 0, i ) << i; 		
 800160a:	ea45 0500 	orr.w	r5, r5, r0
	
	scan_data = Hw_KeyPad_Scan();
	

	
	for( i=0; i<HW_KEYPAD_MAX; i++ )
 800160e:	d1e7      	bne.n	80015e0 <Hw_KeyPad_Tick+0x18>
		else					  key_data |= Hw_KeyPad_StateTick( &Hw_KeyPad_Log[i], 0, i ) << i; 		
		
		if( key_data & (1<<i) ) Cnt++;
	}
	
	Hw_KeyPad_Data         = key_data;
 8001610:	4b03      	ldr	r3, [pc, #12]	; (8001620 <Hw_KeyPad_Tick+0x58>)
 8001612:	601d      	str	r5, [r3, #0]
 8001614:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001618:	080015b9 	.word	0x080015b9
 800161c:	200009a0 	.word	0x200009a0
 8001620:	20000990 	.word	0x20000990
 8001624:	080013f1 	.word	0x080013f1

08001628 <Hw_KeyPad_SetEventFunc>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_KeyPad_SetEventFunc( u8 KeyNum, void (*EventFnct)(u32 Event) )
{
	if( KeyNum >= HW_KEYPAD_MAX ) return;
 8001628:	2803      	cmp	r0, #3
	
	Hw_KeyPad_Log[KeyNum].EventFnct = EventFnct;
 800162a:	bf9f      	itttt	ls
 800162c:	4b03      	ldrls	r3, [pc, #12]	; (800163c <Hw_KeyPad_SetEventFunc+0x14>)
 800162e:	eb00 0040 	addls.w	r0, r0, r0, lsl #1
 8001632:	eb03 1000 	addls.w	r0, r3, r0, lsl #4
 8001636:	62c1      	strls	r1, [r0, #44]	; 0x2c
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	200009a0 	.word	0x200009a0

08001640 <Hw_KeyPad_GetRepeatCnt>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 Hw_KeyPad_GetRepeatCnt( u8 KeyNum )
{
	if( KeyNum >= HW_KEYPAD_MAX ) return 0;
 8001640:	2803      	cmp	r0, #3
	
	
	return Hw_KeyPad_Log[ KeyNum ].Cnt_Repeat;
 8001642:	bf9f      	itttt	ls
 8001644:	4b04      	ldrls	r3, [pc, #16]	; (8001658 <Hw_KeyPad_GetRepeatCnt+0x18>)
 8001646:	eb00 0040 	addls.w	r0, r0, r0, lsl #1
 800164a:	eb03 1000 	addls.w	r0, r3, r0, lsl #4
 800164e:	6980      	ldrls	r0, [r0, #24]
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 Hw_KeyPad_GetRepeatCnt( u8 KeyNum )
{
	if( KeyNum >= HW_KEYPAD_MAX ) return 0;
 8001650:	bf88      	it	hi
 8001652:	2000      	movhi	r0, #0
	
	
	return Hw_KeyPad_Log[ KeyNum ].Cnt_Repeat;
}
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	200009a0 	.word	0x200009a0

0800165c <Hw_KeyPad_GetPressedCnt>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 Hw_KeyPad_GetPressedCnt( void )
{
	return Hw_KeyPad_PressedCount;
 800165c:	f240 23b8 	movw	r3, #696	; 0x2b8
 8001660:	f2c2 0300 	movt	r3, #8192	; 0x2000
}
 8001664:	6818      	ldr	r0, [r3, #0]
 8001666:	4770      	bx	lr

08001668 <Hw_KeyPad_WaitForEvent>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 Hw_KeyPad_WaitForEvent( u32 TimeOut )
{
 8001668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u32 TimeStart;
	u32 TimeEnd;
	u32 Ret = 0;
	
	TimeStart = Hw_Timer_Get_CountValue();
 800166c:	4e0a      	ldr	r6, [pc, #40]	; (8001698 <Hw_KeyPad_WaitForEvent+0x30>)
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 Hw_KeyPad_WaitForEvent( u32 TimeOut )
{
 800166e:	4605      	mov	r5, r0
	u32 TimeStart;
	u32 TimeEnd;
	u32 Ret = 0;
	
	TimeStart = Hw_Timer_Get_CountValue();
 8001670:	47b0      	blx	r6

	Hw_KeyPad_EventFlag = 0;
 8001672:	4f0a      	ldr	r7, [pc, #40]	; (800169c <Hw_KeyPad_WaitForEvent+0x34>)
 8001674:	2400      	movs	r4, #0
{
	u32 TimeStart;
	u32 TimeEnd;
	u32 Ret = 0;
	
	TimeStart = Hw_Timer_Get_CountValue();
 8001676:	4680      	mov	r8, r0

	Hw_KeyPad_EventFlag = 0;
 8001678:	603c      	str	r4, [r7, #0]
	
	while(1)
	{	
		if( Hw_KeyPad_EventFlag > 0 )
 800167a:	b94c      	cbnz	r4, 8001690 <Hw_KeyPad_WaitForEvent+0x28>
			break;
		}
	
		//-- 타임 아웃 처리
		//
		if( TimeOut > 0 )
 800167c:	b905      	cbnz	r5, 8001680 <Hw_KeyPad_WaitForEvent+0x18>
 800167e:	e7fe      	b.n	800167e <Hw_KeyPad_WaitForEvent+0x16>
		{
			TimeEnd = Hw_Timer_Get_CountValue();
 8001680:	47b0      	blx	r6
			
			if( (TimeEnd - TimeStart) > TimeOut )
 8001682:	ebc8 0000 	rsb	r0, r8, r0
 8001686:	4285      	cmp	r5, r0
 8001688:	d302      	bcc.n	8001690 <Hw_KeyPad_WaitForEvent+0x28>
 800168a:	683c      	ldr	r4, [r7, #0]

	Hw_KeyPad_EventFlag = 0;
	
	while(1)
	{	
		if( Hw_KeyPad_EventFlag > 0 )
 800168c:	2c00      	cmp	r4, #0
 800168e:	d0f5      	beq.n	800167c <Hw_KeyPad_WaitForEvent+0x14>
			}
		}
	}

	return Ret;
}
 8001690:	4620      	mov	r0, r4
 8001692:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001696:	bf00      	nop
 8001698:	08000f69 	.word	0x08000f69
 800169c:	200002b4 	.word	0x200002b4

080016a0 <Hw_KeyPad_GetEventKeyData>:
u32 Hw_KeyPad_GetEventKeyData( u32 EventFlag )
{
	u32 EventKey = 0;
	u32 Ret = 0;
	
	EventKey = Hw_KeyPad_EventList[EventFlag];
 80016a0:	f640 1394 	movw	r3, #2452	; 0x994
 80016a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
	Ret      = (1<<EventKey);
 80016a8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80016ac:	2001      	movs	r0, #1
	
	return Ret;
}
 80016ae:	fa00 f003 	lsl.w	r0, r0, r3
 80016b2:	4770      	bx	lr

080016b4 <Hw_KeyPad_GetEventKeyNum>:
u32 Hw_KeyPad_GetEventKeyNum( u32 EventFlag )
{
	u32 EventKey = 0;
	u32 Ret = 0;
	
	EventKey = Hw_KeyPad_EventList[EventFlag];
 80016b4:	f640 1394 	movw	r3, #2452	; 0x994
 80016b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
	Ret      = EventKey;
	
	return Ret;
 80016bc:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop

080016c4 <Hw_7Seg_Tick>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_7Seg_Tick( void )
{
 80016c4:	b538      	push	{r3, r4, r5, lr}
	static u8 Column_Cnt = 0;
	
	
	//-- 7Seg 데이터 출력
	//
	Hw_VBus_WriteData( HW_VBUS_CS_FND_0, Hw_7Seg_Data[Column_Cnt] );
 80016c6:	4c0b      	ldr	r4, [pc, #44]	; (80016f4 <Hw_7Seg_Tick+0x30>)
 80016c8:	4a0b      	ldr	r2, [pc, #44]	; (80016f8 <Hw_7Seg_Tick+0x34>)
 80016ca:	7823      	ldrb	r3, [r4, #0]
 80016cc:	200a      	movs	r0, #10
 80016ce:	5cd1      	ldrb	r1, [r2, r3]
 80016d0:	4d0a      	ldr	r5, [pc, #40]	; (80016fc <Hw_7Seg_Tick+0x38>)
 80016d2:	47a8      	blx	r5
	
	
	//-- 7Seg 4개를 번갈아가며 On 시켜준다.
	//
	Hw_VBus_WriteData( HW_VBUS_CS_FND_2, ~(1<<Column_Cnt) );
 80016d4:	7823      	ldrb	r3, [r4, #0]
 80016d6:	2101      	movs	r1, #1
 80016d8:	fa01 f103 	lsl.w	r1, r1, r3
 80016dc:	43c9      	mvns	r1, r1
 80016de:	200c      	movs	r0, #12
 80016e0:	b2c9      	uxtb	r1, r1
 80016e2:	47a8      	blx	r5
	
	Column_Cnt++;
 80016e4:	7823      	ldrb	r3, [r4, #0]
 80016e6:	3301      	adds	r3, #1
 80016e8:	b2db      	uxtb	r3, r3
	
	if( Column_Cnt>=HW_7SEG_MAX )
 80016ea:	2b03      	cmp	r3, #3
	{
		Column_Cnt = 0;
 80016ec:	bf88      	it	hi
 80016ee:	2300      	movhi	r3, #0
 80016f0:	7023      	strb	r3, [r4, #0]
 80016f2:	bd38      	pop	{r3, r4, r5, pc}
 80016f4:	200002bc 	.word	0x200002bc
 80016f8:	20000a70 	.word	0x20000a70
 80016fc:	080012a1 	.word	0x080012a1

08001700 <Hw_7Seg_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_7Seg_Init( void )
{
 8001700:	b530      	push	{r4, r5, lr}
	
	//-- 7Seg 값 초기화
	//
	for( i=0; i<HW_7SEG_MAX; i++ )
	{
		Hw_7Seg_Data[i] = 0x00;
 8001702:	f640 2370 	movw	r3, #2672	; 0xa70
 8001706:	2400      	movs	r4, #0
	}
	
	
	Hw_VBus_WriteData( HW_VBUS_CS_FND_0, 0x00 );
 8001708:	f241 25a1 	movw	r5, #4769	; 0x12a1
	
	//-- 7Seg 값 초기화
	//
	for( i=0; i<HW_7SEG_MAX; i++ )
	{
		Hw_7Seg_Data[i] = 0x00;
 800170c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_7Seg_Init( void )
{
 8001710:	b083      	sub	sp, #12
	{
		Hw_7Seg_Data[i] = 0x00;
	}
	
	
	Hw_VBus_WriteData( HW_VBUS_CS_FND_0, 0x00 );
 8001712:	200a      	movs	r0, #10
 8001714:	4621      	mov	r1, r4
 8001716:	f6c0 0500 	movt	r5, #2048	; 0x800
	
	//-- 7Seg 값 초기화
	//
	for( i=0; i<HW_7SEG_MAX; i++ )
	{
		Hw_7Seg_Data[i] = 0x00;
 800171a:	701c      	strb	r4, [r3, #0]
 800171c:	705c      	strb	r4, [r3, #1]
 800171e:	709c      	strb	r4, [r3, #2]
 8001720:	70dc      	strb	r4, [r3, #3]
	}
	
	
	Hw_VBus_WriteData( HW_VBUS_CS_FND_0, 0x00 );
 8001722:	47a8      	blx	r5
	Hw_VBus_WriteData( HW_VBUS_CS_FND_2, 0x0F );
 8001724:	200c      	movs	r0, #12
 8001726:	210f      	movs	r1, #15
 8001728:	47a8      	blx	r5
			
	
	//-- 7Seg 처리용 타이머 시작(50Hz x 4 = 200Hz)
	//
	Hw_Timer_Set  ( HW_TIMER_CH_7SEG, 1000/200, LOOP_TIME, Hw_7Seg_Tick, NULL );
 800172a:	2005      	movs	r0, #5
 800172c:	f640 7521 	movw	r5, #3873	; 0xf21
 8001730:	f241 63c5 	movw	r3, #5829	; 0x16c5
 8001734:	4601      	mov	r1, r0
 8001736:	9400      	str	r4, [sp, #0]
 8001738:	2202      	movs	r2, #2
 800173a:	f6c0 0300 	movt	r3, #2048	; 0x800
 800173e:	f6c0 0500 	movt	r5, #2048	; 0x800
 8001742:	47a8      	blx	r5
	Hw_Timer_Start( HW_TIMER_CH_7SEG );
 8001744:	f640 7341 	movw	r3, #3905	; 0xf41
 8001748:	2005      	movs	r0, #5
 800174a:	f6c0 0300 	movt	r3, #2048	; 0x800
 800174e:	4798      	blx	r3
}
 8001750:	b003      	add	sp, #12
 8001752:	bd30      	pop	{r4, r5, pc}

08001754 <Hw_7Seg_SetNumber>:
---------------------------------------------------------------------------*/
void Hw_7Seg_SetNumber( u8 Index, u8 Number  )
{
	u8 SegOut;
	
	if( Index >= HW_7SEG_MAX ) return;
 8001754:	2803      	cmp	r0, #3
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_7Seg_SetNumber( u8 Index, u8 Number  )
{
 8001756:	b410      	push	{r4}
	u8 SegOut;
	
	if( Index >= HW_7SEG_MAX ) return;
 8001758:	d82d      	bhi.n	80017b6 <Hw_7Seg_SetNumber+0x62>


	if( Number == ' ' )
 800175a:	2920      	cmp	r1, #32
 800175c:	d02d      	beq.n	80017ba <Hw_7Seg_SetNumber+0x66>
				
		Hw_7Seg_Data[ Index ] = SegOut;
	}


	if( Number == '-' )
 800175e:	292d      	cmp	r1, #45	; 0x2d
 8001760:	d031      	beq.n	80017c6 <Hw_7Seg_SetNumber+0x72>
				
		Hw_7Seg_Data[ Index ] = SegOut;
	}

	
	if( Number >= '0' && Number <= '9' )
 8001762:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8001766:	2b09      	cmp	r3, #9
 8001768:	d809      	bhi.n	800177e <Hw_7Seg_SetNumber+0x2a>
	{
		SegOut  = Hw_7Seg_Data[ Index ] & (1<<7);	// Dot 데이터는 건드리지 않는다.
 800176a:	4b1b      	ldr	r3, [pc, #108]	; (80017d8 <Hw_7Seg_SetNumber+0x84>)
		SegOut |= Hw_7Seg_DotTbl[ Number - '0' ];
 800176c:	4c1b      	ldr	r4, [pc, #108]	; (80017dc <Hw_7Seg_SetNumber+0x88>)
	}

	
	if( Number >= '0' && Number <= '9' )
	{
		SegOut  = Hw_7Seg_Data[ Index ] & (1<<7);	// Dot 데이터는 건드리지 않는다.
 800176e:	5c1a      	ldrb	r2, [r3, r0]
		SegOut |= Hw_7Seg_DotTbl[ Number - '0' ];
 8001770:	1864      	adds	r4, r4, r1
 8001772:	f814 4c30 	ldrb.w	r4, [r4, #-48]
	}

	
	if( Number >= '0' && Number <= '9' )
	{
		SegOut  = Hw_7Seg_Data[ Index ] & (1<<7);	// Dot 데이터는 건드리지 않는다.
 8001776:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
		SegOut |= Hw_7Seg_DotTbl[ Number - '0' ];
 800177a:	4322      	orrs	r2, r4
		
		Hw_7Seg_Data[ Index ] = SegOut;
 800177c:	541a      	strb	r2, [r3, r0]
	}	

	
	if( Number >= 'A' && Number <= 'F' )
 800177e:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
 8001782:	2b05      	cmp	r3, #5
 8001784:	d809      	bhi.n	800179a <Hw_7Seg_SetNumber+0x46>
	{
		SegOut  = Hw_7Seg_Data[ Index ] & (1<<7);	// Dot 데이터는 건드리지 않는다.
 8001786:	4b14      	ldr	r3, [pc, #80]	; (80017d8 <Hw_7Seg_SetNumber+0x84>)
		SegOut |= Hw_7Seg_DotTbl[ Number - 'A' + 10 ];
 8001788:	4c14      	ldr	r4, [pc, #80]	; (80017dc <Hw_7Seg_SetNumber+0x88>)
	}	

	
	if( Number >= 'A' && Number <= 'F' )
	{
		SegOut  = Hw_7Seg_Data[ Index ] & (1<<7);	// Dot 데이터는 건드리지 않는다.
 800178a:	5c1a      	ldrb	r2, [r3, r0]
		SegOut |= Hw_7Seg_DotTbl[ Number - 'A' + 10 ];
 800178c:	1864      	adds	r4, r4, r1
 800178e:	f814 4c37 	ldrb.w	r4, [r4, #-55]
	}	

	
	if( Number >= 'A' && Number <= 'F' )
	{
		SegOut  = Hw_7Seg_Data[ Index ] & (1<<7);	// Dot 데이터는 건드리지 않는다.
 8001792:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
		SegOut |= Hw_7Seg_DotTbl[ Number - 'A' + 10 ];
 8001796:	4322      	orrs	r2, r4
		
		Hw_7Seg_Data[ Index ] = SegOut;
 8001798:	541a      	strb	r2, [r3, r0]
	}	


	if( Number >= 'a' && Number <= 'f' )
 800179a:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
 800179e:	2b05      	cmp	r3, #5
 80017a0:	d809      	bhi.n	80017b6 <Hw_7Seg_SetNumber+0x62>
	{
		SegOut  = Hw_7Seg_Data[ Index ] & (1<<7);	// Dot 데이터는 건드리지 않는다.
 80017a2:	4b0d      	ldr	r3, [pc, #52]	; (80017d8 <Hw_7Seg_SetNumber+0x84>)
		SegOut |= Hw_7Seg_DotTbl[ Number - 'a' + 10 ];
 80017a4:	4c0d      	ldr	r4, [pc, #52]	; (80017dc <Hw_7Seg_SetNumber+0x88>)
	}	


	if( Number >= 'a' && Number <= 'f' )
	{
		SegOut  = Hw_7Seg_Data[ Index ] & (1<<7);	// Dot 데이터는 건드리지 않는다.
 80017a6:	5c1a      	ldrb	r2, [r3, r0]
		SegOut |= Hw_7Seg_DotTbl[ Number - 'a' + 10 ];
 80017a8:	1861      	adds	r1, r4, r1
 80017aa:	f811 1c57 	ldrb.w	r1, [r1, #-87]
	}	


	if( Number >= 'a' && Number <= 'f' )
	{
		SegOut  = Hw_7Seg_Data[ Index ] & (1<<7);	// Dot 데이터는 건드리지 않는다.
 80017ae:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
		SegOut |= Hw_7Seg_DotTbl[ Number - 'a' + 10 ];
 80017b2:	430a      	orrs	r2, r1
		
		Hw_7Seg_Data[ Index ] = SegOut;
 80017b4:	541a      	strb	r2, [r3, r0]
	}	
	
}
 80017b6:	bc10      	pop	{r4}
 80017b8:	4770      	bx	lr
	if( Number == ' ' )
	{
		SegOut  = Hw_7Seg_Data[ Index ] & (1<<7);	// Dot 데이터는 건드리지 않는다.
		SegOut |= 0x00;
				
		Hw_7Seg_Data[ Index ] = SegOut;
 80017ba:	4b07      	ldr	r3, [pc, #28]	; (80017d8 <Hw_7Seg_SetNumber+0x84>)
	if( Index >= HW_7SEG_MAX ) return;


	if( Number == ' ' )
	{
		SegOut  = Hw_7Seg_Data[ Index ] & (1<<7);	// Dot 데이터는 건드리지 않는다.
 80017bc:	5c1a      	ldrb	r2, [r3, r0]
 80017be:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
		SegOut |= 0x00;
				
		Hw_7Seg_Data[ Index ] = SegOut;
 80017c2:	541a      	strb	r2, [r3, r0]
 80017c4:	e7db      	b.n	800177e <Hw_7Seg_SetNumber+0x2a>
	}


	if( Number == '-' )
	{
		SegOut  = Hw_7Seg_Data[ Index ] & (1<<7);	// Dot 데이터는 건드리지 않는다.
 80017c6:	4b04      	ldr	r3, [pc, #16]	; (80017d8 <Hw_7Seg_SetNumber+0x84>)
 80017c8:	5c1a      	ldrb	r2, [r3, r0]
 80017ca:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
		SegOut |= (1<<6);
 80017ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
				
		Hw_7Seg_Data[ Index ] = SegOut;
 80017d2:	541a      	strb	r2, [r3, r0]
 80017d4:	e7d3      	b.n	800177e <Hw_7Seg_SetNumber+0x2a>
 80017d6:	bf00      	nop
 80017d8:	20000a70 	.word	0x20000a70
 80017dc:	20000000 	.word	0x20000000

080017e0 <Hw_7Seg_Print>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_7Seg_Print( u8 Index, char *format, ... )
{
 80017e0:	b40e      	push	{r1, r2, r3}
 80017e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80017e6:	b0b3      	sub	sp, #204	; 0xcc
		
	Lb_va_list ap;

	Lb_va_start( ap, format );
		
	Lb_vsprintf(Str, format, ap);	
 80017e8:	aa39      	add	r2, sp, #228	; 0xe4
 80017ea:	f852 1b04 	ldr.w	r1, [r2], #4
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_7Seg_Print( u8 Index, char *format, ... )
{
 80017ee:	4605      	mov	r5, r0
		
	Lb_va_list ap;

	Lb_va_start( ap, format );
		
	Lb_vsprintf(Str, format, ap);	
 80017f0:	4b15      	ldr	r3, [pc, #84]	; (8001848 <Hw_7Seg_Print+0x68>)
 80017f2:	4668      	mov	r0, sp
 80017f4:	4798      	blx	r3
	
	StrSize = 0;
	
	for( i=0; i<100; i++ )
 80017f6:	2400      	movs	r4, #0
 80017f8:	e002      	b.n	8001800 <Hw_7Seg_Print+0x20>
 80017fa:	3401      	adds	r4, #1
 80017fc:	2c64      	cmp	r4, #100	; 0x64
 80017fe:	d01d      	beq.n	800183c <Hw_7Seg_Print+0x5c>
	{
		if( Str[i] == 0 ) break;
 8001800:	f81d 3004 	ldrb.w	r3, [sp, r4]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d1f8      	bne.n	80017fa <Hw_7Seg_Print+0x1a>
	}
	
	StrSize = i;
	
	if( StrSize > 0 && StrSize < 100 )
 8001808:	1e62      	subs	r2, r4, #1
 800180a:	2a62      	cmp	r2, #98	; 0x62
 800180c:	d816      	bhi.n	800183c <Hw_7Seg_Print+0x5c>
	{
		for( i=Index; i<HW_7SEG_MAX; i++)
 800180e:	2d03      	cmp	r5, #3
 8001810:	d814      	bhi.n	800183c <Hw_7Seg_Print+0x5c>
     TITLE   : Hw_7Seg_Print
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_7Seg_Print( u8 Index, char *format, ... )
 8001812:	eba4 0845 	sub.w	r8, r4, r5, lsl #1
 8001816:	aa00      	add	r2, sp, #0
 8001818:	4f0c      	ldr	r7, [pc, #48]	; (800184c <Hw_7Seg_Print+0x6c>)
 800181a:	4490      	add	r8, r2
 800181c:	461e      	mov	r6, r3
	
	if( StrSize > 0 && StrSize < 100 )
	{
		for( i=Index; i<HW_7SEG_MAX; i++)
		{
			if( i < StrSize ) 
 800181e:	42ac      	cmp	r4, r5
     TITLE   : Hw_7Seg_Print
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_7Seg_Print( u8 Index, char *format, ... )
 8001820:	bf88      	it	hi
 8001822:	eb08 0306 	addhi.w	r3, r8, r6
		for( i=Index; i<HW_7SEG_MAX; i++)
		{
			if( i < StrSize ) 
				Hw_7Seg_SetNumber( i, Str[StrSize-i-Index-1] ); 
			else
				Hw_7Seg_SetNumber( i, ' ' ); 
 8001826:	b2e8      	uxtb	r0, r5
 8001828:	f04f 0120 	mov.w	r1, #32
	if( StrSize > 0 && StrSize < 100 )
	{
		for( i=Index; i<HW_7SEG_MAX; i++)
		{
			if( i < StrSize ) 
				Hw_7Seg_SetNumber( i, Str[StrSize-i-Index-1] ); 
 800182c:	bf88      	it	hi
 800182e:	f813 1c01 	ldrbhi.w	r1, [r3, #-1]
	
	StrSize = i;
	
	if( StrSize > 0 && StrSize < 100 )
	{
		for( i=Index; i<HW_7SEG_MAX; i++)
 8001832:	3501      	adds	r5, #1
		{
			if( i < StrSize ) 
				Hw_7Seg_SetNumber( i, Str[StrSize-i-Index-1] ); 
			else
				Hw_7Seg_SetNumber( i, ' ' ); 
 8001834:	47b8      	blx	r7
 8001836:	3e01      	subs	r6, #1
	
	StrSize = i;
	
	if( StrSize > 0 && StrSize < 100 )
	{
		for( i=Index; i<HW_7SEG_MAX; i++)
 8001838:	2d04      	cmp	r5, #4
 800183a:	d1f0      	bne.n	800181e <Hw_7Seg_Print+0x3e>
		}
	} 
	
	Lb_va_end(ap);		
	
 800183c:	b033      	add	sp, #204	; 0xcc
 800183e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001842:	b003      	add	sp, #12
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	080007cd 	.word	0x080007cd
 800184c:	08001755 	.word	0x08001755

08001850 <Hw_CLcd_WriteCmd>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_CLcd_WriteCmd( u8 CmdData )
{
 8001850:	b538      	push	{r3, r4, r5, lr}
	u16 Ret = ERR_NONE;
	
	HW_CLCD_RS_CLR();
 8001852:	f241 3499 	movw	r4, #5017	; 0x1399
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_CLcd_WriteCmd( u8 CmdData )
{
 8001856:	4605      	mov	r5, r0
	u16 Ret = ERR_NONE;
	
	HW_CLCD_RS_CLR();
 8001858:	2101      	movs	r1, #1
 800185a:	2014      	movs	r0, #20
 800185c:	f6c0 0400 	movt	r4, #2048	; 0x800
 8001860:	47a0      	blx	r4
	HW_CLCD_EN_SET();
 8001862:	f241 336d 	movw	r3, #4973	; 0x136d
 8001866:	2014      	movs	r0, #20
 8001868:	2100      	movs	r1, #0
 800186a:	f6c0 0300 	movt	r3, #2048	; 0x800
 800186e:	4798      	blx	r3
	
	HW_CLCD_BUS_WRITE( CmdData );
 8001870:	f241 23a1 	movw	r3, #4769	; 0x12a1
 8001874:	2010      	movs	r0, #16
 8001876:	4629      	mov	r1, r5
 8001878:	f6c0 0300 	movt	r3, #2048	; 0x800
 800187c:	4798      	blx	r3
	
	HW_CLCD_EN_CLR();
 800187e:	2014      	movs	r0, #20
 8001880:	2100      	movs	r1, #0
 8001882:	47a0      	blx	r4
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_CLcd_Delay(u32 DlyData)
{
	Hw_Wait_Usec(DlyData);
 8001884:	f640 2319 	movw	r3, #2585	; 0xa19
 8001888:	2032      	movs	r0, #50	; 0x32
 800188a:	f6c0 0300 	movt	r3, #2048	; 0x800
 800188e:	4798      	blx	r3
	HW_CLCD_EN_CLR();
	
	Hw_CLcd_Delay(50);
	
	return Ret;
}
 8001890:	2000      	movs	r0, #0
 8001892:	bd38      	pop	{r3, r4, r5, pc}

08001894 <Hw_CLcd_WriteByte>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_CLcd_WriteByte( u8 ByteData )
{
 8001894:	b538      	push	{r3, r4, r5, lr}
	u16 Ret = ERR_NONE;

	HW_CLCD_RS_SET();
 8001896:	f241 346d 	movw	r4, #4973	; 0x136d
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_CLcd_WriteByte( u8 ByteData )
{
 800189a:	4605      	mov	r5, r0
	u16 Ret = ERR_NONE;

	HW_CLCD_RS_SET();
 800189c:	2101      	movs	r1, #1
 800189e:	2014      	movs	r0, #20
 80018a0:	f6c0 0400 	movt	r4, #2048	; 0x800
 80018a4:	47a0      	blx	r4
	HW_CLCD_EN_SET();
 80018a6:	2014      	movs	r0, #20
 80018a8:	2100      	movs	r1, #0
 80018aa:	47a0      	blx	r4
	
	HW_CLCD_BUS_WRITE( ByteData );
 80018ac:	f241 23a1 	movw	r3, #4769	; 0x12a1
 80018b0:	2010      	movs	r0, #16
 80018b2:	4629      	mov	r1, r5
 80018b4:	f6c0 0300 	movt	r3, #2048	; 0x800
 80018b8:	4798      	blx	r3
	
	HW_CLCD_EN_CLR();
 80018ba:	f241 3399 	movw	r3, #5017	; 0x1399
 80018be:	2014      	movs	r0, #20
 80018c0:	2100      	movs	r1, #0
 80018c2:	f6c0 0300 	movt	r3, #2048	; 0x800
 80018c6:	4798      	blx	r3
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_CLcd_Delay(u32 DlyData)
{
	Hw_Wait_Usec(DlyData);
 80018c8:	f640 2319 	movw	r3, #2585	; 0xa19
 80018cc:	2032      	movs	r0, #50	; 0x32
 80018ce:	f6c0 0300 	movt	r3, #2048	; 0x800
 80018d2:	4798      	blx	r3
	HW_CLCD_EN_CLR();
	
	Hw_CLcd_Delay(50);
			
	return Ret;
}
 80018d4:	2000      	movs	r0, #0
 80018d6:	bd38      	pop	{r3, r4, r5, pc}

080018d8 <Hw_CLcd_Goto>:
u16 Hw_CLcd_Goto( u8 x, u8 y )
{
	u16 Ret = ERR_NONE;
	u8  Cmd;
	
	Cmd = 0x80 | 0x40*y | x;
 80018d8:	f060 007f 	orn	r0, r0, #127	; 0x7f
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_CLcd_Goto( u8 x, u8 y )
{
 80018dc:	b508      	push	{r3, lr}
	u16 Ret = ERR_NONE;
	u8  Cmd;
	
	Cmd = 0x80 | 0x40*y | x;
 80018de:	ea40 1081 	orr.w	r0, r0, r1, lsl #6
	
	Hw_CLcd_WriteCmd( Cmd );
 80018e2:	f641 0351 	movw	r3, #6225	; 0x1851
 80018e6:	f6c0 0300 	movt	r3, #2048	; 0x800
 80018ea:	b2c0      	uxtb	r0, r0
 80018ec:	4798      	blx	r3

	return Ret;
}
 80018ee:	2000      	movs	r0, #0
 80018f0:	bd08      	pop	{r3, pc}
 80018f2:	bf00      	nop

080018f4 <Hw_CLcd_Clear>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_CLcd_Clear( void )
{
 80018f4:	b508      	push	{r3, lr}
	u16 Ret = ERR_NONE;
	
	Hw_CLcd_WriteCmd(0x01);
 80018f6:	f641 0351 	movw	r3, #6225	; 0x1851
 80018fa:	2001      	movs	r0, #1
 80018fc:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001900:	4798      	blx	r3
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_CLcd_Delay(u32 DlyData)
{
	Hw_Wait_Usec(DlyData);
 8001902:	f640 2319 	movw	r3, #2585	; 0xa19
 8001906:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800190a:	f6c0 0300 	movt	r3, #2048	; 0x800
 800190e:	4798      	blx	r3
	
	Hw_CLcd_WriteCmd(0x01);
	Hw_CLcd_Delay(2000);
	
	return Ret;
}
 8001910:	2000      	movs	r0, #0
 8001912:	bd08      	pop	{r3, pc}

08001914 <Hw_CLcd_WriteStr>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_CLcd_WriteStr( char *pStr )
{
 8001914:	b570      	push	{r4, r5, r6, lr}
	u16 Ret = ERR_NONE;
		
	while( *pStr != '\0' )
 8001916:	7803      	ldrb	r3, [r0, #0]
 8001918:	b163      	cbz	r3, 8001934 <Hw_CLcd_WriteStr+0x20>
 800191a:	4e07      	ldr	r6, [pc, #28]	; (8001938 <Hw_CLcd_WriteStr+0x24>)
 800191c:	4605      	mov	r5, r0
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_CLcd_WriteStr( char *pStr )
{
	u16 Ret = ERR_NONE;
 800191e:	2400      	movs	r4, #0
---------------------------------------------------------------------------*/
u16 Hw_CLcd_WriteChar( u8 CharData )
{
	u16 Ret = ERR_NONE;
	
	Ret = Hw_CLcd_WriteByte(CharData);
 8001920:	4618      	mov	r0, r3
 8001922:	47b0      	blx	r6
---------------------------------------------------------------------------*/
u16 Hw_CLcd_WriteStr( char *pStr )
{
	u16 Ret = ERR_NONE;
		
	while( *pStr != '\0' )
 8001924:	f815 3f01 	ldrb.w	r3, [r5, #1]!
	{
		Ret |= Hw_CLcd_WriteChar( *pStr );
 8001928:	4320      	orrs	r0, r4
 800192a:	b284      	uxth	r4, r0
---------------------------------------------------------------------------*/
u16 Hw_CLcd_WriteStr( char *pStr )
{
	u16 Ret = ERR_NONE;
		
	while( *pStr != '\0' )
 800192c:	2b00      	cmp	r3, #0
 800192e:	d1f7      	bne.n	8001920 <Hw_CLcd_WriteStr+0xc>
		Ret |= Hw_CLcd_WriteChar( *pStr );
		pStr++;
	}
		
	return Ret;
}
 8001930:	4620      	mov	r0, r4
 8001932:	bd70      	pop	{r4, r5, r6, pc}
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_CLcd_WriteStr( char *pStr )
{
	u16 Ret = ERR_NONE;
 8001934:	461c      	mov	r4, r3
 8001936:	e7fb      	b.n	8001930 <Hw_CLcd_WriteStr+0x1c>
 8001938:	08001895 	.word	0x08001895

0800193c <Hw_CLcd_Print>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_CLcd_Print( u8 x_str, u8 y_str,  char *format, ... )
{
 800193c:	b40c      	push	{r2, r3}
 800193e:	b530      	push	{r4, r5, lr}
 8001940:	b0b3      	sub	sp, #204	; 0xcc
	char Str[200];
	Lb_va_list ap;

	Lb_va_start( ap, format );
		
	Lb_vsprintf(Str, format, ap);	
 8001942:	aa36      	add	r2, sp, #216	; 0xd8
 8001944:	f240 73cd 	movw	r3, #1997	; 0x7cd
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_CLcd_Print( u8 x_str, u8 y_str,  char *format, ... )
{
 8001948:	460c      	mov	r4, r1
 800194a:	4605      	mov	r5, r0
	char Str[200];
	Lb_va_list ap;

	Lb_va_start( ap, format );
		
	Lb_vsprintf(Str, format, ap);	
 800194c:	f852 1b04 	ldr.w	r1, [r2], #4
 8001950:	4668      	mov	r0, sp
 8001952:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001956:	4798      	blx	r3

	Hw_CLcd_Goto( x_str, y_str );
 8001958:	f641 03d9 	movw	r3, #6361	; 0x18d9
 800195c:	4621      	mov	r1, r4
 800195e:	4628      	mov	r0, r5
 8001960:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001964:	4798      	blx	r3
	Hw_CLcd_WriteStr( Str );		
 8001966:	f641 1315 	movw	r3, #6421	; 0x1915
 800196a:	4668      	mov	r0, sp
 800196c:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001970:	4798      	blx	r3
		
	Lb_va_end(ap);		
	
	return Ret;
}
 8001972:	2000      	movs	r0, #0
 8001974:	b033      	add	sp, #204	; 0xcc
 8001976:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800197a:	b002      	add	sp, #8
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop

08001980 <Hw_CLcd_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_CLcd_Init(void)
{	
 8001980:	b538      	push	{r3, r4, r5, lr}
	HW_CLCD_EN_CLR();
 8001982:	f241 3499 	movw	r4, #5017	; 0x1399
 8001986:	2014      	movs	r0, #20
 8001988:	2100      	movs	r1, #0
 800198a:	f6c0 0400 	movt	r4, #2048	; 0x800
 800198e:	47a0      	blx	r4
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_CLcd_Delay(u32 DlyData)
{
	Hw_Wait_Usec(DlyData);
 8001990:	f640 2519 	movw	r5, #2585	; 0xa19
     RET     : void
---------------------------------------------------------------------------*/
void Hw_CLcd_Init(void)
{	
	HW_CLCD_EN_CLR();
	HW_CLCD_RS_CLR();
 8001994:	2101      	movs	r1, #1
 8001996:	2014      	movs	r0, #20
 8001998:	47a0      	blx	r4
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_CLcd_Delay(u32 DlyData)
{
	Hw_Wait_Usec(DlyData);
 800199a:	f6c0 0500 	movt	r5, #2048	; 0x800
 800199e:	f242 7010 	movw	r0, #10000	; 0x2710
	HW_CLCD_EN_CLR();
	HW_CLCD_RS_CLR();
	
	Hw_CLcd_Delay(10000);	// delay 10ms
	
	Hw_CLcd_WriteCmd(0x3C);	// 2-line mode, display on
 80019a2:	f641 0451 	movw	r4, #6225	; 0x1851
 80019a6:	f6c0 0400 	movt	r4, #2048	; 0x800
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_CLcd_Delay(u32 DlyData)
{
	Hw_Wait_Usec(DlyData);
 80019aa:	47a8      	blx	r5
	HW_CLCD_EN_CLR();
	HW_CLCD_RS_CLR();
	
	Hw_CLcd_Delay(10000);	// delay 10ms
	
	Hw_CLcd_WriteCmd(0x3C);	// 2-line mode, display on
 80019ac:	203c      	movs	r0, #60	; 0x3c
 80019ae:	47a0      	blx	r4
	Hw_CLcd_WriteCmd(0x0C);	// display on, cursor off, blink off
 80019b0:	200c      	movs	r0, #12
 80019b2:	47a0      	blx	r4
	Hw_CLcd_WriteCmd(0x01);	// Display Clear
 80019b4:	2001      	movs	r0, #1
 80019b6:	47a0      	blx	r4
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_CLcd_Delay(u32 DlyData)
{
	Hw_Wait_Usec(DlyData);
 80019b8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80019bc:	47a8      	blx	r5
	
	Hw_CLcd_WriteCmd(0x3C);	// 2-line mode, display on
	Hw_CLcd_WriteCmd(0x0C);	// display on, cursor off, blink off
	Hw_CLcd_WriteCmd(0x01);	// Display Clear
	Hw_CLcd_Delay(2000);	// delay 2ms
	Hw_CLcd_WriteCmd(0x06);	// increment mode, entire shift off
 80019be:	2006      	movs	r0, #6
 80019c0:	47a0      	blx	r4
	u16 Ret = ERR_NONE;
	u8  Cmd;
	
	Cmd = 0x80 | 0x40*y | x;
	
	Hw_CLcd_WriteCmd( Cmd );
 80019c2:	2080      	movs	r0, #128	; 0x80
 80019c4:	47a0      	blx	r4
	Hw_CLcd_WriteCmd(0x01);	// Display Clear
	Hw_CLcd_Delay(2000);	// delay 2ms
	Hw_CLcd_WriteCmd(0x06);	// increment mode, entire shift off

	Hw_CLcd_Goto(0,0);		
	Hw_CLcd_Clear();	
 80019c6:	f641 03f5 	movw	r3, #6389	; 0x18f5
 80019ca:	f6c0 0300 	movt	r3, #2048	; 0x800
 80019ce:	4798      	blx	r3
	
	Hw_CLcd_Print( 0, 0, "SmartRobot BD");
 80019d0:	f641 143d 	movw	r4, #6461	; 0x193d
 80019d4:	2000      	movs	r0, #0
 80019d6:	f243 6228 	movw	r2, #13864	; 0x3628
 80019da:	4601      	mov	r1, r0
 80019dc:	f6c0 0200 	movt	r2, #2048	; 0x800
 80019e0:	f6c0 0400 	movt	r4, #2048	; 0x800
 80019e4:	47a0      	blx	r4
	Hw_CLcd_Print( 0, 1, "Baram");
 80019e6:	f243 6238 	movw	r2, #13880	; 0x3638
 80019ea:	2000      	movs	r0, #0
 80019ec:	2101      	movs	r1, #1
 80019ee:	f6c0 0200 	movt	r2, #2048	; 0x800
 80019f2:	47a0      	blx	r4
 80019f4:	bd38      	pop	{r3, r4, r5, pc}
 80019f6:	bf00      	nop

080019f8 <EP1_IN_Callback>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void EP1_IN_Callback (void)
{
 80019f8:	b538      	push	{r3, r4, r5, lr}
  uint16_t USB_Tx_ptr;
  uint16_t USB_Tx_length;
  
  if (USB_Tx_State == 1)
 80019fa:	4b15      	ldr	r3, [pc, #84]	; (8001a50 <EP1_IN_Callback+0x58>)
 80019fc:	781a      	ldrb	r2, [r3, #0]
 80019fe:	2a01      	cmp	r2, #1
 8001a00:	d000      	beq.n	8001a04 <EP1_IN_Callback+0xc>
 8001a02:	bd38      	pop	{r3, r4, r5, pc}
  {
    if (USART_Rx_length == 0) 
 8001a04:	4c13      	ldr	r4, [pc, #76]	; (8001a54 <EP1_IN_Callback+0x5c>)
 8001a06:	6820      	ldr	r0, [r4, #0]
 8001a08:	b300      	cbz	r0, 8001a4c <EP1_IN_Callback+0x54>
    {
      USB_Tx_State = 0;
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
 8001a0a:	2840      	cmp	r0, #64	; 0x40
        USB_Tx_ptr = USART_Rx_ptr_out;
 8001a0c:	4a12      	ldr	r2, [pc, #72]	; (8001a58 <EP1_IN_Callback+0x60>)
    {
      USB_Tx_State = 0;
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
 8001a0e:	d814      	bhi.n	8001a3a <EP1_IN_Callback+0x42>
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
        USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;    
      }
      else 
      {
        USB_Tx_ptr = USART_Rx_ptr_out;
 8001a10:	6813      	ldr	r3, [r2, #0]
        USB_Tx_length = USART_Rx_length;
 8001a12:	b285      	uxth	r5, r0
        
        USART_Rx_ptr_out += USART_Rx_length;
 8001a14:	1818      	adds	r0, r3, r0
 8001a16:	6010      	str	r0, [r2, #0]
        USART_Rx_length = 0;
 8001a18:	2200      	movs	r2, #0
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
        USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;    
      }
      else 
      {
        USB_Tx_ptr = USART_Rx_ptr_out;
 8001a1a:	b29b      	uxth	r3, r3
        USB_Tx_length = USART_Rx_length;
        
        USART_Rx_ptr_out += USART_Rx_length;
        USART_Rx_length = 0;
 8001a1c:	6022      	str	r2, [r4, #0]
      }
      UserToPMABufferCopy(&USART_Rx_Buffer[USB_Tx_ptr], ENDP1_TXADDR, USB_Tx_length);
 8001a1e:	480f      	ldr	r0, [pc, #60]	; (8001a5c <EP1_IN_Callback+0x64>)
 8001a20:	21c0      	movs	r1, #192	; 0xc0
 8001a22:	18c0      	adds	r0, r0, r3
 8001a24:	462a      	mov	r2, r5
 8001a26:	4b0e      	ldr	r3, [pc, #56]	; (8001a60 <EP1_IN_Callback+0x68>)
 8001a28:	4798      	blx	r3
      SetEPTxCount(ENDP1, USB_Tx_length);
 8001a2a:	2001      	movs	r0, #1
 8001a2c:	4629      	mov	r1, r5
 8001a2e:	4b0d      	ldr	r3, [pc, #52]	; (8001a64 <EP1_IN_Callback+0x6c>)
 8001a30:	4798      	blx	r3
      SetEPTxValid(ENDP1); 
 8001a32:	2001      	movs	r0, #1
 8001a34:	4b0c      	ldr	r3, [pc, #48]	; (8001a68 <EP1_IN_Callback+0x70>)
 8001a36:	4798      	blx	r3
 8001a38:	bd38      	pop	{r3, r4, r5, pc}
      USB_Tx_State = 0;
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
        USB_Tx_ptr = USART_Rx_ptr_out;
 8001a3a:	6813      	ldr	r3, [r2, #0]
        USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
        
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
        USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;    
 8001a3c:	3840      	subs	r0, #64	; 0x40
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
        USB_Tx_ptr = USART_Rx_ptr_out;
        USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
        
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
 8001a3e:	f103 0140 	add.w	r1, r3, #64	; 0x40
        USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;    
 8001a42:	6020      	str	r0, [r4, #0]
      USB_Tx_State = 0;
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
        USB_Tx_ptr = USART_Rx_ptr_out;
 8001a44:	b29b      	uxth	r3, r3
        USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
        
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
 8001a46:	6011      	str	r1, [r2, #0]
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
        USB_Tx_ptr = USART_Rx_ptr_out;
        USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
 8001a48:	2540      	movs	r5, #64	; 0x40
 8001a4a:	e7e8      	b.n	8001a1e <EP1_IN_Callback+0x26>
  
  if (USB_Tx_State == 1)
  {
    if (USART_Rx_length == 0) 
    {
      USB_Tx_State = 0;
 8001a4c:	7018      	strb	r0, [r3, #0]
 8001a4e:	bd38      	pop	{r3, r4, r5, pc}
 8001a50:	200002e0 	.word	0x200002e0
 8001a54:	200002ec 	.word	0x200002ec
 8001a58:	200002e8 	.word	0x200002e8
 8001a5c:	20000adc 	.word	0x20000adc
 8001a60:	08002ded 	.word	0x08002ded
 8001a64:	0800302d 	.word	0x0800302d
 8001a68:	08002ef1 	.word	0x08002ef1

08001a6c <EP3_OUT_Callback>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void EP3_OUT_Callback(void)
{
 8001a6c:	b510      	push	{r4, lr}
  uint16_t USB_Rx_Cnt;
  
  /* Get the received data buffer and update the counter */
  USB_Rx_Cnt = USB_SIL_Read(EP3_OUT, USB_Rx_Buffer);
 8001a6e:	f640 2474 	movw	r4, #2676	; 0xa74
 8001a72:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8001a76:	f243 03ed 	movw	r3, #12525	; 0x30ed
 8001a7a:	4621      	mov	r1, r4
 8001a7c:	2003      	movs	r0, #3
 8001a7e:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001a82:	4798      	blx	r3
  
  /* USB data will be immediately processed, this allow next USB traffic being 
  NAKed till the end of the USART Xfer */
  
  USB_To_USART_Send_Data(USB_Rx_Buffer, USB_Rx_Cnt);
 8001a84:	f242 3315 	movw	r3, #8981	; 0x2315
 8001a88:	b2c1      	uxtb	r1, r0
 8001a8a:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001a8e:	4620      	mov	r0, r4
 8001a90:	4798      	blx	r3
 
  /* Enable the receive of data on EP3 */
  SetEPRxValid(ENDP3);
 8001a92:	f642 7315 	movw	r3, #12053	; 0x2f15
 8001a96:	2003      	movs	r0, #3
 8001a98:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001a9c:	4798      	blx	r3
 8001a9e:	bd10      	pop	{r4, pc}

08001aa0 <SOF_Callback>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SOF_Callback(void)
{
 8001aa0:	b508      	push	{r3, lr}
  static uint32_t FrameCount = 0;
  
  if(bDeviceState == CONFIGURED)
 8001aa2:	4b08      	ldr	r3, [pc, #32]	; (8001ac4 <SOF_Callback+0x24>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	2b05      	cmp	r3, #5
 8001aa8:	d000      	beq.n	8001aac <SOF_Callback+0xc>
 8001aaa:	bd08      	pop	{r3, pc}
  {
    if (FrameCount++ == VCOMPORT_IN_FRAME_INTERVAL)
 8001aac:	4b06      	ldr	r3, [pc, #24]	; (8001ac8 <SOF_Callback+0x28>)
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	1c51      	adds	r1, r2, #1
 8001ab2:	2a05      	cmp	r2, #5
 8001ab4:	6019      	str	r1, [r3, #0]
 8001ab6:	d1f8      	bne.n	8001aaa <SOF_Callback+0xa>
    {
      /* Reset the frame counter */
      FrameCount = 0;
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]
      
      /* Check the data to be sent through IN pipe */
      Handle_USBAsynchXfer();
 8001abc:	4b03      	ldr	r3, [pc, #12]	; (8001acc <SOF_Callback+0x2c>)
 8001abe:	4798      	blx	r3
 8001ac0:	e7f3      	b.n	8001aaa <SOF_Callback+0xa>
 8001ac2:	bf00      	nop
 8001ac4:	200002d4 	.word	0x200002d4
 8001ac8:	200002c0 	.word	0x200002c0
 8001acc:	08002341 	.word	0x08002341

08001ad0 <USB_Istr>:
void USB_Istr(void)
{
    uint32_t i=0;
 __IO uint32_t EP[8];
  
  wIstr = _GetISTR();
 8001ad0:	f645 4244 	movw	r2, #23620	; 0x5c44
 8001ad4:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8001ad8:	6813      	ldr	r3, [r2, #0]
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Istr(void)
{
 8001ada:	b570      	push	{r4, r5, r6, lr}
    uint32_t i=0;
 __IO uint32_t EP[8];
  
  wIstr = _GetISTR();
 8001adc:	4c6b      	ldr	r4, [pc, #428]	; (8001c8c <USB_Istr+0x1bc>)
 8001ade:	b29b      	uxth	r3, r3

  //printf("%x %x %x %x  ", wIstr >> 16, wIstr & 0x0000FFFF, wInterrupt_Mask >> 16, wInterrupt_Mask&0x0000FFFF);

#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
 8001ae0:	4d6b      	ldr	r5, [pc, #428]	; (8001c90 <USB_Istr+0x1c0>)
void USB_Istr(void)
{
    uint32_t i=0;
 __IO uint32_t EP[8];
  
  wIstr = _GetISTR();
 8001ae2:	8023      	strh	r3, [r4, #0]

  //printf("%x %x %x %x  ", wIstr >> 16, wIstr & 0x0000FFFF, wInterrupt_Mask >> 16, wInterrupt_Mask&0x0000FFFF);

#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
 8001ae4:	8821      	ldrh	r1, [r4, #0]
 8001ae6:	882b      	ldrh	r3, [r5, #0]
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Istr(void)
{
 8001ae8:	b088      	sub	sp, #32
  wIstr = _GetISTR();

  //printf("%x %x %x %x  ", wIstr >> 16, wIstr & 0x0000FFFF, wInterrupt_Mask >> 16, wInterrupt_Mask&0x0000FFFF);

#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
 8001aea:	4019      	ands	r1, r3
 8001aec:	f401 7100 	and.w	r1, r1, #512	; 0x200
 8001af0:	b289      	uxth	r1, r1
 8001af2:	2900      	cmp	r1, #0
 8001af4:	d168      	bne.n	8001bc8 <USB_Istr+0xf8>
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  
  
#if (IMR_MSK & ISTR_CTR)
  if (wIstr & ISTR_CTR & wInterrupt_Mask)
 8001af6:	8822      	ldrh	r2, [r4, #0]
 8001af8:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8001afc:	4213      	tst	r3, r2
 8001afe:	d15f      	bne.n	8001bc0 <USB_Istr+0xf0>
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  
#if (IMR_MSK & ISTR_RESET)
  if (wIstr & ISTR_RESET & wInterrupt_Mask)
 8001b00:	8822      	ldrh	r2, [r4, #0]
 8001b02:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8001b06:	4213      	tst	r3, r2
 8001b08:	d14e      	bne.n	8001ba8 <USB_Istr+0xd8>
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_ERR)
  if (wIstr & ISTR_ERR & wInterrupt_Mask)
 8001b0a:	8822      	ldrh	r2, [r4, #0]
 8001b0c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001b10:	4213      	tst	r3, r2
  {
    _SetISTR((uint16_t)CLR_ERR);
 8001b12:	bf1f      	itttt	ne
 8001b14:	f645 4244 	movwne	r2, #23620	; 0x5c44
 8001b18:	f2c4 0200 	movtne	r2, #16384	; 0x4000
 8001b1c:	f64d 71ff 	movwne	r1, #57343	; 0xdfff
 8001b20:	6011      	strne	r1, [r2, #0]
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_WKUP)
  if (wIstr & ISTR_WKUP & wInterrupt_Mask)
 8001b22:	8822      	ldrh	r2, [r4, #0]
 8001b24:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001b28:	4213      	tst	r3, r2
 8001b2a:	d131      	bne.n	8001b90 <USB_Istr+0xc0>
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_SUSP)
  if (wIstr & ISTR_SUSP & wInterrupt_Mask)
 8001b2c:	8822      	ldrh	r2, [r4, #0]
 8001b2e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001b32:	4213      	tst	r3, r2
 8001b34:	d00e      	beq.n	8001b54 <USB_Istr+0x84>
  {
	//printf(" in susp ");
    /* check if SUSPEND is possible */
    if(fSuspendEnabled)
 8001b36:	4b57      	ldr	r3, [pc, #348]	; (8001c94 <USB_Istr+0x1c4>)
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d125      	bne.n	8001b8a <USB_Istr+0xba>
    }
    else
    {
      //printf("l\n");    	
      /* if not possible then resume after xx ms */
      Resume(RESUME_LATER);
 8001b3e:	2002      	movs	r0, #2
 8001b40:	4b55      	ldr	r3, [pc, #340]	; (8001c98 <USB_Istr+0x1c8>)
 8001b42:	4798      	blx	r3
    }
    
    //printf(" out susp ");
    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    _SetISTR((uint16_t)CLR_SUSP);
 8001b44:	f645 4244 	movw	r2, #23620	; 0x5c44
 8001b48:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8001b4c:	f24f 71ff 	movw	r1, #63487	; 0xf7ff
 8001b50:	882b      	ldrh	r3, [r5, #0]
 8001b52:	6011      	str	r1, [r2, #0]
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/

#if (IMR_MSK & ISTR_ESOF)
  if (wIstr & ISTR_ESOF & wInterrupt_Mask)
 8001b54:	8822      	ldrh	r2, [r4, #0]
 8001b56:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8001b5a:	4213      	tst	r3, r2
 8001b5c:	d013      	beq.n	8001b86 <USB_Istr+0xb6>
  {
    /* clear ESOF flag in ISTR */
    _SetISTR((uint16_t)CLR_ESOF);
 8001b5e:	f645 4244 	movw	r2, #23620	; 0x5c44
 8001b62:	f64f 61ff 	movw	r1, #65279	; 0xfeff
 8001b66:	f2c4 0200 	movt	r2, #16384	; 0x4000
    
    if ((_GetFNR()&FNR_RXDP)!=0)
 8001b6a:	f645 4348 	movw	r3, #23624	; 0x5c48

#if (IMR_MSK & ISTR_ESOF)
  if (wIstr & ISTR_ESOF & wInterrupt_Mask)
  {
    /* clear ESOF flag in ISTR */
    _SetISTR((uint16_t)CLR_ESOF);
 8001b6e:	6011      	str	r1, [r2, #0]
    
    if ((_GetFNR()&FNR_RXDP)!=0)
 8001b70:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	0419      	lsls	r1, r3, #16
 8001b78:	d432      	bmi.n	8001be0 <USB_Istr+0x110>
        esof_counter = 0;
      }
    }
    else
    {
        esof_counter = 0;
 8001b7a:	4b48      	ldr	r3, [pc, #288]	; (8001c9c <USB_Istr+0x1cc>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]
    }
    
    /* resume handling timing is made with ESOFs */
    Resume(RESUME_ESOF); /* request without change of the machine state */
 8001b80:	2007      	movs	r0, #7
 8001b82:	4b45      	ldr	r3, [pc, #276]	; (8001c98 <USB_Istr+0x1c8>)
 8001b84:	4798      	blx	r3
#ifdef ESOF_CALLBACK
    ESOF_Callback();
#endif
  }
#endif
} /* USB_Istr */
 8001b86:	b008      	add	sp, #32
 8001b88:	bd70      	pop	{r4, r5, r6, pc}
	//printf(" in susp ");
    /* check if SUSPEND is possible */
    if(fSuspendEnabled)
    {
      //printf("k\n");
      Suspend();
 8001b8a:	4b45      	ldr	r3, [pc, #276]	; (8001ca0 <USB_Istr+0x1d0>)
 8001b8c:	4798      	blx	r3
 8001b8e:	e7d9      	b.n	8001b44 <USB_Istr+0x74>
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_WKUP)
  if (wIstr & ISTR_WKUP & wInterrupt_Mask)
  {
    _SetISTR((uint16_t)CLR_WKUP);
 8001b90:	f645 4344 	movw	r3, #23620	; 0x5c44
 8001b94:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001b98:	f64e 72ff 	movw	r2, #61439	; 0xefff
 8001b9c:	601a      	str	r2, [r3, #0]
    Resume(RESUME_EXTERNAL);
 8001b9e:	2000      	movs	r0, #0
 8001ba0:	4b3d      	ldr	r3, [pc, #244]	; (8001c98 <USB_Istr+0x1c8>)
 8001ba2:	4798      	blx	r3
 8001ba4:	882b      	ldrh	r3, [r5, #0]
 8001ba6:	e7c1      	b.n	8001b2c <USB_Istr+0x5c>
#if (IMR_MSK & ISTR_RESET)
  if (wIstr & ISTR_RESET & wInterrupt_Mask)
  {
  	//printf(" ISTR_RESET ");
  	
    _SetISTR((uint16_t)CLR_RESET);
 8001ba8:	f645 4344 	movw	r3, #23620	; 0x5c44
 8001bac:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001bb0:	f64f 32ff 	movw	r2, #64511	; 0xfbff
 8001bb4:	601a      	str	r2, [r3, #0]
    Device_Property.Reset();
 8001bb6:	4b3b      	ldr	r3, [pc, #236]	; (8001ca4 <USB_Istr+0x1d4>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	4798      	blx	r3
 8001bbc:	882b      	ldrh	r3, [r5, #0]
 8001bbe:	e7a4      	b.n	8001b0a <USB_Istr+0x3a>
#if (IMR_MSK & ISTR_CTR)
  if (wIstr & ISTR_CTR & wInterrupt_Mask)
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    CTR_LP();
 8001bc0:	4b39      	ldr	r3, [pc, #228]	; (8001ca8 <USB_Istr+0x1d8>)
 8001bc2:	4798      	blx	r3
 8001bc4:	882b      	ldrh	r3, [r5, #0]
 8001bc6:	e79b      	b.n	8001b00 <USB_Istr+0x30>
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
  {
	//printf(" ISTR_SOF ");

    _SetISTR((uint16_t)CLR_SOF);
    bIntPackSOF++;
 8001bc8:	4b38      	ldr	r3, [pc, #224]	; (8001cac <USB_Istr+0x1dc>)
#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
  {
	//printf(" ISTR_SOF ");

    _SetISTR((uint16_t)CLR_SOF);
 8001bca:	f64f 51ff 	movw	r1, #65023	; 0xfdff
 8001bce:	6011      	str	r1, [r2, #0]
    bIntPackSOF++;
 8001bd0:	781a      	ldrb	r2, [r3, #0]
 8001bd2:	3201      	adds	r2, #1
 8001bd4:	b2d2      	uxtb	r2, r2
 8001bd6:	701a      	strb	r2, [r3, #0]

#ifdef SOF_CALLBACK
    SOF_Callback();
 8001bd8:	4b35      	ldr	r3, [pc, #212]	; (8001cb0 <USB_Istr+0x1e0>)
 8001bda:	4798      	blx	r3
 8001bdc:	882b      	ldrh	r3, [r5, #0]
 8001bde:	e78a      	b.n	8001af6 <USB_Istr+0x26>
    _SetISTR((uint16_t)CLR_ESOF);
    
    if ((_GetFNR()&FNR_RXDP)!=0)
    {
      /* increment ESOF counter */
      esof_counter ++;
 8001be0:	492e      	ldr	r1, [pc, #184]	; (8001c9c <USB_Istr+0x1cc>)
 8001be2:	680b      	ldr	r3, [r1, #0]
 8001be4:	3301      	adds	r3, #1
 8001be6:	600b      	str	r3, [r1, #0]
      
      /* test if we enter in ESOF more than 3 times with FSUSP =0 and RXDP =1=>> possible missing SUSP flag*/
      if ((esof_counter >3)&&((_GetCNTR()&CNTR_FSUSP)==0))
 8001be8:	680b      	ldr	r3, [r1, #0]
 8001bea:	2b03      	cmp	r3, #3
 8001bec:	d9c8      	bls.n	8001b80 <USB_Istr+0xb0>
 8001bee:	f645 4240 	movw	r2, #23616	; 0x5c40
 8001bf2:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8001bf6:	6813      	ldr	r3, [r2, #0]
 8001bf8:	f013 0308 	ands.w	r3, r3, #8
 8001bfc:	d1c0      	bne.n	8001b80 <USB_Istr+0xb0>
      {           
        /* this a sequence to apply a force RESET*/
      
        /*Store CNTR value */
        wCNTR = _GetCNTR(); 
 8001bfe:	6810      	ldr	r0, [r2, #0]
 8001c00:	4d2c      	ldr	r5, [pc, #176]	; (8001cb4 <USB_Istr+0x1e4>)
 8001c02:	b280      	uxth	r0, r0
 8001c04:	f44f 42b8 	mov.w	r2, #23552	; 0x5c00
 8001c08:	6028      	str	r0, [r5, #0]
 8001c0a:	f2c4 0200 	movt	r2, #16384	; 0x4000
      
        /*Store endpoints registers status */
        for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 8001c0e:	f852 4b04 	ldr.w	r4, [r2], #4
 8001c12:	ae08      	add	r6, sp, #32
 8001c14:	eb06 0083 	add.w	r0, r6, r3, lsl #2
 8001c18:	3301      	adds	r3, #1
 8001c1a:	b2a4      	uxth	r4, r4
 8001c1c:	2b08      	cmp	r3, #8
 8001c1e:	f840 4c20 	str.w	r4, [r0, #-32]
 8001c22:	d1f4      	bne.n	8001c0e <USB_Istr+0x13e>
      
        /*apply FRES */
        wCNTR|=CNTR_FRES;
 8001c24:	682a      	ldr	r2, [r5, #0]
        _SetCNTR(wCNTR);
 8001c26:	f645 4340 	movw	r3, #23616	; 0x5c40
      
        /*Store endpoints registers status */
        for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
      
        /*apply FRES */
        wCNTR|=CNTR_FRES;
 8001c2a:	f042 0201 	orr.w	r2, r2, #1
 8001c2e:	602a      	str	r2, [r5, #0]
        _SetCNTR(wCNTR);
 8001c30:	682a      	ldr	r2, [r5, #0]
 8001c32:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001c36:	b292      	uxth	r2, r2
 8001c38:	601a      	str	r2, [r3, #0]
 
        /*clear FRES*/
        wCNTR&=~CNTR_FRES;
 8001c3a:	682a      	ldr	r2, [r5, #0]
        _SetCNTR(wCNTR);
      
        /*poll for RESET flag in ISTR*/
        while((_GetISTR()&ISTR_RESET) == 0);
 8001c3c:	f645 4044 	movw	r0, #23620	; 0x5c44
        /*apply FRES */
        wCNTR|=CNTR_FRES;
        _SetCNTR(wCNTR);
 
        /*clear FRES*/
        wCNTR&=~CNTR_FRES;
 8001c40:	f022 0201 	bic.w	r2, r2, #1
 8001c44:	602a      	str	r2, [r5, #0]
        _SetCNTR(wCNTR);
 8001c46:	682a      	ldr	r2, [r5, #0]
      
        /*poll for RESET flag in ISTR*/
        while((_GetISTR()&ISTR_RESET) == 0);
 8001c48:	f2c4 0000 	movt	r0, #16384	; 0x4000
        wCNTR|=CNTR_FRES;
        _SetCNTR(wCNTR);
 
        /*clear FRES*/
        wCNTR&=~CNTR_FRES;
        _SetCNTR(wCNTR);
 8001c4c:	b292      	uxth	r2, r2
 8001c4e:	601a      	str	r2, [r3, #0]
      
        /*poll for RESET flag in ISTR*/
        while((_GetISTR()&ISTR_RESET) == 0);
 8001c50:	6802      	ldr	r2, [r0, #0]
 8001c52:	f645 4344 	movw	r3, #23620	; 0x5c44
 8001c56:	0552      	lsls	r2, r2, #21
 8001c58:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001c5c:	d5f8      	bpl.n	8001c50 <USB_Istr+0x180>
  
        /* clear RESET flag in ISTR */
        _SetISTR((uint16_t)CLR_RESET);
 8001c5e:	f44f 42b8 	mov.w	r2, #23552	; 0x5c00
 8001c62:	f64f 30ff 	movw	r0, #64511	; 0xfbff
 8001c66:	6018      	str	r0, [r3, #0]
 8001c68:	f2c4 0200 	movt	r2, #16384	; 0x4000
   
       /*restore Enpoints*/
        for (i=0;i<8;i++)
 8001c6c:	2300      	movs	r3, #0
        _SetENDPOINT(i, EP[i]);
 8001c6e:	ac08      	add	r4, sp, #32
 8001c70:	eb04 0083 	add.w	r0, r4, r3, lsl #2
 8001c74:	f850 0c20 	ldr.w	r0, [r0, #-32]
  
        /* clear RESET flag in ISTR */
        _SetISTR((uint16_t)CLR_RESET);
   
       /*restore Enpoints*/
        for (i=0;i<8;i++)
 8001c78:	3301      	adds	r3, #1
        _SetENDPOINT(i, EP[i]);
 8001c7a:	b280      	uxth	r0, r0
  
        /* clear RESET flag in ISTR */
        _SetISTR((uint16_t)CLR_RESET);
   
       /*restore Enpoints*/
        for (i=0;i<8;i++)
 8001c7c:	2b08      	cmp	r3, #8
        _SetENDPOINT(i, EP[i]);
 8001c7e:	f842 0b04 	str.w	r0, [r2], #4
  
        /* clear RESET flag in ISTR */
        _SetISTR((uint16_t)CLR_RESET);
   
       /*restore Enpoints*/
        for (i=0;i<8;i++)
 8001c82:	d1f4      	bne.n	8001c6e <USB_Istr+0x19e>
        _SetENDPOINT(i, EP[i]);
      
        esof_counter = 0;
 8001c84:	2300      	movs	r3, #0
 8001c86:	600b      	str	r3, [r1, #0]
 8001c88:	e77a      	b.n	8001b80 <USB_Istr+0xb0>
 8001c8a:	bf00      	nop
 8001c8c:	20000ab4 	.word	0x20000ab4
 8001c90:	20001310 	.word	0x20001310
 8001c94:	200002d8 	.word	0x200002d8
 8001c98:	080020cd 	.word	0x080020cd
 8001c9c:	200002cc 	.word	0x200002cc
 8001ca0:	08001f9d 	.word	0x08001f9d
 8001ca4:	2000006c 	.word	0x2000006c
 8001ca8:	08003125 	.word	0x08003125
 8001cac:	200002c8 	.word	0x200002c8
 8001cb0:	08001aa1 	.word	0x08001aa1
 8001cb4:	200002c4 	.word	0x200002c4

08001cb8 <Virtual_Com_Port_SetConfiguration>:
*******************************************************************************/
void Virtual_Com_Port_SetConfiguration(void)
{
  DEVICE_INFO *pInfo = &Device_Info;

  if (pInfo->Current_Configuration != 0)
 8001cb8:	4b03      	ldr	r3, [pc, #12]	; (8001cc8 <Virtual_Com_Port_SetConfiguration+0x10>)
 8001cba:	7a9b      	ldrb	r3, [r3, #10]
 8001cbc:	b113      	cbz	r3, 8001cc4 <Virtual_Com_Port_SetConfiguration+0xc>
  {
    /* Device configured */
    bDeviceState = CONFIGURED;
 8001cbe:	4b03      	ldr	r3, [pc, #12]	; (8001ccc <Virtual_Com_Port_SetConfiguration+0x14>)
 8001cc0:	2205      	movs	r2, #5
 8001cc2:	601a      	str	r2, [r3, #0]
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	200012ec 	.word	0x200012ec
 8001ccc:	200002d4 	.word	0x200002d4

08001cd0 <Virtual_Com_Port_SetDeviceAddress>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_SetDeviceAddress (void)
{
  bDeviceState = ADDRESSED;
 8001cd0:	f240 23d4 	movw	r3, #724	; 0x2d4
 8001cd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001cd8:	2204      	movs	r2, #4
 8001cda:	601a      	str	r2, [r3, #0]
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop

08001ce0 <Virtual_Com_Port_Status_In>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Status_In(void)
{
  if (Request == SET_LINE_CODING)
 8001ce0:	4b03      	ldr	r3, [pc, #12]	; (8001cf0 <Virtual_Com_Port_Status_In+0x10>)
 8001ce2:	781a      	ldrb	r2, [r3, #0]
 8001ce4:	2a20      	cmp	r2, #32
 8001ce6:	d101      	bne.n	8001cec <Virtual_Com_Port_Status_In+0xc>
  {
    //USART_Config();
    Request = 0;
 8001ce8:	2200      	movs	r2, #0
 8001cea:	701a      	strb	r2, [r3, #0]
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	200002d0 	.word	0x200002d0

08001cf4 <Virtual_Com_Port_Status_Out>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Status_Out(void)
{}
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop

08001cf8 <Virtual_Com_Port_Data_Setup>:
{
  uint8_t    *(*CopyRoutine)(uint16_t);

  CopyRoutine = NULL;

  if (RequestNo == GET_LINE_CODING)
 8001cf8:	2821      	cmp	r0, #33	; 0x21
* Input          : Request Nb.
* Output         : None.
* Return         : USB_UNSUPPORT or USB_SUCCESS.
*******************************************************************************/
RESULT Virtual_Com_Port_Data_Setup(uint8_t RequestNo)
{
 8001cfa:	b510      	push	{r4, lr}
 8001cfc:	4603      	mov	r3, r0
  uint8_t    *(*CopyRoutine)(uint16_t);

  CopyRoutine = NULL;

  if (RequestNo == GET_LINE_CODING)
 8001cfe:	d003      	beq.n	8001d08 <Virtual_Com_Port_Data_Setup+0x10>
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    {
      CopyRoutine = Virtual_Com_Port_GetLineCoding;
    }
  }
  else if (RequestNo == SET_LINE_CODING)
 8001d00:	2820      	cmp	r0, #32
 8001d02:	d011      	beq.n	8001d28 <Virtual_Com_Port_Data_Setup+0x30>
    Request = SET_LINE_CODING;
  }

  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
 8001d04:	2002      	movs	r0, #2
 8001d06:	bd10      	pop	{r4, pc}

  CopyRoutine = NULL;

  if (RequestNo == GET_LINE_CODING)
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 8001d08:	4a0f      	ldr	r2, [pc, #60]	; (8001d48 <Virtual_Com_Port_Data_Setup+0x50>)
 8001d0a:	6813      	ldr	r3, [r2, #0]
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d12:	2b21      	cmp	r3, #33	; 0x21
 8001d14:	d1f6      	bne.n	8001d04 <Virtual_Com_Port_Data_Setup+0xc>
    {
      CopyRoutine = Virtual_Com_Port_GetLineCoding;
 8001d16:	490d      	ldr	r1, [pc, #52]	; (8001d4c <Virtual_Com_Port_Data_Setup+0x54>)
  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
  }

  pInformation->Ctrl_Info.CopyData = CopyRoutine;
 8001d18:	6813      	ldr	r3, [r2, #0]
  pInformation->Ctrl_Info.Usb_wOffset = 0;
 8001d1a:	2400      	movs	r4, #0
  (*CopyRoutine)(0);
 8001d1c:	4620      	mov	r0, r4
  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
  }

  pInformation->Ctrl_Info.CopyData = CopyRoutine;
 8001d1e:	6199      	str	r1, [r3, #24]
  pInformation->Ctrl_Info.Usb_wOffset = 0;
 8001d20:	825c      	strh	r4, [r3, #18]
  (*CopyRoutine)(0);
 8001d22:	4788      	blx	r1
  return USB_SUCCESS;
 8001d24:	4620      	mov	r0, r4
 8001d26:	bd10      	pop	{r4, pc}
      CopyRoutine = Virtual_Com_Port_GetLineCoding;
    }
  }
  else if (RequestNo == SET_LINE_CODING)
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 8001d28:	4a07      	ldr	r2, [pc, #28]	; (8001d48 <Virtual_Com_Port_Data_Setup+0x50>)
 8001d2a:	6811      	ldr	r1, [r2, #0]
 8001d2c:	7809      	ldrb	r1, [r1, #0]
 8001d2e:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8001d32:	2921      	cmp	r1, #33	; 0x21
 8001d34:	d003      	beq.n	8001d3e <Virtual_Com_Port_Data_Setup+0x46>
    {
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
    }
    Request = SET_LINE_CODING;
 8001d36:	4a06      	ldr	r2, [pc, #24]	; (8001d50 <Virtual_Com_Port_Data_Setup+0x58>)
  }

  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
 8001d38:	2002      	movs	r0, #2
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    {
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
    }
    Request = SET_LINE_CODING;
 8001d3a:	7013      	strb	r3, [r2, #0]

  pInformation->Ctrl_Info.CopyData = CopyRoutine;
  pInformation->Ctrl_Info.Usb_wOffset = 0;
  (*CopyRoutine)(0);
  return USB_SUCCESS;
}
 8001d3c:	bd10      	pop	{r4, pc}
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    {
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
    }
    Request = SET_LINE_CODING;
 8001d3e:	4804      	ldr	r0, [pc, #16]	; (8001d50 <Virtual_Com_Port_Data_Setup+0x58>)
  }
  else if (RequestNo == SET_LINE_CODING)
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    {
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
 8001d40:	4904      	ldr	r1, [pc, #16]	; (8001d54 <Virtual_Com_Port_Data_Setup+0x5c>)
    }
    Request = SET_LINE_CODING;
 8001d42:	7003      	strb	r3, [r0, #0]
 8001d44:	e7e8      	b.n	8001d18 <Virtual_Com_Port_Data_Setup+0x20>
 8001d46:	bf00      	nop
 8001d48:	2000130c 	.word	0x2000130c
 8001d4c:	08001d8d 	.word	0x08001d8d
 8001d50:	200002d0 	.word	0x200002d0
 8001d54:	08001da5 	.word	0x08001da5

08001d58 <Virtual_Com_Port_NoData_Setup>:
* Return         : USB_UNSUPPORT or USB_SUCCESS.
*******************************************************************************/
RESULT Virtual_Com_Port_NoData_Setup(uint8_t RequestNo)
{

  if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 8001d58:	4b07      	ldr	r3, [pc, #28]	; (8001d78 <Virtual_Com_Port_NoData_Setup+0x20>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d62:	2b21      	cmp	r3, #33	; 0x21
 8001d64:	d001      	beq.n	8001d6a <Virtual_Com_Port_NoData_Setup+0x12>
    {
      return USB_SUCCESS;
    }
  }

  return USB_UNSUPPORT;
 8001d66:	2002      	movs	r0, #2
}
 8001d68:	4770      	bx	lr
RESULT Virtual_Com_Port_NoData_Setup(uint8_t RequestNo)
{

  if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
  {
    if (RequestNo == SET_COMM_FEATURE)
 8001d6a:	2802      	cmp	r0, #2
 8001d6c:	d001      	beq.n	8001d72 <Virtual_Com_Port_NoData_Setup+0x1a>
    {
      return USB_SUCCESS;
    }
    else if (RequestNo == SET_CONTROL_LINE_STATE)
 8001d6e:	2822      	cmp	r0, #34	; 0x22
 8001d70:	d1f9      	bne.n	8001d66 <Virtual_Com_Port_NoData_Setup+0xe>

  if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
  {
    if (RequestNo == SET_COMM_FEATURE)
    {
      return USB_SUCCESS;
 8001d72:	2000      	movs	r0, #0
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	2000130c 	.word	0x2000130c

08001d7c <Virtual_Com_Port_Get_Interface_Setting>:
* Output         : None.
* Return         : The address of the string descriptors.
*******************************************************************************/
RESULT Virtual_Com_Port_Get_Interface_Setting(uint8_t Interface, uint8_t AlternateSetting)
{
  if (AlternateSetting > 0)
 8001d7c:	b109      	cbz	r1, 8001d82 <Virtual_Com_Port_Get_Interface_Setting+0x6>
  {
    return USB_UNSUPPORT;
 8001d7e:	2002      	movs	r0, #2
 8001d80:	4770      	bx	lr
  }
  else if (Interface > 1)
 8001d82:	2801      	cmp	r0, #1
 8001d84:	d8fb      	bhi.n	8001d7e <Virtual_Com_Port_Get_Interface_Setting+0x2>
  {
    return USB_UNSUPPORT;
  }
  return USB_SUCCESS;
 8001d86:	4608      	mov	r0, r1
}
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop

08001d8c <Virtual_Com_Port_GetLineCoding>:
* Output         : None.
* Return         : Linecoding structure base address.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetLineCoding(uint16_t Length)
{
  if (Length == 0)
 8001d8c:	b108      	cbz	r0, 8001d92 <Virtual_Com_Port_GetLineCoding+0x6>
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
    return NULL;
  }
  return(uint8_t *)&linecoding;
 8001d8e:	4803      	ldr	r0, [pc, #12]	; (8001d9c <Virtual_Com_Port_GetLineCoding+0x10>)
}
 8001d90:	4770      	bx	lr
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetLineCoding(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
 8001d92:	4b03      	ldr	r3, [pc, #12]	; (8001da0 <Virtual_Com_Port_GetLineCoding+0x14>)
 8001d94:	2208      	movs	r2, #8
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	821a      	strh	r2, [r3, #16]
    return NULL;
 8001d9a:	4770      	bx	lr
 8001d9c:	200000e8 	.word	0x200000e8
 8001da0:	2000130c 	.word	0x2000130c

08001da4 <Virtual_Com_Port_SetLineCoding>:
* Output         : None.
* Return         : Linecoding structure base address.
*******************************************************************************/
uint8_t *Virtual_Com_Port_SetLineCoding(uint16_t Length)
{
  if (Length == 0)
 8001da4:	b108      	cbz	r0, 8001daa <Virtual_Com_Port_SetLineCoding+0x6>
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
    return NULL;
  }
  return(uint8_t *)&linecoding;
 8001da6:	4803      	ldr	r0, [pc, #12]	; (8001db4 <Virtual_Com_Port_SetLineCoding+0x10>)
}
 8001da8:	4770      	bx	lr
*******************************************************************************/
uint8_t *Virtual_Com_Port_SetLineCoding(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
 8001daa:	4b03      	ldr	r3, [pc, #12]	; (8001db8 <Virtual_Com_Port_SetLineCoding+0x14>)
 8001dac:	2208      	movs	r2, #8
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	821a      	strh	r2, [r3, #16]
    return NULL;
 8001db2:	4770      	bx	lr
 8001db4:	200000e8 	.word	0x200000e8
 8001db8:	2000130c 	.word	0x2000130c

08001dbc <Virtual_Com_Port_GetStringDescriptor>:
* Input          : Length.
* Output         : None.
* Return         : The address of the string descriptors.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetStringDescriptor(uint16_t Length)
{
 8001dbc:	b508      	push	{r3, lr}
  uint8_t wValue0 = pInformation->USBwValue0;
 8001dbe:	4b06      	ldr	r3, [pc, #24]	; (8001dd8 <Virtual_Com_Port_GetStringDescriptor+0x1c>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	78db      	ldrb	r3, [r3, #3]
  if (wValue0 > 4)
 8001dc4:	2b04      	cmp	r3, #4
 8001dc6:	d805      	bhi.n	8001dd4 <Virtual_Com_Port_GetStringDescriptor+0x18>
  {
    return NULL;
  }
  else
  {
    return Standard_GetDescriptorData(Length, &String_Descriptor[wValue0]);
 8001dc8:	4904      	ldr	r1, [pc, #16]	; (8001ddc <Virtual_Com_Port_GetStringDescriptor+0x20>)
 8001dca:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8001dce:	4b04      	ldr	r3, [pc, #16]	; (8001de0 <Virtual_Com_Port_GetStringDescriptor+0x24>)
 8001dd0:	4798      	blx	r3
 8001dd2:	bd08      	pop	{r3, pc}
uint8_t *Virtual_Com_Port_GetStringDescriptor(uint16_t Length)
{
  uint8_t wValue0 = pInformation->USBwValue0;
  if (wValue0 > 4)
  {
    return NULL;
 8001dd4:	2000      	movs	r0, #0
  }
  else
  {
    return Standard_GetDescriptorData(Length, &String_Descriptor[wValue0]);
  }
}
 8001dd6:	bd08      	pop	{r3, pc}
 8001dd8:	2000130c 	.word	0x2000130c
 8001ddc:	200000c8 	.word	0x200000c8
 8001de0:	08002801 	.word	0x08002801

08001de4 <Virtual_Com_Port_GetConfigDescriptor>:
* Input          : Length.
* Output         : None.
* Return         : The address of the configuration descriptor.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetConfigDescriptor(uint16_t Length)
{
 8001de4:	b508      	push	{r3, lr}
  return Standard_GetDescriptorData(Length, &Config_Descriptor);
 8001de6:	f240 0164 	movw	r1, #100	; 0x64
 8001dea:	f642 0301 	movw	r3, #10241	; 0x2801
 8001dee:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8001df2:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001df6:	4798      	blx	r3
}
 8001df8:	bd08      	pop	{r3, pc}
 8001dfa:	bf00      	nop

08001dfc <Virtual_Com_Port_GetDeviceDescriptor>:
* Input          : Length.
* Output         : None.
* Return         : The address of the device descriptor.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetDeviceDescriptor(uint16_t Length)
{
 8001dfc:	b508      	push	{r3, lr}
  return Standard_GetDescriptorData(Length, &Device_Descriptor);
 8001dfe:	f240 01c0 	movw	r1, #192	; 0xc0
 8001e02:	f642 0301 	movw	r3, #10241	; 0x2801
 8001e06:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8001e0a:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001e0e:	4798      	blx	r3
}
 8001e10:	bd08      	pop	{r3, pc}
 8001e12:	bf00      	nop

08001e14 <Virtual_Com_Port_Reset>:
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 8001e14:	f241 320c 	movw	r2, #4876	; 0x130c

  /* Current Feature initialization */
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 8001e18:	f243 63b4 	movw	r3, #14004	; 0x36b4
 8001e1c:	f6c0 0300 	movt	r3, #2048	; 0x800
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 8001e20:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8001e24:	6812      	ldr	r2, [r2, #0]

  /* Current Feature initialization */
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 8001e26:	79d9      	ldrb	r1, [r3, #7]
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
 8001e28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];

  /* Set Virtual_Com_Port DEVICE with the default Interface*/
  pInformation->Current_Interface = 0;

  SetBTABLE(BTABLE_ADDRESS);
 8001e2c:	f642 6345 	movw	r3, #11845	; 0x2e45
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 8001e30:	2400      	movs	r4, #0

  /* Current Feature initialization */
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 8001e32:	7251      	strb	r1, [r2, #9]
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 8001e34:	7294      	strb	r4, [r2, #10]

  /* Current Feature initialization */
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];

  /* Set Virtual_Com_Port DEVICE with the default Interface*/
  pInformation->Current_Interface = 0;
 8001e36:	72d4      	strb	r4, [r2, #11]

  SetBTABLE(BTABLE_ADDRESS);
 8001e38:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001e3c:	4620      	mov	r0, r4

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
 8001e3e:	f642 6659 	movw	r6, #11865	; 0x2e59
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];

  /* Set Virtual_Com_Port DEVICE with the default Interface*/
  pInformation->Current_Interface = 0;

  SetBTABLE(BTABLE_ADDRESS);
 8001e42:	4798      	blx	r3

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
 8001e44:	f6c0 0600 	movt	r6, #2048	; 0x800
 8001e48:	4620      	mov	r0, r4
 8001e4a:	f44f 7100 	mov.w	r1, #512	; 0x200
  SetEPTxStatus(ENDP0, EP_TX_STALL);
 8001e4e:	f642 6571 	movw	r5, #11889	; 0x2e71
  pInformation->Current_Interface = 0;

  SetBTABLE(BTABLE_ADDRESS);

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
 8001e52:	47b0      	blx	r6
  SetEPTxStatus(ENDP0, EP_TX_STALL);
 8001e54:	f6c0 0500 	movt	r5, #2048	; 0x800
 8001e58:	2110      	movs	r1, #16
 8001e5a:	4620      	mov	r0, r4
  SetEPRxAddr(ENDP0, ENDP0_RXADDR);
 8001e5c:	f642 7ac5 	movw	sl, #12229	; 0x2fc5

  SetBTABLE(BTABLE_ADDRESS);

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
  SetEPTxStatus(ENDP0, EP_TX_STALL);
 8001e60:	47a8      	blx	r5
  SetEPRxAddr(ENDP0, ENDP0_RXADDR);
 8001e62:	f6c0 0a00 	movt	sl, #2048	; 0x800
 8001e66:	2140      	movs	r1, #64	; 0x40
 8001e68:	4620      	mov	r0, r4
  SetEPTxAddr(ENDP0, ENDP0_TXADDR);
 8001e6a:	f642 78a1 	movw	r8, #12193	; 0x2fa1
  SetBTABLE(BTABLE_ADDRESS);

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
  SetEPTxStatus(ENDP0, EP_TX_STALL);
  SetEPRxAddr(ENDP0, ENDP0_RXADDR);
 8001e6e:	47d0      	blx	sl
  SetEPTxAddr(ENDP0, ENDP0_TXADDR);
 8001e70:	f6c0 0800 	movt	r8, #2048	; 0x800
 8001e74:	2180      	movs	r1, #128	; 0x80
 8001e76:	4620      	mov	r0, r4
 8001e78:	47c0      	blx	r8
  Clear_Status_Out(ENDP0);
 8001e7a:	f642 7339 	movw	r3, #12089	; 0x2f39
 8001e7e:	4620      	mov	r0, r4
 8001e80:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001e84:	4798      	blx	r3
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 8001e86:	f240 036c 	movw	r3, #108	; 0x6c
 8001e8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001e8e:	f243 094d 	movw	r9, #12365	; 0x304d
 8001e92:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
 8001e96:	f6c0 0900 	movt	r9, #2048	; 0x800
 8001e9a:	4620      	mov	r0, r4
 8001e9c:	47c8      	blx	r9
  SetEPRxValid(ENDP0);
 8001e9e:	f642 7315 	movw	r3, #12053	; 0x2f15
 8001ea2:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001ea6:	4620      	mov	r0, r4
 8001ea8:	4798      	blx	r3

  /* Initialize Endpoint 1 */
  SetEPType(ENDP1, EP_BULK);
 8001eaa:	2001      	movs	r0, #1
 8001eac:	4621      	mov	r1, r4
 8001eae:	47b0      	blx	r6
  SetEPTxAddr(ENDP1, ENDP1_TXADDR);
 8001eb0:	2001      	movs	r0, #1
 8001eb2:	21c0      	movs	r1, #192	; 0xc0
 8001eb4:	47c0      	blx	r8
  SetEPTxStatus(ENDP1, EP_TX_NAK);
  SetEPRxStatus(ENDP1, EP_RX_DIS);
 8001eb6:	f642 67b1 	movw	r7, #11953	; 0x2eb1
  SetEPRxValid(ENDP0);

  /* Initialize Endpoint 1 */
  SetEPType(ENDP1, EP_BULK);
  SetEPTxAddr(ENDP1, ENDP1_TXADDR);
  SetEPTxStatus(ENDP1, EP_TX_NAK);
 8001eba:	2001      	movs	r0, #1
 8001ebc:	2120      	movs	r1, #32
 8001ebe:	47a8      	blx	r5
  SetEPRxStatus(ENDP1, EP_RX_DIS);
 8001ec0:	f6c0 0700 	movt	r7, #2048	; 0x800
 8001ec4:	2001      	movs	r0, #1
 8001ec6:	4621      	mov	r1, r4
 8001ec8:	47b8      	blx	r7

  /* Initialize Endpoint 2 */
  SetEPType(ENDP2, EP_INTERRUPT);
 8001eca:	2002      	movs	r0, #2
 8001ecc:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8001ed0:	47b0      	blx	r6
  SetEPTxAddr(ENDP2, ENDP2_TXADDR);
 8001ed2:	2002      	movs	r0, #2
 8001ed4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ed8:	47c0      	blx	r8
  SetEPRxStatus(ENDP2, EP_RX_DIS);
 8001eda:	2002      	movs	r0, #2
 8001edc:	4621      	mov	r1, r4
 8001ede:	47b8      	blx	r7
  SetEPTxStatus(ENDP2, EP_TX_NAK);
 8001ee0:	2002      	movs	r0, #2
 8001ee2:	2120      	movs	r1, #32
 8001ee4:	47a8      	blx	r5

  /* Initialize Endpoint 3 */
  SetEPType(ENDP3, EP_BULK);
 8001ee6:	2003      	movs	r0, #3
 8001ee8:	4621      	mov	r1, r4
 8001eea:	47b0      	blx	r6
  SetEPRxAddr(ENDP3, ENDP3_RXADDR);
 8001eec:	2003      	movs	r0, #3
 8001eee:	f44f 7188 	mov.w	r1, #272	; 0x110
 8001ef2:	47d0      	blx	sl
  SetEPRxCount(ENDP3, VIRTUAL_COM_PORT_DATA_SIZE);
 8001ef4:	2003      	movs	r0, #3
 8001ef6:	2140      	movs	r1, #64	; 0x40
 8001ef8:	47c8      	blx	r9
  SetEPRxStatus(ENDP3, EP_RX_VALID);
 8001efa:	2003      	movs	r0, #3
 8001efc:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8001f00:	47b8      	blx	r7
  SetEPTxStatus(ENDP3, EP_TX_DIS);
 8001f02:	4621      	mov	r1, r4
 8001f04:	2003      	movs	r0, #3
 8001f06:	47a8      	blx	r5

  /* Set this device to response on default address */
  SetDeviceAddress(0);
 8001f08:	f642 43f5 	movw	r3, #11509	; 0x2cf5
 8001f0c:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001f10:	4620      	mov	r0, r4
 8001f12:	4798      	blx	r3
  
  bDeviceState = ATTACHED;
 8001f14:	f240 23d4 	movw	r3, #724	; 0x2d4
 8001f18:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	601a      	str	r2, [r3, #0]
 8001f20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08001f24 <Virtual_Com_Port_init>:
void Virtual_Com_Port_init(void)
{

  /* Update the serial number string descriptor with the data from the unique
  ID*/
  Get_SerialNum();
 8001f24:	f242 33e5 	movw	r3, #9189	; 0x23e5
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_init(void)
{
 8001f28:	b510      	push	{r4, lr}

  /* Update the serial number string descriptor with the data from the unique
  ID*/
  Get_SerialNum();
 8001f2a:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001f2e:	4798      	blx	r3

  pInformation->Current_Configuration = 0;
 8001f30:	f241 330c 	movw	r3, #4876	; 0x130c
 8001f34:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	2400      	movs	r4, #0

  /* Connect the device */
  PowerOn();
 8001f3c:	f641 7361 	movw	r3, #8033	; 0x1f61

  /* Update the serial number string descriptor with the data from the unique
  ID*/
  Get_SerialNum();

  pInformation->Current_Configuration = 0;
 8001f40:	7294      	strb	r4, [r2, #10]

  /* Connect the device */
  PowerOn();
 8001f42:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001f46:	4798      	blx	r3

  /* Perform basic device initialization operations */
  USB_SIL_Init();
 8001f48:	f243 03c1 	movw	r3, #12481	; 0x30c1
 8001f4c:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001f50:	4798      	blx	r3

  /* configure the USART to the default settings */
  //USART_Config_Default();

  bDeviceState = UNCONNECTED;
 8001f52:	f240 23d4 	movw	r3, #724	; 0x2d4
 8001f56:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001f5a:	601c      	str	r4, [r3, #0]
 8001f5c:	bd10      	pop	{r4, pc}
 8001f5e:	bf00      	nop

08001f60 <PowerOn>:
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
RESULT PowerOn(void)
{
 8001f60:	b538      	push	{r3, r4, r5, lr}
  uint16_t wRegVal;

  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);
 8001f62:	f242 23f9 	movw	r3, #8953	; 0x22f9
 8001f66:	2001      	movs	r0, #1
 8001f68:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001f6c:	4798      	blx	r3

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
  /*** Clear pending interrupts ***/
  _SetISTR(0);
 8001f6e:	f645 4544 	movw	r5, #23620	; 0x5c44
  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);

  /*** CNTR_PWDN = 0 ***/
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);
 8001f72:	f645 4340 	movw	r3, #23616	; 0x5c40
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
  /*** Clear pending interrupts ***/
  _SetISTR(0);
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 8001f76:	f241 3210 	movw	r2, #4880	; 0x1310
  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);

  /*** CNTR_PWDN = 0 ***/
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);
 8001f7a:	f2c4 0300 	movt	r3, #16384	; 0x4000

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
 8001f7e:	2100      	movs	r1, #0
  /*** Clear pending interrupts ***/
  _SetISTR(0);
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 8001f80:	f44f 54e0 	mov.w	r4, #7168	; 0x1c00
  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);

  /*** CNTR_PWDN = 0 ***/
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);
 8001f84:	2001      	movs	r0, #1

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
  /*** Clear pending interrupts ***/
  _SetISTR(0);
 8001f86:	f2c4 0500 	movt	r5, #16384	; 0x4000
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 8001f8a:	f2c2 0200 	movt	r2, #8192	; 0x2000
  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);

  /*** CNTR_PWDN = 0 ***/
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);
 8001f8e:	6018      	str	r0, [r3, #0]

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
 8001f90:	6019      	str	r1, [r3, #0]
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
  _SetCNTR(wInterrupt_Mask);
  
  return USB_SUCCESS;
}
 8001f92:	4608      	mov	r0, r1

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
  /*** Clear pending interrupts ***/
  _SetISTR(0);
 8001f94:	6029      	str	r1, [r5, #0]
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 8001f96:	8014      	strh	r4, [r2, #0]
  _SetCNTR(wInterrupt_Mask);
 8001f98:	601c      	str	r4, [r3, #0]
  
  return USB_SUCCESS;
}
 8001f9a:	bd38      	pop	{r3, r4, r5, pc}

08001f9c <Suspend>:
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
void Suspend(void)
{
 8001f9c:	b570      	push	{r4, r5, r6, lr}
	uint32_t i =0;
	uint16_t wCNTR;
	uint32_t tmpreg = 0;
  __IO uint32_t savePWR_CR=0;
 8001f9e:	2300      	movs	r3, #0
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
void Suspend(void)
{
 8001fa0:	b082      	sub	sp, #8
  __IO uint32_t savePWR_CR=0;
	/* suspend preparation */
	/* ... */
	
	/*Store CNTR value */
	wCNTR = _GetCNTR();  
 8001fa2:	f645 4140 	movw	r1, #23616	; 0x5c40
 8001fa6:	f2c4 0100 	movt	r1, #16384	; 0x4000
void Suspend(void)
{
	uint32_t i =0;
	uint16_t wCNTR;
	uint32_t tmpreg = 0;
  __IO uint32_t savePWR_CR=0;
 8001faa:	9301      	str	r3, [sp, #4]
	/* suspend preparation */
	/* ... */
	
	/*Store CNTR value */
	wCNTR = _GetCNTR();  
 8001fac:	f44f 42b8 	mov.w	r2, #23552	; 0x5c00
 8001fb0:	680d      	ldr	r5, [r1, #0]
 8001fb2:	493a      	ldr	r1, [pc, #232]	; (800209c <Suspend+0x100>)
 8001fb4:	f2c4 0200 	movt	r2, #16384	; 0x4000

    /* This a sequence to apply a force RESET to handle a robustness case */
    
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 8001fb8:	f852 0b04 	ldr.w	r0, [r2], #4
 8001fbc:	b280      	uxth	r0, r0
 8001fbe:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	2b08      	cmp	r3, #8
 8001fc6:	d1f7      	bne.n	8001fb8 <Suspend+0x1c>
	
	/* unmask RESET flag */
	wCNTR|=CNTR_RESETM;
	_SetCNTR(wCNTR);
 8001fc8:	b2aa      	uxth	r2, r5
	/*apply FRES */
	wCNTR|=CNTR_FRES;
	_SetCNTR(wCNTR);
	
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
 8001fca:	f64f 74fe 	movw	r4, #65534	; 0xfffe
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
	
	/* unmask RESET flag */
	wCNTR|=CNTR_RESETM;
	_SetCNTR(wCNTR);
 8001fce:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001fd2:	f645 4340 	movw	r3, #23616	; 0x5c40
	/*apply FRES */
	wCNTR|=CNTR_FRES;
	_SetCNTR(wCNTR);
	
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
 8001fd6:	402c      	ands	r4, r5
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
	
	/* unmask RESET flag */
	wCNTR|=CNTR_RESETM;
	_SetCNTR(wCNTR);
 8001fd8:	f2c4 0300 	movt	r3, #16384	; 0x4000
	
	/*apply FRES */
	wCNTR|=CNTR_FRES;
	_SetCNTR(wCNTR);
 8001fdc:	f042 0601 	orr.w	r6, r2, #1
	
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
 8001fe0:	f444 6580 	orr.w	r5, r4, #1024	; 0x400
	_SetCNTR(wCNTR);
	
	/*poll for RESET flag in ISTR*/
	while((_GetISTR()&ISTR_RESET) == 0);
 8001fe4:	f645 4044 	movw	r0, #23620	; 0x5c44
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
	
	/* unmask RESET flag */
	wCNTR|=CNTR_RESETM;
	_SetCNTR(wCNTR);
 8001fe8:	601a      	str	r2, [r3, #0]
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
	_SetCNTR(wCNTR);
	
	/*poll for RESET flag in ISTR*/
	while((_GetISTR()&ISTR_RESET) == 0);
 8001fea:	f2c4 0000 	movt	r0, #16384	; 0x4000
	wCNTR|=CNTR_RESETM;
	_SetCNTR(wCNTR);
	
	/*apply FRES */
	wCNTR|=CNTR_FRES;
	_SetCNTR(wCNTR);
 8001fee:	601e      	str	r6, [r3, #0]
	
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
	_SetCNTR(wCNTR);
 8001ff0:	601d      	str	r5, [r3, #0]
	
	/*poll for RESET flag in ISTR*/
	while((_GetISTR()&ISTR_RESET) == 0);
 8001ff2:	6802      	ldr	r2, [r0, #0]
 8001ff4:	f645 4344 	movw	r3, #23620	; 0x5c44
 8001ff8:	0552      	lsls	r2, r2, #21
 8001ffa:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001ffe:	d5f8      	bpl.n	8001ff2 <Suspend+0x56>
	
	/* clear RESET flag in ISTR */
	_SetISTR((uint16_t)CLR_RESET);
 8002000:	f44f 42b8 	mov.w	r2, #23552	; 0x5c00
 8002004:	f64f 30ff 	movw	r0, #64511	; 0xfbff
 8002008:	6018      	str	r0, [r3, #0]
 800200a:	f2c4 0200 	movt	r2, #16384	; 0x4000
	
	/*restore Enpoints*/
	for (i=0;i<8;i++)
 800200e:	2300      	movs	r3, #0
	_SetENDPOINT(i, EP[i]);
 8002010:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
	
	/* clear RESET flag in ISTR */
	_SetISTR((uint16_t)CLR_RESET);
	
	/*restore Enpoints*/
	for (i=0;i<8;i++)
 8002014:	3301      	adds	r3, #1
	_SetENDPOINT(i, EP[i]);
 8002016:	b280      	uxth	r0, r0
	
	/* clear RESET flag in ISTR */
	_SetISTR((uint16_t)CLR_RESET);
	
	/*restore Enpoints*/
	for (i=0;i<8;i++)
 8002018:	2b08      	cmp	r3, #8
	_SetENDPOINT(i, EP[i]);
 800201a:	f842 0b04 	str.w	r0, [r2], #4
	
	/* clear RESET flag in ISTR */
	_SetISTR((uint16_t)CLR_RESET);
	
	/*restore Enpoints*/
	for (i=0;i<8;i++)
 800201e:	d1f7      	bne.n	8002010 <Suspend+0x74>
	_SetENDPOINT(i, EP[i]);
	
	/* Now it is safe to enter macrocell in suspend mode */
	wCNTR |= CNTR_FSUSP;
	_SetCNTR(wCNTR);
 8002020:	f645 4340 	movw	r3, #23616	; 0x5c40
 8002024:	f2c4 0300 	movt	r3, #16384	; 0x4000
	/*restore Enpoints*/
	for (i=0;i<8;i++)
	_SetENDPOINT(i, EP[i]);
	
	/* Now it is safe to enter macrocell in suspend mode */
	wCNTR |= CNTR_FSUSP;
 8002028:	f444 6481 	orr.w	r4, r4, #1032	; 0x408
	_SetCNTR(wCNTR);
 800202c:	601c      	str	r4, [r3, #0]
	
	/* force low-power mode in the macrocell */
	wCNTR = _GetCNTR();
 800202e:	6819      	ldr	r1, [r3, #0]
	wCNTR |= CNTR_LPMODE;
	_SetCNTR(wCNTR);
	
	/*prepare entry in low power mode (STOP mode)*/
	/* Select the regulator state in STOP mode*/
	savePWR_CR = REG_PWR_CR;
 8002030:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
	_SetCNTR(wCNTR);
	
	/* force low-power mode in the macrocell */
	wCNTR = _GetCNTR();
	wCNTR |= CNTR_LPMODE;
	_SetCNTR(wCNTR);
 8002034:	b289      	uxth	r1, r1
 8002036:	f041 0104 	orr.w	r1, r1, #4
 800203a:	6019      	str	r1, [r3, #0]
	
	/*prepare entry in low power mode (STOP mode)*/
	/* Select the regulator state in STOP mode*/
	savePWR_CR = REG_PWR_CR;
 800203c:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8002040:	6811      	ldr	r1, [r2, #0]
	REG_PWR_CR = tmpreg;
	/* Set SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)
        SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
#else
		REG_SCB_SCR |= SCB_SCR_SLEEPDEEP;       
 8002042:	f64e 5410 	movw	r4, #60688	; 0xed10
	wCNTR |= CNTR_LPMODE;
	_SetCNTR(wCNTR);
	
	/*prepare entry in low power mode (STOP mode)*/
	/* Select the regulator state in STOP mode*/
	savePWR_CR = REG_PWR_CR;
 8002046:	9101      	str	r1, [sp, #4]
	
	tmpreg = REG_PWR_CR;
 8002048:	6811      	ldr	r1, [r2, #0]
	REG_PWR_CR = tmpreg;
	/* Set SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)
        SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
#else
		REG_SCB_SCR |= SCB_SCR_SLEEPDEEP;       
 800204a:	f2ce 0400 	movt	r4, #57344	; 0xe000
	/* Select the regulator state in STOP mode*/
	savePWR_CR = REG_PWR_CR;
	
	tmpreg = REG_PWR_CR;
	/* Clear PDDS and LPDS bits */
	tmpreg &= ((uint32_t)0xFFFFFFFC);
 800204e:	f021 0103 	bic.w	r1, r1, #3
	/* Set LPDS bit according to PWR_Regulator value */
	tmpreg |= PWR_Regulator_LowPower;
 8002052:	f041 0101 	orr.w	r1, r1, #1
	/* Store the new value */
	REG_PWR_CR = tmpreg;
 8002056:	6011      	str	r1, [r2, #0]
	/* Set SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)
        SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
#else
		REG_SCB_SCR |= SCB_SCR_SLEEPDEEP;       
 8002058:	6820      	ldr	r0, [r4, #0]
#endif
	
	/* enter system in STOP mode, only when wakeup flag in not set */
	if((_GetISTR()&ISTR_WKUP)==0)
 800205a:	f645 4144 	movw	r1, #23620	; 0x5c44
	REG_PWR_CR = tmpreg;
	/* Set SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)
        SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
#else
		REG_SCB_SCR |= SCB_SCR_SLEEPDEEP;       
 800205e:	f040 0004 	orr.w	r0, r0, #4
 8002062:	6020      	str	r0, [r4, #0]
#endif
	
	/* enter system in STOP mode, only when wakeup flag in not set */
	if((_GetISTR()&ISTR_WKUP)==0)
 8002064:	f2c4 0100 	movt	r1, #16384	; 0x4000
 8002068:	6808      	ldr	r0, [r1, #0]
 800206a:	04c0      	lsls	r0, r0, #19
 800206c:	d50f      	bpl.n	800208e <Suspend+0xf2>
#endif
	}
	else
	{
		/* Clear Wakeup flag */
		_SetISTR(CLR_WKUP);
 800206e:	f64e 70ff 	movw	r0, #61439	; 0xefff
 8002072:	6008      	str	r0, [r1, #0]
		/* clear FSUSP to abort entry in suspend mode  */
        wCNTR = _GetCNTR();
 8002074:	6818      	ldr	r0, [r3, #0]
        wCNTR&=~CNTR_FSUSP;
 8002076:	f64f 71f7 	movw	r1, #65527	; 0xfff7
 800207a:	4001      	ands	r1, r0
        _SetCNTR(wCNTR);
 800207c:	6019      	str	r1, [r3, #0]
		
		/*restore sleep mode configuration */ 
		/* restore Power regulator config in sleep mode*/
		REG_PWR_CR = savePWR_CR;
 800207e:	9b01      	ldr	r3, [sp, #4]
 8002080:	6013      	str	r3, [r2, #0]
		
		/* Reset SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)		
                SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
#else
                REG_SCB_SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP);
 8002082:	6823      	ldr	r3, [r4, #0]
 8002084:	f023 0304 	bic.w	r3, r3, #4
 8002088:	6023      	str	r3, [r4, #0]
#endif
    }
}
 800208a:	b002      	add	sp, #8
 800208c:	bd70      	pop	{r4, r5, r6, pc}
#endif
	
	/* enter system in STOP mode, only when wakeup flag in not set */
	if((_GetISTR()&ISTR_WKUP)==0)
	{
		__WFI();
 800208e:	4b04      	ldr	r3, [pc, #16]	; (80020a0 <Suspend+0x104>)
 8002090:	4798      	blx	r3
		/* Reset SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)
                SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk); 
#else
                REG_SCB_SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP); 
 8002092:	6823      	ldr	r3, [r4, #0]
 8002094:	f023 0304 	bic.w	r3, r3, #4
 8002098:	6023      	str	r3, [r4, #0]
 800209a:	e7f6      	b.n	800208a <Suspend+0xee>
 800209c:	20000abc 	.word	0x20000abc
 80020a0:	08002429 	.word	0x08002429

080020a4 <Resume_Init>:
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
void Resume_Init(void)
{
 80020a4:	b510      	push	{r4, lr}
  /* ------------------ ONLY WITH BUS-POWERED DEVICES ---------------------- */
  /* restart the clocks */
  /* ...  */

  /* CNTR_LPMODE = 0 */
  wCNTR = _GetCNTR();
 80020a6:	f645 4440 	movw	r4, #23616	; 0x5c40
 80020aa:	f2c4 0400 	movt	r4, #16384	; 0x4000
 80020ae:	6823      	ldr	r3, [r4, #0]
  wCNTR &= (~CNTR_LPMODE);
 80020b0:	f64f 72fb 	movw	r2, #65531	; 0xfffb
 80020b4:	401a      	ands	r2, r3
  _SetCNTR(wCNTR);    
  
  /* restore full power */
  /* ... on connected devices */
  Leave_LowPowerMode();
 80020b6:	f242 2329 	movw	r3, #8745	; 0x2229
 80020ba:	f6c0 0300 	movt	r3, #2048	; 0x800
  /* ...  */

  /* CNTR_LPMODE = 0 */
  wCNTR = _GetCNTR();
  wCNTR &= (~CNTR_LPMODE);
  _SetCNTR(wCNTR);    
 80020be:	6022      	str	r2, [r4, #0]
  
  /* restore full power */
  /* ... on connected devices */
  Leave_LowPowerMode();
 80020c0:	4798      	blx	r3

  /* reset FSUSP bit */
  _SetCNTR(IMR_MSK);
 80020c2:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80020c6:	6023      	str	r3, [r4, #0]
 80020c8:	bd10      	pop	{r4, pc}
 80020ca:	bf00      	nop

080020cc <Resume>:
*                  decrementing of the ESOF counter in different states.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Resume(RESUME_STATE eResumeSetVal)
{
 80020cc:	b510      	push	{r4, lr}
  uint16_t wCNTR;

  if (eResumeSetVal != RESUME_ESOF)
    ResumeS.eState = eResumeSetVal;
 80020ce:	4c2b      	ldr	r4, [pc, #172]	; (800217c <Resume+0xb0>)
*******************************************************************************/
void Resume(RESUME_STATE eResumeSetVal)
{
  uint16_t wCNTR;

  if (eResumeSetVal != RESUME_ESOF)
 80020d0:	2807      	cmp	r0, #7
    ResumeS.eState = eResumeSetVal;
 80020d2:	bf18      	it	ne
 80020d4:	7020      	strbne	r0, [r4, #0]
  switch (ResumeS.eState)
 80020d6:	7823      	ldrb	r3, [r4, #0]
 80020d8:	2b05      	cmp	r3, #5
 80020da:	d819      	bhi.n	8002110 <Resume+0x44>
 80020dc:	e8df f003 	tbb	[pc, r3]
 80020e0:	2f2a221b 	.word	0x2f2a221b
 80020e4:	033a      	.short	0x033a
      _SetCNTR(wCNTR);
      ResumeS.eState = RESUME_ON;
      ResumeS.bESOFcnt = 10;
      break;
    case RESUME_ON:    
      ResumeS.bESOFcnt--;
 80020e6:	7863      	ldrb	r3, [r4, #1]
 80020e8:	3b01      	subs	r3, #1
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	7063      	strb	r3, [r4, #1]
      if (ResumeS.bESOFcnt == 0)
 80020ee:	7863      	ldrb	r3, [r4, #1]
 80020f0:	b983      	cbnz	r3, 8002114 <Resume+0x48>
      {
        wCNTR = _GetCNTR();
 80020f2:	f645 4240 	movw	r2, #23616	; 0x5c40
 80020f6:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80020fa:	6810      	ldr	r0, [r2, #0]
        wCNTR &= (~CNTR_RESUME);
 80020fc:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8002100:	4001      	ands	r1, r0
        _SetCNTR(wCNTR);
 8002102:	6011      	str	r1, [r2, #0]
        ResumeS.eState = RESUME_OFF;
 8002104:	4a1d      	ldr	r2, [pc, #116]	; (800217c <Resume+0xb0>)
 8002106:	2106      	movs	r1, #6
 8002108:	7011      	strb	r1, [r2, #0]
        remotewakeupon = 0;
 800210a:	4a1d      	ldr	r2, [pc, #116]	; (8002180 <Resume+0xb4>)
 800210c:	6013      	str	r3, [r2, #0]
 800210e:	bd10      	pop	{r4, pc}
      }
      break;
    case RESUME_OFF:
    case RESUME_ESOF:
    default:
      ResumeS.eState = RESUME_OFF;
 8002110:	2306      	movs	r3, #6
 8002112:	7023      	strb	r3, [r4, #0]
 8002114:	bd10      	pop	{r4, pc}
  if (eResumeSetVal != RESUME_ESOF)
    ResumeS.eState = eResumeSetVal;
  switch (ResumeS.eState)
  {
    case RESUME_EXTERNAL:
      if (remotewakeupon ==0)
 8002116:	4b1a      	ldr	r3, [pc, #104]	; (8002180 <Resume+0xb4>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d028      	beq.n	8002170 <Resume+0xa4>
        Resume_Init();
        ResumeS.eState = RESUME_OFF;
      }
      else /* RESUME detected during the RemoteWAkeup signalling => keep RemoteWakeup handling*/
      {
        ResumeS.eState = RESUME_ON;
 800211e:	2305      	movs	r3, #5
 8002120:	7023      	strb	r3, [r4, #0]
 8002122:	bd10      	pop	{r4, pc}
      }
      break;
    case RESUME_INTERNAL:
      Resume_Init();
 8002124:	4b17      	ldr	r3, [pc, #92]	; (8002184 <Resume+0xb8>)
 8002126:	4798      	blx	r3
      ResumeS.eState = RESUME_START;
 8002128:	2304      	movs	r3, #4
 800212a:	7023      	strb	r3, [r4, #0]
      remotewakeupon = 1;
 800212c:	4b14      	ldr	r3, [pc, #80]	; (8002180 <Resume+0xb4>)
 800212e:	2201      	movs	r2, #1
 8002130:	601a      	str	r2, [r3, #0]
      break;
 8002132:	bd10      	pop	{r4, pc}
    case RESUME_LATER:
      ResumeS.bESOFcnt = 2;
 8002134:	2302      	movs	r3, #2
 8002136:	7063      	strb	r3, [r4, #1]
      ResumeS.eState = RESUME_WAIT;
 8002138:	2303      	movs	r3, #3
 800213a:	7023      	strb	r3, [r4, #0]
      break;
 800213c:	bd10      	pop	{r4, pc}
    case RESUME_WAIT:
      ResumeS.bESOFcnt--;
 800213e:	7863      	ldrb	r3, [r4, #1]
 8002140:	3b01      	subs	r3, #1
 8002142:	b2db      	uxtb	r3, r3
 8002144:	7063      	strb	r3, [r4, #1]
      if (ResumeS.bESOFcnt == 0)
 8002146:	7863      	ldrb	r3, [r4, #1]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d1e3      	bne.n	8002114 <Resume+0x48>
        ResumeS.eState = RESUME_START;
 800214c:	4b0b      	ldr	r3, [pc, #44]	; (800217c <Resume+0xb0>)
 800214e:	2204      	movs	r2, #4
 8002150:	701a      	strb	r2, [r3, #0]
 8002152:	bd10      	pop	{r4, pc}
      break;
    case RESUME_START:
      wCNTR = _GetCNTR();
 8002154:	f645 4340 	movw	r3, #23616	; 0x5c40
 8002158:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800215c:	681a      	ldr	r2, [r3, #0]
      wCNTR |= CNTR_RESUME;
      _SetCNTR(wCNTR);
 800215e:	b292      	uxth	r2, r2
 8002160:	f042 0210 	orr.w	r2, r2, #16
 8002164:	601a      	str	r2, [r3, #0]
      ResumeS.eState = RESUME_ON;
 8002166:	2305      	movs	r3, #5
 8002168:	7023      	strb	r3, [r4, #0]
      ResumeS.bESOFcnt = 10;
 800216a:	230a      	movs	r3, #10
 800216c:	7063      	strb	r3, [r4, #1]
      break;
 800216e:	bd10      	pop	{r4, pc}
  switch (ResumeS.eState)
  {
    case RESUME_EXTERNAL:
      if (remotewakeupon ==0)
      {
        Resume_Init();
 8002170:	4b04      	ldr	r3, [pc, #16]	; (8002184 <Resume+0xb8>)
 8002172:	4798      	blx	r3
        ResumeS.eState = RESUME_OFF;
 8002174:	2306      	movs	r3, #6
 8002176:	7023      	strb	r3, [r4, #0]
 8002178:	bd10      	pop	{r4, pc}
 800217a:	bf00      	nop
 800217c:	20000ab8 	.word	0x20000ab8
 8002180:	200002dc 	.word	0x200002dc
 8002184:	080020a5 	.word	0x080020a5

08002188 <USBWakeUp_IRQHandler>:


void USBWakeUp_IRQHandler(void)
{
	//EXTI_ClearITPendingBit(EXTI_Line18);
	REG_EXTI_PR = (1 << 18 );
 8002188:	f240 4314 	movw	r3, #1044	; 0x414
 800218c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002190:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002194:	601a      	str	r2, [r3, #0]
 8002196:	4770      	bx	lr

08002198 <IntToUnicode>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
 8002198:	b430      	push	{r4, r5}
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 800219a:	b1ca      	cbz	r2, 80021d0 <IntToUnicode+0x38>
* Description    : Convert Hex 32Bits value into char.
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
 800219c:	1e55      	subs	r5, r2, #1
 800219e:	b2ed      	uxtb	r5, r5
 80021a0:	3501      	adds	r5, #1
 80021a2:	2300      	movs	r3, #0
 80021a4:	006d      	lsls	r5, r5, #1
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 80021a6:	461c      	mov	r4, r3
 80021a8:	e007      	b.n	80021ba <IntToUnicode+0x22>
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
 80021aa:	3230      	adds	r2, #48	; 0x30
 80021ac:	54ca      	strb	r2, [r1, r3]
* Description    : Convert Hex 32Bits value into char.
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
 80021ae:	18ca      	adds	r2, r1, r3
 80021b0:	3302      	adds	r3, #2
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
 80021b2:	0100      	lsls	r0, r0, #4
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 80021b4:	42ab      	cmp	r3, r5
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 80021b6:	7054      	strb	r4, [r2, #1]
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 80021b8:	d00a      	beq.n	80021d0 <IntToUnicode+0x38>
  {
    if( ((value >> 28)) < 0xA )
 80021ba:	0f02      	lsrs	r2, r0, #28
 80021bc:	2a09      	cmp	r2, #9
 80021be:	d9f4      	bls.n	80021aa <IntToUnicode+0x12>
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 80021c0:	3237      	adds	r2, #55	; 0x37
 80021c2:	54ca      	strb	r2, [r1, r3]
* Description    : Convert Hex 32Bits value into char.
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
 80021c4:	18ca      	adds	r2, r1, r3
 80021c6:	3302      	adds	r3, #2
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
 80021c8:	0100      	lsls	r0, r0, #4
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 80021ca:	42ab      	cmp	r3, r5
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 80021cc:	7054      	strb	r4, [r2, #1]
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 80021ce:	d1f4      	bne.n	80021ba <IntToUnicode+0x22>
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
  }
}
 80021d0:	bc30      	pop	{r4, r5}
 80021d2:	4770      	bx	lr

080021d4 <USB_LP_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void USB_LP_IRQHandler(void)
{
 80021d4:	b508      	push	{r3, lr}
	//printf("USB\n");	
	USB_Istr();
 80021d6:	f641 23d1 	movw	r3, #6865	; 0x1ad1
 80021da:	f6c0 0300 	movt	r3, #2048	; 0x800
 80021de:	4798      	blx	r3
 80021e0:	bd08      	pop	{r3, pc}
 80021e2:	bf00      	nop

080021e4 <Set_System>:
*******************************************************************************/
void Set_System(void)
{  	
	#if HW_USE_USB_SMARTROBOT_BD == 1
	//-- PC.13
	REG_GPIOC_CRH &= ~(0x0F << (20));	// Clear
 80021e4:	f241 0304 	movw	r3, #4100	; 0x1004
 80021e8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80021f2:	601a      	str	r2, [r3, #0]
	REG_GPIOC_CRH |=  (0x02 << (20));	// MODE, PC.13 Output mode, max speed 2Mhz
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80021fa:	601a      	str	r2, [r3, #0]
	REG_GPIOC_CRH |=  (0x00 << (22));	// CNF,  PC.13 General purpose output push-pul
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	601a      	str	r2, [r3, #0]
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop

08002204 <Set_USBClock>:
*******************************************************************************/
void Set_USBClock(void)
{
	//-- USB 72M * 2 / 3 = 48Mhz
	//
	CLR_BIT( REG_RCC_CFGR, 22 );	
 8002204:	f241 0204 	movw	r2, #4100	; 0x1004
 8002208:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800220c:	6811      	ldr	r1, [r2, #0]
	
	//-- USB Clock Enable 
	//
	SET_BIT( REG_RCC_APB1ENR, 23 );
 800220e:	f241 031c 	movw	r3, #4124	; 0x101c
*******************************************************************************/
void Set_USBClock(void)
{
	//-- USB 72M * 2 / 3 = 48Mhz
	//
	CLR_BIT( REG_RCC_CFGR, 22 );	
 8002212:	f421 0180 	bic.w	r1, r1, #4194304	; 0x400000
 8002216:	6011      	str	r1, [r2, #0]
	
	//-- USB Clock Enable 
	//
	SET_BIT( REG_RCC_APB1ENR, 23 );
 8002218:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002222:	601a      	str	r2, [r3, #0]
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop

08002228 <Leave_LowPowerMode>:
void Leave_LowPowerMode(void)
{
  DEVICE_INFO *pInfo = &Device_Info;

  /* Set the device state to the correct state */
  if (pInfo->Current_Configuration != 0)
 8002228:	4b05      	ldr	r3, [pc, #20]	; (8002240 <Leave_LowPowerMode+0x18>)
 800222a:	7a9b      	ldrb	r3, [r3, #10]
 800222c:	b91b      	cbnz	r3, 8002236 <Leave_LowPowerMode+0xe>
    /* Device configured */
    bDeviceState = CONFIGURED;
  }
  else
  {
    bDeviceState = ATTACHED;
 800222e:	4b05      	ldr	r3, [pc, #20]	; (8002244 <Leave_LowPowerMode+0x1c>)
 8002230:	2201      	movs	r2, #1
 8002232:	601a      	str	r2, [r3, #0]
 8002234:	4770      	bx	lr

  /* Set the device state to the correct state */
  if (pInfo->Current_Configuration != 0)
  {
    /* Device configured */
    bDeviceState = CONFIGURED;
 8002236:	4b03      	ldr	r3, [pc, #12]	; (8002244 <Leave_LowPowerMode+0x1c>)
 8002238:	2205      	movs	r2, #5
 800223a:	601a      	str	r2, [r3, #0]
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	200012ec 	.word	0x200012ec
 8002244:	200002d4 	.word	0x200002d4

08002248 <USB_Interrupts_Config>:
void USB_Interrupts_Config(void)
{

	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
 8002248:	f240 4214 	movw	r2, #1044	; 0x414
* Description    : Configures the USB interrupts
* Input          : None.
* Return         : None.
*******************************************************************************/
void USB_Interrupts_Config(void)
{
 800224c:	b538      	push	{r3, r4, r5, lr}

	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
 800224e:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8002252:	f44f 2180 	mov.w	r1, #262144	; 0x40000
	
	CLR_BIT( REG_EXTI_IMR,  18 );
 8002256:	f44f 6380 	mov.w	r3, #1024	; 0x400
void USB_Interrupts_Config(void)
{

	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
 800225a:	6011      	str	r1, [r2, #0]
	
	CLR_BIT( REG_EXTI_IMR,  18 );
 800225c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002260:	6819      	ldr	r1, [r3, #0]
	CLR_BIT( REG_EXTI_EMR,  18 );
 8002262:	f240 4204 	movw	r2, #1028	; 0x404

	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
	
	CLR_BIT( REG_EXTI_IMR,  18 );
 8002266:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 800226a:	6019      	str	r1, [r3, #0]
	CLR_BIT( REG_EXTI_EMR,  18 );
 800226c:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8002270:	6810      	ldr	r0, [r2, #0]
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
 8002272:	f44f 6181 	mov.w	r1, #1032	; 0x408
	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
	
	CLR_BIT( REG_EXTI_IMR,  18 );
	CLR_BIT( REG_EXTI_EMR,  18 );
 8002276:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 800227a:	6010      	str	r0, [r2, #0]
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
 800227c:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8002280:	6808      	ldr	r0, [r1, #0]
	CLR_BIT( REG_EXTI_FTSR, 18 );
 8002282:	f240 420c 	movw	r2, #1036	; 0x40c
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
	
	CLR_BIT( REG_EXTI_IMR,  18 );
	CLR_BIT( REG_EXTI_EMR,  18 );
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
 8002286:	f440 2080 	orr.w	r0, r0, #262144	; 0x40000
 800228a:	6008      	str	r0, [r1, #0]
	CLR_BIT( REG_EXTI_FTSR, 18 );
 800228c:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8002290:	6811      	ldr	r1, [r2, #0]
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
 8002292:	f640 54fd 	movw	r4, #3581	; 0xdfd
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
	
	CLR_BIT( REG_EXTI_IMR,  18 );
	CLR_BIT( REG_EXTI_EMR,  18 );
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
	CLR_BIT( REG_EXTI_FTSR, 18 );
 8002296:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 800229a:	6011      	str	r1, [r2, #0]
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable
 800229c:	681d      	ldr	r5, [r3, #0]

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
 800229e:	f242 11d5 	movw	r1, #8661	; 0x21d5
	
	CLR_BIT( REG_EXTI_IMR,  18 );
	CLR_BIT( REG_EXTI_EMR,  18 );
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
	CLR_BIT( REG_EXTI_FTSR, 18 );
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable
 80022a2:	f445 2580 	orr.w	r5, r5, #262144	; 0x40000

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
 80022a6:	2090      	movs	r0, #144	; 0x90
 80022a8:	f6c0 0100 	movt	r1, #2048	; 0x800
 80022ac:	2200      	movs	r2, #0
 80022ae:	f6c0 0400 	movt	r4, #2048	; 0x800
	
	CLR_BIT( REG_EXTI_IMR,  18 );
	CLR_BIT( REG_EXTI_EMR,  18 );
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
	CLR_BIT( REG_EXTI_FTSR, 18 );
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable
 80022b2:	601d      	str	r5, [r3, #0]

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
 80022b4:	47a0      	blx	r4
	SET_BIT( REG_NVIC_ISER( 20/32 ), 20%32 );	// NVIC 20번 USB_LP 인터럽트 활성화 
 80022b6:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 80022ba:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80022be:	681a      	ldr	r2, [r3, #0]
	
	Hw_ISR_SetIRQFuncByAddr( 0x00E8, (u32)USBWakeUp_IRQHandler, 0 );
 80022c0:	f242 1189 	movw	r1, #8585	; 0x2189
	CLR_BIT( REG_EXTI_FTSR, 18 );
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
	SET_BIT( REG_NVIC_ISER( 20/32 ), 20%32 );	// NVIC 20번 USB_LP 인터럽트 활성화 
 80022c4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80022c8:	601a      	str	r2, [r3, #0]
	
	Hw_ISR_SetIRQFuncByAddr( 0x00E8, (u32)USBWakeUp_IRQHandler, 0 );
 80022ca:	f6c0 0100 	movt	r1, #2048	; 0x800
 80022ce:	2200      	movs	r2, #0
 80022d0:	20e8      	movs	r0, #232	; 0xe8
 80022d2:	47a0      	blx	r4
	SET_BIT( REG_NVIC_ISER( 42/32 ), 42%32 );	// NVIC 42번 USB Wake Up 인터럽트 활성화 
 80022d4:	f24e 1204 	movw	r2, #57604	; 0xe104
 80022d8:	f2ce 0200 	movt	r2, #57344	; 0xe000
 80022dc:	6811      	ldr	r1, [r2, #0]

	SET_BIT( REG_EXTI_SWIER, 18 );
 80022de:	f44f 6382 	mov.w	r3, #1040	; 0x410
  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
	SET_BIT( REG_NVIC_ISER( 20/32 ), 20%32 );	// NVIC 20번 USB_LP 인터럽트 활성화 
	
	Hw_ISR_SetIRQFuncByAddr( 0x00E8, (u32)USBWakeUp_IRQHandler, 0 );
	SET_BIT( REG_NVIC_ISER( 42/32 ), 42%32 );	// NVIC 42번 USB Wake Up 인터럽트 활성화 
 80022e2:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 80022e6:	6011      	str	r1, [r2, #0]

	SET_BIT( REG_EXTI_SWIER, 18 );
 80022e8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80022f2:	601a      	str	r2, [r3, #0]
 80022f4:	bd38      	pop	{r3, r4, r5, pc}
 80022f6:	bf00      	nop

080022f8 <USB_Cable_Config>:
void USB_Cable_Config (char NewState)
{
  if (NewState != DISABLE)
  {
  	#if HW_USE_USB_SMARTROBOT_BD == 1
	CLR_BIT( REG_GPIOC_ODR, 13 );
 80022f8:	f241 030c 	movw	r3, #4108	; 0x100c
 80022fc:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002300:	681a      	ldr	r2, [r3, #0]
* Input          : None.
* Return         : Status
*******************************************************************************/
void USB_Cable_Config (char NewState)
{
  if (NewState != DISABLE)
 8002302:	b918      	cbnz	r0, 800230c <USB_Cable_Config+0x14>
	#endif
  }
  else
  {
  	#if HW_USE_USB_SMARTROBOT_BD == 1
	SET_BIT( REG_GPIOC_ODR, 13 );    
 8002304:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002308:	601a      	str	r2, [r3, #0]
 800230a:	4770      	bx	lr
void USB_Cable_Config (char NewState)
{
  if (NewState != DISABLE)
  {
  	#if HW_USE_USB_SMARTROBOT_BD == 1
	CLR_BIT( REG_GPIOC_ODR, 13 );
 800230c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002310:	601a      	str	r2, [r3, #0]
 8002312:	4770      	bx	lr

08002314 <USB_To_USART_Send_Data>:
* Input          : data_buffer: data address.
                   Nb_bytes: number of bytes to send.
* Return         : none.
*******************************************************************************/
void USB_To_USART_Send_Data(uint8_t* data_buffer, uint8_t Nb_bytes)
{
 8002314:	b5f0      	push	{r4, r5, r6, r7, lr}
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 8002316:	460d      	mov	r5, r1
* Input          : data_buffer: data address.
                   Nb_bytes: number of bytes to send.
* Return         : none.
*******************************************************************************/
void USB_To_USART_Send_Data(uint8_t* data_buffer, uint8_t Nb_bytes)
{
 8002318:	b083      	sub	sp, #12
 800231a:	4606      	mov	r6, r0
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 800231c:	b159      	cbz	r1, 8002336 <USB_To_USART_Send_Data+0x22>
 800231e:	4f07      	ldr	r7, [pc, #28]	; (800233c <USB_To_USART_Send_Data+0x28>)
 8002320:	2400      	movs	r4, #0
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 8002322:	5d33      	ldrb	r3, [r6, r4]
    Hw_Uart_Q_Push( 5, &UartData );	//
 8002324:	2005      	movs	r0, #5
 8002326:	f10d 0107 	add.w	r1, sp, #7
{
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 800232a:	3401      	adds	r4, #1
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 800232c:	f88d 3007 	strb.w	r3, [sp, #7]
    Hw_Uart_Q_Push( 5, &UartData );	//
 8002330:	47b8      	blx	r7
{
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 8002332:	42ac      	cmp	r4, r5
 8002334:	d3f5      	bcc.n	8002322 <USB_To_USART_Send_Data+0xe>
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
    Hw_Uart_Q_Push( 5, &UartData );	//
  }  
}
 8002336:	b003      	add	sp, #12
 8002338:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800233a:	bf00      	nop
 800233c:	08000d25 	.word	0x08000d25

08002340 <Handle_USBAsynchXfer>:
* Description    : send data to USB.
* Input          : None.
* Return         : none.
*******************************************************************************/
void Handle_USBAsynchXfer (void)
{
 8002340:	b570      	push	{r4, r5, r6, lr}
  
  uint16_t USB_Tx_ptr;
  uint16_t USB_Tx_length;
  
  if(USB_Tx_State != 1)
 8002342:	4c20      	ldr	r4, [pc, #128]	; (80023c4 <Handle_USBAsynchXfer+0x84>)
 8002344:	7823      	ldrb	r3, [r4, #0]
 8002346:	2b01      	cmp	r3, #1
 8002348:	d026      	beq.n	8002398 <Handle_USBAsynchXfer+0x58>
  {
    if (USART_Rx_ptr_out == USART_RX_DATA_SIZE)
 800234a:	4d1f      	ldr	r5, [pc, #124]	; (80023c8 <Handle_USBAsynchXfer+0x88>)
 800234c:	682b      	ldr	r3, [r5, #0]
 800234e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002352:	d022      	beq.n	800239a <Handle_USBAsynchXfer+0x5a>
    {
      USART_Rx_ptr_out = 0;
    }
    
    if(USART_Rx_ptr_out == USART_Rx_ptr_in) 
 8002354:	4a1d      	ldr	r2, [pc, #116]	; (80023cc <Handle_USBAsynchXfer+0x8c>)
 8002356:	6811      	ldr	r1, [r2, #0]
 8002358:	428b      	cmp	r3, r1
 800235a:	d02f      	beq.n	80023bc <Handle_USBAsynchXfer+0x7c>
 800235c:	bf98      	it	ls
 800235e:	b298      	uxthls	r0, r3
    {
      USB_Tx_State = 0; 
      return;
    }
    
    if(USART_Rx_ptr_out > USART_Rx_ptr_in) /* rollback */
 8002360:	d921      	bls.n	80023a6 <Handle_USBAsynchXfer+0x66>
    { 
      USART_Rx_length = USART_RX_DATA_SIZE - USART_Rx_ptr_out;
 8002362:	f5c3 6100 	rsb	r1, r3, #2048	; 0x800
 8002366:	4a1a      	ldr	r2, [pc, #104]	; (80023d0 <Handle_USBAsynchXfer+0x90>)
    else 
    {
      USART_Rx_length = USART_Rx_ptr_in - USART_Rx_ptr_out;
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
 8002368:	2940      	cmp	r1, #64	; 0x40
      return;
    }
    
    if(USART_Rx_ptr_out > USART_Rx_ptr_in) /* rollback */
    { 
      USART_Rx_length = USART_RX_DATA_SIZE - USART_Rx_ptr_out;
 800236a:	6011      	str	r1, [r2, #0]
 800236c:	b298      	uxth	r0, r3
    else 
    {
      USART_Rx_length = USART_Rx_ptr_in - USART_Rx_ptr_out;
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
 800236e:	d91f      	bls.n	80023b0 <Handle_USBAsynchXfer+0x70>
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
      
      USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;	
 8002370:	3340      	adds	r3, #64	; 0x40
      USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;	
 8002372:	3940      	subs	r1, #64	; 0x40
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
      
      USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;	
 8002374:	602b      	str	r3, [r5, #0]
      USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;	
 8002376:	6011      	str	r1, [r2, #0]
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
 8002378:	2640      	movs	r6, #64	; 0x40
      
      USART_Rx_ptr_out += USART_Rx_length;
      USART_Rx_length = 0;
    }
    USB_Tx_State = 1; 
    UserToPMABufferCopy(&USART_Rx_Buffer[USB_Tx_ptr], ENDP1_TXADDR, USB_Tx_length);
 800237a:	4b16      	ldr	r3, [pc, #88]	; (80023d4 <Handle_USBAsynchXfer+0x94>)
      USB_Tx_length = USART_Rx_length;
      
      USART_Rx_ptr_out += USART_Rx_length;
      USART_Rx_length = 0;
    }
    USB_Tx_State = 1; 
 800237c:	2501      	movs	r5, #1
    UserToPMABufferCopy(&USART_Rx_Buffer[USB_Tx_ptr], ENDP1_TXADDR, USB_Tx_length);
 800237e:	1818      	adds	r0, r3, r0
 8002380:	4632      	mov	r2, r6
 8002382:	21c0      	movs	r1, #192	; 0xc0
 8002384:	4b14      	ldr	r3, [pc, #80]	; (80023d8 <Handle_USBAsynchXfer+0x98>)
      USB_Tx_length = USART_Rx_length;
      
      USART_Rx_ptr_out += USART_Rx_length;
      USART_Rx_length = 0;
    }
    USB_Tx_State = 1; 
 8002386:	7025      	strb	r5, [r4, #0]
    UserToPMABufferCopy(&USART_Rx_Buffer[USB_Tx_ptr], ENDP1_TXADDR, USB_Tx_length);
 8002388:	4798      	blx	r3
    SetEPTxCount(ENDP1, USB_Tx_length);
 800238a:	4628      	mov	r0, r5
 800238c:	4b13      	ldr	r3, [pc, #76]	; (80023dc <Handle_USBAsynchXfer+0x9c>)
 800238e:	4631      	mov	r1, r6
 8002390:	4798      	blx	r3
    SetEPTxValid(ENDP1); 
 8002392:	4628      	mov	r0, r5
 8002394:	4b12      	ldr	r3, [pc, #72]	; (80023e0 <Handle_USBAsynchXfer+0xa0>)
 8002396:	4798      	blx	r3
 8002398:	bd70      	pop	{r4, r5, r6, pc}
    if (USART_Rx_ptr_out == USART_RX_DATA_SIZE)
    {
      USART_Rx_ptr_out = 0;
    }
    
    if(USART_Rx_ptr_out == USART_Rx_ptr_in) 
 800239a:	4b0c      	ldr	r3, [pc, #48]	; (80023cc <Handle_USBAsynchXfer+0x8c>)
  
  if(USB_Tx_State != 1)
  {
    if (USART_Rx_ptr_out == USART_RX_DATA_SIZE)
    {
      USART_Rx_ptr_out = 0;
 800239c:	2000      	movs	r0, #0
    }
    
    if(USART_Rx_ptr_out == USART_Rx_ptr_in) 
 800239e:	6819      	ldr	r1, [r3, #0]
  
  if(USB_Tx_State != 1)
  {
    if (USART_Rx_ptr_out == USART_RX_DATA_SIZE)
    {
      USART_Rx_ptr_out = 0;
 80023a0:	6028      	str	r0, [r5, #0]
    }
    
    if(USART_Rx_ptr_out == USART_Rx_ptr_in) 
 80023a2:	4603      	mov	r3, r0
 80023a4:	b151      	cbz	r1, 80023bc <Handle_USBAsynchXfer+0x7c>
    { 
      USART_Rx_length = USART_RX_DATA_SIZE - USART_Rx_ptr_out;
    }
    else 
    {
      USART_Rx_length = USART_Rx_ptr_in - USART_Rx_ptr_out;
 80023a6:	1ac9      	subs	r1, r1, r3
 80023a8:	4a09      	ldr	r2, [pc, #36]	; (80023d0 <Handle_USBAsynchXfer+0x90>)
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
 80023aa:	2940      	cmp	r1, #64	; 0x40
    { 
      USART_Rx_length = USART_RX_DATA_SIZE - USART_Rx_ptr_out;
    }
    else 
    {
      USART_Rx_length = USART_Rx_ptr_in - USART_Rx_ptr_out;
 80023ac:	6011      	str	r1, [r2, #0]
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
 80023ae:	d8df      	bhi.n	8002370 <Handle_USBAsynchXfer+0x30>
    else
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = USART_Rx_length;
      
      USART_Rx_ptr_out += USART_Rx_length;
 80023b0:	18cb      	adds	r3, r1, r3
 80023b2:	602b      	str	r3, [r5, #0]
      USART_Rx_length = 0;
 80023b4:	2300      	movs	r3, #0
      USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;	
    }
    else
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = USART_Rx_length;
 80023b6:	b28e      	uxth	r6, r1
      
      USART_Rx_ptr_out += USART_Rx_length;
      USART_Rx_length = 0;
 80023b8:	6013      	str	r3, [r2, #0]
 80023ba:	e7de      	b.n	800237a <Handle_USBAsynchXfer+0x3a>
      USART_Rx_ptr_out = 0;
    }
    
    if(USART_Rx_ptr_out == USART_Rx_ptr_in) 
    {
      USB_Tx_State = 0; 
 80023bc:	2300      	movs	r3, #0
 80023be:	7023      	strb	r3, [r4, #0]
      return;
 80023c0:	bd70      	pop	{r4, r5, r6, pc}
 80023c2:	bf00      	nop
 80023c4:	200002e0 	.word	0x200002e0
 80023c8:	200002e8 	.word	0x200002e8
 80023cc:	200002e4 	.word	0x200002e4
 80023d0:	200002ec 	.word	0x200002ec
 80023d4:	20000adc 	.word	0x20000adc
 80023d8:	08002ded 	.word	0x08002ded
 80023dc:	0800302d 	.word	0x0800302d
 80023e0:	08002ef1 	.word	0x08002ef1

080023e4 <Get_SerialNum>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Get_SerialNum(void)
{
 80023e4:	b538      	push	{r3, r4, r5, lr}
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(uint32_t*)ID1;
 80023e6:	f24f 72e8 	movw	r2, #63464	; 0xf7e8
  Device_Serial1 = *(uint32_t*)ID2;
  Device_Serial2 = *(uint32_t*)ID3;  
 80023ea:	f24f 73f0 	movw	r3, #63472	; 0xf7f0
*******************************************************************************/
void Get_SerialNum(void)
{
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(uint32_t*)ID1;
 80023ee:	f6c1 72ff 	movt	r2, #8191	; 0x1fff
  Device_Serial1 = *(uint32_t*)ID2;
  Device_Serial2 = *(uint32_t*)ID3;  
 80023f2:	f6c1 73ff 	movt	r3, #8191	; 0x1fff
*******************************************************************************/
void Get_SerialNum(void)
{
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(uint32_t*)ID1;
 80023f6:	6812      	ldr	r2, [r2, #0]
  Device_Serial1 = *(uint32_t*)ID2;
  Device_Serial2 = *(uint32_t*)ID3;  

  Device_Serial0 += Device_Serial2;
 80023f8:	681b      	ldr	r3, [r3, #0]
void Get_SerialNum(void)
{
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(uint32_t*)ID1;
  Device_Serial1 = *(uint32_t*)ID2;
 80023fa:	f24f 71ec 	movw	r1, #63468	; 0xf7ec
 80023fe:	f6c1 71ff 	movt	r1, #8191	; 0x1fff
  Device_Serial2 = *(uint32_t*)ID3;  

  Device_Serial0 += Device_Serial2;

  if (Device_Serial0 != 0)
 8002402:	18d0      	adds	r0, r2, r3
void Get_SerialNum(void)
{
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(uint32_t*)ID1;
  Device_Serial1 = *(uint32_t*)ID2;
 8002404:	680c      	ldr	r4, [r1, #0]
  Device_Serial2 = *(uint32_t*)ID3;  

  Device_Serial0 += Device_Serial2;

  if (Device_Serial0 != 0)
 8002406:	d007      	beq.n	8002418 <Get_SerialNum+0x34>
  {
    IntToUnicode (Device_Serial0, &Virtual_Com_Port_StringSerial[2] , 8);
 8002408:	4904      	ldr	r1, [pc, #16]	; (800241c <Get_SerialNum+0x38>)
 800240a:	2208      	movs	r2, #8
 800240c:	4d04      	ldr	r5, [pc, #16]	; (8002420 <Get_SerialNum+0x3c>)
 800240e:	47a8      	blx	r5
    IntToUnicode (Device_Serial1, &Virtual_Com_Port_StringSerial[18], 4);
 8002410:	4620      	mov	r0, r4
 8002412:	4904      	ldr	r1, [pc, #16]	; (8002424 <Get_SerialNum+0x40>)
 8002414:	2204      	movs	r2, #4
 8002416:	47a8      	blx	r5
 8002418:	bd38      	pop	{r3, r4, r5, pc}
 800241a:	bf00      	nop
 800241c:	20000012 	.word	0x20000012
 8002420:	08002199 	.word	0x08002199
 8002424:	20000022 	.word	0x20000022

08002428 <__WFI>:
}


void __WFI(void)
{
	 __asm("wfi");
 8002428:	bf30      	wfi
 800242a:	4770      	bx	lr

0800242c <Standard_GetConfiguration>:
* Output         : None.
* Return         : Return 1 , if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
uint8_t *Standard_GetConfiguration(uint16_t Length)
{
 800242c:	b508      	push	{r3, lr}
  if (Length == 0)
 800242e:	b138      	cbz	r0, 8002440 <Standard_GetConfiguration+0x14>
  {
    pInformation->Ctrl_Info.Usb_wLength =
      sizeof(pInformation->Current_Configuration);
    return 0;
  }
  pUser_Standard_Requests->User_GetConfiguration();
 8002430:	4b06      	ldr	r3, [pc, #24]	; (800244c <Standard_GetConfiguration+0x20>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4798      	blx	r3
  return (uint8_t *)&pInformation->Current_Configuration;
 8002438:	4b05      	ldr	r3, [pc, #20]	; (8002450 <Standard_GetConfiguration+0x24>)
 800243a:	6818      	ldr	r0, [r3, #0]
 800243c:	300a      	adds	r0, #10
}
 800243e:	bd08      	pop	{r3, pc}
*******************************************************************************/
uint8_t *Standard_GetConfiguration(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength =
 8002440:	4b03      	ldr	r3, [pc, #12]	; (8002450 <Standard_GetConfiguration+0x24>)
 8002442:	2201      	movs	r2, #1
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	821a      	strh	r2, [r3, #16]
      sizeof(pInformation->Current_Configuration);
    return 0;
 8002448:	bd08      	pop	{r3, pc}
 800244a:	bf00      	nop
 800244c:	20001308 	.word	0x20001308
 8002450:	2000130c 	.word	0x2000130c

08002454 <Standard_GetInterface>:
* Output         : None.
* Return         : Return 0, if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
uint8_t *Standard_GetInterface(uint16_t Length)
{
 8002454:	b508      	push	{r3, lr}
  if (Length == 0)
 8002456:	b138      	cbz	r0, 8002468 <Standard_GetInterface+0x14>
  {
    pInformation->Ctrl_Info.Usb_wLength =
      sizeof(pInformation->Current_AlternateSetting);
    return 0;
  }
  pUser_Standard_Requests->User_GetInterface();
 8002458:	4b06      	ldr	r3, [pc, #24]	; (8002474 <Standard_GetInterface+0x20>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	4798      	blx	r3
  return (uint8_t *)&pInformation->Current_AlternateSetting;
 8002460:	4b05      	ldr	r3, [pc, #20]	; (8002478 <Standard_GetInterface+0x24>)
 8002462:	6818      	ldr	r0, [r3, #0]
 8002464:	300c      	adds	r0, #12
}
 8002466:	bd08      	pop	{r3, pc}
*******************************************************************************/
uint8_t *Standard_GetInterface(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength =
 8002468:	4b03      	ldr	r3, [pc, #12]	; (8002478 <Standard_GetInterface+0x24>)
 800246a:	2201      	movs	r2, #1
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	821a      	strh	r2, [r3, #16]
      sizeof(pInformation->Current_AlternateSetting);
    return 0;
 8002470:	bd08      	pop	{r3, pc}
 8002472:	bf00      	nop
 8002474:	20001308 	.word	0x20001308
 8002478:	2000130c 	.word	0x2000130c

0800247c <Standard_GetStatus>:
* Output         : None.
* Return         : Return 0, if the request is at end of data block,
*                  or is invalid when "Length" is 0.
*******************************************************************************/
uint8_t *Standard_GetStatus(uint16_t Length)
{
 800247c:	b508      	push	{r3, lr}
  if (Length == 0)
 800247e:	2800      	cmp	r0, #0
 8002480:	d037      	beq.n	80024f2 <Standard_GetStatus+0x76>
  }

  /* Reset Status Information */
  StatusInfo.w = 0;

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8002482:	4b21      	ldr	r3, [pc, #132]	; (8002508 <Standard_GetStatus+0x8c>)
    pInformation->Ctrl_Info.Usb_wLength = 2;
    return 0;
  }

  /* Reset Status Information */
  StatusInfo.w = 0;
 8002484:	4821      	ldr	r0, [pc, #132]	; (800250c <Standard_GetStatus+0x90>)
 8002486:	2100      	movs	r1, #0

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8002488:	681a      	ldr	r2, [r3, #0]
    pInformation->Ctrl_Info.Usb_wLength = 2;
    return 0;
  }

  /* Reset Status Information */
  StatusInfo.w = 0;
 800248a:	8001      	strh	r1, [r0, #0]

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800248c:	7813      	ldrb	r3, [r2, #0]
 800248e:	f013 037f 	ands.w	r3, r3, #127	; 0x7f
 8002492:	d017      	beq.n	80024c4 <Standard_GetStatus+0x48>
    {
      ClrBit(StatusInfo0, 0);
    }
  }
  /*Interface Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8002494:	2b01      	cmp	r3, #1
 8002496:	d02b      	beq.n	80024f0 <Standard_GetStatus+0x74>
  {
    return (uint8_t *)&StatusInfo;
  }
  /*Get EndPoint Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8002498:	2b02      	cmp	r3, #2
 800249a:	d128      	bne.n	80024ee <Standard_GetStatus+0x72>
  {
    uint8_t Related_Endpoint;
    uint8_t wIndex0 = pInformation->USBwIndex0;
 800249c:	7953      	ldrb	r3, [r2, #5]

    Related_Endpoint = (wIndex0 & 0x0f);
 800249e:	f003 020f 	and.w	r2, r3, #15
    if (ValBit(wIndex0, 7))
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 80024a2:	0092      	lsls	r2, r2, #2
 80024a4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80024a8:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
  {
    uint8_t Related_Endpoint;
    uint8_t wIndex0 = pInformation->USBwIndex0;

    Related_Endpoint = (wIndex0 & 0x0f);
    if (ValBit(wIndex0, 7))
 80024ac:	f013 0f80 	tst.w	r3, #128	; 0x80
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 80024b0:	6813      	ldr	r3, [r2, #0]
  {
    uint8_t Related_Endpoint;
    uint8_t wIndex0 = pInformation->USBwIndex0;

    Related_Endpoint = (wIndex0 & 0x0f);
    if (ValBit(wIndex0, 7))
 80024b2:	d123      	bne.n	80024fc <Standard_GetStatus+0x80>
      }
    }
    else
    {
      /* OUT endpoint */
      if (_GetRxStallStatus(Related_Endpoint))
 80024b4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80024b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024bc:	d111      	bne.n	80024e2 <Standard_GetStatus+0x66>
      {
        SetBit(StatusInfo0, 0); /* OUT Endpoint stalled */
 80024be:	2301      	movs	r3, #1
 80024c0:	7003      	strb	r3, [r0, #0]
 80024c2:	e00e      	b.n	80024e2 <Standard_GetStatus+0x66>
  StatusInfo.w = 0;

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
  {
    /*Get Device Status */
    uint8_t Feature = pInformation->Current_Feature;
 80024c4:	7a52      	ldrb	r2, [r2, #9]

    /* Remote Wakeup enabled */
    if (ValBit(Feature, 5))
 80024c6:	f002 0320 	and.w	r3, r2, #32
 80024ca:	b2db      	uxtb	r3, r3
    {
      ClrBit(StatusInfo0, 1);
    }      

    /* Bus-powered */
    if (ValBit(Feature, 6))
 80024cc:	f002 0240 	and.w	r2, r2, #64	; 0x40
    uint8_t Feature = pInformation->Current_Feature;

    /* Remote Wakeup enabled */
    if (ValBit(Feature, 5))
    {
      SetBit(StatusInfo0, 1);
 80024d0:	428b      	cmp	r3, r1
    {
      ClrBit(StatusInfo0, 1);
    }      

    /* Bus-powered */
    if (ValBit(Feature, 6))
 80024d2:	b2d2      	uxtb	r2, r2
    uint8_t Feature = pInformation->Current_Feature;

    /* Remote Wakeup enabled */
    if (ValBit(Feature, 5))
    {
      SetBit(StatusInfo0, 1);
 80024d4:	bf18      	it	ne
 80024d6:	2302      	movne	r3, #2
    {
      ClrBit(StatusInfo0, 1);
    }      

    /* Bus-powered */
    if (ValBit(Feature, 6))
 80024d8:	2a00      	cmp	r2, #0
 80024da:	d0f1      	beq.n	80024c0 <Standard_GetStatus+0x44>
    {
      SetBit(StatusInfo0, 0);
 80024dc:	f043 0301 	orr.w	r3, r3, #1
 80024e0:	7003      	strb	r3, [r0, #0]
  }
  else
  {
    return NULL;
  }
  pUser_Standard_Requests->User_GetStatus();
 80024e2:	4b0b      	ldr	r3, [pc, #44]	; (8002510 <Standard_GetStatus+0x94>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	691b      	ldr	r3, [r3, #16]
 80024e8:	4798      	blx	r3
  return (uint8_t *)&StatusInfo;
 80024ea:	4808      	ldr	r0, [pc, #32]	; (800250c <Standard_GetStatus+0x90>)
 80024ec:	bd08      	pop	{r3, pc}
    }

  }
  else
  {
    return NULL;
 80024ee:	4608      	mov	r0, r1
  }
  pUser_Standard_Requests->User_GetStatus();
  return (uint8_t *)&StatusInfo;
}
 80024f0:	bd08      	pop	{r3, pc}
*******************************************************************************/
uint8_t *Standard_GetStatus(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength = 2;
 80024f2:	4b05      	ldr	r3, [pc, #20]	; (8002508 <Standard_GetStatus+0x8c>)
 80024f4:	2202      	movs	r2, #2
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	821a      	strh	r2, [r3, #16]
    return 0;
 80024fa:	bd08      	pop	{r3, pc}

    Related_Endpoint = (wIndex0 & 0x0f);
    if (ValBit(wIndex0, 7))
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 80024fc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002500:	2b10      	cmp	r3, #16
 8002502:	d1ee      	bne.n	80024e2 <Standard_GetStatus+0x66>
 8002504:	e7db      	b.n	80024be <Standard_GetStatus+0x42>
 8002506:	bf00      	nop
 8002508:	2000130c 	.word	0x2000130c
 800250c:	200012dc 	.word	0x200012dc
 8002510:	20001308 	.word	0x20001308

08002514 <DataStageIn>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void DataStageIn(void)
{
 8002514:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
 8002518:	4e2b      	ldr	r6, [pc, #172]	; (80025c8 <DataStageIn+0xb4>)
 800251a:	6834      	ldr	r4, [r6, #0]
  uint32_t save_wLength = pEPinfo->Usb_wLength;
 800251c:	8a23      	ldrh	r3, [r4, #16]
  uint32_t ControlState = pInformation->ControlState;

  uint8_t *DataBuffer;
  uint32_t Length;

  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
 800251e:	7a20      	ldrb	r0, [r4, #8]
 8002520:	2b00      	cmp	r3, #0
 8002522:	bf08      	it	eq
 8002524:	2804      	cmpeq	r0, #4
 8002526:	bf14      	ite	ne
 8002528:	f04f 0800 	movne.w	r8, #0
 800252c:	f04f 0801 	moveq.w	r8, #1
 8002530:	d10a      	bne.n	8002548 <DataStageIn+0x34>
  {
    if(Data_Mul_MaxPacketSize == TRUE)
 8002532:	4b26      	ldr	r3, [pc, #152]	; (80025cc <DataStageIn+0xb8>)
 8002534:	781a      	ldrb	r2, [r3, #0]
 8002536:	2a01      	cmp	r2, #1
 8002538:	d030      	beq.n	800259c <DataStageIn+0x88>
    }
    else 
    {
      /* No more data to send so STALL the TX Status*/
      ControlState = WAIT_STATUS_OUT;
      vSetEPTxStatus(EP_TX_STALL);
 800253a:	4b25      	ldr	r3, [pc, #148]	; (80025d0 <DataStageIn+0xbc>)
 800253c:	2210      	movs	r2, #16
 800253e:	2707      	movs	r7, #7
 8002540:	801a      	strh	r2, [r3, #0]
  vSetEPTxStatus(EP_TX_VALID);

  USB_StatusOut();/* Expect the host to abort the data IN stage */

Expect_Status_Out:
  pInformation->ControlState = ControlState;
 8002542:	7227      	strb	r7, [r4, #8]
 8002544:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    }
    
    goto Expect_Status_Out;
  }

  Length = pEPinfo->PacketSize;
 8002548:	8aa7      	ldrh	r7, [r4, #20]
  if (Length > save_wLength)
  {
    Length = save_wLength;
  }

  DataBuffer = (*pEPinfo->CopyData)(Length);
 800254a:	69a2      	ldr	r2, [r4, #24]
 800254c:	429f      	cmp	r7, r3
 800254e:	bf34      	ite	cc
 8002550:	463d      	movcc	r5, r7
 8002552:	461d      	movcs	r5, r3
 8002554:	4628      	mov	r0, r5
    
    goto Expect_Status_Out;
  }

  Length = pEPinfo->PacketSize;
  ControlState = (save_wLength <= Length) ? LAST_IN_DATA : IN_DATA;
 8002556:	42bb      	cmp	r3, r7
 8002558:	bf8c      	ite	hi
 800255a:	2702      	movhi	r7, #2
 800255c:	2704      	movls	r7, #4
  if (Length > save_wLength)
  {
    Length = save_wLength;
  }

  DataBuffer = (*pEPinfo->CopyData)(Length);
 800255e:	4790      	blx	r2
  
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);
 8002560:	4b1c      	ldr	r3, [pc, #112]	; (80025d4 <DataStageIn+0xc0>)
  if (Length > save_wLength)
  {
    Length = save_wLength;
  }

  DataBuffer = (*pEPinfo->CopyData)(Length);
 8002562:	4681      	mov	r9, r0
  
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);
 8002564:	4640      	mov	r0, r8
 8002566:	4798      	blx	r3
 8002568:	462a      	mov	r2, r5
 800256a:	4601      	mov	r1, r0
 800256c:	4b1a      	ldr	r3, [pc, #104]	; (80025d8 <DataStageIn+0xc4>)
 800256e:	4648      	mov	r0, r9
 8002570:	4798      	blx	r3

  SetEPTxCount(ENDP0, Length);
 8002572:	4629      	mov	r1, r5
 8002574:	4b19      	ldr	r3, [pc, #100]	; (80025dc <DataStageIn+0xc8>)
 8002576:	4640      	mov	r0, r8
 8002578:	4798      	blx	r3

  pEPinfo->Usb_wLength -= Length;
 800257a:	8a23      	ldrh	r3, [r4, #16]
  pEPinfo->Usb_wOffset += Length;
 800257c:	8a62      	ldrh	r2, [r4, #18]
  
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);

  SetEPTxCount(ENDP0, Length);

  pEPinfo->Usb_wLength -= Length;
 800257e:	1b5b      	subs	r3, r3, r5
 8002580:	8223      	strh	r3, [r4, #16]
  pEPinfo->Usb_wOffset += Length;
  vSetEPTxStatus(EP_TX_VALID);
 8002582:	4b13      	ldr	r3, [pc, #76]	; (80025d0 <DataStageIn+0xbc>)
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);

  SetEPTxCount(ENDP0, Length);

  pEPinfo->Usb_wLength -= Length;
  pEPinfo->Usb_wOffset += Length;
 8002584:	18ad      	adds	r5, r5, r2
  vSetEPTxStatus(EP_TX_VALID);
 8002586:	2230      	movs	r2, #48	; 0x30
 8002588:	801a      	strh	r2, [r3, #0]
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);

  SetEPTxCount(ENDP0, Length);

  pEPinfo->Usb_wLength -= Length;
  pEPinfo->Usb_wOffset += Length;
 800258a:	8265      	strh	r5, [r4, #18]
  vSetEPTxStatus(EP_TX_VALID);

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 800258c:	4b14      	ldr	r3, [pc, #80]	; (80025e0 <DataStageIn+0xcc>)
 800258e:	6834      	ldr	r4, [r6, #0]
 8002590:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8002594:	801a      	strh	r2, [r3, #0]

Expect_Status_Out:
  pInformation->ControlState = ControlState;
 8002596:	7227      	strb	r7, [r4, #8]
 8002598:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
  {
    if(Data_Mul_MaxPacketSize == TRUE)
    {
      /* No more data to send and empty packet */
      Send0LengthData();
 800259c:	f645 4250 	movw	r2, #23632	; 0x5c50
 80025a0:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80025a4:	6811      	ldr	r1, [r2, #0]
 80025a6:	f243 0202 	movw	r2, #12290	; 0x3002
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
}
 80025aa:	b289      	uxth	r1, r1
  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
  {
    if(Data_Mul_MaxPacketSize == TRUE)
    {
      /* No more data to send and empty packet */
      Send0LengthData();
 80025ac:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80025b0:	188a      	adds	r2, r1, r2
 80025b2:	0052      	lsls	r2, r2, #1
 80025b4:	2100      	movs	r1, #0
 80025b6:	6011      	str	r1, [r2, #0]
 80025b8:	4a05      	ldr	r2, [pc, #20]	; (80025d0 <DataStageIn+0xbc>)
      ControlState = LAST_IN_DATA;
      Data_Mul_MaxPacketSize = FALSE;
 80025ba:	2704      	movs	r7, #4
  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
  {
    if(Data_Mul_MaxPacketSize == TRUE)
    {
      /* No more data to send and empty packet */
      Send0LengthData();
 80025bc:	2030      	movs	r0, #48	; 0x30
 80025be:	8010      	strh	r0, [r2, #0]
      ControlState = LAST_IN_DATA;
      Data_Mul_MaxPacketSize = FALSE;
 80025c0:	7019      	strb	r1, [r3, #0]
  vSetEPTxStatus(EP_TX_VALID);

  USB_StatusOut();/* Expect the host to abort the data IN stage */

Expect_Status_Out:
  pInformation->ControlState = ControlState;
 80025c2:	7227      	strb	r7, [r4, #8]
 80025c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80025c8:	2000130c 	.word	0x2000130c
 80025cc:	200002f0 	.word	0x200002f0
 80025d0:	20001314 	.word	0x20001314
 80025d4:	08002fed 	.word	0x08002fed
 80025d8:	08002ded 	.word	0x08002ded
 80025dc:	0800302d 	.word	0x0800302d
 80025e0:	20001312 	.word	0x20001312

080025e4 <Standard_SetConfiguration>:
* Output         : None.
* Return         : Return USB_SUCCESS, if the request is performed.
*                  Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetConfiguration(void)
{
 80025e4:	b510      	push	{r4, lr}

  if ((pInformation->USBwValue0 <=
 80025e6:	4b0b      	ldr	r3, [pc, #44]	; (8002614 <Standard_SetConfiguration+0x30>)
 80025e8:	4a0b      	ldr	r2, [pc, #44]	; (8002618 <Standard_SetConfiguration+0x34>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	7851      	ldrb	r1, [r2, #1]
 80025ee:	78da      	ldrb	r2, [r3, #3]
 80025f0:	4291      	cmp	r1, r2
 80025f2:	d201      	bcs.n	80025f8 <Standard_SetConfiguration+0x14>
    pUser_Standard_Requests->User_SetConfiguration();
    return USB_SUCCESS;
  }
  else
  {
    return USB_UNSUPPORT;
 80025f4:	2002      	movs	r0, #2
  }
}
 80025f6:	bd10      	pop	{r4, pc}
*******************************************************************************/
RESULT Standard_SetConfiguration(void)
{

  if ((pInformation->USBwValue0 <=
      Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
 80025f8:	7899      	ldrb	r1, [r3, #2]
 80025fa:	2900      	cmp	r1, #0
 80025fc:	d1fa      	bne.n	80025f4 <Standard_SetConfiguration+0x10>
      && (pInformation->USBwIndex == 0)) /*call Back usb spec 2.0*/
 80025fe:	889c      	ldrh	r4, [r3, #4]
 8002600:	2c00      	cmp	r4, #0
 8002602:	d1f7      	bne.n	80025f4 <Standard_SetConfiguration+0x10>
  {
    pInformation->Current_Configuration = pInformation->USBwValue0;
 8002604:	729a      	strb	r2, [r3, #10]
    pUser_Standard_Requests->User_SetConfiguration();
 8002606:	4b05      	ldr	r3, [pc, #20]	; (800261c <Standard_SetConfiguration+0x38>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	4798      	blx	r3
    return USB_SUCCESS;
 800260e:	4620      	mov	r0, r4
 8002610:	bd10      	pop	{r4, pc}
 8002612:	bf00      	nop
 8002614:	2000130c 	.word	0x2000130c
 8002618:	200000f0 	.word	0x200000f0
 800261c:	20001308 	.word	0x20001308

08002620 <Standard_SetInterface>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetInterface(void)
{
 8002620:	b538      	push	{r3, r4, r5, lr}
  RESULT Re;
  /*Test if the specified Interface and Alternate Setting are supported by
    the application Firmware*/
  Re = (*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, pInformation->USBwValue0);
 8002622:	4a10      	ldr	r2, [pc, #64]	; (8002664 <Standard_SetInterface+0x44>)
 8002624:	4c10      	ldr	r4, [pc, #64]	; (8002668 <Standard_SetInterface+0x48>)
 8002626:	6812      	ldr	r2, [r2, #0]
 8002628:	6823      	ldr	r3, [r4, #0]
 800262a:	6992      	ldr	r2, [r2, #24]
 800262c:	7958      	ldrb	r0, [r3, #5]
 800262e:	78d9      	ldrb	r1, [r3, #3]
 8002630:	4790      	blx	r2

  if (pInformation->Current_Configuration != 0)
 8002632:	6823      	ldr	r3, [r4, #0]
 8002634:	7a9a      	ldrb	r2, [r3, #10]
 8002636:	b90a      	cbnz	r2, 800263c <Standard_SetInterface+0x1c>
      return USB_SUCCESS;
    }

  }

  return USB_UNSUPPORT;
 8002638:	2002      	movs	r0, #2
}
 800263a:	bd38      	pop	{r3, r4, r5, pc}
    the application Firmware*/
  Re = (*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, pInformation->USBwValue0);

  if (pInformation->Current_Configuration != 0)
  {
    if ((Re != USB_SUCCESS) || (pInformation->USBwIndex1 != 0)
 800263c:	2800      	cmp	r0, #0
 800263e:	d1fb      	bne.n	8002638 <Standard_SetInterface+0x18>
 8002640:	791a      	ldrb	r2, [r3, #4]
 8002642:	2a00      	cmp	r2, #0
 8002644:	d1f8      	bne.n	8002638 <Standard_SetInterface+0x18>
        || (pInformation->USBwValue1 != 0))
 8002646:	789d      	ldrb	r5, [r3, #2]
 8002648:	2d00      	cmp	r5, #0
 800264a:	d1f5      	bne.n	8002638 <Standard_SetInterface+0x18>
    {
      return  USB_UNSUPPORT;
    }
    else if (Re == USB_SUCCESS)
    {
      pUser_Standard_Requests->User_SetInterface();
 800264c:	4b07      	ldr	r3, [pc, #28]	; (800266c <Standard_SetInterface+0x4c>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	4798      	blx	r3
      pInformation->Current_Interface = pInformation->USBwIndex0;
 8002654:	6823      	ldr	r3, [r4, #0]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
      return USB_SUCCESS;
 8002656:	4628      	mov	r0, r5
      return  USB_UNSUPPORT;
    }
    else if (Re == USB_SUCCESS)
    {
      pUser_Standard_Requests->User_SetInterface();
      pInformation->Current_Interface = pInformation->USBwIndex0;
 8002658:	7959      	ldrb	r1, [r3, #5]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
 800265a:	78da      	ldrb	r2, [r3, #3]
      return  USB_UNSUPPORT;
    }
    else if (Re == USB_SUCCESS)
    {
      pUser_Standard_Requests->User_SetInterface();
      pInformation->Current_Interface = pInformation->USBwIndex0;
 800265c:	72d9      	strb	r1, [r3, #11]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
 800265e:	731a      	strb	r2, [r3, #12]
      return USB_SUCCESS;
 8002660:	bd38      	pop	{r3, r4, r5, pc}
 8002662:	bf00      	nop
 8002664:	200012e4 	.word	0x200012e4
 8002668:	2000130c 	.word	0x2000130c
 800266c:	20001308 	.word	0x20001308

08002670 <Standard_ClearFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_ClearFeature(void)
{
 8002670:	b538      	push	{r3, r4, r5, lr}
  uint32_t     Type_Rec = Type_Recipient;
 8002672:	4b35      	ldr	r3, [pc, #212]	; (8002748 <Standard_ClearFeature+0xd8>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	7818      	ldrb	r0, [r3, #0]
  uint32_t     Status;


  if (Type_Rec == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8002678:	f010 007f 	ands.w	r0, r0, #127	; 0x7f
 800267c:	d003      	beq.n	8002686 <Standard_ClearFeature+0x16>
  {/*Device Clear Feature*/
    ClrBit(pInformation->Current_Feature, 5);
    return USB_SUCCESS;
  }
  else if (Type_Rec == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 800267e:	2802      	cmp	r0, #2
 8002680:	d006      	beq.n	8002690 <Standard_ClearFeature+0x20>
    }
    pUser_Standard_Requests->User_ClearFeature();
    return USB_SUCCESS;
  }

  return USB_UNSUPPORT;
 8002682:	2002      	movs	r0, #2
}
 8002684:	bd38      	pop	{r3, r4, r5, pc}
  uint32_t     Status;


  if (Type_Rec == (STANDARD_REQUEST | DEVICE_RECIPIENT))
  {/*Device Clear Feature*/
    ClrBit(pInformation->Current_Feature, 5);
 8002686:	7a5a      	ldrb	r2, [r3, #9]
 8002688:	f022 0220 	bic.w	r2, r2, #32
 800268c:	725a      	strb	r2, [r3, #9]
    return USB_SUCCESS;
 800268e:	bd38      	pop	{r3, r4, r5, pc}
    DEVICE* pDev;
    uint32_t Related_Endpoint;
    uint32_t wIndex0;
    uint32_t rEP;

    if ((pInformation->USBwValue != ENDPOINT_STALL)
 8002690:	885a      	ldrh	r2, [r3, #2]
 8002692:	2a00      	cmp	r2, #0
 8002694:	d1f6      	bne.n	8002684 <Standard_ClearFeature+0x14>
        || (pInformation->USBwIndex1 != 0))
 8002696:	791a      	ldrb	r2, [r3, #4]
 8002698:	2a00      	cmp	r2, #0
 800269a:	d1f3      	bne.n	8002684 <Standard_ClearFeature+0x14>
    {
      return USB_UNSUPPORT;
    }

    pDev = &Device_Table;
    wIndex0 = pInformation->USBwIndex0;
 800269c:	795a      	ldrb	r2, [r3, #5]
    rEP = wIndex0 & ~0x80;
 800269e:	f022 0080 	bic.w	r0, r2, #128	; 0x80

    if (ValBit(pInformation->USBwIndex0, 7))
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 80026a2:	0081      	lsls	r1, r0, #2
 80026a4:	f101 4480 	add.w	r4, r1, #1073741824	; 0x40000000
    pDev = &Device_Table;
    wIndex0 = pInformation->USBwIndex0;
    rEP = wIndex0 & ~0x80;
    Related_Endpoint = ENDP0 + rEP;

    if (ValBit(pInformation->USBwIndex0, 7))
 80026a8:	0615      	lsls	r5, r2, #24
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 80026aa:	f504 44b8 	add.w	r4, r4, #23552	; 0x5c00
    }
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
 80026ae:	bf56      	itet	pl
 80026b0:	6824      	ldrpl	r4, [r4, #0]

    if (ValBit(pInformation->USBwIndex0, 7))
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 80026b2:	6825      	ldrmi	r5, [r4, #0]
    }
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
 80026b4:	f404 5540 	andpl.w	r5, r4, #12288	; 0x3000
    }

    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 80026b8:	4c24      	ldr	r4, [pc, #144]	; (800274c <Standard_ClearFeature+0xdc>)

    if (ValBit(pInformation->USBwIndex0, 7))
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 80026ba:	bf48      	it	mi
 80026bc:	f005 0530 	andmi.w	r5, r5, #48	; 0x30
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
    }

    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 80026c0:	7824      	ldrb	r4, [r4, #0]
 80026c2:	42a0      	cmp	r0, r4
 80026c4:	d2dd      	bcs.n	8002682 <Standard_ClearFeature+0x12>
 80026c6:	2d00      	cmp	r5, #0
 80026c8:	d0db      	beq.n	8002682 <Standard_ClearFeature+0x12>
        || (pInformation->Current_Configuration == 0))
 80026ca:	7a9b      	ldrb	r3, [r3, #10]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d0d8      	beq.n	8002682 <Standard_ClearFeature+0x12>
    {
      return USB_UNSUPPORT;
    }


    if (wIndex0 & 0x80)
 80026d0:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	b173      	cbz	r3, 80026f6 <Standard_ClearFeature+0x86>
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint ))
 80026d8:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
 80026dc:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80026e6:	2b10      	cmp	r3, #16
 80026e8:	d021      	beq.n	800272e <Standard_ClearFeature+0xbe>
          ClearDTOG_RX(Related_Endpoint);
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
        }
      }
    }
    pUser_Standard_Requests->User_ClearFeature();
 80026ea:	4b19      	ldr	r3, [pc, #100]	; (8002750 <Standard_ClearFeature+0xe0>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	695b      	ldr	r3, [r3, #20]
 80026f0:	4798      	blx	r3
    return USB_SUCCESS;
 80026f2:	2000      	movs	r0, #0
 80026f4:	bd38      	pop	{r3, r4, r5, pc}
      }
    }
    else
    {
      /* OUT endpoint */
      if (_GetRxStallStatus(Related_Endpoint))
 80026f6:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80026fa:	f501 44b8 	add.w	r4, r1, #23552	; 0x5c00
 80026fe:	6823      	ldr	r3, [r4, #0]
 8002700:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002704:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002708:	d1ef      	bne.n	80026ea <Standard_ClearFeature+0x7a>
      {
        if (Related_Endpoint == ENDP0)
 800270a:	b9c8      	cbnz	r0, 8002740 <Standard_ClearFeature+0xd0>
        {
          /* After clear the STALL, enable the default endpoint receiver */
          SetEPRxCount(Related_Endpoint, Device_Property.MaxPacketSize);
 800270c:	4b11      	ldr	r3, [pc, #68]	; (8002754 <Standard_ClearFeature+0xe4>)
 800270e:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
 8002712:	4b11      	ldr	r3, [pc, #68]	; (8002758 <Standard_ClearFeature+0xe8>)
 8002714:	4798      	blx	r3
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
        }
        else
        {
          ClearDTOG_RX(Related_Endpoint);
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
 8002716:	6822      	ldr	r2, [r4, #0]
 8002718:	f64b 738f 	movw	r3, #49039	; 0xbf8f
 800271c:	4013      	ands	r3, r2
 800271e:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002722:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002726:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800272a:	6023      	str	r3, [r4, #0]
 800272c:	e7dd      	b.n	80026ea <Standard_ClearFeature+0x7a>
    if (wIndex0 & 0x80)
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint ))
      {
        ClearDTOG_TX(Related_Endpoint);
 800272e:	b2c4      	uxtb	r4, r0
 8002730:	4620      	mov	r0, r4
 8002732:	4b0a      	ldr	r3, [pc, #40]	; (800275c <Standard_ClearFeature+0xec>)
 8002734:	4798      	blx	r3
        SetEPTxStatus(Related_Endpoint, EP_TX_VALID);
 8002736:	4620      	mov	r0, r4
 8002738:	2130      	movs	r1, #48	; 0x30
 800273a:	4b09      	ldr	r3, [pc, #36]	; (8002760 <Standard_ClearFeature+0xf0>)
 800273c:	4798      	blx	r3
 800273e:	e7d4      	b.n	80026ea <Standard_ClearFeature+0x7a>
          SetEPRxCount(Related_Endpoint, Device_Property.MaxPacketSize);
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
        }
        else
        {
          ClearDTOG_RX(Related_Endpoint);
 8002740:	4b08      	ldr	r3, [pc, #32]	; (8002764 <Standard_ClearFeature+0xf4>)
 8002742:	4798      	blx	r3
 8002744:	e7e7      	b.n	8002716 <Standard_ClearFeature+0xa6>
 8002746:	bf00      	nop
 8002748:	2000130c 	.word	0x2000130c
 800274c:	200000f0 	.word	0x200000f0
 8002750:	20001308 	.word	0x20001308
 8002754:	2000006c 	.word	0x2000006c
 8002758:	0800304d 	.word	0x0800304d
 800275c:	08002f7d 	.word	0x08002f7d
 8002760:	08002e71 	.word	0x08002e71
 8002764:	08002f59 	.word	0x08002f59

08002768 <Standard_SetEndPointFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetEndPointFeature(void)
{
 8002768:	b538      	push	{r3, r4, r5, lr}
  uint32_t    wIndex0;
  uint32_t    Related_Endpoint;
  uint32_t    rEP;
  uint32_t    Status;

  wIndex0 = pInformation->USBwIndex0;
 800276a:	4b22      	ldr	r3, [pc, #136]	; (80027f4 <Standard_SetEndPointFeature+0x8c>)
 800276c:	6819      	ldr	r1, [r3, #0]
 800276e:	794b      	ldrb	r3, [r1, #5]
  rEP = wIndex0 & ~0x80;
 8002770:	f023 0280 	bic.w	r2, r3, #128	; 0x80

  if (ValBit(pInformation->USBwIndex0, 7))
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 8002774:	0090      	lsls	r0, r2, #2
 8002776:	f100 4480 	add.w	r4, r0, #1073741824	; 0x40000000

  wIndex0 = pInformation->USBwIndex0;
  rEP = wIndex0 & ~0x80;
  Related_Endpoint = ENDP0 + rEP;

  if (ValBit(pInformation->USBwIndex0, 7))
 800277a:	061d      	lsls	r5, r3, #24
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 800277c:	f504 44b8 	add.w	r4, r4, #23552	; 0x5c00
  }
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
 8002780:	bf56      	itet	pl
 8002782:	6824      	ldrpl	r4, [r4, #0]

  if (ValBit(pInformation->USBwIndex0, 7))
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 8002784:	6825      	ldrmi	r5, [r4, #0]
  }
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
 8002786:	f404 5540 	andpl.w	r5, r4, #12288	; 0x3000
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
 800278a:	4c1b      	ldr	r4, [pc, #108]	; (80027f8 <Standard_SetEndPointFeature+0x90>)

  if (ValBit(pInformation->USBwIndex0, 7))
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 800278c:	bf48      	it	mi
 800278e:	f005 0530 	andmi.w	r5, r5, #48	; 0x30
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
 8002792:	7824      	ldrb	r4, [r4, #0]
 8002794:	42a2      	cmp	r2, r4
 8002796:	d301      	bcc.n	800279c <Standard_SetEndPointFeature+0x34>
      || pInformation->USBwValue != 0 || Status == 0
      || pInformation->Current_Configuration == 0)
  {
    return USB_UNSUPPORT;
 8002798:	2002      	movs	r0, #2
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
    }
  }
  pUser_Standard_Requests->User_SetEndPointFeature();
  return USB_SUCCESS;
}
 800279a:	bd38      	pop	{r3, r4, r5, pc}
  {
    Status = _GetEPRxStatus(Related_Endpoint);
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
      || pInformation->USBwValue != 0 || Status == 0
 800279c:	884a      	ldrh	r2, [r1, #2]
 800279e:	2a00      	cmp	r2, #0
 80027a0:	d1fa      	bne.n	8002798 <Standard_SetEndPointFeature+0x30>
 80027a2:	2d00      	cmp	r5, #0
 80027a4:	d0f8      	beq.n	8002798 <Standard_SetEndPointFeature+0x30>
      || pInformation->Current_Configuration == 0)
 80027a6:	7a8a      	ldrb	r2, [r1, #10]
 80027a8:	2a00      	cmp	r2, #0
 80027aa:	d0f5      	beq.n	8002798 <Standard_SetEndPointFeature+0x30>
  {
    return USB_UNSUPPORT;
  }
  else
  {
    if (wIndex0 & 0x80)
 80027ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 80027b0:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 80027b4:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
  {
    return USB_UNSUPPORT;
  }
  else
  {
    if (wIndex0 & 0x80)
 80027b8:	b2db      	uxtb	r3, r3
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 80027ba:	6811      	ldr	r1, [r2, #0]
  {
    return USB_UNSUPPORT;
  }
  else
  {
    if (wIndex0 & 0x80)
 80027bc:	b17b      	cbz	r3, 80027de <Standard_SetEndPointFeature+0x76>
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 80027be:	f648 73bf 	movw	r3, #36799	; 0x8fbf
 80027c2:	400b      	ands	r3, r1
 80027c4:	f083 0310 	eor.w	r3, r3, #16
 80027c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027d0:	6013      	str	r3, [r2, #0]
    {
      /* OUT endpoint */
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
    }
  }
  pUser_Standard_Requests->User_SetEndPointFeature();
 80027d2:	4b0a      	ldr	r3, [pc, #40]	; (80027fc <Standard_SetEndPointFeature+0x94>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	699b      	ldr	r3, [r3, #24]
 80027d8:	4798      	blx	r3
  return USB_SUCCESS;
 80027da:	2000      	movs	r0, #0
 80027dc:	bd38      	pop	{r3, r4, r5, pc}
    }

    else
    {
      /* OUT endpoint */
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
 80027de:	f64b 738f 	movw	r3, #49039	; 0xbf8f
 80027e2:	400b      	ands	r3, r1
 80027e4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80027e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027f0:	6013      	str	r3, [r2, #0]
 80027f2:	e7ee      	b.n	80027d2 <Standard_SetEndPointFeature+0x6a>
 80027f4:	2000130c 	.word	0x2000130c
 80027f8:	200000f0 	.word	0x200000f0
 80027fc:	20001308 	.word	0x20001308

08002800 <Standard_GetDescriptorData>:
*******************************************************************************/
uint8_t *Standard_GetDescriptorData(uint16_t Length, ONE_DESCRIPTOR *pDesc)
{
  uint32_t  wOffset;

  wOffset = pInformation->Ctrl_Info.Usb_wOffset;
 8002800:	4b05      	ldr	r3, [pc, #20]	; (8002818 <Standard_GetDescriptorData+0x18>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	8a5a      	ldrh	r2, [r3, #18]
  if (Length == 0)
 8002806:	b110      	cbz	r0, 800280e <Standard_GetDescriptorData+0xe>
  {
    pInformation->Ctrl_Info.Usb_wLength = pDesc->Descriptor_Size - wOffset;
    return 0;
  }

  return pDesc->Descriptor + wOffset;
 8002808:	6808      	ldr	r0, [r1, #0]
 800280a:	1880      	adds	r0, r0, r2
}
 800280c:	4770      	bx	lr
  uint32_t  wOffset;

  wOffset = pInformation->Ctrl_Info.Usb_wOffset;
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength = pDesc->Descriptor_Size - wOffset;
 800280e:	8889      	ldrh	r1, [r1, #4]
 8002810:	1a8a      	subs	r2, r1, r2
 8002812:	821a      	strh	r2, [r3, #16]
    return 0;
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	2000130c 	.word	0x2000130c

0800281c <Post0_Process>:
* Output         : None.
* Return         : - 0 if the control State is in PAUSE
*                  - 1 if not.
*******************************************************************************/
uint8_t Post0_Process(void)
{
 800281c:	b508      	push	{r3, lr}
   
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 800281e:	4b0c      	ldr	r3, [pc, #48]	; (8002850 <Post0_Process+0x34>)
 8002820:	2000      	movs	r0, #0
 8002822:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
 8002826:	4b0b      	ldr	r3, [pc, #44]	; (8002854 <Post0_Process+0x38>)
 8002828:	4798      	blx	r3

  if (pInformation->ControlState == STALLED)
 800282a:	4b0b      	ldr	r3, [pc, #44]	; (8002858 <Post0_Process+0x3c>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	7a18      	ldrb	r0, [r3, #8]
 8002830:	2808      	cmp	r0, #8
 8002832:	d106      	bne.n	8002842 <Post0_Process+0x26>
  {
    vSetEPRxStatus(EP_RX_STALL);
 8002834:	4b09      	ldr	r3, [pc, #36]	; (800285c <Post0_Process+0x40>)
 8002836:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800283a:	801a      	strh	r2, [r3, #0]
    vSetEPTxStatus(EP_TX_STALL);
 800283c:	4b08      	ldr	r3, [pc, #32]	; (8002860 <Post0_Process+0x44>)
 800283e:	2210      	movs	r2, #16
 8002840:	801a      	strh	r2, [r3, #0]
  }

  return (pInformation->ControlState == PAUSE);
}
 8002842:	f1b0 0c09 	subs.w	ip, r0, #9
 8002846:	f1dc 0000 	rsbs	r0, ip, #0
 800284a:	eb50 000c 	adcs.w	r0, r0, ip
 800284e:	bd08      	pop	{r3, pc}
 8002850:	2000006c 	.word	0x2000006c
 8002854:	0800304d 	.word	0x0800304d
 8002858:	2000130c 	.word	0x2000130c
 800285c:	20001312 	.word	0x20001312
 8002860:	20001314 	.word	0x20001314

08002864 <Out0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t Out0_Process(void)
{
 8002864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t ControlState = pInformation->ControlState;
 8002868:	4d35      	ldr	r5, [pc, #212]	; (8002940 <Out0_Process+0xdc>)
 800286a:	682c      	ldr	r4, [r5, #0]
 800286c:	7a23      	ldrb	r3, [r4, #8]

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
 800286e:	2b02      	cmp	r3, #2
 8002870:	bf18      	it	ne
 8002872:	2b04      	cmpne	r3, #4
 8002874:	bf14      	ite	ne
 8002876:	2600      	movne	r6, #0
 8002878:	2601      	moveq	r6, #1
 800287a:	d005      	beq.n	8002888 <Out0_Process+0x24>
  {
    /* host aborts the transfer before finish */
    ControlState = STALLED;
  }
  else if ((ControlState == OUT_DATA) || (ControlState == LAST_OUT_DATA))
 800287c:	2b03      	cmp	r3, #3
 800287e:	bf18      	it	ne
 8002880:	2b05      	cmpne	r3, #5
 8002882:	d007      	beq.n	8002894 <Out0_Process+0x30>
  {
    DataStageOut();
    ControlState = pInformation->ControlState; /* may be changed outside the function */
  }

  else if (ControlState == WAIT_STATUS_OUT)
 8002884:	2b07      	cmp	r3, #7
 8002886:	d00e      	beq.n	80028a6 <Out0_Process+0x42>
 8002888:	2308      	movs	r3, #8
  else
  {
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;
 800288a:	7223      	strb	r3, [r4, #8]

  return Post0_Process();
 800288c:	4b2d      	ldr	r3, [pc, #180]	; (8002944 <Out0_Process+0xe0>)
 800288e:	4798      	blx	r3
 8002890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
  uint32_t save_rLength;

  save_rLength = pEPinfo->Usb_rLength;

  if (pEPinfo->CopyData && save_rLength)
 8002894:	69a1      	ldr	r1, [r4, #24]
void DataStageOut(void)
{
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
  uint32_t save_rLength;

  save_rLength = pEPinfo->Usb_rLength;
 8002896:	8a23      	ldrh	r3, [r4, #16]

  if (pEPinfo->CopyData && save_rLength)
 8002898:	b311      	cbz	r1, 80028e0 <Out0_Process+0x7c>
 800289a:	b95b      	cbnz	r3, 80028b4 <Out0_Process+0x50>
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
    SetEPTxCount(ENDP0, 0);
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 800289c:	8aa3      	ldrh	r3, [r4, #20]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d049      	beq.n	8002936 <Out0_Process+0xd2>
 80028a2:	4a29      	ldr	r2, [pc, #164]	; (8002948 <Out0_Process+0xe4>)
 80028a4:	e02e      	b.n	8002904 <Out0_Process+0xa0>
    ControlState = pInformation->ControlState; /* may be changed outside the function */
  }

  else if (ControlState == WAIT_STATUS_OUT)
  {
    (*pProperty->Process_Status_OUT)();
 80028a6:	4b29      	ldr	r3, [pc, #164]	; (800294c <Out0_Process+0xe8>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	4798      	blx	r3
 80028ae:	682c      	ldr	r4, [r5, #0]
 80028b0:	2308      	movs	r3, #8
 80028b2:	e7ea      	b.n	800288a <Out0_Process+0x26>
  if (pEPinfo->CopyData && save_rLength)
  {
    uint8_t *Buffer;
    uint32_t Length;

    Length = pEPinfo->PacketSize;
 80028b4:	8aa7      	ldrh	r7, [r4, #20]
    if (Length > save_rLength)
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
 80028b6:	429f      	cmp	r7, r3
 80028b8:	bf28      	it	cs
 80028ba:	461f      	movcs	r7, r3
 80028bc:	4638      	mov	r0, r7
 80028be:	4788      	blx	r1
    pEPinfo->Usb_rLength -= Length;
 80028c0:	8a22      	ldrh	r2, [r4, #16]
    pEPinfo->Usb_rOffset += Length;
 80028c2:	8a63      	ldrh	r3, [r4, #18]
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
    pEPinfo->Usb_rLength -= Length;
 80028c4:	1bd2      	subs	r2, r2, r7
    pEPinfo->Usb_rOffset += Length;
 80028c6:	18fb      	adds	r3, r7, r3
    if (Length > save_rLength)
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
 80028c8:	4680      	mov	r8, r0
    pEPinfo->Usb_rLength -= Length;
 80028ca:	8222      	strh	r2, [r4, #16]
    pEPinfo->Usb_rOffset += Length;
 80028cc:	8263      	strh	r3, [r4, #18]
    PMAToUserBufferCopy(Buffer, GetEPRxAddr(ENDP0), Length);
 80028ce:	4630      	mov	r0, r6
 80028d0:	4b1f      	ldr	r3, [pc, #124]	; (8002950 <Out0_Process+0xec>)
 80028d2:	4798      	blx	r3
 80028d4:	4b1f      	ldr	r3, [pc, #124]	; (8002954 <Out0_Process+0xf0>)
 80028d6:	4601      	mov	r1, r0
 80028d8:	463a      	mov	r2, r7
 80028da:	4640      	mov	r0, r8
 80028dc:	4798      	blx	r3
 80028de:	8a23      	ldrh	r3, [r4, #16]

  }

  if (pEPinfo->Usb_rLength != 0)
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d0db      	beq.n	800289c <Out0_Process+0x38>
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 80028e4:	4b1c      	ldr	r3, [pc, #112]	; (8002958 <Out0_Process+0xf4>)
    SetEPTxCount(ENDP0, 0);
 80028e6:	2000      	movs	r0, #0

  }

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 80028e8:	f44f 5240 	mov.w	r2, #12288	; 0x3000
    SetEPTxCount(ENDP0, 0);
 80028ec:	4601      	mov	r1, r0

  }

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 80028ee:	801a      	strh	r2, [r3, #0]
    SetEPTxCount(ENDP0, 0);
 80028f0:	4b1a      	ldr	r3, [pc, #104]	; (800295c <Out0_Process+0xf8>)
 80028f2:	4798      	blx	r3
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 80028f4:	8a23      	ldrh	r3, [r4, #16]
 80028f6:	8aa1      	ldrh	r1, [r4, #20]

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
    SetEPTxCount(ENDP0, 0);
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
 80028f8:	4a13      	ldr	r2, [pc, #76]	; (8002948 <Out0_Process+0xe4>)
 80028fa:	2030      	movs	r0, #48	; 0x30
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 80028fc:	4299      	cmp	r1, r3

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
    SetEPTxCount(ENDP0, 0);
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
 80028fe:	8010      	strh	r0, [r2, #0]
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 8002900:	d919      	bls.n	8002936 <Out0_Process+0xd2>
  {
    pInformation->ControlState = OUT_DATA;
  }
  else
  {
    if (pEPinfo->Usb_rLength > 0)
 8002902:	b9a3      	cbnz	r3, 800292e <Out0_Process+0xca>
    {
      pInformation->ControlState = LAST_OUT_DATA;
    }
    else if (pEPinfo->Usb_rLength == 0)
    {
      pInformation->ControlState = WAIT_STATUS_IN;
 8002904:	682c      	ldr	r4, [r5, #0]
 8002906:	2106      	movs	r1, #6
      USB_StatusIn();
 8002908:	f645 4350 	movw	r3, #23632	; 0x5c50
    {
      pInformation->ControlState = LAST_OUT_DATA;
    }
    else if (pEPinfo->Usb_rLength == 0)
    {
      pInformation->ControlState = WAIT_STATUS_IN;
 800290c:	7221      	strb	r1, [r4, #8]
      USB_StatusIn();
 800290e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002912:	6819      	ldr	r1, [r3, #0]
 8002914:	f243 0302 	movw	r3, #12290	; 0x3002
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
}
 8002918:	b289      	uxth	r1, r1
      pInformation->ControlState = LAST_OUT_DATA;
    }
    else if (pEPinfo->Usb_rLength == 0)
    {
      pInformation->ControlState = WAIT_STATUS_IN;
      USB_StatusIn();
 800291a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800291e:	18cb      	adds	r3, r1, r3
 8002920:	005b      	lsls	r3, r3, #1
 8002922:	2100      	movs	r1, #0
 8002924:	6019      	str	r1, [r3, #0]
 8002926:	2330      	movs	r3, #48	; 0x30
 8002928:	8013      	strh	r3, [r2, #0]
 800292a:	7a23      	ldrb	r3, [r4, #8]
 800292c:	e7ad      	b.n	800288a <Out0_Process+0x26>
  }
  else
  {
    if (pEPinfo->Usb_rLength > 0)
    {
      pInformation->ControlState = LAST_OUT_DATA;
 800292e:	682c      	ldr	r4, [r5, #0]
 8002930:	2305      	movs	r3, #5
 8002932:	7223      	strb	r3, [r4, #8]
 8002934:	e7a9      	b.n	800288a <Out0_Process+0x26>
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
  {
    pInformation->ControlState = OUT_DATA;
 8002936:	682c      	ldr	r4, [r5, #0]
 8002938:	2303      	movs	r3, #3
 800293a:	7223      	strb	r3, [r4, #8]
 800293c:	e7a5      	b.n	800288a <Out0_Process+0x26>
 800293e:	bf00      	nop
 8002940:	2000130c 	.word	0x2000130c
 8002944:	0800281d 	.word	0x0800281d
 8002948:	20001314 	.word	0x20001314
 800294c:	200012e4 	.word	0x200012e4
 8002950:	0800300d 	.word	0x0800300d
 8002954:	08002e21 	.word	0x08002e21
 8002958:	20001312 	.word	0x20001312
 800295c:	0800302d 	.word	0x0800302d

08002960 <Setup0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t Setup0_Process(void)
{
 8002960:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8002962:	f645 4350 	movw	r3, #23632	; 0x5c50
 8002966:	f2c4 0300 	movt	r3, #16384	; 0x4000

  if (pInformation->ControlState != PAUSE)
 800296a:	4d9d      	ldr	r5, [pc, #628]	; (8002be0 <Setup0_Process+0x280>)
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 800296c:	681a      	ldr	r2, [r3, #0]

  if (pInformation->ControlState != PAUSE)
 800296e:	682c      	ldr	r4, [r5, #0]
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8002970:	f243 0304 	movw	r3, #12292	; 0x3004
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
}
 8002974:	b292      	uxth	r2, r2
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8002976:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800297a:	18d3      	adds	r3, r2, r3

  if (pInformation->ControlState != PAUSE)
 800297c:	7a22      	ldrb	r2, [r4, #8]
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 800297e:	005b      	lsls	r3, r3, #1

  if (pInformation->ControlState != PAUSE)
 8002980:	2a09      	cmp	r2, #9
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t Setup0_Process(void)
{
 8002982:	b083      	sub	sp, #12
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8002984:	681e      	ldr	r6, [r3, #0]

  if (pInformation->ControlState != PAUSE)
 8002986:	d044      	beq.n	8002a12 <Setup0_Process+0xb2>
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
}
 8002988:	b2b6      	uxth	r6, r6
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 800298a:	0076      	lsls	r6, r6, #1
 800298c:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8002990:	f506 46c0 	add.w	r6, r6, #24576	; 0x6000

  if (pInformation->ControlState != PAUSE)
  {
    pInformation->USBbmRequestType = *pBuf.b++; /* bmRequestType */
 8002994:	7833      	ldrb	r3, [r6, #0]
    pInformation->USBbRequest = *pBuf.b++; /* bRequest */
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwValue = ByteSwap(*pBuf.w++); /* wValue */
 8002996:	4f93      	ldr	r7, [pc, #588]	; (8002be4 <Setup0_Process+0x284>)
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */

  if (pInformation->ControlState != PAUSE)
  {
    pInformation->USBbmRequestType = *pBuf.b++; /* bmRequestType */
 8002998:	7023      	strb	r3, [r4, #0]
    pInformation->USBbRequest = *pBuf.b++; /* bRequest */
 800299a:	7873      	ldrb	r3, [r6, #1]
 800299c:	7063      	strb	r3, [r4, #1]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwValue = ByteSwap(*pBuf.w++); /* wValue */
 800299e:	88b0      	ldrh	r0, [r6, #4]
 80029a0:	47b8      	blx	r7
 80029a2:	8060      	strh	r0, [r4, #2]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
 80029a4:	8930      	ldrh	r0, [r6, #8]
 80029a6:	682c      	ldr	r4, [r5, #0]
 80029a8:	47b8      	blx	r7
 80029aa:	80a0      	strh	r0, [r4, #4]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwLength = *pBuf.w; /* wLength */
 80029ac:	89b3      	ldrh	r3, [r6, #12]
 80029ae:	682c      	ldr	r4, [r5, #0]
  }

  pInformation->ControlState = SETTING_UP;
 80029b0:	2201      	movs	r2, #1
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwValue = ByteSwap(*pBuf.w++); /* wValue */
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwLength = *pBuf.w; /* wLength */
 80029b2:	80e3      	strh	r3, [r4, #6]
  }

  pInformation->ControlState = SETTING_UP;
 80029b4:	7222      	strb	r2, [r4, #8]
  if (pInformation->USBwLength == 0)
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d030      	beq.n	8002a1c <Setup0_Process+0xbc>
*******************************************************************************/
void Data_Setup0(void)
{
  uint8_t *(*CopyRoutine)(uint16_t);
  RESULT Result;
  uint32_t Request_No = pInformation->USBbRequest;
 80029ba:	7861      	ldrb	r1, [r4, #1]

  CopyRoutine = NULL;
  wOffset = 0;

  /*GET DESCRIPTOR*/
  if (Request_No == GET_DESCRIPTOR)
 80029bc:	2906      	cmp	r1, #6
 80029be:	f000 8087 	beq.w	8002ad0 <Setup0_Process+0x170>
      }  /* End of GET_DESCRIPTOR */
    }
  }

  /*GET STATUS*/
  else if ((Request_No == GET_STATUS) && (pInformation->USBwValue == 0)
 80029c2:	2900      	cmp	r1, #0
 80029c4:	d15e      	bne.n	8002a84 <Setup0_Process+0x124>
 80029c6:	8863      	ldrh	r3, [r4, #2]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	f000 8094 	beq.w	8002af6 <Setup0_Process+0x196>
 80029ce:	4e86      	ldr	r6, [pc, #536]	; (8002be8 <Setup0_Process+0x288>)
    (*CopyRoutine)(0);
    Result = USB_SUCCESS;
  }
  else
  {
    Result = (*pProperty->Class_Data_Setup)(pInformation->USBbRequest);
 80029d0:	6833      	ldr	r3, [r6, #0]
 80029d2:	4608      	mov	r0, r1
 80029d4:	691b      	ldr	r3, [r3, #16]
 80029d6:	4798      	blx	r3
    if (Result == USB_NOT_READY)
 80029d8:	2803      	cmp	r0, #3
    {
      pInformation->ControlState = PAUSE;
 80029da:	682b      	ldr	r3, [r5, #0]
    Result = USB_SUCCESS;
  }
  else
  {
    Result = (*pProperty->Class_Data_Setup)(pInformation->USBbRequest);
    if (Result == USB_NOT_READY)
 80029dc:	d062      	beq.n	8002aa4 <Setup0_Process+0x144>
      pInformation->ControlState = PAUSE;
      return;
    }
  }

  if (pInformation->Ctrl_Info.Usb_wLength == 0xFFFF)
 80029de:	8a1a      	ldrh	r2, [r3, #16]
 80029e0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80029e4:	428a      	cmp	r2, r1
 80029e6:	d05d      	beq.n	8002aa4 <Setup0_Process+0x144>
  {
    /* Data is not ready, wait it */
    pInformation->ControlState = PAUSE;
    return;
  }
  if ((Result == USB_UNSUPPORT) || (pInformation->Ctrl_Info.Usb_wLength == 0))
 80029e8:	2802      	cmp	r0, #2
 80029ea:	d00c      	beq.n	8002a06 <Setup0_Process+0xa6>
 80029ec:	b15a      	cbz	r2, 8002a06 <Setup0_Process+0xa6>
    pInformation->ControlState = STALLED;
    return;
  }


  if (ValBit(pInformation->USBbmRequestType, 7))
 80029ee:	f993 1000 	ldrsb.w	r1, [r3]
 80029f2:	2900      	cmp	r1, #0
 80029f4:	f2c0 80b5 	blt.w	8002b62 <Setup0_Process+0x202>
    pInformation->Ctrl_Info.PacketSize = pProperty->MaxPacketSize;
    DataStageIn();
  }
  else
  {
    pInformation->ControlState = OUT_DATA;
 80029f8:	2203      	movs	r2, #3
 80029fa:	721a      	strb	r2, [r3, #8]
    vSetEPRxStatus(EP_RX_VALID); /* enable for next data reception */
 80029fc:	4b7b      	ldr	r3, [pc, #492]	; (8002bec <Setup0_Process+0x28c>)
 80029fe:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8002a02:	801a      	strh	r2, [r3, #0]
 8002a04:	e001      	b.n	8002a0a <Setup0_Process+0xaa>
    return;
  }
  if ((Result == USB_UNSUPPORT) || (pInformation->Ctrl_Info.Usb_wLength == 0))
  {
    /* Unsupported request */
    pInformation->ControlState = STALLED;
 8002a06:	2208      	movs	r2, #8
 8002a08:	721a      	strb	r2, [r3, #8]
  else
  {
    /* Setup with data stage */
    Data_Setup0();
  }
  return Post0_Process();
 8002a0a:	4b79      	ldr	r3, [pc, #484]	; (8002bf0 <Setup0_Process+0x290>)
 8002a0c:	4798      	blx	r3
}
 8002a0e:	b003      	add	sp, #12
 8002a10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a12:	88e3      	ldrh	r3, [r4, #6]
    pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwLength = *pBuf.w; /* wLength */
  }

  pInformation->ControlState = SETTING_UP;
 8002a14:	2201      	movs	r2, #1
 8002a16:	7222      	strb	r2, [r4, #8]
  if (pInformation->USBwLength == 0)
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d1ce      	bne.n	80029ba <Setup0_Process+0x5a>
{
  RESULT Result = USB_UNSUPPORT;
  uint32_t RequestNo = pInformation->USBbRequest;
  uint32_t ControlState;

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8002a1c:	7823      	ldrb	r3, [r4, #0]
* Return         : None.
*******************************************************************************/
void NoData_Setup0(void)
{
  RESULT Result = USB_UNSUPPORT;
  uint32_t RequestNo = pInformation->USBbRequest;
 8002a1e:	7866      	ldrb	r6, [r4, #1]
  uint32_t ControlState;

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8002a20:	f013 037f 	ands.w	r3, r3, #127	; 0x7f
 8002a24:	d141      	bne.n	8002aaa <Setup0_Process+0x14a>
  {
    /* Device Request*/
    /* SET_CONFIGURATION*/
    if (RequestNo == SET_CONFIGURATION)
 8002a26:	2e09      	cmp	r6, #9
 8002a28:	f000 8108 	beq.w	8002c3c <Setup0_Process+0x2dc>
    {
      Result = Standard_SetConfiguration();
    }

    /*SET ADDRESS*/
    else if (RequestNo == SET_ADDRESS)
 8002a2c:	2e05      	cmp	r6, #5
 8002a2e:	f000 80bf 	beq.w	8002bb0 <Setup0_Process+0x250>
      {
        Result = USB_SUCCESS;
      }
    }
    /*SET FEATURE for Device*/
    else if (RequestNo == SET_FEATURE)
 8002a32:	2e03      	cmp	r6, #3
 8002a34:	f000 80f0 	beq.w	8002c18 <Setup0_Process+0x2b8>
      {
        Result = USB_UNSUPPORT;
      }
    }
    /*Clear FEATURE for Device */
    else if (RequestNo == CLEAR_FEATURE)
 8002a38:	2e01      	cmp	r6, #1
 8002a3a:	d13b      	bne.n	8002ab4 <Setup0_Process+0x154>
    {
      if (pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP
 8002a3c:	78e3      	ldrb	r3, [r4, #3]
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d138      	bne.n	8002ab4 <Setup0_Process+0x154>
          && pInformation->USBwIndex == 0
 8002a42:	88a3      	ldrh	r3, [r4, #4]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d135      	bne.n	8002ab4 <Setup0_Process+0x154>
          && ValBit(pInformation->Current_Feature, 5))
 8002a48:	7a63      	ldrb	r3, [r4, #9]
 8002a4a:	f003 0320 	and.w	r3, r3, #32
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d02f      	beq.n	8002ab4 <Setup0_Process+0x154>
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
  {
    /*CLEAR FEATURE for EndPoint*/
    if (RequestNo == CLEAR_FEATURE)
    {
      Result = Standard_ClearFeature();
 8002a54:	4b67      	ldr	r3, [pc, #412]	; (8002bf4 <Setup0_Process+0x294>)
 8002a56:	4798      	blx	r3
  {
    Result = USB_UNSUPPORT;
  }


  if (Result != USB_SUCCESS)
 8002a58:	bb60      	cbnz	r0, 8002ab4 <Setup0_Process+0x154>
 8002a5a:	682c      	ldr	r4, [r5, #0]
    goto exit_NoData_Setup0;
  }

  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();
 8002a5c:	f645 4350 	movw	r3, #23632	; 0x5c50
 8002a60:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	f243 0302 	movw	r3, #12290	; 0x3002
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
}
 8002a6a:	b292      	uxth	r2, r2
    goto exit_NoData_Setup0;
  }

  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();
 8002a6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002a70:	18d3      	adds	r3, r2, r3
 8002a72:	005b      	lsls	r3, r3, #1
 8002a74:	2200      	movs	r2, #0
 8002a76:	601a      	str	r2, [r3, #0]
 8002a78:	4a5f      	ldr	r2, [pc, #380]	; (8002bf8 <Setup0_Process+0x298>)
 8002a7a:	2306      	movs	r3, #6
 8002a7c:	2130      	movs	r1, #48	; 0x30
 8002a7e:	8011      	strh	r1, [r2, #0]

exit_NoData_Setup0:
  pInformation->ControlState = ControlState;
 8002a80:	7223      	strb	r3, [r4, #8]
 8002a82:	e7c2      	b.n	8002a0a <Setup0_Process+0xaa>
    }

  }

  /*GET CONFIGURATION*/
  else if (Request_No == GET_CONFIGURATION)
 8002a84:	2908      	cmp	r1, #8
 8002a86:	d148      	bne.n	8002b1a <Setup0_Process+0x1ba>
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8002a88:	7823      	ldrb	r3, [r4, #0]
 8002a8a:	065b      	lsls	r3, r3, #25
 8002a8c:	d19f      	bne.n	80029ce <Setup0_Process+0x6e>
    {
      CopyRoutine = Standard_GetConfiguration;
 8002a8e:	4b5b      	ldr	r3, [pc, #364]	; (8002bfc <Setup0_Process+0x29c>)

  }
  
  if (CopyRoutine)
  {
    pInformation->Ctrl_Info.Usb_wOffset = wOffset;
 8002a90:	2000      	movs	r0, #0
    pInformation->Ctrl_Info.CopyData = CopyRoutine;
 8002a92:	61a3      	str	r3, [r4, #24]

  }
  
  if (CopyRoutine)
  {
    pInformation->Ctrl_Info.Usb_wOffset = wOffset;
 8002a94:	8260      	strh	r0, [r4, #18]
    pInformation->Ctrl_Info.CopyData = CopyRoutine;
    /* sb in the original the cast to word was directly */
    /* now the cast is made step by step */
    (*CopyRoutine)(0);
 8002a96:	4798      	blx	r3
      pInformation->ControlState = PAUSE;
      return;
    }
  }

  if (pInformation->Ctrl_Info.Usb_wLength == 0xFFFF)
 8002a98:	682b      	ldr	r3, [r5, #0]
 8002a9a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002a9e:	8a1a      	ldrh	r2, [r3, #16]
 8002aa0:	428a      	cmp	r2, r1
 8002aa2:	d1a3      	bne.n	80029ec <Setup0_Process+0x8c>
  {
    /* Data is not ready, wait it */
    pInformation->ControlState = PAUSE;
 8002aa4:	2209      	movs	r2, #9
 8002aa6:	721a      	strb	r2, [r3, #8]
 8002aa8:	e7af      	b.n	8002a0a <Setup0_Process+0xaa>
    }

  }

  /* Interface Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d071      	beq.n	8002b92 <Setup0_Process+0x232>
      Result = Standard_SetInterface();
    }
  }

  /* EndPoint Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	f000 808d 	beq.w	8002bce <Setup0_Process+0x26e>
  }


  if (Result != USB_SUCCESS)
  {
    Result = (*pProperty->Class_NoData_Setup)(RequestNo);
 8002ab4:	4b4c      	ldr	r3, [pc, #304]	; (8002be8 <Setup0_Process+0x288>)
 8002ab6:	4630      	mov	r0, r6
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	695b      	ldr	r3, [r3, #20]
 8002abc:	4798      	blx	r3
    if (Result == USB_NOT_READY)
 8002abe:	2803      	cmp	r0, #3
 8002ac0:	f000 80c5 	beq.w	8002c4e <Setup0_Process+0x2ee>
 8002ac4:	682c      	ldr	r4, [r5, #0]
      ControlState = PAUSE;
      goto exit_NoData_Setup0;
    }
  }

  if (Result != USB_SUCCESS)
 8002ac6:	2800      	cmp	r0, #0
 8002ac8:	d0c8      	beq.n	8002a5c <Setup0_Process+0xfc>
    /*SET ADDRESS*/
    else if (RequestNo == SET_ADDRESS)
    {
      if ((pInformation->USBwValue0 > 127) || (pInformation->USBwValue1 != 0)
          || (pInformation->USBwIndex != 0)
          || (pInformation->Current_Configuration != 0))
 8002aca:	2308      	movs	r3, #8
  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();

exit_NoData_Setup0:
  pInformation->ControlState = ControlState;
 8002acc:	7223      	strb	r3, [r4, #8]
 8002ace:	e79c      	b.n	8002a0a <Setup0_Process+0xaa>
  wOffset = 0;

  /*GET DESCRIPTOR*/
  if (Request_No == GET_DESCRIPTOR)
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8002ad0:	7823      	ldrb	r3, [r4, #0]
 8002ad2:	065b      	lsls	r3, r3, #25
 8002ad4:	f47f af7b 	bne.w	80029ce <Setup0_Process+0x6e>
    {
      uint8_t wValue1 = pInformation->USBwValue1;
 8002ad8:	78a3      	ldrb	r3, [r4, #2]
      if (wValue1 == DEVICE_DESCRIPTOR)
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
 8002ada:	4e43      	ldr	r6, [pc, #268]	; (8002be8 <Setup0_Process+0x288>)
  if (Request_No == GET_DESCRIPTOR)
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
    {
      uint8_t wValue1 = pInformation->USBwValue1;
      if (wValue1 == DEVICE_DESCRIPTOR)
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	f000 80b0 	beq.w	8002c42 <Setup0_Process+0x2e2>
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
      }
      else if (wValue1 == CONFIG_DESCRIPTOR)
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d05e      	beq.n	8002ba4 <Setup0_Process+0x244>
      {
        CopyRoutine = pProperty->GetConfigDescriptor;
      }
      else if (wValue1 == STRING_DESCRIPTOR)
 8002ae6:	2b03      	cmp	r3, #3
 8002ae8:	f47f af72 	bne.w	80029d0 <Setup0_Process+0x70>
      {
        CopyRoutine = pProperty->GetStringDescriptor;
 8002aec:	6833      	ldr	r3, [r6, #0]
 8002aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      CopyRoutine = Standard_GetInterface;
    }

  }
  
  if (CopyRoutine)
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d1cd      	bne.n	8002a90 <Setup0_Process+0x130>
 8002af4:	e76c      	b.n	80029d0 <Setup0_Process+0x70>
  }

  /*GET STATUS*/
  else if ((Request_No == GET_STATUS) && (pInformation->USBwValue == 0)
           && (pInformation->USBwLength == 0x0002)
           && (pInformation->USBwIndex1 == 0))
 8002af6:	6863      	ldr	r3, [r4, #4]
 8002af8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002afc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b00:	f47f af65 	bne.w	80029ce <Setup0_Process+0x6e>
  {
    /* GET STATUS for Device*/
    if ((Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8002b04:	7823      	ldrb	r3, [r4, #0]
 8002b06:	f013 037f 	ands.w	r3, r3, #127	; 0x7f
 8002b0a:	f040 80a4 	bne.w	8002c56 <Setup0_Process+0x2f6>
        && (pInformation->USBwIndex == 0))
 8002b0e:	88a3      	ldrh	r3, [r4, #4]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	f47f af5c 	bne.w	80029ce <Setup0_Process+0x6e>
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
          && (Status != 0))
      {
        CopyRoutine = Standard_GetStatus;
 8002b16:	4b3a      	ldr	r3, [pc, #232]	; (8002c00 <Setup0_Process+0x2a0>)
 8002b18:	e7ba      	b.n	8002a90 <Setup0_Process+0x130>
    {
      CopyRoutine = Standard_GetConfiguration;
    }
  }
  /*GET INTERFACE*/
  else if (Request_No == GET_INTERFACE)
 8002b1a:	290a      	cmp	r1, #10
 8002b1c:	f47f af57 	bne.w	80029ce <Setup0_Process+0x6e>
  {
    if ((Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8002b20:	7823      	ldrb	r3, [r4, #0]
 8002b22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	f47f af51 	bne.w	80029ce <Setup0_Process+0x6e>
        && (pInformation->Current_Configuration != 0) && (pInformation->USBwValue == 0)
 8002b2c:	7aa3      	ldrb	r3, [r4, #10]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	f43f af4d 	beq.w	80029ce <Setup0_Process+0x6e>
 8002b34:	8863      	ldrh	r3, [r4, #2]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	f47f af49 	bne.w	80029ce <Setup0_Process+0x6e>
        && (pInformation->USBwIndex1 == 0) && (pInformation->USBwLength == 0x0001)
 8002b3c:	6862      	ldr	r2, [r4, #4]
        && ((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS))
 8002b3e:	4e2a      	ldr	r6, [pc, #168]	; (8002be8 <Setup0_Process+0x288>)
  /*GET INTERFACE*/
  else if (Request_No == GET_INTERFACE)
  {
    if ((Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
        && (pInformation->Current_Configuration != 0) && (pInformation->USBwValue == 0)
        && (pInformation->USBwIndex1 == 0) && (pInformation->USBwLength == 0x0001)
 8002b40:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8002b44:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8002b48:	f47f af42 	bne.w	80029d0 <Setup0_Process+0x70>
        && ((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS))
 8002b4c:	6832      	ldr	r2, [r6, #0]
 8002b4e:	4619      	mov	r1, r3
 8002b50:	7960      	ldrb	r0, [r4, #5]
 8002b52:	6993      	ldr	r3, [r2, #24]
 8002b54:	4798      	blx	r3
 8002b56:	2800      	cmp	r0, #0
 8002b58:	f040 80be 	bne.w	8002cd8 <Setup0_Process+0x378>
 8002b5c:	682c      	ldr	r4, [r5, #0]
    {
      CopyRoutine = Standard_GetInterface;
 8002b5e:	4b29      	ldr	r3, [pc, #164]	; (8002c04 <Setup0_Process+0x2a4>)
 8002b60:	e796      	b.n	8002a90 <Setup0_Process+0x130>


  if (ValBit(pInformation->USBbmRequestType, 7))
  {
    /* Device ==> Host */
    __IO uint32_t wLength = pInformation->USBwLength;
 8002b62:	88d9      	ldrh	r1, [r3, #6]
 8002b64:	9101      	str	r1, [sp, #4]
     
    /* Restrict the data length to be the one host asks for */
    if (pInformation->Ctrl_Info.Usb_wLength > wLength)
 8002b66:	9801      	ldr	r0, [sp, #4]
 8002b68:	4282      	cmp	r2, r0
 8002b6a:	d817      	bhi.n	8002b9c <Setup0_Process+0x23c>
    {
      pInformation->Ctrl_Info.Usb_wLength = wLength;
    }
    
    else if (pInformation->Ctrl_Info.Usb_wLength < pInformation->USBwLength)
 8002b6c:	428a      	cmp	r2, r1
    {
      if (pInformation->Ctrl_Info.Usb_wLength < pProperty->MaxPacketSize)
 8002b6e:	4e1e      	ldr	r6, [pc, #120]	; (8002be8 <Setup0_Process+0x288>)
    if (pInformation->Ctrl_Info.Usb_wLength > wLength)
    {
      pInformation->Ctrl_Info.Usb_wLength = wLength;
    }
    
    else if (pInformation->Ctrl_Info.Usb_wLength < pInformation->USBwLength)
 8002b70:	d208      	bcs.n	8002b84 <Setup0_Process+0x224>
    {
      if (pInformation->Ctrl_Info.Usb_wLength < pProperty->MaxPacketSize)
 8002b72:	6831      	ldr	r1, [r6, #0]
 8002b74:	f891 102c 	ldrb.w	r1, [r1, #44]	; 0x2c
 8002b78:	428a      	cmp	r2, r1
 8002b7a:	f080 8095 	bcs.w	8002ca8 <Setup0_Process+0x348>
      {
        Data_Mul_MaxPacketSize = FALSE;
 8002b7e:	4a22      	ldr	r2, [pc, #136]	; (8002c08 <Setup0_Process+0x2a8>)
 8002b80:	2100      	movs	r1, #0
 8002b82:	7011      	strb	r1, [r2, #0]
      {
        Data_Mul_MaxPacketSize = TRUE;
      }
    }   

    pInformation->Ctrl_Info.PacketSize = pProperty->MaxPacketSize;
 8002b84:	6832      	ldr	r2, [r6, #0]
 8002b86:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8002b8a:	829a      	strh	r2, [r3, #20]
    DataStageIn();
 8002b8c:	4b1f      	ldr	r3, [pc, #124]	; (8002c0c <Setup0_Process+0x2ac>)
 8002b8e:	4798      	blx	r3
 8002b90:	e73b      	b.n	8002a0a <Setup0_Process+0xaa>

  /* Interface Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
  {
    /*SET INTERFACE*/
    if (RequestNo == SET_INTERFACE)
 8002b92:	2e0b      	cmp	r6, #11
 8002b94:	d18e      	bne.n	8002ab4 <Setup0_Process+0x154>
    {
      Result = Standard_SetInterface();
 8002b96:	4b1e      	ldr	r3, [pc, #120]	; (8002c10 <Setup0_Process+0x2b0>)
 8002b98:	4798      	blx	r3
 8002b9a:	e75d      	b.n	8002a58 <Setup0_Process+0xf8>
    __IO uint32_t wLength = pInformation->USBwLength;
     
    /* Restrict the data length to be the one host asks for */
    if (pInformation->Ctrl_Info.Usb_wLength > wLength)
    {
      pInformation->Ctrl_Info.Usb_wLength = wLength;
 8002b9c:	9a01      	ldr	r2, [sp, #4]
 8002b9e:	4e12      	ldr	r6, [pc, #72]	; (8002be8 <Setup0_Process+0x288>)
 8002ba0:	821a      	strh	r2, [r3, #16]
 8002ba2:	e7ef      	b.n	8002b84 <Setup0_Process+0x224>
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
      }
      else if (wValue1 == CONFIG_DESCRIPTOR)
      {
        CopyRoutine = pProperty->GetConfigDescriptor;
 8002ba4:	6833      	ldr	r3, [r6, #0]
 8002ba6:	6a1b      	ldr	r3, [r3, #32]
      CopyRoutine = Standard_GetInterface;
    }

  }
  
  if (CopyRoutine)
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	f47f af71 	bne.w	8002a90 <Setup0_Process+0x130>
 8002bae:	e70f      	b.n	80029d0 <Setup0_Process+0x70>
    }

    /*SET ADDRESS*/
    else if (RequestNo == SET_ADDRESS)
    {
      if ((pInformation->USBwValue0 > 127) || (pInformation->USBwValue1 != 0)
 8002bb0:	f994 3003 	ldrsb.w	r3, [r4, #3]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	db88      	blt.n	8002aca <Setup0_Process+0x16a>
 8002bb8:	78a3      	ldrb	r3, [r4, #2]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d185      	bne.n	8002aca <Setup0_Process+0x16a>
          || (pInformation->USBwIndex != 0)
 8002bbe:	88a3      	ldrh	r3, [r4, #4]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d182      	bne.n	8002aca <Setup0_Process+0x16a>
          || (pInformation->Current_Configuration != 0))
 8002bc4:	7aa3      	ldrb	r3, [r4, #10]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	f43f af48 	beq.w	8002a5c <Setup0_Process+0xfc>
 8002bcc:	e77d      	b.n	8002aca <Setup0_Process+0x16a>

  /* EndPoint Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
  {
    /*CLEAR FEATURE for EndPoint*/
    if (RequestNo == CLEAR_FEATURE)
 8002bce:	2e01      	cmp	r6, #1
 8002bd0:	f43f af40 	beq.w	8002a54 <Setup0_Process+0xf4>
    {
      Result = Standard_ClearFeature();
    }
    /* SET FEATURE for EndPoint*/
    else if (RequestNo == SET_FEATURE)
 8002bd4:	2e03      	cmp	r6, #3
 8002bd6:	f47f af6d 	bne.w	8002ab4 <Setup0_Process+0x154>
    {
      Result = Standard_SetEndPointFeature();
 8002bda:	4b0e      	ldr	r3, [pc, #56]	; (8002c14 <Setup0_Process+0x2b4>)
 8002bdc:	4798      	blx	r3
 8002bde:	e73b      	b.n	8002a58 <Setup0_Process+0xf8>
 8002be0:	2000130c 	.word	0x2000130c
 8002be4:	080030b5 	.word	0x080030b5
 8002be8:	200012e4 	.word	0x200012e4
 8002bec:	20001312 	.word	0x20001312
 8002bf0:	0800281d 	.word	0x0800281d
 8002bf4:	08002671 	.word	0x08002671
 8002bf8:	20001314 	.word	0x20001314
 8002bfc:	0800242d 	.word	0x0800242d
 8002c00:	0800247d 	.word	0x0800247d
 8002c04:	08002455 	.word	0x08002455
 8002c08:	200002f0 	.word	0x200002f0
 8002c0c:	08002515 	.word	0x08002515
 8002c10:	08002621 	.word	0x08002621
 8002c14:	08002769 	.word	0x08002769
      }
    }
    /*SET FEATURE for Device*/
    else if (RequestNo == SET_FEATURE)
    {
      if ((pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP) \
 8002c18:	78e3      	ldrb	r3, [r4, #3]
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	f47f af4a 	bne.w	8002ab4 <Setup0_Process+0x154>
          && (pInformation->USBwIndex == 0))
 8002c20:	88a3      	ldrh	r3, [r4, #4]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	f47f af46 	bne.w	8002ab4 <Setup0_Process+0x154>
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetDeviceFeature(void)
{
  SetBit(pInformation->Current_Feature, 5);
 8002c28:	7a62      	ldrb	r2, [r4, #9]
  pUser_Standard_Requests->User_SetDeviceFeature();
 8002c2a:	4b2d      	ldr	r3, [pc, #180]	; (8002ce0 <Setup0_Process+0x380>)
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetDeviceFeature(void)
{
  SetBit(pInformation->Current_Feature, 5);
 8002c2c:	f042 0220 	orr.w	r2, r2, #32
  pUser_Standard_Requests->User_SetDeviceFeature();
 8002c30:	681b      	ldr	r3, [r3, #0]
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetDeviceFeature(void)
{
  SetBit(pInformation->Current_Feature, 5);
 8002c32:	7262      	strb	r2, [r4, #9]
  pUser_Standard_Requests->User_SetDeviceFeature();
 8002c34:	69db      	ldr	r3, [r3, #28]
 8002c36:	4798      	blx	r3
 8002c38:	682c      	ldr	r4, [r5, #0]
 8002c3a:	e70f      	b.n	8002a5c <Setup0_Process+0xfc>
  {
    /* Device Request*/
    /* SET_CONFIGURATION*/
    if (RequestNo == SET_CONFIGURATION)
    {
      Result = Standard_SetConfiguration();
 8002c3c:	4b29      	ldr	r3, [pc, #164]	; (8002ce4 <Setup0_Process+0x384>)
 8002c3e:	4798      	blx	r3
 8002c40:	e70a      	b.n	8002a58 <Setup0_Process+0xf8>
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
    {
      uint8_t wValue1 = pInformation->USBwValue1;
      if (wValue1 == DEVICE_DESCRIPTOR)
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
 8002c42:	6833      	ldr	r3, [r6, #0]
 8002c44:	69db      	ldr	r3, [r3, #28]
      CopyRoutine = Standard_GetInterface;
    }

  }
  
  if (CopyRoutine)
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	f47f af22 	bne.w	8002a90 <Setup0_Process+0x130>
 8002c4c:	e6c0      	b.n	80029d0 <Setup0_Process+0x70>
 8002c4e:	682c      	ldr	r4, [r5, #0]


  if (Result != USB_SUCCESS)
  {
    Result = (*pProperty->Class_NoData_Setup)(RequestNo);
    if (Result == USB_NOT_READY)
 8002c50:	2309      	movs	r3, #9
  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();

exit_NoData_Setup0:
  pInformation->ControlState = ControlState;
 8002c52:	7223      	strb	r3, [r4, #8]
 8002c54:	e6d9      	b.n	8002a0a <Setup0_Process+0xaa>
    {
      CopyRoutine = Standard_GetStatus;
    }

    /* GET STATUS for Interface*/
    else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d031      	beq.n	8002cbe <Setup0_Process+0x35e>
        CopyRoutine = Standard_GetStatus;
      }
    }

    /* GET STATUS for EndPoint*/
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	f47f aeb7 	bne.w	80029ce <Setup0_Process+0x6e>
    {
      Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
 8002c60:	7963      	ldrb	r3, [r4, #5]
 8002c62:	f003 020f 	and.w	r2, r3, #15

      if (ValBit(pInformation->USBwIndex0, 7))
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 8002c66:	0090      	lsls	r0, r2, #2
 8002c68:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
    {
      Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
      Reserved = pInformation->USBwIndex0 & 0x70;

      if (ValBit(pInformation->USBwIndex0, 7))
 8002c6c:	061e      	lsls	r6, r3, #24
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 8002c6e:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
      }
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
 8002c72:	bf56      	itet	pl
 8002c74:	6800      	ldrpl	r0, [r0, #0]

      if (ValBit(pInformation->USBwIndex0, 7))
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 8002c76:	6806      	ldrmi	r6, [r0, #0]
      }
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
 8002c78:	f400 5640 	andpl.w	r6, r0, #12288	; 0x3000
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 8002c7c:	481a      	ldr	r0, [pc, #104]	; (8002ce8 <Setup0_Process+0x388>)

      if (ValBit(pInformation->USBwIndex0, 7))
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 8002c7e:	bf48      	it	mi
 8002c80:	f006 0630 	andmi.w	r6, r6, #48	; 0x30
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 8002c84:	7800      	ldrb	r0, [r0, #0]
 8002c86:	4282      	cmp	r2, r0
 8002c88:	f4bf aea1 	bcs.w	80029ce <Setup0_Process+0x6e>
 8002c8c:	f013 0f70 	tst.w	r3, #112	; 0x70
 8002c90:	bf14      	ite	ne
 8002c92:	2300      	movne	r3, #0
 8002c94:	2301      	moveq	r3, #1
          && (Status != 0))
 8002c96:	2e00      	cmp	r6, #0
 8002c98:	bf0c      	ite	eq
 8002c9a:	2600      	moveq	r6, #0
 8002c9c:	f003 0601 	andne.w	r6, r3, #1
 8002ca0:	2e00      	cmp	r6, #0
 8002ca2:	f47f af38 	bne.w	8002b16 <Setup0_Process+0x1b6>
 8002ca6:	e692      	b.n	80029ce <Setup0_Process+0x6e>
    {
      if (pInformation->Ctrl_Info.Usb_wLength < pProperty->MaxPacketSize)
      {
        Data_Mul_MaxPacketSize = FALSE;
      }
      else if ((pInformation->Ctrl_Info.Usb_wLength % pProperty->MaxPacketSize) == 0)
 8002ca8:	fb92 f0f1 	sdiv	r0, r2, r1
 8002cac:	fb01 2210 	mls	r2, r1, r0, r2
 8002cb0:	2a00      	cmp	r2, #0
 8002cb2:	f47f af67 	bne.w	8002b84 <Setup0_Process+0x224>
      {
        Data_Mul_MaxPacketSize = TRUE;
 8002cb6:	4a0d      	ldr	r2, [pc, #52]	; (8002cec <Setup0_Process+0x38c>)
 8002cb8:	2101      	movs	r1, #1
 8002cba:	7011      	strb	r1, [r2, #0]
 8002cbc:	e762      	b.n	8002b84 <Setup0_Process+0x224>
    }

    /* GET STATUS for Interface*/
    else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
    {
      if (((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS)
 8002cbe:	4e0c      	ldr	r6, [pc, #48]	; (8002cf0 <Setup0_Process+0x390>)
 8002cc0:	7960      	ldrb	r0, [r4, #5]
 8002cc2:	6833      	ldr	r3, [r6, #0]
 8002cc4:	699b      	ldr	r3, [r3, #24]
 8002cc6:	4798      	blx	r3
 8002cc8:	b930      	cbnz	r0, 8002cd8 <Setup0_Process+0x378>
          && (pInformation->Current_Configuration != 0))
 8002cca:	682c      	ldr	r4, [r5, #0]
 8002ccc:	7aa3      	ldrb	r3, [r4, #10]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	f47f af21 	bne.w	8002b16 <Setup0_Process+0x1b6>
 8002cd4:	7861      	ldrb	r1, [r4, #1]
 8002cd6:	e67b      	b.n	80029d0 <Setup0_Process+0x70>
 8002cd8:	682b      	ldr	r3, [r5, #0]
 8002cda:	7859      	ldrb	r1, [r3, #1]
 8002cdc:	e678      	b.n	80029d0 <Setup0_Process+0x70>
 8002cde:	bf00      	nop
 8002ce0:	20001308 	.word	0x20001308
 8002ce4:	080025e5 	.word	0x080025e5
 8002ce8:	200000f0 	.word	0x200000f0
 8002cec:	200002f0 	.word	0x200002f0
 8002cf0:	200012e4 	.word	0x200012e4

08002cf4 <SetDeviceAddress>:
* Input          : - Val: device address.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetDeviceAddress(uint8_t Val)
{
 8002cf4:	b470      	push	{r4, r5, r6}
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;
 8002cf6:	4b0f      	ldr	r3, [pc, #60]	; (8002d34 <SetDeviceAddress+0x40>)
 8002cf8:	781e      	ldrb	r6, [r3, #0]

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 8002cfa:	b196      	cbz	r6, 8002d22 <SetDeviceAddress+0x2e>
 8002cfc:	f44f 44b8 	mov.w	r4, #23552	; 0x5c00
 8002d00:	f2c4 0400 	movt	r4, #16384	; 0x4000
 8002d04:	2300      	movs	r3, #0
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 8002d06:	6825      	ldr	r5, [r4, #0]
 8002d08:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 8002d0c:	f640 720f 	movw	r2, #3855	; 0xf0f
 8002d10:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8002d14:	402a      	ands	r2, r5
{
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 8002d16:	3301      	adds	r3, #1
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 8002d18:	430a      	orrs	r2, r1
{
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 8002d1a:	429e      	cmp	r6, r3
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 8002d1c:	f844 2b04 	str.w	r2, [r4], #4
{
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 8002d20:	d8f1      	bhi.n	8002d06 <SetDeviceAddress+0x12>
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
  } /* for */
  _SetDADDR(Val | DADDR_EF); /* set device address and enable function */ 
 8002d22:	f645 434c 	movw	r3, #23628	; 0x5c4c
 8002d26:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8002d2a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002d2e:	6018      	str	r0, [r3, #0]
}
 8002d30:	bc70      	pop	{r4, r5, r6}
 8002d32:	4770      	bx	lr
 8002d34:	200000f0 	.word	0x200000f0

08002d38 <In0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t In0_Process(void)
{
 8002d38:	b510      	push	{r4, lr}
  uint32_t ControlState = pInformation->ControlState;
 8002d3a:	4c14      	ldr	r4, [pc, #80]	; (8002d8c <In0_Process+0x54>)
 8002d3c:	6823      	ldr	r3, [r4, #0]
 8002d3e:	7a1a      	ldrb	r2, [r3, #8]

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
 8002d40:	2a02      	cmp	r2, #2
 8002d42:	bf18      	it	ne
 8002d44:	2a04      	cmpne	r2, #4
 8002d46:	d010      	beq.n	8002d6a <In0_Process+0x32>
    DataStageIn();
    /* ControlState may be changed outside the function */
    ControlState = pInformation->ControlState;
  }

  else if (ControlState == WAIT_STATUS_IN)
 8002d48:	2a06      	cmp	r2, #6
 8002d4a:	d004      	beq.n	8002d56 <In0_Process+0x1e>
 8002d4c:	2208      	movs	r2, #8
  else
  {
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;
 8002d4e:	721a      	strb	r2, [r3, #8]

  return Post0_Process();
 8002d50:	4b0f      	ldr	r3, [pc, #60]	; (8002d90 <In0_Process+0x58>)
 8002d52:	4798      	blx	r3
}
 8002d54:	bd10      	pop	{r4, pc}
    ControlState = pInformation->ControlState;
  }

  else if (ControlState == WAIT_STATUS_IN)
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 8002d56:	785a      	ldrb	r2, [r3, #1]
 8002d58:	2a05      	cmp	r2, #5
 8002d5a:	d00b      	beq.n	8002d74 <In0_Process+0x3c>
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
    {
      SetDeviceAddress(pInformation->USBwValue0);
      pUser_Standard_Requests->User_SetDeviceAddress();
    }
    (*pProperty->Process_Status_IN)();
 8002d5c:	4b0d      	ldr	r3, [pc, #52]	; (8002d94 <In0_Process+0x5c>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	4798      	blx	r3
 8002d64:	6823      	ldr	r3, [r4, #0]
 8002d66:	2208      	movs	r2, #8
 8002d68:	e7f1      	b.n	8002d4e <In0_Process+0x16>
{
  uint32_t ControlState = pInformation->ControlState;

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
  {
    DataStageIn();
 8002d6a:	4b0b      	ldr	r3, [pc, #44]	; (8002d98 <In0_Process+0x60>)
 8002d6c:	4798      	blx	r3
    /* ControlState may be changed outside the function */
    ControlState = pInformation->ControlState;
 8002d6e:	6823      	ldr	r3, [r4, #0]
 8002d70:	7a1a      	ldrb	r2, [r3, #8]
 8002d72:	e7ec      	b.n	8002d4e <In0_Process+0x16>
  }

  else if (ControlState == WAIT_STATUS_IN)
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
 8002d74:	781a      	ldrb	r2, [r3, #0]
    ControlState = pInformation->ControlState;
  }

  else if (ControlState == WAIT_STATUS_IN)
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 8002d76:	0652      	lsls	r2, r2, #25
 8002d78:	d1f0      	bne.n	8002d5c <In0_Process+0x24>
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
    {
      SetDeviceAddress(pInformation->USBwValue0);
 8002d7a:	78d8      	ldrb	r0, [r3, #3]
 8002d7c:	4b07      	ldr	r3, [pc, #28]	; (8002d9c <In0_Process+0x64>)
 8002d7e:	4798      	blx	r3
      pUser_Standard_Requests->User_SetDeviceAddress();
 8002d80:	4b07      	ldr	r3, [pc, #28]	; (8002da0 <In0_Process+0x68>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	6a1b      	ldr	r3, [r3, #32]
 8002d86:	4798      	blx	r3
 8002d88:	e7e8      	b.n	8002d5c <In0_Process+0x24>
 8002d8a:	bf00      	nop
 8002d8c:	2000130c 	.word	0x2000130c
 8002d90:	0800281d 	.word	0x0800281d
 8002d94:	200012e4 	.word	0x200012e4
 8002d98:	08002515 	.word	0x08002515
 8002d9c:	08002cf5 	.word	0x08002cf5
 8002da0:	20001308 	.word	0x20001308

08002da4 <NOP_Process>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop

08002da8 <USB_Init>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Init(void)
{
 8002da8:	b510      	push	{r4, lr}
  pInformation = &Device_Info;
 8002daa:	f241 22ec 	movw	r2, #4844	; 0x12ec
 8002dae:	f241 340c 	movw	r4, #4876	; 0x130c
 8002db2:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8002db6:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8002dba:	6022      	str	r2, [r4, #0]
  pInformation->ControlState = 2;
 8002dbc:	2402      	movs	r4, #2
 8002dbe:	7214      	strb	r4, [r2, #8]
  pProperty = &Device_Property;
 8002dc0:	f241 20e4 	movw	r0, #4836	; 0x12e4
 8002dc4:	f240 036c 	movw	r3, #108	; 0x6c
  pUser_Standard_Requests = &User_Standard_Requests;
 8002dc8:	f241 3108 	movw	r1, #4872	; 0x1308
 8002dcc:	f240 029c 	movw	r2, #156	; 0x9c
*******************************************************************************/
void USB_Init(void)
{
  pInformation = &Device_Info;
  pInformation->ControlState = 2;
  pProperty = &Device_Property;
 8002dd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002dd4:	f2c2 0000 	movt	r0, #8192	; 0x2000
  pUser_Standard_Requests = &User_Standard_Requests;
 8002dd8:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8002ddc:	f2c2 0200 	movt	r2, #8192	; 0x2000
*******************************************************************************/
void USB_Init(void)
{
  pInformation = &Device_Info;
  pInformation->ControlState = 2;
  pProperty = &Device_Property;
 8002de0:	6003      	str	r3, [r0, #0]
  pUser_Standard_Requests = &User_Standard_Requests;
 8002de2:	600a      	str	r2, [r1, #0]
  /* Initialize devices one by one */
  pProperty->Init();
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4798      	blx	r3
 8002de8:	bd10      	pop	{r4, pc}
 8002dea:	bf00      	nop

08002dec <UserToPMABufferCopy>:
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
 8002dec:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
 8002df0:	f501 5140 	add.w	r1, r1, #12288	; 0x3000
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 8002df4:	3201      	adds	r2, #1
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
 8002df6:	0049      	lsls	r1, r1, #1
  for (i = n; i != 0; i--)
 8002df8:	1053      	asrs	r3, r2, #1
*                  - wNBytes: no. of bytes to be copied.
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8002dfa:	b410      	push	{r4}
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 8002dfc:	d00d      	beq.n	8002e1a <UserToPMABufferCopy+0x2e>
 8002dfe:	1d0a      	adds	r2, r1, #4
*                  - wPMABufAddr: address into PMA.
*                  - wNBytes: no. of bytes to be copied.
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
 8002e00:	3002      	adds	r0, #2
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
  {
    temp1 = (uint16_t) * pbUsrBuf;
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8002e02:	f810 4c01 	ldrb.w	r4, [r0, #-1]
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
  {
    temp1 = (uint16_t) * pbUsrBuf;
 8002e06:	f810 1c02 	ldrb.w	r1, [r0, #-2]
 8002e0a:	3002      	adds	r0, #2
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8002e0c:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
    *pdwVal++ = temp2;
 8002e10:	f822 1c04 	strh.w	r1, [r2, #-4]
 8002e14:	3204      	adds	r2, #4
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 8002e16:	3b01      	subs	r3, #1
 8002e18:	d1f3      	bne.n	8002e02 <UserToPMABufferCopy+0x16>
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
    *pdwVal++ = temp2;
    pdwVal++;
    pbUsrBuf++;
  }
}
 8002e1a:	bc10      	pop	{r4}
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop

08002e20 <PMAToUserBufferCopy>:
void PMAToUserBufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
 8002e20:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
 8002e24:	f501 5140 	add.w	r1, r1, #12288	; 0x3000
* Output         : None.
* Return         : None.
*******************************************************************************/
void PMAToUserBufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
 8002e28:	3201      	adds	r2, #1
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
 8002e2a:	0049      	lsls	r1, r1, #1
  for (i = n; i != 0; i--)
 8002e2c:	1053      	asrs	r3, r2, #1
 8002e2e:	d008      	beq.n	8002e42 <PMAToUserBufferCopy+0x22>
*                  - wPMABufAddr = address into PMA.
*                  - wNBytes     = no. of bytes to be copied.
* Output         : None.
* Return         : None.
*******************************************************************************/
void PMAToUserBufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
 8002e30:	3002      	adds	r0, #2
 8002e32:	1f0a      	subs	r2, r1, #4
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8002e34:	f852 1f04 	ldr.w	r1, [r2, #4]!
 8002e38:	f820 1c02 	strh.w	r1, [r0, #-2]
 8002e3c:	3002      	adds	r0, #2
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 8002e3e:	3b01      	subs	r3, #1
 8002e40:	d1f8      	bne.n	8002e34 <PMAToUserBufferCopy+0x14>
 8002e42:	4770      	bx	lr

08002e44 <SetBTABLE>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetBTABLE(uint16_t wRegValue)
{
  _SetBTABLE(wRegValue);
 8002e44:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8002e48:	f645 4250 	movw	r2, #23632	; 0x5c50
 8002e4c:	4003      	ands	r3, r0
 8002e4e:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8002e52:	6013      	str	r3, [r2, #0]
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop

08002e58 <SetEPType>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPType(uint8_t bEpNum, uint16_t wType)
{
  _SetEPType(bEpNum, wType);
 8002e58:	0080      	lsls	r0, r0, #2
 8002e5a:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 8002e5e:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 8002e62:	6810      	ldr	r0, [r2, #0]
 8002e64:	f648 138f 	movw	r3, #35215	; 0x898f
 8002e68:	4003      	ands	r3, r0
 8002e6a:	4319      	orrs	r1, r3
 8002e6c:	6011      	str	r1, [r2, #0]
 8002e6e:	4770      	bx	lr

08002e70 <SetEPTxStatus>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxStatus(uint8_t bEpNum, uint16_t wState)
{
  _SetEPTxStatus(bEpNum, wState);
 8002e70:	0080      	lsls	r0, r0, #2
 8002e72:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 8002e76:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
*                  wState: new state.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxStatus(uint8_t bEpNum, uint16_t wState)
{
 8002e7a:	b410      	push	{r4}
  _SetEPTxStatus(bEpNum, wState);
 8002e7c:	f001 0010 	and.w	r0, r1, #16
 8002e80:	6814      	ldr	r4, [r2, #0]
 8002e82:	f648 73bf 	movw	r3, #36799	; 0x8fbf
 8002e86:	b280      	uxth	r0, r0
 8002e88:	4023      	ands	r3, r4
 8002e8a:	b968      	cbnz	r0, 8002ea8 <SetEPTxStatus+0x38>
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	f001 0120 	and.w	r1, r1, #32
 8002e92:	b289      	uxth	r1, r1
 8002e94:	b109      	cbz	r1, 8002e9a <SetEPTxStatus+0x2a>
 8002e96:	f083 0320 	eor.w	r3, r3, #32
 8002e9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ea2:	6013      	str	r3, [r2, #0]
}
 8002ea4:	bc10      	pop	{r4}
 8002ea6:	4770      	bx	lr
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxStatus(uint8_t bEpNum, uint16_t wState)
{
  _SetEPTxStatus(bEpNum, wState);
 8002ea8:	f083 0310 	eor.w	r3, r3, #16
 8002eac:	e7ef      	b.n	8002e8e <SetEPTxStatus+0x1e>
 8002eae:	bf00      	nop

08002eb0 <SetEPRxStatus>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxStatus(uint8_t bEpNum, uint16_t wState)
{
  _SetEPRxStatus(bEpNum, wState);
 8002eb0:	0080      	lsls	r0, r0, #2
 8002eb2:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 8002eb6:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
*                  wState: new state.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxStatus(uint8_t bEpNum, uint16_t wState)
{
 8002eba:	b410      	push	{r4}
  _SetEPRxStatus(bEpNum, wState);
 8002ebc:	f401 5080 	and.w	r0, r1, #4096	; 0x1000
 8002ec0:	6814      	ldr	r4, [r2, #0]
 8002ec2:	f64b 738f 	movw	r3, #49039	; 0xbf8f
 8002ec6:	b280      	uxth	r0, r0
 8002ec8:	4023      	ands	r3, r4
 8002eca:	b968      	cbnz	r0, 8002ee8 <SetEPRxStatus+0x38>
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 8002ed2:	b289      	uxth	r1, r1
 8002ed4:	b109      	cbz	r1, 8002eda <SetEPRxStatus+0x2a>
 8002ed6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002eda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ede:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ee2:	6013      	str	r3, [r2, #0]
}
 8002ee4:	bc10      	pop	{r4}
 8002ee6:	4770      	bx	lr
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxStatus(uint8_t bEpNum, uint16_t wState)
{
  _SetEPRxStatus(bEpNum, wState);
 8002ee8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002eec:	e7ef      	b.n	8002ece <SetEPRxStatus+0x1e>
 8002eee:	bf00      	nop

08002ef0 <SetEPTxValid>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxValid(uint8_t bEpNum)
{
  _SetEPTxStatus(bEpNum, EP_TX_VALID);
 8002ef0:	0080      	lsls	r0, r0, #2
 8002ef2:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 8002ef6:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 8002efa:	6811      	ldr	r1, [r2, #0]
 8002efc:	f648 73bf 	movw	r3, #36799	; 0x8fbf
 8002f00:	400b      	ands	r3, r1
 8002f02:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8002f06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f0e:	6013      	str	r3, [r2, #0]
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop

08002f14 <SetEPRxValid>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxValid(uint8_t bEpNum)
{
  _SetEPRxStatus(bEpNum, EP_RX_VALID);
 8002f14:	0080      	lsls	r0, r0, #2
 8002f16:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 8002f1a:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 8002f1e:	6811      	ldr	r1, [r2, #0]
 8002f20:	f64b 738f 	movw	r3, #49039	; 0xbf8f
 8002f24:	400b      	ands	r3, r1
 8002f26:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002f2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f32:	6013      	str	r3, [r2, #0]
 8002f34:	4770      	bx	lr
 8002f36:	bf00      	nop

08002f38 <Clear_Status_Out>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Clear_Status_Out(uint8_t bEpNum)
{
  _ClearEP_KIND(bEpNum);
 8002f38:	0080      	lsls	r0, r0, #2
 8002f3a:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 8002f3e:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 8002f42:	6811      	ldr	r1, [r2, #0]
 8002f44:	f640 630f 	movw	r3, #3599	; 0xe0f
 8002f48:	400b      	ands	r3, r1
 8002f4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f52:	6013      	str	r3, [r2, #0]
 8002f54:	4770      	bx	lr
 8002f56:	bf00      	nop

08002f58 <ClearDTOG_RX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_RX(uint8_t bEpNum)
{
  _ClearDTOG_RX(bEpNum);
 8002f58:	0080      	lsls	r0, r0, #2
 8002f5a:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 8002f5e:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	0451      	lsls	r1, r2, #17
 8002f66:	d508      	bpl.n	8002f7a <ClearDTOG_RX+0x22>
 8002f68:	6819      	ldr	r1, [r3, #0]
 8002f6a:	f640 720f 	movw	r2, #3855	; 0xf0f
 8002f6e:	400a      	ands	r2, r1
 8002f70:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002f74:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002f78:	601a      	str	r2, [r3, #0]
 8002f7a:	4770      	bx	lr

08002f7c <ClearDTOG_TX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_TX(uint8_t bEpNum)
{
  _ClearDTOG_TX(bEpNum);
 8002f7c:	0080      	lsls	r0, r0, #2
 8002f7e:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 8002f82:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	0650      	lsls	r0, r2, #25
 8002f8a:	d508      	bpl.n	8002f9e <ClearDTOG_TX+0x22>
 8002f8c:	6819      	ldr	r1, [r3, #0]
 8002f8e:	f640 720f 	movw	r2, #3855	; 0xf0f
 8002f92:	400a      	ands	r2, r1
 8002f94:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f98:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8002f9c:	601a      	str	r2, [r3, #0]
 8002f9e:	4770      	bx	lr

08002fa0 <SetEPTxAddr>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxAddr(uint8_t bEpNum, uint16_t wAddr)
{
  _SetEPTxAddr(bEpNum, wAddr);
 8002fa0:	f645 4350 	movw	r3, #23632	; 0x5c50
 8002fa4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	f64f 73fe 	movw	r3, #65534	; 0xfffe
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 8002fae:	b292      	uxth	r2, r2
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxAddr(uint8_t bEpNum, uint16_t wAddr)
{
  _SetEPTxAddr(bEpNum, wAddr);
 8002fb0:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8002fb4:	f100 5200 	add.w	r2, r0, #536870912	; 0x20000000
 8002fb8:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 8002fbc:	0052      	lsls	r2, r2, #1
 8002fbe:	400b      	ands	r3, r1
 8002fc0:	6013      	str	r3, [r2, #0]
 8002fc2:	4770      	bx	lr

08002fc4 <SetEPRxAddr>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxAddr(uint8_t bEpNum, uint16_t wAddr)
{
  _SetEPRxAddr(bEpNum, wAddr);
 8002fc4:	f645 4350 	movw	r3, #23632	; 0x5c50
 8002fc8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	f243 0304 	movw	r3, #12292	; 0x3004
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 8002fd2:	b292      	uxth	r2, r2
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxAddr(uint8_t bEpNum, uint16_t wAddr)
{
  _SetEPRxAddr(bEpNum, wAddr);
 8002fd4:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8002fd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002fdc:	18c3      	adds	r3, r0, r3
 8002fde:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002fe2:	005b      	lsls	r3, r3, #1
 8002fe4:	400a      	ands	r2, r1
 8002fe6:	601a      	str	r2, [r3, #0]
 8002fe8:	4770      	bx	lr
 8002fea:	bf00      	nop

08002fec <GetEPTxAddr>:
* Output         : None.
* Return         : Rx buffer address. 
*******************************************************************************/
uint16_t GetEPTxAddr(uint8_t bEpNum)
{
  return(_GetEPTxAddr(bEpNum));
 8002fec:	f645 4350 	movw	r3, #23632	; 0x5c50
 8002ff0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002ff4:	681b      	ldr	r3, [r3, #0]
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 8002ff6:	b29b      	uxth	r3, r3
* Output         : None.
* Return         : Rx buffer address. 
*******************************************************************************/
uint16_t GetEPTxAddr(uint8_t bEpNum)
{
  return(_GetEPTxAddr(bEpNum));
 8002ff8:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8002ffc:	f100 5300 	add.w	r3, r0, #536870912	; 0x20000000
 8003000:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8003004:	005b      	lsls	r3, r3, #1
}
 8003006:	8818      	ldrh	r0, [r3, #0]
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop

0800300c <GetEPRxAddr>:
* Output         : None.
* Return         : Rx buffer address.
*******************************************************************************/
uint16_t GetEPRxAddr(uint8_t bEpNum)
{
  return(_GetEPRxAddr(bEpNum));
 800300c:	f645 4350 	movw	r3, #23632	; 0x5c50
 8003010:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	f243 0304 	movw	r3, #12292	; 0x3004
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 800301a:	b292      	uxth	r2, r2
* Output         : None.
* Return         : Rx buffer address.
*******************************************************************************/
uint16_t GetEPRxAddr(uint8_t bEpNum)
{
  return(_GetEPRxAddr(bEpNum));
 800301c:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8003020:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003024:	18c3      	adds	r3, r0, r3
 8003026:	005b      	lsls	r3, r3, #1
}
 8003028:	8818      	ldrh	r0, [r3, #0]
 800302a:	4770      	bx	lr

0800302c <SetEPTxCount>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPTxCount(bEpNum, wCount);
 800302c:	f645 4350 	movw	r3, #23632	; 0x5c50
 8003030:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	f243 0302 	movw	r3, #12290	; 0x3002
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 800303a:	b292      	uxth	r2, r2
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPTxCount(bEpNum, wCount);
 800303c:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8003040:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003044:	18c3      	adds	r3, r0, r3
 8003046:	005b      	lsls	r3, r3, #1
 8003048:	6019      	str	r1, [r3, #0]
 800304a:	4770      	bx	lr

0800304c <SetEPRxCount>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPRxCount(bEpNum, wCount);
 800304c:	f645 4350 	movw	r3, #23632	; 0x5c50
 8003050:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	f243 0306 	movw	r3, #12294	; 0x3006
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 800305a:	b292      	uxth	r2, r2
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPRxCount(bEpNum, wCount);
 800305c:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8003060:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003064:	18c3      	adds	r3, r0, r3
 8003066:	005b      	lsls	r3, r3, #1
 8003068:	293e      	cmp	r1, #62	; 0x3e
 800306a:	d909      	bls.n	8003080 <SetEPRxCount+0x34>
 800306c:	094a      	lsrs	r2, r1, #5
 800306e:	06c9      	lsls	r1, r1, #27
 8003070:	d101      	bne.n	8003076 <SetEPRxCount+0x2a>
 8003072:	3a01      	subs	r2, #1
 8003074:	b292      	uxth	r2, r2
 8003076:	0292      	lsls	r2, r2, #10
 8003078:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800307c:	601a      	str	r2, [r3, #0]
 800307e:	4770      	bx	lr
 8003080:	084a      	lsrs	r2, r1, #1
 8003082:	07c8      	lsls	r0, r1, #31
 8003084:	bf48      	it	mi
 8003086:	3201      	addmi	r2, #1
 8003088:	0292      	lsls	r2, r2, #10
 800308a:	601a      	str	r2, [r3, #0]
 800308c:	4770      	bx	lr
 800308e:	bf00      	nop

08003090 <GetEPRxCount>:
* Output         : None.
* Return         : Rx count value.
*******************************************************************************/
uint16_t GetEPRxCount(uint8_t bEpNum)
{
  return(_GetEPRxCount(bEpNum));
 8003090:	f645 4350 	movw	r3, #23632	; 0x5c50
 8003094:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	f243 0306 	movw	r3, #12294	; 0x3006
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 800309e:	b292      	uxth	r2, r2
* Output         : None.
* Return         : Rx count value.
*******************************************************************************/
uint16_t GetEPRxCount(uint8_t bEpNum)
{
  return(_GetEPRxCount(bEpNum));
 80030a0:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 80030a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80030a8:	18c3      	adds	r3, r0, r3
 80030aa:	005b      	lsls	r3, r3, #1
 80030ac:	6818      	ldr	r0, [r3, #0]
}
 80030ae:	0580      	lsls	r0, r0, #22
 80030b0:	0d80      	lsrs	r0, r0, #22
 80030b2:	4770      	bx	lr

080030b4 <ByteSwap>:
uint16_t ByteSwap(uint16_t wSwW)
{
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
 80030b4:	b2c3      	uxtb	r3, r0
 80030b6:	0a00      	lsrs	r0, r0, #8
  return(wRet);
}
 80030b8:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 80030bc:	4770      	bx	lr
 80030be:	bf00      	nop

080030c0 <USB_SIL_Init>:
* Input          : None.
* Output         : None.
* Return         : Status.
*******************************************************************************/
uint32_t USB_SIL_Init(void)
{
 80030c0:	b410      	push	{r4}
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
  wInterrupt_Mask = IMR_MSK;
 80030c2:	f241 3310 	movw	r3, #4880	; 0x1310
*******************************************************************************/
uint32_t USB_SIL_Init(void)
{
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
 80030c6:	f645 4444 	movw	r4, #23620	; 0x5c44
  wInterrupt_Mask = IMR_MSK;
  /* set interrupts mask */
  _SetCNTR(wInterrupt_Mask);
 80030ca:	f645 4240 	movw	r2, #23616	; 0x5c40
uint32_t USB_SIL_Init(void)
{
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
  wInterrupt_Mask = IMR_MSK;
 80030ce:	f44f 413f 	mov.w	r1, #48896	; 0xbf00
*******************************************************************************/
uint32_t USB_SIL_Init(void)
{
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
 80030d2:	2000      	movs	r0, #0
 80030d4:	f2c4 0400 	movt	r4, #16384	; 0x4000
  wInterrupt_Mask = IMR_MSK;
 80030d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
  /* set interrupts mask */
  _SetCNTR(wInterrupt_Mask);
 80030dc:	f2c4 0200 	movt	r2, #16384	; 0x4000
*******************************************************************************/
uint32_t USB_SIL_Init(void)
{
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
 80030e0:	6020      	str	r0, [r4, #0]
  wInterrupt_Mask = IMR_MSK;
 80030e2:	8019      	strh	r1, [r3, #0]
  /* set interrupts mask */
  _SetCNTR(wInterrupt_Mask);
 80030e4:	6011      	str	r1, [r2, #0]
  return 0;
}
 80030e6:	bc10      	pop	{r4}
 80030e8:	4770      	bx	lr
 80030ea:	bf00      	nop

080030ec <USB_SIL_Read>:
*                     received data buffer.
* Output         : None.
* Return         : Number of received data (in Bytes).
*******************************************************************************/
uint32_t USB_SIL_Read(uint8_t bEpAddr, uint8_t* pBufferPointer)
{
 80030ec:	b570      	push	{r4, r5, r6, lr}
  uint32_t DataLength = 0;

  /* Get the number of received data on the selected Endpoint */
  DataLength = GetEPRxCount(bEpAddr & 0x7F);
 80030ee:	f243 0391 	movw	r3, #12433	; 0x3091
 80030f2:	f000 057f 	and.w	r5, r0, #127	; 0x7f
 80030f6:	4628      	mov	r0, r5
 80030f8:	f6c0 0300 	movt	r3, #2048	; 0x800
*                     received data buffer.
* Output         : None.
* Return         : Number of received data (in Bytes).
*******************************************************************************/
uint32_t USB_SIL_Read(uint8_t bEpAddr, uint8_t* pBufferPointer)
{
 80030fc:	460e      	mov	r6, r1
  uint32_t DataLength = 0;

  /* Get the number of received data on the selected Endpoint */
  DataLength = GetEPRxCount(bEpAddr & 0x7F);
 80030fe:	4798      	blx	r3
  
  /* Use the memory interface function to write to the selected endpoint */
  PMAToUserBufferCopy(pBufferPointer, GetEPRxAddr(bEpAddr & 0x7F), DataLength);
 8003100:	f243 030d 	movw	r3, #12301	; 0x300d
uint32_t USB_SIL_Read(uint8_t bEpAddr, uint8_t* pBufferPointer)
{
  uint32_t DataLength = 0;

  /* Get the number of received data on the selected Endpoint */
  DataLength = GetEPRxCount(bEpAddr & 0x7F);
 8003104:	4604      	mov	r4, r0
  
  /* Use the memory interface function to write to the selected endpoint */
  PMAToUserBufferCopy(pBufferPointer, GetEPRxAddr(bEpAddr & 0x7F), DataLength);
 8003106:	f6c0 0300 	movt	r3, #2048	; 0x800
 800310a:	4628      	mov	r0, r5
 800310c:	4798      	blx	r3
 800310e:	f642 6321 	movw	r3, #11809	; 0x2e21
 8003112:	4601      	mov	r1, r0
 8003114:	4622      	mov	r2, r4
 8003116:	4630      	mov	r0, r6
 8003118:	f6c0 0300 	movt	r3, #2048	; 0x800
 800311c:	4798      	blx	r3

  /* Return the number of received data */
  return DataLength;
}
 800311e:	4620      	mov	r0, r4
 8003120:	bd70      	pop	{r4, r5, r6, pc}
 8003122:	bf00      	nop

08003124 <CTR_LP>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void CTR_LP(void)
{
 8003124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003128:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 80032d8 <CTR_LP+0x1b4>
 800312c:	b083      	sub	sp, #12
  __IO uint16_t wEPVal = 0;
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 800312e:	f645 4b44 	movw	fp, #23620	; 0x5c44
* Output         : None.
* Return         : None.
*******************************************************************************/
void CTR_LP(void)
{
  __IO uint16_t wEPVal = 0;
 8003132:	2300      	movs	r3, #0
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 8003134:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 80032dc <CTR_LP+0x1b8>
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 8003138:	4d62      	ldr	r5, [pc, #392]	; (80032c4 <CTR_LP+0x1a0>)
* Output         : None.
* Return         : None.
*******************************************************************************/
void CTR_LP(void)
{
  __IO uint16_t wEPVal = 0;
 800313a:	f8ad 3006 	strh.w	r3, [sp, #6]
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 800313e:	f2c4 0b00 	movt	fp, #16384	; 0x4000
 8003142:	46d0      	mov	r8, sl
 8003144:	f8db 3000 	ldr.w	r3, [fp]
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 8003148:	f44f 44b8 	mov.w	r4, #23552	; 0x5c00
*******************************************************************************/
void CTR_LP(void)
{
  __IO uint16_t wEPVal = 0;
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 800314c:	b29a      	uxth	r2, r3
 800314e:	041b      	lsls	r3, r3, #16
 8003150:	f8aa 2000 	strh.w	r2, [sl]
 8003154:	f140 80ab 	bpl.w	80032ae <CTR_LP+0x18a>
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 8003158:	f8b8 2000 	ldrh.w	r2, [r8]
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 800315c:	f2c4 0400 	movt	r4, #16384	; 0x4000
  __IO uint16_t wEPVal = 0;
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 8003160:	f002 020f 	and.w	r2, r2, #15
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
 8003164:	0090      	lsls	r0, r2, #2
 8003166:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
	    SaveTState = SaveRState & EPTX_STAT;
 800316a:	4e57      	ldr	r6, [pc, #348]	; (80032c8 <CTR_LP+0x1a4>)
	    SaveRState &=  EPRX_STAT;	

	    _SetEPRxTxStatus(ENDP0,EP_RX_NAK,EP_TX_NAK);
 800316c:	f64b 71bf 	movw	r1, #49087	; 0xbfbf
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 8003170:	4f54      	ldr	r7, [pc, #336]	; (80032c4 <CTR_LP+0x1a0>)
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
    if (EPindex == 0)
 8003172:	4613      	mov	r3, r2
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
 8003174:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
  __IO uint16_t wEPVal = 0;
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 8003178:	f889 2000 	strb.w	r2, [r9]
    if (EPindex == 0)
 800317c:	2a00      	cmp	r2, #0
 800317e:	d133      	bne.n	80031e8 <CTR_LP+0xc4>
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 8003180:	6823      	ldr	r3, [r4, #0]
 8003182:	b29b      	uxth	r3, r3
 8003184:	802b      	strh	r3, [r5, #0]
	    SaveTState = SaveRState & EPTX_STAT;
 8003186:	882b      	ldrh	r3, [r5, #0]
 8003188:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800318c:	8033      	strh	r3, [r6, #0]
	    SaveRState &=  EPRX_STAT;	
 800318e:	882b      	ldrh	r3, [r5, #0]
 8003190:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003194:	802b      	strh	r3, [r5, #0]

	    _SetEPRxTxStatus(ENDP0,EP_RX_NAK,EP_TX_NAK);
 8003196:	6823      	ldr	r3, [r4, #0]
 8003198:	4019      	ands	r1, r3
 800319a:	f481 5100 	eor.w	r1, r1, #8192	; 0x2000
 800319e:	f081 0120 	eor.w	r1, r1, #32
 80031a2:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 80031a6:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80031aa:	6021      	str	r1, [r4, #0]

      /* DIR bit = origin of the interrupt */

      if ((wIstr & ISTR_DIR) == 0)
 80031ac:	f8b8 3000 	ldrh.w	r3, [r8]
 80031b0:	f003 0310 	and.w	r3, r3, #16
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d049      	beq.n	800324e <CTR_LP+0x12a>
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */

        wEPVal = _GetENDPOINT(ENDP0);
 80031ba:	6823      	ldr	r3, [r4, #0]
 80031bc:	b29b      	uxth	r3, r3
 80031be:	f8ad 3006 	strh.w	r3, [sp, #6]
        
        if ((wEPVal &EP_SETUP) != 0)
 80031c2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80031c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d171      	bne.n	80032b4 <CTR_LP+0x190>

		      _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
          return;
        }

        else if ((wEPVal & EP_CTR_RX) != 0)
 80031d0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80031d4:	b21b      	sxth	r3, r3
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	dab4      	bge.n	8003144 <CTR_LP+0x20>
        {
          _ClearEP_CTR_RX(ENDP0);
 80031da:	6822      	ldr	r2, [r4, #0]
 80031dc:	f640 738f 	movw	r3, #3983	; 0xf8f
 80031e0:	4013      	ands	r3, r2
 80031e2:	6023      	str	r3, [r4, #0]
          Out0_Process();
 80031e4:	4b39      	ldr	r3, [pc, #228]	; (80032cc <CTR_LP+0x1a8>)
 80031e6:	e038      	b.n	800325a <CTR_LP+0x136>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
 80031e8:	6802      	ldr	r2, [r0, #0]
 80031ea:	b292      	uxth	r2, r2
 80031ec:	f8ad 2006 	strh.w	r2, [sp, #6]
      if ((wEPVal & EP_CTR_RX) != 0)
 80031f0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80031f4:	b212      	sxth	r2, r2
 80031f6:	2a00      	cmp	r2, #0
 80031f8:	db1b      	blt.n	8003232 <CTR_LP+0x10e>
        /* call OUT service function */
        (*pEpInt_OUT[EPindex-1])();

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & EP_CTR_TX) != 0)
 80031fa:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80031fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003202:	b29b      	uxth	r3, r3
 8003204:	2b00      	cmp	r3, #0
 8003206:	d09d      	beq.n	8003144 <CTR_LP+0x20>
      {
        /* clear int flag */
        _ClearEP_CTR_TX(EPindex);
 8003208:	f899 1000 	ldrb.w	r1, [r9]
 800320c:	f648 730f 	movw	r3, #36623	; 0x8f0f
 8003210:	008a      	lsls	r2, r1, #2
 8003212:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8003216:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 800321a:	6810      	ldr	r0, [r2, #0]

        /* call IN service function */
        (*pEpInt_IN[EPindex-1])();
 800321c:	3901      	subs	r1, #1
      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & EP_CTR_TX) != 0)
      {
        /* clear int flag */
        _ClearEP_CTR_TX(EPindex);
 800321e:	4003      	ands	r3, r0
 8003220:	6013      	str	r3, [r2, #0]

        /* call IN service function */
        (*pEpInt_IN[EPindex-1])();
 8003222:	f240 022c 	movw	r2, #44	; 0x2c
 8003226:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800322a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800322e:	4798      	blx	r3
 8003230:	e788      	b.n	8003144 <CTR_LP+0x20>
      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
      if ((wEPVal & EP_CTR_RX) != 0)
      {
        /* clear int flag */
        _ClearEP_CTR_RX(EPindex);
 8003232:	6801      	ldr	r1, [r0, #0]
 8003234:	f640 728f 	movw	r2, #3983	; 0xf8f
 8003238:	400a      	ands	r2, r1
 800323a:	6002      	str	r2, [r0, #0]

        /* call OUT service function */
        (*pEpInt_OUT[EPindex-1])();
 800323c:	f240 0248 	movw	r2, #72	; 0x48
 8003240:	3b01      	subs	r3, #1
 8003242:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8003246:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800324a:	4798      	blx	r3
 800324c:	e7d5      	b.n	80031fa <CTR_LP+0xd6>
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */

        _ClearEP_CTR_TX(ENDP0);
 800324e:	6822      	ldr	r2, [r4, #0]
 8003250:	f648 730f 	movw	r3, #36623	; 0x8f0f
 8003254:	4013      	ands	r3, r2
 8003256:	6023      	str	r3, [r4, #0]
        In0_Process();
 8003258:	4b1d      	ldr	r3, [pc, #116]	; (80032d0 <CTR_LP+0x1ac>)
        }

        else if ((wEPVal & EP_CTR_RX) != 0)
        {
          _ClearEP_CTR_RX(ENDP0);
          Out0_Process();
 800325a:	4798      	blx	r3
          /* before terminate set Tx & Rx status */
     
		     _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
 800325c:	6821      	ldr	r1, [r4, #0]
 800325e:	883a      	ldrh	r2, [r7, #0]
 8003260:	f64b 73bf 	movw	r3, #49087	; 0xbfbf
 8003264:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003268:	b292      	uxth	r2, r2
 800326a:	400b      	ands	r3, r1
 800326c:	b10a      	cbz	r2, 8003272 <CTR_LP+0x14e>
 800326e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003272:	883a      	ldrh	r2, [r7, #0]
 8003274:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003278:	b292      	uxth	r2, r2
 800327a:	b10a      	cbz	r2, 8003280 <CTR_LP+0x15c>
 800327c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003280:	8832      	ldrh	r2, [r6, #0]
 8003282:	f002 0210 	and.w	r2, r2, #16
 8003286:	b292      	uxth	r2, r2
 8003288:	b10a      	cbz	r2, 800328e <CTR_LP+0x16a>
 800328a:	f083 0310 	eor.w	r3, r3, #16
 800328e:	8832      	ldrh	r2, [r6, #0]
 8003290:	f002 0220 	and.w	r2, r2, #32
 8003294:	b292      	uxth	r2, r2
 8003296:	b10a      	cbz	r2, 800329c <CTR_LP+0x178>
 8003298:	f083 0320 	eor.w	r3, r3, #32
 800329c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032a0:	f44f 42b8 	mov.w	r2, #23552	; 0x5c00
 80032a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032a8:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80032ac:	6013      	str	r3, [r2, #0]
      } /* if((wEPVal & EP_CTR_TX) != 0) */

    }/* if(EPindex == 0) else */

  }/* while(...) */
}
 80032ae:	b003      	add	sp, #12
 80032b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

        wEPVal = _GetENDPOINT(ENDP0);
        
        if ((wEPVal &EP_SETUP) != 0)
        {
          _ClearEP_CTR_RX(ENDP0); /* SETUP bit kept frozen while CTR_RX = 1 */
 80032b4:	6822      	ldr	r2, [r4, #0]
 80032b6:	f640 738f 	movw	r3, #3983	; 0xf8f
 80032ba:	4013      	ands	r3, r2
 80032bc:	6023      	str	r3, [r4, #0]
          Setup0_Process();
 80032be:	4b05      	ldr	r3, [pc, #20]	; (80032d4 <CTR_LP+0x1b0>)
 80032c0:	e7cb      	b.n	800325a <CTR_LP+0x136>
 80032c2:	bf00      	nop
 80032c4:	20001312 	.word	0x20001312
 80032c8:	20001314 	.word	0x20001314
 80032cc:	08002865 	.word	0x08002865
 80032d0:	08002d39 	.word	0x08002d39
 80032d4:	08002961 	.word	0x08002961
 80032d8:	20000ab4 	.word	0x20000ab4
 80032dc:	200012e8 	.word	0x200012e8
 80032e0:	00006425 	.word	0x00006425
 80032e4:	00000a0a 	.word	0x00000a0a
 80032e8:	2a2a2a2a 	.word	0x2a2a2a2a
 80032ec:	2a2a2a2a 	.word	0x2a2a2a2a
 80032f0:	2a2a2a2a 	.word	0x2a2a2a2a
 80032f4:	2a2a2a2a 	.word	0x2a2a2a2a
 80032f8:	2a2a2a2a 	.word	0x2a2a2a2a
 80032fc:	2a2a2a2a 	.word	0x2a2a2a2a
 8003300:	2a2a2a2a 	.word	0x2a2a2a2a
 8003304:	2a2a2a2a 	.word	0x2a2a2a2a
 8003308:	2a2a2a2a 	.word	0x2a2a2a2a
 800330c:	2a2a2a2a 	.word	0x2a2a2a2a
 8003310:	2a2a2a2a 	.word	0x2a2a2a2a
 8003314:	2a2a2a2a 	.word	0x2a2a2a2a
 8003318:	2a2a2a2a 	.word	0x2a2a2a2a
 800331c:	0a2a2a2a 	.word	0x0a2a2a2a
 8003320:	00000000 	.word	0x00000000
 8003324:	20202020 	.word	0x20202020
 8003328:	20202020 	.word	0x20202020
 800332c:	20202020 	.word	0x20202020
 8003330:	20202020 	.word	0x20202020
 8003334:	20202020 	.word	0x20202020
 8003338:	64452020 	.word	0x64452020
 800333c:	30562075 	.word	0x30562075
 8003340:	2020332e 	.word	0x2020332e
 8003344:	20202020 	.word	0x20202020
 8003348:	20202020 	.word	0x20202020
 800334c:	20202020 	.word	0x20202020
 8003350:	20202020 	.word	0x20202020
 8003354:	20202020 	.word	0x20202020
 8003358:	0a202020 	.word	0x0a202020
 800335c:	00000000 	.word	0x00000000
 8003360:	2e31202a 	.word	0x2e31202a
 8003364:	44454c20 	.word	0x44454c20
 8003368:	73655420 	.word	0x73655420
 800336c:	20202074 	.word	0x20202074
 8003370:	20202020 	.word	0x20202020
 8003374:	20202020 	.word	0x20202020
 8003378:	20202020 	.word	0x20202020
 800337c:	20202020 	.word	0x20202020
 8003380:	20202020 	.word	0x20202020
 8003384:	20202020 	.word	0x20202020
 8003388:	20202020 	.word	0x20202020
 800338c:	20202020 	.word	0x20202020
 8003390:	20202020 	.word	0x20202020
 8003394:	0a2a2020 	.word	0x0a2a2020
 8003398:	00000000 	.word	0x00000000
 800339c:	2e32202a 	.word	0x2e32202a
 80033a0:	79654b20 	.word	0x79654b20
 80033a4:	20646150 	.word	0x20646150
 80033a8:	74736554 	.word	0x74736554
 80033ac:	20202020 	.word	0x20202020
 80033b0:	20202020 	.word	0x20202020
 80033b4:	20202020 	.word	0x20202020
 80033b8:	20202020 	.word	0x20202020
 80033bc:	20202020 	.word	0x20202020
 80033c0:	20202020 	.word	0x20202020
 80033c4:	20202020 	.word	0x20202020
 80033c8:	20202020 	.word	0x20202020
 80033cc:	20202020 	.word	0x20202020
 80033d0:	0a2a2020 	.word	0x0a2a2020
 80033d4:	00000000 	.word	0x00000000
 80033d8:	2e33202a 	.word	0x2e33202a
 80033dc:	65533720 	.word	0x65533720
 80033e0:	65542067 	.word	0x65542067
 80033e4:	20207473 	.word	0x20207473
 80033e8:	20202020 	.word	0x20202020
 80033ec:	20202020 	.word	0x20202020
 80033f0:	20202020 	.word	0x20202020
 80033f4:	20202020 	.word	0x20202020
 80033f8:	20202020 	.word	0x20202020
 80033fc:	20202020 	.word	0x20202020
 8003400:	20202020 	.word	0x20202020
 8003404:	20202020 	.word	0x20202020
 8003408:	20202020 	.word	0x20202020
 800340c:	0a2a2020 	.word	0x0a2a2020
 8003410:	00000000 	.word	0x00000000
 8003414:	2e34202a 	.word	0x2e34202a
 8003418:	20202020 	.word	0x20202020
 800341c:	20202020 	.word	0x20202020
 8003420:	20202020 	.word	0x20202020
 8003424:	20202020 	.word	0x20202020
 8003428:	20202020 	.word	0x20202020
 800342c:	20202020 	.word	0x20202020
 8003430:	20202020 	.word	0x20202020
 8003434:	20202020 	.word	0x20202020
 8003438:	20202020 	.word	0x20202020
 800343c:	20202020 	.word	0x20202020
 8003440:	20202020 	.word	0x20202020
 8003444:	20202020 	.word	0x20202020
 8003448:	0a2a2020 	.word	0x0a2a2020
 800344c:	00000000 	.word	0x00000000
 8003450:	2e35202a 	.word	0x2e35202a
 8003454:	20202020 	.word	0x20202020
 8003458:	20202020 	.word	0x20202020
 800345c:	20202020 	.word	0x20202020
 8003460:	20202020 	.word	0x20202020
 8003464:	20202020 	.word	0x20202020
 8003468:	20202020 	.word	0x20202020
 800346c:	20202020 	.word	0x20202020
 8003470:	20202020 	.word	0x20202020
 8003474:	20202020 	.word	0x20202020
 8003478:	20202020 	.word	0x20202020
 800347c:	20202020 	.word	0x20202020
 8003480:	20202020 	.word	0x20202020
 8003484:	0a2a2020 	.word	0x0a2a2020
 8003488:	00000000 	.word	0x00000000
 800348c:	2e36202a 	.word	0x2e36202a
 8003490:	20202020 	.word	0x20202020
 8003494:	20202020 	.word	0x20202020
 8003498:	20202020 	.word	0x20202020
 800349c:	20202020 	.word	0x20202020
 80034a0:	20202020 	.word	0x20202020
 80034a4:	20202020 	.word	0x20202020
 80034a8:	20202020 	.word	0x20202020
 80034ac:	20202020 	.word	0x20202020
 80034b0:	20202020 	.word	0x20202020
 80034b4:	20202020 	.word	0x20202020
 80034b8:	20202020 	.word	0x20202020
 80034bc:	20202020 	.word	0x20202020
 80034c0:	0a2a2020 	.word	0x0a2a2020
 80034c4:	00000000 	.word	0x00000000
 80034c8:	2e37202a 	.word	0x2e37202a
 80034cc:	20202020 	.word	0x20202020
 80034d0:	20202020 	.word	0x20202020
 80034d4:	20202020 	.word	0x20202020
 80034d8:	20202020 	.word	0x20202020
 80034dc:	20202020 	.word	0x20202020
 80034e0:	20202020 	.word	0x20202020
 80034e4:	20202020 	.word	0x20202020
 80034e8:	20202020 	.word	0x20202020
 80034ec:	20202020 	.word	0x20202020
 80034f0:	20202020 	.word	0x20202020
 80034f4:	20202020 	.word	0x20202020
 80034f8:	20202020 	.word	0x20202020
 80034fc:	0a2a2020 	.word	0x0a2a2020
 8003500:	00000000 	.word	0x00000000
 8003504:	2e38202a 	.word	0x2e38202a
 8003508:	20202020 	.word	0x20202020
 800350c:	20202020 	.word	0x20202020
 8003510:	20202020 	.word	0x20202020
 8003514:	20202020 	.word	0x20202020
 8003518:	20202020 	.word	0x20202020
 800351c:	20202020 	.word	0x20202020
 8003520:	20202020 	.word	0x20202020
 8003524:	20202020 	.word	0x20202020
 8003528:	20202020 	.word	0x20202020
 800352c:	20202020 	.word	0x20202020
 8003530:	20202020 	.word	0x20202020
 8003534:	20202020 	.word	0x20202020
 8003538:	0a2a2020 	.word	0x0a2a2020
 800353c:	00000000 	.word	0x00000000
 8003540:	2e39202a 	.word	0x2e39202a
 8003544:	20202020 	.word	0x20202020
 8003548:	20202020 	.word	0x20202020
 800354c:	20202020 	.word	0x20202020
 8003550:	20202020 	.word	0x20202020
 8003554:	20202020 	.word	0x20202020
 8003558:	20202020 	.word	0x20202020
 800355c:	20202020 	.word	0x20202020
 8003560:	20202020 	.word	0x20202020
 8003564:	20202020 	.word	0x20202020
 8003568:	20202020 	.word	0x20202020
 800356c:	20202020 	.word	0x20202020
 8003570:	20202020 	.word	0x20202020
 8003574:	0a2a2020 	.word	0x0a2a2020
 8003578:	00000000 	.word	0x00000000
 800357c:	2e6d202a 	.word	0x2e6d202a
 8003580:	654d2020 	.word	0x654d2020
 8003584:	2020756e 	.word	0x2020756e
 8003588:	20202020 	.word	0x20202020
 800358c:	20202020 	.word	0x20202020
 8003590:	20202020 	.word	0x20202020
 8003594:	20202020 	.word	0x20202020
 8003598:	20202020 	.word	0x20202020
 800359c:	20202020 	.word	0x20202020
 80035a0:	20202020 	.word	0x20202020
 80035a4:	20202020 	.word	0x20202020
 80035a8:	20202020 	.word	0x20202020
 80035ac:	20202020 	.word	0x20202020
 80035b0:	0a2a2020 	.word	0x0a2a2020
 80035b4:	00000000 	.word	0x00000000
 80035b8:	00203e3e 	.word	0x00203e3e
 80035bc:	5079654b 	.word	0x5079654b
 80035c0:	53206461 	.word	0x53206461
 80035c4:	74726174 	.word	0x74726174
 80035c8:	70203a20 	.word	0x70203a20
 80035cc:	73736572 	.word	0x73736572
 80035d0:	6f777420 	.word	0x6f777420
 80035d4:	79656b20 	.word	0x79656b20
 80035d8:	6f742073 	.word	0x6f742073
 80035dc:	69786520 	.word	0x69786520
 80035e0:	00000a74 	.word	0x00000a74
 80035e4:	4b207825 	.word	0x4b207825
 80035e8:	72507965 	.word	0x72507965
 80035ec:	65737365 	.word	0x65737365
 80035f0:	00000a64 	.word	0x00000a64
 80035f4:	4b207825 	.word	0x4b207825
 80035f8:	65527965 	.word	0x65527965
 80035fc:	7361656c 	.word	0x7361656c
 8003600:	000a6465 	.word	0x000a6465
 8003604:	4b207825 	.word	0x4b207825
 8003608:	65527965 	.word	0x65527965
 800360c:	74616570 	.word	0x74616570
 8003610:	746e4320 	.word	0x746e4320
 8003614:	25203a20 	.word	0x25203a20
 8003618:	00000a64 	.word	0x00000a64
 800361c:	2079654b 	.word	0x2079654b
 8003620:	74697845 	.word	0x74697845
 8003624:	0000000a 	.word	0x0000000a
 8003628:	72616d53 	.word	0x72616d53
 800362c:	626f5274 	.word	0x626f5274
 8003630:	4220746f 	.word	0x4220746f
 8003634:	00000044 	.word	0x00000044
 8003638:	61726142 	.word	0x61726142
 800363c:	0000006d 	.word	0x0000006d

08003640 <Virtual_Com_Port_StringVendor>:
 8003640:	00530326 004d0054 00630069 006f0072     &.S.T.M.i.c.r.o.
 8003650:	006c0065 00630065 00720074 006e006f     e.l.e.c.t.r.o.n.
 8003660:	00630069 00000073                       i.c.s...

08003668 <Virtual_Com_Port_DeviceDescriptor>:
 8003668:	02000112 40000002 57400483 02010200     .......@..@W....
 8003678:	00000103                                ....

0800367c <Virtual_Com_Port_StringLangID>:
 800367c:	04090304                                ....

08003680 <Virtual_Com_Port_StringProduct>:
 8003680:	00530332 004d0054 00320033 00560020     2.S.T.M.3.2. .V.
 8003690:	00720069 00750074 006c0061 00430020     i.r.t.u.a.l. .C.
 80036a0:	004d004f 00500020 0072006f 00200074     O.M. .P.o.r.t. .
 80036b0:	00000020                                 ...

080036b4 <Virtual_Com_Port_ConfigDescriptor>:
 80036b4:	00430209 c0000102 00040932 02020100     ..C.....2.......
 80036c4:	24050001 05011000 01000124 02022404     ...$....$....$..
 80036d4:	00062405 82050701 ff000803 00010409     .$..............
 80036e4:	00000a02 03050700 00004002 02810507     .........@......
 80036f4:	00000040                                @...
