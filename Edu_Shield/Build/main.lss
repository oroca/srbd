
main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000f14c  08000000  08000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000009e8  20000000  0800f14c  00018000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000179c  20000a00  0800fc00  00018a00  2**9
                  ALLOC
  3 ._usrstack    00000100  2000219c  0801139c  00018a00  2**0
                  ALLOC
  4 .debug_info   0002923f  00000000  00000000  000189e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00008fd1  00000000  00000000  00041c27  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_loc    0001cedb  00000000  00000000  0004abf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 000012f0  00000000  00000000  00067ad8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00001c70  00000000  00000000  00068dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000dbff  00000000  00000000  0006aa38  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00005617  00000000  00000000  00078637  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      00000011  00000000  00000000  0007dc4e  2**0
                  CONTENTS, READONLY
 12 .ARM.attributes 00000035  00000000  00000000  0007dc5f  2**0
                  CONTENTS, READONLY
 13 .debug_frame  00002fd0  00000000  00000000  0007dc94  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000000 <g_pfnVectors>:
 8000000:	00 50 00 20 ad ac 00 08                             .P. ....

08000008 <sscanf>:
 8000008:	b40e      	push	{r1, r2, r3}
 800000a:	b530      	push	{r4, r5, lr}
 800000c:	b09c      	sub	sp, #112	; 0x70
 800000e:	ad1f      	add	r5, sp, #124	; 0x7c
 8000010:	cd08      	ldmia	r5!, {r3}
 8000012:	2381      	movs	r3, #129	; 0x81
 8000014:	ac02      	add	r4, sp, #8
 8000016:	009b      	lsls	r3, r3, #2
 8000018:	81a3      	strh	r3, [r4, #12]
 800001a:	9002      	str	r0, [sp, #8]
 800001c:	9006      	str	r0, [sp, #24]
 800001e:	f000 f899 	bl	8000154 <strlen>
 8000022:	4b0b      	ldr	r3, [pc, #44]	; (8000050 <sscanf+0x48>)
 8000024:	6223      	str	r3, [r4, #32]
 8000026:	2300      	movs	r3, #0
 8000028:	6323      	str	r3, [r4, #48]	; 0x30
 800002a:	6463      	str	r3, [r4, #68]	; 0x44
 800002c:	2301      	movs	r3, #1
 800002e:	425b      	negs	r3, r3
 8000030:	81e3      	strh	r3, [r4, #14]
 8000032:	4b08      	ldr	r3, [pc, #32]	; (8000054 <sscanf+0x4c>)
 8000034:	6060      	str	r0, [r4, #4]
 8000036:	6160      	str	r0, [r4, #20]
 8000038:	1c21      	adds	r1, r4, #0
 800003a:	6818      	ldr	r0, [r3, #0]
 800003c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800003e:	1c2b      	adds	r3, r5, #0
 8000040:	9501      	str	r5, [sp, #4]
 8000042:	f000 f8ed 	bl	8000220 <__ssvfscanf_r>
 8000046:	b01c      	add	sp, #112	; 0x70
 8000048:	bc30      	pop	{r4, r5}
 800004a:	bc08      	pop	{r3}
 800004c:	b003      	add	sp, #12
 800004e:	4718      	bx	r3
 8000050:	080000d5 	.word	0x080000d5
 8000054:	20000100 	.word	0x20000100

08000058 <_sscanf_r>:
 8000058:	b40c      	push	{r2, r3}
 800005a:	b570      	push	{r4, r5, r6, lr}
 800005c:	b09c      	sub	sp, #112	; 0x70
 800005e:	ad20      	add	r5, sp, #128	; 0x80
 8000060:	cd08      	ldmia	r5!, {r3}
 8000062:	2381      	movs	r3, #129	; 0x81
 8000064:	ac02      	add	r4, sp, #8
 8000066:	1c06      	adds	r6, r0, #0
 8000068:	009b      	lsls	r3, r3, #2
 800006a:	1c08      	adds	r0, r1, #0
 800006c:	81a3      	strh	r3, [r4, #12]
 800006e:	9102      	str	r1, [sp, #8]
 8000070:	9106      	str	r1, [sp, #24]
 8000072:	f000 f86f 	bl	8000154 <strlen>
 8000076:	4b0b      	ldr	r3, [pc, #44]	; (80000a4 <_sscanf_r+0x4c>)
 8000078:	6223      	str	r3, [r4, #32]
 800007a:	2300      	movs	r3, #0
 800007c:	6323      	str	r3, [r4, #48]	; 0x30
 800007e:	6463      	str	r3, [r4, #68]	; 0x44
 8000080:	2301      	movs	r3, #1
 8000082:	425b      	negs	r3, r3
 8000084:	6060      	str	r0, [r4, #4]
 8000086:	6160      	str	r0, [r4, #20]
 8000088:	81e3      	strh	r3, [r4, #14]
 800008a:	1c30      	adds	r0, r6, #0
 800008c:	1c21      	adds	r1, r4, #0
 800008e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8000090:	1c2b      	adds	r3, r5, #0
 8000092:	9501      	str	r5, [sp, #4]
 8000094:	f000 f8c4 	bl	8000220 <__ssvfscanf_r>
 8000098:	b01c      	add	sp, #112	; 0x70
 800009a:	bc70      	pop	{r4, r5, r6}
 800009c:	bc08      	pop	{r3}
 800009e:	b002      	add	sp, #8
 80000a0:	4718      	bx	r3
 80000a2:	46c0      	nop			; (mov r8, r8)
 80000a4:	080000d5 	.word	0x080000d5

080000a8 <__sread>:
 80000a8:	b538      	push	{r3, r4, r5, lr}
 80000aa:	1c0c      	adds	r4, r1, #0
 80000ac:	250e      	movs	r5, #14
 80000ae:	5f49      	ldrsh	r1, [r1, r5]
 80000b0:	f001 f95a 	bl	8001368 <_read_r>
 80000b4:	2800      	cmp	r0, #0
 80000b6:	db05      	blt.n	80000c4 <__sread+0x1c>
 80000b8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80000ba:	1813      	adds	r3, r2, r0
 80000bc:	6523      	str	r3, [r4, #80]	; 0x50
 80000be:	bc38      	pop	{r3, r4, r5}
 80000c0:	bc02      	pop	{r1}
 80000c2:	4708      	bx	r1
 80000c4:	89a2      	ldrh	r2, [r4, #12]
 80000c6:	4b02      	ldr	r3, [pc, #8]	; (80000d0 <__sread+0x28>)
 80000c8:	4013      	ands	r3, r2
 80000ca:	81a3      	strh	r3, [r4, #12]
 80000cc:	e7f7      	b.n	80000be <__sread+0x16>
 80000ce:	46c0      	nop			; (mov r8, r8)
 80000d0:	ffffefff 	.word	0xffffefff

080000d4 <__seofread>:
 80000d4:	2000      	movs	r0, #0
 80000d6:	4770      	bx	lr

080000d8 <__swrite>:
 80000d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80000da:	1c0c      	adds	r4, r1, #0
 80000dc:	8989      	ldrh	r1, [r1, #12]
 80000de:	1c05      	adds	r5, r0, #0
 80000e0:	1c17      	adds	r7, r2, #0
 80000e2:	1c1e      	adds	r6, r3, #0
 80000e4:	05cb      	lsls	r3, r1, #23
 80000e6:	d506      	bpl.n	80000f6 <__swrite+0x1e>
 80000e8:	230e      	movs	r3, #14
 80000ea:	5ee1      	ldrsh	r1, [r4, r3]
 80000ec:	2200      	movs	r2, #0
 80000ee:	2302      	movs	r3, #2
 80000f0:	f001 f826 	bl	8001140 <_lseek_r>
 80000f4:	89a1      	ldrh	r1, [r4, #12]
 80000f6:	4b06      	ldr	r3, [pc, #24]	; (8000110 <__swrite+0x38>)
 80000f8:	4019      	ands	r1, r3
 80000fa:	81a1      	strh	r1, [r4, #12]
 80000fc:	1c28      	adds	r0, r5, #0
 80000fe:	230e      	movs	r3, #14
 8000100:	5ee1      	ldrsh	r1, [r4, r3]
 8000102:	1c3a      	adds	r2, r7, #0
 8000104:	1c33      	adds	r3, r6, #0
 8000106:	f000 ff91 	bl	800102c <_write_r>
 800010a:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800010c:	bc02      	pop	{r1}
 800010e:	4708      	bx	r1
 8000110:	ffffefff 	.word	0xffffefff

08000114 <__sseek>:
 8000114:	b538      	push	{r3, r4, r5, lr}
 8000116:	1c0c      	adds	r4, r1, #0
 8000118:	250e      	movs	r5, #14
 800011a:	5f49      	ldrsh	r1, [r1, r5]
 800011c:	f001 f810 	bl	8001140 <_lseek_r>
 8000120:	89a2      	ldrh	r2, [r4, #12]
 8000122:	1c43      	adds	r3, r0, #1
 8000124:	d007      	beq.n	8000136 <__sseek+0x22>
 8000126:	2380      	movs	r3, #128	; 0x80
 8000128:	015b      	lsls	r3, r3, #5
 800012a:	4313      	orrs	r3, r2
 800012c:	81a3      	strh	r3, [r4, #12]
 800012e:	6520      	str	r0, [r4, #80]	; 0x50
 8000130:	bc38      	pop	{r3, r4, r5}
 8000132:	bc02      	pop	{r1}
 8000134:	4708      	bx	r1
 8000136:	4b02      	ldr	r3, [pc, #8]	; (8000140 <__sseek+0x2c>)
 8000138:	4013      	ands	r3, r2
 800013a:	81a3      	strh	r3, [r4, #12]
 800013c:	e7f8      	b.n	8000130 <__sseek+0x1c>
 800013e:	46c0      	nop			; (mov r8, r8)
 8000140:	ffffefff 	.word	0xffffefff

08000144 <__sclose>:
 8000144:	b508      	push	{r3, lr}
 8000146:	230e      	movs	r3, #14
 8000148:	5ec9      	ldrsh	r1, [r1, r3]
 800014a:	f000 ff85 	bl	8001058 <_close_r>
 800014e:	bc08      	pop	{r3}
 8000150:	bc02      	pop	{r1}
 8000152:	4708      	bx	r1

08000154 <strlen>:
 8000154:	2300      	movs	r3, #0
 8000156:	5cc2      	ldrb	r2, [r0, r3]
 8000158:	3301      	adds	r3, #1
 800015a:	2a00      	cmp	r2, #0
 800015c:	d1fb      	bne.n	8000156 <strlen+0x2>
 800015e:	1e58      	subs	r0, r3, #1
 8000160:	4770      	bx	lr
 8000162:	46c0      	nop			; (mov r8, r8)

08000164 <strncmp>:
 8000164:	b570      	push	{r4, r5, r6, lr}
 8000166:	1c06      	adds	r6, r0, #0
 8000168:	2000      	movs	r0, #0
 800016a:	2a00      	cmp	r2, #0
 800016c:	d02f      	beq.n	80001ce <strncmp+0x6a>
 800016e:	1c0b      	adds	r3, r1, #0
 8000170:	4333      	orrs	r3, r6
 8000172:	079c      	lsls	r4, r3, #30
 8000174:	d12e      	bne.n	80001d4 <strncmp+0x70>
 8000176:	2a03      	cmp	r2, #3
 8000178:	d92c      	bls.n	80001d4 <strncmp+0x70>
 800017a:	6834      	ldr	r4, [r6, #0]
 800017c:	680d      	ldr	r5, [r1, #0]
 800017e:	42ac      	cmp	r4, r5
 8000180:	d128      	bne.n	80001d4 <strncmp+0x70>
 8000182:	1f13      	subs	r3, r2, #4
 8000184:	2b00      	cmp	r3, #0
 8000186:	d022      	beq.n	80001ce <strncmp+0x6a>
 8000188:	4d23      	ldr	r5, [pc, #140]	; (8000218 <strncmp+0xb4>)
 800018a:	1962      	adds	r2, r4, r5
 800018c:	43a2      	bics	r2, r4
 800018e:	1c14      	adds	r4, r2, #0
 8000190:	4a22      	ldr	r2, [pc, #136]	; (800021c <strncmp+0xb8>)
 8000192:	4214      	tst	r4, r2
 8000194:	d11b      	bne.n	80001ce <strncmp+0x6a>
 8000196:	1c30      	adds	r0, r6, #0
 8000198:	1c16      	adds	r6, r2, #0
 800019a:	e00d      	b.n	80001b8 <strncmp+0x54>
 800019c:	6842      	ldr	r2, [r0, #4]
 800019e:	6849      	ldr	r1, [r1, #4]
 80001a0:	428a      	cmp	r2, r1
 80001a2:	d130      	bne.n	8000206 <strncmp+0xa2>
 80001a4:	3b04      	subs	r3, #4
 80001a6:	2b00      	cmp	r3, #0
 80001a8:	d010      	beq.n	80001cc <strncmp+0x68>
 80001aa:	1c29      	adds	r1, r5, #0
 80001ac:	4d1a      	ldr	r5, [pc, #104]	; (8000218 <strncmp+0xb4>)
 80001ae:	1c20      	adds	r0, r4, #0
 80001b0:	1954      	adds	r4, r2, r5
 80001b2:	4394      	bics	r4, r2
 80001b4:	4234      	tst	r4, r6
 80001b6:	d109      	bne.n	80001cc <strncmp+0x68>
 80001b8:	1d04      	adds	r4, r0, #4
 80001ba:	1d0d      	adds	r5, r1, #4
 80001bc:	2b03      	cmp	r3, #3
 80001be:	d8ed      	bhi.n	800019c <strncmp+0x38>
 80001c0:	1e5a      	subs	r2, r3, #1
 80001c2:	2b00      	cmp	r3, #0
 80001c4:	d023      	beq.n	800020e <strncmp+0xaa>
 80001c6:	1c29      	adds	r1, r5, #0
 80001c8:	1c26      	adds	r6, r4, #0
 80001ca:	e004      	b.n	80001d6 <strncmp+0x72>
 80001cc:	2000      	movs	r0, #0
 80001ce:	bc70      	pop	{r4, r5, r6}
 80001d0:	bc02      	pop	{r1}
 80001d2:	4708      	bx	r1
 80001d4:	3a01      	subs	r2, #1
 80001d6:	7834      	ldrb	r4, [r6, #0]
 80001d8:	780d      	ldrb	r5, [r1, #0]
 80001da:	42ac      	cmp	r4, r5
 80001dc:	d111      	bne.n	8000202 <strncmp+0x9e>
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d0f4      	beq.n	80001cc <strncmp+0x68>
 80001e2:	2c00      	cmp	r4, #0
 80001e4:	d0f2      	beq.n	80001cc <strncmp+0x68>
 80001e6:	1c73      	adds	r3, r6, #1
 80001e8:	3101      	adds	r1, #1
 80001ea:	18b0      	adds	r0, r6, r2
 80001ec:	e005      	b.n	80001fa <strncmp+0x96>
 80001ee:	4283      	cmp	r3, r0
 80001f0:	d0ec      	beq.n	80001cc <strncmp+0x68>
 80001f2:	2c00      	cmp	r4, #0
 80001f4:	d0ea      	beq.n	80001cc <strncmp+0x68>
 80001f6:	3301      	adds	r3, #1
 80001f8:	3101      	adds	r1, #1
 80001fa:	781c      	ldrb	r4, [r3, #0]
 80001fc:	780d      	ldrb	r5, [r1, #0]
 80001fe:	42ac      	cmp	r4, r5
 8000200:	d0f5      	beq.n	80001ee <strncmp+0x8a>
 8000202:	1b60      	subs	r0, r4, r5
 8000204:	e7e3      	b.n	80001ce <strncmp+0x6a>
 8000206:	1e5a      	subs	r2, r3, #1
 8000208:	1c29      	adds	r1, r5, #0
 800020a:	1c26      	adds	r6, r4, #0
 800020c:	e7e3      	b.n	80001d6 <strncmp+0x72>
 800020e:	7904      	ldrb	r4, [r0, #4]
 8000210:	790d      	ldrb	r5, [r1, #4]
 8000212:	1b60      	subs	r0, r4, r5
 8000214:	e7db      	b.n	80001ce <strncmp+0x6a>
 8000216:	46c0      	nop			; (mov r8, r8)
 8000218:	fefefeff 	.word	0xfefefeff
 800021c:	80808080 	.word	0x80808080

08000220 <__ssvfscanf_r>:
 8000220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000222:	465f      	mov	r7, fp
 8000224:	4656      	mov	r6, sl
 8000226:	4644      	mov	r4, r8
 8000228:	464d      	mov	r5, r9
 800022a:	b4f0      	push	{r4, r5, r6, r7}
 800022c:	4c91      	ldr	r4, [pc, #580]	; (8000474 <__ssvfscanf_r+0x254>)
 800022e:	44a5      	add	sp, r4
 8000230:	930b      	str	r3, [sp, #44]	; 0x2c
 8000232:	1c0e      	adds	r6, r1, #0
 8000234:	898b      	ldrh	r3, [r1, #12]
 8000236:	2180      	movs	r1, #128	; 0x80
 8000238:	0189      	lsls	r1, r1, #6
 800023a:	4683      	mov	fp, r0
 800023c:	420b      	tst	r3, r1
 800023e:	d105      	bne.n	800024c <__ssvfscanf_r+0x2c>
 8000240:	430b      	orrs	r3, r1
 8000242:	6e70      	ldr	r0, [r6, #100]	; 0x64
 8000244:	81b3      	strh	r3, [r6, #12]
 8000246:	4b8c      	ldr	r3, [pc, #560]	; (8000478 <__ssvfscanf_r+0x258>)
 8000248:	4003      	ands	r3, r0
 800024a:	6673      	str	r3, [r6, #100]	; 0x64
 800024c:	2500      	movs	r5, #0
 800024e:	2000      	movs	r0, #0
 8000250:	950f      	str	r5, [sp, #60]	; 0x3c
 8000252:	950d      	str	r5, [sp, #52]	; 0x34
 8000254:	900c      	str	r0, [sp, #48]	; 0x30
 8000256:	4c89      	ldr	r4, [pc, #548]	; (800047c <__ssvfscanf_r+0x25c>)
 8000258:	4692      	mov	sl, r2
 800025a:	2708      	movs	r7, #8
 800025c:	9502      	str	r5, [sp, #8]
 800025e:	4651      	mov	r1, sl
 8000260:	780a      	ldrb	r2, [r1, #0]
 8000262:	2301      	movs	r3, #1
 8000264:	9217      	str	r2, [sp, #92]	; 0x5c
 8000266:	449a      	add	sl, r3
 8000268:	2a00      	cmp	r2, #0
 800026a:	d039      	beq.n	80002e0 <__ssvfscanf_r+0xc0>
 800026c:	6823      	ldr	r3, [r4, #0]
 800026e:	1899      	adds	r1, r3, r2
 8000270:	7849      	ldrb	r1, [r1, #1]
 8000272:	420f      	tst	r7, r1
 8000274:	d018      	beq.n	80002a8 <__ssvfscanf_r+0x88>
 8000276:	6873      	ldr	r3, [r6, #4]
 8000278:	9d02      	ldr	r5, [sp, #8]
 800027a:	e00c      	b.n	8000296 <__ssvfscanf_r+0x76>
 800027c:	6832      	ldr	r2, [r6, #0]
 800027e:	6820      	ldr	r0, [r4, #0]
 8000280:	7813      	ldrb	r3, [r2, #0]
 8000282:	18c3      	adds	r3, r0, r3
 8000284:	785b      	ldrb	r3, [r3, #1]
 8000286:	421f      	tst	r7, r3
 8000288:	d0e8      	beq.n	800025c <__ssvfscanf_r+0x3c>
 800028a:	6873      	ldr	r3, [r6, #4]
 800028c:	3201      	adds	r2, #1
 800028e:	3b01      	subs	r3, #1
 8000290:	6073      	str	r3, [r6, #4]
 8000292:	6032      	str	r2, [r6, #0]
 8000294:	3501      	adds	r5, #1
 8000296:	2b00      	cmp	r3, #0
 8000298:	dcf0      	bgt.n	800027c <__ssvfscanf_r+0x5c>
 800029a:	4658      	mov	r0, fp
 800029c:	1c31      	adds	r1, r6, #0
 800029e:	f002 fa97 	bl	80027d0 <__ssrefill_r>
 80002a2:	2800      	cmp	r0, #0
 80002a4:	d0ea      	beq.n	800027c <__ssvfscanf_r+0x5c>
 80002a6:	e7d9      	b.n	800025c <__ssvfscanf_r+0x3c>
 80002a8:	2a25      	cmp	r2, #37	; 0x25
 80002aa:	d025      	beq.n	80002f8 <__ssvfscanf_r+0xd8>
 80002ac:	6871      	ldr	r1, [r6, #4]
 80002ae:	2900      	cmp	r1, #0
 80002b0:	dc00      	bgt.n	80002b4 <__ssvfscanf_r+0x94>
 80002b2:	e0a0      	b.n	80003f6 <__ssvfscanf_r+0x1d6>
 80002b4:	6833      	ldr	r3, [r6, #0]
 80002b6:	4652      	mov	r2, sl
 80002b8:	3a01      	subs	r2, #1
 80002ba:	7819      	ldrb	r1, [r3, #0]
 80002bc:	7812      	ldrb	r2, [r2, #0]
 80002be:	4291      	cmp	r1, r2
 80002c0:	d10e      	bne.n	80002e0 <__ssvfscanf_r+0xc0>
 80002c2:	6872      	ldr	r2, [r6, #4]
 80002c4:	3301      	adds	r3, #1
 80002c6:	3a01      	subs	r2, #1
 80002c8:	6033      	str	r3, [r6, #0]
 80002ca:	6072      	str	r2, [r6, #4]
 80002cc:	9d02      	ldr	r5, [sp, #8]
 80002ce:	4651      	mov	r1, sl
 80002d0:	780a      	ldrb	r2, [r1, #0]
 80002d2:	3501      	adds	r5, #1
 80002d4:	2301      	movs	r3, #1
 80002d6:	9502      	str	r5, [sp, #8]
 80002d8:	9217      	str	r2, [sp, #92]	; 0x5c
 80002da:	449a      	add	sl, r3
 80002dc:	2a00      	cmp	r2, #0
 80002de:	d1c5      	bne.n	800026c <__ssvfscanf_r+0x4c>
 80002e0:	980c      	ldr	r0, [sp, #48]	; 0x30
 80002e2:	23b5      	movs	r3, #181	; 0xb5
 80002e4:	009b      	lsls	r3, r3, #2
 80002e6:	449d      	add	sp, r3
 80002e8:	bc3c      	pop	{r2, r3, r4, r5}
 80002ea:	4690      	mov	r8, r2
 80002ec:	4699      	mov	r9, r3
 80002ee:	46a2      	mov	sl, r4
 80002f0:	46ab      	mov	fp, r5
 80002f2:	bcf0      	pop	{r4, r5, r6, r7}
 80002f4:	bc02      	pop	{r1}
 80002f6:	4708      	bx	r1
 80002f8:	2500      	movs	r5, #0
 80002fa:	9509      	str	r5, [sp, #36]	; 0x24
 80002fc:	46a9      	mov	r9, r5
 80002fe:	2102      	movs	r1, #2
 8000300:	2201      	movs	r2, #1
 8000302:	9d02      	ldr	r5, [sp, #8]
 8000304:	9306      	str	r3, [sp, #24]
 8000306:	4688      	mov	r8, r1
 8000308:	4694      	mov	ip, r2
 800030a:	4650      	mov	r0, sl
 800030c:	7803      	ldrb	r3, [r0, #0]
 800030e:	3001      	adds	r0, #1
 8000310:	930a      	str	r3, [sp, #40]	; 0x28
 8000312:	2b78      	cmp	r3, #120	; 0x78
 8000314:	d96b      	bls.n	80003ee <__ssvfscanf_r+0x1ce>
 8000316:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8000318:	9b06      	ldr	r3, [sp, #24]
 800031a:	189b      	adds	r3, r3, r2
 800031c:	785b      	ldrb	r3, [r3, #1]
 800031e:	2203      	movs	r2, #3
 8000320:	9502      	str	r5, [sp, #8]
 8000322:	4682      	mov	sl, r0
 8000324:	4013      	ands	r3, r2
 8000326:	2b01      	cmp	r3, #1
 8000328:	d101      	bne.n	800032e <__ssvfscanf_r+0x10e>
 800032a:	f000 fcd1 	bl	8000cd0 <__ssvfscanf_r+0xab0>
 800032e:	4d54      	ldr	r5, [pc, #336]	; (8000480 <__ssvfscanf_r+0x260>)
 8000330:	950f      	str	r5, [sp, #60]	; 0x3c
 8000332:	250a      	movs	r5, #10
 8000334:	2003      	movs	r0, #3
 8000336:	950d      	str	r5, [sp, #52]	; 0x34
 8000338:	4680      	mov	r8, r0
 800033a:	6871      	ldr	r1, [r6, #4]
 800033c:	2900      	cmp	r1, #0
 800033e:	dc00      	bgt.n	8000342 <__ssvfscanf_r+0x122>
 8000340:	e2c7      	b.n	80008d2 <__ssvfscanf_r+0x6b2>
 8000342:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8000344:	066d      	lsls	r5, r5, #25
 8000346:	d41e      	bmi.n	8000386 <__ssvfscanf_r+0x166>
 8000348:	6821      	ldr	r1, [r4, #0]
 800034a:	6833      	ldr	r3, [r6, #0]
 800034c:	9d02      	ldr	r5, [sp, #8]
 800034e:	e001      	b.n	8000354 <__ssvfscanf_r+0x134>
 8000350:	3301      	adds	r3, #1
 8000352:	6033      	str	r3, [r6, #0]
 8000354:	781a      	ldrb	r2, [r3, #0]
 8000356:	188a      	adds	r2, r1, r2
 8000358:	7852      	ldrb	r2, [r2, #1]
 800035a:	4217      	tst	r7, r2
 800035c:	d012      	beq.n	8000384 <__ssvfscanf_r+0x164>
 800035e:	6872      	ldr	r2, [r6, #4]
 8000360:	3a01      	subs	r2, #1
 8000362:	3501      	adds	r5, #1
 8000364:	6072      	str	r2, [r6, #4]
 8000366:	2a00      	cmp	r2, #0
 8000368:	dcf2      	bgt.n	8000350 <__ssvfscanf_r+0x130>
 800036a:	4658      	mov	r0, fp
 800036c:	1c31      	adds	r1, r6, #0
 800036e:	f002 fa2f 	bl	80027d0 <__ssrefill_r>
 8000372:	2800      	cmp	r0, #0
 8000374:	d146      	bne.n	8000404 <__ssvfscanf_r+0x1e4>
 8000376:	6833      	ldr	r3, [r6, #0]
 8000378:	6821      	ldr	r1, [r4, #0]
 800037a:	781a      	ldrb	r2, [r3, #0]
 800037c:	188a      	adds	r2, r1, r2
 800037e:	7852      	ldrb	r2, [r2, #1]
 8000380:	4217      	tst	r7, r2
 8000382:	d1ec      	bne.n	800035e <__ssvfscanf_r+0x13e>
 8000384:	9502      	str	r5, [sp, #8]
 8000386:	4640      	mov	r0, r8
 8000388:	2802      	cmp	r0, #2
 800038a:	d100      	bne.n	800038e <__ssvfscanf_r+0x16e>
 800038c:	e24a      	b.n	8000824 <__ssvfscanf_r+0x604>
 800038e:	dc44      	bgt.n	800041a <__ssvfscanf_r+0x1fa>
 8000390:	2801      	cmp	r0, #1
 8000392:	d100      	bne.n	8000396 <__ssvfscanf_r+0x176>
 8000394:	e273      	b.n	800087e <__ssvfscanf_r+0x65e>
 8000396:	464a      	mov	r2, r9
 8000398:	2a00      	cmp	r2, #0
 800039a:	d100      	bne.n	800039e <__ssvfscanf_r+0x17e>
 800039c:	e32a      	b.n	80009f4 <__ssvfscanf_r+0x7d4>
 800039e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80003a0:	07ed      	lsls	r5, r5, #31
 80003a2:	d500      	bpl.n	80003a6 <__ssvfscanf_r+0x186>
 80003a4:	e32c      	b.n	8000a00 <__ssvfscanf_r+0x7e0>
 80003a6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80003a8:	06ed      	lsls	r5, r5, #27
 80003aa:	d401      	bmi.n	80003b0 <__ssvfscanf_r+0x190>
 80003ac:	f000 fc76 	bl	8000c9c <__ssvfscanf_r+0xa7c>
 80003b0:	9b02      	ldr	r3, [sp, #8]
 80003b2:	2000      	movs	r0, #0
 80003b4:	464d      	mov	r5, r9
 80003b6:	4680      	mov	r8, r0
 80003b8:	4699      	mov	r9, r3
 80003ba:	6873      	ldr	r3, [r6, #4]
 80003bc:	42ab      	cmp	r3, r5
 80003be:	db01      	blt.n	80003c4 <__ssvfscanf_r+0x1a4>
 80003c0:	f000 fd62 	bl	8000e88 <__ssvfscanf_r+0xc68>
 80003c4:	6831      	ldr	r1, [r6, #0]
 80003c6:	4498      	add	r8, r3
 80003c8:	1aed      	subs	r5, r5, r3
 80003ca:	18cb      	adds	r3, r1, r3
 80003cc:	6033      	str	r3, [r6, #0]
 80003ce:	4658      	mov	r0, fp
 80003d0:	1c31      	adds	r1, r6, #0
 80003d2:	f002 f9fd 	bl	80027d0 <__ssrefill_r>
 80003d6:	2800      	cmp	r0, #0
 80003d8:	d0ef      	beq.n	80003ba <__ssvfscanf_r+0x19a>
 80003da:	464d      	mov	r5, r9
 80003dc:	4640      	mov	r0, r8
 80003de:	9502      	str	r5, [sp, #8]
 80003e0:	2800      	cmp	r0, #0
 80003e2:	d00f      	beq.n	8000404 <__ssvfscanf_r+0x1e4>
 80003e4:	9a02      	ldr	r2, [sp, #8]
 80003e6:	1c15      	adds	r5, r2, #0
 80003e8:	4445      	add	r5, r8
 80003ea:	9502      	str	r5, [sp, #8]
 80003ec:	e737      	b.n	800025e <__ssvfscanf_r+0x3e>
 80003ee:	4925      	ldr	r1, [pc, #148]	; (8000484 <__ssvfscanf_r+0x264>)
 80003f0:	009b      	lsls	r3, r3, #2
 80003f2:	58ca      	ldr	r2, [r1, r3]
 80003f4:	4697      	mov	pc, r2
 80003f6:	4658      	mov	r0, fp
 80003f8:	1c31      	adds	r1, r6, #0
 80003fa:	f002 f9e9 	bl	80027d0 <__ssrefill_r>
 80003fe:	2800      	cmp	r0, #0
 8000400:	d100      	bne.n	8000404 <__ssvfscanf_r+0x1e4>
 8000402:	e757      	b.n	80002b4 <__ssvfscanf_r+0x94>
 8000404:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000406:	2d00      	cmp	r5, #0
 8000408:	d003      	beq.n	8000412 <__ssvfscanf_r+0x1f2>
 800040a:	89b3      	ldrh	r3, [r6, #12]
 800040c:	0658      	lsls	r0, r3, #25
 800040e:	d400      	bmi.n	8000412 <__ssvfscanf_r+0x1f2>
 8000410:	e766      	b.n	80002e0 <__ssvfscanf_r+0xc0>
 8000412:	2301      	movs	r3, #1
 8000414:	425b      	negs	r3, r3
 8000416:	930c      	str	r3, [sp, #48]	; 0x30
 8000418:	e762      	b.n	80002e0 <__ssvfscanf_r+0xc0>
 800041a:	2803      	cmp	r0, #3
 800041c:	d100      	bne.n	8000420 <__ssvfscanf_r+0x200>
 800041e:	e164      	b.n	80006ea <__ssvfscanf_r+0x4ca>
 8000420:	2804      	cmp	r0, #4
 8000422:	d1b8      	bne.n	8000396 <__ssvfscanf_r+0x176>
 8000424:	464a      	mov	r2, r9
 8000426:	2500      	movs	r5, #0
 8000428:	23ae      	movs	r3, #174	; 0xae
 800042a:	3a01      	subs	r2, #1
 800042c:	9513      	str	r5, [sp, #76]	; 0x4c
 800042e:	005b      	lsls	r3, r3, #1
 8000430:	429a      	cmp	r2, r3
 8000432:	d900      	bls.n	8000436 <__ssvfscanf_r+0x216>
 8000434:	e342      	b.n	8000abc <__ssvfscanf_r+0x89c>
 8000436:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8000438:	23f0      	movs	r3, #240	; 0xf0
 800043a:	00db      	lsls	r3, r3, #3
 800043c:	431d      	orrs	r5, r3
 800043e:	9509      	str	r5, [sp, #36]	; 0x24
 8000440:	9b02      	ldr	r3, [sp, #8]
 8000442:	2500      	movs	r5, #0
 8000444:	950a      	str	r5, [sp, #40]	; 0x28
 8000446:	9511      	str	r5, [sp, #68]	; 0x44
 8000448:	9512      	str	r5, [sp, #72]	; 0x48
 800044a:	9515      	str	r5, [sp, #84]	; 0x54
 800044c:	950e      	str	r5, [sp, #56]	; 0x38
 800044e:	9514      	str	r5, [sp, #80]	; 0x50
 8000450:	ad5c      	add	r5, sp, #368	; 0x170
 8000452:	9510      	str	r5, [sp, #64]	; 0x40
 8000454:	46a8      	mov	r8, r5
 8000456:	464d      	mov	r5, r9
 8000458:	4699      	mov	r9, r3
 800045a:	6832      	ldr	r2, [r6, #0]
 800045c:	7813      	ldrb	r3, [r2, #0]
 800045e:	1c19      	adds	r1, r3, #0
 8000460:	392b      	subs	r1, #43	; 0x2b
 8000462:	0609      	lsls	r1, r1, #24
 8000464:	0e09      	lsrs	r1, r1, #24
 8000466:	294e      	cmp	r1, #78	; 0x4e
 8000468:	d817      	bhi.n	800049a <__ssvfscanf_r+0x27a>
 800046a:	4807      	ldr	r0, [pc, #28]	; (8000488 <__ssvfscanf_r+0x268>)
 800046c:	0089      	lsls	r1, r1, #2
 800046e:	5841      	ldr	r1, [r0, r1]
 8000470:	468f      	mov	pc, r1
 8000472:	46c0      	nop			; (mov r8, r8)
 8000474:	fffffd2c 	.word	0xfffffd2c
 8000478:	ffffdfff 	.word	0xffffdfff
 800047c:	200000f8 	.word	0x200000f8
 8000480:	08002421 	.word	0x08002421
 8000484:	0800e3c8 	.word	0x0800e3c8
 8000488:	0800e5ac 	.word	0x0800e5ac
 800048c:	4658      	mov	r0, fp
 800048e:	1c31      	adds	r1, r6, #0
 8000490:	f002 f99e 	bl	80027d0 <__ssrefill_r>
 8000494:	2800      	cmp	r0, #0
 8000496:	d100      	bne.n	800049a <__ssvfscanf_r+0x27a>
 8000498:	e09a      	b.n	80005d0 <__ssvfscanf_r+0x3b0>
 800049a:	464d      	mov	r5, r9
 800049c:	9502      	str	r5, [sp, #8]
 800049e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80004a0:	2d00      	cmp	r5, #0
 80004a2:	d000      	beq.n	80004a6 <__ssvfscanf_r+0x286>
 80004a4:	e2a1      	b.n	80009ea <__ssvfscanf_r+0x7ca>
 80004a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80004a8:	3b01      	subs	r3, #1
 80004aa:	2b01      	cmp	r3, #1
 80004ac:	d801      	bhi.n	80004b2 <__ssvfscanf_r+0x292>
 80004ae:	f000 fd69 	bl	8000f84 <__ssvfscanf_r+0xd64>
 80004b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80004b4:	3b01      	subs	r3, #1
 80004b6:	2b06      	cmp	r3, #6
 80004b8:	d823      	bhi.n	8000502 <__ssvfscanf_r+0x2e2>
 80004ba:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80004bc:	2d02      	cmp	r5, #2
 80004be:	d801      	bhi.n	80004c4 <__ssvfscanf_r+0x2a4>
 80004c0:	f000 fd79 	bl	8000fb6 <__ssvfscanf_r+0xd96>
 80004c4:	2d03      	cmp	r5, #3
 80004c6:	d01c      	beq.n	8000502 <__ssvfscanf_r+0x2e2>
 80004c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80004ca:	3b04      	subs	r3, #4
 80004cc:	061b      	lsls	r3, r3, #24
 80004ce:	0e1b      	lsrs	r3, r3, #24
 80004d0:	9306      	str	r3, [sp, #24]
 80004d2:	43db      	mvns	r3, r3
 80004d4:	4699      	mov	r9, r3
 80004d6:	9a02      	ldr	r2, [sp, #8]
 80004d8:	44c1      	add	r9, r8
 80004da:	1c33      	adds	r3, r6, #0
 80004dc:	4645      	mov	r5, r8
 80004de:	464e      	mov	r6, r9
 80004e0:	4698      	mov	r8, r3
 80004e2:	4691      	mov	r9, r2
 80004e4:	3d01      	subs	r5, #1
 80004e6:	7829      	ldrb	r1, [r5, #0]
 80004e8:	4658      	mov	r0, fp
 80004ea:	4642      	mov	r2, r8
 80004ec:	f002 f92c 	bl	8002748 <_sungetc_r>
 80004f0:	42b5      	cmp	r5, r6
 80004f2:	d1f7      	bne.n	80004e4 <__ssvfscanf_r+0x2c4>
 80004f4:	4646      	mov	r6, r8
 80004f6:	9806      	ldr	r0, [sp, #24]
 80004f8:	46a8      	mov	r8, r5
 80004fa:	464d      	mov	r5, r9
 80004fc:	3d01      	subs	r5, #1
 80004fe:	1a2d      	subs	r5, r5, r0
 8000500:	9502      	str	r5, [sp, #8]
 8000502:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8000504:	05ed      	lsls	r5, r5, #23
 8000506:	d516      	bpl.n	8000536 <__ssvfscanf_r+0x316>
 8000508:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800050a:	056d      	lsls	r5, r5, #21
 800050c:	d501      	bpl.n	8000512 <__ssvfscanf_r+0x2f2>
 800050e:	f000 fd67 	bl	8000fe0 <__ssvfscanf_r+0xdc0>
 8000512:	4643      	mov	r3, r8
 8000514:	3b01      	subs	r3, #1
 8000516:	9d02      	ldr	r5, [sp, #8]
 8000518:	7819      	ldrb	r1, [r3, #0]
 800051a:	3d01      	subs	r5, #1
 800051c:	2220      	movs	r2, #32
 800051e:	1c08      	adds	r0, r1, #0
 8000520:	9502      	str	r5, [sp, #8]
 8000522:	4390      	bics	r0, r2
 8000524:	2845      	cmp	r0, #69	; 0x45
 8000526:	d001      	beq.n	800052c <__ssvfscanf_r+0x30c>
 8000528:	f000 fc8f 	bl	8000e4a <__ssvfscanf_r+0xc2a>
 800052c:	4658      	mov	r0, fp
 800052e:	1c32      	adds	r2, r6, #0
 8000530:	4698      	mov	r8, r3
 8000532:	f002 f909 	bl	8002748 <_sungetc_r>
 8000536:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8000538:	2310      	movs	r3, #16
 800053a:	402b      	ands	r3, r5
 800053c:	d000      	beq.n	8000540 <__ssvfscanf_r+0x320>
 800053e:	e68e      	b.n	800025e <__ssvfscanf_r+0x3e>
 8000540:	4640      	mov	r0, r8
 8000542:	22c0      	movs	r2, #192	; 0xc0
 8000544:	7003      	strb	r3, [r0, #0]
 8000546:	00d2      	lsls	r2, r2, #3
 8000548:	2380      	movs	r3, #128	; 0x80
 800054a:	402a      	ands	r2, r5
 800054c:	00db      	lsls	r3, r3, #3
 800054e:	429a      	cmp	r2, r3
 8000550:	d101      	bne.n	8000556 <__ssvfscanf_r+0x336>
 8000552:	f000 fc70 	bl	8000e36 <__ssvfscanf_r+0xc16>
 8000556:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8000558:	2d00      	cmp	r5, #0
 800055a:	d001      	beq.n	8000560 <__ssvfscanf_r+0x340>
 800055c:	f000 fc55 	bl	8000e0a <__ssvfscanf_r+0xbea>
 8000560:	4658      	mov	r0, fp
 8000562:	9910      	ldr	r1, [sp, #64]	; 0x40
 8000564:	2200      	movs	r2, #0
 8000566:	f000 ffd3 	bl	8001510 <_strtod_r>
 800056a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800056c:	9006      	str	r0, [sp, #24]
 800056e:	9107      	str	r1, [sp, #28]
 8000570:	07ed      	lsls	r5, r5, #31
 8000572:	d401      	bmi.n	8000578 <__ssvfscanf_r+0x358>
 8000574:	f000 fc29 	bl	8000dca <__ssvfscanf_r+0xbaa>
 8000578:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800057a:	6800      	ldr	r0, [r0, #0]
 800057c:	9906      	ldr	r1, [sp, #24]
 800057e:	9a07      	ldr	r2, [sp, #28]
 8000580:	6001      	str	r1, [r0, #0]
 8000582:	6042      	str	r2, [r0, #4]
 8000584:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8000586:	3504      	adds	r5, #4
 8000588:	950b      	str	r5, [sp, #44]	; 0x2c
 800058a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800058c:	3501      	adds	r5, #1
 800058e:	950c      	str	r5, [sp, #48]	; 0x30
 8000590:	e665      	b.n	800025e <__ssvfscanf_r+0x3e>
 8000592:	9909      	ldr	r1, [sp, #36]	; 0x24
 8000594:	05c9      	lsls	r1, r1, #23
 8000596:	d500      	bpl.n	800059a <__ssvfscanf_r+0x37a>
 8000598:	e2c3      	b.n	8000b22 <__ssvfscanf_r+0x902>
 800059a:	9811      	ldr	r0, [sp, #68]	; 0x44
 800059c:	4684      	mov	ip, r0
 800059e:	980a      	ldr	r0, [sp, #40]	; 0x28
 80005a0:	4484      	add	ip, r0
 80005a2:	4661      	mov	r1, ip
 80005a4:	2900      	cmp	r1, #0
 80005a6:	d000      	beq.n	80005aa <__ssvfscanf_r+0x38a>
 80005a8:	e777      	b.n	800049a <__ssvfscanf_r+0x27a>
 80005aa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80005ac:	49cd      	ldr	r1, [pc, #820]	; (80008e4 <__ssvfscanf_r+0x6c4>)
 80005ae:	4008      	ands	r0, r1
 80005b0:	9009      	str	r0, [sp, #36]	; 0x24
 80005b2:	4641      	mov	r1, r8
 80005b4:	700b      	strb	r3, [r1, #0]
 80005b6:	2301      	movs	r3, #1
 80005b8:	4498      	add	r8, r3
 80005ba:	6873      	ldr	r3, [r6, #4]
 80005bc:	2001      	movs	r0, #1
 80005be:	3b01      	subs	r3, #1
 80005c0:	3d01      	subs	r5, #1
 80005c2:	4481      	add	r9, r0
 80005c4:	6073      	str	r3, [r6, #4]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	dc00      	bgt.n	80005cc <__ssvfscanf_r+0x3ac>
 80005ca:	e75f      	b.n	800048c <__ssvfscanf_r+0x26c>
 80005cc:	3201      	adds	r2, #1
 80005ce:	6032      	str	r2, [r6, #0]
 80005d0:	2d00      	cmp	r5, #0
 80005d2:	d000      	beq.n	80005d6 <__ssvfscanf_r+0x3b6>
 80005d4:	e741      	b.n	800045a <__ssvfscanf_r+0x23a>
 80005d6:	464d      	mov	r5, r9
 80005d8:	9502      	str	r5, [sp, #8]
 80005da:	e760      	b.n	800049e <__ssvfscanf_r+0x27e>
 80005dc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80005de:	2806      	cmp	r0, #6
 80005e0:	d1f9      	bne.n	80005d6 <__ssvfscanf_r+0x3b6>
 80005e2:	2107      	movs	r1, #7
 80005e4:	910a      	str	r1, [sp, #40]	; 0x28
 80005e6:	e7e4      	b.n	80005b2 <__ssvfscanf_r+0x392>
 80005e8:	990e      	ldr	r1, [sp, #56]	; 0x38
 80005ea:	2900      	cmp	r1, #0
 80005ec:	d000      	beq.n	80005f0 <__ssvfscanf_r+0x3d0>
 80005ee:	e2a7      	b.n	8000b40 <__ssvfscanf_r+0x920>
 80005f0:	9811      	ldr	r0, [sp, #68]	; 0x44
 80005f2:	2800      	cmp	r0, #0
 80005f4:	d000      	beq.n	80005f8 <__ssvfscanf_r+0x3d8>
 80005f6:	e2a3      	b.n	8000b40 <__ssvfscanf_r+0x920>
 80005f8:	21e0      	movs	r1, #224	; 0xe0
 80005fa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80005fc:	00c9      	lsls	r1, r1, #3
 80005fe:	4008      	ands	r0, r1
 8000600:	4288      	cmp	r0, r1
 8000602:	d101      	bne.n	8000608 <__ssvfscanf_r+0x3e8>
 8000604:	f000 fc2d 	bl	8000e62 <__ssvfscanf_r+0xc42>
 8000608:	980a      	ldr	r0, [sp, #40]	; 0x28
 800060a:	2804      	cmp	r0, #4
 800060c:	d067      	beq.n	80006de <__ssvfscanf_r+0x4be>
 800060e:	2801      	cmp	r0, #1
 8000610:	d065      	beq.n	80006de <__ssvfscanf_r+0x4be>
 8000612:	e742      	b.n	800049a <__ssvfscanf_r+0x27a>
 8000614:	980a      	ldr	r0, [sp, #40]	; 0x28
 8000616:	2807      	cmp	r0, #7
 8000618:	d1dd      	bne.n	80005d6 <__ssvfscanf_r+0x3b6>
 800061a:	2008      	movs	r0, #8
 800061c:	900a      	str	r0, [sp, #40]	; 0x28
 800061e:	e7c8      	b.n	80005b2 <__ssvfscanf_r+0x392>
 8000620:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000622:	0580      	lsls	r0, r0, #22
 8000624:	d400      	bmi.n	8000628 <__ssvfscanf_r+0x408>
 8000626:	e738      	b.n	800049a <__ssvfscanf_r+0x27a>
 8000628:	49af      	ldr	r1, [pc, #700]	; (80008e8 <__ssvfscanf_r+0x6c8>)
 800062a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800062c:	4008      	ands	r0, r1
 800062e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8000630:	9009      	str	r0, [sp, #36]	; 0x24
 8000632:	9114      	str	r1, [sp, #80]	; 0x50
 8000634:	e7bd      	b.n	80005b2 <__ssvfscanf_r+0x392>
 8000636:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000638:	2180      	movs	r1, #128	; 0x80
 800063a:	4201      	tst	r1, r0
 800063c:	d100      	bne.n	8000640 <__ssvfscanf_r+0x420>
 800063e:	e72c      	b.n	800049a <__ssvfscanf_r+0x27a>
 8000640:	4388      	bics	r0, r1
 8000642:	9009      	str	r0, [sp, #36]	; 0x24
 8000644:	e7b5      	b.n	80005b2 <__ssvfscanf_r+0x392>
 8000646:	980e      	ldr	r0, [sp, #56]	; 0x38
 8000648:	2800      	cmp	r0, #0
 800064a:	d143      	bne.n	80006d4 <__ssvfscanf_r+0x4b4>
 800064c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800064e:	2900      	cmp	r1, #0
 8000650:	d140      	bne.n	80006d4 <__ssvfscanf_r+0x4b4>
 8000652:	21e0      	movs	r1, #224	; 0xe0
 8000654:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000656:	00c9      	lsls	r1, r1, #3
 8000658:	4008      	ands	r0, r1
 800065a:	4288      	cmp	r0, r1
 800065c:	d13a      	bne.n	80006d4 <__ssvfscanf_r+0x4b4>
 800065e:	49a3      	ldr	r1, [pc, #652]	; (80008ec <__ssvfscanf_r+0x6cc>)
 8000660:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000662:	4008      	ands	r0, r1
 8000664:	9009      	str	r0, [sp, #36]	; 0x24
 8000666:	2101      	movs	r1, #1
 8000668:	2000      	movs	r0, #0
 800066a:	910a      	str	r1, [sp, #40]	; 0x28
 800066c:	900e      	str	r0, [sp, #56]	; 0x38
 800066e:	e7a0      	b.n	80005b2 <__ssvfscanf_r+0x392>
 8000670:	980a      	ldr	r0, [sp, #40]	; 0x28
 8000672:	2802      	cmp	r0, #2
 8000674:	d1af      	bne.n	80005d6 <__ssvfscanf_r+0x3b6>
 8000676:	2003      	movs	r0, #3
 8000678:	900a      	str	r0, [sp, #40]	; 0x28
 800067a:	e79a      	b.n	80005b2 <__ssvfscanf_r+0x392>
 800067c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800067e:	20a0      	movs	r0, #160	; 0xa0
 8000680:	00c0      	lsls	r0, r0, #3
 8000682:	4001      	ands	r1, r0
 8000684:	2080      	movs	r0, #128	; 0x80
 8000686:	00c0      	lsls	r0, r0, #3
 8000688:	4281      	cmp	r1, r0
 800068a:	d008      	beq.n	800069e <__ssvfscanf_r+0x47e>
 800068c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800068e:	4201      	tst	r1, r0
 8000690:	d100      	bne.n	8000694 <__ssvfscanf_r+0x474>
 8000692:	e702      	b.n	800049a <__ssvfscanf_r+0x27a>
 8000694:	980e      	ldr	r0, [sp, #56]	; 0x38
 8000696:	2800      	cmp	r0, #0
 8000698:	d101      	bne.n	800069e <__ssvfscanf_r+0x47e>
 800069a:	f000 fcb6 	bl	800100a <__ssvfscanf_r+0xdea>
 800069e:	9909      	ldr	r1, [sp, #36]	; 0x24
 80006a0:	0589      	lsls	r1, r1, #22
 80006a2:	d405      	bmi.n	80006b0 <__ssvfscanf_r+0x490>
 80006a4:	9914      	ldr	r1, [sp, #80]	; 0x50
 80006a6:	980e      	ldr	r0, [sp, #56]	; 0x38
 80006a8:	1a40      	subs	r0, r0, r1
 80006aa:	4641      	mov	r1, r8
 80006ac:	9015      	str	r0, [sp, #84]	; 0x54
 80006ae:	9112      	str	r1, [sp, #72]	; 0x48
 80006b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80006b2:	498e      	ldr	r1, [pc, #568]	; (80008ec <__ssvfscanf_r+0x6cc>)
 80006b4:	4001      	ands	r1, r0
 80006b6:	20c0      	movs	r0, #192	; 0xc0
 80006b8:	0040      	lsls	r0, r0, #1
 80006ba:	4308      	orrs	r0, r1
 80006bc:	2100      	movs	r1, #0
 80006be:	9009      	str	r0, [sp, #36]	; 0x24
 80006c0:	910e      	str	r1, [sp, #56]	; 0x38
 80006c2:	e776      	b.n	80005b2 <__ssvfscanf_r+0x392>
 80006c4:	9911      	ldr	r1, [sp, #68]	; 0x44
 80006c6:	2901      	cmp	r1, #1
 80006c8:	d001      	beq.n	80006ce <__ssvfscanf_r+0x4ae>
 80006ca:	f000 fc70 	bl	8000fae <__ssvfscanf_r+0xd8e>
 80006ce:	2102      	movs	r1, #2
 80006d0:	9111      	str	r1, [sp, #68]	; 0x44
 80006d2:	e76e      	b.n	80005b2 <__ssvfscanf_r+0x392>
 80006d4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80006d6:	2905      	cmp	r1, #5
 80006d8:	d001      	beq.n	80006de <__ssvfscanf_r+0x4be>
 80006da:	f000 fc4d 	bl	8000f78 <__ssvfscanf_r+0xd58>
 80006de:	990a      	ldr	r1, [sp, #40]	; 0x28
 80006e0:	3101      	adds	r1, #1
 80006e2:	0609      	lsls	r1, r1, #24
 80006e4:	0e09      	lsrs	r1, r1, #24
 80006e6:	910a      	str	r1, [sp, #40]	; 0x28
 80006e8:	e763      	b.n	80005b2 <__ssvfscanf_r+0x392>
 80006ea:	464a      	mov	r2, r9
 80006ec:	2500      	movs	r5, #0
 80006ee:	23ae      	movs	r3, #174	; 0xae
 80006f0:	3a01      	subs	r2, #1
 80006f2:	950a      	str	r5, [sp, #40]	; 0x28
 80006f4:	005b      	lsls	r3, r3, #1
 80006f6:	429a      	cmp	r2, r3
 80006f8:	d900      	bls.n	80006fc <__ssvfscanf_r+0x4dc>
 80006fa:	e16f      	b.n	80009dc <__ssvfscanf_r+0x7bc>
 80006fc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80006fe:	23d8      	movs	r3, #216	; 0xd8
 8000700:	011b      	lsls	r3, r3, #4
 8000702:	431d      	orrs	r5, r3
 8000704:	9509      	str	r5, [sp, #36]	; 0x24
 8000706:	9b02      	ldr	r3, [sp, #8]
 8000708:	2500      	movs	r5, #0
 800070a:	950e      	str	r5, [sp, #56]	; 0x38
 800070c:	ad5c      	add	r5, sp, #368	; 0x170
 800070e:	9510      	str	r5, [sp, #64]	; 0x40
 8000710:	46a8      	mov	r8, r5
 8000712:	464d      	mov	r5, r9
 8000714:	4699      	mov	r9, r3
 8000716:	6832      	ldr	r2, [r6, #0]
 8000718:	7813      	ldrb	r3, [r2, #0]
 800071a:	1c19      	adds	r1, r3, #0
 800071c:	392b      	subs	r1, #43	; 0x2b
 800071e:	0609      	lsls	r1, r1, #24
 8000720:	0e09      	lsrs	r1, r1, #24
 8000722:	294d      	cmp	r1, #77	; 0x4d
 8000724:	d922      	bls.n	800076c <__ssvfscanf_r+0x54c>
 8000726:	464d      	mov	r5, r9
 8000728:	9502      	str	r5, [sp, #8]
 800072a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800072c:	05ed      	lsls	r5, r5, #23
 800072e:	d50f      	bpl.n	8000750 <__ssvfscanf_r+0x530>
 8000730:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8000732:	45a8      	cmp	r8, r5
 8000734:	d908      	bls.n	8000748 <__ssvfscanf_r+0x528>
 8000736:	2001      	movs	r0, #1
 8000738:	4240      	negs	r0, r0
 800073a:	4480      	add	r8, r0
 800073c:	4642      	mov	r2, r8
 800073e:	7811      	ldrb	r1, [r2, #0]
 8000740:	4658      	mov	r0, fp
 8000742:	1c32      	adds	r2, r6, #0
 8000744:	f002 f800 	bl	8002748 <_sungetc_r>
 8000748:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800074a:	45a8      	cmp	r8, r5
 800074c:	d100      	bne.n	8000750 <__ssvfscanf_r+0x530>
 800074e:	e5c7      	b.n	80002e0 <__ssvfscanf_r+0xc0>
 8000750:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8000752:	2310      	movs	r3, #16
 8000754:	402b      	ands	r3, r5
 8000756:	d100      	bne.n	800075a <__ssvfscanf_r+0x53a>
 8000758:	e2e2      	b.n	8000d20 <__ssvfscanf_r+0xb00>
 800075a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800075c:	4640      	mov	r0, r8
 800075e:	1b43      	subs	r3, r0, r5
 8000760:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8000762:	195b      	adds	r3, r3, r5
 8000764:	9d02      	ldr	r5, [sp, #8]
 8000766:	18ed      	adds	r5, r5, r3
 8000768:	9502      	str	r5, [sp, #8]
 800076a:	e578      	b.n	800025e <__ssvfscanf_r+0x3e>
 800076c:	4860      	ldr	r0, [pc, #384]	; (80008f0 <__ssvfscanf_r+0x6d0>)
 800076e:	0089      	lsls	r1, r1, #2
 8000770:	5841      	ldr	r1, [r0, r1]
 8000772:	468f      	mov	pc, r1
 8000774:	9909      	ldr	r1, [sp, #36]	; 0x24
 8000776:	20c0      	movs	r0, #192	; 0xc0
 8000778:	00c0      	lsls	r0, r0, #3
 800077a:	4001      	ands	r1, r0
 800077c:	2080      	movs	r0, #128	; 0x80
 800077e:	0080      	lsls	r0, r0, #2
 8000780:	4281      	cmp	r1, r0
 8000782:	d1d0      	bne.n	8000726 <__ssvfscanf_r+0x506>
 8000784:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000786:	495b      	ldr	r1, [pc, #364]	; (80008f4 <__ssvfscanf_r+0x6d4>)
 8000788:	4001      	ands	r1, r0
 800078a:	20a0      	movs	r0, #160	; 0xa0
 800078c:	00c0      	lsls	r0, r0, #3
 800078e:	4308      	orrs	r0, r1
 8000790:	2110      	movs	r1, #16
 8000792:	9009      	str	r0, [sp, #36]	; 0x24
 8000794:	910d      	str	r1, [sp, #52]	; 0x34
 8000796:	4640      	mov	r0, r8
 8000798:	2101      	movs	r1, #1
 800079a:	7003      	strb	r3, [r0, #0]
 800079c:	4488      	add	r8, r1
 800079e:	6873      	ldr	r3, [r6, #4]
 80007a0:	3b01      	subs	r3, #1
 80007a2:	6073      	str	r3, [r6, #4]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	dc00      	bgt.n	80007aa <__ssvfscanf_r+0x58a>
 80007a8:	e0ac      	b.n	8000904 <__ssvfscanf_r+0x6e4>
 80007aa:	3201      	adds	r2, #1
 80007ac:	6032      	str	r2, [r6, #0]
 80007ae:	3d01      	subs	r5, #1
 80007b0:	2d00      	cmp	r5, #0
 80007b2:	d1b0      	bne.n	8000716 <__ssvfscanf_r+0x4f6>
 80007b4:	e7b7      	b.n	8000726 <__ssvfscanf_r+0x506>
 80007b6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80007b8:	290a      	cmp	r1, #10
 80007ba:	ddb4      	ble.n	8000726 <__ssvfscanf_r+0x506>
 80007bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80007be:	494e      	ldr	r1, [pc, #312]	; (80008f8 <__ssvfscanf_r+0x6d8>)
 80007c0:	4008      	ands	r0, r1
 80007c2:	9009      	str	r0, [sp, #36]	; 0x24
 80007c4:	e7e7      	b.n	8000796 <__ssvfscanf_r+0x576>
 80007c6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80007c8:	484c      	ldr	r0, [pc, #304]	; (80008fc <__ssvfscanf_r+0x6dc>)
 80007ca:	0049      	lsls	r1, r1, #1
 80007cc:	5e40      	ldrsh	r0, [r0, r1]
 80007ce:	900d      	str	r0, [sp, #52]	; 0x34
 80007d0:	2808      	cmp	r0, #8
 80007d2:	dcf3      	bgt.n	80007bc <__ssvfscanf_r+0x59c>
 80007d4:	e7a7      	b.n	8000726 <__ssvfscanf_r+0x506>
 80007d6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80007d8:	4848      	ldr	r0, [pc, #288]	; (80008fc <__ssvfscanf_r+0x6dc>)
 80007da:	0049      	lsls	r1, r1, #1
 80007dc:	5e40      	ldrsh	r0, [r0, r1]
 80007de:	4946      	ldr	r1, [pc, #280]	; (80008f8 <__ssvfscanf_r+0x6d8>)
 80007e0:	900d      	str	r0, [sp, #52]	; 0x34
 80007e2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80007e4:	4008      	ands	r0, r1
 80007e6:	9009      	str	r0, [sp, #36]	; 0x24
 80007e8:	e7d5      	b.n	8000796 <__ssvfscanf_r+0x576>
 80007ea:	9909      	ldr	r1, [sp, #36]	; 0x24
 80007ec:	0509      	lsls	r1, r1, #20
 80007ee:	d5d2      	bpl.n	8000796 <__ssvfscanf_r+0x576>
 80007f0:	980d      	ldr	r0, [sp, #52]	; 0x34
 80007f2:	2800      	cmp	r0, #0
 80007f4:	d106      	bne.n	8000804 <__ssvfscanf_r+0x5e4>
 80007f6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80007f8:	2080      	movs	r0, #128	; 0x80
 80007fa:	0080      	lsls	r0, r0, #2
 80007fc:	4301      	orrs	r1, r0
 80007fe:	9109      	str	r1, [sp, #36]	; 0x24
 8000800:	2108      	movs	r1, #8
 8000802:	910d      	str	r1, [sp, #52]	; 0x34
 8000804:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000806:	0540      	lsls	r0, r0, #21
 8000808:	d400      	bmi.n	800080c <__ssvfscanf_r+0x5ec>
 800080a:	e2d0      	b.n	8000dae <__ssvfscanf_r+0xb8e>
 800080c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800080e:	493c      	ldr	r1, [pc, #240]	; (8000900 <__ssvfscanf_r+0x6e0>)
 8000810:	4008      	ands	r0, r1
 8000812:	9009      	str	r0, [sp, #36]	; 0x24
 8000814:	e7bf      	b.n	8000796 <__ssvfscanf_r+0x576>
 8000816:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000818:	2180      	movs	r1, #128	; 0x80
 800081a:	4201      	tst	r1, r0
 800081c:	d083      	beq.n	8000726 <__ssvfscanf_r+0x506>
 800081e:	4388      	bics	r0, r1
 8000820:	9009      	str	r0, [sp, #36]	; 0x24
 8000822:	e7b8      	b.n	8000796 <__ssvfscanf_r+0x576>
 8000824:	4648      	mov	r0, r9
 8000826:	2800      	cmp	r0, #0
 8000828:	d100      	bne.n	800082c <__ssvfscanf_r+0x60c>
 800082a:	e0a0      	b.n	800096e <__ssvfscanf_r+0x74e>
 800082c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800082e:	07ed      	lsls	r5, r5, #31
 8000830:	d500      	bpl.n	8000834 <__ssvfscanf_r+0x614>
 8000832:	e0a3      	b.n	800097c <__ssvfscanf_r+0x75c>
 8000834:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8000836:	06ed      	lsls	r5, r5, #27
 8000838:	d400      	bmi.n	800083c <__ssvfscanf_r+0x61c>
 800083a:	e146      	b.n	8000aca <__ssvfscanf_r+0x8aa>
 800083c:	9a02      	ldr	r2, [sp, #8]
 800083e:	2000      	movs	r0, #0
 8000840:	6821      	ldr	r1, [r4, #0]
 8000842:	6833      	ldr	r3, [r6, #0]
 8000844:	1c05      	adds	r5, r0, #0
 8000846:	4690      	mov	r8, r2
 8000848:	781a      	ldrb	r2, [r3, #0]
 800084a:	188a      	adds	r2, r1, r2
 800084c:	7852      	ldrb	r2, [r2, #1]
 800084e:	4217      	tst	r7, r2
 8000850:	d000      	beq.n	8000854 <__ssvfscanf_r+0x634>
 8000852:	e256      	b.n	8000d02 <__ssvfscanf_r+0xae2>
 8000854:	6872      	ldr	r2, [r6, #4]
 8000856:	3301      	adds	r3, #1
 8000858:	3a01      	subs	r2, #1
 800085a:	3501      	adds	r5, #1
 800085c:	6072      	str	r2, [r6, #4]
 800085e:	6033      	str	r3, [r6, #0]
 8000860:	45a9      	cmp	r9, r5
 8000862:	d100      	bne.n	8000866 <__ssvfscanf_r+0x646>
 8000864:	e24d      	b.n	8000d02 <__ssvfscanf_r+0xae2>
 8000866:	2a00      	cmp	r2, #0
 8000868:	dcee      	bgt.n	8000848 <__ssvfscanf_r+0x628>
 800086a:	4658      	mov	r0, fp
 800086c:	1c31      	adds	r1, r6, #0
 800086e:	f001 ffaf 	bl	80027d0 <__ssrefill_r>
 8000872:	2800      	cmp	r0, #0
 8000874:	d000      	beq.n	8000878 <__ssvfscanf_r+0x658>
 8000876:	e244      	b.n	8000d02 <__ssvfscanf_r+0xae2>
 8000878:	6821      	ldr	r1, [r4, #0]
 800087a:	6833      	ldr	r3, [r6, #0]
 800087c:	e7e4      	b.n	8000848 <__ssvfscanf_r+0x628>
 800087e:	4648      	mov	r0, r9
 8000880:	2800      	cmp	r0, #0
 8000882:	d102      	bne.n	800088a <__ssvfscanf_r+0x66a>
 8000884:	2001      	movs	r0, #1
 8000886:	4240      	negs	r0, r0
 8000888:	4681      	mov	r9, r0
 800088a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800088c:	06ed      	lsls	r5, r5, #27
 800088e:	d541      	bpl.n	8000914 <__ssvfscanf_r+0x6f4>
 8000890:	9a02      	ldr	r2, [sp, #8]
 8000892:	ad1c      	add	r5, sp, #112	; 0x70
 8000894:	2000      	movs	r0, #0
 8000896:	6833      	ldr	r3, [r6, #0]
 8000898:	950a      	str	r5, [sp, #40]	; 0x28
 800089a:	4690      	mov	r8, r2
 800089c:	1c05      	adds	r5, r0, #0
 800089e:	781a      	ldrb	r2, [r3, #0]
 80008a0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80008a2:	5c82      	ldrb	r2, [r0, r2]
 80008a4:	2a00      	cmp	r2, #0
 80008a6:	d100      	bne.n	80008aa <__ssvfscanf_r+0x68a>
 80008a8:	e25c      	b.n	8000d64 <__ssvfscanf_r+0xb44>
 80008aa:	6872      	ldr	r2, [r6, #4]
 80008ac:	3301      	adds	r3, #1
 80008ae:	3a01      	subs	r2, #1
 80008b0:	3501      	adds	r5, #1
 80008b2:	6072      	str	r2, [r6, #4]
 80008b4:	6033      	str	r3, [r6, #0]
 80008b6:	45a9      	cmp	r9, r5
 80008b8:	d100      	bne.n	80008bc <__ssvfscanf_r+0x69c>
 80008ba:	e228      	b.n	8000d0e <__ssvfscanf_r+0xaee>
 80008bc:	2a00      	cmp	r2, #0
 80008be:	dcee      	bgt.n	800089e <__ssvfscanf_r+0x67e>
 80008c0:	4658      	mov	r0, fp
 80008c2:	1c31      	adds	r1, r6, #0
 80008c4:	f001 ff84 	bl	80027d0 <__ssrefill_r>
 80008c8:	2800      	cmp	r0, #0
 80008ca:	d000      	beq.n	80008ce <__ssvfscanf_r+0x6ae>
 80008cc:	e21f      	b.n	8000d0e <__ssvfscanf_r+0xaee>
 80008ce:	6833      	ldr	r3, [r6, #0]
 80008d0:	e7e5      	b.n	800089e <__ssvfscanf_r+0x67e>
 80008d2:	4658      	mov	r0, fp
 80008d4:	1c31      	adds	r1, r6, #0
 80008d6:	f001 ff7b 	bl	80027d0 <__ssrefill_r>
 80008da:	2800      	cmp	r0, #0
 80008dc:	d100      	bne.n	80008e0 <__ssvfscanf_r+0x6c0>
 80008de:	e530      	b.n	8000342 <__ssvfscanf_r+0x122>
 80008e0:	e590      	b.n	8000404 <__ssvfscanf_r+0x1e4>
 80008e2:	46c0      	nop			; (mov r8, r8)
 80008e4:	fffffe7f 	.word	0xfffffe7f
 80008e8:	fffffd7f 	.word	0xfffffd7f
 80008ec:	fffff87f 	.word	0xfffff87f
 80008f0:	0800e6e8 	.word	0x0800e6e8
 80008f4:	fffffdff 	.word	0xfffffdff
 80008f8:	fffff47f 	.word	0xfffff47f
 80008fc:	0800e820 	.word	0x0800e820
 8000900:	fffffa7f 	.word	0xfffffa7f
 8000904:	4658      	mov	r0, fp
 8000906:	1c31      	adds	r1, r6, #0
 8000908:	f001 ff62 	bl	80027d0 <__ssrefill_r>
 800090c:	2800      	cmp	r0, #0
 800090e:	d100      	bne.n	8000912 <__ssvfscanf_r+0x6f2>
 8000910:	e74d      	b.n	80007ae <__ssvfscanf_r+0x58e>
 8000912:	e708      	b.n	8000726 <__ssvfscanf_r+0x506>
 8000914:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8000916:	3504      	adds	r5, #4
 8000918:	950e      	str	r5, [sp, #56]	; 0x38
 800091a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800091c:	6828      	ldr	r0, [r5, #0]
 800091e:	9a02      	ldr	r2, [sp, #8]
 8000920:	ad1c      	add	r5, sp, #112	; 0x70
 8000922:	6833      	ldr	r3, [r6, #0]
 8000924:	9006      	str	r0, [sp, #24]
 8000926:	950a      	str	r5, [sp, #40]	; 0x28
 8000928:	4680      	mov	r8, r0
 800092a:	464d      	mov	r5, r9
 800092c:	4691      	mov	r9, r2
 800092e:	781a      	ldrb	r2, [r3, #0]
 8000930:	980a      	ldr	r0, [sp, #40]	; 0x28
 8000932:	5c82      	ldrb	r2, [r0, r2]
 8000934:	2a00      	cmp	r2, #0
 8000936:	d100      	bne.n	800093a <__ssvfscanf_r+0x71a>
 8000938:	e236      	b.n	8000da8 <__ssvfscanf_r+0xb88>
 800093a:	6872      	ldr	r2, [r6, #4]
 800093c:	3a01      	subs	r2, #1
 800093e:	6072      	str	r2, [r6, #4]
 8000940:	9806      	ldr	r0, [sp, #24]
 8000942:	781a      	ldrb	r2, [r3, #0]
 8000944:	3d01      	subs	r5, #1
 8000946:	7002      	strb	r2, [r0, #0]
 8000948:	3301      	adds	r3, #1
 800094a:	3001      	adds	r0, #1
 800094c:	9006      	str	r0, [sp, #24]
 800094e:	6033      	str	r3, [r6, #0]
 8000950:	2d00      	cmp	r5, #0
 8000952:	d100      	bne.n	8000956 <__ssvfscanf_r+0x736>
 8000954:	e216      	b.n	8000d84 <__ssvfscanf_r+0xb64>
 8000956:	6871      	ldr	r1, [r6, #4]
 8000958:	2900      	cmp	r1, #0
 800095a:	dce8      	bgt.n	800092e <__ssvfscanf_r+0x70e>
 800095c:	4658      	mov	r0, fp
 800095e:	1c31      	adds	r1, r6, #0
 8000960:	f001 ff36 	bl	80027d0 <__ssrefill_r>
 8000964:	2800      	cmp	r0, #0
 8000966:	d000      	beq.n	800096a <__ssvfscanf_r+0x74a>
 8000968:	e2d8      	b.n	8000f1c <__ssvfscanf_r+0xcfc>
 800096a:	6833      	ldr	r3, [r6, #0]
 800096c:	e7df      	b.n	800092e <__ssvfscanf_r+0x70e>
 800096e:	2001      	movs	r0, #1
 8000970:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8000972:	4240      	negs	r0, r0
 8000974:	4681      	mov	r9, r0
 8000976:	07ed      	lsls	r5, r5, #31
 8000978:	d400      	bmi.n	800097c <__ssvfscanf_r+0x75c>
 800097a:	e75b      	b.n	8000834 <__ssvfscanf_r+0x614>
 800097c:	a81a      	add	r0, sp, #104	; 0x68
 800097e:	2100      	movs	r1, #0
 8000980:	2208      	movs	r2, #8
 8000982:	f000 fca5 	bl	80012d0 <memset>
 8000986:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8000988:	2310      	movs	r3, #16
 800098a:	401d      	ands	r5, r3
 800098c:	9509      	str	r5, [sp, #36]	; 0x24
 800098e:	ad17      	add	r5, sp, #92	; 0x5c
 8000990:	9506      	str	r5, [sp, #24]
 8000992:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8000994:	2d00      	cmp	r5, #0
 8000996:	d105      	bne.n	80009a4 <__ssvfscanf_r+0x784>
 8000998:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800099a:	682d      	ldr	r5, [r5, #0]
 800099c:	9506      	str	r5, [sp, #24]
 800099e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80009a0:	3504      	adds	r5, #4
 80009a2:	950b      	str	r5, [sp, #44]	; 0x2c
 80009a4:	9b02      	ldr	r3, [sp, #8]
 80009a6:	2000      	movs	r0, #0
 80009a8:	1c05      	adds	r5, r0, #0
 80009aa:	4698      	mov	r8, r3
 80009ac:	6831      	ldr	r1, [r6, #0]
 80009ae:	6822      	ldr	r2, [r4, #0]
 80009b0:	780b      	ldrb	r3, [r1, #0]
 80009b2:	18d3      	adds	r3, r2, r3
 80009b4:	785b      	ldrb	r3, [r3, #1]
 80009b6:	421f      	tst	r7, r3
 80009b8:	d000      	beq.n	80009bc <__ssvfscanf_r+0x79c>
 80009ba:	e223      	b.n	8000e04 <__ssvfscanf_r+0xbe4>
 80009bc:	464b      	mov	r3, r9
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d000      	beq.n	80009c4 <__ssvfscanf_r+0x7a4>
 80009c2:	e277      	b.n	8000eb4 <__ssvfscanf_r+0xc94>
 80009c4:	4640      	mov	r0, r8
 80009c6:	9002      	str	r0, [sp, #8]
 80009c8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80009ca:	2d00      	cmp	r5, #0
 80009cc:	d000      	beq.n	80009d0 <__ssvfscanf_r+0x7b0>
 80009ce:	e446      	b.n	800025e <__ssvfscanf_r+0x3e>
 80009d0:	9806      	ldr	r0, [sp, #24]
 80009d2:	6005      	str	r5, [r0, #0]
 80009d4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80009d6:	3501      	adds	r5, #1
 80009d8:	950c      	str	r5, [sp, #48]	; 0x30
 80009da:	e440      	b.n	800025e <__ssvfscanf_r+0x3e>
 80009dc:	464d      	mov	r5, r9
 80009de:	3d5e      	subs	r5, #94	; 0x5e
 80009e0:	48e4      	ldr	r0, [pc, #912]	; (8000d74 <__ssvfscanf_r+0xb54>)
 80009e2:	3dff      	subs	r5, #255	; 0xff
 80009e4:	950a      	str	r5, [sp, #40]	; 0x28
 80009e6:	4681      	mov	r9, r0
 80009e8:	e688      	b.n	80006fc <__ssvfscanf_r+0x4dc>
 80009ea:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80009ec:	4be2      	ldr	r3, [pc, #904]	; (8000d78 <__ssvfscanf_r+0xb58>)
 80009ee:	401d      	ands	r5, r3
 80009f0:	9509      	str	r5, [sp, #36]	; 0x24
 80009f2:	e558      	b.n	80004a6 <__ssvfscanf_r+0x286>
 80009f4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80009f6:	2301      	movs	r3, #1
 80009f8:	4699      	mov	r9, r3
 80009fa:	07ed      	lsls	r5, r5, #31
 80009fc:	d400      	bmi.n	8000a00 <__ssvfscanf_r+0x7e0>
 80009fe:	e4d2      	b.n	80003a6 <__ssvfscanf_r+0x186>
 8000a00:	a818      	add	r0, sp, #96	; 0x60
 8000a02:	2100      	movs	r1, #0
 8000a04:	2208      	movs	r2, #8
 8000a06:	f000 fc63 	bl	80012d0 <memset>
 8000a0a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8000a0c:	2310      	movs	r3, #16
 8000a0e:	401d      	ands	r5, r3
 8000a10:	9509      	str	r5, [sp, #36]	; 0x24
 8000a12:	2500      	movs	r5, #0
 8000a14:	9506      	str	r5, [sp, #24]
 8000a16:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8000a18:	2d00      	cmp	r5, #0
 8000a1a:	d105      	bne.n	8000a28 <__ssvfscanf_r+0x808>
 8000a1c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8000a1e:	682d      	ldr	r5, [r5, #0]
 8000a20:	9506      	str	r5, [sp, #24]
 8000a22:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8000a24:	3504      	adds	r5, #4
 8000a26:	950b      	str	r5, [sp, #44]	; 0x2c
 8000a28:	9b02      	ldr	r3, [sp, #8]
 8000a2a:	2000      	movs	r0, #0
 8000a2c:	1c05      	adds	r5, r0, #0
 8000a2e:	4698      	mov	r8, r3
 8000a30:	e017      	b.n	8000a62 <__ssvfscanf_r+0x842>
 8000a32:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000a34:	2800      	cmp	r0, #0
 8000a36:	d101      	bne.n	8000a3c <__ssvfscanf_r+0x81c>
 8000a38:	9906      	ldr	r1, [sp, #24]
 8000a3a:	6008      	str	r0, [r1, #0]
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000a40:	4252      	negs	r2, r2
 8000a42:	44a8      	add	r8, r5
 8000a44:	4491      	add	r9, r2
 8000a46:	2500      	movs	r5, #0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d103      	bne.n	8000a54 <__ssvfscanf_r+0x834>
 8000a4c:	9d06      	ldr	r5, [sp, #24]
 8000a4e:	3504      	adds	r5, #4
 8000a50:	9506      	str	r5, [sp, #24]
 8000a52:	1c1d      	adds	r5, r3, #0
 8000a54:	6870      	ldr	r0, [r6, #4]
 8000a56:	2800      	cmp	r0, #0
 8000a58:	dd24      	ble.n	8000aa4 <__ssvfscanf_r+0x884>
 8000a5a:	4648      	mov	r0, r9
 8000a5c:	2800      	cmp	r0, #0
 8000a5e:	d100      	bne.n	8000a62 <__ssvfscanf_r+0x842>
 8000a60:	e21e      	b.n	8000ea0 <__ssvfscanf_r+0xc80>
 8000a62:	f000 fb45 	bl	80010f0 <__locale_mb_cur_max>
 8000a66:	42a8      	cmp	r0, r5
 8000a68:	d100      	bne.n	8000a6c <__ssvfscanf_r+0x84c>
 8000a6a:	e4cb      	b.n	8000404 <__ssvfscanf_r+0x1e4>
 8000a6c:	6833      	ldr	r3, [r6, #0]
 8000a6e:	781a      	ldrb	r2, [r3, #0]
 8000a70:	a95c      	add	r1, sp, #368	; 0x170
 8000a72:	554a      	strb	r2, [r1, r5]
 8000a74:	6872      	ldr	r2, [r6, #4]
 8000a76:	3a01      	subs	r2, #1
 8000a78:	6072      	str	r2, [r6, #4]
 8000a7a:	3301      	adds	r3, #1
 8000a7c:	aa18      	add	r2, sp, #96	; 0x60
 8000a7e:	3501      	adds	r5, #1
 8000a80:	6033      	str	r3, [r6, #0]
 8000a82:	4658      	mov	r0, fp
 8000a84:	9200      	str	r2, [sp, #0]
 8000a86:	1c2b      	adds	r3, r5, #0
 8000a88:	9906      	ldr	r1, [sp, #24]
 8000a8a:	aa5c      	add	r2, sp, #368	; 0x170
 8000a8c:	f000 fb6e 	bl	800116c <_mbrtowc_r>
 8000a90:	1c43      	adds	r3, r0, #1
 8000a92:	d100      	bne.n	8000a96 <__ssvfscanf_r+0x876>
 8000a94:	e4b6      	b.n	8000404 <__ssvfscanf_r+0x1e4>
 8000a96:	2800      	cmp	r0, #0
 8000a98:	d0cb      	beq.n	8000a32 <__ssvfscanf_r+0x812>
 8000a9a:	3002      	adds	r0, #2
 8000a9c:	d1ce      	bne.n	8000a3c <__ssvfscanf_r+0x81c>
 8000a9e:	6870      	ldr	r0, [r6, #4]
 8000aa0:	2800      	cmp	r0, #0
 8000aa2:	dcda      	bgt.n	8000a5a <__ssvfscanf_r+0x83a>
 8000aa4:	4658      	mov	r0, fp
 8000aa6:	1c31      	adds	r1, r6, #0
 8000aa8:	f001 fe92 	bl	80027d0 <__ssrefill_r>
 8000aac:	2800      	cmp	r0, #0
 8000aae:	d0d4      	beq.n	8000a5a <__ssvfscanf_r+0x83a>
 8000ab0:	4643      	mov	r3, r8
 8000ab2:	9302      	str	r3, [sp, #8]
 8000ab4:	2d00      	cmp	r5, #0
 8000ab6:	d100      	bne.n	8000aba <__ssvfscanf_r+0x89a>
 8000ab8:	e1f4      	b.n	8000ea4 <__ssvfscanf_r+0xc84>
 8000aba:	e4a3      	b.n	8000404 <__ssvfscanf_r+0x1e4>
 8000abc:	464d      	mov	r5, r9
 8000abe:	3d5e      	subs	r5, #94	; 0x5e
 8000ac0:	48ac      	ldr	r0, [pc, #688]	; (8000d74 <__ssvfscanf_r+0xb54>)
 8000ac2:	3dff      	subs	r5, #255	; 0xff
 8000ac4:	9513      	str	r5, [sp, #76]	; 0x4c
 8000ac6:	4681      	mov	r9, r0
 8000ac8:	e4b5      	b.n	8000436 <__ssvfscanf_r+0x216>
 8000aca:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8000acc:	3504      	adds	r5, #4
 8000ace:	950a      	str	r5, [sp, #40]	; 0x28
 8000ad0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8000ad2:	9a02      	ldr	r2, [sp, #8]
 8000ad4:	682d      	ldr	r5, [r5, #0]
 8000ad6:	6833      	ldr	r3, [r6, #0]
 8000ad8:	9509      	str	r5, [sp, #36]	; 0x24
 8000ada:	46a8      	mov	r8, r5
 8000adc:	464d      	mov	r5, r9
 8000ade:	4691      	mov	r9, r2
 8000ae0:	781a      	ldrb	r2, [r3, #0]
 8000ae2:	6821      	ldr	r1, [r4, #0]
 8000ae4:	188a      	adds	r2, r1, r2
 8000ae6:	7852      	ldrb	r2, [r2, #1]
 8000ae8:	4217      	tst	r7, r2
 8000aea:	d000      	beq.n	8000aee <__ssvfscanf_r+0x8ce>
 8000aec:	e0fa      	b.n	8000ce4 <__ssvfscanf_r+0xac4>
 8000aee:	6872      	ldr	r2, [r6, #4]
 8000af0:	3a01      	subs	r2, #1
 8000af2:	6072      	str	r2, [r6, #4]
 8000af4:	781a      	ldrb	r2, [r3, #0]
 8000af6:	4641      	mov	r1, r8
 8000af8:	700a      	strb	r2, [r1, #0]
 8000afa:	3301      	adds	r3, #1
 8000afc:	2201      	movs	r2, #1
 8000afe:	3d01      	subs	r5, #1
 8000b00:	4490      	add	r8, r2
 8000b02:	6033      	str	r3, [r6, #0]
 8000b04:	2d00      	cmp	r5, #0
 8000b06:	d100      	bne.n	8000b0a <__ssvfscanf_r+0x8ea>
 8000b08:	e0ec      	b.n	8000ce4 <__ssvfscanf_r+0xac4>
 8000b0a:	6870      	ldr	r0, [r6, #4]
 8000b0c:	2800      	cmp	r0, #0
 8000b0e:	dce7      	bgt.n	8000ae0 <__ssvfscanf_r+0x8c0>
 8000b10:	4658      	mov	r0, fp
 8000b12:	1c31      	adds	r1, r6, #0
 8000b14:	f001 fe5c 	bl	80027d0 <__ssrefill_r>
 8000b18:	2800      	cmp	r0, #0
 8000b1a:	d000      	beq.n	8000b1e <__ssvfscanf_r+0x8fe>
 8000b1c:	e0e2      	b.n	8000ce4 <__ssvfscanf_r+0xac4>
 8000b1e:	6833      	ldr	r3, [r6, #0]
 8000b20:	e7de      	b.n	8000ae0 <__ssvfscanf_r+0x8c0>
 8000b22:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000b24:	2380      	movs	r3, #128	; 0x80
 8000b26:	990e      	ldr	r1, [sp, #56]	; 0x38
 8000b28:	4398      	bics	r0, r3
 8000b2a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8000b2c:	3101      	adds	r1, #1
 8000b2e:	9009      	str	r0, [sp, #36]	; 0x24
 8000b30:	910e      	str	r1, [sp, #56]	; 0x38
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d100      	bne.n	8000b38 <__ssvfscanf_r+0x918>
 8000b36:	e540      	b.n	80005ba <__ssvfscanf_r+0x39a>
 8000b38:	3b01      	subs	r3, #1
 8000b3a:	9313      	str	r3, [sp, #76]	; 0x4c
 8000b3c:	3501      	adds	r5, #1
 8000b3e:	e53c      	b.n	80005ba <__ssvfscanf_r+0x39a>
 8000b40:	9911      	ldr	r1, [sp, #68]	; 0x44
 8000b42:	2902      	cmp	r1, #2
 8000b44:	d000      	beq.n	8000b48 <__ssvfscanf_r+0x928>
 8000b46:	e55f      	b.n	8000608 <__ssvfscanf_r+0x3e8>
 8000b48:	2003      	movs	r0, #3
 8000b4a:	9011      	str	r0, [sp, #68]	; 0x44
 8000b4c:	e531      	b.n	80005b2 <__ssvfscanf_r+0x392>
 8000b4e:	9502      	str	r5, [sp, #8]
 8000b50:	4682      	mov	sl, r0
 8000b52:	2380      	movs	r3, #128	; 0x80
 8000b54:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8000b56:	009b      	lsls	r3, r3, #2
 8000b58:	431d      	orrs	r5, r3
 8000b5a:	9509      	str	r5, [sp, #36]	; 0x24
 8000b5c:	4d87      	ldr	r5, [pc, #540]	; (8000d7c <__ssvfscanf_r+0xb5c>)
 8000b5e:	2003      	movs	r0, #3
 8000b60:	950f      	str	r5, [sp, #60]	; 0x3c
 8000b62:	2510      	movs	r5, #16
 8000b64:	950d      	str	r5, [sp, #52]	; 0x34
 8000b66:	4680      	mov	r8, r0
 8000b68:	f7ff fbe7 	bl	800033a <__ssvfscanf_r+0x11a>
 8000b6c:	4682      	mov	sl, r0
 8000b6e:	9502      	str	r5, [sp, #8]
 8000b70:	ad1c      	add	r5, sp, #112	; 0x70
 8000b72:	1c28      	adds	r0, r5, #0
 8000b74:	4651      	mov	r1, sl
 8000b76:	950a      	str	r5, [sp, #40]	; 0x28
 8000b78:	f000 fc3a 	bl	80013f0 <__sccl>
 8000b7c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8000b7e:	2340      	movs	r3, #64	; 0x40
 8000b80:	4682      	mov	sl, r0
 8000b82:	431d      	orrs	r5, r3
 8000b84:	2001      	movs	r0, #1
 8000b86:	9509      	str	r5, [sp, #36]	; 0x24
 8000b88:	4680      	mov	r8, r0
 8000b8a:	f7ff fbd6 	bl	800033a <__ssvfscanf_r+0x11a>
 8000b8e:	9502      	str	r5, [sp, #8]
 8000b90:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8000b92:	2340      	movs	r3, #64	; 0x40
 8000b94:	4682      	mov	sl, r0
 8000b96:	431d      	orrs	r5, r3
 8000b98:	2000      	movs	r0, #0
 8000b9a:	9509      	str	r5, [sp, #36]	; 0x24
 8000b9c:	4680      	mov	r8, r0
 8000b9e:	f7ff fbcc 	bl	800033a <__ssvfscanf_r+0x11a>
 8000ba2:	9502      	str	r5, [sp, #8]
 8000ba4:	4682      	mov	sl, r0
 8000ba6:	f7ff fbc2 	bl	800032e <__ssvfscanf_r+0x10e>
 8000baa:	9909      	ldr	r1, [sp, #36]	; 0x24
 8000bac:	2204      	movs	r2, #4
 8000bae:	4311      	orrs	r1, r2
 8000bb0:	9109      	str	r1, [sp, #36]	; 0x24
 8000bb2:	f7ff fbab 	bl	800030c <__ssvfscanf_r+0xec>
 8000bb6:	9502      	str	r5, [sp, #8]
 8000bb8:	4d71      	ldr	r5, [pc, #452]	; (8000d80 <__ssvfscanf_r+0xb60>)
 8000bba:	4682      	mov	sl, r0
 8000bbc:	950f      	str	r5, [sp, #60]	; 0x3c
 8000bbe:	2003      	movs	r0, #3
 8000bc0:	2500      	movs	r5, #0
 8000bc2:	950d      	str	r5, [sp, #52]	; 0x34
 8000bc4:	4680      	mov	r8, r0
 8000bc6:	f7ff fbb8 	bl	800033a <__ssvfscanf_r+0x11a>
 8000bca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000bcc:	4661      	mov	r1, ip
 8000bce:	430b      	orrs	r3, r1
 8000bd0:	9309      	str	r3, [sp, #36]	; 0x24
 8000bd2:	f7ff fb9b 	bl	800030c <__ssvfscanf_r+0xec>
 8000bd6:	9502      	str	r5, [sp, #8]
 8000bd8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8000bda:	4682      	mov	sl, r0
 8000bdc:	06ed      	lsls	r5, r5, #27
 8000bde:	d501      	bpl.n	8000be4 <__ssvfscanf_r+0x9c4>
 8000be0:	f7ff fb3d 	bl	800025e <__ssvfscanf_r+0x3e>
 8000be4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8000be6:	076d      	lsls	r5, r5, #29
 8000be8:	d400      	bmi.n	8000bec <__ssvfscanf_r+0x9cc>
 8000bea:	e144      	b.n	8000e76 <__ssvfscanf_r+0xc56>
 8000bec:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8000bee:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8000bf0:	4669      	mov	r1, sp
 8000bf2:	2208      	movs	r2, #8
 8000bf4:	6800      	ldr	r0, [r0, #0]
 8000bf6:	5a52      	ldrh	r2, [r2, r1]
 8000bf8:	3504      	adds	r5, #4
 8000bfa:	9008      	str	r0, [sp, #32]
 8000bfc:	8002      	strh	r2, [r0, #0]
 8000bfe:	950b      	str	r5, [sp, #44]	; 0x2c
 8000c00:	f7ff fb2d 	bl	800025e <__ssvfscanf_r+0x3e>
 8000c04:	9502      	str	r5, [sp, #8]
 8000c06:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8000c08:	2301      	movs	r3, #1
 8000c0a:	431d      	orrs	r5, r3
 8000c0c:	4682      	mov	sl, r0
 8000c0e:	9509      	str	r5, [sp, #36]	; 0x24
 8000c10:	f7ff fb8d 	bl	800032e <__ssvfscanf_r+0x10e>
 8000c14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000c16:	4643      	mov	r3, r8
 8000c18:	431a      	orrs	r2, r3
 8000c1a:	9209      	str	r2, [sp, #36]	; 0x24
 8000c1c:	f7ff fb76 	bl	800030c <__ssvfscanf_r+0xec>
 8000c20:	9502      	str	r5, [sp, #8]
 8000c22:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8000c24:	2301      	movs	r3, #1
 8000c26:	431d      	orrs	r5, r3
 8000c28:	9509      	str	r5, [sp, #36]	; 0x24
 8000c2a:	4682      	mov	sl, r0
 8000c2c:	4d53      	ldr	r5, [pc, #332]	; (8000d7c <__ssvfscanf_r+0xb5c>)
 8000c2e:	2003      	movs	r0, #3
 8000c30:	950f      	str	r5, [sp, #60]	; 0x3c
 8000c32:	2508      	movs	r5, #8
 8000c34:	950d      	str	r5, [sp, #52]	; 0x34
 8000c36:	4680      	mov	r8, r0
 8000c38:	f7ff fb7f 	bl	800033a <__ssvfscanf_r+0x11a>
 8000c3c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8000c3e:	2210      	movs	r2, #16
 8000c40:	4311      	orrs	r1, r2
 8000c42:	9109      	str	r1, [sp, #36]	; 0x24
 8000c44:	f7ff fb62 	bl	800030c <__ssvfscanf_r+0xec>
 8000c48:	464b      	mov	r3, r9
 8000c4a:	009b      	lsls	r3, r3, #2
 8000c4c:	469a      	mov	sl, r3
 8000c4e:	44d1      	add	r9, sl
 8000c50:	4649      	mov	r1, r9
 8000c52:	0049      	lsls	r1, r1, #1
 8000c54:	2230      	movs	r2, #48	; 0x30
 8000c56:	4689      	mov	r9, r1
 8000c58:	4252      	negs	r2, r2
 8000c5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000c5c:	4491      	add	r9, r2
 8000c5e:	4499      	add	r9, r3
 8000c60:	f7ff fb54 	bl	800030c <__ssvfscanf_r+0xec>
 8000c64:	9502      	str	r5, [sp, #8]
 8000c66:	4682      	mov	sl, r0
 8000c68:	e7e0      	b.n	8000c2c <__ssvfscanf_r+0xa0c>
 8000c6a:	9502      	str	r5, [sp, #8]
 8000c6c:	4682      	mov	sl, r0
 8000c6e:	2388      	movs	r3, #136	; 0x88
 8000c70:	e770      	b.n	8000b54 <__ssvfscanf_r+0x934>
 8000c72:	2202      	movs	r2, #2
 8000c74:	9502      	str	r5, [sp, #8]
 8000c76:	4682      	mov	sl, r0
 8000c78:	4690      	mov	r8, r2
 8000c7a:	f7ff fb5e 	bl	800033a <__ssvfscanf_r+0x11a>
 8000c7e:	9502      	str	r5, [sp, #8]
 8000c80:	4682      	mov	sl, r0
 8000c82:	4d3e      	ldr	r5, [pc, #248]	; (8000d7c <__ssvfscanf_r+0xb5c>)
 8000c84:	f7ff fb54 	bl	8000330 <__ssvfscanf_r+0x110>
 8000c88:	2104      	movs	r1, #4
 8000c8a:	9502      	str	r5, [sp, #8]
 8000c8c:	4682      	mov	sl, r0
 8000c8e:	4688      	mov	r8, r1
 8000c90:	f7ff fb53 	bl	800033a <__ssvfscanf_r+0x11a>
 8000c94:	9502      	str	r5, [sp, #8]
 8000c96:	4682      	mov	sl, r0
 8000c98:	f7ff fb08 	bl	80002ac <__ssvfscanf_r+0x8c>
 8000c9c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8000c9e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8000ca0:	4680      	mov	r8, r0
 8000ca2:	2004      	movs	r0, #4
 8000ca4:	4480      	add	r8, r0
 8000ca6:	6829      	ldr	r1, [r5, #0]
 8000ca8:	4658      	mov	r0, fp
 8000caa:	9600      	str	r6, [sp, #0]
 8000cac:	2201      	movs	r2, #1
 8000cae:	464b      	mov	r3, r9
 8000cb0:	f001 fdb0 	bl	8002814 <_sfread_r>
 8000cb4:	2800      	cmp	r0, #0
 8000cb6:	d101      	bne.n	8000cbc <__ssvfscanf_r+0xa9c>
 8000cb8:	f7ff fba4 	bl	8000404 <__ssvfscanf_r+0x1e4>
 8000cbc:	9d02      	ldr	r5, [sp, #8]
 8000cbe:	1945      	adds	r5, r0, r5
 8000cc0:	9502      	str	r5, [sp, #8]
 8000cc2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000cc4:	3501      	adds	r5, #1
 8000cc6:	950c      	str	r5, [sp, #48]	; 0x30
 8000cc8:	4645      	mov	r5, r8
 8000cca:	950b      	str	r5, [sp, #44]	; 0x2c
 8000ccc:	f7ff fac7 	bl	800025e <__ssvfscanf_r+0x3e>
 8000cd0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8000cd2:	431d      	orrs	r5, r3
 8000cd4:	9509      	str	r5, [sp, #36]	; 0x24
 8000cd6:	4d2a      	ldr	r5, [pc, #168]	; (8000d80 <__ssvfscanf_r+0xb60>)
 8000cd8:	950f      	str	r5, [sp, #60]	; 0x3c
 8000cda:	250a      	movs	r5, #10
 8000cdc:	950d      	str	r5, [sp, #52]	; 0x34
 8000cde:	4690      	mov	r8, r2
 8000ce0:	f7ff fb2b 	bl	800033a <__ssvfscanf_r+0x11a>
 8000ce4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8000ce6:	4640      	mov	r0, r8
 8000ce8:	464a      	mov	r2, r9
 8000cea:	1b43      	subs	r3, r0, r5
 8000cec:	18d5      	adds	r5, r2, r3
 8000cee:	9502      	str	r5, [sp, #8]
 8000cf0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000cf2:	3501      	adds	r5, #1
 8000cf4:	950c      	str	r5, [sp, #48]	; 0x30
 8000cf6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	7001      	strb	r1, [r0, #0]
 8000cfc:	950b      	str	r5, [sp, #44]	; 0x2c
 8000cfe:	f7ff faae 	bl	800025e <__ssvfscanf_r+0x3e>
 8000d02:	4643      	mov	r3, r8
 8000d04:	46a8      	mov	r8, r5
 8000d06:	4443      	add	r3, r8
 8000d08:	9302      	str	r3, [sp, #8]
 8000d0a:	f7ff faa8 	bl	800025e <__ssvfscanf_r+0x3e>
 8000d0e:	4643      	mov	r3, r8
 8000d10:	9302      	str	r3, [sp, #8]
 8000d12:	46a8      	mov	r8, r5
 8000d14:	9802      	ldr	r0, [sp, #8]
 8000d16:	1c05      	adds	r5, r0, #0
 8000d18:	4445      	add	r5, r8
 8000d1a:	9502      	str	r5, [sp, #8]
 8000d1c:	f7ff fa9f 	bl	800025e <__ssvfscanf_r+0x3e>
 8000d20:	4640      	mov	r0, r8
 8000d22:	7003      	strb	r3, [r0, #0]
 8000d24:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8000d26:	4658      	mov	r0, fp
 8000d28:	9910      	ldr	r1, [sp, #64]	; 0x40
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8000d2e:	f000 f97b 	bl	8001028 <__ssvfscanf_r+0xe08>
 8000d32:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8000d34:	06ad      	lsls	r5, r5, #26
 8000d36:	d40c      	bmi.n	8000d52 <__ssvfscanf_r+0xb32>
 8000d38:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8000d3a:	076d      	lsls	r5, r5, #29
 8000d3c:	d509      	bpl.n	8000d52 <__ssvfscanf_r+0xb32>
 8000d3e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8000d40:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8000d42:	3504      	adds	r5, #4
 8000d44:	950b      	str	r5, [sp, #44]	; 0x2c
 8000d46:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000d48:	6809      	ldr	r1, [r1, #0]
 8000d4a:	3501      	adds	r5, #1
 8000d4c:	8008      	strh	r0, [r1, #0]
 8000d4e:	950c      	str	r5, [sp, #48]	; 0x30
 8000d50:	e503      	b.n	800075a <__ssvfscanf_r+0x53a>
 8000d52:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8000d54:	682b      	ldr	r3, [r5, #0]
 8000d56:	3504      	adds	r5, #4
 8000d58:	6018      	str	r0, [r3, #0]
 8000d5a:	950b      	str	r5, [sp, #44]	; 0x2c
 8000d5c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000d5e:	3501      	adds	r5, #1
 8000d60:	950c      	str	r5, [sp, #48]	; 0x30
 8000d62:	e4fa      	b.n	800075a <__ssvfscanf_r+0x53a>
 8000d64:	4643      	mov	r3, r8
 8000d66:	9302      	str	r3, [sp, #8]
 8000d68:	46a8      	mov	r8, r5
 8000d6a:	2d00      	cmp	r5, #0
 8000d6c:	d1d2      	bne.n	8000d14 <__ssvfscanf_r+0xaf4>
 8000d6e:	f7ff fab7 	bl	80002e0 <__ssvfscanf_r+0xc0>
 8000d72:	46c0      	nop			; (mov r8, r8)
 8000d74:	0000015d 	.word	0x0000015d
 8000d78:	fffffeff 	.word	0xfffffeff
 8000d7c:	080025b1 	.word	0x080025b1
 8000d80:	08002421 	.word	0x08002421
 8000d84:	464d      	mov	r5, r9
 8000d86:	9502      	str	r5, [sp, #8]
 8000d88:	9d06      	ldr	r5, [sp, #24]
 8000d8a:	4640      	mov	r0, r8
 8000d8c:	1a2d      	subs	r5, r5, r0
 8000d8e:	46a8      	mov	r8, r5
 8000d90:	d101      	bne.n	8000d96 <__ssvfscanf_r+0xb76>
 8000d92:	f7ff faa5 	bl	80002e0 <__ssvfscanf_r+0xc0>
 8000d96:	9d06      	ldr	r5, [sp, #24]
 8000d98:	2000      	movs	r0, #0
 8000d9a:	7028      	strb	r0, [r5, #0]
 8000d9c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000d9e:	3501      	adds	r5, #1
 8000da0:	950c      	str	r5, [sp, #48]	; 0x30
 8000da2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8000da4:	950b      	str	r5, [sp, #44]	; 0x2c
 8000da6:	e7b5      	b.n	8000d14 <__ssvfscanf_r+0xaf4>
 8000da8:	464d      	mov	r5, r9
 8000daa:	9502      	str	r5, [sp, #8]
 8000dac:	e7ec      	b.n	8000d88 <__ssvfscanf_r+0xb68>
 8000dae:	4b99      	ldr	r3, [pc, #612]	; (8001014 <__ssvfscanf_r+0xdf4>)
 8000db0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8000db2:	4019      	ands	r1, r3
 8000db4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000db6:	9109      	str	r1, [sp, #36]	; 0x24
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d002      	beq.n	8000dc2 <__ssvfscanf_r+0xba2>
 8000dbc:	3b01      	subs	r3, #1
 8000dbe:	930a      	str	r3, [sp, #40]	; 0x28
 8000dc0:	3501      	adds	r5, #1
 8000dc2:	980e      	ldr	r0, [sp, #56]	; 0x38
 8000dc4:	3001      	adds	r0, #1
 8000dc6:	900e      	str	r0, [sp, #56]	; 0x38
 8000dc8:	e4e9      	b.n	800079e <__ssvfscanf_r+0x57e>
 8000dca:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8000dcc:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8000dce:	07ad      	lsls	r5, r5, #30
 8000dd0:	d501      	bpl.n	8000dd6 <__ssvfscanf_r+0xbb6>
 8000dd2:	f7ff fbd2 	bl	800057a <__ssvfscanf_r+0x35a>
 8000dd6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8000dd8:	6829      	ldr	r1, [r5, #0]
 8000dda:	4681      	mov	r9, r0
 8000ddc:	2004      	movs	r0, #4
 8000dde:	4481      	add	r9, r0
 8000de0:	4688      	mov	r8, r1
 8000de2:	9806      	ldr	r0, [sp, #24]
 8000de4:	9907      	ldr	r1, [sp, #28]
 8000de6:	f000 fad5 	bl	8001394 <__fpclassifyd>
 8000dea:	2800      	cmp	r0, #0
 8000dec:	d100      	bne.n	8000df0 <__ssvfscanf_r+0xbd0>
 8000dee:	e0c0      	b.n	8000f72 <__ssvfscanf_r+0xd52>
 8000df0:	9806      	ldr	r0, [sp, #24]
 8000df2:	9907      	ldr	r1, [sp, #28]
 8000df4:	f008 edd8 	blx	80099a8 <__aeabi_d2f>
 8000df8:	4641      	mov	r1, r8
 8000dfa:	464d      	mov	r5, r9
 8000dfc:	6008      	str	r0, [r1, #0]
 8000dfe:	950b      	str	r5, [sp, #44]	; 0x2c
 8000e00:	f7ff fbc3 	bl	800058a <__ssvfscanf_r+0x36a>
 8000e04:	4645      	mov	r5, r8
 8000e06:	9502      	str	r5, [sp, #8]
 8000e08:	e5de      	b.n	80009c8 <__ssvfscanf_r+0x7a8>
 8000e0a:	9912      	ldr	r1, [sp, #72]	; 0x48
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	3101      	adds	r1, #1
 8000e10:	4658      	mov	r0, fp
 8000e12:	230a      	movs	r3, #10
 8000e14:	f001 fb04 	bl	8002420 <_strtol_r>
 8000e18:	1b42      	subs	r2, r0, r5
 8000e1a:	4b7f      	ldr	r3, [pc, #508]	; (8001018 <__ssvfscanf_r+0xdf8>)
 8000e1c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8000e1e:	446b      	add	r3, sp
 8000e20:	429d      	cmp	r5, r3
 8000e22:	d302      	bcc.n	8000e2a <__ssvfscanf_r+0xc0a>
 8000e24:	4d7d      	ldr	r5, [pc, #500]	; (800101c <__ssvfscanf_r+0xdfc>)
 8000e26:	446d      	add	r5, sp
 8000e28:	9512      	str	r5, [sp, #72]	; 0x48
 8000e2a:	9812      	ldr	r0, [sp, #72]	; 0x48
 8000e2c:	497c      	ldr	r1, [pc, #496]	; (8001020 <__ssvfscanf_r+0xe00>)
 8000e2e:	f000 fb41 	bl	80014b4 <sprintf>
 8000e32:	f7ff fb95 	bl	8000560 <__ssvfscanf_r+0x340>
 8000e36:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8000e38:	9814      	ldr	r0, [sp, #80]	; 0x50
 8000e3a:	1a2b      	subs	r3, r5, r0
 8000e3c:	4645      	mov	r5, r8
 8000e3e:	425a      	negs	r2, r3
 8000e40:	9512      	str	r5, [sp, #72]	; 0x48
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d1e9      	bne.n	8000e1a <__ssvfscanf_r+0xbfa>
 8000e46:	f7ff fb8b 	bl	8000560 <__ssvfscanf_r+0x340>
 8000e4a:	4658      	mov	r0, fp
 8000e4c:	1c32      	adds	r2, r6, #0
 8000e4e:	f001 fc7b 	bl	8002748 <_sungetc_r>
 8000e52:	9d02      	ldr	r5, [sp, #8]
 8000e54:	4643      	mov	r3, r8
 8000e56:	3b02      	subs	r3, #2
 8000e58:	3d01      	subs	r5, #1
 8000e5a:	7819      	ldrb	r1, [r3, #0]
 8000e5c:	9502      	str	r5, [sp, #8]
 8000e5e:	f7ff fb65 	bl	800052c <__ssvfscanf_r+0x30c>
 8000e62:	4970      	ldr	r1, [pc, #448]	; (8001024 <__ssvfscanf_r+0xe04>)
 8000e64:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000e66:	4008      	ands	r0, r1
 8000e68:	9009      	str	r0, [sp, #36]	; 0x24
 8000e6a:	2101      	movs	r1, #1
 8000e6c:	2000      	movs	r0, #0
 8000e6e:	9111      	str	r1, [sp, #68]	; 0x44
 8000e70:	900e      	str	r0, [sp, #56]	; 0x38
 8000e72:	f7ff fb9e 	bl	80005b2 <__ssvfscanf_r+0x392>
 8000e76:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8000e78:	682b      	ldr	r3, [r5, #0]
 8000e7a:	9d02      	ldr	r5, [sp, #8]
 8000e7c:	601d      	str	r5, [r3, #0]
 8000e7e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8000e80:	3504      	adds	r5, #4
 8000e82:	950b      	str	r5, [sp, #44]	; 0x2c
 8000e84:	f7ff f9eb 	bl	800025e <__ssvfscanf_r+0x3e>
 8000e88:	6831      	ldr	r1, [r6, #0]
 8000e8a:	464a      	mov	r2, r9
 8000e8c:	1c08      	adds	r0, r1, #0
 8000e8e:	46a9      	mov	r9, r5
 8000e90:	1b5b      	subs	r3, r3, r5
 8000e92:	4448      	add	r0, r9
 8000e94:	9202      	str	r2, [sp, #8]
 8000e96:	44c8      	add	r8, r9
 8000e98:	6073      	str	r3, [r6, #4]
 8000e9a:	6030      	str	r0, [r6, #0]
 8000e9c:	f7ff faa2 	bl	80003e4 <__ssvfscanf_r+0x1c4>
 8000ea0:	4645      	mov	r5, r8
 8000ea2:	9502      	str	r5, [sp, #8]
 8000ea4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8000ea6:	426b      	negs	r3, r5
 8000ea8:	416b      	adcs	r3, r5
 8000eaa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000eac:	18ed      	adds	r5, r5, r3
 8000eae:	950c      	str	r5, [sp, #48]	; 0x30
 8000eb0:	f7ff f9d5 	bl	800025e <__ssvfscanf_r+0x3e>
 8000eb4:	f000 f91c 	bl	80010f0 <__locale_mb_cur_max>
 8000eb8:	42a8      	cmp	r0, r5
 8000eba:	d101      	bne.n	8000ec0 <__ssvfscanf_r+0xca0>
 8000ebc:	f7ff faa2 	bl	8000404 <__ssvfscanf_r+0x1e4>
 8000ec0:	6833      	ldr	r3, [r6, #0]
 8000ec2:	781a      	ldrb	r2, [r3, #0]
 8000ec4:	a95c      	add	r1, sp, #368	; 0x170
 8000ec6:	554a      	strb	r2, [r1, r5]
 8000ec8:	6872      	ldr	r2, [r6, #4]
 8000eca:	3a01      	subs	r2, #1
 8000ecc:	6072      	str	r2, [r6, #4]
 8000ece:	3301      	adds	r3, #1
 8000ed0:	aa1a      	add	r2, sp, #104	; 0x68
 8000ed2:	3501      	adds	r5, #1
 8000ed4:	6033      	str	r3, [r6, #0]
 8000ed6:	4658      	mov	r0, fp
 8000ed8:	9200      	str	r2, [sp, #0]
 8000eda:	1c2b      	adds	r3, r5, #0
 8000edc:	9906      	ldr	r1, [sp, #24]
 8000ede:	aa5c      	add	r2, sp, #368	; 0x170
 8000ee0:	f000 f944 	bl	800116c <_mbrtowc_r>
 8000ee4:	1c43      	adds	r3, r0, #1
 8000ee6:	d101      	bne.n	8000eec <__ssvfscanf_r+0xccc>
 8000ee8:	f7ff fa8c 	bl	8000404 <__ssvfscanf_r+0x1e4>
 8000eec:	2800      	cmp	r0, #0
 8000eee:	d11d      	bne.n	8000f2c <__ssvfscanf_r+0xd0c>
 8000ef0:	9906      	ldr	r1, [sp, #24]
 8000ef2:	6008      	str	r0, [r1, #0]
 8000ef4:	f000 f8c4 	bl	8001080 <iswspace>
 8000ef8:	2800      	cmp	r0, #0
 8000efa:	d01c      	beq.n	8000f36 <__ssvfscanf_r+0xd16>
 8000efc:	4643      	mov	r3, r8
 8000efe:	9302      	str	r3, [sp, #8]
 8000f00:	2d00      	cmp	r5, #0
 8000f02:	d100      	bne.n	8000f06 <__ssvfscanf_r+0xce6>
 8000f04:	e560      	b.n	80009c8 <__ssvfscanf_r+0x7a8>
 8000f06:	4698      	mov	r8, r3
 8000f08:	3d01      	subs	r5, #1
 8000f0a:	ab5c      	add	r3, sp, #368	; 0x170
 8000f0c:	5d59      	ldrb	r1, [r3, r5]
 8000f0e:	4658      	mov	r0, fp
 8000f10:	1c32      	adds	r2, r6, #0
 8000f12:	f001 fc19 	bl	8002748 <_sungetc_r>
 8000f16:	2d00      	cmp	r5, #0
 8000f18:	d1f6      	bne.n	8000f08 <__ssvfscanf_r+0xce8>
 8000f1a:	e553      	b.n	80009c4 <__ssvfscanf_r+0x7a4>
 8000f1c:	464d      	mov	r5, r9
 8000f1e:	9502      	str	r5, [sp, #8]
 8000f20:	9d06      	ldr	r5, [sp, #24]
 8000f22:	45a8      	cmp	r8, r5
 8000f24:	d000      	beq.n	8000f28 <__ssvfscanf_r+0xd08>
 8000f26:	e72f      	b.n	8000d88 <__ssvfscanf_r+0xb68>
 8000f28:	f7ff fa6c 	bl	8000404 <__ssvfscanf_r+0x1e4>
 8000f2c:	3002      	adds	r0, #2
 8000f2e:	d00e      	beq.n	8000f4e <__ssvfscanf_r+0xd2e>
 8000f30:	9a06      	ldr	r2, [sp, #24]
 8000f32:	6810      	ldr	r0, [r2, #0]
 8000f34:	e7de      	b.n	8000ef4 <__ssvfscanf_r+0xcd4>
 8000f36:	2101      	movs	r1, #1
 8000f38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000f3a:	4249      	negs	r1, r1
 8000f3c:	44a8      	add	r8, r5
 8000f3e:	4489      	add	r9, r1
 8000f40:	2500      	movs	r5, #0
 8000f42:	2a00      	cmp	r2, #0
 8000f44:	d103      	bne.n	8000f4e <__ssvfscanf_r+0xd2e>
 8000f46:	9d06      	ldr	r5, [sp, #24]
 8000f48:	3504      	adds	r5, #4
 8000f4a:	9506      	str	r5, [sp, #24]
 8000f4c:	1c15      	adds	r5, r2, #0
 8000f4e:	6870      	ldr	r0, [r6, #4]
 8000f50:	2800      	cmp	r0, #0
 8000f52:	dd00      	ble.n	8000f56 <__ssvfscanf_r+0xd36>
 8000f54:	e52a      	b.n	80009ac <__ssvfscanf_r+0x78c>
 8000f56:	4658      	mov	r0, fp
 8000f58:	1c31      	adds	r1, r6, #0
 8000f5a:	f001 fc39 	bl	80027d0 <__ssrefill_r>
 8000f5e:	2800      	cmp	r0, #0
 8000f60:	d100      	bne.n	8000f64 <__ssvfscanf_r+0xd44>
 8000f62:	e523      	b.n	80009ac <__ssvfscanf_r+0x78c>
 8000f64:	4643      	mov	r3, r8
 8000f66:	9302      	str	r3, [sp, #8]
 8000f68:	2d00      	cmp	r5, #0
 8000f6a:	d001      	beq.n	8000f70 <__ssvfscanf_r+0xd50>
 8000f6c:	f7ff fa4a 	bl	8000404 <__ssvfscanf_r+0x1e4>
 8000f70:	e52a      	b.n	80009c8 <__ssvfscanf_r+0x7a8>
 8000f72:	f000 fa7b 	bl	800146c <nanf>
 8000f76:	e73f      	b.n	8000df8 <__ssvfscanf_r+0xbd8>
 8000f78:	2903      	cmp	r1, #3
 8000f7a:	d101      	bne.n	8000f80 <__ssvfscanf_r+0xd60>
 8000f7c:	f7ff fbaf 	bl	80006de <__ssvfscanf_r+0x4be>
 8000f80:	f7ff fa8b 	bl	800049a <__ssvfscanf_r+0x27a>
 8000f84:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8000f86:	45a8      	cmp	r8, r5
 8000f88:	d801      	bhi.n	8000f8e <__ssvfscanf_r+0xd6e>
 8000f8a:	f7ff f9a9 	bl	80002e0 <__ssvfscanf_r+0xc0>
 8000f8e:	466d      	mov	r5, sp
 8000f90:	4644      	mov	r4, r8
 8000f92:	3570      	adds	r5, #112	; 0x70
 8000f94:	3c01      	subs	r4, #1
 8000f96:	35ff      	adds	r5, #255	; 0xff
 8000f98:	465f      	mov	r7, fp
 8000f9a:	7821      	ldrb	r1, [r4, #0]
 8000f9c:	1c38      	adds	r0, r7, #0
 8000f9e:	1c32      	adds	r2, r6, #0
 8000fa0:	3c01      	subs	r4, #1
 8000fa2:	f001 fbd1 	bl	8002748 <_sungetc_r>
 8000fa6:	42ac      	cmp	r4, r5
 8000fa8:	d1f7      	bne.n	8000f9a <__ssvfscanf_r+0xd7a>
 8000faa:	f7ff f999 	bl	80002e0 <__ssvfscanf_r+0xc0>
 8000fae:	464d      	mov	r5, r9
 8000fb0:	9502      	str	r5, [sp, #8]
 8000fb2:	f7ff fa74 	bl	800049e <__ssvfscanf_r+0x27e>
 8000fb6:	466d      	mov	r5, sp
 8000fb8:	9810      	ldr	r0, [sp, #64]	; 0x40
 8000fba:	4644      	mov	r4, r8
 8000fbc:	3570      	adds	r5, #112	; 0x70
 8000fbe:	3c01      	subs	r4, #1
 8000fc0:	35ff      	adds	r5, #255	; 0xff
 8000fc2:	465f      	mov	r7, fp
 8000fc4:	4580      	cmp	r8, r0
 8000fc6:	d801      	bhi.n	8000fcc <__ssvfscanf_r+0xdac>
 8000fc8:	f7ff f98a 	bl	80002e0 <__ssvfscanf_r+0xc0>
 8000fcc:	7821      	ldrb	r1, [r4, #0]
 8000fce:	1c38      	adds	r0, r7, #0
 8000fd0:	1c32      	adds	r2, r6, #0
 8000fd2:	3c01      	subs	r4, #1
 8000fd4:	f001 fbb8 	bl	8002748 <_sungetc_r>
 8000fd8:	42ac      	cmp	r4, r5
 8000fda:	d1f7      	bne.n	8000fcc <__ssvfscanf_r+0xdac>
 8000fdc:	f7ff f980 	bl	80002e0 <__ssvfscanf_r+0xc0>
 8000fe0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8000fe2:	45a8      	cmp	r8, r5
 8000fe4:	d801      	bhi.n	8000fea <__ssvfscanf_r+0xdca>
 8000fe6:	f7ff f97b 	bl	80002e0 <__ssvfscanf_r+0xc0>
 8000fea:	466d      	mov	r5, sp
 8000fec:	4644      	mov	r4, r8
 8000fee:	3570      	adds	r5, #112	; 0x70
 8000ff0:	3c01      	subs	r4, #1
 8000ff2:	35ff      	adds	r5, #255	; 0xff
 8000ff4:	465f      	mov	r7, fp
 8000ff6:	7821      	ldrb	r1, [r4, #0]
 8000ff8:	1c38      	adds	r0, r7, #0
 8000ffa:	1c32      	adds	r2, r6, #0
 8000ffc:	3c01      	subs	r4, #1
 8000ffe:	f001 fba3 	bl	8002748 <_sungetc_r>
 8001002:	42ac      	cmp	r4, r5
 8001004:	d1f7      	bne.n	8000ff6 <__ssvfscanf_r+0xdd6>
 8001006:	f7ff f96b 	bl	80002e0 <__ssvfscanf_r+0xc0>
 800100a:	464d      	mov	r5, r9
 800100c:	9502      	str	r5, [sp, #8]
 800100e:	f7ff fa4a 	bl	80004a6 <__ssvfscanf_r+0x286>
 8001012:	46c0      	nop			; (mov r8, r8)
 8001014:	fffffc7f 	.word	0xfffffc7f
 8001018:	000002c3 	.word	0x000002c3
 800101c:	000002c2 	.word	0x000002c2
 8001020:	0800e844 	.word	0x0800e844
 8001024:	fffff87f 	.word	0xfffff87f
 8001028:	4728      	bx	r5
 800102a:	46c0      	nop			; (mov r8, r8)

0800102c <_write_r>:
 800102c:	b570      	push	{r4, r5, r6, lr}
 800102e:	4c09      	ldr	r4, [pc, #36]	; (8001054 <_write_r+0x28>)
 8001030:	1c06      	adds	r6, r0, #0
 8001032:	2500      	movs	r5, #0
 8001034:	1c08      	adds	r0, r1, #0
 8001036:	1c11      	adds	r1, r2, #0
 8001038:	1c1a      	adds	r2, r3, #0
 800103a:	6025      	str	r5, [r4, #0]
 800103c:	f003 fbf4 	bl	8004828 <_write>
 8001040:	1c43      	adds	r3, r0, #1
 8001042:	d002      	beq.n	800104a <_write_r+0x1e>
 8001044:	bc70      	pop	{r4, r5, r6}
 8001046:	bc02      	pop	{r1}
 8001048:	4708      	bx	r1
 800104a:	6823      	ldr	r3, [r4, #0]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d0f9      	beq.n	8001044 <_write_r+0x18>
 8001050:	6033      	str	r3, [r6, #0]
 8001052:	e7f7      	b.n	8001044 <_write_r+0x18>
 8001054:	20002098 	.word	0x20002098

08001058 <_close_r>:
 8001058:	b538      	push	{r3, r4, r5, lr}
 800105a:	4c08      	ldr	r4, [pc, #32]	; (800107c <_close_r+0x24>)
 800105c:	2300      	movs	r3, #0
 800105e:	1c05      	adds	r5, r0, #0
 8001060:	1c08      	adds	r0, r1, #0
 8001062:	6023      	str	r3, [r4, #0]
 8001064:	f003 fc90 	bl	8004988 <_close>
 8001068:	1c43      	adds	r3, r0, #1
 800106a:	d002      	beq.n	8001072 <_close_r+0x1a>
 800106c:	bc38      	pop	{r3, r4, r5}
 800106e:	bc02      	pop	{r1}
 8001070:	4708      	bx	r1
 8001072:	6823      	ldr	r3, [r4, #0]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d0f9      	beq.n	800106c <_close_r+0x14>
 8001078:	602b      	str	r3, [r5, #0]
 800107a:	e7f7      	b.n	800106c <_close_r+0x14>
 800107c:	20002098 	.word	0x20002098

08001080 <iswspace>:
 8001080:	1c03      	adds	r3, r0, #0
 8001082:	b500      	push	{lr}
 8001084:	2000      	movs	r0, #0
 8001086:	2bff      	cmp	r3, #255	; 0xff
 8001088:	d805      	bhi.n	8001096 <iswspace+0x16>
 800108a:	4a04      	ldr	r2, [pc, #16]	; (800109c <iswspace+0x1c>)
 800108c:	6812      	ldr	r2, [r2, #0]
 800108e:	18d3      	adds	r3, r2, r3
 8001090:	785b      	ldrb	r3, [r3, #1]
 8001092:	2008      	movs	r0, #8
 8001094:	4018      	ands	r0, r3
 8001096:	bc02      	pop	{r1}
 8001098:	4708      	bx	r1
 800109a:	46c0      	nop			; (mov r8, r8)
 800109c:	200000f8 	.word	0x200000f8

080010a0 <_setlocale_r>:
 80010a0:	b538      	push	{r3, r4, r5, lr}
 80010a2:	1e14      	subs	r4, r2, #0
 80010a4:	d005      	beq.n	80010b2 <_setlocale_r+0x12>
 80010a6:	1c20      	adds	r0, r4, #0
 80010a8:	490c      	ldr	r1, [pc, #48]	; (80010dc <_setlocale_r+0x3c>)
 80010aa:	f000 fa25 	bl	80014f8 <strcmp>
 80010ae:	2800      	cmp	r0, #0
 80010b0:	d104      	bne.n	80010bc <_setlocale_r+0x1c>
 80010b2:	4d0b      	ldr	r5, [pc, #44]	; (80010e0 <_setlocale_r+0x40>)
 80010b4:	1c28      	adds	r0, r5, #0
 80010b6:	bc38      	pop	{r3, r4, r5}
 80010b8:	bc02      	pop	{r1}
 80010ba:	4708      	bx	r1
 80010bc:	4d08      	ldr	r5, [pc, #32]	; (80010e0 <_setlocale_r+0x40>)
 80010be:	1c20      	adds	r0, r4, #0
 80010c0:	1c29      	adds	r1, r5, #0
 80010c2:	f000 fa19 	bl	80014f8 <strcmp>
 80010c6:	2800      	cmp	r0, #0
 80010c8:	d0f4      	beq.n	80010b4 <_setlocale_r+0x14>
 80010ca:	1c20      	adds	r0, r4, #0
 80010cc:	4905      	ldr	r1, [pc, #20]	; (80010e4 <_setlocale_r+0x44>)
 80010ce:	f000 fa13 	bl	80014f8 <strcmp>
 80010d2:	4243      	negs	r3, r0
 80010d4:	4158      	adcs	r0, r3
 80010d6:	4240      	negs	r0, r0
 80010d8:	4028      	ands	r0, r5
 80010da:	e7ec      	b.n	80010b6 <_setlocale_r+0x16>
 80010dc:	0800e854 	.word	0x0800e854
 80010e0:	0800e850 	.word	0x0800e850
 80010e4:	0800e180 	.word	0x0800e180

080010e8 <__locale_charset>:
 80010e8:	4800      	ldr	r0, [pc, #0]	; (80010ec <__locale_charset+0x4>)
 80010ea:	4770      	bx	lr
 80010ec:	20000530 	.word	0x20000530

080010f0 <__locale_mb_cur_max>:
 80010f0:	4b01      	ldr	r3, [pc, #4]	; (80010f8 <__locale_mb_cur_max+0x8>)
 80010f2:	6a18      	ldr	r0, [r3, #32]
 80010f4:	4770      	bx	lr
 80010f6:	46c0      	nop			; (mov r8, r8)
 80010f8:	20000530 	.word	0x20000530

080010fc <__locale_msgcharset>:
 80010fc:	4801      	ldr	r0, [pc, #4]	; (8001104 <__locale_msgcharset+0x8>)
 80010fe:	3024      	adds	r0, #36	; 0x24
 8001100:	4770      	bx	lr
 8001102:	46c0      	nop			; (mov r8, r8)
 8001104:	20000530 	.word	0x20000530

08001108 <__locale_cjk_lang>:
 8001108:	2000      	movs	r0, #0
 800110a:	4770      	bx	lr

0800110c <_localeconv_r>:
 800110c:	4801      	ldr	r0, [pc, #4]	; (8001114 <_localeconv_r+0x8>)
 800110e:	3044      	adds	r0, #68	; 0x44
 8001110:	4770      	bx	lr
 8001112:	46c0      	nop			; (mov r8, r8)
 8001114:	20000530 	.word	0x20000530

08001118 <setlocale>:
 8001118:	b508      	push	{r3, lr}
 800111a:	1c0a      	adds	r2, r1, #0
 800111c:	4904      	ldr	r1, [pc, #16]	; (8001130 <setlocale+0x18>)
 800111e:	1c03      	adds	r3, r0, #0
 8001120:	6808      	ldr	r0, [r1, #0]
 8001122:	1c19      	adds	r1, r3, #0
 8001124:	f7ff ffbc 	bl	80010a0 <_setlocale_r>
 8001128:	bc08      	pop	{r3}
 800112a:	bc02      	pop	{r1}
 800112c:	4708      	bx	r1
 800112e:	46c0      	nop			; (mov r8, r8)
 8001130:	20000100 	.word	0x20000100

08001134 <localeconv>:
 8001134:	4801      	ldr	r0, [pc, #4]	; (800113c <localeconv+0x8>)
 8001136:	3044      	adds	r0, #68	; 0x44
 8001138:	4770      	bx	lr
 800113a:	46c0      	nop			; (mov r8, r8)
 800113c:	20000530 	.word	0x20000530

08001140 <_lseek_r>:
 8001140:	b570      	push	{r4, r5, r6, lr}
 8001142:	4c09      	ldr	r4, [pc, #36]	; (8001168 <_lseek_r+0x28>)
 8001144:	1c06      	adds	r6, r0, #0
 8001146:	2500      	movs	r5, #0
 8001148:	1c08      	adds	r0, r1, #0
 800114a:	1c11      	adds	r1, r2, #0
 800114c:	1c1a      	adds	r2, r3, #0
 800114e:	6025      	str	r5, [r4, #0]
 8001150:	f003 fb4a 	bl	80047e8 <_lseek>
 8001154:	1c43      	adds	r3, r0, #1
 8001156:	d002      	beq.n	800115e <_lseek_r+0x1e>
 8001158:	bc70      	pop	{r4, r5, r6}
 800115a:	bc02      	pop	{r1}
 800115c:	4708      	bx	r1
 800115e:	6823      	ldr	r3, [r4, #0]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d0f9      	beq.n	8001158 <_lseek_r+0x18>
 8001164:	6033      	str	r3, [r6, #0]
 8001166:	e7f7      	b.n	8001158 <_lseek_r+0x18>
 8001168:	20002098 	.word	0x20002098

0800116c <_mbrtowc_r>:
 800116c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800116e:	4647      	mov	r7, r8
 8001170:	b480      	push	{r7}
 8001172:	1c1e      	adds	r6, r3, #0
 8001174:	b082      	sub	sp, #8
 8001176:	1c05      	adds	r5, r0, #0
 8001178:	1c0f      	adds	r7, r1, #0
 800117a:	1c14      	adds	r4, r2, #0
 800117c:	4b14      	ldr	r3, [pc, #80]	; (80011d0 <_mbrtowc_r+0x64>)
 800117e:	2a00      	cmp	r2, #0
 8001180:	d019      	beq.n	80011b6 <_mbrtowc_r+0x4a>
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	4690      	mov	r8, r2
 8001186:	f7ff ffaf 	bl	80010e8 <__locale_charset>
 800118a:	9b08      	ldr	r3, [sp, #32]
 800118c:	9000      	str	r0, [sp, #0]
 800118e:	9301      	str	r3, [sp, #4]
 8001190:	1c28      	adds	r0, r5, #0
 8001192:	1c39      	adds	r1, r7, #0
 8001194:	1c22      	adds	r2, r4, #0
 8001196:	1c33      	adds	r3, r6, #0
 8001198:	f000 f85f 	bl	800125a <mbrtowc+0x82>
 800119c:	1c42      	adds	r2, r0, #1
 800119e:	d104      	bne.n	80011aa <_mbrtowc_r+0x3e>
 80011a0:	9a08      	ldr	r2, [sp, #32]
 80011a2:	2300      	movs	r3, #0
 80011a4:	6013      	str	r3, [r2, #0]
 80011a6:	238a      	movs	r3, #138	; 0x8a
 80011a8:	602b      	str	r3, [r5, #0]
 80011aa:	b002      	add	sp, #8
 80011ac:	bc04      	pop	{r2}
 80011ae:	4690      	mov	r8, r2
 80011b0:	bcf0      	pop	{r4, r5, r6, r7}
 80011b2:	bc02      	pop	{r1}
 80011b4:	4708      	bx	r1
 80011b6:	681c      	ldr	r4, [r3, #0]
 80011b8:	f7ff ff96 	bl	80010e8 <__locale_charset>
 80011bc:	9a08      	ldr	r2, [sp, #32]
 80011be:	9000      	str	r0, [sp, #0]
 80011c0:	9201      	str	r2, [sp, #4]
 80011c2:	1c28      	adds	r0, r5, #0
 80011c4:	2100      	movs	r1, #0
 80011c6:	4a03      	ldr	r2, [pc, #12]	; (80011d4 <_mbrtowc_r+0x68>)
 80011c8:	2301      	movs	r3, #1
 80011ca:	f000 f845 	bl	8001258 <mbrtowc+0x80>
 80011ce:	e7e5      	b.n	800119c <_mbrtowc_r+0x30>
 80011d0:	200005ac 	.word	0x200005ac
 80011d4:	0800e180 	.word	0x0800e180

080011d8 <mbrtowc>:
 80011d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011da:	4657      	mov	r7, sl
 80011dc:	464e      	mov	r6, r9
 80011de:	4645      	mov	r5, r8
 80011e0:	b4e0      	push	{r5, r6, r7}
 80011e2:	4680      	mov	r8, r0
 80011e4:	1c1e      	adds	r6, r3, #0
 80011e6:	b082      	sub	sp, #8
 80011e8:	1c0c      	adds	r4, r1, #0
 80011ea:	1c17      	adds	r7, r2, #0
 80011ec:	4b17      	ldr	r3, [pc, #92]	; (800124c <mbrtowc+0x74>)
 80011ee:	2900      	cmp	r1, #0
 80011f0:	d01d      	beq.n	800122e <mbrtowc+0x56>
 80011f2:	4d17      	ldr	r5, [pc, #92]	; (8001250 <mbrtowc+0x78>)
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	682b      	ldr	r3, [r5, #0]
 80011f8:	4691      	mov	r9, r2
 80011fa:	469a      	mov	sl, r3
 80011fc:	f7ff ff74 	bl	80010e8 <__locale_charset>
 8001200:	9601      	str	r6, [sp, #4]
 8001202:	9000      	str	r0, [sp, #0]
 8001204:	4641      	mov	r1, r8
 8001206:	4650      	mov	r0, sl
 8001208:	1c22      	adds	r2, r4, #0
 800120a:	1c3b      	adds	r3, r7, #0
 800120c:	f000 f826 	bl	800125c <mbrtowc+0x84>
 8001210:	1c42      	adds	r2, r0, #1
 8001212:	d104      	bne.n	800121e <mbrtowc+0x46>
 8001214:	2300      	movs	r3, #0
 8001216:	6033      	str	r3, [r6, #0]
 8001218:	682b      	ldr	r3, [r5, #0]
 800121a:	228a      	movs	r2, #138	; 0x8a
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	b002      	add	sp, #8
 8001220:	bc1c      	pop	{r2, r3, r4}
 8001222:	4690      	mov	r8, r2
 8001224:	4699      	mov	r9, r3
 8001226:	46a2      	mov	sl, r4
 8001228:	bcf0      	pop	{r4, r5, r6, r7}
 800122a:	bc02      	pop	{r1}
 800122c:	4708      	bx	r1
 800122e:	4d08      	ldr	r5, [pc, #32]	; (8001250 <mbrtowc+0x78>)
 8001230:	681c      	ldr	r4, [r3, #0]
 8001232:	682f      	ldr	r7, [r5, #0]
 8001234:	f7ff ff58 	bl	80010e8 <__locale_charset>
 8001238:	9601      	str	r6, [sp, #4]
 800123a:	9000      	str	r0, [sp, #0]
 800123c:	2100      	movs	r1, #0
 800123e:	1c38      	adds	r0, r7, #0
 8001240:	4a04      	ldr	r2, [pc, #16]	; (8001254 <mbrtowc+0x7c>)
 8001242:	2301      	movs	r3, #1
 8001244:	f000 f808 	bl	8001258 <mbrtowc+0x80>
 8001248:	e7e2      	b.n	8001210 <mbrtowc+0x38>
 800124a:	46c0      	nop			; (mov r8, r8)
 800124c:	200005ac 	.word	0x200005ac
 8001250:	20000100 	.word	0x20000100
 8001254:	0800e180 	.word	0x0800e180
 8001258:	4720      	bx	r4
 800125a:	4740      	bx	r8
 800125c:	4748      	bx	r9
 800125e:	46c0      	nop			; (mov r8, r8)

08001260 <__ascii_mbtowc>:
 8001260:	b500      	push	{lr}
 8001262:	b083      	sub	sp, #12
 8001264:	2900      	cmp	r1, #0
 8001266:	d00b      	beq.n	8001280 <__ascii_mbtowc+0x20>
 8001268:	2a00      	cmp	r2, #0
 800126a:	d00c      	beq.n	8001286 <__ascii_mbtowc+0x26>
 800126c:	2b00      	cmp	r3, #0
 800126e:	d00c      	beq.n	800128a <__ascii_mbtowc+0x2a>
 8001270:	7813      	ldrb	r3, [r2, #0]
 8001272:	600b      	str	r3, [r1, #0]
 8001274:	7810      	ldrb	r0, [r2, #0]
 8001276:	1e43      	subs	r3, r0, #1
 8001278:	4198      	sbcs	r0, r3
 800127a:	b003      	add	sp, #12
 800127c:	bc02      	pop	{r1}
 800127e:	4708      	bx	r1
 8001280:	a901      	add	r1, sp, #4
 8001282:	2a00      	cmp	r2, #0
 8001284:	d1f2      	bne.n	800126c <__ascii_mbtowc+0xc>
 8001286:	2000      	movs	r0, #0
 8001288:	e7f7      	b.n	800127a <__ascii_mbtowc+0x1a>
 800128a:	2002      	movs	r0, #2
 800128c:	4240      	negs	r0, r0
 800128e:	e7f4      	b.n	800127a <__ascii_mbtowc+0x1a>

08001290 <_mbtowc_r>:
 8001290:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001292:	4647      	mov	r7, r8
 8001294:	b480      	push	{r7}
 8001296:	1c1d      	adds	r5, r3, #0
 8001298:	4b0b      	ldr	r3, [pc, #44]	; (80012c8 <_mbtowc_r+0x38>)
 800129a:	b082      	sub	sp, #8
 800129c:	681c      	ldr	r4, [r3, #0]
 800129e:	4680      	mov	r8, r0
 80012a0:	1c0f      	adds	r7, r1, #0
 80012a2:	1c16      	adds	r6, r2, #0
 80012a4:	f7ff ff20 	bl	80010e8 <__locale_charset>
 80012a8:	9b08      	ldr	r3, [sp, #32]
 80012aa:	9000      	str	r0, [sp, #0]
 80012ac:	9301      	str	r3, [sp, #4]
 80012ae:	4640      	mov	r0, r8
 80012b0:	1c39      	adds	r1, r7, #0
 80012b2:	1c32      	adds	r2, r6, #0
 80012b4:	1c2b      	adds	r3, r5, #0
 80012b6:	f000 f809 	bl	80012cc <_mbtowc_r+0x3c>
 80012ba:	b002      	add	sp, #8
 80012bc:	bc04      	pop	{r2}
 80012be:	4690      	mov	r8, r2
 80012c0:	bcf0      	pop	{r4, r5, r6, r7}
 80012c2:	bc02      	pop	{r1}
 80012c4:	4708      	bx	r1
 80012c6:	46c0      	nop			; (mov r8, r8)
 80012c8:	200005ac 	.word	0x200005ac
 80012cc:	4720      	bx	r4
 80012ce:	46c0      	nop			; (mov r8, r8)

080012d0 <memset>:
 80012d0:	b570      	push	{r4, r5, r6, lr}
 80012d2:	0783      	lsls	r3, r0, #30
 80012d4:	d042      	beq.n	800135c <memset+0x8c>
 80012d6:	1e54      	subs	r4, r2, #1
 80012d8:	2a00      	cmp	r2, #0
 80012da:	d03c      	beq.n	8001356 <memset+0x86>
 80012dc:	060e      	lsls	r6, r1, #24
 80012de:	0e36      	lsrs	r6, r6, #24
 80012e0:	1c03      	adds	r3, r0, #0
 80012e2:	2503      	movs	r5, #3
 80012e4:	e003      	b.n	80012ee <memset+0x1e>
 80012e6:	1e62      	subs	r2, r4, #1
 80012e8:	2c00      	cmp	r4, #0
 80012ea:	d034      	beq.n	8001356 <memset+0x86>
 80012ec:	1c14      	adds	r4, r2, #0
 80012ee:	701e      	strb	r6, [r3, #0]
 80012f0:	3301      	adds	r3, #1
 80012f2:	422b      	tst	r3, r5
 80012f4:	d1f7      	bne.n	80012e6 <memset+0x16>
 80012f6:	2c03      	cmp	r4, #3
 80012f8:	d924      	bls.n	8001344 <memset+0x74>
 80012fa:	22ff      	movs	r2, #255	; 0xff
 80012fc:	400a      	ands	r2, r1
 80012fe:	0215      	lsls	r5, r2, #8
 8001300:	432a      	orrs	r2, r5
 8001302:	0415      	lsls	r5, r2, #16
 8001304:	432a      	orrs	r2, r5
 8001306:	2c0f      	cmp	r4, #15
 8001308:	d92b      	bls.n	8001362 <memset+0x92>
 800130a:	1c26      	adds	r6, r4, #0
 800130c:	3e10      	subs	r6, #16
 800130e:	0936      	lsrs	r6, r6, #4
 8001310:	3601      	adds	r6, #1
 8001312:	0136      	lsls	r6, r6, #4
 8001314:	199e      	adds	r6, r3, r6
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
 800131e:	3310      	adds	r3, #16
 8001320:	429e      	cmp	r6, r3
 8001322:	d1f8      	bne.n	8001316 <memset+0x46>
 8001324:	230f      	movs	r3, #15
 8001326:	401c      	ands	r4, r3
 8001328:	1c35      	adds	r5, r6, #0
 800132a:	1c33      	adds	r3, r6, #0
 800132c:	2c03      	cmp	r4, #3
 800132e:	d909      	bls.n	8001344 <memset+0x74>
 8001330:	1f23      	subs	r3, r4, #4
 8001332:	089b      	lsrs	r3, r3, #2
 8001334:	3301      	adds	r3, #1
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	18eb      	adds	r3, r5, r3
 800133a:	c504      	stmia	r5!, {r2}
 800133c:	429d      	cmp	r5, r3
 800133e:	d1fc      	bne.n	800133a <memset+0x6a>
 8001340:	2203      	movs	r2, #3
 8001342:	4014      	ands	r4, r2
 8001344:	2c00      	cmp	r4, #0
 8001346:	d006      	beq.n	8001356 <memset+0x86>
 8001348:	060a      	lsls	r2, r1, #24
 800134a:	0e12      	lsrs	r2, r2, #24
 800134c:	191c      	adds	r4, r3, r4
 800134e:	701a      	strb	r2, [r3, #0]
 8001350:	3301      	adds	r3, #1
 8001352:	42a3      	cmp	r3, r4
 8001354:	d1fb      	bne.n	800134e <memset+0x7e>
 8001356:	bc70      	pop	{r4, r5, r6}
 8001358:	bc02      	pop	{r1}
 800135a:	4708      	bx	r1
 800135c:	1c03      	adds	r3, r0, #0
 800135e:	1c14      	adds	r4, r2, #0
 8001360:	e7c9      	b.n	80012f6 <memset+0x26>
 8001362:	1c1d      	adds	r5, r3, #0
 8001364:	e7e4      	b.n	8001330 <memset+0x60>
 8001366:	46c0      	nop			; (mov r8, r8)

08001368 <_read_r>:
 8001368:	b570      	push	{r4, r5, r6, lr}
 800136a:	4c09      	ldr	r4, [pc, #36]	; (8001390 <_read_r+0x28>)
 800136c:	1c06      	adds	r6, r0, #0
 800136e:	2500      	movs	r5, #0
 8001370:	1c08      	adds	r0, r1, #0
 8001372:	1c11      	adds	r1, r2, #0
 8001374:	1c1a      	adds	r2, r3, #0
 8001376:	6025      	str	r5, [r4, #0]
 8001378:	f003 f9aa 	bl	80046d0 <_read>
 800137c:	1c43      	adds	r3, r0, #1
 800137e:	d002      	beq.n	8001386 <_read_r+0x1e>
 8001380:	bc70      	pop	{r4, r5, r6}
 8001382:	bc02      	pop	{r1}
 8001384:	4708      	bx	r1
 8001386:	6823      	ldr	r3, [r4, #0]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d0f9      	beq.n	8001380 <_read_r+0x18>
 800138c:	6033      	str	r3, [r6, #0]
 800138e:	e7f7      	b.n	8001380 <_read_r+0x18>
 8001390:	20002098 	.word	0x20002098

08001394 <__fpclassifyd>:
 8001394:	1c0b      	adds	r3, r1, #0
 8001396:	1c01      	adds	r1, r0, #0
 8001398:	b510      	push	{r4, lr}
 800139a:	4319      	orrs	r1, r3
 800139c:	2202      	movs	r2, #2
 800139e:	2900      	cmp	r1, #0
 80013a0:	d103      	bne.n	80013aa <__fpclassifyd+0x16>
 80013a2:	1c10      	adds	r0, r2, #0
 80013a4:	bc10      	pop	{r4}
 80013a6:	bc02      	pop	{r1}
 80013a8:	4708      	bx	r1
 80013aa:	4241      	negs	r1, r0
 80013ac:	4141      	adcs	r1, r0
 80013ae:	2900      	cmp	r1, #0
 80013b0:	d004      	beq.n	80013bc <__fpclassifyd+0x28>
 80013b2:	2480      	movs	r4, #128	; 0x80
 80013b4:	0624      	lsls	r4, r4, #24
 80013b6:	1918      	adds	r0, r3, r4
 80013b8:	2800      	cmp	r0, #0
 80013ba:	d0f2      	beq.n	80013a2 <__fpclassifyd+0xe>
 80013bc:	4808      	ldr	r0, [pc, #32]	; (80013e0 <__fpclassifyd+0x4c>)
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	085b      	lsrs	r3, r3, #1
 80013c2:	181c      	adds	r4, r3, r0
 80013c4:	4807      	ldr	r0, [pc, #28]	; (80013e4 <__fpclassifyd+0x50>)
 80013c6:	2204      	movs	r2, #4
 80013c8:	4284      	cmp	r4, r0
 80013ca:	d9ea      	bls.n	80013a2 <__fpclassifyd+0xe>
 80013cc:	4806      	ldr	r0, [pc, #24]	; (80013e8 <__fpclassifyd+0x54>)
 80013ce:	2203      	movs	r2, #3
 80013d0:	4283      	cmp	r3, r0
 80013d2:	d9e6      	bls.n	80013a2 <__fpclassifyd+0xe>
 80013d4:	4c05      	ldr	r4, [pc, #20]	; (80013ec <__fpclassifyd+0x58>)
 80013d6:	191a      	adds	r2, r3, r4
 80013d8:	4253      	negs	r3, r2
 80013da:	415a      	adcs	r2, r3
 80013dc:	400a      	ands	r2, r1
 80013de:	e7e0      	b.n	80013a2 <__fpclassifyd+0xe>
 80013e0:	fff00000 	.word	0xfff00000
 80013e4:	7fdfffff 	.word	0x7fdfffff
 80013e8:	000fffff 	.word	0x000fffff
 80013ec:	80100000 	.word	0x80100000

080013f0 <__sccl>:
 80013f0:	b570      	push	{r4, r5, r6, lr}
 80013f2:	780e      	ldrb	r6, [r1, #0]
 80013f4:	1c02      	adds	r2, r0, #0
 80013f6:	2e5e      	cmp	r6, #94	; 0x5e
 80013f8:	d02e      	beq.n	8001458 <__sccl+0x68>
 80013fa:	1c48      	adds	r0, r1, #1
 80013fc:	2500      	movs	r5, #0
 80013fe:	2100      	movs	r1, #0
 8001400:	2480      	movs	r4, #128	; 0x80
 8001402:	2300      	movs	r3, #0
 8001404:	0064      	lsls	r4, r4, #1
 8001406:	54d5      	strb	r5, [r2, r3]
 8001408:	3301      	adds	r3, #1
 800140a:	42a3      	cmp	r3, r4
 800140c:	d1fb      	bne.n	8001406 <__sccl+0x16>
 800140e:	2e00      	cmp	r6, #0
 8001410:	d010      	beq.n	8001434 <__sccl+0x44>
 8001412:	2301      	movs	r3, #1
 8001414:	4059      	eors	r1, r3
 8001416:	5591      	strb	r1, [r2, r6]
 8001418:	7803      	ldrb	r3, [r0, #0]
 800141a:	1c44      	adds	r4, r0, #1
 800141c:	2b2d      	cmp	r3, #45	; 0x2d
 800141e:	d00d      	beq.n	800143c <__sccl+0x4c>
 8001420:	2b5d      	cmp	r3, #93	; 0x5d
 8001422:	d009      	beq.n	8001438 <__sccl+0x48>
 8001424:	2b00      	cmp	r3, #0
 8001426:	d102      	bne.n	800142e <__sccl+0x3e>
 8001428:	bc70      	pop	{r4, r5, r6}
 800142a:	bc02      	pop	{r1}
 800142c:	4708      	bx	r1
 800142e:	1c1e      	adds	r6, r3, #0
 8001430:	1c20      	adds	r0, r4, #0
 8001432:	e7f0      	b.n	8001416 <__sccl+0x26>
 8001434:	3801      	subs	r0, #1
 8001436:	e7f7      	b.n	8001428 <__sccl+0x38>
 8001438:	1c20      	adds	r0, r4, #0
 800143a:	e7f5      	b.n	8001428 <__sccl+0x38>
 800143c:	7843      	ldrb	r3, [r0, #1]
 800143e:	2501      	movs	r5, #1
 8001440:	42b3      	cmp	r3, r6
 8001442:	da0e      	bge.n	8001462 <__sccl+0x72>
 8001444:	062d      	lsls	r5, r5, #24
 8001446:	d10e      	bne.n	8001466 <__sccl+0x76>
 8001448:	2b5d      	cmp	r3, #93	; 0x5d
 800144a:	d00c      	beq.n	8001466 <__sccl+0x76>
 800144c:	3002      	adds	r0, #2
 800144e:	3601      	adds	r6, #1
 8001450:	5591      	strb	r1, [r2, r6]
 8001452:	42b3      	cmp	r3, r6
 8001454:	dcfb      	bgt.n	800144e <__sccl+0x5e>
 8001456:	e7df      	b.n	8001418 <__sccl+0x28>
 8001458:	784e      	ldrb	r6, [r1, #1]
 800145a:	1c88      	adds	r0, r1, #2
 800145c:	2501      	movs	r5, #1
 800145e:	2101      	movs	r1, #1
 8001460:	e7ce      	b.n	8001400 <__sccl+0x10>
 8001462:	2500      	movs	r5, #0
 8001464:	e7ee      	b.n	8001444 <__sccl+0x54>
 8001466:	262d      	movs	r6, #45	; 0x2d
 8001468:	1c20      	adds	r0, r4, #0
 800146a:	e7d4      	b.n	8001416 <__sccl+0x26>

0800146c <nanf>:
 800146c:	4800      	ldr	r0, [pc, #0]	; (8001470 <nanf+0x4>)
 800146e:	4770      	bx	lr
 8001470:	7fc00000 	.word	0x7fc00000

08001474 <_sprintf_r>:
 8001474:	b40c      	push	{r2, r3}
 8001476:	b510      	push	{r4, lr}
 8001478:	b09c      	sub	sp, #112	; 0x70
 800147a:	9102      	str	r1, [sp, #8]
 800147c:	9106      	str	r1, [sp, #24]
 800147e:	490c      	ldr	r1, [pc, #48]	; (80014b0 <_sprintf_r+0x3c>)
 8001480:	ab1e      	add	r3, sp, #120	; 0x78
 8001482:	9104      	str	r1, [sp, #16]
 8001484:	9107      	str	r1, [sp, #28]
 8001486:	2482      	movs	r4, #130	; 0x82
 8001488:	2101      	movs	r1, #1
 800148a:	cb04      	ldmia	r3!, {r2}
 800148c:	00a4      	lsls	r4, r4, #2
 800148e:	aa02      	add	r2, sp, #8
 8001490:	4249      	negs	r1, r1
 8001492:	8194      	strh	r4, [r2, #12]
 8001494:	81d1      	strh	r1, [r2, #14]
 8001496:	1c11      	adds	r1, r2, #0
 8001498:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800149a:	9301      	str	r3, [sp, #4]
 800149c:	f001 feb8 	bl	8003210 <_svfprintf_r>
 80014a0:	9a02      	ldr	r2, [sp, #8]
 80014a2:	2300      	movs	r3, #0
 80014a4:	7013      	strb	r3, [r2, #0]
 80014a6:	b01c      	add	sp, #112	; 0x70
 80014a8:	bc10      	pop	{r4}
 80014aa:	bc08      	pop	{r3}
 80014ac:	b002      	add	sp, #8
 80014ae:	4718      	bx	r3
 80014b0:	7fffffff 	.word	0x7fffffff

080014b4 <sprintf>:
 80014b4:	b40e      	push	{r1, r2, r3}
 80014b6:	b500      	push	{lr}
 80014b8:	b09c      	sub	sp, #112	; 0x70
 80014ba:	ab1d      	add	r3, sp, #116	; 0x74
 80014bc:	cb04      	ldmia	r3!, {r2}
 80014be:	2282      	movs	r2, #130	; 0x82
 80014c0:	a902      	add	r1, sp, #8
 80014c2:	0092      	lsls	r2, r2, #2
 80014c4:	818a      	strh	r2, [r1, #12]
 80014c6:	4a0a      	ldr	r2, [pc, #40]	; (80014f0 <sprintf+0x3c>)
 80014c8:	608a      	str	r2, [r1, #8]
 80014ca:	614a      	str	r2, [r1, #20]
 80014cc:	2201      	movs	r2, #1
 80014ce:	4252      	negs	r2, r2
 80014d0:	81ca      	strh	r2, [r1, #14]
 80014d2:	4a08      	ldr	r2, [pc, #32]	; (80014f4 <sprintf+0x40>)
 80014d4:	9002      	str	r0, [sp, #8]
 80014d6:	6108      	str	r0, [r1, #16]
 80014d8:	6810      	ldr	r0, [r2, #0]
 80014da:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80014dc:	9301      	str	r3, [sp, #4]
 80014de:	f001 fe97 	bl	8003210 <_svfprintf_r>
 80014e2:	9a02      	ldr	r2, [sp, #8]
 80014e4:	2300      	movs	r3, #0
 80014e6:	7013      	strb	r3, [r2, #0]
 80014e8:	b01c      	add	sp, #112	; 0x70
 80014ea:	bc08      	pop	{r3}
 80014ec:	b003      	add	sp, #12
 80014ee:	4718      	bx	r3
 80014f0:	7fffffff 	.word	0x7fffffff
 80014f4:	20000100 	.word	0x20000100

080014f8 <strcmp>:
 80014f8:	7802      	ldrb	r2, [r0, #0]
 80014fa:	780b      	ldrb	r3, [r1, #0]
 80014fc:	3001      	adds	r0, #1
 80014fe:	3101      	adds	r1, #1
 8001500:	2a00      	cmp	r2, #0
 8001502:	d001      	beq.n	8001508 <strcmp+0x10>
 8001504:	429a      	cmp	r2, r3
 8001506:	d0f7      	beq.n	80014f8 <strcmp>
 8001508:	1ad0      	subs	r0, r2, r3
 800150a:	4770      	bx	lr
 800150c:	0000      	movs	r0, r0
	...

08001510 <_strtod_r>:
 8001510:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001512:	465f      	mov	r7, fp
 8001514:	4656      	mov	r6, sl
 8001516:	464d      	mov	r5, r9
 8001518:	4644      	mov	r4, r8
 800151a:	b4f0      	push	{r4, r5, r6, r7}
 800151c:	4682      	mov	sl, r0
 800151e:	1c0f      	adds	r7, r1, #0
 8001520:	49c4      	ldr	r1, [pc, #784]	; (8001834 <_strtod_r+0x324>)
 8001522:	48c3      	ldr	r0, [pc, #780]	; (8001830 <_strtod_r+0x320>)
 8001524:	b09b      	sub	sp, #108	; 0x6c
 8001526:	9006      	str	r0, [sp, #24]
 8001528:	9107      	str	r1, [sp, #28]
 800152a:	9715      	str	r7, [sp, #84]	; 0x54
 800152c:	49c2      	ldr	r1, [pc, #776]	; (8001838 <_strtod_r+0x328>)
 800152e:	920d      	str	r2, [sp, #52]	; 0x34
 8001530:	1c3a      	adds	r2, r7, #0
 8001532:	7813      	ldrb	r3, [r2, #0]
 8001534:	2b2d      	cmp	r3, #45	; 0x2d
 8001536:	d800      	bhi.n	800153a <_strtod_r+0x2a>
 8001538:	e07f      	b.n	800163a <_strtod_r+0x12a>
 800153a:	2400      	movs	r4, #0
 800153c:	940f      	str	r4, [sp, #60]	; 0x3c
 800153e:	1c16      	adds	r6, r2, #0
 8001540:	2400      	movs	r4, #0
 8001542:	9404      	str	r4, [sp, #16]
 8001544:	2b30      	cmp	r3, #48	; 0x30
 8001546:	d100      	bne.n	800154a <_strtod_r+0x3a>
 8001548:	e10b      	b.n	8001762 <_strtod_r+0x252>
 800154a:	1c1d      	adds	r5, r3, #0
 800154c:	2b2f      	cmp	r3, #47	; 0x2f
 800154e:	dc01      	bgt.n	8001554 <_strtod_r+0x44>
 8001550:	f000 fe0f 	bl	8002172 <_strtod_r+0xc62>
 8001554:	2b39      	cmp	r3, #57	; 0x39
 8001556:	dd01      	ble.n	800155c <_strtod_r+0x4c>
 8001558:	f000 fe12 	bl	8002180 <_strtod_r+0xc70>
 800155c:	2000      	movs	r0, #0
 800155e:	1c72      	adds	r2, r6, #1
 8001560:	46b4      	mov	ip, r6
 8001562:	2400      	movs	r4, #0
 8001564:	1c06      	adds	r6, r0, #0
 8001566:	e00f      	b.n	8001588 <_strtod_r+0x78>
 8001568:	0081      	lsls	r1, r0, #2
 800156a:	1808      	adds	r0, r1, r0
 800156c:	0040      	lsls	r0, r0, #1
 800156e:	18c3      	adds	r3, r0, r3
 8001570:	1c18      	adds	r0, r3, #0
 8001572:	3830      	subs	r0, #48	; 0x30
 8001574:	9215      	str	r2, [sp, #84]	; 0x54
 8001576:	7813      	ldrb	r3, [r2, #0]
 8001578:	3401      	adds	r4, #1
 800157a:	1c11      	adds	r1, r2, #0
 800157c:	1c1d      	adds	r5, r3, #0
 800157e:	2b2f      	cmp	r3, #47	; 0x2f
 8001580:	dd13      	ble.n	80015aa <_strtod_r+0x9a>
 8001582:	3201      	adds	r2, #1
 8001584:	2b39      	cmp	r3, #57	; 0x39
 8001586:	dc10      	bgt.n	80015aa <_strtod_r+0x9a>
 8001588:	2c0f      	cmp	r4, #15
 800158a:	dcf3      	bgt.n	8001574 <_strtod_r+0x64>
 800158c:	2c08      	cmp	r4, #8
 800158e:	ddeb      	ble.n	8001568 <_strtod_r+0x58>
 8001590:	00b1      	lsls	r1, r6, #2
 8001592:	1989      	adds	r1, r1, r6
 8001594:	0049      	lsls	r1, r1, #1
 8001596:	9215      	str	r2, [sp, #84]	; 0x54
 8001598:	18cb      	adds	r3, r1, r3
 800159a:	1c1e      	adds	r6, r3, #0
 800159c:	7813      	ldrb	r3, [r2, #0]
 800159e:	3e30      	subs	r6, #48	; 0x30
 80015a0:	3401      	adds	r4, #1
 80015a2:	1c11      	adds	r1, r2, #0
 80015a4:	1c1d      	adds	r5, r3, #0
 80015a6:	2b2f      	cmp	r3, #47	; 0x2f
 80015a8:	dceb      	bgt.n	8001582 <_strtod_r+0x72>
 80015aa:	46b0      	mov	r8, r6
 80015ac:	4683      	mov	fp, r0
 80015ae:	4689      	mov	r9, r1
 80015b0:	4666      	mov	r6, ip
 80015b2:	4650      	mov	r0, sl
 80015b4:	f7ff fdaa 	bl	800110c <_localeconv_r>
 80015b8:	6800      	ldr	r0, [r0, #0]
 80015ba:	9008      	str	r0, [sp, #32]
 80015bc:	4650      	mov	r0, sl
 80015be:	f7ff fda5 	bl	800110c <_localeconv_r>
 80015c2:	6800      	ldr	r0, [r0, #0]
 80015c4:	f7fe fdc6 	bl	8000154 <strlen>
 80015c8:	9908      	ldr	r1, [sp, #32]
 80015ca:	1c02      	adds	r2, r0, #0
 80015cc:	4648      	mov	r0, r9
 80015ce:	f7fe fdc9 	bl	8000164 <strncmp>
 80015d2:	2800      	cmp	r0, #0
 80015d4:	d100      	bne.n	80015d8 <_strtod_r+0xc8>
 80015d6:	e139      	b.n	800184c <_strtod_r+0x33c>
 80015d8:	2300      	movs	r3, #0
 80015da:	9608      	str	r6, [sp, #32]
 80015dc:	2000      	movs	r0, #0
 80015de:	1c26      	adds	r6, r4, #0
 80015e0:	4699      	mov	r9, r3
 80015e2:	2220      	movs	r2, #32
 80015e4:	1c29      	adds	r1, r5, #0
 80015e6:	4391      	bics	r1, r2
 80015e8:	2945      	cmp	r1, #69	; 0x45
 80015ea:	d05b      	beq.n	80016a4 <_strtod_r+0x194>
 80015ec:	2100      	movs	r1, #0
 80015ee:	2e00      	cmp	r6, #0
 80015f0:	d000      	beq.n	80015f4 <_strtod_r+0xe4>
 80015f2:	e0ca      	b.n	800178a <_strtod_r+0x27a>
 80015f4:	9c04      	ldr	r4, [sp, #16]
 80015f6:	4323      	orrs	r3, r4
 80015f8:	d000      	beq.n	80015fc <_strtod_r+0xec>
 80015fa:	e114      	b.n	8001826 <_strtod_r+0x316>
 80015fc:	2800      	cmp	r0, #0
 80015fe:	d117      	bne.n	8001630 <_strtod_r+0x120>
 8001600:	2d4e      	cmp	r5, #78	; 0x4e
 8001602:	d100      	bne.n	8001606 <_strtod_r+0xf6>
 8001604:	e156      	b.n	80018b4 <_strtod_r+0x3a4>
 8001606:	dd00      	ble.n	800160a <_strtod_r+0xfa>
 8001608:	e14e      	b.n	80018a8 <_strtod_r+0x398>
 800160a:	2d49      	cmp	r5, #73	; 0x49
 800160c:	d110      	bne.n	8001630 <_strtod_r+0x120>
 800160e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8001610:	498a      	ldr	r1, [pc, #552]	; (800183c <_strtod_r+0x32c>)
 8001612:	7808      	ldrb	r0, [r1, #0]
 8001614:	3101      	adds	r1, #1
 8001616:	2800      	cmp	r0, #0
 8001618:	d101      	bne.n	800161e <_strtod_r+0x10e>
 800161a:	f000 fe78 	bl	800230e <_strtod_r+0xdfe>
 800161e:	3301      	adds	r3, #1
 8001620:	781a      	ldrb	r2, [r3, #0]
 8001622:	2a40      	cmp	r2, #64	; 0x40
 8001624:	dd02      	ble.n	800162c <_strtod_r+0x11c>
 8001626:	2a5a      	cmp	r2, #90	; 0x5a
 8001628:	dc00      	bgt.n	800162c <_strtod_r+0x11c>
 800162a:	3220      	adds	r2, #32
 800162c:	4282      	cmp	r2, r0
 800162e:	d0f0      	beq.n	8001612 <_strtod_r+0x102>
 8001630:	9806      	ldr	r0, [sp, #24]
 8001632:	9c07      	ldr	r4, [sp, #28]
 8001634:	4681      	mov	r9, r0
 8001636:	9404      	str	r4, [sp, #16]
 8001638:	e00e      	b.n	8001658 <_strtod_r+0x148>
 800163a:	0098      	lsls	r0, r3, #2
 800163c:	5808      	ldr	r0, [r1, r0]
 800163e:	4687      	mov	pc, r0
 8001640:	2401      	movs	r4, #1
 8001642:	940f      	str	r4, [sp, #60]	; 0x3c
 8001644:	1c56      	adds	r6, r2, #1
 8001646:	9615      	str	r6, [sp, #84]	; 0x54
 8001648:	7853      	ldrb	r3, [r2, #1]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d000      	beq.n	8001650 <_strtod_r+0x140>
 800164e:	e777      	b.n	8001540 <_strtod_r+0x30>
 8001650:	2400      	movs	r4, #0
 8001652:	2000      	movs	r0, #0
 8001654:	9404      	str	r4, [sp, #16]
 8001656:	4681      	mov	r9, r0
 8001658:	2400      	movs	r4, #0
 800165a:	9715      	str	r7, [sp, #84]	; 0x54
 800165c:	940f      	str	r4, [sp, #60]	; 0x3c
 800165e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8001660:	2c00      	cmp	r4, #0
 8001662:	d001      	beq.n	8001668 <_strtod_r+0x158>
 8001664:	9815      	ldr	r0, [sp, #84]	; 0x54
 8001666:	6020      	str	r0, [r4, #0]
 8001668:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800166a:	2c00      	cmp	r4, #0
 800166c:	d004      	beq.n	8001678 <_strtod_r+0x168>
 800166e:	9c04      	ldr	r4, [sp, #16]
 8001670:	2080      	movs	r0, #128	; 0x80
 8001672:	0600      	lsls	r0, r0, #24
 8001674:	1824      	adds	r4, r4, r0
 8001676:	9404      	str	r4, [sp, #16]
 8001678:	9904      	ldr	r1, [sp, #16]
 800167a:	4648      	mov	r0, r9
 800167c:	b01b      	add	sp, #108	; 0x6c
 800167e:	bc3c      	pop	{r2, r3, r4, r5}
 8001680:	4690      	mov	r8, r2
 8001682:	4699      	mov	r9, r3
 8001684:	46a2      	mov	sl, r4
 8001686:	46ab      	mov	fp, r5
 8001688:	bcf0      	pop	{r4, r5, r6, r7}
 800168a:	bc04      	pop	{r2}
 800168c:	4710      	bx	r2
 800168e:	2400      	movs	r4, #0
 8001690:	940f      	str	r4, [sp, #60]	; 0x3c
 8001692:	e7d7      	b.n	8001644 <_strtod_r+0x134>
 8001694:	3201      	adds	r2, #1
 8001696:	9215      	str	r2, [sp, #84]	; 0x54
 8001698:	e74b      	b.n	8001532 <_strtod_r+0x22>
 800169a:	2300      	movs	r3, #0
 800169c:	2400      	movs	r4, #0
 800169e:	4699      	mov	r9, r3
 80016a0:	9404      	str	r4, [sp, #16]
 80016a2:	e7d9      	b.n	8001658 <_strtod_r+0x148>
 80016a4:	1c32      	adds	r2, r6, #0
 80016a6:	9904      	ldr	r1, [sp, #16]
 80016a8:	431a      	orrs	r2, r3
 80016aa:	430a      	orrs	r2, r1
 80016ac:	d100      	bne.n	80016b0 <_strtod_r+0x1a0>
 80016ae:	e110      	b.n	80018d2 <_strtod_r+0x3c2>
 80016b0:	9f15      	ldr	r7, [sp, #84]	; 0x54
 80016b2:	1c7a      	adds	r2, r7, #1
 80016b4:	9215      	str	r2, [sp, #84]	; 0x54
 80016b6:	787d      	ldrb	r5, [r7, #1]
 80016b8:	2d2b      	cmp	r5, #43	; 0x2b
 80016ba:	d101      	bne.n	80016c0 <_strtod_r+0x1b0>
 80016bc:	f000 fbe2 	bl	8001e84 <_strtod_r+0x974>
 80016c0:	2d2d      	cmp	r5, #45	; 0x2d
 80016c2:	d100      	bne.n	80016c6 <_strtod_r+0x1b6>
 80016c4:	e2d4      	b.n	8001c70 <_strtod_r+0x760>
 80016c6:	2200      	movs	r2, #0
 80016c8:	9209      	str	r2, [sp, #36]	; 0x24
 80016ca:	1c2a      	adds	r2, r5, #0
 80016cc:	3a30      	subs	r2, #48	; 0x30
 80016ce:	2a09      	cmp	r2, #9
 80016d0:	d900      	bls.n	80016d4 <_strtod_r+0x1c4>
 80016d2:	e3bd      	b.n	8001e50 <_strtod_r+0x940>
 80016d4:	2d30      	cmp	r5, #48	; 0x30
 80016d6:	d106      	bne.n	80016e6 <_strtod_r+0x1d6>
 80016d8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80016da:	3201      	adds	r2, #1
 80016dc:	9215      	str	r2, [sp, #84]	; 0x54
 80016de:	7815      	ldrb	r5, [r2, #0]
 80016e0:	3201      	adds	r2, #1
 80016e2:	2d30      	cmp	r5, #48	; 0x30
 80016e4:	d0fa      	beq.n	80016dc <_strtod_r+0x1cc>
 80016e6:	1c2a      	adds	r2, r5, #0
 80016e8:	3a31      	subs	r2, #49	; 0x31
 80016ea:	2100      	movs	r1, #0
 80016ec:	2a08      	cmp	r2, #8
 80016ee:	d900      	bls.n	80016f2 <_strtod_r+0x1e2>
 80016f0:	e77d      	b.n	80015ee <_strtod_r+0xde>
 80016f2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80016f4:	2101      	movs	r1, #1
 80016f6:	4694      	mov	ip, r2
 80016f8:	448c      	add	ip, r1
 80016fa:	9202      	str	r2, [sp, #8]
 80016fc:	4662      	mov	r2, ip
 80016fe:	9215      	str	r2, [sp, #84]	; 0x54
 8001700:	9902      	ldr	r1, [sp, #8]
 8001702:	3d30      	subs	r5, #48	; 0x30
 8001704:	950a      	str	r5, [sp, #40]	; 0x28
 8001706:	784d      	ldrb	r5, [r1, #1]
 8001708:	2d2f      	cmp	r5, #47	; 0x2f
 800170a:	dd18      	ble.n	800173e <_strtod_r+0x22e>
 800170c:	2d39      	cmp	r5, #57	; 0x39
 800170e:	dc16      	bgt.n	800173e <_strtod_r+0x22e>
 8001710:	1c0a      	adds	r2, r1, #0
 8001712:	3202      	adds	r2, #2
 8001714:	469c      	mov	ip, r3
 8001716:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001718:	e002      	b.n	8001720 <_strtod_r+0x210>
 800171a:	3201      	adds	r2, #1
 800171c:	2d39      	cmp	r5, #57	; 0x39
 800171e:	dc0a      	bgt.n	8001736 <_strtod_r+0x226>
 8001720:	008b      	lsls	r3, r1, #2
 8001722:	1859      	adds	r1, r3, r1
 8001724:	0049      	lsls	r1, r1, #1
 8001726:	9215      	str	r2, [sp, #84]	; 0x54
 8001728:	194d      	adds	r5, r1, r5
 800172a:	1c29      	adds	r1, r5, #0
 800172c:	7815      	ldrb	r5, [r2, #0]
 800172e:	3930      	subs	r1, #48	; 0x30
 8001730:	1c13      	adds	r3, r2, #0
 8001732:	2d2f      	cmp	r5, #47	; 0x2f
 8001734:	dcf1      	bgt.n	800171a <_strtod_r+0x20a>
 8001736:	1c1a      	adds	r2, r3, #0
 8001738:	910a      	str	r1, [sp, #40]	; 0x28
 800173a:	4663      	mov	r3, ip
 800173c:	4694      	mov	ip, r2
 800173e:	9902      	ldr	r1, [sp, #8]
 8001740:	4662      	mov	r2, ip
 8001742:	1a52      	subs	r2, r2, r1
 8001744:	2a08      	cmp	r2, #8
 8001746:	dd01      	ble.n	800174c <_strtod_r+0x23c>
 8001748:	f000 fda2 	bl	8002290 <_strtod_r+0xd80>
 800174c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800174e:	4a3c      	ldr	r2, [pc, #240]	; (8001840 <_strtod_r+0x330>)
 8001750:	4291      	cmp	r1, r2
 8001752:	dd00      	ble.n	8001756 <_strtod_r+0x246>
 8001754:	1c11      	adds	r1, r2, #0
 8001756:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001758:	2a00      	cmp	r2, #0
 800175a:	d100      	bne.n	800175e <_strtod_r+0x24e>
 800175c:	e747      	b.n	80015ee <_strtod_r+0xde>
 800175e:	4249      	negs	r1, r1
 8001760:	e745      	b.n	80015ee <_strtod_r+0xde>
 8001762:	7873      	ldrb	r3, [r6, #1]
 8001764:	2b58      	cmp	r3, #88	; 0x58
 8001766:	d100      	bne.n	800176a <_strtod_r+0x25a>
 8001768:	e376      	b.n	8001e58 <_strtod_r+0x948>
 800176a:	1c72      	adds	r2, r6, #1
 800176c:	2b78      	cmp	r3, #120	; 0x78
 800176e:	d100      	bne.n	8001772 <_strtod_r+0x262>
 8001770:	e372      	b.n	8001e58 <_strtod_r+0x948>
 8001772:	9215      	str	r2, [sp, #84]	; 0x54
 8001774:	1c16      	adds	r6, r2, #0
 8001776:	7833      	ldrb	r3, [r6, #0]
 8001778:	3201      	adds	r2, #1
 800177a:	2b30      	cmp	r3, #48	; 0x30
 800177c:	d0f9      	beq.n	8001772 <_strtod_r+0x262>
 800177e:	2b00      	cmp	r3, #0
 8001780:	d100      	bne.n	8001784 <_strtod_r+0x274>
 8001782:	e20f      	b.n	8001ba4 <_strtod_r+0x694>
 8001784:	2401      	movs	r4, #1
 8001786:	9404      	str	r4, [sp, #16]
 8001788:	e6df      	b.n	800154a <_strtod_r+0x3a>
 800178a:	4648      	mov	r0, r9
 800178c:	1a08      	subs	r0, r1, r0
 800178e:	9010      	str	r0, [sp, #64]	; 0x40
 8001790:	9602      	str	r6, [sp, #8]
 8001792:	2c00      	cmp	r4, #0
 8001794:	d000      	beq.n	8001798 <_strtod_r+0x288>
 8001796:	9402      	str	r4, [sp, #8]
 8001798:	1c37      	adds	r7, r6, #0
 800179a:	2e10      	cmp	r6, #16
 800179c:	dd00      	ble.n	80017a0 <_strtod_r+0x290>
 800179e:	2710      	movs	r7, #16
 80017a0:	4658      	mov	r0, fp
 80017a2:	f007 ed3a 	blx	8009218 <__aeabi_ui2d>
 80017a6:	9006      	str	r0, [sp, #24]
 80017a8:	9107      	str	r1, [sp, #28]
 80017aa:	2f09      	cmp	r7, #9
 80017ac:	dd15      	ble.n	80017da <_strtod_r+0x2ca>
 80017ae:	1c3b      	adds	r3, r7, #0
 80017b0:	4a24      	ldr	r2, [pc, #144]	; (8001844 <_strtod_r+0x334>)
 80017b2:	3b09      	subs	r3, #9
 80017b4:	00db      	lsls	r3, r3, #3
 80017b6:	18d3      	adds	r3, r2, r3
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f007 edac 	blx	8009318 <__aeabi_dmul>
 80017c0:	1c04      	adds	r4, r0, #0
 80017c2:	4640      	mov	r0, r8
 80017c4:	1c0d      	adds	r5, r1, #0
 80017c6:	f007 ed28 	blx	8009218 <__aeabi_ui2d>
 80017ca:	1c02      	adds	r2, r0, #0
 80017cc:	1c0b      	adds	r3, r1, #0
 80017ce:	1c20      	adds	r0, r4, #0
 80017d0:	1c29      	adds	r1, r5, #0
 80017d2:	f007 eb9a 	blx	8008f08 <__adddf3>
 80017d6:	9006      	str	r0, [sp, #24]
 80017d8:	9107      	str	r1, [sp, #28]
 80017da:	2e0f      	cmp	r6, #15
 80017dc:	dd00      	ble.n	80017e0 <_strtod_r+0x2d0>
 80017de:	e07d      	b.n	80018dc <_strtod_r+0x3cc>
 80017e0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80017e2:	2c00      	cmp	r4, #0
 80017e4:	d01f      	beq.n	8001826 <_strtod_r+0x316>
 80017e6:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80017e8:	2c00      	cmp	r4, #0
 80017ea:	dc01      	bgt.n	80017f0 <_strtod_r+0x2e0>
 80017ec:	f000 fd53 	bl	8002296 <_strtod_r+0xd86>
 80017f0:	2c16      	cmp	r4, #22
 80017f2:	dd01      	ble.n	80017f8 <_strtod_r+0x2e8>
 80017f4:	f000 fcf3 	bl	80021de <_strtod_r+0xcce>
 80017f8:	4a12      	ldr	r2, [pc, #72]	; (8001844 <_strtod_r+0x334>)
 80017fa:	00e3      	lsls	r3, r4, #3
 80017fc:	18d3      	adds	r3, r2, r3
 80017fe:	6818      	ldr	r0, [r3, #0]
 8001800:	6859      	ldr	r1, [r3, #4]
 8001802:	9a06      	ldr	r2, [sp, #24]
 8001804:	9b07      	ldr	r3, [sp, #28]
 8001806:	f007 ed88 	blx	8009318 <__aeabi_dmul>
 800180a:	4681      	mov	r9, r0
 800180c:	9104      	str	r1, [sp, #16]
 800180e:	e726      	b.n	800165e <_strtod_r+0x14e>
 8001810:	1c53      	adds	r3, r2, #1
 8001812:	9315      	str	r3, [sp, #84]	; 0x54
 8001814:	7853      	ldrb	r3, [r2, #1]
 8001816:	2b28      	cmp	r3, #40	; 0x28
 8001818:	d101      	bne.n	800181e <_strtod_r+0x30e>
 800181a:	f000 fda2 	bl	8002362 <_strtod_r+0xe52>
 800181e:	490a      	ldr	r1, [pc, #40]	; (8001848 <_strtod_r+0x338>)
 8001820:	2200      	movs	r2, #0
 8001822:	9107      	str	r1, [sp, #28]
 8001824:	9206      	str	r2, [sp, #24]
 8001826:	9806      	ldr	r0, [sp, #24]
 8001828:	9c07      	ldr	r4, [sp, #28]
 800182a:	4681      	mov	r9, r0
 800182c:	9404      	str	r4, [sp, #16]
 800182e:	e716      	b.n	800165e <_strtod_r+0x14e>
	...
 8001838:	0800e860 	.word	0x0800e860
 800183c:	0800e958 	.word	0x0800e958
 8001840:	00004e1f 	.word	0x00004e1f
 8001844:	0800eeb0 	.word	0x0800eeb0
 8001848:	fff80000 	.word	0xfff80000
 800184c:	4650      	mov	r0, sl
 800184e:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8001850:	f7ff fc5c 	bl	800110c <_localeconv_r>
 8001854:	6800      	ldr	r0, [r0, #0]
 8001856:	f7fe fc7d 	bl	8000154 <strlen>
 800185a:	1828      	adds	r0, r5, r0
 800185c:	9015      	str	r0, [sp, #84]	; 0x54
 800185e:	7805      	ldrb	r5, [r0, #0]
 8001860:	2c00      	cmp	r4, #0
 8001862:	d000      	beq.n	8001866 <_strtod_r+0x356>
 8001864:	e16f      	b.n	8001b46 <_strtod_r+0x636>
 8001866:	2d30      	cmp	r5, #48	; 0x30
 8001868:	d001      	beq.n	800186e <_strtod_r+0x35e>
 800186a:	f000 fd2f 	bl	80022cc <_strtod_r+0xdbc>
 800186e:	1c42      	adds	r2, r0, #1
 8001870:	9215      	str	r2, [sp, #84]	; 0x54
 8001872:	7815      	ldrb	r5, [r2, #0]
 8001874:	1a13      	subs	r3, r2, r0
 8001876:	3201      	adds	r2, #1
 8001878:	2d30      	cmp	r5, #48	; 0x30
 800187a:	d0f9      	beq.n	8001870 <_strtod_r+0x360>
 800187c:	1c2a      	adds	r2, r5, #0
 800187e:	3a31      	subs	r2, #49	; 0x31
 8001880:	2a08      	cmp	r2, #8
 8001882:	d900      	bls.n	8001886 <_strtod_r+0x376>
 8001884:	e192      	b.n	8001bac <_strtod_r+0x69c>
 8001886:	9915      	ldr	r1, [sp, #84]	; 0x54
 8001888:	3d30      	subs	r5, #48	; 0x30
 800188a:	9108      	str	r1, [sp, #32]
 800188c:	2d00      	cmp	r5, #0
 800188e:	d001      	beq.n	8001894 <_strtod_r+0x384>
 8001890:	f000 fc7c 	bl	800218c <_strtod_r+0xc7c>
 8001894:	4699      	mov	r9, r3
 8001896:	468c      	mov	ip, r1
 8001898:	2600      	movs	r6, #0
 800189a:	2301      	movs	r3, #1
 800189c:	4662      	mov	r2, ip
 800189e:	3201      	adds	r2, #1
 80018a0:	9215      	str	r2, [sp, #84]	; 0x54
 80018a2:	4661      	mov	r1, ip
 80018a4:	784d      	ldrb	r5, [r1, #1]
 80018a6:	e152      	b.n	8001b4e <_strtod_r+0x63e>
 80018a8:	2d69      	cmp	r5, #105	; 0x69
 80018aa:	d100      	bne.n	80018ae <_strtod_r+0x39e>
 80018ac:	e6af      	b.n	800160e <_strtod_r+0xfe>
 80018ae:	2d6e      	cmp	r5, #110	; 0x6e
 80018b0:	d000      	beq.n	80018b4 <_strtod_r+0x3a4>
 80018b2:	e6bd      	b.n	8001630 <_strtod_r+0x120>
 80018b4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80018b6:	49c6      	ldr	r1, [pc, #792]	; (8001bd0 <_strtod_r+0x6c0>)
 80018b8:	7808      	ldrb	r0, [r1, #0]
 80018ba:	3101      	adds	r1, #1
 80018bc:	2800      	cmp	r0, #0
 80018be:	d0a7      	beq.n	8001810 <_strtod_r+0x300>
 80018c0:	3201      	adds	r2, #1
 80018c2:	7813      	ldrb	r3, [r2, #0]
 80018c4:	2b40      	cmp	r3, #64	; 0x40
 80018c6:	dd02      	ble.n	80018ce <_strtod_r+0x3be>
 80018c8:	2b5a      	cmp	r3, #90	; 0x5a
 80018ca:	dc00      	bgt.n	80018ce <_strtod_r+0x3be>
 80018cc:	3320      	adds	r3, #32
 80018ce:	4283      	cmp	r3, r0
 80018d0:	d0f2      	beq.n	80018b8 <_strtod_r+0x3a8>
 80018d2:	9a06      	ldr	r2, [sp, #24]
 80018d4:	9c07      	ldr	r4, [sp, #28]
 80018d6:	4691      	mov	r9, r2
 80018d8:	9404      	str	r4, [sp, #16]
 80018da:	e6bd      	b.n	8001658 <_strtod_r+0x148>
 80018dc:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80018de:	1bf5      	subs	r5, r6, r7
 80018e0:	1965      	adds	r5, r4, r5
 80018e2:	2d00      	cmp	r5, #0
 80018e4:	dc00      	bgt.n	80018e8 <_strtod_r+0x3d8>
 80018e6:	e3b0      	b.n	800204a <_strtod_r+0xb3a>
 80018e8:	230f      	movs	r3, #15
 80018ea:	402b      	ands	r3, r5
 80018ec:	d00a      	beq.n	8001904 <_strtod_r+0x3f4>
 80018ee:	4ab9      	ldr	r2, [pc, #740]	; (8001bd4 <_strtod_r+0x6c4>)
 80018f0:	00db      	lsls	r3, r3, #3
 80018f2:	18d3      	adds	r3, r2, r3
 80018f4:	6818      	ldr	r0, [r3, #0]
 80018f6:	6859      	ldr	r1, [r3, #4]
 80018f8:	9a06      	ldr	r2, [sp, #24]
 80018fa:	9b07      	ldr	r3, [sp, #28]
 80018fc:	f007 ed0c 	blx	8009318 <__aeabi_dmul>
 8001900:	9006      	str	r0, [sp, #24]
 8001902:	9107      	str	r1, [sp, #28]
 8001904:	230f      	movs	r3, #15
 8001906:	439d      	bics	r5, r3
 8001908:	d000      	beq.n	800190c <_strtod_r+0x3fc>
 800190a:	e16f      	b.n	8001bec <_strtod_r+0x6dc>
 800190c:	9c07      	ldr	r4, [sp, #28]
 800190e:	9806      	ldr	r0, [sp, #24]
 8001910:	9404      	str	r4, [sp, #16]
 8001912:	2400      	movs	r4, #0
 8001914:	9409      	str	r4, [sp, #36]	; 0x24
 8001916:	4681      	mov	r9, r0
 8001918:	4658      	mov	r0, fp
 800191a:	9000      	str	r0, [sp, #0]
 800191c:	9a02      	ldr	r2, [sp, #8]
 800191e:	1c33      	adds	r3, r6, #0
 8001920:	4650      	mov	r0, sl
 8001922:	9908      	ldr	r1, [sp, #32]
 8001924:	f005 fd9c 	bl	8007460 <__s2b>
 8001928:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800192a:	17e2      	asrs	r2, r4, #31
 800192c:	4263      	negs	r3, r4
 800192e:	1c04      	adds	r4, r0, #0
 8001930:	340c      	adds	r4, #12
 8001932:	401a      	ands	r2, r3
 8001934:	9411      	str	r4, [sp, #68]	; 0x44
 8001936:	464c      	mov	r4, r9
 8001938:	920b      	str	r2, [sp, #44]	; 0x2c
 800193a:	4683      	mov	fp, r0
 800193c:	9408      	str	r4, [sp, #32]
 800193e:	e0ce      	b.n	8001ade <_strtod_r+0x5ce>
 8001940:	48a5      	ldr	r0, [pc, #660]	; (8001bd8 <_strtod_r+0x6c8>)
 8001942:	180a      	adds	r2, r1, r0
 8001944:	9909      	ldr	r1, [sp, #36]	; 0x24
 8001946:	189c      	adds	r4, r3, r2
 8001948:	18ba      	adds	r2, r7, r2
 800194a:	1855      	adds	r5, r2, r1
 800194c:	1c27      	adds	r7, r4, #0
 800194e:	429c      	cmp	r4, r3
 8001950:	dd00      	ble.n	8001954 <_strtod_r+0x444>
 8001952:	1c1f      	adds	r7, r3, #0
 8001954:	42af      	cmp	r7, r5
 8001956:	dd00      	ble.n	800195a <_strtod_r+0x44a>
 8001958:	1c2f      	adds	r7, r5, #0
 800195a:	2f00      	cmp	r7, #0
 800195c:	dc00      	bgt.n	8001960 <_strtod_r+0x450>
 800195e:	e1da      	b.n	8001d16 <_strtod_r+0x806>
 8001960:	1be4      	subs	r4, r4, r7
 8001962:	1bed      	subs	r5, r5, r7
 8001964:	1bdf      	subs	r7, r3, r7
 8001966:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001968:	2a00      	cmp	r2, #0
 800196a:	d010      	beq.n	800198e <_strtod_r+0x47e>
 800196c:	4649      	mov	r1, r9
 800196e:	4650      	mov	r0, sl
 8001970:	f005 fece 	bl	8007710 <__pow5mult>
 8001974:	4681      	mov	r9, r0
 8001976:	4649      	mov	r1, r9
 8001978:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800197a:	4650      	mov	r0, sl
 800197c:	f005 fe16 	bl	80075ac <__multiply>
 8001980:	9916      	ldr	r1, [sp, #88]	; 0x58
 8001982:	9002      	str	r0, [sp, #8]
 8001984:	4650      	mov	r0, sl
 8001986:	f005 fd09 	bl	800739c <_Bfree>
 800198a:	9b02      	ldr	r3, [sp, #8]
 800198c:	9316      	str	r3, [sp, #88]	; 0x58
 800198e:	2c00      	cmp	r4, #0
 8001990:	dd05      	ble.n	800199e <_strtod_r+0x48e>
 8001992:	4650      	mov	r0, sl
 8001994:	9916      	ldr	r1, [sp, #88]	; 0x58
 8001996:	1c22      	adds	r2, r4, #0
 8001998:	f005 ff12 	bl	80077c0 <__lshift>
 800199c:	9016      	str	r0, [sp, #88]	; 0x58
 800199e:	2e00      	cmp	r6, #0
 80019a0:	d005      	beq.n	80019ae <_strtod_r+0x49e>
 80019a2:	4641      	mov	r1, r8
 80019a4:	4650      	mov	r0, sl
 80019a6:	1c32      	adds	r2, r6, #0
 80019a8:	f005 feb2 	bl	8007710 <__pow5mult>
 80019ac:	4680      	mov	r8, r0
 80019ae:	2d00      	cmp	r5, #0
 80019b0:	dd05      	ble.n	80019be <_strtod_r+0x4ae>
 80019b2:	4641      	mov	r1, r8
 80019b4:	4650      	mov	r0, sl
 80019b6:	1c2a      	adds	r2, r5, #0
 80019b8:	f005 ff02 	bl	80077c0 <__lshift>
 80019bc:	4680      	mov	r8, r0
 80019be:	2f00      	cmp	r7, #0
 80019c0:	dd05      	ble.n	80019ce <_strtod_r+0x4be>
 80019c2:	4649      	mov	r1, r9
 80019c4:	4650      	mov	r0, sl
 80019c6:	1c3a      	adds	r2, r7, #0
 80019c8:	f005 fefa 	bl	80077c0 <__lshift>
 80019cc:	4681      	mov	r9, r0
 80019ce:	9916      	ldr	r1, [sp, #88]	; 0x58
 80019d0:	4650      	mov	r0, sl
 80019d2:	4642      	mov	r2, r8
 80019d4:	f005 ff7a 	bl	80078cc <__mdiff>
 80019d8:	2300      	movs	r3, #0
 80019da:	68c4      	ldr	r4, [r0, #12]
 80019dc:	4649      	mov	r1, r9
 80019de:	60c3      	str	r3, [r0, #12]
 80019e0:	1c06      	adds	r6, r0, #0
 80019e2:	940c      	str	r4, [sp, #48]	; 0x30
 80019e4:	f005 ff54 	bl	8007890 <__mcmp>
 80019e8:	2800      	cmp	r0, #0
 80019ea:	da00      	bge.n	80019ee <_strtod_r+0x4de>
 80019ec:	e27c      	b.n	8001ee8 <_strtod_r+0x9d8>
 80019ee:	d100      	bne.n	80019f2 <_strtod_r+0x4e2>
 80019f0:	e2ef      	b.n	8001fd2 <_strtod_r+0xac2>
 80019f2:	1c30      	adds	r0, r6, #0
 80019f4:	4649      	mov	r1, r9
 80019f6:	f006 f8b3 	bl	8007b60 <__ratio>
 80019fa:	4b70      	ldr	r3, [pc, #448]	; (8001bbc <_strtod_r+0x6ac>)
 80019fc:	4a6e      	ldr	r2, [pc, #440]	; (8001bb8 <_strtod_r+0x6a8>)
 80019fe:	1c04      	adds	r4, r0, #0
 8001a00:	1c0d      	adds	r5, r1, #0
 8001a02:	f007 ef56 	blx	80098b0 <__aeabi_dcmple>
 8001a06:	2800      	cmp	r0, #0
 8001a08:	d100      	bne.n	8001a0c <_strtod_r+0x4fc>
 8001a0a:	e137      	b.n	8001c7c <_strtod_r+0x76c>
 8001a0c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001a0e:	2a00      	cmp	r2, #0
 8001a10:	d100      	bne.n	8001a14 <_strtod_r+0x504>
 8001a12:	e185      	b.n	8001d20 <_strtod_r+0x810>
 8001a14:	9b07      	ldr	r3, [sp, #28]
 8001a16:	4971      	ldr	r1, [pc, #452]	; (8001bdc <_strtod_r+0x6cc>)
 8001a18:	2000      	movs	r0, #0
 8001a1a:	4c69      	ldr	r4, [pc, #420]	; (8001bc0 <_strtod_r+0x6b0>)
 8001a1c:	4d69      	ldr	r5, [pc, #420]	; (8001bc4 <_strtod_r+0x6b4>)
 8001a1e:	930e      	str	r3, [sp, #56]	; 0x38
 8001a20:	900a      	str	r0, [sp, #40]	; 0x28
 8001a22:	9102      	str	r1, [sp, #8]
 8001a24:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8001a26:	4a6e      	ldr	r2, [pc, #440]	; (8001be0 <_strtod_r+0x6d0>)
 8001a28:	4b6e      	ldr	r3, [pc, #440]	; (8001be4 <_strtod_r+0x6d4>)
 8001a2a:	4017      	ands	r7, r2
 8001a2c:	429f      	cmp	r7, r3
 8001a2e:	d100      	bne.n	8001a32 <_strtod_r+0x522>
 8001a30:	e13e      	b.n	8001cb0 <_strtod_r+0x7a0>
 8001a32:	23d4      	movs	r3, #212	; 0xd4
 8001a34:	04db      	lsls	r3, r3, #19
 8001a36:	42bb      	cmp	r3, r7
 8001a38:	d322      	bcc.n	8001a80 <_strtod_r+0x570>
 8001a3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001a3c:	2a00      	cmp	r2, #0
 8001a3e:	d01f      	beq.n	8001a80 <_strtod_r+0x570>
 8001a40:	980a      	ldr	r0, [sp, #40]	; 0x28
 8001a42:	9902      	ldr	r1, [sp, #8]
 8001a44:	4a60      	ldr	r2, [pc, #384]	; (8001bc8 <_strtod_r+0x6b8>)
 8001a46:	4b61      	ldr	r3, [pc, #388]	; (8001bcc <_strtod_r+0x6bc>)
 8001a48:	f007 ef32 	blx	80098b0 <__aeabi_dcmple>
 8001a4c:	2800      	cmp	r0, #0
 8001a4e:	d013      	beq.n	8001a78 <_strtod_r+0x568>
 8001a50:	980a      	ldr	r0, [sp, #40]	; 0x28
 8001a52:	9902      	ldr	r1, [sp, #8]
 8001a54:	f007 ef7e 	blx	8009954 <__aeabi_d2uiz>
 8001a58:	2800      	cmp	r0, #0
 8001a5a:	d100      	bne.n	8001a5e <_strtod_r+0x54e>
 8001a5c:	e1eb      	b.n	8001e36 <_strtod_r+0x926>
 8001a5e:	f007 ebdc 	blx	8009218 <__aeabi_ui2d>
 8001a62:	900a      	str	r0, [sp, #40]	; 0x28
 8001a64:	9102      	str	r1, [sp, #8]
 8001a66:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8001a68:	9b02      	ldr	r3, [sp, #8]
 8001a6a:	2c00      	cmp	r4, #0
 8001a6c:	d102      	bne.n	8001a74 <_strtod_r+0x564>
 8001a6e:	2080      	movs	r0, #128	; 0x80
 8001a70:	0600      	lsls	r0, r0, #24
 8001a72:	181b      	adds	r3, r3, r0
 8001a74:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8001a76:	1c1d      	adds	r5, r3, #0
 8001a78:	21d6      	movs	r1, #214	; 0xd6
 8001a7a:	04c9      	lsls	r1, r1, #19
 8001a7c:	186b      	adds	r3, r5, r1
 8001a7e:	1bdd      	subs	r5, r3, r7
 8001a80:	9808      	ldr	r0, [sp, #32]
 8001a82:	9904      	ldr	r1, [sp, #16]
 8001a84:	f005 ff9a 	bl	80079bc <__ulp>
 8001a88:	1c02      	adds	r2, r0, #0
 8001a8a:	1c0b      	adds	r3, r1, #0
 8001a8c:	1c20      	adds	r0, r4, #0
 8001a8e:	1c29      	adds	r1, r5, #0
 8001a90:	f007 ec42 	blx	8009318 <__aeabi_dmul>
 8001a94:	1c02      	adds	r2, r0, #0
 8001a96:	1c0b      	adds	r3, r1, #0
 8001a98:	9808      	ldr	r0, [sp, #32]
 8001a9a:	9904      	ldr	r1, [sp, #16]
 8001a9c:	f007 ea34 	blx	8008f08 <__adddf3>
 8001aa0:	1c02      	adds	r2, r0, #0
 8001aa2:	1c0b      	adds	r3, r1, #0
 8001aa4:	9206      	str	r2, [sp, #24]
 8001aa6:	9307      	str	r3, [sp, #28]
 8001aa8:	9008      	str	r0, [sp, #32]
 8001aaa:	9104      	str	r1, [sp, #16]
 8001aac:	9c07      	ldr	r4, [sp, #28]
 8001aae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001ab0:	2a00      	cmp	r2, #0
 8001ab2:	d104      	bne.n	8001abe <_strtod_r+0x5ae>
 8001ab4:	4b4a      	ldr	r3, [pc, #296]	; (8001be0 <_strtod_r+0x6d0>)
 8001ab6:	4023      	ands	r3, r4
 8001ab8:	429f      	cmp	r7, r3
 8001aba:	d100      	bne.n	8001abe <_strtod_r+0x5ae>
 8001abc:	e156      	b.n	8001d6c <_strtod_r+0x85c>
 8001abe:	4650      	mov	r0, sl
 8001ac0:	9916      	ldr	r1, [sp, #88]	; 0x58
 8001ac2:	f005 fc6b 	bl	800739c <_Bfree>
 8001ac6:	4650      	mov	r0, sl
 8001ac8:	4641      	mov	r1, r8
 8001aca:	f005 fc67 	bl	800739c <_Bfree>
 8001ace:	4650      	mov	r0, sl
 8001ad0:	4649      	mov	r1, r9
 8001ad2:	f005 fc63 	bl	800739c <_Bfree>
 8001ad6:	4650      	mov	r0, sl
 8001ad8:	1c31      	adds	r1, r6, #0
 8001ada:	f005 fc5f 	bl	800739c <_Bfree>
 8001ade:	465a      	mov	r2, fp
 8001ae0:	6851      	ldr	r1, [r2, #4]
 8001ae2:	4650      	mov	r0, sl
 8001ae4:	f005 fc30 	bl	8007348 <_Balloc>
 8001ae8:	465b      	mov	r3, fp
 8001aea:	691a      	ldr	r2, [r3, #16]
 8001aec:	3202      	adds	r2, #2
 8001aee:	9911      	ldr	r1, [sp, #68]	; 0x44
 8001af0:	0092      	lsls	r2, r2, #2
 8001af2:	4680      	mov	r8, r0
 8001af4:	300c      	adds	r0, #12
 8001af6:	f005 fbd9 	bl	80072ac <memcpy>
 8001afa:	ac14      	add	r4, sp, #80	; 0x50
 8001afc:	a817      	add	r0, sp, #92	; 0x5c
 8001afe:	9400      	str	r4, [sp, #0]
 8001b00:	9001      	str	r0, [sp, #4]
 8001b02:	9a08      	ldr	r2, [sp, #32]
 8001b04:	9b04      	ldr	r3, [sp, #16]
 8001b06:	4650      	mov	r0, sl
 8001b08:	f005 ffce 	bl	8007aa8 <__d2b>
 8001b0c:	2101      	movs	r1, #1
 8001b0e:	9016      	str	r0, [sp, #88]	; 0x58
 8001b10:	4650      	mov	r0, sl
 8001b12:	f005 fd3f 	bl	8007594 <__i2b>
 8001b16:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8001b18:	2600      	movs	r6, #0
 8001b1a:	4681      	mov	r9, r0
 8001b1c:	42a6      	cmp	r6, r4
 8001b1e:	da00      	bge.n	8001b22 <_strtod_r+0x612>
 8001b20:	1c26      	adds	r6, r4, #0
 8001b22:	9914      	ldr	r1, [sp, #80]	; 0x50
 8001b24:	2900      	cmp	r1, #0
 8001b26:	da00      	bge.n	8001b2a <_strtod_r+0x61a>
 8001b28:	e0f7      	b.n	8001d1a <_strtod_r+0x80a>
 8001b2a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8001b2c:	1c37      	adds	r7, r6, #0
 8001b2e:	1863      	adds	r3, r4, r1
 8001b30:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8001b32:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8001b34:	1b09      	subs	r1, r1, r4
 8001b36:	482c      	ldr	r0, [pc, #176]	; (8001be8 <_strtod_r+0x6d8>)
 8001b38:	188c      	adds	r4, r1, r2
 8001b3a:	4284      	cmp	r4, r0
 8001b3c:	da00      	bge.n	8001b40 <_strtod_r+0x630>
 8001b3e:	e6ff      	b.n	8001940 <_strtod_r+0x430>
 8001b40:	2136      	movs	r1, #54	; 0x36
 8001b42:	1a8a      	subs	r2, r1, r2
 8001b44:	e6fe      	b.n	8001944 <_strtod_r+0x434>
 8001b46:	2300      	movs	r3, #0
 8001b48:	9608      	str	r6, [sp, #32]
 8001b4a:	4699      	mov	r9, r3
 8001b4c:	1c26      	adds	r6, r4, #0
 8001b4e:	1c2a      	adds	r2, r5, #0
 8001b50:	3a30      	subs	r2, #48	; 0x30
 8001b52:	2001      	movs	r0, #1
 8001b54:	2a09      	cmp	r2, #9
 8001b56:	d900      	bls.n	8001b5a <_strtod_r+0x64a>
 8001b58:	e543      	b.n	80015e2 <_strtod_r+0xd2>
 8001b5a:	1c59      	adds	r1, r3, #1
 8001b5c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8001b5e:	1c15      	adds	r5, r2, #0
 8001b60:	469c      	mov	ip, r3
 8001b62:	1c0b      	adds	r3, r1, #0
 8001b64:	2a00      	cmp	r2, #0
 8001b66:	d100      	bne.n	8001b6a <_strtod_r+0x65a>
 8001b68:	e698      	b.n	800189c <_strtod_r+0x38c>
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d101      	bne.n	8001b72 <_strtod_r+0x662>
 8001b6e:	f000 fbf2 	bl	8002356 <_strtod_r+0xe46>
 8001b72:	4658      	mov	r0, fp
 8001b74:	468b      	mov	fp, r1
 8001b76:	1c72      	adds	r2, r6, #1
 8001b78:	4641      	mov	r1, r8
 8001b7a:	199b      	adds	r3, r3, r6
 8001b7c:	9402      	str	r4, [sp, #8]
 8001b7e:	46d8      	mov	r8, fp
 8001b80:	e007      	b.n	8001b92 <_strtod_r+0x682>
 8001b82:	0084      	lsls	r4, r0, #2
 8001b84:	46a3      	mov	fp, r4
 8001b86:	4458      	add	r0, fp
 8001b88:	0040      	lsls	r0, r0, #1
 8001b8a:	3201      	adds	r2, #1
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d100      	bne.n	8001b92 <_strtod_r+0x682>
 8001b90:	e316      	b.n	80021c0 <_strtod_r+0xcb0>
 8001b92:	2e10      	cmp	r6, #16
 8001b94:	dcf9      	bgt.n	8001b8a <_strtod_r+0x67a>
 8001b96:	2a09      	cmp	r2, #9
 8001b98:	ddf3      	ble.n	8001b82 <_strtod_r+0x672>
 8001b9a:	008c      	lsls	r4, r1, #2
 8001b9c:	46a3      	mov	fp, r4
 8001b9e:	4459      	add	r1, fp
 8001ba0:	0049      	lsls	r1, r1, #1
 8001ba2:	e7f2      	b.n	8001b8a <_strtod_r+0x67a>
 8001ba4:	2400      	movs	r4, #0
 8001ba6:	46a1      	mov	r9, r4
 8001ba8:	9404      	str	r4, [sp, #16]
 8001baa:	e558      	b.n	800165e <_strtod_r+0x14e>
 8001bac:	9608      	str	r6, [sp, #32]
 8001bae:	2600      	movs	r6, #0
 8001bb0:	46b1      	mov	r9, r6
 8001bb2:	2001      	movs	r0, #1
 8001bb4:	e515      	b.n	80015e2 <_strtod_r+0xd2>
 8001bb6:	46c0      	nop			; (mov r8, r8)
 8001bb8:	00000000 	.word	0x00000000
 8001bbc:	40000000 	.word	0x40000000
 8001bc0:	00000000 	.word	0x00000000
 8001bc4:	3ff00000 	.word	0x3ff00000
 8001bc8:	ffc00000 	.word	0xffc00000
 8001bcc:	41dfffff 	.word	0x41dfffff
 8001bd0:	0800e964 	.word	0x0800e964
 8001bd4:	0800eeb0 	.word	0x0800eeb0
 8001bd8:	00000433 	.word	0x00000433
 8001bdc:	3ff00000 	.word	0x3ff00000
 8001be0:	7ff00000 	.word	0x7ff00000
 8001be4:	7fe00000 	.word	0x7fe00000
 8001be8:	fffffc03 	.word	0xfffffc03
 8001bec:	239a      	movs	r3, #154	; 0x9a
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	429d      	cmp	r5, r3
 8001bf2:	dd00      	ble.n	8001bf6 <_strtod_r+0x6e6>
 8001bf4:	e21f      	b.n	8002036 <_strtod_r+0xb26>
 8001bf6:	112d      	asrs	r5, r5, #4
 8001bf8:	2d01      	cmp	r5, #1
 8001bfa:	dc00      	bgt.n	8001bfe <_strtod_r+0x6ee>
 8001bfc:	e3ad      	b.n	800235a <_strtod_r+0xe4a>
 8001bfe:	4ab0      	ldr	r2, [pc, #704]	; (8001ec0 <_strtod_r+0x9b0>)
 8001c00:	2301      	movs	r3, #1
 8001c02:	9806      	ldr	r0, [sp, #24]
 8001c04:	9907      	ldr	r1, [sp, #28]
 8001c06:	4691      	mov	r9, r2
 8001c08:	1c14      	adds	r4, r2, #0
 8001c0a:	2700      	movs	r7, #0
 8001c0c:	4698      	mov	r8, r3
 8001c0e:	4642      	mov	r2, r8
 8001c10:	422a      	tst	r2, r5
 8001c12:	d003      	beq.n	8001c1c <_strtod_r+0x70c>
 8001c14:	6822      	ldr	r2, [r4, #0]
 8001c16:	6863      	ldr	r3, [r4, #4]
 8001c18:	f007 eb7e 	blx	8009318 <__aeabi_dmul>
 8001c1c:	3701      	adds	r7, #1
 8001c1e:	106d      	asrs	r5, r5, #1
 8001c20:	3408      	adds	r4, #8
 8001c22:	2d01      	cmp	r5, #1
 8001c24:	dcf3      	bgt.n	8001c0e <_strtod_r+0x6fe>
 8001c26:	9006      	str	r0, [sp, #24]
 8001c28:	9107      	str	r1, [sp, #28]
 8001c2a:	9c07      	ldr	r4, [sp, #28]
 8001c2c:	48a5      	ldr	r0, [pc, #660]	; (8001ec4 <_strtod_r+0x9b4>)
 8001c2e:	00ff      	lsls	r7, r7, #3
 8001c30:	1820      	adds	r0, r4, r0
 8001c32:	9007      	str	r0, [sp, #28]
 8001c34:	444f      	add	r7, r9
 8001c36:	9a06      	ldr	r2, [sp, #24]
 8001c38:	9b07      	ldr	r3, [sp, #28]
 8001c3a:	6838      	ldr	r0, [r7, #0]
 8001c3c:	6879      	ldr	r1, [r7, #4]
 8001c3e:	f007 eb6c 	blx	8009318 <__aeabi_dmul>
 8001c42:	9006      	str	r0, [sp, #24]
 8001c44:	9107      	str	r1, [sp, #28]
 8001c46:	9b07      	ldr	r3, [sp, #28]
 8001c48:	4a9f      	ldr	r2, [pc, #636]	; (8001ec8 <_strtod_r+0x9b8>)
 8001c4a:	49a0      	ldr	r1, [pc, #640]	; (8001ecc <_strtod_r+0x9bc>)
 8001c4c:	401a      	ands	r2, r3
 8001c4e:	428a      	cmp	r2, r1
 8001c50:	d900      	bls.n	8001c54 <_strtod_r+0x744>
 8001c52:	e1f0      	b.n	8002036 <_strtod_r+0xb26>
 8001c54:	499e      	ldr	r1, [pc, #632]	; (8001ed0 <_strtod_r+0x9c0>)
 8001c56:	428a      	cmp	r2, r1
 8001c58:	d800      	bhi.n	8001c5c <_strtod_r+0x74c>
 8001c5a:	e341      	b.n	80022e0 <_strtod_r+0xdd0>
 8001c5c:	499d      	ldr	r1, [pc, #628]	; (8001ed4 <_strtod_r+0x9c4>)
 8001c5e:	2301      	movs	r3, #1
 8001c60:	425b      	negs	r3, r3
 8001c62:	2400      	movs	r4, #0
 8001c64:	9107      	str	r1, [sp, #28]
 8001c66:	9306      	str	r3, [sp, #24]
 8001c68:	4699      	mov	r9, r3
 8001c6a:	9104      	str	r1, [sp, #16]
 8001c6c:	9409      	str	r4, [sp, #36]	; 0x24
 8001c6e:	e653      	b.n	8001918 <_strtod_r+0x408>
 8001c70:	2101      	movs	r1, #1
 8001c72:	9109      	str	r1, [sp, #36]	; 0x24
 8001c74:	1cba      	adds	r2, r7, #2
 8001c76:	9215      	str	r2, [sp, #84]	; 0x54
 8001c78:	78bd      	ldrb	r5, [r7, #2]
 8001c7a:	e526      	b.n	80016ca <_strtod_r+0x1ba>
 8001c7c:	1c20      	adds	r0, r4, #0
 8001c7e:	4b85      	ldr	r3, [pc, #532]	; (8001e94 <_strtod_r+0x984>)
 8001c80:	4a83      	ldr	r2, [pc, #524]	; (8001e90 <_strtod_r+0x980>)
 8001c82:	1c29      	adds	r1, r5, #0
 8001c84:	f007 eb48 	blx	8009318 <__aeabi_dmul>
 8001c88:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8001c8a:	900a      	str	r0, [sp, #40]	; 0x28
 8001c8c:	9102      	str	r1, [sp, #8]
 8001c8e:	1c0b      	adds	r3, r1, #0
 8001c90:	2c00      	cmp	r4, #0
 8001c92:	d102      	bne.n	8001c9a <_strtod_r+0x78a>
 8001c94:	2080      	movs	r0, #128	; 0x80
 8001c96:	0600      	lsls	r0, r0, #24
 8001c98:	180b      	adds	r3, r1, r0
 8001c9a:	9907      	ldr	r1, [sp, #28]
 8001c9c:	910e      	str	r1, [sp, #56]	; 0x38
 8001c9e:	1c1d      	adds	r5, r3, #0
 8001ca0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8001ca2:	4a89      	ldr	r2, [pc, #548]	; (8001ec8 <_strtod_r+0x9b8>)
 8001ca4:	4b8c      	ldr	r3, [pc, #560]	; (8001ed8 <_strtod_r+0x9c8>)
 8001ca6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8001ca8:	4017      	ands	r7, r2
 8001caa:	429f      	cmp	r7, r3
 8001cac:	d000      	beq.n	8001cb0 <_strtod_r+0x7a0>
 8001cae:	e6c0      	b.n	8001a32 <_strtod_r+0x522>
 8001cb0:	9b04      	ldr	r3, [sp, #16]
 8001cb2:	9a08      	ldr	r2, [sp, #32]
 8001cb4:	4883      	ldr	r0, [pc, #524]	; (8001ec4 <_strtod_r+0x9b4>)
 8001cb6:	9212      	str	r2, [sp, #72]	; 0x48
 8001cb8:	9313      	str	r3, [sp, #76]	; 0x4c
 8001cba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001cbc:	1818      	adds	r0, r3, r0
 8001cbe:	9007      	str	r0, [sp, #28]
 8001cc0:	9404      	str	r4, [sp, #16]
 8001cc2:	9505      	str	r5, [sp, #20]
 8001cc4:	9c06      	ldr	r4, [sp, #24]
 8001cc6:	9d07      	ldr	r5, [sp, #28]
 8001cc8:	1c20      	adds	r0, r4, #0
 8001cca:	1c29      	adds	r1, r5, #0
 8001ccc:	f005 fe76 	bl	80079bc <__ulp>
 8001cd0:	1c02      	adds	r2, r0, #0
 8001cd2:	1c0b      	adds	r3, r1, #0
 8001cd4:	9804      	ldr	r0, [sp, #16]
 8001cd6:	9905      	ldr	r1, [sp, #20]
 8001cd8:	f007 eb1e 	blx	8009318 <__aeabi_dmul>
 8001cdc:	1c02      	adds	r2, r0, #0
 8001cde:	1c0b      	adds	r3, r1, #0
 8001ce0:	1c20      	adds	r0, r4, #0
 8001ce2:	1c29      	adds	r1, r5, #0
 8001ce4:	f007 e910 	blx	8008f08 <__adddf3>
 8001ce8:	9006      	str	r0, [sp, #24]
 8001cea:	9107      	str	r1, [sp, #28]
 8001cec:	9c07      	ldr	r4, [sp, #28]
 8001cee:	4a76      	ldr	r2, [pc, #472]	; (8001ec8 <_strtod_r+0x9b8>)
 8001cf0:	4b7a      	ldr	r3, [pc, #488]	; (8001edc <_strtod_r+0x9cc>)
 8001cf2:	4022      	ands	r2, r4
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d800      	bhi.n	8001cfa <_strtod_r+0x7ea>
 8001cf8:	e0a2      	b.n	8001e40 <_strtod_r+0x930>
 8001cfa:	4b76      	ldr	r3, [pc, #472]	; (8001ed4 <_strtod_r+0x9c4>)
 8001cfc:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8001cfe:	4299      	cmp	r1, r3
 8001d00:	d100      	bne.n	8001d04 <_strtod_r+0x7f4>
 8001d02:	e186      	b.n	8002012 <_strtod_r+0xb02>
 8001d04:	4b73      	ldr	r3, [pc, #460]	; (8001ed4 <_strtod_r+0x9c4>)
 8001d06:	9307      	str	r3, [sp, #28]
 8001d08:	9c07      	ldr	r4, [sp, #28]
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	425b      	negs	r3, r3
 8001d0e:	9306      	str	r3, [sp, #24]
 8001d10:	9308      	str	r3, [sp, #32]
 8001d12:	9404      	str	r4, [sp, #16]
 8001d14:	e6d3      	b.n	8001abe <_strtod_r+0x5ae>
 8001d16:	1c1f      	adds	r7, r3, #0
 8001d18:	e625      	b.n	8001966 <_strtod_r+0x456>
 8001d1a:	1a77      	subs	r7, r6, r1
 8001d1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001d1e:	e707      	b.n	8001b30 <_strtod_r+0x620>
 8001d20:	9b06      	ldr	r3, [sp, #24]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d15c      	bne.n	8001de0 <_strtod_r+0x8d0>
 8001d26:	9a07      	ldr	r2, [sp, #28]
 8001d28:	920e      	str	r2, [sp, #56]	; 0x38
 8001d2a:	0313      	lsls	r3, r2, #12
 8001d2c:	d117      	bne.n	8001d5e <_strtod_r+0x84e>
 8001d2e:	1c20      	adds	r0, r4, #0
 8001d30:	1c29      	adds	r1, r5, #0
 8001d32:	4a59      	ldr	r2, [pc, #356]	; (8001e98 <_strtod_r+0x988>)
 8001d34:	4b59      	ldr	r3, [pc, #356]	; (8001e9c <_strtod_r+0x98c>)
 8001d36:	f007 edb0 	blx	8009898 <__aeabi_dcmplt>
 8001d3a:	2800      	cmp	r0, #0
 8001d3c:	d000      	beq.n	8001d40 <_strtod_r+0x830>
 8001d3e:	e211      	b.n	8002164 <_strtod_r+0xc54>
 8001d40:	4b54      	ldr	r3, [pc, #336]	; (8001e94 <_strtod_r+0x984>)
 8001d42:	4a53      	ldr	r2, [pc, #332]	; (8001e90 <_strtod_r+0x980>)
 8001d44:	1c20      	adds	r0, r4, #0
 8001d46:	1c29      	adds	r1, r5, #0
 8001d48:	f007 eae6 	blx	8009318 <__aeabi_dmul>
 8001d4c:	2480      	movs	r4, #128	; 0x80
 8001d4e:	0624      	lsls	r4, r4, #24
 8001d50:	900a      	str	r0, [sp, #40]	; 0x28
 8001d52:	9102      	str	r1, [sp, #8]
 8001d54:	1c02      	adds	r2, r0, #0
 8001d56:	190b      	adds	r3, r1, r4
 8001d58:	1c14      	adds	r4, r2, #0
 8001d5a:	1c1d      	adds	r5, r3, #0
 8001d5c:	e662      	b.n	8001a24 <_strtod_r+0x514>
 8001d5e:	4960      	ldr	r1, [pc, #384]	; (8001ee0 <_strtod_r+0x9d0>)
 8001d60:	2000      	movs	r0, #0
 8001d62:	4c4f      	ldr	r4, [pc, #316]	; (8001ea0 <_strtod_r+0x990>)
 8001d64:	4d4f      	ldr	r5, [pc, #316]	; (8001ea4 <_strtod_r+0x994>)
 8001d66:	900a      	str	r0, [sp, #40]	; 0x28
 8001d68:	9102      	str	r1, [sp, #8]
 8001d6a:	e65b      	b.n	8001a24 <_strtod_r+0x514>
 8001d6c:	9902      	ldr	r1, [sp, #8]
 8001d6e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8001d70:	f007 edc2 	blx	80098f8 <__aeabi_d2iz>
 8001d74:	f007 ea62 	blx	800923c <__aeabi_i2d>
 8001d78:	1c0b      	adds	r3, r1, #0
 8001d7a:	1c02      	adds	r2, r0, #0
 8001d7c:	9902      	ldr	r1, [sp, #8]
 8001d7e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8001d80:	f007 e8c0 	blx	8008f04 <__aeabi_dsub>
 8001d84:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001d86:	9002      	str	r0, [sp, #8]
 8001d88:	9103      	str	r1, [sp, #12]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d13a      	bne.n	8001e04 <_strtod_r+0x8f4>
 8001d8e:	9806      	ldr	r0, [sp, #24]
 8001d90:	2800      	cmp	r0, #0
 8001d92:	d137      	bne.n	8001e04 <_strtod_r+0x8f4>
 8001d94:	0324      	lsls	r4, r4, #12
 8001d96:	d135      	bne.n	8001e04 <_strtod_r+0x8f4>
 8001d98:	9802      	ldr	r0, [sp, #8]
 8001d9a:	9903      	ldr	r1, [sp, #12]
 8001d9c:	4a42      	ldr	r2, [pc, #264]	; (8001ea8 <_strtod_r+0x998>)
 8001d9e:	4b43      	ldr	r3, [pc, #268]	; (8001eac <_strtod_r+0x99c>)
 8001da0:	f007 ed7a 	blx	8009898 <__aeabi_dcmplt>
 8001da4:	2800      	cmp	r0, #0
 8001da6:	d100      	bne.n	8001daa <_strtod_r+0x89a>
 8001da8:	e689      	b.n	8001abe <_strtod_r+0x5ae>
 8001daa:	9b08      	ldr	r3, [sp, #32]
 8001dac:	4645      	mov	r5, r8
 8001dae:	464c      	mov	r4, r9
 8001db0:	46d8      	mov	r8, fp
 8001db2:	4699      	mov	r9, r3
 8001db4:	46b3      	mov	fp, r6
 8001db6:	4650      	mov	r0, sl
 8001db8:	9916      	ldr	r1, [sp, #88]	; 0x58
 8001dba:	f005 faef 	bl	800739c <_Bfree>
 8001dbe:	4650      	mov	r0, sl
 8001dc0:	1c29      	adds	r1, r5, #0
 8001dc2:	f005 faeb 	bl	800739c <_Bfree>
 8001dc6:	4650      	mov	r0, sl
 8001dc8:	1c21      	adds	r1, r4, #0
 8001dca:	f005 fae7 	bl	800739c <_Bfree>
 8001dce:	4650      	mov	r0, sl
 8001dd0:	4641      	mov	r1, r8
 8001dd2:	f005 fae3 	bl	800739c <_Bfree>
 8001dd6:	4650      	mov	r0, sl
 8001dd8:	4659      	mov	r1, fp
 8001dda:	f005 fadf 	bl	800739c <_Bfree>
 8001dde:	e43e      	b.n	800165e <_strtod_r+0x14e>
 8001de0:	9c07      	ldr	r4, [sp, #28]
 8001de2:	940e      	str	r4, [sp, #56]	; 0x38
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d1ba      	bne.n	8001d5e <_strtod_r+0x84e>
 8001de8:	2c00      	cmp	r4, #0
 8001dea:	d1b8      	bne.n	8001d5e <_strtod_r+0x84e>
 8001dec:	4645      	mov	r5, r8
 8001dee:	464c      	mov	r4, r9
 8001df0:	46d8      	mov	r8, fp
 8001df2:	46b3      	mov	fp, r6
 8001df4:	2322      	movs	r3, #34	; 0x22
 8001df6:	4650      	mov	r0, sl
 8001df8:	2100      	movs	r1, #0
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	6003      	str	r3, [r0, #0]
 8001dfe:	4689      	mov	r9, r1
 8001e00:	9204      	str	r2, [sp, #16]
 8001e02:	e7d8      	b.n	8001db6 <_strtod_r+0x8a6>
 8001e04:	9802      	ldr	r0, [sp, #8]
 8001e06:	9903      	ldr	r1, [sp, #12]
 8001e08:	4a29      	ldr	r2, [pc, #164]	; (8001eb0 <_strtod_r+0x9a0>)
 8001e0a:	4b2a      	ldr	r3, [pc, #168]	; (8001eb4 <_strtod_r+0x9a4>)
 8001e0c:	f007 ed44 	blx	8009898 <__aeabi_dcmplt>
 8001e10:	2800      	cmp	r0, #0
 8001e12:	d000      	beq.n	8001e16 <_strtod_r+0x906>
 8001e14:	e293      	b.n	800233e <_strtod_r+0xe2e>
 8001e16:	9802      	ldr	r0, [sp, #8]
 8001e18:	9903      	ldr	r1, [sp, #12]
 8001e1a:	4a27      	ldr	r2, [pc, #156]	; (8001eb8 <_strtod_r+0x9a8>)
 8001e1c:	4b27      	ldr	r3, [pc, #156]	; (8001ebc <_strtod_r+0x9ac>)
 8001e1e:	f007 ed60 	blx	80098e0 <__aeabi_dcmpgt>
 8001e22:	2800      	cmp	r0, #0
 8001e24:	d100      	bne.n	8001e28 <_strtod_r+0x918>
 8001e26:	e64a      	b.n	8001abe <_strtod_r+0x5ae>
 8001e28:	9908      	ldr	r1, [sp, #32]
 8001e2a:	4645      	mov	r5, r8
 8001e2c:	464c      	mov	r4, r9
 8001e2e:	46d8      	mov	r8, fp
 8001e30:	4689      	mov	r9, r1
 8001e32:	46b3      	mov	fp, r6
 8001e34:	e7bf      	b.n	8001db6 <_strtod_r+0x8a6>
 8001e36:	2400      	movs	r4, #0
 8001e38:	940a      	str	r4, [sp, #40]	; 0x28
 8001e3a:	4c29      	ldr	r4, [pc, #164]	; (8001ee0 <_strtod_r+0x9d0>)
 8001e3c:	9402      	str	r4, [sp, #8]
 8001e3e:	e612      	b.n	8001a66 <_strtod_r+0x556>
 8001e40:	20d4      	movs	r0, #212	; 0xd4
 8001e42:	0480      	lsls	r0, r0, #18
 8001e44:	9906      	ldr	r1, [sp, #24]
 8001e46:	1824      	adds	r4, r4, r0
 8001e48:	9407      	str	r4, [sp, #28]
 8001e4a:	9108      	str	r1, [sp, #32]
 8001e4c:	9404      	str	r4, [sp, #16]
 8001e4e:	e62e      	b.n	8001aae <_strtod_r+0x59e>
 8001e50:	9715      	str	r7, [sp, #84]	; 0x54
 8001e52:	2100      	movs	r1, #0
 8001e54:	f7ff fbcb 	bl	80015ee <_strtod_r+0xde>
 8001e58:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8001e5a:	4f22      	ldr	r7, [pc, #136]	; (8001ee4 <_strtod_r+0x9d4>)
 8001e5c:	ab16      	add	r3, sp, #88	; 0x58
 8001e5e:	9300      	str	r3, [sp, #0]
 8001e60:	9401      	str	r4, [sp, #4]
 8001e62:	4650      	mov	r0, sl
 8001e64:	a915      	add	r1, sp, #84	; 0x54
 8001e66:	1c3a      	adds	r2, r7, #0
 8001e68:	ab17      	add	r3, sp, #92	; 0x5c
 8001e6a:	f004 fbaf 	bl	80065cc <__gethex>
 8001e6e:	2407      	movs	r4, #7
 8001e70:	1c05      	adds	r5, r0, #0
 8001e72:	4004      	ands	r4, r0
 8001e74:	d000      	beq.n	8001e78 <_strtod_r+0x968>
 8001e76:	e13d      	b.n	80020f4 <_strtod_r+0xbe4>
 8001e78:	2200      	movs	r2, #0
 8001e7a:	2400      	movs	r4, #0
 8001e7c:	4691      	mov	r9, r2
 8001e7e:	9404      	str	r4, [sp, #16]
 8001e80:	f7ff fbed 	bl	800165e <_strtod_r+0x14e>
 8001e84:	2100      	movs	r1, #0
 8001e86:	9109      	str	r1, [sp, #36]	; 0x24
 8001e88:	e6f4      	b.n	8001c74 <_strtod_r+0x764>
 8001e8a:	46c0      	nop			; (mov r8, r8)
 8001e8c:	46c0      	nop			; (mov r8, r8)
 8001e8e:	46c0      	nop			; (mov r8, r8)
 8001e90:	00000000 	.word	0x00000000
 8001e94:	3fe00000 	.word	0x3fe00000
 8001e98:	00000000 	.word	0x00000000
 8001e9c:	3ff00000 	.word	0x3ff00000
 8001ea0:	00000000 	.word	0x00000000
 8001ea4:	bff00000 	.word	0xbff00000
 8001ea8:	94a03595 	.word	0x94a03595
 8001eac:	3fcfffff 	.word	0x3fcfffff
 8001eb0:	94a03595 	.word	0x94a03595
 8001eb4:	3fdfffff 	.word	0x3fdfffff
 8001eb8:	35afe535 	.word	0x35afe535
 8001ebc:	3fe00000 	.word	0x3fe00000
 8001ec0:	0800efa0 	.word	0x0800efa0
 8001ec4:	fcb00000 	.word	0xfcb00000
 8001ec8:	7ff00000 	.word	0x7ff00000
 8001ecc:	7ca00000 	.word	0x7ca00000
 8001ed0:	7c900000 	.word	0x7c900000
 8001ed4:	7fefffff 	.word	0x7fefffff
 8001ed8:	7fe00000 	.word	0x7fe00000
 8001edc:	7c9fffff 	.word	0x7c9fffff
 8001ee0:	3ff00000 	.word	0x3ff00000
 8001ee4:	200005b0 	.word	0x200005b0
 8001ee8:	980c      	ldr	r0, [sp, #48]	; 0x30
 8001eea:	4645      	mov	r5, r8
 8001eec:	464c      	mov	r4, r9
 8001eee:	46d8      	mov	r8, fp
 8001ef0:	46b3      	mov	fp, r6
 8001ef2:	2800      	cmp	r0, #0
 8001ef4:	d165      	bne.n	8001fc2 <_strtod_r+0xab2>
 8001ef6:	9906      	ldr	r1, [sp, #24]
 8001ef8:	2900      	cmp	r1, #0
 8001efa:	d162      	bne.n	8001fc2 <_strtod_r+0xab2>
 8001efc:	9b07      	ldr	r3, [sp, #28]
 8001efe:	031a      	lsls	r2, r3, #12
 8001f00:	d15f      	bne.n	8001fc2 <_strtod_r+0xab2>
 8001f02:	4ac9      	ldr	r2, [pc, #804]	; (8002228 <_strtod_r+0xd18>)
 8001f04:	4013      	ands	r3, r2
 8001f06:	22d6      	movs	r2, #214	; 0xd6
 8001f08:	04d2      	lsls	r2, r2, #19
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d959      	bls.n	8001fc2 <_strtod_r+0xab2>
 8001f0e:	6972      	ldr	r2, [r6, #20]
 8001f10:	2a00      	cmp	r2, #0
 8001f12:	d102      	bne.n	8001f1a <_strtod_r+0xa0a>
 8001f14:	6933      	ldr	r3, [r6, #16]
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	dd53      	ble.n	8001fc2 <_strtod_r+0xab2>
 8001f1a:	4659      	mov	r1, fp
 8001f1c:	4650      	mov	r0, sl
 8001f1e:	2201      	movs	r2, #1
 8001f20:	f005 fc4e 	bl	80077c0 <__lshift>
 8001f24:	1c21      	adds	r1, r4, #0
 8001f26:	4683      	mov	fp, r0
 8001f28:	f005 fcb2 	bl	8007890 <__mcmp>
 8001f2c:	2800      	cmp	r0, #0
 8001f2e:	dd48      	ble.n	8001fc2 <_strtod_r+0xab2>
 8001f30:	9909      	ldr	r1, [sp, #36]	; 0x24
 8001f32:	2900      	cmp	r1, #0
 8001f34:	d100      	bne.n	8001f38 <_strtod_r+0xa28>
 8001f36:	e1de      	b.n	80022f6 <_strtod_r+0xde6>
 8001f38:	9a07      	ldr	r2, [sp, #28]
 8001f3a:	4bbb      	ldr	r3, [pc, #748]	; (8002228 <_strtod_r+0xd18>)
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	22d6      	movs	r2, #214	; 0xd6
 8001f40:	04d2      	lsls	r2, r2, #19
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d900      	bls.n	8001f48 <_strtod_r+0xa38>
 8001f46:	e1d6      	b.n	80022f6 <_strtod_r+0xde6>
 8001f48:	22dc      	movs	r2, #220	; 0xdc
 8001f4a:	0492      	lsls	r2, r2, #18
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d800      	bhi.n	8001f52 <_strtod_r+0xa42>
 8001f50:	e750      	b.n	8001df4 <_strtod_r+0x8e4>
 8001f52:	49b6      	ldr	r1, [pc, #728]	; (800222c <_strtod_r+0xd1c>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	9113      	str	r1, [sp, #76]	; 0x4c
 8001f58:	9212      	str	r2, [sp, #72]	; 0x48
 8001f5a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8001f5c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8001f5e:	9806      	ldr	r0, [sp, #24]
 8001f60:	9907      	ldr	r1, [sp, #28]
 8001f62:	f007 e9da 	blx	8009318 <__aeabi_dmul>
 8001f66:	1c0b      	adds	r3, r1, #0
 8001f68:	1c02      	adds	r2, r0, #0
 8001f6a:	9206      	str	r2, [sp, #24]
 8001f6c:	9307      	str	r3, [sp, #28]
 8001f6e:	9b07      	ldr	r3, [sp, #28]
 8001f70:	4681      	mov	r9, r0
 8001f72:	9104      	str	r1, [sp, #16]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d000      	beq.n	8001f7a <_strtod_r+0xa6a>
 8001f78:	e71d      	b.n	8001db6 <_strtod_r+0x8a6>
 8001f7a:	9806      	ldr	r0, [sp, #24]
 8001f7c:	2800      	cmp	r0, #0
 8001f7e:	d000      	beq.n	8001f82 <_strtod_r+0xa72>
 8001f80:	e719      	b.n	8001db6 <_strtod_r+0x8a6>
 8001f82:	2322      	movs	r3, #34	; 0x22
 8001f84:	4651      	mov	r1, sl
 8001f86:	600b      	str	r3, [r1, #0]
 8001f88:	e715      	b.n	8001db6 <_strtod_r+0x8a6>
 8001f8a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001f8c:	2800      	cmp	r0, #0
 8001f8e:	d100      	bne.n	8001f92 <_strtod_r+0xa82>
 8001f90:	e1dc      	b.n	800234c <_strtod_r+0xe3c>
 8001f92:	49a5      	ldr	r1, [pc, #660]	; (8002228 <_strtod_r+0xd18>)
 8001f94:	20d4      	movs	r0, #212	; 0xd4
 8001f96:	4019      	ands	r1, r3
 8001f98:	04c0      	lsls	r0, r0, #19
 8001f9a:	4281      	cmp	r1, r0
 8001f9c:	d900      	bls.n	8001fa0 <_strtod_r+0xa90>
 8001f9e:	e1d5      	b.n	800234c <_strtod_r+0xe3c>
 8001fa0:	206b      	movs	r0, #107	; 0x6b
 8001fa2:	0d09      	lsrs	r1, r1, #20
 8001fa4:	1a41      	subs	r1, r0, r1
 8001fa6:	2001      	movs	r0, #1
 8001fa8:	4240      	negs	r0, r0
 8001faa:	4088      	lsls	r0, r1
 8001fac:	1c01      	adds	r1, r0, #0
 8001fae:	428a      	cmp	r2, r1
 8001fb0:	d120      	bne.n	8001ff4 <_strtod_r+0xae4>
 8001fb2:	4a9d      	ldr	r2, [pc, #628]	; (8002228 <_strtod_r+0xd18>)
 8001fb4:	2180      	movs	r1, #128	; 0x80
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	0349      	lsls	r1, r1, #13
 8001fba:	1859      	adds	r1, r3, r1
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	9107      	str	r1, [sp, #28]
 8001fc0:	9206      	str	r2, [sp, #24]
 8001fc2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001fc4:	2a00      	cmp	r2, #0
 8001fc6:	d1c4      	bne.n	8001f52 <_strtod_r+0xa42>
 8001fc8:	9b06      	ldr	r3, [sp, #24]
 8001fca:	9807      	ldr	r0, [sp, #28]
 8001fcc:	4699      	mov	r9, r3
 8001fce:	9004      	str	r0, [sp, #16]
 8001fd0:	e6f1      	b.n	8001db6 <_strtod_r+0x8a6>
 8001fd2:	9808      	ldr	r0, [sp, #32]
 8001fd4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001fd6:	4645      	mov	r5, r8
 8001fd8:	464c      	mov	r4, r9
 8001fda:	46d8      	mov	r8, fp
 8001fdc:	4681      	mov	r9, r0
 8001fde:	46b3      	mov	fp, r6
 8001fe0:	2900      	cmp	r1, #0
 8001fe2:	d100      	bne.n	8001fe6 <_strtod_r+0xad6>
 8001fe4:	e136      	b.n	8002254 <_strtod_r+0xd44>
 8001fe6:	9b07      	ldr	r3, [sp, #28]
 8001fe8:	4991      	ldr	r1, [pc, #580]	; (8002230 <_strtod_r+0xd20>)
 8001fea:	0318      	lsls	r0, r3, #12
 8001fec:	0b00      	lsrs	r0, r0, #12
 8001fee:	9a06      	ldr	r2, [sp, #24]
 8001ff0:	4288      	cmp	r0, r1
 8001ff2:	d0ca      	beq.n	8001f8a <_strtod_r+0xa7a>
 8001ff4:	07d1      	lsls	r1, r2, #31
 8001ff6:	d5e4      	bpl.n	8001fc2 <_strtod_r+0xab2>
 8001ff8:	4648      	mov	r0, r9
 8001ffa:	9904      	ldr	r1, [sp, #16]
 8001ffc:	f005 fcde 	bl	80079bc <__ulp>
 8002000:	1c02      	adds	r2, r0, #0
 8002002:	1c0b      	adds	r3, r1, #0
 8002004:	4648      	mov	r0, r9
 8002006:	9904      	ldr	r1, [sp, #16]
 8002008:	f006 ef7e 	blx	8008f08 <__adddf3>
 800200c:	9006      	str	r0, [sp, #24]
 800200e:	9107      	str	r1, [sp, #28]
 8002010:	e7d7      	b.n	8001fc2 <_strtod_r+0xab2>
 8002012:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002014:	3201      	adds	r2, #1
 8002016:	d000      	beq.n	800201a <_strtod_r+0xb0a>
 8002018:	e674      	b.n	8001d04 <_strtod_r+0x7f4>
 800201a:	4983      	ldr	r1, [pc, #524]	; (8002228 <_strtod_r+0xd18>)
 800201c:	2200      	movs	r2, #0
 800201e:	2322      	movs	r3, #34	; 0x22
 8002020:	4650      	mov	r0, sl
 8002022:	4645      	mov	r5, r8
 8002024:	464c      	mov	r4, r9
 8002026:	46d8      	mov	r8, fp
 8002028:	6003      	str	r3, [r0, #0]
 800202a:	46b3      	mov	fp, r6
 800202c:	9107      	str	r1, [sp, #28]
 800202e:	9206      	str	r2, [sp, #24]
 8002030:	4691      	mov	r9, r2
 8002032:	9104      	str	r1, [sp, #16]
 8002034:	e6bf      	b.n	8001db6 <_strtod_r+0x8a6>
 8002036:	2322      	movs	r3, #34	; 0x22
 8002038:	4a7b      	ldr	r2, [pc, #492]	; (8002228 <_strtod_r+0xd18>)
 800203a:	4651      	mov	r1, sl
 800203c:	600b      	str	r3, [r1, #0]
 800203e:	2300      	movs	r3, #0
 8002040:	9207      	str	r2, [sp, #28]
 8002042:	4699      	mov	r9, r3
 8002044:	9204      	str	r2, [sp, #16]
 8002046:	f7ff fb0a 	bl	800165e <_strtod_r+0x14e>
 800204a:	2d00      	cmp	r5, #0
 800204c:	d100      	bne.n	8002050 <_strtod_r+0xb40>
 800204e:	e45d      	b.n	800190c <_strtod_r+0x3fc>
 8002050:	426d      	negs	r5, r5
 8002052:	230f      	movs	r3, #15
 8002054:	402b      	ands	r3, r5
 8002056:	d00a      	beq.n	800206e <_strtod_r+0xb5e>
 8002058:	4a76      	ldr	r2, [pc, #472]	; (8002234 <_strtod_r+0xd24>)
 800205a:	00db      	lsls	r3, r3, #3
 800205c:	18d3      	adds	r3, r2, r3
 800205e:	9806      	ldr	r0, [sp, #24]
 8002060:	9907      	ldr	r1, [sp, #28]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	f007 eaa0 	blx	80095a8 <__aeabi_ddiv>
 800206a:	9006      	str	r0, [sp, #24]
 800206c:	9107      	str	r1, [sp, #28]
 800206e:	112d      	asrs	r5, r5, #4
 8002070:	d100      	bne.n	8002074 <_strtod_r+0xb64>
 8002072:	e44b      	b.n	800190c <_strtod_r+0x3fc>
 8002074:	2d1f      	cmp	r5, #31
 8002076:	dc39      	bgt.n	80020ec <_strtod_r+0xbdc>
 8002078:	06eb      	lsls	r3, r5, #27
 800207a:	246a      	movs	r4, #106	; 0x6a
 800207c:	17db      	asrs	r3, r3, #31
 800207e:	401c      	ands	r4, r3
 8002080:	9409      	str	r4, [sp, #36]	; 0x24
 8002082:	2d00      	cmp	r5, #0
 8002084:	dd0f      	ble.n	80020a6 <_strtod_r+0xb96>
 8002086:	9806      	ldr	r0, [sp, #24]
 8002088:	9907      	ldr	r1, [sp, #28]
 800208a:	4c6b      	ldr	r4, [pc, #428]	; (8002238 <_strtod_r+0xd28>)
 800208c:	2701      	movs	r7, #1
 800208e:	422f      	tst	r7, r5
 8002090:	d003      	beq.n	800209a <_strtod_r+0xb8a>
 8002092:	6822      	ldr	r2, [r4, #0]
 8002094:	6863      	ldr	r3, [r4, #4]
 8002096:	f007 e940 	blx	8009318 <__aeabi_dmul>
 800209a:	106d      	asrs	r5, r5, #1
 800209c:	3408      	adds	r4, #8
 800209e:	2d00      	cmp	r5, #0
 80020a0:	d1f5      	bne.n	800208e <_strtod_r+0xb7e>
 80020a2:	9006      	str	r0, [sp, #24]
 80020a4:	9107      	str	r1, [sp, #28]
 80020a6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80020a8:	2c00      	cmp	r4, #0
 80020aa:	d011      	beq.n	80020d0 <_strtod_r+0xbc0>
 80020ac:	9a07      	ldr	r2, [sp, #28]
 80020ae:	0053      	lsls	r3, r2, #1
 80020b0:	0d5b      	lsrs	r3, r3, #21
 80020b2:	216b      	movs	r1, #107	; 0x6b
 80020b4:	1acb      	subs	r3, r1, r3
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	dd0a      	ble.n	80020d0 <_strtod_r+0xbc0>
 80020ba:	2b1f      	cmp	r3, #31
 80020bc:	dc00      	bgt.n	80020c0 <_strtod_r+0xbb0>
 80020be:	e162      	b.n	8002386 <_strtod_r+0xe76>
 80020c0:	2000      	movs	r0, #0
 80020c2:	9006      	str	r0, [sp, #24]
 80020c4:	2b34      	cmp	r3, #52	; 0x34
 80020c6:	dc00      	bgt.n	80020ca <_strtod_r+0xbba>
 80020c8:	e164      	b.n	8002394 <_strtod_r+0xe84>
 80020ca:	23dc      	movs	r3, #220	; 0xdc
 80020cc:	049b      	lsls	r3, r3, #18
 80020ce:	9307      	str	r3, [sp, #28]
 80020d0:	9a06      	ldr	r2, [sp, #24]
 80020d2:	9c07      	ldr	r4, [sp, #28]
 80020d4:	4691      	mov	r9, r2
 80020d6:	1c10      	adds	r0, r2, #0
 80020d8:	1c21      	adds	r1, r4, #0
 80020da:	4b52      	ldr	r3, [pc, #328]	; (8002224 <_strtod_r+0xd14>)
 80020dc:	4a50      	ldr	r2, [pc, #320]	; (8002220 <_strtod_r+0xd10>)
 80020de:	9404      	str	r4, [sp, #16]
 80020e0:	f007 ebce 	blx	8009880 <__aeabi_dcmpeq>
 80020e4:	2800      	cmp	r0, #0
 80020e6:	d101      	bne.n	80020ec <_strtod_r+0xbdc>
 80020e8:	f7ff fc16 	bl	8001918 <_strtod_r+0x408>
 80020ec:	2322      	movs	r3, #34	; 0x22
 80020ee:	4651      	mov	r1, sl
 80020f0:	600b      	str	r3, [r1, #0]
 80020f2:	e6c1      	b.n	8001e78 <_strtod_r+0x968>
 80020f4:	2c06      	cmp	r4, #6
 80020f6:	d06a      	beq.n	80021ce <_strtod_r+0xcbe>
 80020f8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80020fa:	2a00      	cmp	r2, #0
 80020fc:	d007      	beq.n	800210e <_strtod_r+0xbfe>
 80020fe:	6839      	ldr	r1, [r7, #0]
 8002100:	a818      	add	r0, sp, #96	; 0x60
 8002102:	f005 fd87 	bl	8007c14 <__copybits>
 8002106:	4650      	mov	r0, sl
 8002108:	9916      	ldr	r1, [sp, #88]	; 0x58
 800210a:	f005 f947 	bl	800739c <_Bfree>
 800210e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8002110:	2c05      	cmp	r4, #5
 8002112:	d808      	bhi.n	8002126 <_strtod_r+0xc16>
 8002114:	4a49      	ldr	r2, [pc, #292]	; (800223c <_strtod_r+0xd2c>)
 8002116:	00a4      	lsls	r4, r4, #2
 8002118:	5912      	ldr	r2, [r2, r4]
 800211a:	4697      	mov	pc, r2
 800211c:	4a48      	ldr	r2, [pc, #288]	; (8002240 <_strtod_r+0xd30>)
 800211e:	2301      	movs	r3, #1
 8002120:	425b      	negs	r3, r3
 8002122:	9207      	str	r2, [sp, #28]
 8002124:	9306      	str	r3, [sp, #24]
 8002126:	072b      	lsls	r3, r5, #28
 8002128:	d400      	bmi.n	800212c <_strtod_r+0xc1c>
 800212a:	e0c9      	b.n	80022c0 <_strtod_r+0xdb0>
 800212c:	2380      	movs	r3, #128	; 0x80
 800212e:	9807      	ldr	r0, [sp, #28]
 8002130:	061b      	lsls	r3, r3, #24
 8002132:	9906      	ldr	r1, [sp, #24]
 8002134:	4303      	orrs	r3, r0
 8002136:	4689      	mov	r9, r1
 8002138:	9304      	str	r3, [sp, #16]
 800213a:	f7ff fa90 	bl	800165e <_strtod_r+0x14e>
 800213e:	493a      	ldr	r1, [pc, #232]	; (8002228 <_strtod_r+0xd18>)
 8002140:	9107      	str	r1, [sp, #28]
 8002142:	e7f0      	b.n	8002126 <_strtod_r+0xc16>
 8002144:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8002146:	4c3f      	ldr	r4, [pc, #252]	; (8002244 <_strtod_r+0xd34>)
 8002148:	9206      	str	r2, [sp, #24]
 800214a:	9819      	ldr	r0, [sp, #100]	; 0x64
 800214c:	4a3e      	ldr	r2, [pc, #248]	; (8002248 <_strtod_r+0xd38>)
 800214e:	191b      	adds	r3, r3, r4
 8002150:	051b      	lsls	r3, r3, #20
 8002152:	4002      	ands	r2, r0
 8002154:	4313      	orrs	r3, r2
 8002156:	9307      	str	r3, [sp, #28]
 8002158:	e7e5      	b.n	8002126 <_strtod_r+0xc16>
 800215a:	9818      	ldr	r0, [sp, #96]	; 0x60
 800215c:	9919      	ldr	r1, [sp, #100]	; 0x64
 800215e:	9006      	str	r0, [sp, #24]
 8002160:	9107      	str	r1, [sp, #28]
 8002162:	e7e0      	b.n	8002126 <_strtod_r+0xc16>
 8002164:	2400      	movs	r4, #0
 8002166:	940a      	str	r4, [sp, #40]	; 0x28
 8002168:	4c38      	ldr	r4, [pc, #224]	; (800224c <_strtod_r+0xd3c>)
 800216a:	2200      	movs	r2, #0
 800216c:	4b38      	ldr	r3, [pc, #224]	; (8002250 <_strtod_r+0xd40>)
 800216e:	9402      	str	r4, [sp, #8]
 8002170:	e5f2      	b.n	8001d58 <_strtod_r+0x848>
 8002172:	2200      	movs	r2, #0
 8002174:	46b1      	mov	r9, r6
 8002176:	4690      	mov	r8, r2
 8002178:	4693      	mov	fp, r2
 800217a:	2400      	movs	r4, #0
 800217c:	f7ff fa19 	bl	80015b2 <_strtod_r+0xa2>
 8002180:	2400      	movs	r4, #0
 8002182:	46b1      	mov	r9, r6
 8002184:	46a0      	mov	r8, r4
 8002186:	46a3      	mov	fp, r4
 8002188:	f7ff fa13 	bl	80015b2 <_strtod_r+0xa2>
 800218c:	9808      	ldr	r0, [sp, #32]
 800218e:	4699      	mov	r9, r3
 8002190:	4684      	mov	ip, r0
 8002192:	2600      	movs	r6, #0
 8002194:	2201      	movs	r2, #1
 8002196:	2101      	movs	r1, #1
 8002198:	2300      	movs	r3, #0
 800219a:	2e10      	cmp	r6, #16
 800219c:	dd01      	ble.n	80021a2 <_strtod_r+0xc92>
 800219e:	f7ff fb7d 	bl	800189c <_strtod_r+0x38c>
 80021a2:	1871      	adds	r1, r6, r1
 80021a4:	2909      	cmp	r1, #9
 80021a6:	dd00      	ble.n	80021aa <_strtod_r+0xc9a>
 80021a8:	e093      	b.n	80022d2 <_strtod_r+0xdc2>
 80021aa:	4659      	mov	r1, fp
 80021ac:	008b      	lsls	r3, r1, #2
 80021ae:	445b      	add	r3, fp
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	195b      	adds	r3, r3, r5
 80021b4:	469b      	mov	fp, r3
 80021b6:	4491      	add	r9, r2
 80021b8:	18b6      	adds	r6, r6, r2
 80021ba:	2300      	movs	r3, #0
 80021bc:	f7ff fb6e 	bl	800189c <_strtod_r+0x38c>
 80021c0:	4643      	mov	r3, r8
 80021c2:	4683      	mov	fp, r0
 80021c4:	4688      	mov	r8, r1
 80021c6:	9c02      	ldr	r4, [sp, #8]
 80021c8:	1c19      	adds	r1, r3, #0
 80021ca:	1c1a      	adds	r2, r3, #0
 80021cc:	e7e4      	b.n	8002198 <_strtod_r+0xc88>
 80021ce:	3601      	adds	r6, #1
 80021d0:	2000      	movs	r0, #0
 80021d2:	2400      	movs	r4, #0
 80021d4:	9615      	str	r6, [sp, #84]	; 0x54
 80021d6:	4681      	mov	r9, r0
 80021d8:	9404      	str	r4, [sp, #16]
 80021da:	f7ff fa40 	bl	800165e <_strtod_r+0x14e>
 80021de:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80021e0:	2325      	movs	r3, #37	; 0x25
 80021e2:	1b9b      	subs	r3, r3, r6
 80021e4:	429c      	cmp	r4, r3
 80021e6:	dd01      	ble.n	80021ec <_strtod_r+0xcdc>
 80021e8:	f7ff fb78 	bl	80018dc <_strtod_r+0x3cc>
 80021ec:	230f      	movs	r3, #15
 80021ee:	1b9e      	subs	r6, r3, r6
 80021f0:	4c10      	ldr	r4, [pc, #64]	; (8002234 <_strtod_r+0xd24>)
 80021f2:	00f3      	lsls	r3, r6, #3
 80021f4:	18e3      	adds	r3, r4, r3
 80021f6:	6818      	ldr	r0, [r3, #0]
 80021f8:	6859      	ldr	r1, [r3, #4]
 80021fa:	9a06      	ldr	r2, [sp, #24]
 80021fc:	9b07      	ldr	r3, [sp, #28]
 80021fe:	f007 e88c 	blx	8009318 <__aeabi_dmul>
 8002202:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8002204:	1b96      	subs	r6, r2, r6
 8002206:	00f6      	lsls	r6, r6, #3
 8002208:	19a4      	adds	r4, r4, r6
 800220a:	6822      	ldr	r2, [r4, #0]
 800220c:	6863      	ldr	r3, [r4, #4]
 800220e:	f007 e884 	blx	8009318 <__aeabi_dmul>
 8002212:	4681      	mov	r9, r0
 8002214:	9104      	str	r1, [sp, #16]
 8002216:	f7ff fa22 	bl	800165e <_strtod_r+0x14e>
 800221a:	46c0      	nop			; (mov r8, r8)
 800221c:	46c0      	nop			; (mov r8, r8)
 800221e:	46c0      	nop			; (mov r8, r8)
	...
 8002228:	7ff00000 	.word	0x7ff00000
 800222c:	39500000 	.word	0x39500000
 8002230:	000fffff 	.word	0x000fffff
 8002234:	0800eeb0 	.word	0x0800eeb0
 8002238:	0800e930 	.word	0x0800e930
 800223c:	0800e918 	.word	0x0800e918
 8002240:	7fffffff 	.word	0x7fffffff
 8002244:	00000433 	.word	0x00000433
 8002248:	ffefffff 	.word	0xffefffff
 800224c:	3fe00000 	.word	0x3fe00000
 8002250:	bfe00000 	.word	0xbfe00000
 8002254:	9807      	ldr	r0, [sp, #28]
 8002256:	0303      	lsls	r3, r0, #12
 8002258:	d130      	bne.n	80022bc <_strtod_r+0xdac>
 800225a:	9b06      	ldr	r3, [sp, #24]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d100      	bne.n	8002262 <_strtod_r+0xd52>
 8002260:	e666      	b.n	8001f30 <_strtod_r+0xa20>
 8002262:	07d8      	lsls	r0, r3, #31
 8002264:	d400      	bmi.n	8002268 <_strtod_r+0xd58>
 8002266:	e6ac      	b.n	8001fc2 <_strtod_r+0xab2>
 8002268:	4648      	mov	r0, r9
 800226a:	9904      	ldr	r1, [sp, #16]
 800226c:	f005 fba6 	bl	80079bc <__ulp>
 8002270:	1c02      	adds	r2, r0, #0
 8002272:	1c0b      	adds	r3, r1, #0
 8002274:	4648      	mov	r0, r9
 8002276:	9904      	ldr	r1, [sp, #16]
 8002278:	f006 ee44 	blx	8008f04 <__aeabi_dsub>
 800227c:	4b4b      	ldr	r3, [pc, #300]	; (80023ac <_strtod_r+0xe9c>)
 800227e:	4a4a      	ldr	r2, [pc, #296]	; (80023a8 <_strtod_r+0xe98>)
 8002280:	9006      	str	r0, [sp, #24]
 8002282:	9107      	str	r1, [sp, #28]
 8002284:	f007 eafc 	blx	8009880 <__aeabi_dcmpeq>
 8002288:	2800      	cmp	r0, #0
 800228a:	d000      	beq.n	800228e <_strtod_r+0xd7e>
 800228c:	e5b2      	b.n	8001df4 <_strtod_r+0x8e4>
 800228e:	e698      	b.n	8001fc2 <_strtod_r+0xab2>
 8002290:	4947      	ldr	r1, [pc, #284]	; (80023b0 <_strtod_r+0xea0>)
 8002292:	f7ff fa60 	bl	8001756 <_strtod_r+0x246>
 8002296:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8002298:	3416      	adds	r4, #22
 800229a:	da01      	bge.n	80022a0 <_strtod_r+0xd90>
 800229c:	f7ff fb1e 	bl	80018dc <_strtod_r+0x3cc>
 80022a0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80022a2:	4a44      	ldr	r2, [pc, #272]	; (80023b4 <_strtod_r+0xea4>)
 80022a4:	00e3      	lsls	r3, r4, #3
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	9806      	ldr	r0, [sp, #24]
 80022aa:	9907      	ldr	r1, [sp, #28]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f007 e97a 	blx	80095a8 <__aeabi_ddiv>
 80022b4:	4681      	mov	r9, r0
 80022b6:	9104      	str	r1, [sp, #16]
 80022b8:	f7ff f9d1 	bl	800165e <_strtod_r+0x14e>
 80022bc:	9b06      	ldr	r3, [sp, #24]
 80022be:	e7d0      	b.n	8002262 <_strtod_r+0xd52>
 80022c0:	9c06      	ldr	r4, [sp, #24]
 80022c2:	46a1      	mov	r9, r4
 80022c4:	9c07      	ldr	r4, [sp, #28]
 80022c6:	9404      	str	r4, [sp, #16]
 80022c8:	f7ff f9c9 	bl	800165e <_strtod_r+0x14e>
 80022cc:	2300      	movs	r3, #0
 80022ce:	f7ff fad5 	bl	800187c <_strtod_r+0x36c>
 80022d2:	4640      	mov	r0, r8
 80022d4:	0083      	lsls	r3, r0, #2
 80022d6:	4443      	add	r3, r8
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	195b      	adds	r3, r3, r5
 80022dc:	4698      	mov	r8, r3
 80022de:	e76a      	b.n	80021b6 <_strtod_r+0xca6>
 80022e0:	20d4      	movs	r0, #212	; 0xd4
 80022e2:	0480      	lsls	r0, r0, #18
 80022e4:	9906      	ldr	r1, [sp, #24]
 80022e6:	181b      	adds	r3, r3, r0
 80022e8:	2400      	movs	r4, #0
 80022ea:	9307      	str	r3, [sp, #28]
 80022ec:	4689      	mov	r9, r1
 80022ee:	9304      	str	r3, [sp, #16]
 80022f0:	9409      	str	r4, [sp, #36]	; 0x24
 80022f2:	f7ff fb11 	bl	8001918 <_strtod_r+0x408>
 80022f6:	9807      	ldr	r0, [sp, #28]
 80022f8:	4b2f      	ldr	r3, [pc, #188]	; (80023b8 <_strtod_r+0xea8>)
 80022fa:	4930      	ldr	r1, [pc, #192]	; (80023bc <_strtod_r+0xeac>)
 80022fc:	4003      	ands	r3, r0
 80022fe:	4a30      	ldr	r2, [pc, #192]	; (80023c0 <_strtod_r+0xeb0>)
 8002300:	185b      	adds	r3, r3, r1
 8002302:	431a      	orrs	r2, r3
 8002304:	2301      	movs	r3, #1
 8002306:	425b      	negs	r3, r3
 8002308:	9207      	str	r2, [sp, #28]
 800230a:	9306      	str	r3, [sp, #24]
 800230c:	e659      	b.n	8001fc2 <_strtod_r+0xab2>
 800230e:	9315      	str	r3, [sp, #84]	; 0x54
 8002310:	492c      	ldr	r1, [pc, #176]	; (80023c4 <_strtod_r+0xeb4>)
 8002312:	1c1c      	adds	r4, r3, #0
 8002314:	7808      	ldrb	r0, [r1, #0]
 8002316:	3301      	adds	r3, #1
 8002318:	3101      	adds	r1, #1
 800231a:	2800      	cmp	r0, #0
 800231c:	d019      	beq.n	8002352 <_strtod_r+0xe42>
 800231e:	781a      	ldrb	r2, [r3, #0]
 8002320:	2a40      	cmp	r2, #64	; 0x40
 8002322:	dd02      	ble.n	800232a <_strtod_r+0xe1a>
 8002324:	2a5a      	cmp	r2, #90	; 0x5a
 8002326:	dc00      	bgt.n	800232a <_strtod_r+0xe1a>
 8002328:	3220      	adds	r2, #32
 800232a:	4282      	cmp	r2, r0
 800232c:	d0f2      	beq.n	8002314 <_strtod_r+0xe04>
 800232e:	1c63      	adds	r3, r4, #1
 8002330:	9315      	str	r3, [sp, #84]	; 0x54
 8002332:	4821      	ldr	r0, [pc, #132]	; (80023b8 <_strtod_r+0xea8>)
 8002334:	2100      	movs	r1, #0
 8002336:	9007      	str	r0, [sp, #28]
 8002338:	9106      	str	r1, [sp, #24]
 800233a:	f7ff fa74 	bl	8001826 <_strtod_r+0x316>
 800233e:	9a08      	ldr	r2, [sp, #32]
 8002340:	4645      	mov	r5, r8
 8002342:	464c      	mov	r4, r9
 8002344:	46d8      	mov	r8, fp
 8002346:	4691      	mov	r9, r2
 8002348:	46b3      	mov	fp, r6
 800234a:	e534      	b.n	8001db6 <_strtod_r+0x8a6>
 800234c:	2101      	movs	r1, #1
 800234e:	4249      	negs	r1, r1
 8002350:	e62d      	b.n	8001fae <_strtod_r+0xa9e>
 8002352:	9315      	str	r3, [sp, #84]	; 0x54
 8002354:	e7ed      	b.n	8002332 <_strtod_r+0xe22>
 8002356:	2201      	movs	r2, #1
 8002358:	e71e      	b.n	8002198 <_strtod_r+0xc88>
 800235a:	4b1b      	ldr	r3, [pc, #108]	; (80023c8 <_strtod_r+0xeb8>)
 800235c:	2700      	movs	r7, #0
 800235e:	4699      	mov	r9, r3
 8002360:	e463      	b.n	8001c2a <_strtod_r+0x71a>
 8002362:	491a      	ldr	r1, [pc, #104]	; (80023cc <_strtod_r+0xebc>)
 8002364:	a815      	add	r0, sp, #84	; 0x54
 8002366:	3114      	adds	r1, #20
 8002368:	aa18      	add	r2, sp, #96	; 0x60
 800236a:	f004 fbd7 	bl	8006b1c <__hexnan>
 800236e:	2805      	cmp	r0, #5
 8002370:	d001      	beq.n	8002376 <_strtod_r+0xe66>
 8002372:	f7ff fa54 	bl	800181e <_strtod_r+0x30e>
 8002376:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8002378:	4a0f      	ldr	r2, [pc, #60]	; (80023b8 <_strtod_r+0xea8>)
 800237a:	9818      	ldr	r0, [sp, #96]	; 0x60
 800237c:	431a      	orrs	r2, r3
 800237e:	9207      	str	r2, [sp, #28]
 8002380:	9006      	str	r0, [sp, #24]
 8002382:	f7ff fa50 	bl	8001826 <_strtod_r+0x316>
 8002386:	2201      	movs	r2, #1
 8002388:	9906      	ldr	r1, [sp, #24]
 800238a:	4252      	negs	r2, r2
 800238c:	409a      	lsls	r2, r3
 800238e:	4011      	ands	r1, r2
 8002390:	9106      	str	r1, [sp, #24]
 8002392:	e69d      	b.n	80020d0 <_strtod_r+0xbc0>
 8002394:	2101      	movs	r1, #1
 8002396:	3b20      	subs	r3, #32
 8002398:	4249      	negs	r1, r1
 800239a:	4099      	lsls	r1, r3
 800239c:	400a      	ands	r2, r1
 800239e:	9207      	str	r2, [sp, #28]
 80023a0:	e696      	b.n	80020d0 <_strtod_r+0xbc0>
 80023a2:	46c0      	nop			; (mov r8, r8)
 80023a4:	46c0      	nop			; (mov r8, r8)
 80023a6:	46c0      	nop			; (mov r8, r8)
	...
 80023b0:	00004e1f 	.word	0x00004e1f
 80023b4:	0800eeb0 	.word	0x0800eeb0
 80023b8:	7ff00000 	.word	0x7ff00000
 80023bc:	fff00000 	.word	0xfff00000
 80023c0:	000fffff 	.word	0x000fffff
 80023c4:	0800e95c 	.word	0x0800e95c
 80023c8:	0800efa0 	.word	0x0800efa0
 80023cc:	200005b0 	.word	0x200005b0

080023d0 <strtod>:
 80023d0:	b508      	push	{r3, lr}
 80023d2:	1c0a      	adds	r2, r1, #0
 80023d4:	4904      	ldr	r1, [pc, #16]	; (80023e8 <strtod+0x18>)
 80023d6:	1c03      	adds	r3, r0, #0
 80023d8:	6808      	ldr	r0, [r1, #0]
 80023da:	1c19      	adds	r1, r3, #0
 80023dc:	f7ff f898 	bl	8001510 <_strtod_r>
 80023e0:	bc08      	pop	{r3}
 80023e2:	bc04      	pop	{r2}
 80023e4:	4710      	bx	r2
 80023e6:	46c0      	nop			; (mov r8, r8)
 80023e8:	20000100 	.word	0x20000100

080023ec <strtof>:
 80023ec:	1c0a      	adds	r2, r1, #0
 80023ee:	490b      	ldr	r1, [pc, #44]	; (800241c <strtof+0x30>)
 80023f0:	b538      	push	{r3, r4, r5, lr}
 80023f2:	1c03      	adds	r3, r0, #0
 80023f4:	6808      	ldr	r0, [r1, #0]
 80023f6:	1c19      	adds	r1, r3, #0
 80023f8:	f7ff f88a 	bl	8001510 <_strtod_r>
 80023fc:	1c04      	adds	r4, r0, #0
 80023fe:	1c0d      	adds	r5, r1, #0
 8002400:	f7fe ffc8 	bl	8001394 <__fpclassifyd>
 8002404:	2800      	cmp	r0, #0
 8002406:	d006      	beq.n	8002416 <strtof+0x2a>
 8002408:	1c20      	adds	r0, r4, #0
 800240a:	1c29      	adds	r1, r5, #0
 800240c:	f007 eacc 	blx	80099a8 <__aeabi_d2f>
 8002410:	bc38      	pop	{r3, r4, r5}
 8002412:	bc02      	pop	{r1}
 8002414:	4708      	bx	r1
 8002416:	f7ff f829 	bl	800146c <nanf>
 800241a:	e7f9      	b.n	8002410 <strtof+0x24>
 800241c:	20000100 	.word	0x20000100

08002420 <_strtol_r>:
 8002420:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002422:	4644      	mov	r4, r8
 8002424:	465f      	mov	r7, fp
 8002426:	4656      	mov	r6, sl
 8002428:	464d      	mov	r5, r9
 800242a:	b4f0      	push	{r4, r5, r6, r7}
 800242c:	4698      	mov	r8, r3
 800242e:	4b57      	ldr	r3, [pc, #348]	; (800258c <_strtol_r+0x16c>)
 8002430:	b087      	sub	sp, #28
 8002432:	9005      	str	r0, [sp, #20]
 8002434:	9102      	str	r1, [sp, #8]
 8002436:	681f      	ldr	r7, [r3, #0]
 8002438:	9203      	str	r2, [sp, #12]
 800243a:	1c0c      	adds	r4, r1, #0
 800243c:	2208      	movs	r2, #8
 800243e:	7825      	ldrb	r5, [r4, #0]
 8002440:	197b      	adds	r3, r7, r5
 8002442:	785b      	ldrb	r3, [r3, #1]
 8002444:	3401      	adds	r4, #1
 8002446:	421a      	tst	r2, r3
 8002448:	d1f9      	bne.n	800243e <_strtol_r+0x1e>
 800244a:	2d2d      	cmp	r5, #45	; 0x2d
 800244c:	d100      	bne.n	8002450 <_strtol_r+0x30>
 800244e:	e082      	b.n	8002556 <_strtol_r+0x136>
 8002450:	2200      	movs	r2, #0
 8002452:	9204      	str	r2, [sp, #16]
 8002454:	2d2b      	cmp	r5, #43	; 0x2b
 8002456:	d100      	bne.n	800245a <_strtol_r+0x3a>
 8002458:	e082      	b.n	8002560 <_strtol_r+0x140>
 800245a:	2310      	movs	r3, #16
 800245c:	4641      	mov	r1, r8
 800245e:	4399      	bics	r1, r3
 8002460:	46c2      	mov	sl, r8
 8002462:	d10b      	bne.n	800247c <_strtol_r+0x5c>
 8002464:	4641      	mov	r1, r8
 8002466:	424b      	negs	r3, r1
 8002468:	414b      	adcs	r3, r1
 800246a:	2d30      	cmp	r5, #48	; 0x30
 800246c:	d100      	bne.n	8002470 <_strtol_r+0x50>
 800246e:	e07a      	b.n	8002566 <_strtol_r+0x146>
 8002470:	2b00      	cmp	r3, #0
 8002472:	d100      	bne.n	8002476 <_strtol_r+0x56>
 8002474:	e088      	b.n	8002588 <_strtol_r+0x168>
 8002476:	210a      	movs	r1, #10
 8002478:	468a      	mov	sl, r1
 800247a:	4688      	mov	r8, r1
 800247c:	9904      	ldr	r1, [sp, #16]
 800247e:	2680      	movs	r6, #128	; 0x80
 8002480:	424b      	negs	r3, r1
 8002482:	414b      	adcs	r3, r1
 8002484:	0636      	lsls	r6, r6, #24
 8002486:	1af6      	subs	r6, r6, r3
 8002488:	1c30      	adds	r0, r6, #0
 800248a:	4651      	mov	r1, sl
 800248c:	f006 ec7c 	blx	8008d88 <__aeabi_uidivmod>
 8002490:	1c30      	adds	r0, r6, #0
 8002492:	4689      	mov	r9, r1
 8002494:	4651      	mov	r1, sl
 8002496:	f006 ebfa 	blx	8008c8c <__aeabi_uidiv>
 800249a:	2103      	movs	r1, #3
 800249c:	2304      	movs	r3, #4
 800249e:	468b      	mov	fp, r1
 80024a0:	4641      	mov	r1, r8
 80024a2:	2600      	movs	r6, #0
 80024a4:	2200      	movs	r2, #0
 80024a6:	469c      	mov	ip, r3
 80024a8:	9101      	str	r1, [sp, #4]
 80024aa:	e016      	b.n	80024da <_strtol_r+0xba>
 80024ac:	9b01      	ldr	r3, [sp, #4]
 80024ae:	3d30      	subs	r5, #48	; 0x30
 80024b0:	42ab      	cmp	r3, r5
 80024b2:	dd23      	ble.n	80024fc <_strtol_r+0xdc>
 80024b4:	4290      	cmp	r0, r2
 80024b6:	d338      	bcc.n	800252a <_strtol_r+0x10a>
 80024b8:	2e00      	cmp	r6, #0
 80024ba:	db36      	blt.n	800252a <_strtol_r+0x10a>
 80024bc:	2301      	movs	r3, #1
 80024be:	454d      	cmp	r5, r9
 80024c0:	dc00      	bgt.n	80024c4 <_strtol_r+0xa4>
 80024c2:	2300      	movs	r3, #0
 80024c4:	061b      	lsls	r3, r3, #24
 80024c6:	d001      	beq.n	80024cc <_strtol_r+0xac>
 80024c8:	4282      	cmp	r2, r0
 80024ca:	d02e      	beq.n	800252a <_strtol_r+0x10a>
 80024cc:	1c11      	adds	r1, r2, #0
 80024ce:	4652      	mov	r2, sl
 80024d0:	434a      	muls	r2, r1
 80024d2:	2601      	movs	r6, #1
 80024d4:	18aa      	adds	r2, r5, r2
 80024d6:	7825      	ldrb	r5, [r4, #0]
 80024d8:	3401      	adds	r4, #1
 80024da:	197b      	adds	r3, r7, r5
 80024dc:	785b      	ldrb	r3, [r3, #1]
 80024de:	4661      	mov	r1, ip
 80024e0:	4219      	tst	r1, r3
 80024e2:	d1e3      	bne.n	80024ac <_strtol_r+0x8c>
 80024e4:	4659      	mov	r1, fp
 80024e6:	400b      	ands	r3, r1
 80024e8:	d008      	beq.n	80024fc <_strtol_r+0xdc>
 80024ea:	2157      	movs	r1, #87	; 0x57
 80024ec:	4688      	mov	r8, r1
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d01e      	beq.n	8002530 <_strtol_r+0x110>
 80024f2:	9b01      	ldr	r3, [sp, #4]
 80024f4:	4641      	mov	r1, r8
 80024f6:	1a6d      	subs	r5, r5, r1
 80024f8:	42ab      	cmp	r3, r5
 80024fa:	dcdb      	bgt.n	80024b4 <_strtol_r+0x94>
 80024fc:	9904      	ldr	r1, [sp, #16]
 80024fe:	1c73      	adds	r3, r6, #1
 8002500:	d019      	beq.n	8002536 <_strtol_r+0x116>
 8002502:	2900      	cmp	r1, #0
 8002504:	d125      	bne.n	8002552 <_strtol_r+0x132>
 8002506:	9b03      	ldr	r3, [sp, #12]
 8002508:	1c10      	adds	r0, r2, #0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d004      	beq.n	8002518 <_strtol_r+0xf8>
 800250e:	2e00      	cmp	r6, #0
 8002510:	d11c      	bne.n	800254c <_strtol_r+0x12c>
 8002512:	9902      	ldr	r1, [sp, #8]
 8002514:	9a03      	ldr	r2, [sp, #12]
 8002516:	6011      	str	r1, [r2, #0]
 8002518:	b007      	add	sp, #28
 800251a:	bc3c      	pop	{r2, r3, r4, r5}
 800251c:	4690      	mov	r8, r2
 800251e:	4699      	mov	r9, r3
 8002520:	46a2      	mov	sl, r4
 8002522:	46ab      	mov	fp, r5
 8002524:	bcf0      	pop	{r4, r5, r6, r7}
 8002526:	bc02      	pop	{r1}
 8002528:	4708      	bx	r1
 800252a:	2601      	movs	r6, #1
 800252c:	4276      	negs	r6, r6
 800252e:	e7d2      	b.n	80024d6 <_strtol_r+0xb6>
 8002530:	2337      	movs	r3, #55	; 0x37
 8002532:	4698      	mov	r8, r3
 8002534:	e7dd      	b.n	80024f2 <_strtol_r+0xd2>
 8002536:	2080      	movs	r0, #128	; 0x80
 8002538:	424b      	negs	r3, r1
 800253a:	414b      	adcs	r3, r1
 800253c:	0600      	lsls	r0, r0, #24
 800253e:	9a05      	ldr	r2, [sp, #20]
 8002540:	1ac0      	subs	r0, r0, r3
 8002542:	2322      	movs	r3, #34	; 0x22
 8002544:	6013      	str	r3, [r2, #0]
 8002546:	9b03      	ldr	r3, [sp, #12]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d0e5      	beq.n	8002518 <_strtol_r+0xf8>
 800254c:	3c01      	subs	r4, #1
 800254e:	9402      	str	r4, [sp, #8]
 8002550:	e7df      	b.n	8002512 <_strtol_r+0xf2>
 8002552:	4252      	negs	r2, r2
 8002554:	e7d7      	b.n	8002506 <_strtol_r+0xe6>
 8002556:	2101      	movs	r1, #1
 8002558:	7825      	ldrb	r5, [r4, #0]
 800255a:	9104      	str	r1, [sp, #16]
 800255c:	3401      	adds	r4, #1
 800255e:	e77c      	b.n	800245a <_strtol_r+0x3a>
 8002560:	7825      	ldrb	r5, [r4, #0]
 8002562:	3401      	adds	r4, #1
 8002564:	e779      	b.n	800245a <_strtol_r+0x3a>
 8002566:	7822      	ldrb	r2, [r4, #0]
 8002568:	2120      	movs	r1, #32
 800256a:	438a      	bics	r2, r1
 800256c:	2a58      	cmp	r2, #88	; 0x58
 800256e:	d005      	beq.n	800257c <_strtol_r+0x15c>
 8002570:	2b00      	cmp	r3, #0
 8002572:	d009      	beq.n	8002588 <_strtol_r+0x168>
 8002574:	2308      	movs	r3, #8
 8002576:	469a      	mov	sl, r3
 8002578:	4698      	mov	r8, r3
 800257a:	e77f      	b.n	800247c <_strtol_r+0x5c>
 800257c:	2210      	movs	r2, #16
 800257e:	7865      	ldrb	r5, [r4, #1]
 8002580:	4692      	mov	sl, r2
 8002582:	3402      	adds	r4, #2
 8002584:	4690      	mov	r8, r2
 8002586:	e779      	b.n	800247c <_strtol_r+0x5c>
 8002588:	46c2      	mov	sl, r8
 800258a:	e777      	b.n	800247c <_strtol_r+0x5c>
 800258c:	200000f8 	.word	0x200000f8

08002590 <strtol>:
 8002590:	b538      	push	{r3, r4, r5, lr}
 8002592:	1c13      	adds	r3, r2, #0
 8002594:	4a05      	ldr	r2, [pc, #20]	; (80025ac <strtol+0x1c>)
 8002596:	1c05      	adds	r5, r0, #0
 8002598:	1c0c      	adds	r4, r1, #0
 800259a:	6810      	ldr	r0, [r2, #0]
 800259c:	1c29      	adds	r1, r5, #0
 800259e:	1c22      	adds	r2, r4, #0
 80025a0:	f7ff ff3e 	bl	8002420 <_strtol_r>
 80025a4:	bc38      	pop	{r3, r4, r5}
 80025a6:	bc02      	pop	{r1}
 80025a8:	4708      	bx	r1
 80025aa:	46c0      	nop			; (mov r8, r8)
 80025ac:	20000100 	.word	0x20000100

080025b0 <_strtoul_r>:
 80025b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025b2:	465f      	mov	r7, fp
 80025b4:	4656      	mov	r6, sl
 80025b6:	464d      	mov	r5, r9
 80025b8:	4644      	mov	r4, r8
 80025ba:	b4f0      	push	{r4, r5, r6, r7}
 80025bc:	1c1f      	adds	r7, r3, #0
 80025be:	4b56      	ldr	r3, [pc, #344]	; (8002718 <_strtoul_r+0x168>)
 80025c0:	b085      	sub	sp, #20
 80025c2:	9003      	str	r0, [sp, #12]
 80025c4:	9101      	str	r1, [sp, #4]
 80025c6:	681e      	ldr	r6, [r3, #0]
 80025c8:	4691      	mov	r9, r2
 80025ca:	1c0c      	adds	r4, r1, #0
 80025cc:	2208      	movs	r2, #8
 80025ce:	7825      	ldrb	r5, [r4, #0]
 80025d0:	1973      	adds	r3, r6, r5
 80025d2:	785b      	ldrb	r3, [r3, #1]
 80025d4:	3401      	adds	r4, #1
 80025d6:	421a      	tst	r2, r3
 80025d8:	d1f9      	bne.n	80025ce <_strtoul_r+0x1e>
 80025da:	2d2d      	cmp	r5, #45	; 0x2d
 80025dc:	d100      	bne.n	80025e0 <_strtoul_r+0x30>
 80025de:	e081      	b.n	80026e4 <_strtoul_r+0x134>
 80025e0:	2200      	movs	r2, #0
 80025e2:	9202      	str	r2, [sp, #8]
 80025e4:	2d2b      	cmp	r5, #43	; 0x2b
 80025e6:	d100      	bne.n	80025ea <_strtoul_r+0x3a>
 80025e8:	e081      	b.n	80026ee <_strtoul_r+0x13e>
 80025ea:	2310      	movs	r3, #16
 80025ec:	1c39      	adds	r1, r7, #0
 80025ee:	4399      	bics	r1, r3
 80025f0:	1e0b      	subs	r3, r1, #0
 80025f2:	d115      	bne.n	8002620 <_strtoul_r+0x70>
 80025f4:	427b      	negs	r3, r7
 80025f6:	417b      	adcs	r3, r7
 80025f8:	2d30      	cmp	r5, #48	; 0x30
 80025fa:	d009      	beq.n	8002610 <_strtoul_r+0x60>
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d00f      	beq.n	8002620 <_strtoul_r+0x70>
 8002600:	4b46      	ldr	r3, [pc, #280]	; (800271c <_strtoul_r+0x16c>)
 8002602:	2205      	movs	r2, #5
 8002604:	210a      	movs	r1, #10
 8002606:	4693      	mov	fp, r2
 8002608:	4698      	mov	r8, r3
 800260a:	9100      	str	r1, [sp, #0]
 800260c:	270a      	movs	r7, #10
 800260e:	e014      	b.n	800263a <_strtoul_r+0x8a>
 8002610:	7822      	ldrb	r2, [r4, #0]
 8002612:	2120      	movs	r1, #32
 8002614:	438a      	bics	r2, r1
 8002616:	2a58      	cmp	r2, #88	; 0x58
 8002618:	d06c      	beq.n	80026f4 <_strtoul_r+0x144>
 800261a:	2b00      	cmp	r3, #0
 800261c:	d000      	beq.n	8002620 <_strtoul_r+0x70>
 800261e:	e073      	b.n	8002708 <_strtoul_r+0x158>
 8002620:	2001      	movs	r0, #1
 8002622:	1c39      	adds	r1, r7, #0
 8002624:	4240      	negs	r0, r0
 8002626:	9700      	str	r7, [sp, #0]
 8002628:	f006 eb30 	blx	8008c8c <__aeabi_uidiv>
 800262c:	4680      	mov	r8, r0
 800262e:	2001      	movs	r0, #1
 8002630:	4240      	negs	r0, r0
 8002632:	1c39      	adds	r1, r7, #0
 8002634:	f006 eba8 	blx	8008d88 <__aeabi_uidivmod>
 8002638:	468b      	mov	fp, r1
 800263a:	2103      	movs	r1, #3
 800263c:	2304      	movs	r3, #4
 800263e:	468a      	mov	sl, r1
 8002640:	2200      	movs	r2, #0
 8002642:	4641      	mov	r1, r8
 8002644:	2000      	movs	r0, #0
 8002646:	46b8      	mov	r8, r7
 8002648:	469c      	mov	ip, r3
 800264a:	1c37      	adds	r7, r6, #0
 800264c:	e014      	b.n	8002678 <_strtoul_r+0xc8>
 800264e:	3d30      	subs	r5, #48	; 0x30
 8002650:	45a8      	cmp	r8, r5
 8002652:	dd1f      	ble.n	8002694 <_strtoul_r+0xe4>
 8002654:	4281      	cmp	r1, r0
 8002656:	d336      	bcc.n	80026c6 <_strtoul_r+0x116>
 8002658:	2a00      	cmp	r2, #0
 800265a:	db34      	blt.n	80026c6 <_strtoul_r+0x116>
 800265c:	2301      	movs	r3, #1
 800265e:	455d      	cmp	r5, fp
 8002660:	dc00      	bgt.n	8002664 <_strtoul_r+0xb4>
 8002662:	2300      	movs	r3, #0
 8002664:	061b      	lsls	r3, r3, #24
 8002666:	d001      	beq.n	800266c <_strtoul_r+0xbc>
 8002668:	4288      	cmp	r0, r1
 800266a:	d02c      	beq.n	80026c6 <_strtoul_r+0x116>
 800266c:	9e00      	ldr	r6, [sp, #0]
 800266e:	4370      	muls	r0, r6
 8002670:	2201      	movs	r2, #1
 8002672:	1828      	adds	r0, r5, r0
 8002674:	7825      	ldrb	r5, [r4, #0]
 8002676:	3401      	adds	r4, #1
 8002678:	197b      	adds	r3, r7, r5
 800267a:	785b      	ldrb	r3, [r3, #1]
 800267c:	4666      	mov	r6, ip
 800267e:	421e      	tst	r6, r3
 8002680:	d1e5      	bne.n	800264e <_strtoul_r+0x9e>
 8002682:	4656      	mov	r6, sl
 8002684:	4033      	ands	r3, r6
 8002686:	d005      	beq.n	8002694 <_strtoul_r+0xe4>
 8002688:	2657      	movs	r6, #87	; 0x57
 800268a:	2b01      	cmp	r3, #1
 800268c:	d018      	beq.n	80026c0 <_strtoul_r+0x110>
 800268e:	1bad      	subs	r5, r5, r6
 8002690:	45a8      	cmp	r8, r5
 8002692:	dcdf      	bgt.n	8002654 <_strtoul_r+0xa4>
 8002694:	1c51      	adds	r1, r2, #1
 8002696:	d019      	beq.n	80026cc <_strtoul_r+0x11c>
 8002698:	9e02      	ldr	r6, [sp, #8]
 800269a:	2e00      	cmp	r6, #0
 800269c:	d120      	bne.n	80026e0 <_strtoul_r+0x130>
 800269e:	4649      	mov	r1, r9
 80026a0:	2900      	cmp	r1, #0
 80026a2:	d004      	beq.n	80026ae <_strtoul_r+0xfe>
 80026a4:	2a00      	cmp	r2, #0
 80026a6:	d118      	bne.n	80026da <_strtoul_r+0x12a>
 80026a8:	9e01      	ldr	r6, [sp, #4]
 80026aa:	4649      	mov	r1, r9
 80026ac:	600e      	str	r6, [r1, #0]
 80026ae:	b005      	add	sp, #20
 80026b0:	bc3c      	pop	{r2, r3, r4, r5}
 80026b2:	4690      	mov	r8, r2
 80026b4:	4699      	mov	r9, r3
 80026b6:	46a2      	mov	sl, r4
 80026b8:	46ab      	mov	fp, r5
 80026ba:	bcf0      	pop	{r4, r5, r6, r7}
 80026bc:	bc02      	pop	{r1}
 80026be:	4708      	bx	r1
 80026c0:	2637      	movs	r6, #55	; 0x37
 80026c2:	1bad      	subs	r5, r5, r6
 80026c4:	e7e4      	b.n	8002690 <_strtoul_r+0xe0>
 80026c6:	2201      	movs	r2, #1
 80026c8:	4252      	negs	r2, r2
 80026ca:	e7d3      	b.n	8002674 <_strtoul_r+0xc4>
 80026cc:	9e03      	ldr	r6, [sp, #12]
 80026ce:	2322      	movs	r3, #34	; 0x22
 80026d0:	4649      	mov	r1, r9
 80026d2:	6033      	str	r3, [r6, #0]
 80026d4:	1c10      	adds	r0, r2, #0
 80026d6:	2900      	cmp	r1, #0
 80026d8:	d0e9      	beq.n	80026ae <_strtoul_r+0xfe>
 80026da:	3c01      	subs	r4, #1
 80026dc:	9401      	str	r4, [sp, #4]
 80026de:	e7e3      	b.n	80026a8 <_strtoul_r+0xf8>
 80026e0:	4240      	negs	r0, r0
 80026e2:	e7dc      	b.n	800269e <_strtoul_r+0xee>
 80026e4:	2101      	movs	r1, #1
 80026e6:	7825      	ldrb	r5, [r4, #0]
 80026e8:	9102      	str	r1, [sp, #8]
 80026ea:	3401      	adds	r4, #1
 80026ec:	e77d      	b.n	80025ea <_strtoul_r+0x3a>
 80026ee:	7825      	ldrb	r5, [r4, #0]
 80026f0:	3401      	adds	r4, #1
 80026f2:	e77a      	b.n	80025ea <_strtoul_r+0x3a>
 80026f4:	4b0a      	ldr	r3, [pc, #40]	; (8002720 <_strtoul_r+0x170>)
 80026f6:	220f      	movs	r2, #15
 80026f8:	2110      	movs	r1, #16
 80026fa:	7865      	ldrb	r5, [r4, #1]
 80026fc:	4693      	mov	fp, r2
 80026fe:	3402      	adds	r4, #2
 8002700:	4698      	mov	r8, r3
 8002702:	9100      	str	r1, [sp, #0]
 8002704:	2710      	movs	r7, #16
 8002706:	e798      	b.n	800263a <_strtoul_r+0x8a>
 8002708:	4b06      	ldr	r3, [pc, #24]	; (8002724 <_strtoul_r+0x174>)
 800270a:	2207      	movs	r2, #7
 800270c:	2108      	movs	r1, #8
 800270e:	4693      	mov	fp, r2
 8002710:	4698      	mov	r8, r3
 8002712:	9100      	str	r1, [sp, #0]
 8002714:	2708      	movs	r7, #8
 8002716:	e790      	b.n	800263a <_strtoul_r+0x8a>
 8002718:	200000f8 	.word	0x200000f8
 800271c:	19999999 	.word	0x19999999
 8002720:	0fffffff 	.word	0x0fffffff
 8002724:	1fffffff 	.word	0x1fffffff

08002728 <strtoul>:
 8002728:	b538      	push	{r3, r4, r5, lr}
 800272a:	1c13      	adds	r3, r2, #0
 800272c:	4a05      	ldr	r2, [pc, #20]	; (8002744 <strtoul+0x1c>)
 800272e:	1c05      	adds	r5, r0, #0
 8002730:	1c0c      	adds	r4, r1, #0
 8002732:	6810      	ldr	r0, [r2, #0]
 8002734:	1c29      	adds	r1, r5, #0
 8002736:	1c22      	adds	r2, r4, #0
 8002738:	f7ff ff3a 	bl	80025b0 <_strtoul_r>
 800273c:	bc38      	pop	{r3, r4, r5}
 800273e:	bc02      	pop	{r1}
 8002740:	4708      	bx	r1
 8002742:	46c0      	nop			; (mov r8, r8)
 8002744:	20000100 	.word	0x20000100

08002748 <_sungetc_r>:
 8002748:	b538      	push	{r3, r4, r5, lr}
 800274a:	1c14      	adds	r4, r2, #0
 800274c:	1c4a      	adds	r2, r1, #1
 800274e:	d01c      	beq.n	800278a <_sungetc_r+0x42>
 8002750:	89a3      	ldrh	r3, [r4, #12]
 8002752:	2220      	movs	r2, #32
 8002754:	4393      	bics	r3, r2
 8002756:	81a3      	strh	r3, [r4, #12]
 8002758:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800275a:	25ff      	movs	r5, #255	; 0xff
 800275c:	400d      	ands	r5, r1
 800275e:	2b00      	cmp	r3, #0
 8002760:	d016      	beq.n	8002790 <_sungetc_r+0x48>
 8002762:	6862      	ldr	r2, [r4, #4]
 8002764:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002766:	429a      	cmp	r2, r3
 8002768:	da0a      	bge.n	8002780 <_sungetc_r+0x38>
 800276a:	6823      	ldr	r3, [r4, #0]
 800276c:	3b01      	subs	r3, #1
 800276e:	6023      	str	r3, [r4, #0]
 8002770:	701d      	strb	r5, [r3, #0]
 8002772:	6863      	ldr	r3, [r4, #4]
 8002774:	3301      	adds	r3, #1
 8002776:	6063      	str	r3, [r4, #4]
 8002778:	1c28      	adds	r0, r5, #0
 800277a:	bc38      	pop	{r3, r4, r5}
 800277c:	bc02      	pop	{r1}
 800277e:	4708      	bx	r1
 8002780:	1c21      	adds	r1, r4, #0
 8002782:	f002 fa25 	bl	8004bd0 <__submore>
 8002786:	2800      	cmp	r0, #0
 8002788:	d0ef      	beq.n	800276a <_sungetc_r+0x22>
 800278a:	2501      	movs	r5, #1
 800278c:	426d      	negs	r5, r5
 800278e:	e7f3      	b.n	8002778 <_sungetc_r+0x30>
 8002790:	6922      	ldr	r2, [r4, #16]
 8002792:	6823      	ldr	r3, [r4, #0]
 8002794:	2a00      	cmp	r2, #0
 8002796:	d005      	beq.n	80027a4 <_sungetc_r+0x5c>
 8002798:	429a      	cmp	r2, r3
 800279a:	d203      	bcs.n	80027a4 <_sungetc_r+0x5c>
 800279c:	1e5a      	subs	r2, r3, #1
 800279e:	7811      	ldrb	r1, [r2, #0]
 80027a0:	42a9      	cmp	r1, r5
 80027a2:	d00f      	beq.n	80027c4 <_sungetc_r+0x7c>
 80027a4:	63a3      	str	r3, [r4, #56]	; 0x38
 80027a6:	1c23      	adds	r3, r4, #0
 80027a8:	3340      	adds	r3, #64	; 0x40
 80027aa:	6323      	str	r3, [r4, #48]	; 0x30
 80027ac:	2303      	movs	r3, #3
 80027ae:	6363      	str	r3, [r4, #52]	; 0x34
 80027b0:	2342      	movs	r3, #66	; 0x42
 80027b2:	54e5      	strb	r5, [r4, r3]
 80027b4:	1c23      	adds	r3, r4, #0
 80027b6:	6862      	ldr	r2, [r4, #4]
 80027b8:	3342      	adds	r3, #66	; 0x42
 80027ba:	6023      	str	r3, [r4, #0]
 80027bc:	2301      	movs	r3, #1
 80027be:	63e2      	str	r2, [r4, #60]	; 0x3c
 80027c0:	6063      	str	r3, [r4, #4]
 80027c2:	e7d9      	b.n	8002778 <_sungetc_r+0x30>
 80027c4:	6863      	ldr	r3, [r4, #4]
 80027c6:	3301      	adds	r3, #1
 80027c8:	6022      	str	r2, [r4, #0]
 80027ca:	6063      	str	r3, [r4, #4]
 80027cc:	e7d4      	b.n	8002778 <_sungetc_r+0x30>
 80027ce:	46c0      	nop			; (mov r8, r8)

080027d0 <__ssrefill_r>:
 80027d0:	b510      	push	{r4, lr}
 80027d2:	1c0c      	adds	r4, r1, #0
 80027d4:	6b09      	ldr	r1, [r1, #48]	; 0x30
 80027d6:	2900      	cmp	r1, #0
 80027d8:	d011      	beq.n	80027fe <__ssrefill_r+0x2e>
 80027da:	1c23      	adds	r3, r4, #0
 80027dc:	3340      	adds	r3, #64	; 0x40
 80027de:	4299      	cmp	r1, r3
 80027e0:	d001      	beq.n	80027e6 <__ssrefill_r+0x16>
 80027e2:	f003 fd41 	bl	8006268 <_free_r>
 80027e6:	2300      	movs	r3, #0
 80027e8:	6323      	str	r3, [r4, #48]	; 0x30
 80027ea:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80027ec:	6063      	str	r3, [r4, #4]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d005      	beq.n	80027fe <__ssrefill_r+0x2e>
 80027f2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80027f4:	6023      	str	r3, [r4, #0]
 80027f6:	2000      	movs	r0, #0
 80027f8:	bc10      	pop	{r4}
 80027fa:	bc02      	pop	{r1}
 80027fc:	4708      	bx	r1
 80027fe:	6923      	ldr	r3, [r4, #16]
 8002800:	89a2      	ldrh	r2, [r4, #12]
 8002802:	6023      	str	r3, [r4, #0]
 8002804:	2300      	movs	r3, #0
 8002806:	6063      	str	r3, [r4, #4]
 8002808:	2320      	movs	r3, #32
 800280a:	4313      	orrs	r3, r2
 800280c:	2001      	movs	r0, #1
 800280e:	81a3      	strh	r3, [r4, #12]
 8002810:	4240      	negs	r0, r0
 8002812:	e7f1      	b.n	80027f8 <__ssrefill_r+0x28>

08002814 <_sfread_r>:
 8002814:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002816:	4656      	mov	r6, sl
 8002818:	469a      	mov	sl, r3
 800281a:	4653      	mov	r3, sl
 800281c:	4353      	muls	r3, r2
 800281e:	4644      	mov	r4, r8
 8002820:	465f      	mov	r7, fp
 8002822:	464d      	mov	r5, r9
 8002824:	b4f0      	push	{r4, r5, r6, r7}
 8002826:	b083      	sub	sp, #12
 8002828:	4680      	mov	r8, r0
 800282a:	9201      	str	r2, [sp, #4]
 800282c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800282e:	469b      	mov	fp, r3
 8002830:	2b00      	cmp	r3, #0
 8002832:	d028      	beq.n	8002886 <_sfread_r+0x72>
 8002834:	2200      	movs	r2, #0
 8002836:	1c0f      	adds	r7, r1, #0
 8002838:	1c1e      	adds	r6, r3, #0
 800283a:	4691      	mov	r9, r2
 800283c:	6865      	ldr	r5, [r4, #4]
 800283e:	1c38      	adds	r0, r7, #0
 8002840:	6821      	ldr	r1, [r4, #0]
 8002842:	42ae      	cmp	r6, r5
 8002844:	d922      	bls.n	800288c <_sfread_r+0x78>
 8002846:	1c2a      	adds	r2, r5, #0
 8002848:	f004 fd30 	bl	80072ac <memcpy>
 800284c:	6822      	ldr	r2, [r4, #0]
 800284e:	1953      	adds	r3, r2, r5
 8002850:	6023      	str	r3, [r4, #0]
 8002852:	464b      	mov	r3, r9
 8002854:	6063      	str	r3, [r4, #4]
 8002856:	4640      	mov	r0, r8
 8002858:	1c21      	adds	r1, r4, #0
 800285a:	197f      	adds	r7, r7, r5
 800285c:	1b76      	subs	r6, r6, r5
 800285e:	f7ff ffb7 	bl	80027d0 <__ssrefill_r>
 8002862:	2800      	cmp	r0, #0
 8002864:	d0ea      	beq.n	800283c <_sfread_r+0x28>
 8002866:	465a      	mov	r2, fp
 8002868:	1b90      	subs	r0, r2, r6
 800286a:	9901      	ldr	r1, [sp, #4]
 800286c:	f006 ea0e 	blx	8008c8c <__aeabi_uidiv>
 8002870:	4682      	mov	sl, r0
 8002872:	4650      	mov	r0, sl
 8002874:	b003      	add	sp, #12
 8002876:	bc3c      	pop	{r2, r3, r4, r5}
 8002878:	4690      	mov	r8, r2
 800287a:	4699      	mov	r9, r3
 800287c:	46a2      	mov	sl, r4
 800287e:	46ab      	mov	fp, r5
 8002880:	bcf0      	pop	{r4, r5, r6, r7}
 8002882:	bc02      	pop	{r1}
 8002884:	4708      	bx	r1
 8002886:	2200      	movs	r2, #0
 8002888:	4692      	mov	sl, r2
 800288a:	e7f2      	b.n	8002872 <_sfread_r+0x5e>
 800288c:	1c32      	adds	r2, r6, #0
 800288e:	f004 fd0d 	bl	80072ac <memcpy>
 8002892:	6862      	ldr	r2, [r4, #4]
 8002894:	1b93      	subs	r3, r2, r6
 8002896:	6063      	str	r3, [r4, #4]
 8002898:	6823      	ldr	r3, [r4, #0]
 800289a:	199e      	adds	r6, r3, r6
 800289c:	6026      	str	r6, [r4, #0]
 800289e:	e7e8      	b.n	8002872 <_sfread_r+0x5e>

080028a0 <__ssvfiscanf_r>:
 80028a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028a2:	464d      	mov	r5, r9
 80028a4:	4644      	mov	r4, r8
 80028a6:	465f      	mov	r7, fp
 80028a8:	4656      	mov	r6, sl
 80028aa:	b4f0      	push	{r4, r5, r6, r7}
 80028ac:	b0df      	sub	sp, #380	; 0x17c
 80028ae:	9308      	str	r3, [sp, #32]
 80028b0:	1c0c      	adds	r4, r1, #0
 80028b2:	898b      	ldrh	r3, [r1, #12]
 80028b4:	2180      	movs	r1, #128	; 0x80
 80028b6:	0189      	lsls	r1, r1, #6
 80028b8:	4681      	mov	r9, r0
 80028ba:	420b      	tst	r3, r1
 80028bc:	d105      	bne.n	80028ca <__ssvfiscanf_r+0x2a>
 80028be:	430b      	orrs	r3, r1
 80028c0:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80028c2:	81a3      	strh	r3, [r4, #12]
 80028c4:	4bc2      	ldr	r3, [pc, #776]	; (8002bd0 <__ssvfiscanf_r+0x330>)
 80028c6:	4003      	ands	r3, r0
 80028c8:	6663      	str	r3, [r4, #100]	; 0x64
 80028ca:	2600      	movs	r6, #0
 80028cc:	2000      	movs	r0, #0
 80028ce:	960c      	str	r6, [sp, #48]	; 0x30
 80028d0:	960a      	str	r6, [sp, #40]	; 0x28
 80028d2:	9009      	str	r0, [sp, #36]	; 0x24
 80028d4:	4dbf      	ldr	r5, [pc, #764]	; (8002bd4 <__ssvfiscanf_r+0x334>)
 80028d6:	4693      	mov	fp, r2
 80028d8:	2708      	movs	r7, #8
 80028da:	9603      	str	r6, [sp, #12]
 80028dc:	4659      	mov	r1, fp
 80028de:	780a      	ldrb	r2, [r1, #0]
 80028e0:	2301      	movs	r3, #1
 80028e2:	920f      	str	r2, [sp, #60]	; 0x3c
 80028e4:	449b      	add	fp, r3
 80028e6:	2a00      	cmp	r2, #0
 80028e8:	d039      	beq.n	800295e <__ssvfiscanf_r+0xbe>
 80028ea:	682b      	ldr	r3, [r5, #0]
 80028ec:	1899      	adds	r1, r3, r2
 80028ee:	7849      	ldrb	r1, [r1, #1]
 80028f0:	420f      	tst	r7, r1
 80028f2:	d018      	beq.n	8002926 <__ssvfiscanf_r+0x86>
 80028f4:	6863      	ldr	r3, [r4, #4]
 80028f6:	9e03      	ldr	r6, [sp, #12]
 80028f8:	e00c      	b.n	8002914 <__ssvfiscanf_r+0x74>
 80028fa:	6822      	ldr	r2, [r4, #0]
 80028fc:	6828      	ldr	r0, [r5, #0]
 80028fe:	7813      	ldrb	r3, [r2, #0]
 8002900:	18c3      	adds	r3, r0, r3
 8002902:	785b      	ldrb	r3, [r3, #1]
 8002904:	421f      	tst	r7, r3
 8002906:	d0e8      	beq.n	80028da <__ssvfiscanf_r+0x3a>
 8002908:	6863      	ldr	r3, [r4, #4]
 800290a:	3201      	adds	r2, #1
 800290c:	3b01      	subs	r3, #1
 800290e:	6063      	str	r3, [r4, #4]
 8002910:	6022      	str	r2, [r4, #0]
 8002912:	3601      	adds	r6, #1
 8002914:	2b00      	cmp	r3, #0
 8002916:	dcf0      	bgt.n	80028fa <__ssvfiscanf_r+0x5a>
 8002918:	4648      	mov	r0, r9
 800291a:	1c21      	adds	r1, r4, #0
 800291c:	f7ff ff58 	bl	80027d0 <__ssrefill_r>
 8002920:	2800      	cmp	r0, #0
 8002922:	d0ea      	beq.n	80028fa <__ssvfiscanf_r+0x5a>
 8002924:	e7d9      	b.n	80028da <__ssvfiscanf_r+0x3a>
 8002926:	2a25      	cmp	r2, #37	; 0x25
 8002928:	d023      	beq.n	8002972 <__ssvfiscanf_r+0xd2>
 800292a:	6860      	ldr	r0, [r4, #4]
 800292c:	2800      	cmp	r0, #0
 800292e:	dc00      	bgt.n	8002932 <__ssvfiscanf_r+0x92>
 8002930:	e099      	b.n	8002a66 <__ssvfiscanf_r+0x1c6>
 8002932:	6823      	ldr	r3, [r4, #0]
 8002934:	465a      	mov	r2, fp
 8002936:	3a01      	subs	r2, #1
 8002938:	7819      	ldrb	r1, [r3, #0]
 800293a:	7812      	ldrb	r2, [r2, #0]
 800293c:	4291      	cmp	r1, r2
 800293e:	d10e      	bne.n	800295e <__ssvfiscanf_r+0xbe>
 8002940:	6862      	ldr	r2, [r4, #4]
 8002942:	3301      	adds	r3, #1
 8002944:	3a01      	subs	r2, #1
 8002946:	6023      	str	r3, [r4, #0]
 8002948:	6062      	str	r2, [r4, #4]
 800294a:	9e03      	ldr	r6, [sp, #12]
 800294c:	4659      	mov	r1, fp
 800294e:	780a      	ldrb	r2, [r1, #0]
 8002950:	3601      	adds	r6, #1
 8002952:	2301      	movs	r3, #1
 8002954:	9603      	str	r6, [sp, #12]
 8002956:	920f      	str	r2, [sp, #60]	; 0x3c
 8002958:	449b      	add	fp, r3
 800295a:	2a00      	cmp	r2, #0
 800295c:	d1c5      	bne.n	80028ea <__ssvfiscanf_r+0x4a>
 800295e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002960:	b05f      	add	sp, #380	; 0x17c
 8002962:	bc3c      	pop	{r2, r3, r4, r5}
 8002964:	4690      	mov	r8, r2
 8002966:	4699      	mov	r9, r3
 8002968:	46a2      	mov	sl, r4
 800296a:	46ab      	mov	fp, r5
 800296c:	bcf0      	pop	{r4, r5, r6, r7}
 800296e:	bc02      	pop	{r1}
 8002970:	4708      	bx	r1
 8002972:	2602      	movs	r6, #2
 8002974:	2100      	movs	r1, #0
 8002976:	46b4      	mov	ip, r6
 8002978:	9306      	str	r3, [sp, #24]
 800297a:	9e03      	ldr	r6, [sp, #12]
 800297c:	4688      	mov	r8, r1
 800297e:	468a      	mov	sl, r1
 8002980:	4658      	mov	r0, fp
 8002982:	7801      	ldrb	r1, [r0, #0]
 8002984:	3001      	adds	r0, #1
 8002986:	9107      	str	r1, [sp, #28]
 8002988:	2978      	cmp	r1, #120	; 0x78
 800298a:	d968      	bls.n	8002a5e <__ssvfiscanf_r+0x1be>
 800298c:	9a07      	ldr	r2, [sp, #28]
 800298e:	9b06      	ldr	r3, [sp, #24]
 8002990:	189b      	adds	r3, r3, r2
 8002992:	785b      	ldrb	r3, [r3, #1]
 8002994:	2203      	movs	r2, #3
 8002996:	9603      	str	r6, [sp, #12]
 8002998:	4683      	mov	fp, r0
 800299a:	4013      	ands	r3, r2
 800299c:	2b01      	cmp	r3, #1
 800299e:	d100      	bne.n	80029a2 <__ssvfiscanf_r+0x102>
 80029a0:	e2f1      	b.n	8002f86 <__ssvfiscanf_r+0x6e6>
 80029a2:	4e8d      	ldr	r6, [pc, #564]	; (8002bd8 <__ssvfiscanf_r+0x338>)
 80029a4:	960c      	str	r6, [sp, #48]	; 0x30
 80029a6:	260a      	movs	r6, #10
 80029a8:	960a      	str	r6, [sp, #40]	; 0x28
 80029aa:	2603      	movs	r6, #3
 80029ac:	9607      	str	r6, [sp, #28]
 80029ae:	6860      	ldr	r0, [r4, #4]
 80029b0:	2800      	cmp	r0, #0
 80029b2:	dc00      	bgt.n	80029b6 <__ssvfiscanf_r+0x116>
 80029b4:	e1db      	b.n	8002d6e <__ssvfiscanf_r+0x4ce>
 80029b6:	4641      	mov	r1, r8
 80029b8:	0649      	lsls	r1, r1, #25
 80029ba:	d41e      	bmi.n	80029fa <__ssvfiscanf_r+0x15a>
 80029bc:	6829      	ldr	r1, [r5, #0]
 80029be:	6823      	ldr	r3, [r4, #0]
 80029c0:	9e03      	ldr	r6, [sp, #12]
 80029c2:	e001      	b.n	80029c8 <__ssvfiscanf_r+0x128>
 80029c4:	3301      	adds	r3, #1
 80029c6:	6023      	str	r3, [r4, #0]
 80029c8:	781a      	ldrb	r2, [r3, #0]
 80029ca:	188a      	adds	r2, r1, r2
 80029cc:	7852      	ldrb	r2, [r2, #1]
 80029ce:	4217      	tst	r7, r2
 80029d0:	d012      	beq.n	80029f8 <__ssvfiscanf_r+0x158>
 80029d2:	6862      	ldr	r2, [r4, #4]
 80029d4:	3a01      	subs	r2, #1
 80029d6:	3601      	adds	r6, #1
 80029d8:	6062      	str	r2, [r4, #4]
 80029da:	2a00      	cmp	r2, #0
 80029dc:	dcf2      	bgt.n	80029c4 <__ssvfiscanf_r+0x124>
 80029de:	4648      	mov	r0, r9
 80029e0:	1c21      	adds	r1, r4, #0
 80029e2:	f7ff fef5 	bl	80027d0 <__ssrefill_r>
 80029e6:	2800      	cmp	r0, #0
 80029e8:	d144      	bne.n	8002a74 <__ssvfiscanf_r+0x1d4>
 80029ea:	6823      	ldr	r3, [r4, #0]
 80029ec:	6829      	ldr	r1, [r5, #0]
 80029ee:	781a      	ldrb	r2, [r3, #0]
 80029f0:	188a      	adds	r2, r1, r2
 80029f2:	7852      	ldrb	r2, [r2, #1]
 80029f4:	4217      	tst	r7, r2
 80029f6:	d1ec      	bne.n	80029d2 <__ssvfiscanf_r+0x132>
 80029f8:	9603      	str	r6, [sp, #12]
 80029fa:	9e07      	ldr	r6, [sp, #28]
 80029fc:	2e02      	cmp	r6, #2
 80029fe:	d100      	bne.n	8002a02 <__ssvfiscanf_r+0x162>
 8002a00:	e186      	b.n	8002d10 <__ssvfiscanf_r+0x470>
 8002a02:	2e03      	cmp	r6, #3
 8002a04:	d100      	bne.n	8002a08 <__ssvfiscanf_r+0x168>
 8002a06:	e0eb      	b.n	8002be0 <__ssvfiscanf_r+0x340>
 8002a08:	4650      	mov	r0, sl
 8002a0a:	2e01      	cmp	r6, #1
 8002a0c:	d100      	bne.n	8002a10 <__ssvfiscanf_r+0x170>
 8002a0e:	e0a9      	b.n	8002b64 <__ssvfiscanf_r+0x2c4>
 8002a10:	2800      	cmp	r0, #0
 8002a12:	d03a      	beq.n	8002a8a <__ssvfiscanf_r+0x1ea>
 8002a14:	4642      	mov	r2, r8
 8002a16:	07d2      	lsls	r2, r2, #31
 8002a18:	d43c      	bmi.n	8002a94 <__ssvfiscanf_r+0x1f4>
 8002a1a:	4641      	mov	r1, r8
 8002a1c:	06c9      	lsls	r1, r1, #27
 8002a1e:	d400      	bmi.n	8002a22 <__ssvfiscanf_r+0x182>
 8002a20:	e33e      	b.n	80030a0 <__ssvfiscanf_r+0x800>
 8002a22:	9b03      	ldr	r3, [sp, #12]
 8002a24:	2200      	movs	r2, #0
 8002a26:	4656      	mov	r6, sl
 8002a28:	4690      	mov	r8, r2
 8002a2a:	469a      	mov	sl, r3
 8002a2c:	6863      	ldr	r3, [r4, #4]
 8002a2e:	42b3      	cmp	r3, r6
 8002a30:	db00      	blt.n	8002a34 <__ssvfiscanf_r+0x194>
 8002a32:	e362      	b.n	80030fa <__ssvfiscanf_r+0x85a>
 8002a34:	6820      	ldr	r0, [r4, #0]
 8002a36:	4498      	add	r8, r3
 8002a38:	1af6      	subs	r6, r6, r3
 8002a3a:	18c3      	adds	r3, r0, r3
 8002a3c:	6023      	str	r3, [r4, #0]
 8002a3e:	4648      	mov	r0, r9
 8002a40:	1c21      	adds	r1, r4, #0
 8002a42:	f7ff fec5 	bl	80027d0 <__ssrefill_r>
 8002a46:	2800      	cmp	r0, #0
 8002a48:	d0f0      	beq.n	8002a2c <__ssvfiscanf_r+0x18c>
 8002a4a:	4656      	mov	r6, sl
 8002a4c:	4640      	mov	r0, r8
 8002a4e:	9603      	str	r6, [sp, #12]
 8002a50:	2800      	cmp	r0, #0
 8002a52:	d00f      	beq.n	8002a74 <__ssvfiscanf_r+0x1d4>
 8002a54:	9a03      	ldr	r2, [sp, #12]
 8002a56:	1c16      	adds	r6, r2, #0
 8002a58:	4446      	add	r6, r8
 8002a5a:	9603      	str	r6, [sp, #12]
 8002a5c:	e73e      	b.n	80028dc <__ssvfiscanf_r+0x3c>
 8002a5e:	4a5f      	ldr	r2, [pc, #380]	; (8002bdc <__ssvfiscanf_r+0x33c>)
 8002a60:	0089      	lsls	r1, r1, #2
 8002a62:	5853      	ldr	r3, [r2, r1]
 8002a64:	469f      	mov	pc, r3
 8002a66:	4648      	mov	r0, r9
 8002a68:	1c21      	adds	r1, r4, #0
 8002a6a:	f7ff feb1 	bl	80027d0 <__ssrefill_r>
 8002a6e:	2800      	cmp	r0, #0
 8002a70:	d100      	bne.n	8002a74 <__ssvfiscanf_r+0x1d4>
 8002a72:	e75e      	b.n	8002932 <__ssvfiscanf_r+0x92>
 8002a74:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8002a76:	2e00      	cmp	r6, #0
 8002a78:	d003      	beq.n	8002a82 <__ssvfiscanf_r+0x1e2>
 8002a7a:	89a3      	ldrh	r3, [r4, #12]
 8002a7c:	0658      	lsls	r0, r3, #25
 8002a7e:	d400      	bmi.n	8002a82 <__ssvfiscanf_r+0x1e2>
 8002a80:	e76d      	b.n	800295e <__ssvfiscanf_r+0xbe>
 8002a82:	2301      	movs	r3, #1
 8002a84:	425b      	negs	r3, r3
 8002a86:	9309      	str	r3, [sp, #36]	; 0x24
 8002a88:	e769      	b.n	800295e <__ssvfiscanf_r+0xbe>
 8002a8a:	2101      	movs	r1, #1
 8002a8c:	4642      	mov	r2, r8
 8002a8e:	468a      	mov	sl, r1
 8002a90:	07d2      	lsls	r2, r2, #31
 8002a92:	d5c2      	bpl.n	8002a1a <__ssvfiscanf_r+0x17a>
 8002a94:	a810      	add	r0, sp, #64	; 0x40
 8002a96:	2100      	movs	r1, #0
 8002a98:	2208      	movs	r2, #8
 8002a9a:	f7fe fc19 	bl	80012d0 <memset>
 8002a9e:	4646      	mov	r6, r8
 8002aa0:	2310      	movs	r3, #16
 8002aa2:	401e      	ands	r6, r3
 8002aa4:	9606      	str	r6, [sp, #24]
 8002aa6:	2600      	movs	r6, #0
 8002aa8:	9607      	str	r6, [sp, #28]
 8002aaa:	9e06      	ldr	r6, [sp, #24]
 8002aac:	2e00      	cmp	r6, #0
 8002aae:	d105      	bne.n	8002abc <__ssvfiscanf_r+0x21c>
 8002ab0:	9e08      	ldr	r6, [sp, #32]
 8002ab2:	6836      	ldr	r6, [r6, #0]
 8002ab4:	9607      	str	r6, [sp, #28]
 8002ab6:	9e08      	ldr	r6, [sp, #32]
 8002ab8:	3604      	adds	r6, #4
 8002aba:	9608      	str	r6, [sp, #32]
 8002abc:	2000      	movs	r0, #0
 8002abe:	4680      	mov	r8, r0
 8002ac0:	9907      	ldr	r1, [sp, #28]
 8002ac2:	9803      	ldr	r0, [sp, #12]
 8002ac4:	465e      	mov	r6, fp
 8002ac6:	960b      	str	r6, [sp, #44]	; 0x2c
 8002ac8:	4683      	mov	fp, r0
 8002aca:	1c26      	adds	r6, r4, #0
 8002acc:	4644      	mov	r4, r8
 8002ace:	4688      	mov	r8, r1
 8002ad0:	e016      	b.n	8002b00 <__ssvfiscanf_r+0x260>
 8002ad2:	9b06      	ldr	r3, [sp, #24]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d101      	bne.n	8002adc <__ssvfiscanf_r+0x23c>
 8002ad8:	4640      	mov	r0, r8
 8002ada:	6003      	str	r3, [r0, #0]
 8002adc:	2101      	movs	r1, #1
 8002ade:	9a06      	ldr	r2, [sp, #24]
 8002ae0:	4249      	negs	r1, r1
 8002ae2:	44a3      	add	fp, r4
 8002ae4:	448a      	add	sl, r1
 8002ae6:	2400      	movs	r4, #0
 8002ae8:	2a00      	cmp	r2, #0
 8002aea:	d102      	bne.n	8002af2 <__ssvfiscanf_r+0x252>
 8002aec:	2304      	movs	r3, #4
 8002aee:	4498      	add	r8, r3
 8002af0:	1c14      	adds	r4, r2, #0
 8002af2:	6870      	ldr	r0, [r6, #4]
 8002af4:	2800      	cmp	r0, #0
 8002af6:	dd24      	ble.n	8002b42 <__ssvfiscanf_r+0x2a2>
 8002af8:	4650      	mov	r0, sl
 8002afa:	2800      	cmp	r0, #0
 8002afc:	d100      	bne.n	8002b00 <__ssvfiscanf_r+0x260>
 8002afe:	e307      	b.n	8003110 <__ssvfiscanf_r+0x870>
 8002b00:	f7fe faf6 	bl	80010f0 <__locale_mb_cur_max>
 8002b04:	42a0      	cmp	r0, r4
 8002b06:	d100      	bne.n	8002b0a <__ssvfiscanf_r+0x26a>
 8002b08:	e2e7      	b.n	80030da <__ssvfiscanf_r+0x83a>
 8002b0a:	6833      	ldr	r3, [r6, #0]
 8002b0c:	781a      	ldrb	r2, [r3, #0]
 8002b0e:	a814      	add	r0, sp, #80	; 0x50
 8002b10:	5502      	strb	r2, [r0, r4]
 8002b12:	6872      	ldr	r2, [r6, #4]
 8002b14:	3301      	adds	r3, #1
 8002b16:	3a01      	subs	r2, #1
 8002b18:	a910      	add	r1, sp, #64	; 0x40
 8002b1a:	3401      	adds	r4, #1
 8002b1c:	6072      	str	r2, [r6, #4]
 8002b1e:	6033      	str	r3, [r6, #0]
 8002b20:	aa14      	add	r2, sp, #80	; 0x50
 8002b22:	9100      	str	r1, [sp, #0]
 8002b24:	4648      	mov	r0, r9
 8002b26:	4641      	mov	r1, r8
 8002b28:	1c23      	adds	r3, r4, #0
 8002b2a:	f7fe fb1f 	bl	800116c <_mbrtowc_r>
 8002b2e:	1c42      	adds	r2, r0, #1
 8002b30:	d100      	bne.n	8002b34 <__ssvfiscanf_r+0x294>
 8002b32:	e2d2      	b.n	80030da <__ssvfiscanf_r+0x83a>
 8002b34:	2800      	cmp	r0, #0
 8002b36:	d0cc      	beq.n	8002ad2 <__ssvfiscanf_r+0x232>
 8002b38:	3002      	adds	r0, #2
 8002b3a:	d1cf      	bne.n	8002adc <__ssvfiscanf_r+0x23c>
 8002b3c:	6870      	ldr	r0, [r6, #4]
 8002b3e:	2800      	cmp	r0, #0
 8002b40:	dcda      	bgt.n	8002af8 <__ssvfiscanf_r+0x258>
 8002b42:	4648      	mov	r0, r9
 8002b44:	1c31      	adds	r1, r6, #0
 8002b46:	f7ff fe43 	bl	80027d0 <__ssrefill_r>
 8002b4a:	2800      	cmp	r0, #0
 8002b4c:	d0d4      	beq.n	8002af8 <__ssvfiscanf_r+0x258>
 8002b4e:	46a0      	mov	r8, r4
 8002b50:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8002b52:	1c34      	adds	r4, r6, #0
 8002b54:	4641      	mov	r1, r8
 8002b56:	465e      	mov	r6, fp
 8002b58:	9603      	str	r6, [sp, #12]
 8002b5a:	4683      	mov	fp, r0
 8002b5c:	2900      	cmp	r1, #0
 8002b5e:	d100      	bne.n	8002b62 <__ssvfiscanf_r+0x2c2>
 8002b60:	e2db      	b.n	800311a <__ssvfiscanf_r+0x87a>
 8002b62:	e787      	b.n	8002a74 <__ssvfiscanf_r+0x1d4>
 8002b64:	2800      	cmp	r0, #0
 8002b66:	d102      	bne.n	8002b6e <__ssvfiscanf_r+0x2ce>
 8002b68:	2001      	movs	r0, #1
 8002b6a:	4240      	negs	r0, r0
 8002b6c:	4682      	mov	sl, r0
 8002b6e:	4641      	mov	r1, r8
 8002b70:	06c9      	lsls	r1, r1, #27
 8002b72:	d400      	bmi.n	8002b76 <__ssvfiscanf_r+0x2d6>
 8002b74:	e10a      	b.n	8002d8c <__ssvfiscanf_r+0x4ec>
 8002b76:	2200      	movs	r2, #0
 8002b78:	4690      	mov	r8, r2
 8002b7a:	9a03      	ldr	r2, [sp, #12]
 8002b7c:	ae1e      	add	r6, sp, #120	; 0x78
 8002b7e:	6823      	ldr	r3, [r4, #0]
 8002b80:	9607      	str	r6, [sp, #28]
 8002b82:	4646      	mov	r6, r8
 8002b84:	4690      	mov	r8, r2
 8002b86:	781a      	ldrb	r2, [r3, #0]
 8002b88:	9807      	ldr	r0, [sp, #28]
 8002b8a:	5c82      	ldrb	r2, [r0, r2]
 8002b8c:	2a00      	cmp	r2, #0
 8002b8e:	d017      	beq.n	8002bc0 <__ssvfiscanf_r+0x320>
 8002b90:	6862      	ldr	r2, [r4, #4]
 8002b92:	3301      	adds	r3, #1
 8002b94:	3a01      	subs	r2, #1
 8002b96:	3601      	adds	r6, #1
 8002b98:	6062      	str	r2, [r4, #4]
 8002b9a:	6023      	str	r3, [r4, #0]
 8002b9c:	45b2      	cmp	sl, r6
 8002b9e:	d100      	bne.n	8002ba2 <__ssvfiscanf_r+0x302>
 8002ba0:	e223      	b.n	8002fea <__ssvfiscanf_r+0x74a>
 8002ba2:	2a00      	cmp	r2, #0
 8002ba4:	dcef      	bgt.n	8002b86 <__ssvfiscanf_r+0x2e6>
 8002ba6:	4648      	mov	r0, r9
 8002ba8:	1c21      	adds	r1, r4, #0
 8002baa:	f7ff fe11 	bl	80027d0 <__ssrefill_r>
 8002bae:	2800      	cmp	r0, #0
 8002bb0:	d000      	beq.n	8002bb4 <__ssvfiscanf_r+0x314>
 8002bb2:	e21a      	b.n	8002fea <__ssvfiscanf_r+0x74a>
 8002bb4:	6823      	ldr	r3, [r4, #0]
 8002bb6:	9807      	ldr	r0, [sp, #28]
 8002bb8:	781a      	ldrb	r2, [r3, #0]
 8002bba:	5c82      	ldrb	r2, [r0, r2]
 8002bbc:	2a00      	cmp	r2, #0
 8002bbe:	d1e7      	bne.n	8002b90 <__ssvfiscanf_r+0x2f0>
 8002bc0:	4643      	mov	r3, r8
 8002bc2:	9303      	str	r3, [sp, #12]
 8002bc4:	46b0      	mov	r8, r6
 8002bc6:	2e00      	cmp	r6, #0
 8002bc8:	d000      	beq.n	8002bcc <__ssvfiscanf_r+0x32c>
 8002bca:	e211      	b.n	8002ff0 <__ssvfiscanf_r+0x750>
 8002bcc:	e6c7      	b.n	800295e <__ssvfiscanf_r+0xbe>
 8002bce:	46c0      	nop			; (mov r8, r8)
 8002bd0:	ffffdfff 	.word	0xffffdfff
 8002bd4:	200000f8 	.word	0x200000f8
 8002bd8:	08002421 	.word	0x08002421
 8002bdc:	0800e968 	.word	0x0800e968
 8002be0:	4653      	mov	r3, sl
 8002be2:	2600      	movs	r6, #0
 8002be4:	3b01      	subs	r3, #1
 8002be6:	960b      	str	r6, [sp, #44]	; 0x2c
 8002be8:	2b26      	cmp	r3, #38	; 0x26
 8002bea:	d904      	bls.n	8002bf6 <__ssvfiscanf_r+0x356>
 8002bec:	4656      	mov	r6, sl
 8002bee:	3e27      	subs	r6, #39	; 0x27
 8002bf0:	2027      	movs	r0, #39	; 0x27
 8002bf2:	960b      	str	r6, [sp, #44]	; 0x2c
 8002bf4:	4682      	mov	sl, r0
 8002bf6:	23d8      	movs	r3, #216	; 0xd8
 8002bf8:	011b      	lsls	r3, r3, #4
 8002bfa:	4641      	mov	r1, r8
 8002bfc:	4319      	orrs	r1, r3
 8002bfe:	2600      	movs	r6, #0
 8002c00:	9b03      	ldr	r3, [sp, #12]
 8002c02:	960d      	str	r6, [sp, #52]	; 0x34
 8002c04:	ae14      	add	r6, sp, #80	; 0x50
 8002c06:	9607      	str	r6, [sp, #28]
 8002c08:	9606      	str	r6, [sp, #24]
 8002c0a:	4688      	mov	r8, r1
 8002c0c:	4656      	mov	r6, sl
 8002c0e:	469a      	mov	sl, r3
 8002c10:	6822      	ldr	r2, [r4, #0]
 8002c12:	7813      	ldrb	r3, [r2, #0]
 8002c14:	1c19      	adds	r1, r3, #0
 8002c16:	392b      	subs	r1, #43	; 0x2b
 8002c18:	0609      	lsls	r1, r1, #24
 8002c1a:	0e09      	lsrs	r1, r1, #24
 8002c1c:	294d      	cmp	r1, #77	; 0x4d
 8002c1e:	d91c      	bls.n	8002c5a <__ssvfiscanf_r+0x3ba>
 8002c20:	4656      	mov	r6, sl
 8002c22:	4640      	mov	r0, r8
 8002c24:	9603      	str	r6, [sp, #12]
 8002c26:	05c0      	lsls	r0, r0, #23
 8002c28:	d509      	bpl.n	8002c3e <__ssvfiscanf_r+0x39e>
 8002c2a:	9e06      	ldr	r6, [sp, #24]
 8002c2c:	9807      	ldr	r0, [sp, #28]
 8002c2e:	4286      	cmp	r6, r0
 8002c30:	d900      	bls.n	8002c34 <__ssvfiscanf_r+0x394>
 8002c32:	e1ac      	b.n	8002f8e <__ssvfiscanf_r+0x6ee>
 8002c34:	9e06      	ldr	r6, [sp, #24]
 8002c36:	9807      	ldr	r0, [sp, #28]
 8002c38:	4286      	cmp	r6, r0
 8002c3a:	d100      	bne.n	8002c3e <__ssvfiscanf_r+0x39e>
 8002c3c:	e68f      	b.n	800295e <__ssvfiscanf_r+0xbe>
 8002c3e:	2310      	movs	r3, #16
 8002c40:	4641      	mov	r1, r8
 8002c42:	400b      	ands	r3, r1
 8002c44:	d100      	bne.n	8002c48 <__ssvfiscanf_r+0x3a8>
 8002c46:	e209      	b.n	800305c <__ssvfiscanf_r+0x7bc>
 8002c48:	9e06      	ldr	r6, [sp, #24]
 8002c4a:	9807      	ldr	r0, [sp, #28]
 8002c4c:	1a33      	subs	r3, r6, r0
 8002c4e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8002c50:	199b      	adds	r3, r3, r6
 8002c52:	9e03      	ldr	r6, [sp, #12]
 8002c54:	18f6      	adds	r6, r6, r3
 8002c56:	9603      	str	r6, [sp, #12]
 8002c58:	e640      	b.n	80028dc <__ssvfiscanf_r+0x3c>
 8002c5a:	48d3      	ldr	r0, [pc, #844]	; (8002fa8 <__ssvfiscanf_r+0x708>)
 8002c5c:	0089      	lsls	r1, r1, #2
 8002c5e:	5841      	ldr	r1, [r0, r1]
 8002c60:	468f      	mov	pc, r1
 8002c62:	20c0      	movs	r0, #192	; 0xc0
 8002c64:	00c0      	lsls	r0, r0, #3
 8002c66:	4641      	mov	r1, r8
 8002c68:	4001      	ands	r1, r0
 8002c6a:	2080      	movs	r0, #128	; 0x80
 8002c6c:	0080      	lsls	r0, r0, #2
 8002c6e:	4281      	cmp	r1, r0
 8002c70:	d1d6      	bne.n	8002c20 <__ssvfiscanf_r+0x380>
 8002c72:	49ce      	ldr	r1, [pc, #824]	; (8002fac <__ssvfiscanf_r+0x70c>)
 8002c74:	4640      	mov	r0, r8
 8002c76:	4001      	ands	r1, r0
 8002c78:	20a0      	movs	r0, #160	; 0xa0
 8002c7a:	00c0      	lsls	r0, r0, #3
 8002c7c:	4308      	orrs	r0, r1
 8002c7e:	2110      	movs	r1, #16
 8002c80:	910a      	str	r1, [sp, #40]	; 0x28
 8002c82:	4680      	mov	r8, r0
 8002c84:	9806      	ldr	r0, [sp, #24]
 8002c86:	7003      	strb	r3, [r0, #0]
 8002c88:	3001      	adds	r0, #1
 8002c8a:	9006      	str	r0, [sp, #24]
 8002c8c:	6863      	ldr	r3, [r4, #4]
 8002c8e:	3b01      	subs	r3, #1
 8002c90:	6063      	str	r3, [r4, #4]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	dd73      	ble.n	8002d7e <__ssvfiscanf_r+0x4de>
 8002c96:	3201      	adds	r2, #1
 8002c98:	6022      	str	r2, [r4, #0]
 8002c9a:	3e01      	subs	r6, #1
 8002c9c:	2e00      	cmp	r6, #0
 8002c9e:	d1b7      	bne.n	8002c10 <__ssvfiscanf_r+0x370>
 8002ca0:	e7be      	b.n	8002c20 <__ssvfiscanf_r+0x380>
 8002ca2:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002ca4:	290a      	cmp	r1, #10
 8002ca6:	ddbb      	ble.n	8002c20 <__ssvfiscanf_r+0x380>
 8002ca8:	49c1      	ldr	r1, [pc, #772]	; (8002fb0 <__ssvfiscanf_r+0x710>)
 8002caa:	4640      	mov	r0, r8
 8002cac:	4008      	ands	r0, r1
 8002cae:	4680      	mov	r8, r0
 8002cb0:	e7e8      	b.n	8002c84 <__ssvfiscanf_r+0x3e4>
 8002cb2:	2180      	movs	r1, #128	; 0x80
 8002cb4:	4640      	mov	r0, r8
 8002cb6:	4201      	tst	r1, r0
 8002cb8:	d0b2      	beq.n	8002c20 <__ssvfiscanf_r+0x380>
 8002cba:	4388      	bics	r0, r1
 8002cbc:	4680      	mov	r8, r0
 8002cbe:	e7e1      	b.n	8002c84 <__ssvfiscanf_r+0x3e4>
 8002cc0:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002cc2:	48bc      	ldr	r0, [pc, #752]	; (8002fb4 <__ssvfiscanf_r+0x714>)
 8002cc4:	0049      	lsls	r1, r1, #1
 8002cc6:	5e40      	ldrsh	r0, [r0, r1]
 8002cc8:	49b9      	ldr	r1, [pc, #740]	; (8002fb0 <__ssvfiscanf_r+0x710>)
 8002cca:	900a      	str	r0, [sp, #40]	; 0x28
 8002ccc:	4640      	mov	r0, r8
 8002cce:	4008      	ands	r0, r1
 8002cd0:	4680      	mov	r8, r0
 8002cd2:	e7d7      	b.n	8002c84 <__ssvfiscanf_r+0x3e4>
 8002cd4:	4641      	mov	r1, r8
 8002cd6:	0509      	lsls	r1, r1, #20
 8002cd8:	d5d4      	bpl.n	8002c84 <__ssvfiscanf_r+0x3e4>
 8002cda:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002cdc:	2800      	cmp	r0, #0
 8002cde:	d106      	bne.n	8002cee <__ssvfiscanf_r+0x44e>
 8002ce0:	2080      	movs	r0, #128	; 0x80
 8002ce2:	4641      	mov	r1, r8
 8002ce4:	0080      	lsls	r0, r0, #2
 8002ce6:	4301      	orrs	r1, r0
 8002ce8:	4688      	mov	r8, r1
 8002cea:	2108      	movs	r1, #8
 8002cec:	910a      	str	r1, [sp, #40]	; 0x28
 8002cee:	4640      	mov	r0, r8
 8002cf0:	0540      	lsls	r0, r0, #21
 8002cf2:	d400      	bmi.n	8002cf6 <__ssvfiscanf_r+0x456>
 8002cf4:	e1f3      	b.n	80030de <__ssvfiscanf_r+0x83e>
 8002cf6:	49b0      	ldr	r1, [pc, #704]	; (8002fb8 <__ssvfiscanf_r+0x718>)
 8002cf8:	4640      	mov	r0, r8
 8002cfa:	4008      	ands	r0, r1
 8002cfc:	4680      	mov	r8, r0
 8002cfe:	e7c1      	b.n	8002c84 <__ssvfiscanf_r+0x3e4>
 8002d00:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002d02:	48ac      	ldr	r0, [pc, #688]	; (8002fb4 <__ssvfiscanf_r+0x714>)
 8002d04:	0049      	lsls	r1, r1, #1
 8002d06:	5e40      	ldrsh	r0, [r0, r1]
 8002d08:	900a      	str	r0, [sp, #40]	; 0x28
 8002d0a:	2808      	cmp	r0, #8
 8002d0c:	dccc      	bgt.n	8002ca8 <__ssvfiscanf_r+0x408>
 8002d0e:	e787      	b.n	8002c20 <__ssvfiscanf_r+0x380>
 8002d10:	4650      	mov	r0, sl
 8002d12:	2800      	cmp	r0, #0
 8002d14:	d102      	bne.n	8002d1c <__ssvfiscanf_r+0x47c>
 8002d16:	2001      	movs	r0, #1
 8002d18:	4240      	negs	r0, r0
 8002d1a:	4682      	mov	sl, r0
 8002d1c:	4641      	mov	r1, r8
 8002d1e:	07c9      	lsls	r1, r1, #31
 8002d20:	d500      	bpl.n	8002d24 <__ssvfiscanf_r+0x484>
 8002d22:	e16a      	b.n	8002ffa <__ssvfiscanf_r+0x75a>
 8002d24:	4640      	mov	r0, r8
 8002d26:	06c0      	lsls	r0, r0, #27
 8002d28:	d571      	bpl.n	8002e0e <__ssvfiscanf_r+0x56e>
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	4690      	mov	r8, r2
 8002d2e:	9a03      	ldr	r2, [sp, #12]
 8002d30:	6829      	ldr	r1, [r5, #0]
 8002d32:	6823      	ldr	r3, [r4, #0]
 8002d34:	4646      	mov	r6, r8
 8002d36:	4690      	mov	r8, r2
 8002d38:	781a      	ldrb	r2, [r3, #0]
 8002d3a:	188a      	adds	r2, r1, r2
 8002d3c:	7852      	ldrb	r2, [r2, #1]
 8002d3e:	4217      	tst	r7, r2
 8002d40:	d000      	beq.n	8002d44 <__ssvfiscanf_r+0x4a4>
 8002d42:	e13f      	b.n	8002fc4 <__ssvfiscanf_r+0x724>
 8002d44:	6862      	ldr	r2, [r4, #4]
 8002d46:	3301      	adds	r3, #1
 8002d48:	3a01      	subs	r2, #1
 8002d4a:	3601      	adds	r6, #1
 8002d4c:	6062      	str	r2, [r4, #4]
 8002d4e:	6023      	str	r3, [r4, #0]
 8002d50:	45b2      	cmp	sl, r6
 8002d52:	d100      	bne.n	8002d56 <__ssvfiscanf_r+0x4b6>
 8002d54:	e136      	b.n	8002fc4 <__ssvfiscanf_r+0x724>
 8002d56:	2a00      	cmp	r2, #0
 8002d58:	dcee      	bgt.n	8002d38 <__ssvfiscanf_r+0x498>
 8002d5a:	4648      	mov	r0, r9
 8002d5c:	1c21      	adds	r1, r4, #0
 8002d5e:	f7ff fd37 	bl	80027d0 <__ssrefill_r>
 8002d62:	2800      	cmp	r0, #0
 8002d64:	d000      	beq.n	8002d68 <__ssvfiscanf_r+0x4c8>
 8002d66:	e12d      	b.n	8002fc4 <__ssvfiscanf_r+0x724>
 8002d68:	6829      	ldr	r1, [r5, #0]
 8002d6a:	6823      	ldr	r3, [r4, #0]
 8002d6c:	e7e4      	b.n	8002d38 <__ssvfiscanf_r+0x498>
 8002d6e:	4648      	mov	r0, r9
 8002d70:	1c21      	adds	r1, r4, #0
 8002d72:	f7ff fd2d 	bl	80027d0 <__ssrefill_r>
 8002d76:	2800      	cmp	r0, #0
 8002d78:	d100      	bne.n	8002d7c <__ssvfiscanf_r+0x4dc>
 8002d7a:	e61c      	b.n	80029b6 <__ssvfiscanf_r+0x116>
 8002d7c:	e67a      	b.n	8002a74 <__ssvfiscanf_r+0x1d4>
 8002d7e:	4648      	mov	r0, r9
 8002d80:	1c21      	adds	r1, r4, #0
 8002d82:	f7ff fd25 	bl	80027d0 <__ssrefill_r>
 8002d86:	2800      	cmp	r0, #0
 8002d88:	d087      	beq.n	8002c9a <__ssvfiscanf_r+0x3fa>
 8002d8a:	e749      	b.n	8002c20 <__ssvfiscanf_r+0x380>
 8002d8c:	9e08      	ldr	r6, [sp, #32]
 8002d8e:	3604      	adds	r6, #4
 8002d90:	960b      	str	r6, [sp, #44]	; 0x2c
 8002d92:	9e08      	ldr	r6, [sp, #32]
 8002d94:	6830      	ldr	r0, [r6, #0]
 8002d96:	9a03      	ldr	r2, [sp, #12]
 8002d98:	ae1e      	add	r6, sp, #120	; 0x78
 8002d9a:	6823      	ldr	r3, [r4, #0]
 8002d9c:	9006      	str	r0, [sp, #24]
 8002d9e:	9607      	str	r6, [sp, #28]
 8002da0:	4680      	mov	r8, r0
 8002da2:	4656      	mov	r6, sl
 8002da4:	4692      	mov	sl, r2
 8002da6:	781a      	ldrb	r2, [r3, #0]
 8002da8:	9807      	ldr	r0, [sp, #28]
 8002daa:	5c82      	ldrb	r2, [r0, r2]
 8002dac:	2a00      	cmp	r2, #0
 8002dae:	d01d      	beq.n	8002dec <__ssvfiscanf_r+0x54c>
 8002db0:	6862      	ldr	r2, [r4, #4]
 8002db2:	3a01      	subs	r2, #1
 8002db4:	6062      	str	r2, [r4, #4]
 8002db6:	9806      	ldr	r0, [sp, #24]
 8002db8:	781a      	ldrb	r2, [r3, #0]
 8002dba:	3e01      	subs	r6, #1
 8002dbc:	7002      	strb	r2, [r0, #0]
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	3001      	adds	r0, #1
 8002dc2:	9006      	str	r0, [sp, #24]
 8002dc4:	6023      	str	r3, [r4, #0]
 8002dc6:	2e00      	cmp	r6, #0
 8002dc8:	d100      	bne.n	8002dcc <__ssvfiscanf_r+0x52c>
 8002dca:	e160      	b.n	800308e <__ssvfiscanf_r+0x7ee>
 8002dcc:	6861      	ldr	r1, [r4, #4]
 8002dce:	2900      	cmp	r1, #0
 8002dd0:	dce9      	bgt.n	8002da6 <__ssvfiscanf_r+0x506>
 8002dd2:	4648      	mov	r0, r9
 8002dd4:	1c21      	adds	r1, r4, #0
 8002dd6:	f7ff fcfb 	bl	80027d0 <__ssrefill_r>
 8002dda:	2800      	cmp	r0, #0
 8002ddc:	d000      	beq.n	8002de0 <__ssvfiscanf_r+0x540>
 8002dde:	e1e4      	b.n	80031aa <__ssvfiscanf_r+0x90a>
 8002de0:	6823      	ldr	r3, [r4, #0]
 8002de2:	9807      	ldr	r0, [sp, #28]
 8002de4:	781a      	ldrb	r2, [r3, #0]
 8002de6:	5c82      	ldrb	r2, [r0, r2]
 8002de8:	2a00      	cmp	r2, #0
 8002dea:	d1e1      	bne.n	8002db0 <__ssvfiscanf_r+0x510>
 8002dec:	4656      	mov	r6, sl
 8002dee:	9603      	str	r6, [sp, #12]
 8002df0:	9e06      	ldr	r6, [sp, #24]
 8002df2:	4640      	mov	r0, r8
 8002df4:	1a36      	subs	r6, r6, r0
 8002df6:	46b0      	mov	r8, r6
 8002df8:	d100      	bne.n	8002dfc <__ssvfiscanf_r+0x55c>
 8002dfa:	e5b0      	b.n	800295e <__ssvfiscanf_r+0xbe>
 8002dfc:	9e06      	ldr	r6, [sp, #24]
 8002dfe:	2000      	movs	r0, #0
 8002e00:	7030      	strb	r0, [r6, #0]
 8002e02:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8002e04:	3601      	adds	r6, #1
 8002e06:	9609      	str	r6, [sp, #36]	; 0x24
 8002e08:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8002e0a:	9608      	str	r6, [sp, #32]
 8002e0c:	e0f0      	b.n	8002ff0 <__ssvfiscanf_r+0x750>
 8002e0e:	9e08      	ldr	r6, [sp, #32]
 8002e10:	3604      	adds	r6, #4
 8002e12:	9607      	str	r6, [sp, #28]
 8002e14:	9e08      	ldr	r6, [sp, #32]
 8002e16:	9a03      	ldr	r2, [sp, #12]
 8002e18:	6836      	ldr	r6, [r6, #0]
 8002e1a:	6823      	ldr	r3, [r4, #0]
 8002e1c:	9608      	str	r6, [sp, #32]
 8002e1e:	46b0      	mov	r8, r6
 8002e20:	4656      	mov	r6, sl
 8002e22:	4692      	mov	sl, r2
 8002e24:	781a      	ldrb	r2, [r3, #0]
 8002e26:	6829      	ldr	r1, [r5, #0]
 8002e28:	188a      	adds	r2, r1, r2
 8002e2a:	7852      	ldrb	r2, [r2, #1]
 8002e2c:	4217      	tst	r7, r2
 8002e2e:	d000      	beq.n	8002e32 <__ssvfiscanf_r+0x592>
 8002e30:	e0cd      	b.n	8002fce <__ssvfiscanf_r+0x72e>
 8002e32:	6862      	ldr	r2, [r4, #4]
 8002e34:	3a01      	subs	r2, #1
 8002e36:	6062      	str	r2, [r4, #4]
 8002e38:	781a      	ldrb	r2, [r3, #0]
 8002e3a:	4641      	mov	r1, r8
 8002e3c:	700a      	strb	r2, [r1, #0]
 8002e3e:	3301      	adds	r3, #1
 8002e40:	2201      	movs	r2, #1
 8002e42:	3e01      	subs	r6, #1
 8002e44:	4490      	add	r8, r2
 8002e46:	6023      	str	r3, [r4, #0]
 8002e48:	2e00      	cmp	r6, #0
 8002e4a:	d100      	bne.n	8002e4e <__ssvfiscanf_r+0x5ae>
 8002e4c:	e0bf      	b.n	8002fce <__ssvfiscanf_r+0x72e>
 8002e4e:	6860      	ldr	r0, [r4, #4]
 8002e50:	2800      	cmp	r0, #0
 8002e52:	dce7      	bgt.n	8002e24 <__ssvfiscanf_r+0x584>
 8002e54:	4648      	mov	r0, r9
 8002e56:	1c21      	adds	r1, r4, #0
 8002e58:	f7ff fcba 	bl	80027d0 <__ssrefill_r>
 8002e5c:	2800      	cmp	r0, #0
 8002e5e:	d000      	beq.n	8002e62 <__ssvfiscanf_r+0x5c2>
 8002e60:	e0b5      	b.n	8002fce <__ssvfiscanf_r+0x72e>
 8002e62:	6823      	ldr	r3, [r4, #0]
 8002e64:	e7de      	b.n	8002e24 <__ssvfiscanf_r+0x584>
 8002e66:	4683      	mov	fp, r0
 8002e68:	9603      	str	r6, [sp, #12]
 8002e6a:	ae1e      	add	r6, sp, #120	; 0x78
 8002e6c:	1c30      	adds	r0, r6, #0
 8002e6e:	4659      	mov	r1, fp
 8002e70:	9607      	str	r6, [sp, #28]
 8002e72:	f7fe fabd 	bl	80013f0 <__sccl>
 8002e76:	2340      	movs	r3, #64	; 0x40
 8002e78:	4683      	mov	fp, r0
 8002e7a:	4640      	mov	r0, r8
 8002e7c:	4318      	orrs	r0, r3
 8002e7e:	2601      	movs	r6, #1
 8002e80:	4680      	mov	r8, r0
 8002e82:	9607      	str	r6, [sp, #28]
 8002e84:	e593      	b.n	80029ae <__ssvfiscanf_r+0x10e>
 8002e86:	4683      	mov	fp, r0
 8002e88:	2340      	movs	r3, #64	; 0x40
 8002e8a:	4640      	mov	r0, r8
 8002e8c:	9603      	str	r6, [sp, #12]
 8002e8e:	4318      	orrs	r0, r3
 8002e90:	2600      	movs	r6, #0
 8002e92:	4680      	mov	r8, r0
 8002e94:	9607      	str	r6, [sp, #28]
 8002e96:	e58a      	b.n	80029ae <__ssvfiscanf_r+0x10e>
 8002e98:	9603      	str	r6, [sp, #12]
 8002e9a:	4683      	mov	fp, r0
 8002e9c:	e581      	b.n	80029a2 <__ssvfiscanf_r+0x102>
 8002e9e:	4641      	mov	r1, r8
 8002ea0:	2204      	movs	r2, #4
 8002ea2:	4311      	orrs	r1, r2
 8002ea4:	4688      	mov	r8, r1
 8002ea6:	e56c      	b.n	8002982 <__ssvfiscanf_r+0xe2>
 8002ea8:	9603      	str	r6, [sp, #12]
 8002eaa:	4e44      	ldr	r6, [pc, #272]	; (8002fbc <__ssvfiscanf_r+0x71c>)
 8002eac:	960c      	str	r6, [sp, #48]	; 0x30
 8002eae:	2600      	movs	r6, #0
 8002eb0:	960a      	str	r6, [sp, #40]	; 0x28
 8002eb2:	2603      	movs	r6, #3
 8002eb4:	4683      	mov	fp, r0
 8002eb6:	9607      	str	r6, [sp, #28]
 8002eb8:	e579      	b.n	80029ae <__ssvfiscanf_r+0x10e>
 8002eba:	4643      	mov	r3, r8
 8002ebc:	2101      	movs	r1, #1
 8002ebe:	430b      	orrs	r3, r1
 8002ec0:	4698      	mov	r8, r3
 8002ec2:	e55e      	b.n	8002982 <__ssvfiscanf_r+0xe2>
 8002ec4:	4683      	mov	fp, r0
 8002ec6:	4640      	mov	r0, r8
 8002ec8:	9603      	str	r6, [sp, #12]
 8002eca:	06c0      	lsls	r0, r0, #27
 8002ecc:	d500      	bpl.n	8002ed0 <__ssvfiscanf_r+0x630>
 8002ece:	e505      	b.n	80028dc <__ssvfiscanf_r+0x3c>
 8002ed0:	4641      	mov	r1, r8
 8002ed2:	0749      	lsls	r1, r1, #29
 8002ed4:	d400      	bmi.n	8002ed8 <__ssvfiscanf_r+0x638>
 8002ed6:	e128      	b.n	800312a <__ssvfiscanf_r+0x88a>
 8002ed8:	9a08      	ldr	r2, [sp, #32]
 8002eda:	466b      	mov	r3, sp
 8002edc:	260c      	movs	r6, #12
 8002ede:	6812      	ldr	r2, [r2, #0]
 8002ee0:	5af6      	ldrh	r6, [r6, r3]
 8002ee2:	8016      	strh	r6, [r2, #0]
 8002ee4:	9e08      	ldr	r6, [sp, #32]
 8002ee6:	3604      	adds	r6, #4
 8002ee8:	9205      	str	r2, [sp, #20]
 8002eea:	9608      	str	r6, [sp, #32]
 8002eec:	e4f6      	b.n	80028dc <__ssvfiscanf_r+0x3c>
 8002eee:	9603      	str	r6, [sp, #12]
 8002ef0:	4683      	mov	fp, r0
 8002ef2:	4e33      	ldr	r6, [pc, #204]	; (8002fc0 <__ssvfiscanf_r+0x720>)
 8002ef4:	960c      	str	r6, [sp, #48]	; 0x30
 8002ef6:	2608      	movs	r6, #8
 8002ef8:	960a      	str	r6, [sp, #40]	; 0x28
 8002efa:	2603      	movs	r6, #3
 8002efc:	9607      	str	r6, [sp, #28]
 8002efe:	e556      	b.n	80029ae <__ssvfiscanf_r+0x10e>
 8002f00:	4642      	mov	r2, r8
 8002f02:	4663      	mov	r3, ip
 8002f04:	431a      	orrs	r2, r3
 8002f06:	4690      	mov	r8, r2
 8002f08:	e53b      	b.n	8002982 <__ssvfiscanf_r+0xe2>
 8002f0a:	4683      	mov	fp, r0
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	4640      	mov	r0, r8
 8002f10:	4318      	orrs	r0, r3
 8002f12:	9603      	str	r6, [sp, #12]
 8002f14:	4680      	mov	r8, r0
 8002f16:	e7ec      	b.n	8002ef2 <__ssvfiscanf_r+0x652>
 8002f18:	9603      	str	r6, [sp, #12]
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	4646      	mov	r6, r8
 8002f1e:	431e      	orrs	r6, r3
 8002f20:	4683      	mov	fp, r0
 8002f22:	46b0      	mov	r8, r6
 8002f24:	e53d      	b.n	80029a2 <__ssvfiscanf_r+0x102>
 8002f26:	9603      	str	r6, [sp, #12]
 8002f28:	4683      	mov	fp, r0
 8002f2a:	2380      	movs	r3, #128	; 0x80
 8002f2c:	4e24      	ldr	r6, [pc, #144]	; (8002fc0 <__ssvfiscanf_r+0x720>)
 8002f2e:	4640      	mov	r0, r8
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	960c      	str	r6, [sp, #48]	; 0x30
 8002f34:	2610      	movs	r6, #16
 8002f36:	4318      	orrs	r0, r3
 8002f38:	960a      	str	r6, [sp, #40]	; 0x28
 8002f3a:	2603      	movs	r6, #3
 8002f3c:	4680      	mov	r8, r0
 8002f3e:	9607      	str	r6, [sp, #28]
 8002f40:	e535      	b.n	80029ae <__ssvfiscanf_r+0x10e>
 8002f42:	4641      	mov	r1, r8
 8002f44:	2210      	movs	r2, #16
 8002f46:	4311      	orrs	r1, r2
 8002f48:	4688      	mov	r8, r1
 8002f4a:	e51a      	b.n	8002982 <__ssvfiscanf_r+0xe2>
 8002f4c:	4653      	mov	r3, sl
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	469b      	mov	fp, r3
 8002f52:	44da      	add	sl, fp
 8002f54:	4651      	mov	r1, sl
 8002f56:	0049      	lsls	r1, r1, #1
 8002f58:	2230      	movs	r2, #48	; 0x30
 8002f5a:	468a      	mov	sl, r1
 8002f5c:	4252      	negs	r2, r2
 8002f5e:	9b07      	ldr	r3, [sp, #28]
 8002f60:	4492      	add	sl, r2
 8002f62:	449a      	add	sl, r3
 8002f64:	e50d      	b.n	8002982 <__ssvfiscanf_r+0xe2>
 8002f66:	9603      	str	r6, [sp, #12]
 8002f68:	4683      	mov	fp, r0
 8002f6a:	2388      	movs	r3, #136	; 0x88
 8002f6c:	e7de      	b.n	8002f2c <__ssvfiscanf_r+0x68c>
 8002f6e:	9603      	str	r6, [sp, #12]
 8002f70:	2602      	movs	r6, #2
 8002f72:	4683      	mov	fp, r0
 8002f74:	9607      	str	r6, [sp, #28]
 8002f76:	e51a      	b.n	80029ae <__ssvfiscanf_r+0x10e>
 8002f78:	9603      	str	r6, [sp, #12]
 8002f7a:	4683      	mov	fp, r0
 8002f7c:	4e10      	ldr	r6, [pc, #64]	; (8002fc0 <__ssvfiscanf_r+0x720>)
 8002f7e:	e511      	b.n	80029a4 <__ssvfiscanf_r+0x104>
 8002f80:	9603      	str	r6, [sp, #12]
 8002f82:	4683      	mov	fp, r0
 8002f84:	e4d1      	b.n	800292a <__ssvfiscanf_r+0x8a>
 8002f86:	4640      	mov	r0, r8
 8002f88:	4318      	orrs	r0, r3
 8002f8a:	4680      	mov	r8, r0
 8002f8c:	e509      	b.n	80029a2 <__ssvfiscanf_r+0x102>
 8002f8e:	2101      	movs	r1, #1
 8002f90:	46b2      	mov	sl, r6
 8002f92:	4249      	negs	r1, r1
 8002f94:	448a      	add	sl, r1
 8002f96:	4652      	mov	r2, sl
 8002f98:	7811      	ldrb	r1, [r2, #0]
 8002f9a:	4648      	mov	r0, r9
 8002f9c:	1c22      	adds	r2, r4, #0
 8002f9e:	4656      	mov	r6, sl
 8002fa0:	f7ff fbd2 	bl	8002748 <_sungetc_r>
 8002fa4:	9606      	str	r6, [sp, #24]
 8002fa6:	e645      	b.n	8002c34 <__ssvfiscanf_r+0x394>
 8002fa8:	0800eb4c 	.word	0x0800eb4c
 8002fac:	fffffdff 	.word	0xfffffdff
 8002fb0:	fffff47f 	.word	0xfffff47f
 8002fb4:	0800ec84 	.word	0x0800ec84
 8002fb8:	fffffa7f 	.word	0xfffffa7f
 8002fbc:	08002421 	.word	0x08002421
 8002fc0:	080025b1 	.word	0x080025b1
 8002fc4:	4643      	mov	r3, r8
 8002fc6:	46b0      	mov	r8, r6
 8002fc8:	4443      	add	r3, r8
 8002fca:	9303      	str	r3, [sp, #12]
 8002fcc:	e486      	b.n	80028dc <__ssvfiscanf_r+0x3c>
 8002fce:	9e08      	ldr	r6, [sp, #32]
 8002fd0:	4640      	mov	r0, r8
 8002fd2:	4652      	mov	r2, sl
 8002fd4:	1b83      	subs	r3, r0, r6
 8002fd6:	18d6      	adds	r6, r2, r3
 8002fd8:	9603      	str	r6, [sp, #12]
 8002fda:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8002fdc:	3601      	adds	r6, #1
 8002fde:	9609      	str	r6, [sp, #36]	; 0x24
 8002fe0:	9e07      	ldr	r6, [sp, #28]
 8002fe2:	2100      	movs	r1, #0
 8002fe4:	7001      	strb	r1, [r0, #0]
 8002fe6:	9608      	str	r6, [sp, #32]
 8002fe8:	e478      	b.n	80028dc <__ssvfiscanf_r+0x3c>
 8002fea:	4643      	mov	r3, r8
 8002fec:	9303      	str	r3, [sp, #12]
 8002fee:	46b0      	mov	r8, r6
 8002ff0:	9803      	ldr	r0, [sp, #12]
 8002ff2:	1c06      	adds	r6, r0, #0
 8002ff4:	4446      	add	r6, r8
 8002ff6:	9603      	str	r6, [sp, #12]
 8002ff8:	e470      	b.n	80028dc <__ssvfiscanf_r+0x3c>
 8002ffa:	a812      	add	r0, sp, #72	; 0x48
 8002ffc:	2100      	movs	r1, #0
 8002ffe:	2208      	movs	r2, #8
 8003000:	f7fe f966 	bl	80012d0 <memset>
 8003004:	4646      	mov	r6, r8
 8003006:	2310      	movs	r3, #16
 8003008:	401e      	ands	r6, r3
 800300a:	9607      	str	r6, [sp, #28]
 800300c:	ae0f      	add	r6, sp, #60	; 0x3c
 800300e:	9606      	str	r6, [sp, #24]
 8003010:	9e07      	ldr	r6, [sp, #28]
 8003012:	2e00      	cmp	r6, #0
 8003014:	d105      	bne.n	8003022 <__ssvfiscanf_r+0x782>
 8003016:	9e08      	ldr	r6, [sp, #32]
 8003018:	6836      	ldr	r6, [r6, #0]
 800301a:	9606      	str	r6, [sp, #24]
 800301c:	9e08      	ldr	r6, [sp, #32]
 800301e:	3604      	adds	r6, #4
 8003020:	9608      	str	r6, [sp, #32]
 8003022:	9903      	ldr	r1, [sp, #12]
 8003024:	1c23      	adds	r3, r4, #0
 8003026:	2000      	movs	r0, #0
 8003028:	1c04      	adds	r4, r0, #0
 800302a:	4688      	mov	r8, r1
 800302c:	1c1e      	adds	r6, r3, #0
 800302e:	6832      	ldr	r2, [r6, #0]
 8003030:	6828      	ldr	r0, [r5, #0]
 8003032:	7813      	ldrb	r3, [r2, #0]
 8003034:	18c3      	adds	r3, r0, r3
 8003036:	785b      	ldrb	r3, [r3, #1]
 8003038:	421f      	tst	r7, r3
 800303a:	d14a      	bne.n	80030d2 <__ssvfiscanf_r+0x832>
 800303c:	4651      	mov	r1, sl
 800303e:	2900      	cmp	r1, #0
 8003040:	d17c      	bne.n	800313c <__ssvfiscanf_r+0x89c>
 8003042:	1c34      	adds	r4, r6, #0
 8003044:	4646      	mov	r6, r8
 8003046:	9603      	str	r6, [sp, #12]
 8003048:	9e07      	ldr	r6, [sp, #28]
 800304a:	2e00      	cmp	r6, #0
 800304c:	d000      	beq.n	8003050 <__ssvfiscanf_r+0x7b0>
 800304e:	e445      	b.n	80028dc <__ssvfiscanf_r+0x3c>
 8003050:	9806      	ldr	r0, [sp, #24]
 8003052:	6006      	str	r6, [r0, #0]
 8003054:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8003056:	3601      	adds	r6, #1
 8003058:	9609      	str	r6, [sp, #36]	; 0x24
 800305a:	e43f      	b.n	80028dc <__ssvfiscanf_r+0x3c>
 800305c:	9e06      	ldr	r6, [sp, #24]
 800305e:	a914      	add	r1, sp, #80	; 0x50
 8003060:	7033      	strb	r3, [r6, #0]
 8003062:	4648      	mov	r0, r9
 8003064:	2200      	movs	r2, #0
 8003066:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003068:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800306a:	f000 f8cd 	bl	8003208 <__ssvfiscanf_r+0x968>
 800306e:	4641      	mov	r1, r8
 8003070:	0689      	lsls	r1, r1, #26
 8003072:	d40f      	bmi.n	8003094 <__ssvfiscanf_r+0x7f4>
 8003074:	4641      	mov	r1, r8
 8003076:	0749      	lsls	r1, r1, #29
 8003078:	d50c      	bpl.n	8003094 <__ssvfiscanf_r+0x7f4>
 800307a:	9a08      	ldr	r2, [sp, #32]
 800307c:	9e08      	ldr	r6, [sp, #32]
 800307e:	6812      	ldr	r2, [r2, #0]
 8003080:	3604      	adds	r6, #4
 8003082:	8010      	strh	r0, [r2, #0]
 8003084:	9608      	str	r6, [sp, #32]
 8003086:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8003088:	3601      	adds	r6, #1
 800308a:	9609      	str	r6, [sp, #36]	; 0x24
 800308c:	e5dc      	b.n	8002c48 <__ssvfiscanf_r+0x3a8>
 800308e:	4656      	mov	r6, sl
 8003090:	9603      	str	r6, [sp, #12]
 8003092:	e6ad      	b.n	8002df0 <__ssvfiscanf_r+0x550>
 8003094:	9e08      	ldr	r6, [sp, #32]
 8003096:	6833      	ldr	r3, [r6, #0]
 8003098:	3604      	adds	r6, #4
 800309a:	6018      	str	r0, [r3, #0]
 800309c:	9608      	str	r6, [sp, #32]
 800309e:	e7f2      	b.n	8003086 <__ssvfiscanf_r+0x7e6>
 80030a0:	9808      	ldr	r0, [sp, #32]
 80030a2:	9e08      	ldr	r6, [sp, #32]
 80030a4:	4680      	mov	r8, r0
 80030a6:	2004      	movs	r0, #4
 80030a8:	4480      	add	r8, r0
 80030aa:	6831      	ldr	r1, [r6, #0]
 80030ac:	4648      	mov	r0, r9
 80030ae:	9400      	str	r4, [sp, #0]
 80030b0:	2201      	movs	r2, #1
 80030b2:	4653      	mov	r3, sl
 80030b4:	f7ff fbae 	bl	8002814 <_sfread_r>
 80030b8:	2800      	cmp	r0, #0
 80030ba:	d100      	bne.n	80030be <__ssvfiscanf_r+0x81e>
 80030bc:	e4da      	b.n	8002a74 <__ssvfiscanf_r+0x1d4>
 80030be:	9e03      	ldr	r6, [sp, #12]
 80030c0:	1986      	adds	r6, r0, r6
 80030c2:	9603      	str	r6, [sp, #12]
 80030c4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80030c6:	3601      	adds	r6, #1
 80030c8:	9609      	str	r6, [sp, #36]	; 0x24
 80030ca:	4646      	mov	r6, r8
 80030cc:	9608      	str	r6, [sp, #32]
 80030ce:	f7ff fc05 	bl	80028dc <__ssvfiscanf_r+0x3c>
 80030d2:	1c34      	adds	r4, r6, #0
 80030d4:	4646      	mov	r6, r8
 80030d6:	9603      	str	r6, [sp, #12]
 80030d8:	e7b6      	b.n	8003048 <__ssvfiscanf_r+0x7a8>
 80030da:	1c34      	adds	r4, r6, #0
 80030dc:	e4ca      	b.n	8002a74 <__ssvfiscanf_r+0x1d4>
 80030de:	4b49      	ldr	r3, [pc, #292]	; (8003204 <__ssvfiscanf_r+0x964>)
 80030e0:	4641      	mov	r1, r8
 80030e2:	4019      	ands	r1, r3
 80030e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80030e6:	4688      	mov	r8, r1
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d002      	beq.n	80030f2 <__ssvfiscanf_r+0x852>
 80030ec:	3b01      	subs	r3, #1
 80030ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80030f0:	3601      	adds	r6, #1
 80030f2:	980d      	ldr	r0, [sp, #52]	; 0x34
 80030f4:	3001      	adds	r0, #1
 80030f6:	900d      	str	r0, [sp, #52]	; 0x34
 80030f8:	e5c8      	b.n	8002c8c <__ssvfiscanf_r+0x3ec>
 80030fa:	6821      	ldr	r1, [r4, #0]
 80030fc:	4652      	mov	r2, sl
 80030fe:	1c08      	adds	r0, r1, #0
 8003100:	46b2      	mov	sl, r6
 8003102:	1b9b      	subs	r3, r3, r6
 8003104:	4450      	add	r0, sl
 8003106:	9203      	str	r2, [sp, #12]
 8003108:	44d0      	add	r8, sl
 800310a:	6063      	str	r3, [r4, #4]
 800310c:	6020      	str	r0, [r4, #0]
 800310e:	e4a1      	b.n	8002a54 <__ssvfiscanf_r+0x1b4>
 8003110:	1c34      	adds	r4, r6, #0
 8003112:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003114:	465e      	mov	r6, fp
 8003116:	9603      	str	r6, [sp, #12]
 8003118:	4683      	mov	fp, r0
 800311a:	9e06      	ldr	r6, [sp, #24]
 800311c:	4273      	negs	r3, r6
 800311e:	4173      	adcs	r3, r6
 8003120:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8003122:	18f6      	adds	r6, r6, r3
 8003124:	9609      	str	r6, [sp, #36]	; 0x24
 8003126:	f7ff fbd9 	bl	80028dc <__ssvfiscanf_r+0x3c>
 800312a:	9e08      	ldr	r6, [sp, #32]
 800312c:	6833      	ldr	r3, [r6, #0]
 800312e:	9e03      	ldr	r6, [sp, #12]
 8003130:	601e      	str	r6, [r3, #0]
 8003132:	9e08      	ldr	r6, [sp, #32]
 8003134:	3604      	adds	r6, #4
 8003136:	9608      	str	r6, [sp, #32]
 8003138:	f7ff fbd0 	bl	80028dc <__ssvfiscanf_r+0x3c>
 800313c:	f7fd ffd8 	bl	80010f0 <__locale_mb_cur_max>
 8003140:	42a0      	cmp	r0, r4
 8003142:	d0ca      	beq.n	80030da <__ssvfiscanf_r+0x83a>
 8003144:	6833      	ldr	r3, [r6, #0]
 8003146:	781a      	ldrb	r2, [r3, #0]
 8003148:	a814      	add	r0, sp, #80	; 0x50
 800314a:	5502      	strb	r2, [r0, r4]
 800314c:	6872      	ldr	r2, [r6, #4]
 800314e:	3301      	adds	r3, #1
 8003150:	3a01      	subs	r2, #1
 8003152:	a912      	add	r1, sp, #72	; 0x48
 8003154:	3401      	adds	r4, #1
 8003156:	6072      	str	r2, [r6, #4]
 8003158:	6033      	str	r3, [r6, #0]
 800315a:	aa14      	add	r2, sp, #80	; 0x50
 800315c:	9100      	str	r1, [sp, #0]
 800315e:	4648      	mov	r0, r9
 8003160:	9906      	ldr	r1, [sp, #24]
 8003162:	1c23      	adds	r3, r4, #0
 8003164:	f7fe f802 	bl	800116c <_mbrtowc_r>
 8003168:	1c42      	adds	r2, r0, #1
 800316a:	d0b6      	beq.n	80030da <__ssvfiscanf_r+0x83a>
 800316c:	2800      	cmp	r0, #0
 800316e:	d123      	bne.n	80031b8 <__ssvfiscanf_r+0x918>
 8003170:	9b06      	ldr	r3, [sp, #24]
 8003172:	6018      	str	r0, [r3, #0]
 8003174:	f7fd ff84 	bl	8001080 <iswspace>
 8003178:	2800      	cmp	r0, #0
 800317a:	d022      	beq.n	80031c2 <__ssvfiscanf_r+0x922>
 800317c:	1c33      	adds	r3, r6, #0
 800317e:	4646      	mov	r6, r8
 8003180:	46a0      	mov	r8, r4
 8003182:	4640      	mov	r0, r8
 8003184:	9603      	str	r6, [sp, #12]
 8003186:	1c1c      	adds	r4, r3, #0
 8003188:	2800      	cmp	r0, #0
 800318a:	d100      	bne.n	800318e <__ssvfiscanf_r+0x8ee>
 800318c:	e75c      	b.n	8003048 <__ssvfiscanf_r+0x7a8>
 800318e:	4644      	mov	r4, r8
 8003190:	4698      	mov	r8, r3
 8003192:	3c01      	subs	r4, #1
 8003194:	aa14      	add	r2, sp, #80	; 0x50
 8003196:	5d11      	ldrb	r1, [r2, r4]
 8003198:	4648      	mov	r0, r9
 800319a:	4642      	mov	r2, r8
 800319c:	f7ff fad4 	bl	8002748 <_sungetc_r>
 80031a0:	2c00      	cmp	r4, #0
 80031a2:	d1f6      	bne.n	8003192 <__ssvfiscanf_r+0x8f2>
 80031a4:	9603      	str	r6, [sp, #12]
 80031a6:	4644      	mov	r4, r8
 80031a8:	e74e      	b.n	8003048 <__ssvfiscanf_r+0x7a8>
 80031aa:	4656      	mov	r6, sl
 80031ac:	9603      	str	r6, [sp, #12]
 80031ae:	9e06      	ldr	r6, [sp, #24]
 80031b0:	45b0      	cmp	r8, r6
 80031b2:	d000      	beq.n	80031b6 <__ssvfiscanf_r+0x916>
 80031b4:	e61c      	b.n	8002df0 <__ssvfiscanf_r+0x550>
 80031b6:	e45d      	b.n	8002a74 <__ssvfiscanf_r+0x1d4>
 80031b8:	3002      	adds	r0, #2
 80031ba:	d00e      	beq.n	80031da <__ssvfiscanf_r+0x93a>
 80031bc:	9906      	ldr	r1, [sp, #24]
 80031be:	6808      	ldr	r0, [r1, #0]
 80031c0:	e7d8      	b.n	8003174 <__ssvfiscanf_r+0x8d4>
 80031c2:	2301      	movs	r3, #1
 80031c4:	9807      	ldr	r0, [sp, #28]
 80031c6:	425b      	negs	r3, r3
 80031c8:	44a0      	add	r8, r4
 80031ca:	449a      	add	sl, r3
 80031cc:	2400      	movs	r4, #0
 80031ce:	2800      	cmp	r0, #0
 80031d0:	d103      	bne.n	80031da <__ssvfiscanf_r+0x93a>
 80031d2:	9906      	ldr	r1, [sp, #24]
 80031d4:	3104      	adds	r1, #4
 80031d6:	9106      	str	r1, [sp, #24]
 80031d8:	1c04      	adds	r4, r0, #0
 80031da:	6872      	ldr	r2, [r6, #4]
 80031dc:	2a00      	cmp	r2, #0
 80031de:	dd00      	ble.n	80031e2 <__ssvfiscanf_r+0x942>
 80031e0:	e725      	b.n	800302e <__ssvfiscanf_r+0x78e>
 80031e2:	4648      	mov	r0, r9
 80031e4:	1c31      	adds	r1, r6, #0
 80031e6:	f7ff faf3 	bl	80027d0 <__ssrefill_r>
 80031ea:	2800      	cmp	r0, #0
 80031ec:	d100      	bne.n	80031f0 <__ssvfiscanf_r+0x950>
 80031ee:	e71e      	b.n	800302e <__ssvfiscanf_r+0x78e>
 80031f0:	4640      	mov	r0, r8
 80031f2:	46a0      	mov	r8, r4
 80031f4:	1c33      	adds	r3, r6, #0
 80031f6:	4641      	mov	r1, r8
 80031f8:	9003      	str	r0, [sp, #12]
 80031fa:	1c1c      	adds	r4, r3, #0
 80031fc:	2900      	cmp	r1, #0
 80031fe:	d000      	beq.n	8003202 <__ssvfiscanf_r+0x962>
 8003200:	e438      	b.n	8002a74 <__ssvfiscanf_r+0x1d4>
 8003202:	e721      	b.n	8003048 <__ssvfiscanf_r+0x7a8>
 8003204:	fffffc7f 	.word	0xfffffc7f
 8003208:	4730      	bx	r6
 800320a:	46c0      	nop			; (mov r8, r8)
 800320c:	0000      	movs	r0, r0
	...

08003210 <_svfprintf_r>:
 8003210:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003212:	464d      	mov	r5, r9
 8003214:	4644      	mov	r4, r8
 8003216:	465f      	mov	r7, fp
 8003218:	4656      	mov	r6, sl
 800321a:	b4f0      	push	{r4, r5, r6, r7}
 800321c:	b0c5      	sub	sp, #276	; 0x114
 800321e:	4689      	mov	r9, r1
 8003220:	9310      	str	r3, [sp, #64]	; 0x40
 8003222:	1c14      	adds	r4, r2, #0
 8003224:	900b      	str	r0, [sp, #44]	; 0x2c
 8003226:	f7fd ff71 	bl	800110c <_localeconv_r>
 800322a:	6800      	ldr	r0, [r0, #0]
 800322c:	9017      	str	r0, [sp, #92]	; 0x5c
 800322e:	f7fc ff91 	bl	8000154 <strlen>
 8003232:	901a      	str	r0, [sp, #104]	; 0x68
 8003234:	2000      	movs	r0, #0
 8003236:	2100      	movs	r1, #0
 8003238:	9018      	str	r0, [sp, #96]	; 0x60
 800323a:	9119      	str	r1, [sp, #100]	; 0x64
 800323c:	4649      	mov	r1, r9
 800323e:	898b      	ldrh	r3, [r1, #12]
 8003240:	061a      	lsls	r2, r3, #24
 8003242:	d504      	bpl.n	800324e <_svfprintf_r+0x3e>
 8003244:	690b      	ldr	r3, [r1, #16]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d101      	bne.n	800324e <_svfprintf_r+0x3e>
 800324a:	f000 ffa7 	bl	800419c <_svfprintf_r+0xf8c>
 800324e:	2200      	movs	r2, #0
 8003250:	9215      	str	r2, [sp, #84]	; 0x54
 8003252:	466a      	mov	r2, sp
 8003254:	2300      	movs	r3, #0
 8003256:	a934      	add	r1, sp, #208	; 0xd0
 8003258:	ae27      	add	r6, sp, #156	; 0x9c
 800325a:	32cf      	adds	r2, #207	; 0xcf
 800325c:	af34      	add	r7, sp, #208	; 0xd0
 800325e:	9108      	str	r1, [sp, #32]
 8003260:	9127      	str	r1, [sp, #156]	; 0x9c
 8003262:	60b3      	str	r3, [r6, #8]
 8003264:	6073      	str	r3, [r6, #4]
 8003266:	931c      	str	r3, [sp, #112]	; 0x70
 8003268:	2000      	movs	r0, #0
 800326a:	2100      	movs	r1, #0
 800326c:	1abb      	subs	r3, r7, r2
 800326e:	901b      	str	r0, [sp, #108]	; 0x6c
 8003270:	910f      	str	r1, [sp, #60]	; 0x3c
 8003272:	9207      	str	r2, [sp, #28]
 8003274:	931d      	str	r3, [sp, #116]	; 0x74
 8003276:	1c25      	adds	r5, r4, #0
 8003278:	46cb      	mov	fp, r9
 800327a:	782b      	ldrb	r3, [r5, #0]
 800327c:	1c2c      	adds	r4, r5, #0
 800327e:	2b25      	cmp	r3, #37	; 0x25
 8003280:	d01c      	beq.n	80032bc <_svfprintf_r+0xac>
 8003282:	2b00      	cmp	r3, #0
 8003284:	d102      	bne.n	800328c <_svfprintf_r+0x7c>
 8003286:	e019      	b.n	80032bc <_svfprintf_r+0xac>
 8003288:	2b00      	cmp	r3, #0
 800328a:	d003      	beq.n	8003294 <_svfprintf_r+0x84>
 800328c:	3401      	adds	r4, #1
 800328e:	7823      	ldrb	r3, [r4, #0]
 8003290:	2b25      	cmp	r3, #37	; 0x25
 8003292:	d1f9      	bne.n	8003288 <_svfprintf_r+0x78>
 8003294:	1b60      	subs	r0, r4, r5
 8003296:	4680      	mov	r8, r0
 8003298:	d010      	beq.n	80032bc <_svfprintf_r+0xac>
 800329a:	68b1      	ldr	r1, [r6, #8]
 800329c:	1c0b      	adds	r3, r1, #0
 800329e:	4443      	add	r3, r8
 80032a0:	603d      	str	r5, [r7, #0]
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	60b3      	str	r3, [r6, #8]
 80032a6:	6873      	ldr	r3, [r6, #4]
 80032a8:	3301      	adds	r3, #1
 80032aa:	6073      	str	r3, [r6, #4]
 80032ac:	2b07      	cmp	r3, #7
 80032ae:	dd00      	ble.n	80032b2 <_svfprintf_r+0xa2>
 80032b0:	e346      	b.n	8003940 <_svfprintf_r+0x730>
 80032b2:	3708      	adds	r7, #8
 80032b4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80032b6:	1c13      	adds	r3, r2, #0
 80032b8:	4443      	add	r3, r8
 80032ba:	930f      	str	r3, [sp, #60]	; 0x3c
 80032bc:	7823      	ldrb	r3, [r4, #0]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d101      	bne.n	80032c6 <_svfprintf_r+0xb6>
 80032c2:	f000 fdb9 	bl	8003e38 <_svfprintf_r+0xc28>
 80032c6:	207b      	movs	r0, #123	; 0x7b
 80032c8:	2201      	movs	r2, #1
 80032ca:	2300      	movs	r3, #0
 80032cc:	4468      	add	r0, sp
 80032ce:	4252      	negs	r2, r2
 80032d0:	7003      	strb	r3, [r0, #0]
 80032d2:	2100      	movs	r1, #0
 80032d4:	2340      	movs	r3, #64	; 0x40
 80032d6:	4692      	mov	sl, r2
 80032d8:	2200      	movs	r2, #0
 80032da:	9111      	str	r1, [sp, #68]	; 0x44
 80032dc:	920a      	str	r2, [sp, #40]	; 0x28
 80032de:	4699      	mov	r9, r3
 80032e0:	2208      	movs	r2, #8
 80032e2:	2380      	movs	r3, #128	; 0x80
 80032e4:	49ce      	ldr	r1, [pc, #824]	; (8003620 <_svfprintf_r+0x410>)
 80032e6:	1c65      	adds	r5, r4, #1
 80032e8:	2010      	movs	r0, #16
 80032ea:	4690      	mov	r8, r2
 80032ec:	469c      	mov	ip, r3
 80032ee:	242b      	movs	r4, #43	; 0x2b
 80032f0:	782b      	ldrb	r3, [r5, #0]
 80032f2:	930c      	str	r3, [sp, #48]	; 0x30
 80032f4:	3501      	adds	r5, #1
 80032f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80032f8:	3b20      	subs	r3, #32
 80032fa:	2b58      	cmp	r3, #88	; 0x58
 80032fc:	d914      	bls.n	8003328 <_svfprintf_r+0x118>
 80032fe:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003300:	2900      	cmp	r1, #0
 8003302:	d101      	bne.n	8003308 <_svfprintf_r+0xf8>
 8003304:	f000 fd98 	bl	8003e38 <_svfprintf_r+0xc28>
 8003308:	ab2a      	add	r3, sp, #168	; 0xa8
 800330a:	7019      	strb	r1, [r3, #0]
 800330c:	207b      	movs	r0, #123	; 0x7b
 800330e:	2200      	movs	r2, #0
 8003310:	4468      	add	r0, sp
 8003312:	7002      	strb	r2, [r0, #0]
 8003314:	2101      	movs	r1, #1
 8003316:	2201      	movs	r2, #1
 8003318:	910d      	str	r1, [sp, #52]	; 0x34
 800331a:	920e      	str	r2, [sp, #56]	; 0x38
 800331c:	9313      	str	r3, [sp, #76]	; 0x4c
 800331e:	2200      	movs	r2, #0
 8003320:	2300      	movs	r3, #0
 8003322:	9214      	str	r2, [sp, #80]	; 0x50
 8003324:	9316      	str	r3, [sp, #88]	; 0x58
 8003326:	e0a3      	b.n	8003470 <_svfprintf_r+0x260>
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	58cb      	ldr	r3, [r1, r3]
 800332c:	469f      	mov	pc, r3
 800332e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003330:	2310      	movs	r3, #16
 8003332:	4319      	orrs	r1, r3
 8003334:	910a      	str	r1, [sp, #40]	; 0x28
 8003336:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003338:	06d2      	lsls	r2, r2, #27
 800333a:	d400      	bmi.n	800333e <_svfprintf_r+0x12e>
 800333c:	e3dc      	b.n	8003af8 <_svfprintf_r+0x8e8>
 800333e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003340:	9810      	ldr	r0, [sp, #64]	; 0x40
 8003342:	681c      	ldr	r4, [r3, #0]
 8003344:	3004      	adds	r0, #4
 8003346:	1c21      	adds	r1, r4, #0
 8003348:	9010      	str	r0, [sp, #64]	; 0x40
 800334a:	1e4b      	subs	r3, r1, #1
 800334c:	4199      	sbcs	r1, r3
 800334e:	2301      	movs	r3, #1
 8003350:	207b      	movs	r0, #123	; 0x7b
 8003352:	2200      	movs	r2, #0
 8003354:	4468      	add	r0, sp
 8003356:	7002      	strb	r2, [r0, #0]
 8003358:	4652      	mov	r2, sl
 800335a:	2a00      	cmp	r2, #0
 800335c:	db03      	blt.n	8003366 <_svfprintf_r+0x156>
 800335e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003360:	2280      	movs	r2, #128	; 0x80
 8003362:	4390      	bics	r0, r2
 8003364:	900a      	str	r0, [sp, #40]	; 0x28
 8003366:	4652      	mov	r2, sl
 8003368:	2a00      	cmp	r2, #0
 800336a:	d101      	bne.n	8003370 <_svfprintf_r+0x160>
 800336c:	2900      	cmp	r1, #0
 800336e:	d05f      	beq.n	8003430 <_svfprintf_r+0x220>
 8003370:	2b01      	cmp	r3, #1
 8003372:	d100      	bne.n	8003376 <_svfprintf_r+0x166>
 8003374:	e377      	b.n	8003a66 <_svfprintf_r+0x856>
 8003376:	2b02      	cmp	r3, #2
 8003378:	d100      	bne.n	800337c <_svfprintf_r+0x16c>
 800337a:	e362      	b.n	8003a42 <_svfprintf_r+0x832>
 800337c:	466b      	mov	r3, sp
 800337e:	33cf      	adds	r3, #207	; 0xcf
 8003380:	2107      	movs	r1, #7
 8003382:	1c0a      	adds	r2, r1, #0
 8003384:	4022      	ands	r2, r4
 8003386:	3230      	adds	r2, #48	; 0x30
 8003388:	1c18      	adds	r0, r3, #0
 800338a:	701a      	strb	r2, [r3, #0]
 800338c:	08e4      	lsrs	r4, r4, #3
 800338e:	3b01      	subs	r3, #1
 8003390:	2c00      	cmp	r4, #0
 8003392:	d1f6      	bne.n	8003382 <_svfprintf_r+0x172>
 8003394:	9013      	str	r0, [sp, #76]	; 0x4c
 8003396:	1c01      	adds	r1, r0, #0
 8003398:	980a      	ldr	r0, [sp, #40]	; 0x28
 800339a:	07c0      	lsls	r0, r0, #31
 800339c:	d400      	bmi.n	80033a0 <_svfprintf_r+0x190>
 800339e:	e3c3      	b.n	8003b28 <_svfprintf_r+0x918>
 80033a0:	2a30      	cmp	r2, #48	; 0x30
 80033a2:	d101      	bne.n	80033a8 <_svfprintf_r+0x198>
 80033a4:	f000 ff6d 	bl	8004282 <_svfprintf_r+0x1072>
 80033a8:	9313      	str	r3, [sp, #76]	; 0x4c
 80033aa:	3901      	subs	r1, #1
 80033ac:	2330      	movs	r3, #48	; 0x30
 80033ae:	700b      	strb	r3, [r1, #0]
 80033b0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80033b2:	9908      	ldr	r1, [sp, #32]
 80033b4:	1a89      	subs	r1, r1, r2
 80033b6:	910e      	str	r1, [sp, #56]	; 0x38
 80033b8:	e048      	b.n	800344c <_svfprintf_r+0x23c>
 80033ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80033bc:	2310      	movs	r3, #16
 80033be:	431a      	orrs	r2, r3
 80033c0:	920a      	str	r2, [sp, #40]	; 0x28
 80033c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80033c4:	06db      	lsls	r3, r3, #27
 80033c6:	d500      	bpl.n	80033ca <_svfprintf_r+0x1ba>
 80033c8:	e3a4      	b.n	8003b14 <_svfprintf_r+0x904>
 80033ca:	990a      	ldr	r1, [sp, #40]	; 0x28
 80033cc:	0649      	lsls	r1, r1, #25
 80033ce:	d401      	bmi.n	80033d4 <_svfprintf_r+0x1c4>
 80033d0:	f000 fe2f 	bl	8004032 <_svfprintf_r+0xe22>
 80033d4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80033d6:	8814      	ldrh	r4, [r2, #0]
 80033d8:	3204      	adds	r2, #4
 80033da:	1c21      	adds	r1, r4, #0
 80033dc:	1e4b      	subs	r3, r1, #1
 80033de:	4199      	sbcs	r1, r3
 80033e0:	9210      	str	r2, [sp, #64]	; 0x40
 80033e2:	2300      	movs	r3, #0
 80033e4:	e7b4      	b.n	8003350 <_svfprintf_r+0x140>
 80033e6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80033e8:	2310      	movs	r3, #16
 80033ea:	4318      	orrs	r0, r3
 80033ec:	900a      	str	r0, [sp, #40]	; 0x28
 80033ee:	990a      	ldr	r1, [sp, #40]	; 0x28
 80033f0:	06c9      	lsls	r1, r1, #27
 80033f2:	d400      	bmi.n	80033f6 <_svfprintf_r+0x1e6>
 80033f4:	e375      	b.n	8003ae2 <_svfprintf_r+0x8d2>
 80033f6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80033f8:	6814      	ldr	r4, [r2, #0]
 80033fa:	3204      	adds	r2, #4
 80033fc:	9210      	str	r2, [sp, #64]	; 0x40
 80033fe:	2c00      	cmp	r4, #0
 8003400:	da01      	bge.n	8003406 <_svfprintf_r+0x1f6>
 8003402:	f000 fdee 	bl	8003fe2 <_svfprintf_r+0xdd2>
 8003406:	1c21      	adds	r1, r4, #0
 8003408:	1e4b      	subs	r3, r1, #1
 800340a:	4199      	sbcs	r1, r3
 800340c:	2301      	movs	r3, #1
 800340e:	e7a3      	b.n	8003358 <_svfprintf_r+0x148>
 8003410:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003412:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	3204      	adds	r2, #4
 8003418:	9311      	str	r3, [sp, #68]	; 0x44
 800341a:	9210      	str	r2, [sp, #64]	; 0x40
 800341c:	2b00      	cmp	r3, #0
 800341e:	db00      	blt.n	8003422 <_svfprintf_r+0x212>
 8003420:	e766      	b.n	80032f0 <_svfprintf_r+0xe0>
 8003422:	425b      	negs	r3, r3
 8003424:	9311      	str	r3, [sp, #68]	; 0x44
 8003426:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003428:	2304      	movs	r3, #4
 800342a:	431a      	orrs	r2, r3
 800342c:	920a      	str	r2, [sp, #40]	; 0x28
 800342e:	e75f      	b.n	80032f0 <_svfprintf_r+0xe0>
 8003430:	2b00      	cmp	r3, #0
 8003432:	d000      	beq.n	8003436 <_svfprintf_r+0x226>
 8003434:	e27f      	b.n	8003936 <_svfprintf_r+0x726>
 8003436:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003438:	07c9      	lsls	r1, r1, #31
 800343a:	d400      	bmi.n	800343e <_svfprintf_r+0x22e>
 800343c:	e2fc      	b.n	8003a38 <_svfprintf_r+0x828>
 800343e:	22cf      	movs	r2, #207	; 0xcf
 8003440:	2330      	movs	r3, #48	; 0x30
 8003442:	446a      	add	r2, sp
 8003444:	7013      	strb	r3, [r2, #0]
 8003446:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003448:	9213      	str	r2, [sp, #76]	; 0x4c
 800344a:	930e      	str	r3, [sp, #56]	; 0x38
 800344c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800344e:	910d      	str	r1, [sp, #52]	; 0x34
 8003450:	4551      	cmp	r1, sl
 8003452:	da01      	bge.n	8003458 <_svfprintf_r+0x248>
 8003454:	4653      	mov	r3, sl
 8003456:	930d      	str	r3, [sp, #52]	; 0x34
 8003458:	207b      	movs	r0, #123	; 0x7b
 800345a:	4468      	add	r0, sp
 800345c:	7803      	ldrb	r3, [r0, #0]
 800345e:	4652      	mov	r2, sl
 8003460:	2000      	movs	r0, #0
 8003462:	9214      	str	r2, [sp, #80]	; 0x50
 8003464:	9016      	str	r0, [sp, #88]	; 0x58
 8003466:	2b00      	cmp	r3, #0
 8003468:	d002      	beq.n	8003470 <_svfprintf_r+0x260>
 800346a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800346c:	3301      	adds	r3, #1
 800346e:	930d      	str	r3, [sp, #52]	; 0x34
 8003470:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003472:	2302      	movs	r3, #2
 8003474:	4018      	ands	r0, r3
 8003476:	9012      	str	r0, [sp, #72]	; 0x48
 8003478:	d002      	beq.n	8003480 <_svfprintf_r+0x270>
 800347a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800347c:	3102      	adds	r1, #2
 800347e:	910d      	str	r1, [sp, #52]	; 0x34
 8003480:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003482:	2384      	movs	r3, #132	; 0x84
 8003484:	401a      	ands	r2, r3
 8003486:	4692      	mov	sl, r2
 8003488:	d13d      	bne.n	8003506 <_svfprintf_r+0x2f6>
 800348a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800348c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800348e:	1a1c      	subs	r4, r3, r0
 8003490:	2c00      	cmp	r4, #0
 8003492:	dd38      	ble.n	8003506 <_svfprintf_r+0x2f6>
 8003494:	2c10      	cmp	r4, #16
 8003496:	dc01      	bgt.n	800349c <_svfprintf_r+0x28c>
 8003498:	f000 fec9 	bl	800422e <_svfprintf_r+0x101e>
 800349c:	4a61      	ldr	r2, [pc, #388]	; (8003624 <_svfprintf_r+0x414>)
 800349e:	2310      	movs	r3, #16
 80034a0:	4699      	mov	r9, r3
 80034a2:	46a8      	mov	r8, r5
 80034a4:	1c3b      	adds	r3, r7, #0
 80034a6:	1c15      	adds	r5, r2, #0
 80034a8:	465f      	mov	r7, fp
 80034aa:	e003      	b.n	80034b4 <_svfprintf_r+0x2a4>
 80034ac:	3c10      	subs	r4, #16
 80034ae:	3308      	adds	r3, #8
 80034b0:	2c10      	cmp	r4, #16
 80034b2:	dd16      	ble.n	80034e2 <_svfprintf_r+0x2d2>
 80034b4:	68b2      	ldr	r2, [r6, #8]
 80034b6:	4648      	mov	r0, r9
 80034b8:	3210      	adds	r2, #16
 80034ba:	601d      	str	r5, [r3, #0]
 80034bc:	6058      	str	r0, [r3, #4]
 80034be:	60b2      	str	r2, [r6, #8]
 80034c0:	6872      	ldr	r2, [r6, #4]
 80034c2:	3201      	adds	r2, #1
 80034c4:	6072      	str	r2, [r6, #4]
 80034c6:	2a07      	cmp	r2, #7
 80034c8:	ddf0      	ble.n	80034ac <_svfprintf_r+0x29c>
 80034ca:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80034cc:	1c39      	adds	r1, r7, #0
 80034ce:	1c32      	adds	r2, r6, #0
 80034d0:	f004 fdfa 	bl	80080c8 <__ssprint_r>
 80034d4:	2800      	cmp	r0, #0
 80034d6:	d000      	beq.n	80034da <_svfprintf_r+0x2ca>
 80034d8:	e15f      	b.n	800379a <_svfprintf_r+0x58a>
 80034da:	3c10      	subs	r4, #16
 80034dc:	ab34      	add	r3, sp, #208	; 0xd0
 80034de:	2c10      	cmp	r4, #16
 80034e0:	dce8      	bgt.n	80034b4 <_svfprintf_r+0x2a4>
 80034e2:	46bb      	mov	fp, r7
 80034e4:	1c1f      	adds	r7, r3, #0
 80034e6:	1c2b      	adds	r3, r5, #0
 80034e8:	4645      	mov	r5, r8
 80034ea:	4698      	mov	r8, r3
 80034ec:	68b2      	ldr	r2, [r6, #8]
 80034ee:	6873      	ldr	r3, [r6, #4]
 80034f0:	607c      	str	r4, [r7, #4]
 80034f2:	4641      	mov	r1, r8
 80034f4:	1914      	adds	r4, r2, r4
 80034f6:	3301      	adds	r3, #1
 80034f8:	6039      	str	r1, [r7, #0]
 80034fa:	60b4      	str	r4, [r6, #8]
 80034fc:	6073      	str	r3, [r6, #4]
 80034fe:	2b07      	cmp	r3, #7
 8003500:	dd00      	ble.n	8003504 <_svfprintf_r+0x2f4>
 8003502:	e2cb      	b.n	8003a9c <_svfprintf_r+0x88c>
 8003504:	3708      	adds	r7, #8
 8003506:	207b      	movs	r0, #123	; 0x7b
 8003508:	4468      	add	r0, sp
 800350a:	7803      	ldrb	r3, [r0, #0]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d00c      	beq.n	800352a <_svfprintf_r+0x31a>
 8003510:	2301      	movs	r3, #1
 8003512:	607b      	str	r3, [r7, #4]
 8003514:	68b3      	ldr	r3, [r6, #8]
 8003516:	3301      	adds	r3, #1
 8003518:	6038      	str	r0, [r7, #0]
 800351a:	60b3      	str	r3, [r6, #8]
 800351c:	6873      	ldr	r3, [r6, #4]
 800351e:	3301      	adds	r3, #1
 8003520:	6073      	str	r3, [r6, #4]
 8003522:	2b07      	cmp	r3, #7
 8003524:	dd00      	ble.n	8003528 <_svfprintf_r+0x318>
 8003526:	e21d      	b.n	8003964 <_svfprintf_r+0x754>
 8003528:	3708      	adds	r7, #8
 800352a:	9912      	ldr	r1, [sp, #72]	; 0x48
 800352c:	2900      	cmp	r1, #0
 800352e:	d00d      	beq.n	800354c <_svfprintf_r+0x33c>
 8003530:	ab1f      	add	r3, sp, #124	; 0x7c
 8003532:	603b      	str	r3, [r7, #0]
 8003534:	2302      	movs	r3, #2
 8003536:	607b      	str	r3, [r7, #4]
 8003538:	68b3      	ldr	r3, [r6, #8]
 800353a:	3302      	adds	r3, #2
 800353c:	60b3      	str	r3, [r6, #8]
 800353e:	6873      	ldr	r3, [r6, #4]
 8003540:	3301      	adds	r3, #1
 8003542:	6073      	str	r3, [r6, #4]
 8003544:	2b07      	cmp	r3, #7
 8003546:	dd00      	ble.n	800354a <_svfprintf_r+0x33a>
 8003548:	e215      	b.n	8003976 <_svfprintf_r+0x766>
 800354a:	3708      	adds	r7, #8
 800354c:	4652      	mov	r2, sl
 800354e:	2a80      	cmp	r2, #128	; 0x80
 8003550:	d100      	bne.n	8003554 <_svfprintf_r+0x344>
 8003552:	e134      	b.n	80037be <_svfprintf_r+0x5ae>
 8003554:	9814      	ldr	r0, [sp, #80]	; 0x50
 8003556:	990e      	ldr	r1, [sp, #56]	; 0x38
 8003558:	1a44      	subs	r4, r0, r1
 800355a:	2c00      	cmp	r4, #0
 800355c:	dd3b      	ble.n	80035d6 <_svfprintf_r+0x3c6>
 800355e:	2c10      	cmp	r4, #16
 8003560:	dc01      	bgt.n	8003566 <_svfprintf_r+0x356>
 8003562:	f000 fd81 	bl	8004068 <_svfprintf_r+0xe58>
 8003566:	4b2f      	ldr	r3, [pc, #188]	; (8003624 <_svfprintf_r+0x414>)
 8003568:	2010      	movs	r0, #16
 800356a:	4698      	mov	r8, r3
 800356c:	4682      	mov	sl, r0
 800356e:	1c3b      	adds	r3, r7, #0
 8003570:	44c2      	add	sl, r8
 8003572:	465f      	mov	r7, fp
 8003574:	4681      	mov	r9, r0
 8003576:	46ab      	mov	fp, r5
 8003578:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800357a:	e003      	b.n	8003584 <_svfprintf_r+0x374>
 800357c:	3c10      	subs	r4, #16
 800357e:	3308      	adds	r3, #8
 8003580:	2c10      	cmp	r4, #16
 8003582:	dd17      	ble.n	80035b4 <_svfprintf_r+0x3a4>
 8003584:	4652      	mov	r2, sl
 8003586:	601a      	str	r2, [r3, #0]
 8003588:	68b2      	ldr	r2, [r6, #8]
 800358a:	4648      	mov	r0, r9
 800358c:	3210      	adds	r2, #16
 800358e:	6058      	str	r0, [r3, #4]
 8003590:	60b2      	str	r2, [r6, #8]
 8003592:	6872      	ldr	r2, [r6, #4]
 8003594:	3201      	adds	r2, #1
 8003596:	6072      	str	r2, [r6, #4]
 8003598:	2a07      	cmp	r2, #7
 800359a:	ddef      	ble.n	800357c <_svfprintf_r+0x36c>
 800359c:	1c28      	adds	r0, r5, #0
 800359e:	1c39      	adds	r1, r7, #0
 80035a0:	1c32      	adds	r2, r6, #0
 80035a2:	f004 fd91 	bl	80080c8 <__ssprint_r>
 80035a6:	2800      	cmp	r0, #0
 80035a8:	d000      	beq.n	80035ac <_svfprintf_r+0x39c>
 80035aa:	e0f6      	b.n	800379a <_svfprintf_r+0x58a>
 80035ac:	3c10      	subs	r4, #16
 80035ae:	ab34      	add	r3, sp, #208	; 0xd0
 80035b0:	2c10      	cmp	r4, #16
 80035b2:	dce7      	bgt.n	8003584 <_svfprintf_r+0x374>
 80035b4:	465d      	mov	r5, fp
 80035b6:	46bb      	mov	fp, r7
 80035b8:	1c1f      	adds	r7, r3, #0
 80035ba:	4643      	mov	r3, r8
 80035bc:	3310      	adds	r3, #16
 80035be:	603b      	str	r3, [r7, #0]
 80035c0:	68b1      	ldr	r1, [r6, #8]
 80035c2:	6873      	ldr	r3, [r6, #4]
 80035c4:	607c      	str	r4, [r7, #4]
 80035c6:	3301      	adds	r3, #1
 80035c8:	190c      	adds	r4, r1, r4
 80035ca:	60b4      	str	r4, [r6, #8]
 80035cc:	6073      	str	r3, [r6, #4]
 80035ce:	2b07      	cmp	r3, #7
 80035d0:	dd00      	ble.n	80035d4 <_svfprintf_r+0x3c4>
 80035d2:	e1be      	b.n	8003952 <_svfprintf_r+0x742>
 80035d4:	3708      	adds	r7, #8
 80035d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80035d8:	05d2      	lsls	r2, r2, #23
 80035da:	d500      	bpl.n	80035de <_svfprintf_r+0x3ce>
 80035dc:	e07e      	b.n	80036dc <_svfprintf_r+0x4cc>
 80035de:	980e      	ldr	r0, [sp, #56]	; 0x38
 80035e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80035e2:	68b1      	ldr	r1, [r6, #8]
 80035e4:	6078      	str	r0, [r7, #4]
 80035e6:	603b      	str	r3, [r7, #0]
 80035e8:	180b      	adds	r3, r1, r0
 80035ea:	60b3      	str	r3, [r6, #8]
 80035ec:	6873      	ldr	r3, [r6, #4]
 80035ee:	3301      	adds	r3, #1
 80035f0:	6073      	str	r3, [r6, #4]
 80035f2:	2b07      	cmp	r3, #7
 80035f4:	dc68      	bgt.n	80036c8 <_svfprintf_r+0x4b8>
 80035f6:	3708      	adds	r7, #8
 80035f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80035fa:	075b      	lsls	r3, r3, #29
 80035fc:	d545      	bpl.n	800368a <_svfprintf_r+0x47a>
 80035fe:	9811      	ldr	r0, [sp, #68]	; 0x44
 8003600:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003602:	1a44      	subs	r4, r0, r1
 8003604:	2c00      	cmp	r4, #0
 8003606:	dd40      	ble.n	800368a <_svfprintf_r+0x47a>
 8003608:	2c10      	cmp	r4, #16
 800360a:	dc01      	bgt.n	8003610 <_svfprintf_r+0x400>
 800360c:	f000 fe3f 	bl	800428e <_svfprintf_r+0x107e>
 8003610:	4b04      	ldr	r3, [pc, #16]	; (8003624 <_svfprintf_r+0x414>)
 8003612:	2010      	movs	r0, #16
 8003614:	46aa      	mov	sl, r5
 8003616:	4698      	mov	r8, r3
 8003618:	4681      	mov	r9, r0
 800361a:	465d      	mov	r5, fp
 800361c:	e008      	b.n	8003630 <_svfprintf_r+0x420>
 800361e:	46c0      	nop			; (mov r8, r8)
 8003620:	0800eca8 	.word	0x0800eca8
 8003624:	0800ee0c 	.word	0x0800ee0c
 8003628:	3c10      	subs	r4, #16
 800362a:	3708      	adds	r7, #8
 800362c:	2c10      	cmp	r4, #16
 800362e:	dd18      	ble.n	8003662 <_svfprintf_r+0x452>
 8003630:	68b3      	ldr	r3, [r6, #8]
 8003632:	4641      	mov	r1, r8
 8003634:	3310      	adds	r3, #16
 8003636:	464a      	mov	r2, r9
 8003638:	6039      	str	r1, [r7, #0]
 800363a:	607a      	str	r2, [r7, #4]
 800363c:	60b3      	str	r3, [r6, #8]
 800363e:	6873      	ldr	r3, [r6, #4]
 8003640:	3301      	adds	r3, #1
 8003642:	6073      	str	r3, [r6, #4]
 8003644:	2b07      	cmp	r3, #7
 8003646:	ddef      	ble.n	8003628 <_svfprintf_r+0x418>
 8003648:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800364a:	1c29      	adds	r1, r5, #0
 800364c:	1c32      	adds	r2, r6, #0
 800364e:	f004 fd3b 	bl	80080c8 <__ssprint_r>
 8003652:	2800      	cmp	r0, #0
 8003654:	d001      	beq.n	800365a <_svfprintf_r+0x44a>
 8003656:	f000 fc12 	bl	8003e7e <_svfprintf_r+0xc6e>
 800365a:	3c10      	subs	r4, #16
 800365c:	af34      	add	r7, sp, #208	; 0xd0
 800365e:	2c10      	cmp	r4, #16
 8003660:	dce6      	bgt.n	8003630 <_svfprintf_r+0x420>
 8003662:	46ab      	mov	fp, r5
 8003664:	4655      	mov	r5, sl
 8003666:	4643      	mov	r3, r8
 8003668:	c718      	stmia	r7!, {r3, r4}
 800366a:	68b0      	ldr	r0, [r6, #8]
 800366c:	6873      	ldr	r3, [r6, #4]
 800366e:	1824      	adds	r4, r4, r0
 8003670:	3301      	adds	r3, #1
 8003672:	60b4      	str	r4, [r6, #8]
 8003674:	6073      	str	r3, [r6, #4]
 8003676:	2b07      	cmp	r3, #7
 8003678:	dd08      	ble.n	800368c <_svfprintf_r+0x47c>
 800367a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800367c:	4659      	mov	r1, fp
 800367e:	1c32      	adds	r2, r6, #0
 8003680:	f004 fd22 	bl	80080c8 <__ssprint_r>
 8003684:	2800      	cmp	r0, #0
 8003686:	d000      	beq.n	800368a <_svfprintf_r+0x47a>
 8003688:	e153      	b.n	8003932 <_svfprintf_r+0x722>
 800368a:	68b4      	ldr	r4, [r6, #8]
 800368c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800368e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8003690:	428b      	cmp	r3, r1
 8003692:	da00      	bge.n	8003696 <_svfprintf_r+0x486>
 8003694:	1c0b      	adds	r3, r1, #0
 8003696:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003698:	18d2      	adds	r2, r2, r3
 800369a:	920f      	str	r2, [sp, #60]	; 0x3c
 800369c:	2c00      	cmp	r4, #0
 800369e:	d000      	beq.n	80036a2 <_svfprintf_r+0x492>
 80036a0:	e13f      	b.n	8003922 <_svfprintf_r+0x712>
 80036a2:	2300      	movs	r3, #0
 80036a4:	6073      	str	r3, [r6, #4]
 80036a6:	af34      	add	r7, sp, #208	; 0xd0
 80036a8:	e5e7      	b.n	800327a <_svfprintf_r+0x6a>
 80036aa:	465d      	mov	r5, fp
 80036ac:	46bb      	mov	fp, r7
 80036ae:	1c1f      	adds	r7, r3, #0
 80036b0:	4643      	mov	r3, r8
 80036b2:	3310      	adds	r3, #16
 80036b4:	68b1      	ldr	r1, [r6, #8]
 80036b6:	603b      	str	r3, [r7, #0]
 80036b8:	607c      	str	r4, [r7, #4]
 80036ba:	190c      	adds	r4, r1, r4
 80036bc:	6873      	ldr	r3, [r6, #4]
 80036be:	3301      	adds	r3, #1
 80036c0:	60b4      	str	r4, [r6, #8]
 80036c2:	6073      	str	r3, [r6, #4]
 80036c4:	2b07      	cmp	r3, #7
 80036c6:	dd96      	ble.n	80035f6 <_svfprintf_r+0x3e6>
 80036c8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80036ca:	4659      	mov	r1, fp
 80036cc:	1c32      	adds	r2, r6, #0
 80036ce:	f004 fcfb 	bl	80080c8 <__ssprint_r>
 80036d2:	2800      	cmp	r0, #0
 80036d4:	d000      	beq.n	80036d8 <_svfprintf_r+0x4c8>
 80036d6:	e12c      	b.n	8003932 <_svfprintf_r+0x722>
 80036d8:	af34      	add	r7, sp, #208	; 0xd0
 80036da:	e78d      	b.n	80035f8 <_svfprintf_r+0x3e8>
 80036dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80036de:	2a65      	cmp	r2, #101	; 0x65
 80036e0:	dc00      	bgt.n	80036e4 <_svfprintf_r+0x4d4>
 80036e2:	e0ae      	b.n	8003842 <_svfprintf_r+0x632>
 80036e4:	9818      	ldr	r0, [sp, #96]	; 0x60
 80036e6:	9919      	ldr	r1, [sp, #100]	; 0x64
 80036e8:	4bd0      	ldr	r3, [pc, #832]	; (8003a2c <_svfprintf_r+0x81c>)
 80036ea:	4acf      	ldr	r2, [pc, #828]	; (8003a28 <_svfprintf_r+0x818>)
 80036ec:	f006 e8c8 	blx	8009880 <__aeabi_dcmpeq>
 80036f0:	2800      	cmp	r0, #0
 80036f2:	d100      	bne.n	80036f6 <_svfprintf_r+0x4e6>
 80036f4:	e148      	b.n	8003988 <_svfprintf_r+0x778>
 80036f6:	4bce      	ldr	r3, [pc, #824]	; (8003a30 <_svfprintf_r+0x820>)
 80036f8:	603b      	str	r3, [r7, #0]
 80036fa:	2301      	movs	r3, #1
 80036fc:	607b      	str	r3, [r7, #4]
 80036fe:	68b3      	ldr	r3, [r6, #8]
 8003700:	3301      	adds	r3, #1
 8003702:	60b3      	str	r3, [r6, #8]
 8003704:	6873      	ldr	r3, [r6, #4]
 8003706:	3301      	adds	r3, #1
 8003708:	6073      	str	r3, [r6, #4]
 800370a:	2b07      	cmp	r3, #7
 800370c:	dd00      	ble.n	8003710 <_svfprintf_r+0x500>
 800370e:	e339      	b.n	8003d84 <_svfprintf_r+0xb74>
 8003710:	3708      	adds	r7, #8
 8003712:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003714:	9815      	ldr	r0, [sp, #84]	; 0x54
 8003716:	4283      	cmp	r3, r0
 8003718:	db03      	blt.n	8003722 <_svfprintf_r+0x512>
 800371a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800371c:	07c9      	lsls	r1, r1, #31
 800371e:	d400      	bmi.n	8003722 <_svfprintf_r+0x512>
 8003720:	e76a      	b.n	80035f8 <_svfprintf_r+0x3e8>
 8003722:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8003724:	68b1      	ldr	r1, [r6, #8]
 8003726:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8003728:	607b      	str	r3, [r7, #4]
 800372a:	185b      	adds	r3, r3, r1
 800372c:	603a      	str	r2, [r7, #0]
 800372e:	60b3      	str	r3, [r6, #8]
 8003730:	6873      	ldr	r3, [r6, #4]
 8003732:	3301      	adds	r3, #1
 8003734:	6073      	str	r3, [r6, #4]
 8003736:	2b07      	cmp	r3, #7
 8003738:	dd01      	ble.n	800373e <_svfprintf_r+0x52e>
 800373a:	f000 fd20 	bl	800417e <_svfprintf_r+0xf6e>
 800373e:	3708      	adds	r7, #8
 8003740:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8003742:	3c01      	subs	r4, #1
 8003744:	2c00      	cmp	r4, #0
 8003746:	dc00      	bgt.n	800374a <_svfprintf_r+0x53a>
 8003748:	e756      	b.n	80035f8 <_svfprintf_r+0x3e8>
 800374a:	2c10      	cmp	r4, #16
 800374c:	dc01      	bgt.n	8003752 <_svfprintf_r+0x542>
 800374e:	f000 fed4 	bl	80044fa <_svfprintf_r+0x12ea>
 8003752:	4bb8      	ldr	r3, [pc, #736]	; (8003a34 <_svfprintf_r+0x824>)
 8003754:	2010      	movs	r0, #16
 8003756:	4698      	mov	r8, r3
 8003758:	4682      	mov	sl, r0
 800375a:	1c3b      	adds	r3, r7, #0
 800375c:	44c2      	add	sl, r8
 800375e:	465f      	mov	r7, fp
 8003760:	4681      	mov	r9, r0
 8003762:	46ab      	mov	fp, r5
 8003764:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8003766:	e003      	b.n	8003770 <_svfprintf_r+0x560>
 8003768:	3308      	adds	r3, #8
 800376a:	3c10      	subs	r4, #16
 800376c:	2c10      	cmp	r4, #16
 800376e:	dd9c      	ble.n	80036aa <_svfprintf_r+0x49a>
 8003770:	4652      	mov	r2, sl
 8003772:	601a      	str	r2, [r3, #0]
 8003774:	68b2      	ldr	r2, [r6, #8]
 8003776:	4648      	mov	r0, r9
 8003778:	3210      	adds	r2, #16
 800377a:	6058      	str	r0, [r3, #4]
 800377c:	60b2      	str	r2, [r6, #8]
 800377e:	6872      	ldr	r2, [r6, #4]
 8003780:	3201      	adds	r2, #1
 8003782:	6072      	str	r2, [r6, #4]
 8003784:	2a07      	cmp	r2, #7
 8003786:	ddef      	ble.n	8003768 <_svfprintf_r+0x558>
 8003788:	1c28      	adds	r0, r5, #0
 800378a:	1c39      	adds	r1, r7, #0
 800378c:	1c32      	adds	r2, r6, #0
 800378e:	f004 fc9b 	bl	80080c8 <__ssprint_r>
 8003792:	2800      	cmp	r0, #0
 8003794:	d101      	bne.n	800379a <_svfprintf_r+0x58a>
 8003796:	ab34      	add	r3, sp, #208	; 0xd0
 8003798:	e7e7      	b.n	800376a <_svfprintf_r+0x55a>
 800379a:	46b9      	mov	r9, r7
 800379c:	4648      	mov	r0, r9
 800379e:	8983      	ldrh	r3, [r0, #12]
 80037a0:	0659      	lsls	r1, r3, #25
 80037a2:	d502      	bpl.n	80037aa <_svfprintf_r+0x59a>
 80037a4:	2301      	movs	r3, #1
 80037a6:	425b      	negs	r3, r3
 80037a8:	930f      	str	r3, [sp, #60]	; 0x3c
 80037aa:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80037ac:	b045      	add	sp, #276	; 0x114
 80037ae:	bc3c      	pop	{r2, r3, r4, r5}
 80037b0:	4690      	mov	r8, r2
 80037b2:	4699      	mov	r9, r3
 80037b4:	46a2      	mov	sl, r4
 80037b6:	46ab      	mov	fp, r5
 80037b8:	bcf0      	pop	{r4, r5, r6, r7}
 80037ba:	bc02      	pop	{r1}
 80037bc:	4708      	bx	r1
 80037be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80037c0:	980d      	ldr	r0, [sp, #52]	; 0x34
 80037c2:	1a1c      	subs	r4, r3, r0
 80037c4:	2c00      	cmp	r4, #0
 80037c6:	dc00      	bgt.n	80037ca <_svfprintf_r+0x5ba>
 80037c8:	e6c4      	b.n	8003554 <_svfprintf_r+0x344>
 80037ca:	2c10      	cmp	r4, #16
 80037cc:	dc01      	bgt.n	80037d2 <_svfprintf_r+0x5c2>
 80037ce:	f000 fe07 	bl	80043e0 <_svfprintf_r+0x11d0>
 80037d2:	4a98      	ldr	r2, [pc, #608]	; (8003a34 <_svfprintf_r+0x824>)
 80037d4:	2310      	movs	r3, #16
 80037d6:	469a      	mov	sl, r3
 80037d8:	4690      	mov	r8, r2
 80037da:	4699      	mov	r9, r3
 80037dc:	44c2      	add	sl, r8
 80037de:	1c3b      	adds	r3, r7, #0
 80037e0:	465f      	mov	r7, fp
 80037e2:	46ab      	mov	fp, r5
 80037e4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80037e6:	e003      	b.n	80037f0 <_svfprintf_r+0x5e0>
 80037e8:	3c10      	subs	r4, #16
 80037ea:	3308      	adds	r3, #8
 80037ec:	2c10      	cmp	r4, #16
 80037ee:	dd16      	ble.n	800381e <_svfprintf_r+0x60e>
 80037f0:	464a      	mov	r2, r9
 80037f2:	605a      	str	r2, [r3, #4]
 80037f4:	68b2      	ldr	r2, [r6, #8]
 80037f6:	4651      	mov	r1, sl
 80037f8:	3210      	adds	r2, #16
 80037fa:	6019      	str	r1, [r3, #0]
 80037fc:	60b2      	str	r2, [r6, #8]
 80037fe:	6872      	ldr	r2, [r6, #4]
 8003800:	3201      	adds	r2, #1
 8003802:	6072      	str	r2, [r6, #4]
 8003804:	2a07      	cmp	r2, #7
 8003806:	ddef      	ble.n	80037e8 <_svfprintf_r+0x5d8>
 8003808:	1c28      	adds	r0, r5, #0
 800380a:	1c39      	adds	r1, r7, #0
 800380c:	1c32      	adds	r2, r6, #0
 800380e:	f004 fc5b 	bl	80080c8 <__ssprint_r>
 8003812:	2800      	cmp	r0, #0
 8003814:	d1c1      	bne.n	800379a <_svfprintf_r+0x58a>
 8003816:	3c10      	subs	r4, #16
 8003818:	ab34      	add	r3, sp, #208	; 0xd0
 800381a:	2c10      	cmp	r4, #16
 800381c:	dce8      	bgt.n	80037f0 <_svfprintf_r+0x5e0>
 800381e:	465d      	mov	r5, fp
 8003820:	46bb      	mov	fp, r7
 8003822:	1c1f      	adds	r7, r3, #0
 8003824:	4643      	mov	r3, r8
 8003826:	3310      	adds	r3, #16
 8003828:	603b      	str	r3, [r7, #0]
 800382a:	68b3      	ldr	r3, [r6, #8]
 800382c:	607c      	str	r4, [r7, #4]
 800382e:	191c      	adds	r4, r3, r4
 8003830:	6873      	ldr	r3, [r6, #4]
 8003832:	3301      	adds	r3, #1
 8003834:	60b4      	str	r4, [r6, #8]
 8003836:	6073      	str	r3, [r6, #4]
 8003838:	2b07      	cmp	r3, #7
 800383a:	dd00      	ble.n	800383e <_svfprintf_r+0x62e>
 800383c:	e3c6      	b.n	8003fcc <_svfprintf_r+0xdbc>
 800383e:	3708      	adds	r7, #8
 8003840:	e688      	b.n	8003554 <_svfprintf_r+0x344>
 8003842:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003844:	2b01      	cmp	r3, #1
 8003846:	dc00      	bgt.n	800384a <_svfprintf_r+0x63a>
 8003848:	e3a1      	b.n	8003f8e <_svfprintf_r+0xd7e>
 800384a:	2301      	movs	r3, #1
 800384c:	607b      	str	r3, [r7, #4]
 800384e:	68b3      	ldr	r3, [r6, #8]
 8003850:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8003852:	3301      	adds	r3, #1
 8003854:	6039      	str	r1, [r7, #0]
 8003856:	60b3      	str	r3, [r6, #8]
 8003858:	6873      	ldr	r3, [r6, #4]
 800385a:	3301      	adds	r3, #1
 800385c:	6073      	str	r3, [r6, #4]
 800385e:	2b07      	cmp	r3, #7
 8003860:	dd00      	ble.n	8003864 <_svfprintf_r+0x654>
 8003862:	e3a9      	b.n	8003fb8 <_svfprintf_r+0xda8>
 8003864:	3708      	adds	r7, #8
 8003866:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8003868:	68b1      	ldr	r1, [r6, #8]
 800386a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800386c:	607b      	str	r3, [r7, #4]
 800386e:	185b      	adds	r3, r3, r1
 8003870:	603a      	str	r2, [r7, #0]
 8003872:	60b3      	str	r3, [r6, #8]
 8003874:	6873      	ldr	r3, [r6, #4]
 8003876:	3301      	adds	r3, #1
 8003878:	6073      	str	r3, [r6, #4]
 800387a:	2b07      	cmp	r3, #7
 800387c:	dd00      	ble.n	8003880 <_svfprintf_r+0x670>
 800387e:	e391      	b.n	8003fa4 <_svfprintf_r+0xd94>
 8003880:	3708      	adds	r7, #8
 8003882:	9818      	ldr	r0, [sp, #96]	; 0x60
 8003884:	9919      	ldr	r1, [sp, #100]	; 0x64
 8003886:	4b69      	ldr	r3, [pc, #420]	; (8003a2c <_svfprintf_r+0x81c>)
 8003888:	4a67      	ldr	r2, [pc, #412]	; (8003a28 <_svfprintf_r+0x818>)
 800388a:	f005 effa 	blx	8009880 <__aeabi_dcmpeq>
 800388e:	2800      	cmp	r0, #0
 8003890:	d100      	bne.n	8003894 <_svfprintf_r+0x684>
 8003892:	e10d      	b.n	8003ab0 <_svfprintf_r+0x8a0>
 8003894:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8003896:	3c01      	subs	r4, #1
 8003898:	2c00      	cmp	r4, #0
 800389a:	dd3b      	ble.n	8003914 <_svfprintf_r+0x704>
 800389c:	2c10      	cmp	r4, #16
 800389e:	dc01      	bgt.n	80038a4 <_svfprintf_r+0x694>
 80038a0:	f000 fe1e 	bl	80044e0 <_svfprintf_r+0x12d0>
 80038a4:	4863      	ldr	r0, [pc, #396]	; (8003a34 <_svfprintf_r+0x824>)
 80038a6:	2110      	movs	r1, #16
 80038a8:	4680      	mov	r8, r0
 80038aa:	468a      	mov	sl, r1
 80038ac:	1c3b      	adds	r3, r7, #0
 80038ae:	44c2      	add	sl, r8
 80038b0:	465f      	mov	r7, fp
 80038b2:	4689      	mov	r9, r1
 80038b4:	46ab      	mov	fp, r5
 80038b6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80038b8:	e003      	b.n	80038c2 <_svfprintf_r+0x6b2>
 80038ba:	3c10      	subs	r4, #16
 80038bc:	3308      	adds	r3, #8
 80038be:	2c10      	cmp	r4, #16
 80038c0:	dd17      	ble.n	80038f2 <_svfprintf_r+0x6e2>
 80038c2:	68b2      	ldr	r2, [r6, #8]
 80038c4:	4650      	mov	r0, sl
 80038c6:	3210      	adds	r2, #16
 80038c8:	4649      	mov	r1, r9
 80038ca:	6018      	str	r0, [r3, #0]
 80038cc:	6059      	str	r1, [r3, #4]
 80038ce:	60b2      	str	r2, [r6, #8]
 80038d0:	6872      	ldr	r2, [r6, #4]
 80038d2:	3201      	adds	r2, #1
 80038d4:	6072      	str	r2, [r6, #4]
 80038d6:	2a07      	cmp	r2, #7
 80038d8:	ddef      	ble.n	80038ba <_svfprintf_r+0x6aa>
 80038da:	1c28      	adds	r0, r5, #0
 80038dc:	1c39      	adds	r1, r7, #0
 80038de:	1c32      	adds	r2, r6, #0
 80038e0:	f004 fbf2 	bl	80080c8 <__ssprint_r>
 80038e4:	2800      	cmp	r0, #0
 80038e6:	d000      	beq.n	80038ea <_svfprintf_r+0x6da>
 80038e8:	e757      	b.n	800379a <_svfprintf_r+0x58a>
 80038ea:	3c10      	subs	r4, #16
 80038ec:	ab34      	add	r3, sp, #208	; 0xd0
 80038ee:	2c10      	cmp	r4, #16
 80038f0:	dce7      	bgt.n	80038c2 <_svfprintf_r+0x6b2>
 80038f2:	465d      	mov	r5, fp
 80038f4:	46bb      	mov	fp, r7
 80038f6:	1c1f      	adds	r7, r3, #0
 80038f8:	4643      	mov	r3, r8
 80038fa:	3310      	adds	r3, #16
 80038fc:	603b      	str	r3, [r7, #0]
 80038fe:	68b2      	ldr	r2, [r6, #8]
 8003900:	6873      	ldr	r3, [r6, #4]
 8003902:	607c      	str	r4, [r7, #4]
 8003904:	3301      	adds	r3, #1
 8003906:	1914      	adds	r4, r2, r4
 8003908:	60b4      	str	r4, [r6, #8]
 800390a:	6073      	str	r3, [r6, #4]
 800390c:	2b07      	cmp	r3, #7
 800390e:	dd00      	ble.n	8003912 <_svfprintf_r+0x702>
 8003910:	e0dd      	b.n	8003ace <_svfprintf_r+0x8be>
 8003912:	3708      	adds	r7, #8
 8003914:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8003916:	68b2      	ldr	r2, [r6, #8]
 8003918:	ab23      	add	r3, sp, #140	; 0x8c
 800391a:	603b      	str	r3, [r7, #0]
 800391c:	6079      	str	r1, [r7, #4]
 800391e:	1853      	adds	r3, r2, r1
 8003920:	e663      	b.n	80035ea <_svfprintf_r+0x3da>
 8003922:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003924:	4659      	mov	r1, fp
 8003926:	1c32      	adds	r2, r6, #0
 8003928:	f004 fbce 	bl	80080c8 <__ssprint_r>
 800392c:	2800      	cmp	r0, #0
 800392e:	d100      	bne.n	8003932 <_svfprintf_r+0x722>
 8003930:	e6b7      	b.n	80036a2 <_svfprintf_r+0x492>
 8003932:	46d9      	mov	r9, fp
 8003934:	e732      	b.n	800379c <_svfprintf_r+0x58c>
 8003936:	2100      	movs	r1, #0
 8003938:	aa34      	add	r2, sp, #208	; 0xd0
 800393a:	910e      	str	r1, [sp, #56]	; 0x38
 800393c:	9213      	str	r2, [sp, #76]	; 0x4c
 800393e:	e585      	b.n	800344c <_svfprintf_r+0x23c>
 8003940:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003942:	4659      	mov	r1, fp
 8003944:	1c32      	adds	r2, r6, #0
 8003946:	f004 fbbf 	bl	80080c8 <__ssprint_r>
 800394a:	2800      	cmp	r0, #0
 800394c:	d1f1      	bne.n	8003932 <_svfprintf_r+0x722>
 800394e:	af34      	add	r7, sp, #208	; 0xd0
 8003950:	e4b0      	b.n	80032b4 <_svfprintf_r+0xa4>
 8003952:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003954:	4659      	mov	r1, fp
 8003956:	1c32      	adds	r2, r6, #0
 8003958:	f004 fbb6 	bl	80080c8 <__ssprint_r>
 800395c:	2800      	cmp	r0, #0
 800395e:	d1e8      	bne.n	8003932 <_svfprintf_r+0x722>
 8003960:	af34      	add	r7, sp, #208	; 0xd0
 8003962:	e638      	b.n	80035d6 <_svfprintf_r+0x3c6>
 8003964:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003966:	4659      	mov	r1, fp
 8003968:	1c32      	adds	r2, r6, #0
 800396a:	f004 fbad 	bl	80080c8 <__ssprint_r>
 800396e:	2800      	cmp	r0, #0
 8003970:	d1df      	bne.n	8003932 <_svfprintf_r+0x722>
 8003972:	af34      	add	r7, sp, #208	; 0xd0
 8003974:	e5d9      	b.n	800352a <_svfprintf_r+0x31a>
 8003976:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003978:	4659      	mov	r1, fp
 800397a:	1c32      	adds	r2, r6, #0
 800397c:	f004 fba4 	bl	80080c8 <__ssprint_r>
 8003980:	2800      	cmp	r0, #0
 8003982:	d1d6      	bne.n	8003932 <_svfprintf_r+0x722>
 8003984:	af34      	add	r7, sp, #208	; 0xd0
 8003986:	e5e1      	b.n	800354c <_svfprintf_r+0x33c>
 8003988:	9c20      	ldr	r4, [sp, #128]	; 0x80
 800398a:	2c00      	cmp	r4, #0
 800398c:	dc00      	bgt.n	8003990 <_svfprintf_r+0x780>
 800398e:	e203      	b.n	8003d98 <_svfprintf_r+0xb88>
 8003990:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8003992:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003994:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8003996:	9916      	ldr	r1, [sp, #88]	; 0x58
 8003998:	18d2      	adds	r2, r2, r3
 800399a:	920c      	str	r2, [sp, #48]	; 0x30
 800399c:	1a14      	subs	r4, r2, r0
 800399e:	428c      	cmp	r4, r1
 80039a0:	dd00      	ble.n	80039a4 <_svfprintf_r+0x794>
 80039a2:	1c0c      	adds	r4, r1, #0
 80039a4:	2c00      	cmp	r4, #0
 80039a6:	dd0d      	ble.n	80039c4 <_svfprintf_r+0x7b4>
 80039a8:	68b0      	ldr	r0, [r6, #8]
 80039aa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80039ac:	1903      	adds	r3, r0, r4
 80039ae:	603a      	str	r2, [r7, #0]
 80039b0:	607c      	str	r4, [r7, #4]
 80039b2:	60b3      	str	r3, [r6, #8]
 80039b4:	6873      	ldr	r3, [r6, #4]
 80039b6:	3301      	adds	r3, #1
 80039b8:	6073      	str	r3, [r6, #4]
 80039ba:	2b07      	cmp	r3, #7
 80039bc:	dd01      	ble.n	80039c2 <_svfprintf_r+0x7b2>
 80039be:	f000 fc3a 	bl	8004236 <_svfprintf_r+0x1026>
 80039c2:	3708      	adds	r7, #8
 80039c4:	43e3      	mvns	r3, r4
 80039c6:	17db      	asrs	r3, r3, #31
 80039c8:	9916      	ldr	r1, [sp, #88]	; 0x58
 80039ca:	401c      	ands	r4, r3
 80039cc:	1b0c      	subs	r4, r1, r4
 80039ce:	2c00      	cmp	r4, #0
 80039d0:	dc00      	bgt.n	80039d4 <_svfprintf_r+0x7c4>
 80039d2:	e278      	b.n	8003ec6 <_svfprintf_r+0xcb6>
 80039d4:	2c10      	cmp	r4, #16
 80039d6:	dc01      	bgt.n	80039dc <_svfprintf_r+0x7cc>
 80039d8:	f000 fd93 	bl	8004502 <_svfprintf_r+0x12f2>
 80039dc:	4b15      	ldr	r3, [pc, #84]	; (8003a34 <_svfprintf_r+0x824>)
 80039de:	2010      	movs	r0, #16
 80039e0:	4698      	mov	r8, r3
 80039e2:	4682      	mov	sl, r0
 80039e4:	1c3b      	adds	r3, r7, #0
 80039e6:	44c2      	add	sl, r8
 80039e8:	465f      	mov	r7, fp
 80039ea:	4681      	mov	r9, r0
 80039ec:	46ab      	mov	fp, r5
 80039ee:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80039f0:	e004      	b.n	80039fc <_svfprintf_r+0x7ec>
 80039f2:	3308      	adds	r3, #8
 80039f4:	3c10      	subs	r4, #16
 80039f6:	2c10      	cmp	r4, #16
 80039f8:	dc00      	bgt.n	80039fc <_svfprintf_r+0x7ec>
 80039fa:	e253      	b.n	8003ea4 <_svfprintf_r+0xc94>
 80039fc:	4652      	mov	r2, sl
 80039fe:	601a      	str	r2, [r3, #0]
 8003a00:	68b2      	ldr	r2, [r6, #8]
 8003a02:	4648      	mov	r0, r9
 8003a04:	3210      	adds	r2, #16
 8003a06:	6058      	str	r0, [r3, #4]
 8003a08:	60b2      	str	r2, [r6, #8]
 8003a0a:	6872      	ldr	r2, [r6, #4]
 8003a0c:	3201      	adds	r2, #1
 8003a0e:	6072      	str	r2, [r6, #4]
 8003a10:	2a07      	cmp	r2, #7
 8003a12:	ddee      	ble.n	80039f2 <_svfprintf_r+0x7e2>
 8003a14:	1c28      	adds	r0, r5, #0
 8003a16:	1c39      	adds	r1, r7, #0
 8003a18:	1c32      	adds	r2, r6, #0
 8003a1a:	f004 fb55 	bl	80080c8 <__ssprint_r>
 8003a1e:	2800      	cmp	r0, #0
 8003a20:	d000      	beq.n	8003a24 <_svfprintf_r+0x814>
 8003a22:	e6ba      	b.n	800379a <_svfprintf_r+0x58a>
 8003a24:	ab34      	add	r3, sp, #208	; 0xd0
 8003a26:	e7e5      	b.n	80039f4 <_svfprintf_r+0x7e4>
	...
 8003a30:	0800ee6c 	.word	0x0800ee6c
 8003a34:	0800ee0c 	.word	0x0800ee0c
 8003a38:	2300      	movs	r3, #0
 8003a3a:	a834      	add	r0, sp, #208	; 0xd0
 8003a3c:	930e      	str	r3, [sp, #56]	; 0x38
 8003a3e:	9013      	str	r0, [sp, #76]	; 0x4c
 8003a40:	e504      	b.n	800344c <_svfprintf_r+0x23c>
 8003a42:	466b      	mov	r3, sp
 8003a44:	981c      	ldr	r0, [sp, #112]	; 0x70
 8003a46:	33cf      	adds	r3, #207	; 0xcf
 8003a48:	220f      	movs	r2, #15
 8003a4a:	1c19      	adds	r1, r3, #0
 8003a4c:	1c13      	adds	r3, r2, #0
 8003a4e:	4023      	ands	r3, r4
 8003a50:	5cc3      	ldrb	r3, [r0, r3]
 8003a52:	0924      	lsrs	r4, r4, #4
 8003a54:	700b      	strb	r3, [r1, #0]
 8003a56:	1e4b      	subs	r3, r1, #1
 8003a58:	2c00      	cmp	r4, #0
 8003a5a:	d1f6      	bne.n	8003a4a <_svfprintf_r+0x83a>
 8003a5c:	9808      	ldr	r0, [sp, #32]
 8003a5e:	1a40      	subs	r0, r0, r1
 8003a60:	9113      	str	r1, [sp, #76]	; 0x4c
 8003a62:	900e      	str	r0, [sp, #56]	; 0x38
 8003a64:	e4f2      	b.n	800344c <_svfprintf_r+0x23c>
 8003a66:	2c09      	cmp	r4, #9
 8003a68:	d962      	bls.n	8003b30 <_svfprintf_r+0x920>
 8003a6a:	466b      	mov	r3, sp
 8003a6c:	33cf      	adds	r3, #207	; 0xcf
 8003a6e:	46a8      	mov	r8, r5
 8003a70:	1c20      	adds	r0, r4, #0
 8003a72:	210a      	movs	r1, #10
 8003a74:	1c1d      	adds	r5, r3, #0
 8003a76:	f005 e988 	blx	8008d88 <__aeabi_uidivmod>
 8003a7a:	3130      	adds	r1, #48	; 0x30
 8003a7c:	7029      	strb	r1, [r5, #0]
 8003a7e:	1c20      	adds	r0, r4, #0
 8003a80:	210a      	movs	r1, #10
 8003a82:	f005 e904 	blx	8008c8c <__aeabi_uidiv>
 8003a86:	1e6b      	subs	r3, r5, #1
 8003a88:	1c04      	adds	r4, r0, #0
 8003a8a:	2800      	cmp	r0, #0
 8003a8c:	d1f0      	bne.n	8003a70 <_svfprintf_r+0x860>
 8003a8e:	9513      	str	r5, [sp, #76]	; 0x4c
 8003a90:	9a08      	ldr	r2, [sp, #32]
 8003a92:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003a94:	1ad2      	subs	r2, r2, r3
 8003a96:	4645      	mov	r5, r8
 8003a98:	920e      	str	r2, [sp, #56]	; 0x38
 8003a9a:	e4d7      	b.n	800344c <_svfprintf_r+0x23c>
 8003a9c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003a9e:	4659      	mov	r1, fp
 8003aa0:	1c32      	adds	r2, r6, #0
 8003aa2:	f004 fb11 	bl	80080c8 <__ssprint_r>
 8003aa6:	2800      	cmp	r0, #0
 8003aa8:	d000      	beq.n	8003aac <_svfprintf_r+0x89c>
 8003aaa:	e742      	b.n	8003932 <_svfprintf_r+0x722>
 8003aac:	af34      	add	r7, sp, #208	; 0xd0
 8003aae:	e52a      	b.n	8003506 <_svfprintf_r+0x2f6>
 8003ab0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003ab2:	3301      	adds	r3, #1
 8003ab4:	603b      	str	r3, [r7, #0]
 8003ab6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003ab8:	68b2      	ldr	r2, [r6, #8]
 8003aba:	3b01      	subs	r3, #1
 8003abc:	607b      	str	r3, [r7, #4]
 8003abe:	189b      	adds	r3, r3, r2
 8003ac0:	60b3      	str	r3, [r6, #8]
 8003ac2:	6873      	ldr	r3, [r6, #4]
 8003ac4:	3301      	adds	r3, #1
 8003ac6:	6073      	str	r3, [r6, #4]
 8003ac8:	2b07      	cmp	r3, #7
 8003aca:	dc00      	bgt.n	8003ace <_svfprintf_r+0x8be>
 8003acc:	e721      	b.n	8003912 <_svfprintf_r+0x702>
 8003ace:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003ad0:	4659      	mov	r1, fp
 8003ad2:	1c32      	adds	r2, r6, #0
 8003ad4:	f004 faf8 	bl	80080c8 <__ssprint_r>
 8003ad8:	2800      	cmp	r0, #0
 8003ada:	d000      	beq.n	8003ade <_svfprintf_r+0x8ce>
 8003adc:	e729      	b.n	8003932 <_svfprintf_r+0x722>
 8003ade:	af34      	add	r7, sp, #208	; 0xd0
 8003ae0:	e718      	b.n	8003914 <_svfprintf_r+0x704>
 8003ae2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003ae4:	065b      	lsls	r3, r3, #25
 8003ae6:	d400      	bmi.n	8003aea <_svfprintf_r+0x8da>
 8003ae8:	e485      	b.n	80033f6 <_svfprintf_r+0x1e6>
 8003aea:	9910      	ldr	r1, [sp, #64]	; 0x40
 8003aec:	9810      	ldr	r0, [sp, #64]	; 0x40
 8003aee:	3104      	adds	r1, #4
 8003af0:	2400      	movs	r4, #0
 8003af2:	5f04      	ldrsh	r4, [r0, r4]
 8003af4:	9110      	str	r1, [sp, #64]	; 0x40
 8003af6:	e482      	b.n	80033fe <_svfprintf_r+0x1ee>
 8003af8:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003afa:	0649      	lsls	r1, r1, #25
 8003afc:	d400      	bmi.n	8003b00 <_svfprintf_r+0x8f0>
 8003afe:	e41e      	b.n	800333e <_svfprintf_r+0x12e>
 8003b00:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003b02:	8814      	ldrh	r4, [r2, #0]
 8003b04:	3204      	adds	r2, #4
 8003b06:	1c21      	adds	r1, r4, #0
 8003b08:	1e4b      	subs	r3, r1, #1
 8003b0a:	4199      	sbcs	r1, r3
 8003b0c:	9210      	str	r2, [sp, #64]	; 0x40
 8003b0e:	2301      	movs	r3, #1
 8003b10:	f7ff fc1e 	bl	8003350 <_svfprintf_r+0x140>
 8003b14:	9810      	ldr	r0, [sp, #64]	; 0x40
 8003b16:	6804      	ldr	r4, [r0, #0]
 8003b18:	3004      	adds	r0, #4
 8003b1a:	1c21      	adds	r1, r4, #0
 8003b1c:	1e4b      	subs	r3, r1, #1
 8003b1e:	4199      	sbcs	r1, r3
 8003b20:	9010      	str	r0, [sp, #64]	; 0x40
 8003b22:	2300      	movs	r3, #0
 8003b24:	f7ff fc14 	bl	8003350 <_svfprintf_r+0x140>
 8003b28:	9a08      	ldr	r2, [sp, #32]
 8003b2a:	1a51      	subs	r1, r2, r1
 8003b2c:	910e      	str	r1, [sp, #56]	; 0x38
 8003b2e:	e48d      	b.n	800344c <_svfprintf_r+0x23c>
 8003b30:	23cf      	movs	r3, #207	; 0xcf
 8003b32:	981d      	ldr	r0, [sp, #116]	; 0x74
 8003b34:	446b      	add	r3, sp
 8003b36:	3430      	adds	r4, #48	; 0x30
 8003b38:	701c      	strb	r4, [r3, #0]
 8003b3a:	900e      	str	r0, [sp, #56]	; 0x38
 8003b3c:	9313      	str	r3, [sp, #76]	; 0x4c
 8003b3e:	e485      	b.n	800344c <_svfprintf_r+0x23c>
 8003b40:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003b42:	2207      	movs	r2, #7
 8003b44:	3307      	adds	r3, #7
 8003b46:	4393      	bics	r3, r2
 8003b48:	1c1a      	adds	r2, r3, #0
 8003b4a:	3208      	adds	r2, #8
 8003b4c:	9210      	str	r2, [sp, #64]	; 0x40
 8003b4e:	6818      	ldr	r0, [r3, #0]
 8003b50:	6859      	ldr	r1, [r3, #4]
 8003b52:	1c02      	adds	r2, r0, #0
 8003b54:	1c0b      	adds	r3, r1, #0
 8003b56:	4681      	mov	r9, r0
 8003b58:	4688      	mov	r8, r1
 8003b5a:	9218      	str	r2, [sp, #96]	; 0x60
 8003b5c:	9319      	str	r3, [sp, #100]	; 0x64
 8003b5e:	f7fd fc19 	bl	8001394 <__fpclassifyd>
 8003b62:	2801      	cmp	r0, #1
 8003b64:	d000      	beq.n	8003b68 <_svfprintf_r+0x958>
 8003b66:	e247      	b.n	8003ff8 <_svfprintf_r+0xde8>
 8003b68:	4648      	mov	r0, r9
 8003b6a:	4641      	mov	r1, r8
 8003b6c:	4bc7      	ldr	r3, [pc, #796]	; (8003e8c <_svfprintf_r+0xc7c>)
 8003b6e:	4ac6      	ldr	r2, [pc, #792]	; (8003e88 <_svfprintf_r+0xc78>)
 8003b70:	f005 ee92 	blx	8009898 <__aeabi_dcmplt>
 8003b74:	2800      	cmp	r0, #0
 8003b76:	d001      	beq.n	8003b7c <_svfprintf_r+0x96c>
 8003b78:	f000 fc2c 	bl	80043d4 <_svfprintf_r+0x11c4>
 8003b7c:	227b      	movs	r2, #123	; 0x7b
 8003b7e:	446a      	add	r2, sp
 8003b80:	7813      	ldrb	r3, [r2, #0]
 8003b82:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003b84:	2947      	cmp	r1, #71	; 0x47
 8003b86:	dd00      	ble.n	8003b8a <_svfprintf_r+0x97a>
 8003b88:	e305      	b.n	8004196 <_svfprintf_r+0xf86>
 8003b8a:	4ac1      	ldr	r2, [pc, #772]	; (8003e90 <_svfprintf_r+0xc80>)
 8003b8c:	9213      	str	r2, [sp, #76]	; 0x4c
 8003b8e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003b90:	2280      	movs	r2, #128	; 0x80
 8003b92:	4391      	bics	r1, r2
 8003b94:	2203      	movs	r2, #3
 8003b96:	910a      	str	r1, [sp, #40]	; 0x28
 8003b98:	920d      	str	r2, [sp, #52]	; 0x34
 8003b9a:	2003      	movs	r0, #3
 8003b9c:	2100      	movs	r1, #0
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	900e      	str	r0, [sp, #56]	; 0x38
 8003ba2:	9114      	str	r1, [sp, #80]	; 0x50
 8003ba4:	9216      	str	r2, [sp, #88]	; 0x58
 8003ba6:	e45e      	b.n	8003466 <_svfprintf_r+0x256>
 8003ba8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003baa:	4662      	mov	r2, ip
 8003bac:	4313      	orrs	r3, r2
 8003bae:	930a      	str	r3, [sp, #40]	; 0x28
 8003bb0:	f7ff fb9e 	bl	80032f0 <_svfprintf_r+0xe0>
 8003bb4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003bb6:	9709      	str	r7, [sp, #36]	; 0x24
 8003bb8:	2200      	movs	r2, #0
 8003bba:	3b30      	subs	r3, #48	; 0x30
 8003bbc:	0097      	lsls	r7, r2, #2
 8003bbe:	18ba      	adds	r2, r7, r2
 8003bc0:	782f      	ldrb	r7, [r5, #0]
 8003bc2:	0052      	lsls	r2, r2, #1
 8003bc4:	18d2      	adds	r2, r2, r3
 8003bc6:	1c3b      	adds	r3, r7, #0
 8003bc8:	3b30      	subs	r3, #48	; 0x30
 8003bca:	3501      	adds	r5, #1
 8003bcc:	2b09      	cmp	r3, #9
 8003bce:	d9f5      	bls.n	8003bbc <_svfprintf_r+0x9ac>
 8003bd0:	970c      	str	r7, [sp, #48]	; 0x30
 8003bd2:	9211      	str	r2, [sp, #68]	; 0x44
 8003bd4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8003bd6:	f7ff fb8e 	bl	80032f6 <_svfprintf_r+0xe6>
 8003bda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003bdc:	4642      	mov	r2, r8
 8003bde:	4313      	orrs	r3, r2
 8003be0:	930a      	str	r3, [sp, #40]	; 0x28
 8003be2:	f7ff fb85 	bl	80032f0 <_svfprintf_r+0xe0>
 8003be6:	4aab      	ldr	r2, [pc, #684]	; (8003e94 <_svfprintf_r+0xc84>)
 8003be8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003bea:	921c      	str	r2, [sp, #112]	; 0x70
 8003bec:	06db      	lsls	r3, r3, #27
 8003bee:	d400      	bmi.n	8003bf2 <_svfprintf_r+0x9e2>
 8003bf0:	e08e      	b.n	8003d10 <_svfprintf_r+0xb00>
 8003bf2:	9810      	ldr	r0, [sp, #64]	; 0x40
 8003bf4:	6804      	ldr	r4, [r0, #0]
 8003bf6:	3004      	adds	r0, #4
 8003bf8:	9010      	str	r0, [sp, #64]	; 0x40
 8003bfa:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003bfc:	07c0      	lsls	r0, r0, #31
 8003bfe:	d500      	bpl.n	8003c02 <_svfprintf_r+0x9f2>
 8003c00:	e125      	b.n	8003e4e <_svfprintf_r+0xc3e>
 8003c02:	1c21      	adds	r1, r4, #0
 8003c04:	1e4b      	subs	r3, r1, #1
 8003c06:	4199      	sbcs	r1, r3
 8003c08:	2302      	movs	r3, #2
 8003c0a:	f7ff fba1 	bl	8003350 <_svfprintf_r+0x140>
 8003c0e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003c10:	1c13      	adds	r3, r2, #0
 8003c12:	3304      	adds	r3, #4
 8003c14:	6812      	ldr	r2, [r2, #0]
 8003c16:	9310      	str	r3, [sp, #64]	; 0x40
 8003c18:	ab2a      	add	r3, sp, #168	; 0xa8
 8003c1a:	701a      	strb	r2, [r3, #0]
 8003c1c:	f7ff fb76 	bl	800330c <_svfprintf_r+0xfc>
 8003c20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003c22:	06db      	lsls	r3, r3, #27
 8003c24:	d500      	bpl.n	8003c28 <_svfprintf_r+0xa18>
 8003c26:	e122      	b.n	8003e6e <_svfprintf_r+0xc5e>
 8003c28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003c2a:	0652      	lsls	r2, r2, #25
 8003c2c:	d400      	bmi.n	8003c30 <_svfprintf_r+0xa20>
 8003c2e:	e11e      	b.n	8003e6e <_svfprintf_r+0xc5e>
 8003c30:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003c32:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003c34:	4668      	mov	r0, sp
 8003c36:	213c      	movs	r1, #60	; 0x3c
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	5a09      	ldrh	r1, [r1, r0]
 8003c3c:	3204      	adds	r2, #4
 8003c3e:	9306      	str	r3, [sp, #24]
 8003c40:	8019      	strh	r1, [r3, #0]
 8003c42:	9210      	str	r2, [sp, #64]	; 0x40
 8003c44:	f7ff fb19 	bl	800327a <_svfprintf_r+0x6a>
 8003c48:	227b      	movs	r2, #123	; 0x7b
 8003c4a:	446a      	add	r2, sp
 8003c4c:	7813      	ldrb	r3, [r2, #0]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d001      	beq.n	8003c56 <_svfprintf_r+0xa46>
 8003c52:	f7ff fb4d 	bl	80032f0 <_svfprintf_r+0xe0>
 8003c56:	2320      	movs	r3, #32
 8003c58:	7013      	strb	r3, [r2, #0]
 8003c5a:	f7ff fb49 	bl	80032f0 <_svfprintf_r+0xe0>
 8003c5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003c60:	2301      	movs	r3, #1
 8003c62:	431a      	orrs	r2, r3
 8003c64:	920a      	str	r2, [sp, #40]	; 0x28
 8003c66:	f7ff fb43 	bl	80032f0 <_svfprintf_r+0xe0>
 8003c6a:	237b      	movs	r3, #123	; 0x7b
 8003c6c:	446b      	add	r3, sp
 8003c6e:	701c      	strb	r4, [r3, #0]
 8003c70:	f7ff fb3e 	bl	80032f0 <_svfprintf_r+0xe0>
 8003c74:	217b      	movs	r1, #123	; 0x7b
 8003c76:	2300      	movs	r3, #0
 8003c78:	4469      	add	r1, sp
 8003c7a:	700b      	strb	r3, [r1, #0]
 8003c7c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003c7e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8003c80:	6812      	ldr	r2, [r2, #0]
 8003c82:	3404      	adds	r4, #4
 8003c84:	9213      	str	r2, [sp, #76]	; 0x4c
 8003c86:	2a00      	cmp	r2, #0
 8003c88:	d100      	bne.n	8003c8c <_svfprintf_r+0xa7c>
 8003c8a:	e31d      	b.n	80042c8 <_svfprintf_r+0x10b8>
 8003c8c:	4652      	mov	r2, sl
 8003c8e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8003c90:	2a00      	cmp	r2, #0
 8003c92:	da00      	bge.n	8003c96 <_svfprintf_r+0xa86>
 8003c94:	e2c7      	b.n	8004226 <_svfprintf_r+0x1016>
 8003c96:	2100      	movs	r1, #0
 8003c98:	f003 fabc 	bl	8007214 <memchr>
 8003c9c:	2800      	cmp	r0, #0
 8003c9e:	d100      	bne.n	8003ca2 <_svfprintf_r+0xa92>
 8003ca0:	e3a2      	b.n	80043e8 <_svfprintf_r+0x11d8>
 8003ca2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8003ca4:	1a40      	subs	r0, r0, r1
 8003ca6:	900e      	str	r0, [sp, #56]	; 0x38
 8003ca8:	4550      	cmp	r0, sl
 8003caa:	dc00      	bgt.n	8003cae <_svfprintf_r+0xa9e>
 8003cac:	e1e0      	b.n	8004070 <_svfprintf_r+0xe60>
 8003cae:	4652      	mov	r2, sl
 8003cb0:	207b      	movs	r0, #123	; 0x7b
 8003cb2:	4653      	mov	r3, sl
 8003cb4:	4468      	add	r0, sp
 8003cb6:	920e      	str	r2, [sp, #56]	; 0x38
 8003cb8:	2100      	movs	r1, #0
 8003cba:	2200      	movs	r2, #0
 8003cbc:	930d      	str	r3, [sp, #52]	; 0x34
 8003cbe:	9410      	str	r4, [sp, #64]	; 0x40
 8003cc0:	7803      	ldrb	r3, [r0, #0]
 8003cc2:	9114      	str	r1, [sp, #80]	; 0x50
 8003cc4:	9216      	str	r2, [sp, #88]	; 0x58
 8003cc6:	f7ff fbce 	bl	8003466 <_svfprintf_r+0x256>
 8003cca:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003ccc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003cce:	681c      	ldr	r4, [r3, #0]
 8003cd0:	1c19      	adds	r1, r3, #0
 8003cd2:	2302      	movs	r3, #2
 8003cd4:	431a      	orrs	r2, r3
 8003cd6:	3104      	adds	r1, #4
 8003cd8:	ab1f      	add	r3, sp, #124	; 0x7c
 8003cda:	920a      	str	r2, [sp, #40]	; 0x28
 8003cdc:	2230      	movs	r2, #48	; 0x30
 8003cde:	701a      	strb	r2, [r3, #0]
 8003ce0:	9110      	str	r1, [sp, #64]	; 0x40
 8003ce2:	2278      	movs	r2, #120	; 0x78
 8003ce4:	1c21      	adds	r1, r4, #0
 8003ce6:	705a      	strb	r2, [r3, #1]
 8003ce8:	1e4b      	subs	r3, r1, #1
 8003cea:	4199      	sbcs	r1, r3
 8003cec:	4b6a      	ldr	r3, [pc, #424]	; (8003e98 <_svfprintf_r+0xc88>)
 8003cee:	2078      	movs	r0, #120	; 0x78
 8003cf0:	931c      	str	r3, [sp, #112]	; 0x70
 8003cf2:	900c      	str	r0, [sp, #48]	; 0x30
 8003cf4:	2302      	movs	r3, #2
 8003cf6:	f7ff fb2b 	bl	8003350 <_svfprintf_r+0x140>
 8003cfa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003cfc:	4302      	orrs	r2, r0
 8003cfe:	920a      	str	r2, [sp, #40]	; 0x28
 8003d00:	f7ff faf6 	bl	80032f0 <_svfprintf_r+0xe0>
 8003d04:	4964      	ldr	r1, [pc, #400]	; (8003e98 <_svfprintf_r+0xc88>)
 8003d06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d08:	911c      	str	r1, [sp, #112]	; 0x70
 8003d0a:	06db      	lsls	r3, r3, #27
 8003d0c:	d500      	bpl.n	8003d10 <_svfprintf_r+0xb00>
 8003d0e:	e770      	b.n	8003bf2 <_svfprintf_r+0x9e2>
 8003d10:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003d12:	0649      	lsls	r1, r1, #25
 8003d14:	d400      	bmi.n	8003d18 <_svfprintf_r+0xb08>
 8003d16:	e197      	b.n	8004048 <_svfprintf_r+0xe38>
 8003d18:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003d1a:	8814      	ldrh	r4, [r2, #0]
 8003d1c:	3204      	adds	r2, #4
 8003d1e:	9210      	str	r2, [sp, #64]	; 0x40
 8003d20:	e76b      	b.n	8003bfa <_svfprintf_r+0x9ea>
 8003d22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d24:	464a      	mov	r2, r9
 8003d26:	4313      	orrs	r3, r2
 8003d28:	930a      	str	r3, [sp, #40]	; 0x28
 8003d2a:	f7ff fae1 	bl	80032f0 <_svfprintf_r+0xe0>
 8003d2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d30:	4303      	orrs	r3, r0
 8003d32:	930a      	str	r3, [sp, #40]	; 0x28
 8003d34:	f7ff fadc 	bl	80032f0 <_svfprintf_r+0xe0>
 8003d38:	782a      	ldrb	r2, [r5, #0]
 8003d3a:	3501      	adds	r5, #1
 8003d3c:	920c      	str	r2, [sp, #48]	; 0x30
 8003d3e:	2a2a      	cmp	r2, #42	; 0x2a
 8003d40:	d101      	bne.n	8003d46 <_svfprintf_r+0xb36>
 8003d42:	f000 fc07 	bl	8004554 <_svfprintf_r+0x1344>
 8003d46:	1c13      	adds	r3, r2, #0
 8003d48:	3b30      	subs	r3, #48	; 0x30
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	4692      	mov	sl, r2
 8003d4e:	2b09      	cmp	r3, #9
 8003d50:	d901      	bls.n	8003d56 <_svfprintf_r+0xb46>
 8003d52:	f7ff fad0 	bl	80032f6 <_svfprintf_r+0xe6>
 8003d56:	46ba      	mov	sl, r7
 8003d58:	0097      	lsls	r7, r2, #2
 8003d5a:	18ba      	adds	r2, r7, r2
 8003d5c:	782f      	ldrb	r7, [r5, #0]
 8003d5e:	0052      	lsls	r2, r2, #1
 8003d60:	189a      	adds	r2, r3, r2
 8003d62:	1c3b      	adds	r3, r7, #0
 8003d64:	3b30      	subs	r3, #48	; 0x30
 8003d66:	3501      	adds	r5, #1
 8003d68:	2b09      	cmp	r3, #9
 8003d6a:	d9f5      	bls.n	8003d58 <_svfprintf_r+0xb48>
 8003d6c:	970c      	str	r7, [sp, #48]	; 0x30
 8003d6e:	4657      	mov	r7, sl
 8003d70:	4692      	mov	sl, r2
 8003d72:	2a00      	cmp	r2, #0
 8003d74:	db01      	blt.n	8003d7a <_svfprintf_r+0xb6a>
 8003d76:	f7ff fabe 	bl	80032f6 <_svfprintf_r+0xe6>
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	425b      	negs	r3, r3
 8003d7e:	469a      	mov	sl, r3
 8003d80:	f7ff fab9 	bl	80032f6 <_svfprintf_r+0xe6>
 8003d84:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003d86:	4659      	mov	r1, fp
 8003d88:	1c32      	adds	r2, r6, #0
 8003d8a:	f004 f99d 	bl	80080c8 <__ssprint_r>
 8003d8e:	2800      	cmp	r0, #0
 8003d90:	d000      	beq.n	8003d94 <_svfprintf_r+0xb84>
 8003d92:	e5ce      	b.n	8003932 <_svfprintf_r+0x722>
 8003d94:	af34      	add	r7, sp, #208	; 0xd0
 8003d96:	e4bc      	b.n	8003712 <_svfprintf_r+0x502>
 8003d98:	4b40      	ldr	r3, [pc, #256]	; (8003e9c <_svfprintf_r+0xc8c>)
 8003d9a:	603b      	str	r3, [r7, #0]
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	607b      	str	r3, [r7, #4]
 8003da0:	68b3      	ldr	r3, [r6, #8]
 8003da2:	3301      	adds	r3, #1
 8003da4:	60b3      	str	r3, [r6, #8]
 8003da6:	6873      	ldr	r3, [r6, #4]
 8003da8:	3301      	adds	r3, #1
 8003daa:	6073      	str	r3, [r6, #4]
 8003dac:	2b07      	cmp	r3, #7
 8003dae:	dd00      	ble.n	8003db2 <_svfprintf_r+0xba2>
 8003db0:	e205      	b.n	80041be <_svfprintf_r+0xfae>
 8003db2:	3708      	adds	r7, #8
 8003db4:	2c00      	cmp	r4, #0
 8003db6:	d107      	bne.n	8003dc8 <_svfprintf_r+0xbb8>
 8003db8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003dba:	2a00      	cmp	r2, #0
 8003dbc:	d104      	bne.n	8003dc8 <_svfprintf_r+0xbb8>
 8003dbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003dc0:	07db      	lsls	r3, r3, #31
 8003dc2:	d401      	bmi.n	8003dc8 <_svfprintf_r+0xbb8>
 8003dc4:	f7ff fc18 	bl	80035f8 <_svfprintf_r+0x3e8>
 8003dc8:	991a      	ldr	r1, [sp, #104]	; 0x68
 8003dca:	68b2      	ldr	r2, [r6, #8]
 8003dcc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8003dce:	188b      	adds	r3, r1, r2
 8003dd0:	6038      	str	r0, [r7, #0]
 8003dd2:	6079      	str	r1, [r7, #4]
 8003dd4:	60b3      	str	r3, [r6, #8]
 8003dd6:	6873      	ldr	r3, [r6, #4]
 8003dd8:	3301      	adds	r3, #1
 8003dda:	6073      	str	r3, [r6, #4]
 8003ddc:	2b07      	cmp	r3, #7
 8003dde:	dd00      	ble.n	8003de2 <_svfprintf_r+0xbd2>
 8003de0:	e30f      	b.n	8004402 <_svfprintf_r+0x11f2>
 8003de2:	1c3b      	adds	r3, r7, #0
 8003de4:	3308      	adds	r3, #8
 8003de6:	4264      	negs	r4, r4
 8003de8:	2c00      	cmp	r4, #0
 8003dea:	dc00      	bgt.n	8003dee <_svfprintf_r+0xbde>
 8003dec:	e209      	b.n	8004202 <_svfprintf_r+0xff2>
 8003dee:	2c10      	cmp	r4, #16
 8003df0:	dc00      	bgt.n	8003df4 <_svfprintf_r+0xbe4>
 8003df2:	e3ac      	b.n	800454e <_svfprintf_r+0x133e>
 8003df4:	492a      	ldr	r1, [pc, #168]	; (8003ea0 <_svfprintf_r+0xc90>)
 8003df6:	2210      	movs	r2, #16
 8003df8:	4688      	mov	r8, r1
 8003dfa:	4691      	mov	r9, r2
 8003dfc:	46aa      	mov	sl, r5
 8003dfe:	44c1      	add	r9, r8
 8003e00:	2710      	movs	r7, #16
 8003e02:	465d      	mov	r5, fp
 8003e04:	e004      	b.n	8003e10 <_svfprintf_r+0xc00>
 8003e06:	3308      	adds	r3, #8
 8003e08:	3c10      	subs	r4, #16
 8003e0a:	2c10      	cmp	r4, #16
 8003e0c:	dc00      	bgt.n	8003e10 <_svfprintf_r+0xc00>
 8003e0e:	e1e8      	b.n	80041e2 <_svfprintf_r+0xfd2>
 8003e10:	68b2      	ldr	r2, [r6, #8]
 8003e12:	4648      	mov	r0, r9
 8003e14:	3210      	adds	r2, #16
 8003e16:	6018      	str	r0, [r3, #0]
 8003e18:	605f      	str	r7, [r3, #4]
 8003e1a:	60b2      	str	r2, [r6, #8]
 8003e1c:	6872      	ldr	r2, [r6, #4]
 8003e1e:	3201      	adds	r2, #1
 8003e20:	6072      	str	r2, [r6, #4]
 8003e22:	2a07      	cmp	r2, #7
 8003e24:	ddef      	ble.n	8003e06 <_svfprintf_r+0xbf6>
 8003e26:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003e28:	1c29      	adds	r1, r5, #0
 8003e2a:	1c32      	adds	r2, r6, #0
 8003e2c:	f004 f94c 	bl	80080c8 <__ssprint_r>
 8003e30:	2800      	cmp	r0, #0
 8003e32:	d124      	bne.n	8003e7e <_svfprintf_r+0xc6e>
 8003e34:	ab34      	add	r3, sp, #208	; 0xd0
 8003e36:	e7e7      	b.n	8003e08 <_svfprintf_r+0xbf8>
 8003e38:	68b3      	ldr	r3, [r6, #8]
 8003e3a:	46d9      	mov	r9, fp
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d100      	bne.n	8003e42 <_svfprintf_r+0xc32>
 8003e40:	e4ac      	b.n	800379c <_svfprintf_r+0x58c>
 8003e42:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003e44:	4659      	mov	r1, fp
 8003e46:	1c32      	adds	r2, r6, #0
 8003e48:	f004 f93e 	bl	80080c8 <__ssprint_r>
 8003e4c:	e4a6      	b.n	800379c <_svfprintf_r+0x58c>
 8003e4e:	2c00      	cmp	r4, #0
 8003e50:	d100      	bne.n	8003e54 <_svfprintf_r+0xc44>
 8003e52:	e0cd      	b.n	8003ff0 <_svfprintf_r+0xde0>
 8003e54:	a90c      	add	r1, sp, #48	; 0x30
 8003e56:	ab1f      	add	r3, sp, #124	; 0x7c
 8003e58:	2230      	movs	r2, #48	; 0x30
 8003e5a:	7809      	ldrb	r1, [r1, #0]
 8003e5c:	701a      	strb	r2, [r3, #0]
 8003e5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003e60:	7059      	strb	r1, [r3, #1]
 8003e62:	2302      	movs	r3, #2
 8003e64:	431a      	orrs	r2, r3
 8003e66:	920a      	str	r2, [sp, #40]	; 0x28
 8003e68:	2101      	movs	r1, #1
 8003e6a:	f7ff fa71 	bl	8003350 <_svfprintf_r+0x140>
 8003e6e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8003e70:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003e72:	6803      	ldr	r3, [r0, #0]
 8003e74:	3004      	adds	r0, #4
 8003e76:	6019      	str	r1, [r3, #0]
 8003e78:	9010      	str	r0, [sp, #64]	; 0x40
 8003e7a:	f7ff f9fe 	bl	800327a <_svfprintf_r+0x6a>
 8003e7e:	46a9      	mov	r9, r5
 8003e80:	e48c      	b.n	800379c <_svfprintf_r+0x58c>
 8003e82:	46c0      	nop			; (mov r8, r8)
 8003e84:	46c0      	nop			; (mov r8, r8)
 8003e86:	46c0      	nop			; (mov r8, r8)
	...
 8003e90:	0800ee2c 	.word	0x0800ee2c
 8003e94:	0800ee3c 	.word	0x0800ee3c
 8003e98:	0800ee50 	.word	0x0800ee50
 8003e9c:	0800ee6c 	.word	0x0800ee6c
 8003ea0:	0800ee0c 	.word	0x0800ee0c
 8003ea4:	465d      	mov	r5, fp
 8003ea6:	46bb      	mov	fp, r7
 8003ea8:	1c1f      	adds	r7, r3, #0
 8003eaa:	4643      	mov	r3, r8
 8003eac:	3310      	adds	r3, #16
 8003eae:	603b      	str	r3, [r7, #0]
 8003eb0:	68b1      	ldr	r1, [r6, #8]
 8003eb2:	6873      	ldr	r3, [r6, #4]
 8003eb4:	607c      	str	r4, [r7, #4]
 8003eb6:	3301      	adds	r3, #1
 8003eb8:	190c      	adds	r4, r1, r4
 8003eba:	60b4      	str	r4, [r6, #8]
 8003ebc:	6073      	str	r3, [r6, #4]
 8003ebe:	2b07      	cmp	r3, #7
 8003ec0:	dd00      	ble.n	8003ec4 <_svfprintf_r+0xcb4>
 8003ec2:	e1e8      	b.n	8004296 <_svfprintf_r+0x1086>
 8003ec4:	3708      	adds	r7, #8
 8003ec6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8003ec8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003eca:	4690      	mov	r8, r2
 8003ecc:	9815      	ldr	r0, [sp, #84]	; 0x54
 8003ece:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8003ed0:	4490      	add	r8, r2
 8003ed2:	4283      	cmp	r3, r0
 8003ed4:	db4c      	blt.n	8003f70 <_svfprintf_r+0xd60>
 8003ed6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003ed8:	07c9      	lsls	r1, r1, #31
 8003eda:	d449      	bmi.n	8003f70 <_svfprintf_r+0xd60>
 8003edc:	980c      	ldr	r0, [sp, #48]	; 0x30
 8003ede:	4641      	mov	r1, r8
 8003ee0:	1a42      	subs	r2, r0, r1
 8003ee2:	9815      	ldr	r0, [sp, #84]	; 0x54
 8003ee4:	1ac3      	subs	r3, r0, r3
 8003ee6:	1c1c      	adds	r4, r3, #0
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	dd00      	ble.n	8003eee <_svfprintf_r+0xcde>
 8003eec:	1c14      	adds	r4, r2, #0
 8003eee:	2c00      	cmp	r4, #0
 8003ef0:	dd0c      	ble.n	8003f0c <_svfprintf_r+0xcfc>
 8003ef2:	68b0      	ldr	r0, [r6, #8]
 8003ef4:	4641      	mov	r1, r8
 8003ef6:	1902      	adds	r2, r0, r4
 8003ef8:	6039      	str	r1, [r7, #0]
 8003efa:	607c      	str	r4, [r7, #4]
 8003efc:	60b2      	str	r2, [r6, #8]
 8003efe:	6872      	ldr	r2, [r6, #4]
 8003f00:	3201      	adds	r2, #1
 8003f02:	6072      	str	r2, [r6, #4]
 8003f04:	2a07      	cmp	r2, #7
 8003f06:	dd00      	ble.n	8003f0a <_svfprintf_r+0xcfa>
 8003f08:	e1a1      	b.n	800424e <_svfprintf_r+0x103e>
 8003f0a:	3708      	adds	r7, #8
 8003f0c:	43e2      	mvns	r2, r4
 8003f0e:	17d2      	asrs	r2, r2, #31
 8003f10:	4014      	ands	r4, r2
 8003f12:	1b1c      	subs	r4, r3, r4
 8003f14:	2c00      	cmp	r4, #0
 8003f16:	dc01      	bgt.n	8003f1c <_svfprintf_r+0xd0c>
 8003f18:	f7ff fb6e 	bl	80035f8 <_svfprintf_r+0x3e8>
 8003f1c:	2c10      	cmp	r4, #16
 8003f1e:	dc00      	bgt.n	8003f22 <_svfprintf_r+0xd12>
 8003f20:	e30f      	b.n	8004542 <_svfprintf_r+0x1332>
 8003f22:	48e5      	ldr	r0, [pc, #916]	; (80042b8 <_svfprintf_r+0x10a8>)
 8003f24:	2110      	movs	r1, #16
 8003f26:	4680      	mov	r8, r0
 8003f28:	468a      	mov	sl, r1
 8003f2a:	1c3b      	adds	r3, r7, #0
 8003f2c:	44c2      	add	sl, r8
 8003f2e:	465f      	mov	r7, fp
 8003f30:	4689      	mov	r9, r1
 8003f32:	46ab      	mov	fp, r5
 8003f34:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8003f36:	e004      	b.n	8003f42 <_svfprintf_r+0xd32>
 8003f38:	3308      	adds	r3, #8
 8003f3a:	3c10      	subs	r4, #16
 8003f3c:	2c10      	cmp	r4, #16
 8003f3e:	dc00      	bgt.n	8003f42 <_svfprintf_r+0xd32>
 8003f40:	e087      	b.n	8004052 <_svfprintf_r+0xe42>
 8003f42:	68b2      	ldr	r2, [r6, #8]
 8003f44:	4650      	mov	r0, sl
 8003f46:	3210      	adds	r2, #16
 8003f48:	4649      	mov	r1, r9
 8003f4a:	6018      	str	r0, [r3, #0]
 8003f4c:	6059      	str	r1, [r3, #4]
 8003f4e:	60b2      	str	r2, [r6, #8]
 8003f50:	6872      	ldr	r2, [r6, #4]
 8003f52:	3201      	adds	r2, #1
 8003f54:	6072      	str	r2, [r6, #4]
 8003f56:	2a07      	cmp	r2, #7
 8003f58:	ddee      	ble.n	8003f38 <_svfprintf_r+0xd28>
 8003f5a:	1c28      	adds	r0, r5, #0
 8003f5c:	1c39      	adds	r1, r7, #0
 8003f5e:	1c32      	adds	r2, r6, #0
 8003f60:	f004 f8b2 	bl	80080c8 <__ssprint_r>
 8003f64:	2800      	cmp	r0, #0
 8003f66:	d001      	beq.n	8003f6c <_svfprintf_r+0xd5c>
 8003f68:	f7ff fc17 	bl	800379a <_svfprintf_r+0x58a>
 8003f6c:	ab34      	add	r3, sp, #208	; 0xd0
 8003f6e:	e7e4      	b.n	8003f3a <_svfprintf_r+0xd2a>
 8003f70:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8003f72:	981a      	ldr	r0, [sp, #104]	; 0x68
 8003f74:	68b1      	ldr	r1, [r6, #8]
 8003f76:	603a      	str	r2, [r7, #0]
 8003f78:	1842      	adds	r2, r0, r1
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	60b2      	str	r2, [r6, #8]
 8003f7e:	6872      	ldr	r2, [r6, #4]
 8003f80:	3201      	adds	r2, #1
 8003f82:	6072      	str	r2, [r6, #4]
 8003f84:	2a07      	cmp	r2, #7
 8003f86:	dd00      	ble.n	8003f8a <_svfprintf_r+0xd7a>
 8003f88:	e16f      	b.n	800426a <_svfprintf_r+0x105a>
 8003f8a:	3708      	adds	r7, #8
 8003f8c:	e7a6      	b.n	8003edc <_svfprintf_r+0xccc>
 8003f8e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003f90:	2301      	movs	r3, #1
 8003f92:	4203      	tst	r3, r0
 8003f94:	d000      	beq.n	8003f98 <_svfprintf_r+0xd88>
 8003f96:	e458      	b.n	800384a <_svfprintf_r+0x63a>
 8003f98:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8003f9a:	607b      	str	r3, [r7, #4]
 8003f9c:	68b3      	ldr	r3, [r6, #8]
 8003f9e:	6038      	str	r0, [r7, #0]
 8003fa0:	3301      	adds	r3, #1
 8003fa2:	e58d      	b.n	8003ac0 <_svfprintf_r+0x8b0>
 8003fa4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003fa6:	4659      	mov	r1, fp
 8003fa8:	1c32      	adds	r2, r6, #0
 8003faa:	f004 f88d 	bl	80080c8 <__ssprint_r>
 8003fae:	2800      	cmp	r0, #0
 8003fb0:	d000      	beq.n	8003fb4 <_svfprintf_r+0xda4>
 8003fb2:	e4be      	b.n	8003932 <_svfprintf_r+0x722>
 8003fb4:	af34      	add	r7, sp, #208	; 0xd0
 8003fb6:	e464      	b.n	8003882 <_svfprintf_r+0x672>
 8003fb8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003fba:	4659      	mov	r1, fp
 8003fbc:	1c32      	adds	r2, r6, #0
 8003fbe:	f004 f883 	bl	80080c8 <__ssprint_r>
 8003fc2:	2800      	cmp	r0, #0
 8003fc4:	d000      	beq.n	8003fc8 <_svfprintf_r+0xdb8>
 8003fc6:	e4b4      	b.n	8003932 <_svfprintf_r+0x722>
 8003fc8:	af34      	add	r7, sp, #208	; 0xd0
 8003fca:	e44c      	b.n	8003866 <_svfprintf_r+0x656>
 8003fcc:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003fce:	4659      	mov	r1, fp
 8003fd0:	1c32      	adds	r2, r6, #0
 8003fd2:	f004 f879 	bl	80080c8 <__ssprint_r>
 8003fd6:	2800      	cmp	r0, #0
 8003fd8:	d000      	beq.n	8003fdc <_svfprintf_r+0xdcc>
 8003fda:	e4aa      	b.n	8003932 <_svfprintf_r+0x722>
 8003fdc:	af34      	add	r7, sp, #208	; 0xd0
 8003fde:	f7ff fab9 	bl	8003554 <_svfprintf_r+0x344>
 8003fe2:	207b      	movs	r0, #123	; 0x7b
 8003fe4:	232d      	movs	r3, #45	; 0x2d
 8003fe6:	4468      	add	r0, sp
 8003fe8:	4264      	negs	r4, r4
 8003fea:	7003      	strb	r3, [r0, #0]
 8003fec:	f7ff fa0b 	bl	8003406 <_svfprintf_r+0x1f6>
 8003ff0:	2100      	movs	r1, #0
 8003ff2:	2302      	movs	r3, #2
 8003ff4:	f7ff f9ac 	bl	8003350 <_svfprintf_r+0x140>
 8003ff8:	4648      	mov	r0, r9
 8003ffa:	4641      	mov	r1, r8
 8003ffc:	f7fd f9ca 	bl	8001394 <__fpclassifyd>
 8004000:	2800      	cmp	r0, #0
 8004002:	d144      	bne.n	800408e <_svfprintf_r+0xe7e>
 8004004:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004006:	2b47      	cmp	r3, #71	; 0x47
 8004008:	dc00      	bgt.n	800400c <_svfprintf_r+0xdfc>
 800400a:	e0d5      	b.n	80041b8 <_svfprintf_r+0xfa8>
 800400c:	49ab      	ldr	r1, [pc, #684]	; (80042bc <_svfprintf_r+0x10ac>)
 800400e:	9113      	str	r1, [sp, #76]	; 0x4c
 8004010:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004012:	2380      	movs	r3, #128	; 0x80
 8004014:	207b      	movs	r0, #123	; 0x7b
 8004016:	439a      	bics	r2, r3
 8004018:	4468      	add	r0, sp
 800401a:	2103      	movs	r1, #3
 800401c:	920a      	str	r2, [sp, #40]	; 0x28
 800401e:	7803      	ldrb	r3, [r0, #0]
 8004020:	910d      	str	r1, [sp, #52]	; 0x34
 8004022:	2203      	movs	r2, #3
 8004024:	2000      	movs	r0, #0
 8004026:	2100      	movs	r1, #0
 8004028:	920e      	str	r2, [sp, #56]	; 0x38
 800402a:	9014      	str	r0, [sp, #80]	; 0x50
 800402c:	9116      	str	r1, [sp, #88]	; 0x58
 800402e:	f7ff fa1a 	bl	8003466 <_svfprintf_r+0x256>
 8004032:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004034:	9810      	ldr	r0, [sp, #64]	; 0x40
 8004036:	681c      	ldr	r4, [r3, #0]
 8004038:	3004      	adds	r0, #4
 800403a:	1c21      	adds	r1, r4, #0
 800403c:	1e4b      	subs	r3, r1, #1
 800403e:	4199      	sbcs	r1, r3
 8004040:	9010      	str	r0, [sp, #64]	; 0x40
 8004042:	2300      	movs	r3, #0
 8004044:	f7ff f984 	bl	8003350 <_svfprintf_r+0x140>
 8004048:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800404a:	681c      	ldr	r4, [r3, #0]
 800404c:	3304      	adds	r3, #4
 800404e:	9310      	str	r3, [sp, #64]	; 0x40
 8004050:	e5d3      	b.n	8003bfa <_svfprintf_r+0x9ea>
 8004052:	465d      	mov	r5, fp
 8004054:	46bb      	mov	fp, r7
 8004056:	1c1f      	adds	r7, r3, #0
 8004058:	4643      	mov	r3, r8
 800405a:	68b2      	ldr	r2, [r6, #8]
 800405c:	3310      	adds	r3, #16
 800405e:	607c      	str	r4, [r7, #4]
 8004060:	603b      	str	r3, [r7, #0]
 8004062:	1914      	adds	r4, r2, r4
 8004064:	f7ff fb2a 	bl	80036bc <_svfprintf_r+0x4ac>
 8004068:	4a93      	ldr	r2, [pc, #588]	; (80042b8 <_svfprintf_r+0x10a8>)
 800406a:	4690      	mov	r8, r2
 800406c:	f7ff faa5 	bl	80035ba <_svfprintf_r+0x3aa>
 8004070:	980e      	ldr	r0, [sp, #56]	; 0x38
 8004072:	43c3      	mvns	r3, r0
 8004074:	17db      	asrs	r3, r3, #31
 8004076:	4018      	ands	r0, r3
 8004078:	217b      	movs	r1, #123	; 0x7b
 800407a:	900d      	str	r0, [sp, #52]	; 0x34
 800407c:	4469      	add	r1, sp
 800407e:	2200      	movs	r2, #0
 8004080:	2000      	movs	r0, #0
 8004082:	780b      	ldrb	r3, [r1, #0]
 8004084:	9410      	str	r4, [sp, #64]	; 0x40
 8004086:	9214      	str	r2, [sp, #80]	; 0x50
 8004088:	9016      	str	r0, [sp, #88]	; 0x58
 800408a:	f7ff f9ec 	bl	8003466 <_svfprintf_r+0x256>
 800408e:	4652      	mov	r2, sl
 8004090:	2320      	movs	r3, #32
 8004092:	3201      	adds	r2, #1
 8004094:	d100      	bne.n	8004098 <_svfprintf_r+0xe88>
 8004096:	e09e      	b.n	80041d6 <_svfprintf_r+0xfc6>
 8004098:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800409a:	439a      	bics	r2, r3
 800409c:	9209      	str	r2, [sp, #36]	; 0x24
 800409e:	2a47      	cmp	r2, #71	; 0x47
 80040a0:	d104      	bne.n	80040ac <_svfprintf_r+0xe9c>
 80040a2:	4653      	mov	r3, sl
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d101      	bne.n	80040ac <_svfprintf_r+0xe9c>
 80040a8:	2001      	movs	r0, #1
 80040aa:	4682      	mov	sl, r0
 80040ac:	2380      	movs	r3, #128	; 0x80
 80040ae:	990a      	ldr	r1, [sp, #40]	; 0x28
 80040b0:	005b      	lsls	r3, r3, #1
 80040b2:	4319      	orrs	r1, r3
 80040b4:	2000      	movs	r0, #0
 80040b6:	4643      	mov	r3, r8
 80040b8:	9112      	str	r1, [sp, #72]	; 0x48
 80040ba:	9014      	str	r0, [sp, #80]	; 0x50
 80040bc:	2b00      	cmp	r3, #0
 80040be:	da00      	bge.n	80040c2 <_svfprintf_r+0xeb2>
 80040c0:	e1ab      	b.n	800441a <_svfprintf_r+0x120a>
 80040c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040c4:	3b46      	subs	r3, #70	; 0x46
 80040c6:	4258      	negs	r0, r3
 80040c8:	4158      	adcs	r0, r3
 80040ca:	900d      	str	r0, [sp, #52]	; 0x34
 80040cc:	2800      	cmp	r0, #0
 80040ce:	d000      	beq.n	80040d2 <_svfprintf_r+0xec2>
 80040d0:	e116      	b.n	8004300 <_svfprintf_r+0x10f0>
 80040d2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80040d4:	2945      	cmp	r1, #69	; 0x45
 80040d6:	d000      	beq.n	80040da <_svfprintf_r+0xeca>
 80040d8:	e1a5      	b.n	8004426 <_svfprintf_r+0x1216>
 80040da:	2302      	movs	r3, #2
 80040dc:	9300      	str	r3, [sp, #0]
 80040de:	ab20      	add	r3, sp, #128	; 0x80
 80040e0:	9302      	str	r3, [sp, #8]
 80040e2:	4654      	mov	r4, sl
 80040e4:	ab21      	add	r3, sp, #132	; 0x84
 80040e6:	3401      	adds	r4, #1
 80040e8:	9303      	str	r3, [sp, #12]
 80040ea:	ab22      	add	r3, sp, #136	; 0x88
 80040ec:	9401      	str	r4, [sp, #4]
 80040ee:	9304      	str	r3, [sp, #16]
 80040f0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80040f2:	464a      	mov	r2, r9
 80040f4:	4643      	mov	r3, r8
 80040f6:	f000 fedb 	bl	8004eb0 <_dtoa_r>
 80040fa:	9013      	str	r0, [sp, #76]	; 0x4c
 80040fc:	1904      	adds	r4, r0, r4
 80040fe:	4648      	mov	r0, r9
 8004100:	4641      	mov	r1, r8
 8004102:	4b6c      	ldr	r3, [pc, #432]	; (80042b4 <_svfprintf_r+0x10a4>)
 8004104:	4a6a      	ldr	r2, [pc, #424]	; (80042b0 <_svfprintf_r+0x10a0>)
 8004106:	f005 ebbc 	blx	8009880 <__aeabi_dcmpeq>
 800410a:	2800      	cmp	r0, #0
 800410c:	d109      	bne.n	8004122 <_svfprintf_r+0xf12>
 800410e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004110:	429c      	cmp	r4, r3
 8004112:	d800      	bhi.n	8004116 <_svfprintf_r+0xf06>
 8004114:	e244      	b.n	80045a0 <_svfprintf_r+0x1390>
 8004116:	2230      	movs	r2, #48	; 0x30
 8004118:	701a      	strb	r2, [r3, #0]
 800411a:	3301      	adds	r3, #1
 800411c:	9322      	str	r3, [sp, #136]	; 0x88
 800411e:	42a3      	cmp	r3, r4
 8004120:	d1fa      	bne.n	8004118 <_svfprintf_r+0xf08>
 8004122:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004124:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004126:	1ae4      	subs	r4, r4, r3
 8004128:	9415      	str	r4, [sp, #84]	; 0x54
 800412a:	2847      	cmp	r0, #71	; 0x47
 800412c:	d100      	bne.n	8004130 <_svfprintf_r+0xf20>
 800412e:	e11c      	b.n	800436a <_svfprintf_r+0x115a>
 8004130:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004132:	2b65      	cmp	r3, #101	; 0x65
 8004134:	dc00      	bgt.n	8004138 <_svfprintf_r+0xf28>
 8004136:	e226      	b.n	8004586 <_svfprintf_r+0x1376>
 8004138:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800413a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800413c:	2a66      	cmp	r2, #102	; 0x66
 800413e:	d100      	bne.n	8004142 <_svfprintf_r+0xf32>
 8004140:	e182      	b.n	8004448 <_svfprintf_r+0x1238>
 8004142:	9915      	ldr	r1, [sp, #84]	; 0x54
 8004144:	428b      	cmp	r3, r1
 8004146:	da00      	bge.n	800414a <_svfprintf_r+0xf3a>
 8004148:	e16f      	b.n	800442a <_svfprintf_r+0x121a>
 800414a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800414c:	07d2      	lsls	r2, r2, #31
 800414e:	d500      	bpl.n	8004152 <_svfprintf_r+0xf42>
 8004150:	e1ca      	b.n	80044e8 <_svfprintf_r+0x12d8>
 8004152:	43da      	mvns	r2, r3
 8004154:	17d2      	asrs	r2, r2, #31
 8004156:	401a      	ands	r2, r3
 8004158:	2067      	movs	r0, #103	; 0x67
 800415a:	920d      	str	r2, [sp, #52]	; 0x34
 800415c:	930e      	str	r3, [sp, #56]	; 0x38
 800415e:	900c      	str	r0, [sp, #48]	; 0x30
 8004160:	9316      	str	r3, [sp, #88]	; 0x58
 8004162:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8004164:	2a00      	cmp	r2, #0
 8004166:	d100      	bne.n	800416a <_svfprintf_r+0xf5a>
 8004168:	e0c1      	b.n	80042ee <_svfprintf_r+0x10de>
 800416a:	207b      	movs	r0, #123	; 0x7b
 800416c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800416e:	232d      	movs	r3, #45	; 0x2d
 8004170:	4468      	add	r0, sp
 8004172:	2200      	movs	r2, #0
 8004174:	7003      	strb	r3, [r0, #0]
 8004176:	910a      	str	r1, [sp, #40]	; 0x28
 8004178:	9214      	str	r2, [sp, #80]	; 0x50
 800417a:	f7ff f976 	bl	800346a <_svfprintf_r+0x25a>
 800417e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004180:	4659      	mov	r1, fp
 8004182:	1c32      	adds	r2, r6, #0
 8004184:	f003 ffa0 	bl	80080c8 <__ssprint_r>
 8004188:	2800      	cmp	r0, #0
 800418a:	d001      	beq.n	8004190 <_svfprintf_r+0xf80>
 800418c:	f7ff fbd1 	bl	8003932 <_svfprintf_r+0x722>
 8004190:	af34      	add	r7, sp, #208	; 0xd0
 8004192:	f7ff fad5 	bl	8003740 <_svfprintf_r+0x530>
 8004196:	484a      	ldr	r0, [pc, #296]	; (80042c0 <_svfprintf_r+0x10b0>)
 8004198:	9013      	str	r0, [sp, #76]	; 0x4c
 800419a:	e4f8      	b.n	8003b8e <_svfprintf_r+0x97e>
 800419c:	2140      	movs	r1, #64	; 0x40
 800419e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80041a0:	f002 fdaa 	bl	8006cf8 <_malloc_r>
 80041a4:	4649      	mov	r1, r9
 80041a6:	6008      	str	r0, [r1, #0]
 80041a8:	6108      	str	r0, [r1, #16]
 80041aa:	2800      	cmp	r0, #0
 80041ac:	d100      	bne.n	80041b0 <_svfprintf_r+0xfa0>
 80041ae:	e1ef      	b.n	8004590 <_svfprintf_r+0x1380>
 80041b0:	2340      	movs	r3, #64	; 0x40
 80041b2:	614b      	str	r3, [r1, #20]
 80041b4:	f7ff f84b 	bl	800324e <_svfprintf_r+0x3e>
 80041b8:	4842      	ldr	r0, [pc, #264]	; (80042c4 <_svfprintf_r+0x10b4>)
 80041ba:	9013      	str	r0, [sp, #76]	; 0x4c
 80041bc:	e728      	b.n	8004010 <_svfprintf_r+0xe00>
 80041be:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80041c0:	4659      	mov	r1, fp
 80041c2:	1c32      	adds	r2, r6, #0
 80041c4:	f003 ff80 	bl	80080c8 <__ssprint_r>
 80041c8:	2800      	cmp	r0, #0
 80041ca:	d001      	beq.n	80041d0 <_svfprintf_r+0xfc0>
 80041cc:	f7ff fbb1 	bl	8003932 <_svfprintf_r+0x722>
 80041d0:	9c20      	ldr	r4, [sp, #128]	; 0x80
 80041d2:	af34      	add	r7, sp, #208	; 0xd0
 80041d4:	e5ee      	b.n	8003db4 <_svfprintf_r+0xba4>
 80041d6:	980c      	ldr	r0, [sp, #48]	; 0x30
 80041d8:	2106      	movs	r1, #6
 80041da:	4398      	bics	r0, r3
 80041dc:	9009      	str	r0, [sp, #36]	; 0x24
 80041de:	468a      	mov	sl, r1
 80041e0:	e764      	b.n	80040ac <_svfprintf_r+0xe9c>
 80041e2:	46ab      	mov	fp, r5
 80041e4:	4655      	mov	r5, sl
 80041e6:	4642      	mov	r2, r8
 80041e8:	3210      	adds	r2, #16
 80041ea:	601a      	str	r2, [r3, #0]
 80041ec:	68b1      	ldr	r1, [r6, #8]
 80041ee:	6872      	ldr	r2, [r6, #4]
 80041f0:	605c      	str	r4, [r3, #4]
 80041f2:	3201      	adds	r2, #1
 80041f4:	190c      	adds	r4, r1, r4
 80041f6:	60b4      	str	r4, [r6, #8]
 80041f8:	6072      	str	r2, [r6, #4]
 80041fa:	2a07      	cmp	r2, #7
 80041fc:	dd00      	ble.n	8004200 <_svfprintf_r+0xff0>
 80041fe:	e12e      	b.n	800445e <_svfprintf_r+0x124e>
 8004200:	3308      	adds	r3, #8
 8004202:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004204:	9815      	ldr	r0, [sp, #84]	; 0x54
 8004206:	68b1      	ldr	r1, [r6, #8]
 8004208:	601a      	str	r2, [r3, #0]
 800420a:	180a      	adds	r2, r1, r0
 800420c:	6058      	str	r0, [r3, #4]
 800420e:	60b2      	str	r2, [r6, #8]
 8004210:	6872      	ldr	r2, [r6, #4]
 8004212:	3201      	adds	r2, #1
 8004214:	6072      	str	r2, [r6, #4]
 8004216:	2a07      	cmp	r2, #7
 8004218:	dd01      	ble.n	800421e <_svfprintf_r+0x100e>
 800421a:	f7ff fa55 	bl	80036c8 <_svfprintf_r+0x4b8>
 800421e:	1c1f      	adds	r7, r3, #0
 8004220:	3708      	adds	r7, #8
 8004222:	f7ff f9e9 	bl	80035f8 <_svfprintf_r+0x3e8>
 8004226:	f7fb ff95 	bl	8000154 <strlen>
 800422a:	900e      	str	r0, [sp, #56]	; 0x38
 800422c:	e721      	b.n	8004072 <_svfprintf_r+0xe62>
 800422e:	4922      	ldr	r1, [pc, #136]	; (80042b8 <_svfprintf_r+0x10a8>)
 8004230:	4688      	mov	r8, r1
 8004232:	f7ff f95b 	bl	80034ec <_svfprintf_r+0x2dc>
 8004236:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004238:	4659      	mov	r1, fp
 800423a:	1c32      	adds	r2, r6, #0
 800423c:	f003 ff44 	bl	80080c8 <__ssprint_r>
 8004240:	2800      	cmp	r0, #0
 8004242:	d001      	beq.n	8004248 <_svfprintf_r+0x1038>
 8004244:	f7ff fb75 	bl	8003932 <_svfprintf_r+0x722>
 8004248:	af34      	add	r7, sp, #208	; 0xd0
 800424a:	f7ff fbbb 	bl	80039c4 <_svfprintf_r+0x7b4>
 800424e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004250:	4659      	mov	r1, fp
 8004252:	1c32      	adds	r2, r6, #0
 8004254:	f003 ff38 	bl	80080c8 <__ssprint_r>
 8004258:	2800      	cmp	r0, #0
 800425a:	d001      	beq.n	8004260 <_svfprintf_r+0x1050>
 800425c:	f7ff fb69 	bl	8003932 <_svfprintf_r+0x722>
 8004260:	9915      	ldr	r1, [sp, #84]	; 0x54
 8004262:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004264:	af34      	add	r7, sp, #208	; 0xd0
 8004266:	1a8b      	subs	r3, r1, r2
 8004268:	e650      	b.n	8003f0c <_svfprintf_r+0xcfc>
 800426a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800426c:	4659      	mov	r1, fp
 800426e:	1c32      	adds	r2, r6, #0
 8004270:	f003 ff2a 	bl	80080c8 <__ssprint_r>
 8004274:	2800      	cmp	r0, #0
 8004276:	d001      	beq.n	800427c <_svfprintf_r+0x106c>
 8004278:	f7ff fb5b 	bl	8003932 <_svfprintf_r+0x722>
 800427c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800427e:	af34      	add	r7, sp, #208	; 0xd0
 8004280:	e62c      	b.n	8003edc <_svfprintf_r+0xccc>
 8004282:	9b08      	ldr	r3, [sp, #32]
 8004284:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8004286:	1a1b      	subs	r3, r3, r0
 8004288:	930e      	str	r3, [sp, #56]	; 0x38
 800428a:	f7ff f8df 	bl	800344c <_svfprintf_r+0x23c>
 800428e:	4a0a      	ldr	r2, [pc, #40]	; (80042b8 <_svfprintf_r+0x10a8>)
 8004290:	4690      	mov	r8, r2
 8004292:	f7ff f9e8 	bl	8003666 <_svfprintf_r+0x456>
 8004296:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004298:	4659      	mov	r1, fp
 800429a:	1c32      	adds	r2, r6, #0
 800429c:	f003 ff14 	bl	80080c8 <__ssprint_r>
 80042a0:	2800      	cmp	r0, #0
 80042a2:	d001      	beq.n	80042a8 <_svfprintf_r+0x1098>
 80042a4:	f7ff fb45 	bl	8003932 <_svfprintf_r+0x722>
 80042a8:	af34      	add	r7, sp, #208	; 0xd0
 80042aa:	e60c      	b.n	8003ec6 <_svfprintf_r+0xcb6>
 80042ac:	46c0      	nop			; (mov r8, r8)
 80042ae:	46c0      	nop			; (mov r8, r8)
	...
 80042b8:	0800ee0c 	.word	0x0800ee0c
 80042bc:	0800ee38 	.word	0x0800ee38
 80042c0:	0800ee30 	.word	0x0800ee30
 80042c4:	0800ee34 	.word	0x0800ee34
 80042c8:	4650      	mov	r0, sl
 80042ca:	900e      	str	r0, [sp, #56]	; 0x38
 80042cc:	2806      	cmp	r0, #6
 80042ce:	d908      	bls.n	80042e2 <_svfprintf_r+0x10d2>
 80042d0:	2106      	movs	r1, #6
 80042d2:	2206      	movs	r2, #6
 80042d4:	910e      	str	r1, [sp, #56]	; 0x38
 80042d6:	920d      	str	r2, [sp, #52]	; 0x34
 80042d8:	49b5      	ldr	r1, [pc, #724]	; (80045b0 <_svfprintf_r+0x13a0>)
 80042da:	9410      	str	r4, [sp, #64]	; 0x40
 80042dc:	9113      	str	r1, [sp, #76]	; 0x4c
 80042de:	f7ff f81e 	bl	800331e <_svfprintf_r+0x10e>
 80042e2:	980e      	ldr	r0, [sp, #56]	; 0x38
 80042e4:	43c3      	mvns	r3, r0
 80042e6:	17db      	asrs	r3, r3, #31
 80042e8:	4018      	ands	r0, r3
 80042ea:	900d      	str	r0, [sp, #52]	; 0x34
 80042ec:	e7f4      	b.n	80042d8 <_svfprintf_r+0x10c8>
 80042ee:	207b      	movs	r0, #123	; 0x7b
 80042f0:	9912      	ldr	r1, [sp, #72]	; 0x48
 80042f2:	4468      	add	r0, sp
 80042f4:	2200      	movs	r2, #0
 80042f6:	7803      	ldrb	r3, [r0, #0]
 80042f8:	910a      	str	r1, [sp, #40]	; 0x28
 80042fa:	9214      	str	r2, [sp, #80]	; 0x50
 80042fc:	f7ff f8b3 	bl	8003466 <_svfprintf_r+0x256>
 8004300:	2303      	movs	r3, #3
 8004302:	9300      	str	r3, [sp, #0]
 8004304:	ab20      	add	r3, sp, #128	; 0x80
 8004306:	9302      	str	r3, [sp, #8]
 8004308:	ab21      	add	r3, sp, #132	; 0x84
 800430a:	4652      	mov	r2, sl
 800430c:	9303      	str	r3, [sp, #12]
 800430e:	ab22      	add	r3, sp, #136	; 0x88
 8004310:	9201      	str	r2, [sp, #4]
 8004312:	9304      	str	r3, [sp, #16]
 8004314:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004316:	4643      	mov	r3, r8
 8004318:	464a      	mov	r2, r9
 800431a:	f000 fdc9 	bl	8004eb0 <_dtoa_r>
 800431e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004320:	9013      	str	r0, [sp, #76]	; 0x4c
 8004322:	2b47      	cmp	r3, #71	; 0x47
 8004324:	d102      	bne.n	800432c <_svfprintf_r+0x111c>
 8004326:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004328:	07c0      	lsls	r0, r0, #31
 800432a:	d51a      	bpl.n	8004362 <_svfprintf_r+0x1152>
 800432c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800432e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004330:	1c1c      	adds	r4, r3, #0
 8004332:	4454      	add	r4, sl
 8004334:	2800      	cmp	r0, #0
 8004336:	d100      	bne.n	800433a <_svfprintf_r+0x112a>
 8004338:	e6e1      	b.n	80040fe <_svfprintf_r+0xeee>
 800433a:	781b      	ldrb	r3, [r3, #0]
 800433c:	2b30      	cmp	r3, #48	; 0x30
 800433e:	d002      	beq.n	8004346 <_svfprintf_r+0x1136>
 8004340:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004342:	18e4      	adds	r4, r4, r3
 8004344:	e6db      	b.n	80040fe <_svfprintf_r+0xeee>
 8004346:	4648      	mov	r0, r9
 8004348:	4641      	mov	r1, r8
 800434a:	4b98      	ldr	r3, [pc, #608]	; (80045ac <_svfprintf_r+0x139c>)
 800434c:	4a96      	ldr	r2, [pc, #600]	; (80045a8 <_svfprintf_r+0x1398>)
 800434e:	f005 ea98 	blx	8009880 <__aeabi_dcmpeq>
 8004352:	2800      	cmp	r0, #0
 8004354:	d1f4      	bne.n	8004340 <_svfprintf_r+0x1130>
 8004356:	2301      	movs	r3, #1
 8004358:	4652      	mov	r2, sl
 800435a:	1a9b      	subs	r3, r3, r2
 800435c:	9320      	str	r3, [sp, #128]	; 0x80
 800435e:	18e4      	adds	r4, r4, r3
 8004360:	e6cd      	b.n	80040fe <_svfprintf_r+0xeee>
 8004362:	9922      	ldr	r1, [sp, #136]	; 0x88
 8004364:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004366:	1a89      	subs	r1, r1, r2
 8004368:	9115      	str	r1, [sp, #84]	; 0x54
 800436a:	9c20      	ldr	r4, [sp, #128]	; 0x80
 800436c:	1c23      	adds	r3, r4, #0
 800436e:	1ce1      	adds	r1, r4, #3
 8004370:	db02      	blt.n	8004378 <_svfprintf_r+0x1168>
 8004372:	45a2      	cmp	sl, r4
 8004374:	db00      	blt.n	8004378 <_svfprintf_r+0x1168>
 8004376:	e6e4      	b.n	8004142 <_svfprintf_r+0xf32>
 8004378:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800437a:	3a02      	subs	r2, #2
 800437c:	920c      	str	r2, [sp, #48]	; 0x30
 800437e:	a90c      	add	r1, sp, #48	; 0x30
 8004380:	7809      	ldrb	r1, [r1, #0]
 8004382:	a823      	add	r0, sp, #140	; 0x8c
 8004384:	3c01      	subs	r4, #1
 8004386:	9420      	str	r4, [sp, #128]	; 0x80
 8004388:	4681      	mov	r9, r0
 800438a:	7001      	strb	r1, [r0, #0]
 800438c:	2c00      	cmp	r4, #0
 800438e:	da00      	bge.n	8004392 <_svfprintf_r+0x1182>
 8004390:	e0c5      	b.n	800451e <_svfprintf_r+0x130e>
 8004392:	466b      	mov	r3, sp
 8004394:	222b      	movs	r2, #43	; 0x2b
 8004396:	338d      	adds	r3, #141	; 0x8d
 8004398:	701a      	strb	r2, [r3, #0]
 800439a:	2c09      	cmp	r4, #9
 800439c:	dc6a      	bgt.n	8004474 <_svfprintf_r+0x1264>
 800439e:	466b      	mov	r3, sp
 80043a0:	338e      	adds	r3, #142	; 0x8e
 80043a2:	2230      	movs	r2, #48	; 0x30
 80043a4:	3430      	adds	r4, #48	; 0x30
 80043a6:	701a      	strb	r2, [r3, #0]
 80043a8:	705c      	strb	r4, [r3, #1]
 80043aa:	ab24      	add	r3, sp, #144	; 0x90
 80043ac:	464a      	mov	r2, r9
 80043ae:	1a9a      	subs	r2, r3, r2
 80043b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80043b2:	9815      	ldr	r0, [sp, #84]	; 0x54
 80043b4:	189b      	adds	r3, r3, r2
 80043b6:	921b      	str	r2, [sp, #108]	; 0x6c
 80043b8:	930e      	str	r3, [sp, #56]	; 0x38
 80043ba:	2801      	cmp	r0, #1
 80043bc:	dc00      	bgt.n	80043c0 <_svfprintf_r+0x11b0>
 80043be:	e0b4      	b.n	800452a <_svfprintf_r+0x131a>
 80043c0:	980e      	ldr	r0, [sp, #56]	; 0x38
 80043c2:	3001      	adds	r0, #1
 80043c4:	43c3      	mvns	r3, r0
 80043c6:	17db      	asrs	r3, r3, #31
 80043c8:	900e      	str	r0, [sp, #56]	; 0x38
 80043ca:	2100      	movs	r1, #0
 80043cc:	4018      	ands	r0, r3
 80043ce:	900d      	str	r0, [sp, #52]	; 0x34
 80043d0:	9116      	str	r1, [sp, #88]	; 0x58
 80043d2:	e6c6      	b.n	8004162 <_svfprintf_r+0xf52>
 80043d4:	207b      	movs	r0, #123	; 0x7b
 80043d6:	232d      	movs	r3, #45	; 0x2d
 80043d8:	4468      	add	r0, sp
 80043da:	7003      	strb	r3, [r0, #0]
 80043dc:	f7ff fbd1 	bl	8003b82 <_svfprintf_r+0x972>
 80043e0:	4974      	ldr	r1, [pc, #464]	; (80045b4 <_svfprintf_r+0x13a4>)
 80043e2:	4688      	mov	r8, r1
 80043e4:	f7ff fa1e 	bl	8003824 <_svfprintf_r+0x614>
 80043e8:	4650      	mov	r0, sl
 80043ea:	217b      	movs	r1, #123	; 0x7b
 80043ec:	900d      	str	r0, [sp, #52]	; 0x34
 80043ee:	4469      	add	r1, sp
 80043f0:	900e      	str	r0, [sp, #56]	; 0x38
 80043f2:	2200      	movs	r2, #0
 80043f4:	2000      	movs	r0, #0
 80043f6:	780b      	ldrb	r3, [r1, #0]
 80043f8:	9410      	str	r4, [sp, #64]	; 0x40
 80043fa:	9214      	str	r2, [sp, #80]	; 0x50
 80043fc:	9016      	str	r0, [sp, #88]	; 0x58
 80043fe:	f7ff f832 	bl	8003466 <_svfprintf_r+0x256>
 8004402:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004404:	4659      	mov	r1, fp
 8004406:	1c32      	adds	r2, r6, #0
 8004408:	f003 fe5e 	bl	80080c8 <__ssprint_r>
 800440c:	2800      	cmp	r0, #0
 800440e:	d001      	beq.n	8004414 <_svfprintf_r+0x1204>
 8004410:	f7ff fa8f 	bl	8003932 <_svfprintf_r+0x722>
 8004414:	9c20      	ldr	r4, [sp, #128]	; 0x80
 8004416:	ab34      	add	r3, sp, #208	; 0xd0
 8004418:	e4e5      	b.n	8003de6 <_svfprintf_r+0xbd6>
 800441a:	2180      	movs	r1, #128	; 0x80
 800441c:	0609      	lsls	r1, r1, #24
 800441e:	222d      	movs	r2, #45	; 0x2d
 8004420:	4488      	add	r8, r1
 8004422:	9214      	str	r2, [sp, #80]	; 0x50
 8004424:	e64d      	b.n	80040c2 <_svfprintf_r+0xeb2>
 8004426:	2302      	movs	r3, #2
 8004428:	e76b      	b.n	8004302 <_svfprintf_r+0x10f2>
 800442a:	2201      	movs	r2, #1
 800442c:	2b00      	cmp	r3, #0
 800442e:	dc00      	bgt.n	8004432 <_svfprintf_r+0x1222>
 8004430:	e08a      	b.n	8004548 <_svfprintf_r+0x1338>
 8004432:	9815      	ldr	r0, [sp, #84]	; 0x54
 8004434:	1812      	adds	r2, r2, r0
 8004436:	920e      	str	r2, [sp, #56]	; 0x38
 8004438:	990e      	ldr	r1, [sp, #56]	; 0x38
 800443a:	43d2      	mvns	r2, r2
 800443c:	17d2      	asrs	r2, r2, #31
 800443e:	4011      	ands	r1, r2
 8004440:	2267      	movs	r2, #103	; 0x67
 8004442:	910d      	str	r1, [sp, #52]	; 0x34
 8004444:	920c      	str	r2, [sp, #48]	; 0x30
 8004446:	e68b      	b.n	8004160 <_svfprintf_r+0xf50>
 8004448:	2b00      	cmp	r3, #0
 800444a:	dd5d      	ble.n	8004508 <_svfprintf_r+0x12f8>
 800444c:	4650      	mov	r0, sl
 800444e:	2800      	cmp	r0, #0
 8004450:	d13c      	bne.n	80044cc <_svfprintf_r+0x12bc>
 8004452:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004454:	07c9      	lsls	r1, r1, #31
 8004456:	d439      	bmi.n	80044cc <_svfprintf_r+0x12bc>
 8004458:	930d      	str	r3, [sp, #52]	; 0x34
 800445a:	930e      	str	r3, [sp, #56]	; 0x38
 800445c:	e680      	b.n	8004160 <_svfprintf_r+0xf50>
 800445e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004460:	4659      	mov	r1, fp
 8004462:	1c32      	adds	r2, r6, #0
 8004464:	f003 fe30 	bl	80080c8 <__ssprint_r>
 8004468:	2800      	cmp	r0, #0
 800446a:	d001      	beq.n	8004470 <_svfprintf_r+0x1260>
 800446c:	f7ff fa61 	bl	8003932 <_svfprintf_r+0x722>
 8004470:	ab34      	add	r3, sp, #208	; 0xd0
 8004472:	e6c6      	b.n	8004202 <_svfprintf_r+0xff2>
 8004474:	466b      	mov	r3, sp
 8004476:	339a      	adds	r3, #154	; 0x9a
 8004478:	1c20      	adds	r0, r4, #0
 800447a:	210a      	movs	r1, #10
 800447c:	4698      	mov	r8, r3
 800447e:	f004 ed2c 	blx	8008ed8 <__aeabi_idivmod>
 8004482:	4642      	mov	r2, r8
 8004484:	3130      	adds	r1, #48	; 0x30
 8004486:	7011      	strb	r1, [r2, #0]
 8004488:	1c20      	adds	r0, r4, #0
 800448a:	210a      	movs	r1, #10
 800448c:	f004 ec8c 	blx	8008da8 <__aeabi_idiv>
 8004490:	4643      	mov	r3, r8
 8004492:	1c04      	adds	r4, r0, #0
 8004494:	3b01      	subs	r3, #1
 8004496:	2809      	cmp	r0, #9
 8004498:	dcee      	bgt.n	8004478 <_svfprintf_r+0x1268>
 800449a:	1c01      	adds	r1, r0, #0
 800449c:	3130      	adds	r1, #48	; 0x30
 800449e:	0609      	lsls	r1, r1, #24
 80044a0:	4668      	mov	r0, sp
 80044a2:	0e09      	lsrs	r1, r1, #24
 80044a4:	309b      	adds	r0, #155	; 0x9b
 80044a6:	7019      	strb	r1, [r3, #0]
 80044a8:	4298      	cmp	r0, r3
 80044aa:	d96e      	bls.n	800458a <_svfprintf_r+0x137a>
 80044ac:	466a      	mov	r2, sp
 80044ae:	4643      	mov	r3, r8
 80044b0:	328e      	adds	r2, #142	; 0x8e
 80044b2:	e001      	b.n	80044b8 <_svfprintf_r+0x12a8>
 80044b4:	7819      	ldrb	r1, [r3, #0]
 80044b6:	3301      	adds	r3, #1
 80044b8:	7011      	strb	r1, [r2, #0]
 80044ba:	3201      	adds	r2, #1
 80044bc:	4298      	cmp	r0, r3
 80044be:	d1f9      	bne.n	80044b4 <_svfprintf_r+0x12a4>
 80044c0:	4640      	mov	r0, r8
 80044c2:	218e      	movs	r1, #142	; 0x8e
 80044c4:	1a33      	subs	r3, r6, r0
 80044c6:	4469      	add	r1, sp
 80044c8:	18cb      	adds	r3, r1, r3
 80044ca:	e76f      	b.n	80043ac <_svfprintf_r+0x119c>
 80044cc:	4652      	mov	r2, sl
 80044ce:	3201      	adds	r2, #1
 80044d0:	189a      	adds	r2, r3, r2
 80044d2:	920e      	str	r2, [sp, #56]	; 0x38
 80044d4:	980e      	ldr	r0, [sp, #56]	; 0x38
 80044d6:	43d2      	mvns	r2, r2
 80044d8:	17d2      	asrs	r2, r2, #31
 80044da:	4010      	ands	r0, r2
 80044dc:	900d      	str	r0, [sp, #52]	; 0x34
 80044de:	e63f      	b.n	8004160 <_svfprintf_r+0xf50>
 80044e0:	4b34      	ldr	r3, [pc, #208]	; (80045b4 <_svfprintf_r+0x13a4>)
 80044e2:	4698      	mov	r8, r3
 80044e4:	f7ff fa08 	bl	80038f8 <_svfprintf_r+0x6e8>
 80044e8:	1c59      	adds	r1, r3, #1
 80044ea:	43ca      	mvns	r2, r1
 80044ec:	17d2      	asrs	r2, r2, #31
 80044ee:	910e      	str	r1, [sp, #56]	; 0x38
 80044f0:	4011      	ands	r1, r2
 80044f2:	2267      	movs	r2, #103	; 0x67
 80044f4:	910d      	str	r1, [sp, #52]	; 0x34
 80044f6:	920c      	str	r2, [sp, #48]	; 0x30
 80044f8:	e632      	b.n	8004160 <_svfprintf_r+0xf50>
 80044fa:	4a2e      	ldr	r2, [pc, #184]	; (80045b4 <_svfprintf_r+0x13a4>)
 80044fc:	4690      	mov	r8, r2
 80044fe:	f7ff f8d7 	bl	80036b0 <_svfprintf_r+0x4a0>
 8004502:	4a2c      	ldr	r2, [pc, #176]	; (80045b4 <_svfprintf_r+0x13a4>)
 8004504:	4690      	mov	r8, r2
 8004506:	e4d0      	b.n	8003eaa <_svfprintf_r+0xc9a>
 8004508:	4651      	mov	r1, sl
 800450a:	2900      	cmp	r1, #0
 800450c:	d133      	bne.n	8004576 <_svfprintf_r+0x1366>
 800450e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004510:	07d2      	lsls	r2, r2, #31
 8004512:	d430      	bmi.n	8004576 <_svfprintf_r+0x1366>
 8004514:	2001      	movs	r0, #1
 8004516:	2101      	movs	r1, #1
 8004518:	900d      	str	r0, [sp, #52]	; 0x34
 800451a:	910e      	str	r1, [sp, #56]	; 0x38
 800451c:	e620      	b.n	8004160 <_svfprintf_r+0xf50>
 800451e:	466b      	mov	r3, sp
 8004520:	222d      	movs	r2, #45	; 0x2d
 8004522:	338d      	adds	r3, #141	; 0x8d
 8004524:	4264      	negs	r4, r4
 8004526:	701a      	strb	r2, [r3, #0]
 8004528:	e737      	b.n	800439a <_svfprintf_r+0x118a>
 800452a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800452c:	07c9      	lsls	r1, r1, #31
 800452e:	d500      	bpl.n	8004532 <_svfprintf_r+0x1322>
 8004530:	e746      	b.n	80043c0 <_svfprintf_r+0x11b0>
 8004532:	43db      	mvns	r3, r3
 8004534:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004536:	17db      	asrs	r3, r3, #31
 8004538:	401a      	ands	r2, r3
 800453a:	2300      	movs	r3, #0
 800453c:	920d      	str	r2, [sp, #52]	; 0x34
 800453e:	9316      	str	r3, [sp, #88]	; 0x58
 8004540:	e60f      	b.n	8004162 <_svfprintf_r+0xf52>
 8004542:	4b1c      	ldr	r3, [pc, #112]	; (80045b4 <_svfprintf_r+0x13a4>)
 8004544:	4698      	mov	r8, r3
 8004546:	e587      	b.n	8004058 <_svfprintf_r+0xe48>
 8004548:	2202      	movs	r2, #2
 800454a:	1ad2      	subs	r2, r2, r3
 800454c:	e771      	b.n	8004432 <_svfprintf_r+0x1222>
 800454e:	4819      	ldr	r0, [pc, #100]	; (80045b4 <_svfprintf_r+0x13a4>)
 8004550:	4680      	mov	r8, r0
 8004552:	e648      	b.n	80041e6 <_svfprintf_r+0xfd6>
 8004554:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004556:	3204      	adds	r2, #4
 8004558:	9209      	str	r2, [sp, #36]	; 0x24
 800455a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800455c:	6813      	ldr	r3, [r2, #0]
 800455e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004560:	469a      	mov	sl, r3
 8004562:	9210      	str	r2, [sp, #64]	; 0x40
 8004564:	2b00      	cmp	r3, #0
 8004566:	db01      	blt.n	800456c <_svfprintf_r+0x135c>
 8004568:	f7fe fec2 	bl	80032f0 <_svfprintf_r+0xe0>
 800456c:	2301      	movs	r3, #1
 800456e:	425b      	negs	r3, r3
 8004570:	469a      	mov	sl, r3
 8004572:	f7fe febd 	bl	80032f0 <_svfprintf_r+0xe0>
 8004576:	4650      	mov	r0, sl
 8004578:	3002      	adds	r0, #2
 800457a:	43c2      	mvns	r2, r0
 800457c:	17d2      	asrs	r2, r2, #31
 800457e:	900e      	str	r0, [sp, #56]	; 0x38
 8004580:	4010      	ands	r0, r2
 8004582:	900d      	str	r0, [sp, #52]	; 0x34
 8004584:	e5ec      	b.n	8004160 <_svfprintf_r+0xf50>
 8004586:	9c20      	ldr	r4, [sp, #128]	; 0x80
 8004588:	e6f9      	b.n	800437e <_svfprintf_r+0x116e>
 800458a:	466b      	mov	r3, sp
 800458c:	338e      	adds	r3, #142	; 0x8e
 800458e:	e70d      	b.n	80043ac <_svfprintf_r+0x119c>
 8004590:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004592:	230c      	movs	r3, #12
 8004594:	6013      	str	r3, [r2, #0]
 8004596:	2301      	movs	r3, #1
 8004598:	425b      	negs	r3, r3
 800459a:	930f      	str	r3, [sp, #60]	; 0x3c
 800459c:	f7ff f905 	bl	80037aa <_svfprintf_r+0x59a>
 80045a0:	1c1c      	adds	r4, r3, #0
 80045a2:	e5be      	b.n	8004122 <_svfprintf_r+0xf12>
 80045a4:	46c0      	nop			; (mov r8, r8)
 80045a6:	46c0      	nop			; (mov r8, r8)
	...
 80045b0:	0800ee64 	.word	0x0800ee64
 80045b4:	0800ee0c 	.word	0x0800ee0c

080045b8 <error>:
 80045b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045ba:	1c04      	adds	r4, r0, #0
 80045bc:	f001 fc34 	bl	8005e28 <__errno>
 80045c0:	2700      	movs	r7, #0
 80045c2:	1c05      	adds	r5, r0, #0
 80045c4:	2613      	movs	r6, #19
 80045c6:	1c30      	adds	r0, r6, #0
 80045c8:	1c39      	adds	r1, r7, #0
 80045ca:	dfab      	svc	171	; 0xab
 80045cc:	1c06      	adds	r6, r0, #0
 80045ce:	602e      	str	r6, [r5, #0]
 80045d0:	1c20      	adds	r0, r4, #0
 80045d2:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045d4:	bc02      	pop	{r1}
 80045d6:	4708      	bx	r1

080045d8 <wrap.part.0>:
 80045d8:	2001      	movs	r0, #1
 80045da:	b508      	push	{r3, lr}
 80045dc:	4240      	negs	r0, r0
 80045de:	f7ff ffeb 	bl	80045b8 <error>
 80045e2:	bc08      	pop	{r3}
 80045e4:	bc02      	pop	{r1}
 80045e6:	4708      	bx	r1

080045e8 <remap_handle>:
 80045e8:	4b0f      	ldr	r3, [pc, #60]	; (8004628 <remap_handle+0x40>)
 80045ea:	b510      	push	{r4, lr}
 80045ec:	1c04      	adds	r4, r0, #0
 80045ee:	6818      	ldr	r0, [r3, #0]
 80045f0:	2800      	cmp	r0, #0
 80045f2:	d002      	beq.n	80045fa <remap_handle+0x12>
 80045f4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d00d      	beq.n	8004616 <remap_handle+0x2e>
 80045fa:	2c00      	cmp	r4, #0
 80045fc:	d008      	beq.n	8004610 <remap_handle+0x28>
 80045fe:	2c01      	cmp	r4, #1
 8004600:	d00c      	beq.n	800461c <remap_handle+0x34>
 8004602:	1c20      	adds	r0, r4, #0
 8004604:	3820      	subs	r0, #32
 8004606:	2c02      	cmp	r4, #2
 8004608:	d00b      	beq.n	8004622 <remap_handle+0x3a>
 800460a:	bc10      	pop	{r4}
 800460c:	bc02      	pop	{r1}
 800460e:	4708      	bx	r1
 8004610:	4b06      	ldr	r3, [pc, #24]	; (800462c <remap_handle+0x44>)
 8004612:	6818      	ldr	r0, [r3, #0]
 8004614:	e7f9      	b.n	800460a <remap_handle+0x22>
 8004616:	f001 fd3f 	bl	8006098 <__sinit>
 800461a:	e7ee      	b.n	80045fa <remap_handle+0x12>
 800461c:	4b03      	ldr	r3, [pc, #12]	; (800462c <remap_handle+0x44>)
 800461e:	6858      	ldr	r0, [r3, #4]
 8004620:	e7f3      	b.n	800460a <remap_handle+0x22>
 8004622:	4b02      	ldr	r3, [pc, #8]	; (800462c <remap_handle+0x44>)
 8004624:	6898      	ldr	r0, [r3, #8]
 8004626:	e7f0      	b.n	800460a <remap_handle+0x22>
 8004628:	20000100 	.word	0x20000100
 800462c:	20000b00 	.word	0x20000b00

08004630 <initialise_monitor_handles>:
 8004630:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004632:	464f      	mov	r7, r9
 8004634:	4646      	mov	r6, r8
 8004636:	b4c0      	push	{r6, r7}
 8004638:	4b19      	ldr	r3, [pc, #100]	; (80046a0 <initialise_monitor_handles+0x70>)
 800463a:	b085      	sub	sp, #20
 800463c:	9301      	str	r3, [sp, #4]
 800463e:	ad01      	add	r5, sp, #4
 8004640:	4698      	mov	r8, r3
 8004642:	2703      	movs	r7, #3
 8004644:	2300      	movs	r3, #0
 8004646:	60af      	str	r7, [r5, #8]
 8004648:	2601      	movs	r6, #1
 800464a:	606b      	str	r3, [r5, #4]
 800464c:	1c30      	adds	r0, r6, #0
 800464e:	1c29      	adds	r1, r5, #0
 8004650:	dfab      	svc	171	; 0xab
 8004652:	4681      	mov	r9, r0
 8004654:	4c13      	ldr	r4, [pc, #76]	; (80046a4 <initialise_monitor_handles+0x74>)
 8004656:	464b      	mov	r3, r9
 8004658:	6023      	str	r3, [r4, #0]
 800465a:	4643      	mov	r3, r8
 800465c:	9301      	str	r3, [sp, #4]
 800465e:	2304      	movs	r3, #4
 8004660:	60af      	str	r7, [r5, #8]
 8004662:	606b      	str	r3, [r5, #4]
 8004664:	1c30      	adds	r0, r6, #0
 8004666:	1c29      	adds	r1, r5, #0
 8004668:	dfab      	svc	171	; 0xab
 800466a:	1c05      	adds	r5, r0, #0
 800466c:	2201      	movs	r2, #1
 800466e:	1c23      	adds	r3, r4, #0
 8004670:	1c21      	adds	r1, r4, #0
 8004672:	60a5      	str	r5, [r4, #8]
 8004674:	6065      	str	r5, [r4, #4]
 8004676:	330c      	adds	r3, #12
 8004678:	31ac      	adds	r1, #172	; 0xac
 800467a:	4252      	negs	r2, r2
 800467c:	601a      	str	r2, [r3, #0]
 800467e:	3308      	adds	r3, #8
 8004680:	428b      	cmp	r3, r1
 8004682:	d1fb      	bne.n	800467c <initialise_monitor_handles+0x4c>
 8004684:	6823      	ldr	r3, [r4, #0]
 8004686:	60e3      	str	r3, [r4, #12]
 8004688:	2300      	movs	r3, #0
 800468a:	6123      	str	r3, [r4, #16]
 800468c:	6165      	str	r5, [r4, #20]
 800468e:	61a3      	str	r3, [r4, #24]
 8004690:	b005      	add	sp, #20
 8004692:	bc0c      	pop	{r2, r3}
 8004694:	4690      	mov	r8, r2
 8004696:	4699      	mov	r9, r3
 8004698:	bcf0      	pop	{r4, r5, r6, r7}
 800469a:	bc01      	pop	{r0}
 800469c:	4700      	bx	r0
 800469e:	46c0      	nop			; (mov r8, r8)
 80046a0:	0800ee70 	.word	0x0800ee70
 80046a4:	20000b00 	.word	0x20000b00

080046a8 <_swiread>:
 80046a8:	b570      	push	{r4, r5, r6, lr}
 80046aa:	b084      	sub	sp, #16
 80046ac:	1c15      	adds	r5, r2, #0
 80046ae:	1c0e      	adds	r6, r1, #0
 80046b0:	f7ff ff9a 	bl	80045e8 <remap_handle>
 80046b4:	9503      	str	r5, [sp, #12]
 80046b6:	9001      	str	r0, [sp, #4]
 80046b8:	9602      	str	r6, [sp, #8]
 80046ba:	ac01      	add	r4, sp, #4
 80046bc:	2506      	movs	r5, #6
 80046be:	1c28      	adds	r0, r5, #0
 80046c0:	1c21      	adds	r1, r4, #0
 80046c2:	dfab      	svc	171	; 0xab
 80046c4:	1c04      	adds	r4, r0, #0
 80046c6:	1c20      	adds	r0, r4, #0
 80046c8:	b004      	add	sp, #16
 80046ca:	bc70      	pop	{r4, r5, r6}
 80046cc:	bc02      	pop	{r1}
 80046ce:	4708      	bx	r1

080046d0 <_read>:
 80046d0:	b5d0      	push	{r4, r6, r7, lr}
 80046d2:	464f      	mov	r7, r9
 80046d4:	4646      	mov	r6, r8
 80046d6:	b4c0      	push	{r6, r7}
 80046d8:	4689      	mov	r9, r1
 80046da:	1c17      	adds	r7, r2, #0
 80046dc:	1c06      	adds	r6, r0, #0
 80046de:	f7ff ff83 	bl	80045e8 <remap_handle>
 80046e2:	4a16      	ldr	r2, [pc, #88]	; (800473c <_read+0x6c>)
 80046e4:	1c13      	adds	r3, r2, #0
 80046e6:	4690      	mov	r8, r2
 80046e8:	330c      	adds	r3, #12
 80046ea:	2400      	movs	r4, #0
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	4290      	cmp	r0, r2
 80046f0:	d00c      	beq.n	800470c <_read+0x3c>
 80046f2:	3401      	adds	r4, #1
 80046f4:	3308      	adds	r3, #8
 80046f6:	2c14      	cmp	r4, #20
 80046f8:	d1f8      	bne.n	80046ec <_read+0x1c>
 80046fa:	1c30      	adds	r0, r6, #0
 80046fc:	4649      	mov	r1, r9
 80046fe:	1c3a      	adds	r2, r7, #0
 8004700:	f7ff ffd2 	bl	80046a8 <_swiread>
 8004704:	2800      	cmp	r0, #0
 8004706:	db14      	blt.n	8004732 <_read+0x62>
 8004708:	1a38      	subs	r0, r7, r0
 800470a:	e00c      	b.n	8004726 <_read+0x56>
 800470c:	1c30      	adds	r0, r6, #0
 800470e:	4649      	mov	r1, r9
 8004710:	1c3a      	adds	r2, r7, #0
 8004712:	f7ff ffc9 	bl	80046a8 <_swiread>
 8004716:	2800      	cmp	r0, #0
 8004718:	db0b      	blt.n	8004732 <_read+0x62>
 800471a:	00e4      	lsls	r4, r4, #3
 800471c:	4444      	add	r4, r8
 800471e:	6922      	ldr	r2, [r4, #16]
 8004720:	1a38      	subs	r0, r7, r0
 8004722:	1813      	adds	r3, r2, r0
 8004724:	6123      	str	r3, [r4, #16]
 8004726:	bc0c      	pop	{r2, r3}
 8004728:	4690      	mov	r8, r2
 800472a:	4699      	mov	r9, r3
 800472c:	bcd0      	pop	{r4, r6, r7}
 800472e:	bc02      	pop	{r1}
 8004730:	4708      	bx	r1
 8004732:	2001      	movs	r0, #1
 8004734:	4240      	negs	r0, r0
 8004736:	f7ff ff3f 	bl	80045b8 <error>
 800473a:	e7f4      	b.n	8004726 <_read+0x56>
 800473c:	20000b00 	.word	0x20000b00

08004740 <_swilseek>:
 8004740:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004742:	464e      	mov	r6, r9
 8004744:	4645      	mov	r5, r8
 8004746:	465f      	mov	r7, fp
 8004748:	b4e0      	push	{r5, r6, r7}
 800474a:	b082      	sub	sp, #8
 800474c:	1c15      	adds	r5, r2, #0
 800474e:	4680      	mov	r8, r0
 8004750:	1c0e      	adds	r6, r1, #0
 8004752:	f7ff ff49 	bl	80045e8 <remap_handle>
 8004756:	4a23      	ldr	r2, [pc, #140]	; (80047e4 <_swilseek+0xa4>)
 8004758:	1c13      	adds	r3, r2, #0
 800475a:	4691      	mov	r9, r2
 800475c:	330c      	adds	r3, #12
 800475e:	2400      	movs	r4, #0
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	4290      	cmp	r0, r2
 8004764:	d008      	beq.n	8004778 <_swilseek+0x38>
 8004766:	3401      	adds	r4, #1
 8004768:	3308      	adds	r3, #8
 800476a:	2c14      	cmp	r4, #20
 800476c:	d1f8      	bne.n	8004760 <_swilseek+0x20>
 800476e:	2d01      	cmp	r5, #1
 8004770:	d015      	beq.n	800479e <_swilseek+0x5e>
 8004772:	2200      	movs	r2, #0
 8004774:	4693      	mov	fp, r2
 8004776:	e003      	b.n	8004780 <_swilseek+0x40>
 8004778:	2d01      	cmp	r5, #1
 800477a:	d02a      	beq.n	80047d2 <_swilseek+0x92>
 800477c:	2301      	movs	r3, #1
 800477e:	469b      	mov	fp, r3
 8004780:	466f      	mov	r7, sp
 8004782:	2d02      	cmp	r5, #2
 8004784:	d01d      	beq.n	80047c2 <_swilseek+0x82>
 8004786:	4640      	mov	r0, r8
 8004788:	f7ff ff2e 	bl	80045e8 <remap_handle>
 800478c:	250a      	movs	r5, #10
 800478e:	9000      	str	r0, [sp, #0]
 8004790:	607e      	str	r6, [r7, #4]
 8004792:	1c28      	adds	r0, r5, #0
 8004794:	1c39      	adds	r1, r7, #0
 8004796:	dfab      	svc	171	; 0xab
 8004798:	1c07      	adds	r7, r0, #0
 800479a:	2f00      	cmp	r7, #0
 800479c:	d00a      	beq.n	80047b4 <_swilseek+0x74>
 800479e:	2601      	movs	r6, #1
 80047a0:	4276      	negs	r6, r6
 80047a2:	1c30      	adds	r0, r6, #0
 80047a4:	b002      	add	sp, #8
 80047a6:	bc1c      	pop	{r2, r3, r4}
 80047a8:	4690      	mov	r8, r2
 80047aa:	4699      	mov	r9, r3
 80047ac:	46a3      	mov	fp, r4
 80047ae:	bcf0      	pop	{r4, r5, r6, r7}
 80047b0:	bc02      	pop	{r1}
 80047b2:	4708      	bx	r1
 80047b4:	465b      	mov	r3, fp
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d0f3      	beq.n	80047a2 <_swilseek+0x62>
 80047ba:	00e4      	lsls	r4, r4, #3
 80047bc:	444c      	add	r4, r9
 80047be:	6126      	str	r6, [r4, #16]
 80047c0:	e7ef      	b.n	80047a2 <_swilseek+0x62>
 80047c2:	9000      	str	r0, [sp, #0]
 80047c4:	250c      	movs	r5, #12
 80047c6:	1c28      	adds	r0, r5, #0
 80047c8:	1c39      	adds	r1, r7, #0
 80047ca:	dfab      	svc	171	; 0xab
 80047cc:	1c05      	adds	r5, r0, #0
 80047ce:	1976      	adds	r6, r6, r5
 80047d0:	e7d9      	b.n	8004786 <_swilseek+0x46>
 80047d2:	00e3      	lsls	r3, r4, #3
 80047d4:	444b      	add	r3, r9
 80047d6:	691b      	ldr	r3, [r3, #16]
 80047d8:	2201      	movs	r2, #1
 80047da:	18f6      	adds	r6, r6, r3
 80047dc:	4693      	mov	fp, r2
 80047de:	466f      	mov	r7, sp
 80047e0:	e7d1      	b.n	8004786 <_swilseek+0x46>
 80047e2:	46c0      	nop			; (mov r8, r8)
 80047e4:	20000b00 	.word	0x20000b00

080047e8 <_lseek>:
 80047e8:	b508      	push	{r3, lr}
 80047ea:	f7ff ffa9 	bl	8004740 <_swilseek>
 80047ee:	1c43      	adds	r3, r0, #1
 80047f0:	d002      	beq.n	80047f8 <_lseek+0x10>
 80047f2:	bc08      	pop	{r3}
 80047f4:	bc02      	pop	{r1}
 80047f6:	4708      	bx	r1
 80047f8:	f7ff feee 	bl	80045d8 <wrap.part.0>
 80047fc:	e7f9      	b.n	80047f2 <_lseek+0xa>
 80047fe:	46c0      	nop			; (mov r8, r8)

08004800 <_swiwrite>:
 8004800:	b570      	push	{r4, r5, r6, lr}
 8004802:	b084      	sub	sp, #16
 8004804:	1c15      	adds	r5, r2, #0
 8004806:	1c0e      	adds	r6, r1, #0
 8004808:	f7ff feee 	bl	80045e8 <remap_handle>
 800480c:	9503      	str	r5, [sp, #12]
 800480e:	9001      	str	r0, [sp, #4]
 8004810:	9602      	str	r6, [sp, #8]
 8004812:	ac01      	add	r4, sp, #4
 8004814:	2505      	movs	r5, #5
 8004816:	1c28      	adds	r0, r5, #0
 8004818:	1c21      	adds	r1, r4, #0
 800481a:	dfab      	svc	171	; 0xab
 800481c:	1c04      	adds	r4, r0, #0
 800481e:	1c20      	adds	r0, r4, #0
 8004820:	b004      	add	sp, #16
 8004822:	bc70      	pop	{r4, r5, r6}
 8004824:	bc02      	pop	{r1}
 8004826:	4708      	bx	r1

08004828 <_write>:
 8004828:	b5d0      	push	{r4, r6, r7, lr}
 800482a:	464f      	mov	r7, r9
 800482c:	4646      	mov	r6, r8
 800482e:	b4c0      	push	{r6, r7}
 8004830:	4689      	mov	r9, r1
 8004832:	1c16      	adds	r6, r2, #0
 8004834:	1c07      	adds	r7, r0, #0
 8004836:	f7ff fed7 	bl	80045e8 <remap_handle>
 800483a:	4a18      	ldr	r2, [pc, #96]	; (800489c <_write+0x74>)
 800483c:	1c13      	adds	r3, r2, #0
 800483e:	4690      	mov	r8, r2
 8004840:	330c      	adds	r3, #12
 8004842:	2400      	movs	r4, #0
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	4290      	cmp	r0, r2
 8004848:	d00e      	beq.n	8004868 <_write+0x40>
 800484a:	3401      	adds	r4, #1
 800484c:	3308      	adds	r3, #8
 800484e:	2c14      	cmp	r4, #20
 8004850:	d1f8      	bne.n	8004844 <_write+0x1c>
 8004852:	1c38      	adds	r0, r7, #0
 8004854:	4649      	mov	r1, r9
 8004856:	1c32      	adds	r2, r6, #0
 8004858:	f7ff ffd2 	bl	8004800 <_swiwrite>
 800485c:	42b0      	cmp	r0, r6
 800485e:	d018      	beq.n	8004892 <_write+0x6a>
 8004860:	1c43      	adds	r3, r0, #1
 8004862:	d016      	beq.n	8004892 <_write+0x6a>
 8004864:	1a30      	subs	r0, r6, r0
 8004866:	e00e      	b.n	8004886 <_write+0x5e>
 8004868:	1c38      	adds	r0, r7, #0
 800486a:	4649      	mov	r1, r9
 800486c:	1c32      	adds	r2, r6, #0
 800486e:	f7ff ffc7 	bl	8004800 <_swiwrite>
 8004872:	42b0      	cmp	r0, r6
 8004874:	d00d      	beq.n	8004892 <_write+0x6a>
 8004876:	1c43      	adds	r3, r0, #1
 8004878:	d00b      	beq.n	8004892 <_write+0x6a>
 800487a:	00e4      	lsls	r4, r4, #3
 800487c:	4444      	add	r4, r8
 800487e:	6922      	ldr	r2, [r4, #16]
 8004880:	1a30      	subs	r0, r6, r0
 8004882:	1813      	adds	r3, r2, r0
 8004884:	6123      	str	r3, [r4, #16]
 8004886:	bc0c      	pop	{r2, r3}
 8004888:	4690      	mov	r8, r2
 800488a:	4699      	mov	r9, r3
 800488c:	bcd0      	pop	{r4, r6, r7}
 800488e:	bc02      	pop	{r1}
 8004890:	4708      	bx	r1
 8004892:	2001      	movs	r0, #1
 8004894:	4240      	negs	r0, r0
 8004896:	f7ff fe8f 	bl	80045b8 <error>
 800489a:	e7f4      	b.n	8004886 <_write+0x5e>
 800489c:	20000b00 	.word	0x20000b00

080048a0 <_swiopen>:
 80048a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048a2:	4f1f      	ldr	r7, [pc, #124]	; (8004920 <_swiopen+0x80>)
 80048a4:	1c3b      	adds	r3, r7, #0
 80048a6:	b085      	sub	sp, #20
 80048a8:	330c      	adds	r3, #12
 80048aa:	2400      	movs	r4, #0
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	3201      	adds	r2, #1
 80048b0:	d009      	beq.n	80048c6 <_swiopen+0x26>
 80048b2:	3401      	adds	r4, #1
 80048b4:	3308      	adds	r3, #8
 80048b6:	2c14      	cmp	r4, #20
 80048b8:	d1f8      	bne.n	80048ac <_swiopen+0xc>
 80048ba:	2001      	movs	r0, #1
 80048bc:	4240      	negs	r0, r0
 80048be:	b005      	add	sp, #20
 80048c0:	bcf0      	pop	{r4, r5, r6, r7}
 80048c2:	bc02      	pop	{r1}
 80048c4:	4708      	bx	r1
 80048c6:	03cd      	lsls	r5, r1, #15
 80048c8:	2302      	movs	r3, #2
 80048ca:	0fed      	lsrs	r5, r5, #31
 80048cc:	420b      	tst	r3, r1
 80048ce:	d000      	beq.n	80048d2 <_swiopen+0x32>
 80048d0:	431d      	orrs	r5, r3
 80048d2:	058b      	lsls	r3, r1, #22
 80048d4:	d501      	bpl.n	80048da <_swiopen+0x3a>
 80048d6:	2304      	movs	r3, #4
 80048d8:	431d      	orrs	r5, r3
 80048da:	054a      	lsls	r2, r1, #21
 80048dc:	d501      	bpl.n	80048e2 <_swiopen+0x42>
 80048de:	2304      	movs	r3, #4
 80048e0:	431d      	orrs	r5, r3
 80048e2:	2308      	movs	r3, #8
 80048e4:	420b      	tst	r3, r1
 80048e6:	d002      	beq.n	80048ee <_swiopen+0x4e>
 80048e8:	2204      	movs	r2, #4
 80048ea:	4395      	bics	r5, r2
 80048ec:	431d      	orrs	r5, r3
 80048ee:	ae01      	add	r6, sp, #4
 80048f0:	9001      	str	r0, [sp, #4]
 80048f2:	f7fb fc2f 	bl	8000154 <strlen>
 80048f6:	6075      	str	r5, [r6, #4]
 80048f8:	60b0      	str	r0, [r6, #8]
 80048fa:	2501      	movs	r5, #1
 80048fc:	1c28      	adds	r0, r5, #0
 80048fe:	1c31      	adds	r1, r6, #0
 8004900:	dfab      	svc	171	; 0xab
 8004902:	1c06      	adds	r6, r0, #0
 8004904:	2e00      	cmp	r6, #0
 8004906:	db07      	blt.n	8004918 <_swiopen+0x78>
 8004908:	00e4      	lsls	r4, r4, #3
 800490a:	193f      	adds	r7, r7, r4
 800490c:	2300      	movs	r3, #0
 800490e:	1c30      	adds	r0, r6, #0
 8004910:	60fe      	str	r6, [r7, #12]
 8004912:	613b      	str	r3, [r7, #16]
 8004914:	3020      	adds	r0, #32
 8004916:	e7d2      	b.n	80048be <_swiopen+0x1e>
 8004918:	1c30      	adds	r0, r6, #0
 800491a:	f7ff fe4d 	bl	80045b8 <error>
 800491e:	e7ce      	b.n	80048be <_swiopen+0x1e>
 8004920:	20000b00 	.word	0x20000b00

08004924 <_open>:
 8004924:	b40e      	push	{r1, r2, r3}
 8004926:	b500      	push	{lr}
 8004928:	9901      	ldr	r1, [sp, #4]
 800492a:	f7ff ffb9 	bl	80048a0 <_swiopen>
 800492e:	1c43      	adds	r3, r0, #1
 8004930:	d002      	beq.n	8004938 <_open+0x14>
 8004932:	bc08      	pop	{r3}
 8004934:	b003      	add	sp, #12
 8004936:	4718      	bx	r3
 8004938:	f7ff fe4e 	bl	80045d8 <wrap.part.0>
 800493c:	e7f9      	b.n	8004932 <_open+0xe>
 800493e:	46c0      	nop			; (mov r8, r8)

08004940 <_swiclose>:
 8004940:	b530      	push	{r4, r5, lr}
 8004942:	b083      	sub	sp, #12
 8004944:	f7ff fe50 	bl	80045e8 <remap_handle>
 8004948:	490e      	ldr	r1, [pc, #56]	; (8004984 <_swiclose+0x44>)
 800494a:	9001      	str	r0, [sp, #4]
 800494c:	1c0b      	adds	r3, r1, #0
 800494e:	330c      	adds	r3, #12
 8004950:	2200      	movs	r2, #0
 8004952:	681c      	ldr	r4, [r3, #0]
 8004954:	42a0      	cmp	r0, r4
 8004956:	d00e      	beq.n	8004976 <_swiclose+0x36>
 8004958:	3201      	adds	r2, #1
 800495a:	3308      	adds	r3, #8
 800495c:	2a14      	cmp	r2, #20
 800495e:	d1f8      	bne.n	8004952 <_swiclose+0x12>
 8004960:	ad01      	add	r5, sp, #4
 8004962:	2402      	movs	r4, #2
 8004964:	1c20      	adds	r0, r4, #0
 8004966:	1c29      	adds	r1, r5, #0
 8004968:	dfab      	svc	171	; 0xab
 800496a:	1c04      	adds	r4, r0, #0
 800496c:	1c20      	adds	r0, r4, #0
 800496e:	b003      	add	sp, #12
 8004970:	bc30      	pop	{r4, r5}
 8004972:	bc02      	pop	{r1}
 8004974:	4708      	bx	r1
 8004976:	00d2      	lsls	r2, r2, #3
 8004978:	2301      	movs	r3, #1
 800497a:	1889      	adds	r1, r1, r2
 800497c:	425b      	negs	r3, r3
 800497e:	60cb      	str	r3, [r1, #12]
 8004980:	e7ee      	b.n	8004960 <_swiclose+0x20>
 8004982:	46c0      	nop			; (mov r8, r8)
 8004984:	20000b00 	.word	0x20000b00

08004988 <_close>:
 8004988:	b508      	push	{r3, lr}
 800498a:	f7ff ffd9 	bl	8004940 <_swiclose>
 800498e:	1c43      	adds	r3, r0, #1
 8004990:	d002      	beq.n	8004998 <_close+0x10>
 8004992:	bc08      	pop	{r3}
 8004994:	bc02      	pop	{r1}
 8004996:	4708      	bx	r1
 8004998:	f7ff fe1e 	bl	80045d8 <wrap.part.0>
 800499c:	e7f9      	b.n	8004992 <_close+0xa>
 800499e:	46c0      	nop			; (mov r8, r8)

080049a0 <_kill>:
 80049a0:	b530      	push	{r4, r5, lr}
 80049a2:	2906      	cmp	r1, #6
 80049a4:	d009      	beq.n	80049ba <_kill+0x1a>
 80049a6:	4d08      	ldr	r5, [pc, #32]	; (80049c8 <_kill+0x28>)
 80049a8:	2418      	movs	r4, #24
 80049aa:	1c20      	adds	r0, r4, #0
 80049ac:	1c29      	adds	r1, r5, #0
 80049ae:	dfab      	svc	171	; 0xab
 80049b0:	1c04      	adds	r4, r0, #0
 80049b2:	1c20      	adds	r0, r4, #0
 80049b4:	bc30      	pop	{r4, r5}
 80049b6:	bc02      	pop	{r1}
 80049b8:	4708      	bx	r1
 80049ba:	4d04      	ldr	r5, [pc, #16]	; (80049cc <_kill+0x2c>)
 80049bc:	2418      	movs	r4, #24
 80049be:	1c20      	adds	r0, r4, #0
 80049c0:	1c29      	adds	r1, r5, #0
 80049c2:	dfab      	svc	171	; 0xab
 80049c4:	1c04      	adds	r4, r0, #0
 80049c6:	e7f4      	b.n	80049b2 <_kill+0x12>
 80049c8:	00020026 	.word	0x00020026
 80049cc:	00020023 	.word	0x00020023

080049d0 <_exit>:
 80049d0:	b530      	push	{r4, r5, lr}
 80049d2:	4d04      	ldr	r5, [pc, #16]	; (80049e4 <_exit+0x14>)
 80049d4:	2418      	movs	r4, #24
 80049d6:	1c20      	adds	r0, r4, #0
 80049d8:	1c29      	adds	r1, r5, #0
 80049da:	dfab      	svc	171	; 0xab
 80049dc:	1c04      	adds	r4, r0, #0
 80049de:	bc30      	pop	{r4, r5}
 80049e0:	bc01      	pop	{r0}
 80049e2:	4700      	bx	r0
 80049e4:	00020026 	.word	0x00020026

080049e8 <_getpid>:
 80049e8:	2001      	movs	r0, #1
 80049ea:	4770      	bx	lr

080049ec <_sbrk>:
 80049ec:	4a0b      	ldr	r2, [pc, #44]	; (8004a1c <_sbrk+0x30>)
 80049ee:	b508      	push	{r3, lr}
 80049f0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d00f      	beq.n	8004a16 <_sbrk+0x2a>
 80049f6:	1818      	adds	r0, r3, r0
 80049f8:	4669      	mov	r1, sp
 80049fa:	4288      	cmp	r0, r1
 80049fc:	d804      	bhi.n	8004a08 <_sbrk+0x1c>
 80049fe:	62d0      	str	r0, [r2, #44]	; 0x2c
 8004a00:	1c18      	adds	r0, r3, #0
 8004a02:	bc08      	pop	{r3}
 8004a04:	bc02      	pop	{r1}
 8004a06:	4708      	bx	r1
 8004a08:	f001 fa0e 	bl	8005e28 <__errno>
 8004a0c:	230c      	movs	r3, #12
 8004a0e:	6003      	str	r3, [r0, #0]
 8004a10:	2301      	movs	r3, #1
 8004a12:	425b      	negs	r3, r3
 8004a14:	e7f4      	b.n	8004a00 <_sbrk+0x14>
 8004a16:	4b02      	ldr	r3, [pc, #8]	; (8004a20 <_sbrk+0x34>)
 8004a18:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004a1a:	e7ec      	b.n	80049f6 <_sbrk+0xa>
 8004a1c:	20000b80 	.word	0x20000b80
 8004a20:	2000219c 	.word	0x2000219c

08004a24 <_fstat>:
 8004a24:	b510      	push	{r4, lr}
 8004a26:	1c08      	adds	r0, r1, #0
 8004a28:	1c0c      	adds	r4, r1, #0
 8004a2a:	223c      	movs	r2, #60	; 0x3c
 8004a2c:	2100      	movs	r1, #0
 8004a2e:	f7fc fc4f 	bl	80012d0 <memset>
 8004a32:	2380      	movs	r3, #128	; 0x80
 8004a34:	019b      	lsls	r3, r3, #6
 8004a36:	6063      	str	r3, [r4, #4]
 8004a38:	2380      	movs	r3, #128	; 0x80
 8004a3a:	00db      	lsls	r3, r3, #3
 8004a3c:	2000      	movs	r0, #0
 8004a3e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004a40:	bc10      	pop	{r4}
 8004a42:	bc02      	pop	{r1}
 8004a44:	4708      	bx	r1
 8004a46:	46c0      	nop			; (mov r8, r8)

08004a48 <_stat>:
 8004a48:	b538      	push	{r3, r4, r5, lr}
 8004a4a:	1c0c      	adds	r4, r1, #0
 8004a4c:	2100      	movs	r1, #0
 8004a4e:	f7ff ff69 	bl	8004924 <_open>
 8004a52:	1e05      	subs	r5, r0, #0
 8004a54:	db11      	blt.n	8004a7a <_stat+0x32>
 8004a56:	1c20      	adds	r0, r4, #0
 8004a58:	2100      	movs	r1, #0
 8004a5a:	223c      	movs	r2, #60	; 0x3c
 8004a5c:	f7fc fc38 	bl	80012d0 <memset>
 8004a60:	2381      	movs	r3, #129	; 0x81
 8004a62:	021b      	lsls	r3, r3, #8
 8004a64:	6063      	str	r3, [r4, #4]
 8004a66:	2380      	movs	r3, #128	; 0x80
 8004a68:	00db      	lsls	r3, r3, #3
 8004a6a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004a6c:	1c28      	adds	r0, r5, #0
 8004a6e:	f7ff ff67 	bl	8004940 <_swiclose>
 8004a72:	2000      	movs	r0, #0
 8004a74:	bc38      	pop	{r3, r4, r5}
 8004a76:	bc02      	pop	{r1}
 8004a78:	4708      	bx	r1
 8004a7a:	2001      	movs	r0, #1
 8004a7c:	4240      	negs	r0, r0
 8004a7e:	e7f9      	b.n	8004a74 <_stat+0x2c>

08004a80 <_link>:
 8004a80:	2001      	movs	r0, #1
 8004a82:	4240      	negs	r0, r0
 8004a84:	4770      	bx	lr
 8004a86:	46c0      	nop			; (mov r8, r8)

08004a88 <_unlink>:
 8004a88:	b530      	push	{r4, r5, lr}
 8004a8a:	b083      	sub	sp, #12
 8004a8c:	466c      	mov	r4, sp
 8004a8e:	9000      	str	r0, [sp, #0]
 8004a90:	f7fb fb60 	bl	8000154 <strlen>
 8004a94:	250e      	movs	r5, #14
 8004a96:	9001      	str	r0, [sp, #4]
 8004a98:	1c28      	adds	r0, r5, #0
 8004a9a:	1c21      	adds	r1, r4, #0
 8004a9c:	dfab      	svc	171	; 0xab
 8004a9e:	1c04      	adds	r4, r0, #0
 8004aa0:	1c63      	adds	r3, r4, #1
 8004aa2:	d006      	beq.n	8004ab2 <_unlink+0x2a>
 8004aa4:	4260      	negs	r0, r4
 8004aa6:	4160      	adcs	r0, r4
 8004aa8:	3801      	subs	r0, #1
 8004aaa:	b003      	add	sp, #12
 8004aac:	bc30      	pop	{r4, r5}
 8004aae:	bc02      	pop	{r1}
 8004ab0:	4708      	bx	r1
 8004ab2:	f7ff fd91 	bl	80045d8 <wrap.part.0>
 8004ab6:	1c04      	adds	r4, r0, #0
 8004ab8:	e7f4      	b.n	8004aa4 <_unlink+0x1c>
 8004aba:	46c0      	nop			; (mov r8, r8)

08004abc <_raise>:
 8004abc:	4770      	bx	lr
 8004abe:	46c0      	nop			; (mov r8, r8)

08004ac0 <_gettimeofday>:
 8004ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ac2:	1c05      	adds	r5, r0, #0
 8004ac4:	1c0c      	adds	r4, r1, #0
 8004ac6:	2800      	cmp	r0, #0
 8004ac8:	d007      	beq.n	8004ada <_gettimeofday+0x1a>
 8004aca:	2600      	movs	r6, #0
 8004acc:	2711      	movs	r7, #17
 8004ace:	1c38      	adds	r0, r7, #0
 8004ad0:	1c31      	adds	r1, r6, #0
 8004ad2:	dfab      	svc	171	; 0xab
 8004ad4:	1c07      	adds	r7, r0, #0
 8004ad6:	602f      	str	r7, [r5, #0]
 8004ad8:	606e      	str	r6, [r5, #4]
 8004ada:	2c00      	cmp	r4, #0
 8004adc:	d002      	beq.n	8004ae4 <_gettimeofday+0x24>
 8004ade:	2300      	movs	r3, #0
 8004ae0:	6023      	str	r3, [r4, #0]
 8004ae2:	6063      	str	r3, [r4, #4]
 8004ae4:	2000      	movs	r0, #0
 8004ae6:	bcf0      	pop	{r4, r5, r6, r7}
 8004ae8:	bc02      	pop	{r1}
 8004aea:	4708      	bx	r1

08004aec <_times>:
 8004aec:	b570      	push	{r4, r5, r6, lr}
 8004aee:	1c04      	adds	r4, r0, #0
 8004af0:	2500      	movs	r5, #0
 8004af2:	2610      	movs	r6, #16
 8004af4:	1c30      	adds	r0, r6, #0
 8004af6:	1c29      	adds	r1, r5, #0
 8004af8:	dfab      	svc	171	; 0xab
 8004afa:	1c06      	adds	r6, r0, #0
 8004afc:	2c00      	cmp	r4, #0
 8004afe:	d003      	beq.n	8004b08 <_times+0x1c>
 8004b00:	6026      	str	r6, [r4, #0]
 8004b02:	6065      	str	r5, [r4, #4]
 8004b04:	60a5      	str	r5, [r4, #8]
 8004b06:	60e5      	str	r5, [r4, #12]
 8004b08:	1c30      	adds	r0, r6, #0
 8004b0a:	bc70      	pop	{r4, r5, r6}
 8004b0c:	bc02      	pop	{r1}
 8004b0e:	4708      	bx	r1

08004b10 <_isatty>:
 8004b10:	b530      	push	{r4, r5, lr}
 8004b12:	b083      	sub	sp, #12
 8004b14:	f7ff fd68 	bl	80045e8 <remap_handle>
 8004b18:	2409      	movs	r4, #9
 8004b1a:	9001      	str	r0, [sp, #4]
 8004b1c:	ad01      	add	r5, sp, #4
 8004b1e:	1c20      	adds	r0, r4, #0
 8004b20:	1c29      	adds	r1, r5, #0
 8004b22:	dfab      	svc	171	; 0xab
 8004b24:	1c04      	adds	r4, r0, #0
 8004b26:	1c63      	adds	r3, r4, #1
 8004b28:	d004      	beq.n	8004b34 <_isatty+0x24>
 8004b2a:	1c20      	adds	r0, r4, #0
 8004b2c:	b003      	add	sp, #12
 8004b2e:	bc30      	pop	{r4, r5}
 8004b30:	bc02      	pop	{r1}
 8004b32:	4708      	bx	r1
 8004b34:	f7ff fd50 	bl	80045d8 <wrap.part.0>
 8004b38:	1c04      	adds	r4, r0, #0
 8004b3a:	e7f6      	b.n	8004b2a <_isatty+0x1a>

08004b3c <_system>:
 8004b3c:	b530      	push	{r4, r5, lr}
 8004b3e:	b083      	sub	sp, #12
 8004b40:	2800      	cmp	r0, #0
 8004b42:	d01d      	beq.n	8004b80 <_system+0x44>
 8004b44:	466c      	mov	r4, sp
 8004b46:	9000      	str	r0, [sp, #0]
 8004b48:	f7fb fb04 	bl	8000154 <strlen>
 8004b4c:	2512      	movs	r5, #18
 8004b4e:	9001      	str	r0, [sp, #4]
 8004b50:	1c28      	adds	r0, r5, #0
 8004b52:	1c21      	adds	r1, r4, #0
 8004b54:	dfab      	svc	171	; 0xab
 8004b56:	1c04      	adds	r4, r0, #0
 8004b58:	1c63      	adds	r3, r4, #1
 8004b5a:	d013      	beq.n	8004b84 <_system+0x48>
 8004b5c:	2cff      	cmp	r4, #255	; 0xff
 8004b5e:	d80a      	bhi.n	8004b76 <_system+0x3a>
 8004b60:	2c00      	cmp	r4, #0
 8004b62:	d008      	beq.n	8004b76 <_system+0x3a>
 8004b64:	1c23      	adds	r3, r4, #0
 8004b66:	21ff      	movs	r1, #255	; 0xff
 8004b68:	005b      	lsls	r3, r3, #1
 8004b6a:	d00f      	beq.n	8004b8c <_system+0x50>
 8004b6c:	121a      	asrs	r2, r3, #8
 8004b6e:	400a      	ands	r2, r1
 8004b70:	42a2      	cmp	r2, r4
 8004b72:	d1f9      	bne.n	8004b68 <_system+0x2c>
 8004b74:	1c1c      	adds	r4, r3, #0
 8004b76:	1c20      	adds	r0, r4, #0
 8004b78:	b003      	add	sp, #12
 8004b7a:	bc30      	pop	{r4, r5}
 8004b7c:	bc02      	pop	{r1}
 8004b7e:	4708      	bx	r1
 8004b80:	2401      	movs	r4, #1
 8004b82:	e7f8      	b.n	8004b76 <_system+0x3a>
 8004b84:	f7ff fd28 	bl	80045d8 <wrap.part.0>
 8004b88:	1c04      	adds	r4, r0, #0
 8004b8a:	e7e7      	b.n	8004b5c <_system+0x20>
 8004b8c:	2400      	movs	r4, #0
 8004b8e:	e7f2      	b.n	8004b76 <_system+0x3a>

08004b90 <_rename>:
 8004b90:	b530      	push	{r4, r5, lr}
 8004b92:	b085      	sub	sp, #20
 8004b94:	1c0d      	adds	r5, r1, #0
 8004b96:	466c      	mov	r4, sp
 8004b98:	9000      	str	r0, [sp, #0]
 8004b9a:	f7fb fadb 	bl	8000154 <strlen>
 8004b9e:	9001      	str	r0, [sp, #4]
 8004ba0:	1c28      	adds	r0, r5, #0
 8004ba2:	9502      	str	r5, [sp, #8]
 8004ba4:	f7fb fad6 	bl	8000154 <strlen>
 8004ba8:	250f      	movs	r5, #15
 8004baa:	9003      	str	r0, [sp, #12]
 8004bac:	1c28      	adds	r0, r5, #0
 8004bae:	1c21      	adds	r1, r4, #0
 8004bb0:	dfab      	svc	171	; 0xab
 8004bb2:	1c04      	adds	r4, r0, #0
 8004bb4:	1c63      	adds	r3, r4, #1
 8004bb6:	d006      	beq.n	8004bc6 <_rename+0x36>
 8004bb8:	4260      	negs	r0, r4
 8004bba:	4160      	adcs	r0, r4
 8004bbc:	3801      	subs	r0, #1
 8004bbe:	b005      	add	sp, #20
 8004bc0:	bc30      	pop	{r4, r5}
 8004bc2:	bc02      	pop	{r1}
 8004bc4:	4708      	bx	r1
 8004bc6:	f7ff fd07 	bl	80045d8 <wrap.part.0>
 8004bca:	1c04      	adds	r4, r0, #0
 8004bcc:	e7f4      	b.n	8004bb8 <_rename+0x28>
 8004bce:	46c0      	nop			; (mov r8, r8)

08004bd0 <__submore>:
 8004bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bd2:	1c0c      	adds	r4, r1, #0
 8004bd4:	1c23      	adds	r3, r4, #0
 8004bd6:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8004bd8:	4647      	mov	r7, r8
 8004bda:	3340      	adds	r3, #64	; 0x40
 8004bdc:	b480      	push	{r7}
 8004bde:	4299      	cmp	r1, r3
 8004be0:	d017      	beq.n	8004c12 <__submore+0x42>
 8004be2:	6b66      	ldr	r6, [r4, #52]	; 0x34
 8004be4:	0077      	lsls	r7, r6, #1
 8004be6:	1c3a      	adds	r2, r7, #0
 8004be8:	f003 f866 	bl	8007cb8 <_realloc_r>
 8004bec:	1e05      	subs	r5, r0, #0
 8004bee:	d029      	beq.n	8004c44 <__submore+0x74>
 8004bf0:	19ab      	adds	r3, r5, r6
 8004bf2:	4698      	mov	r8, r3
 8004bf4:	1c18      	adds	r0, r3, #0
 8004bf6:	1c29      	adds	r1, r5, #0
 8004bf8:	1c32      	adds	r2, r6, #0
 8004bfa:	f002 fb57 	bl	80072ac <memcpy>
 8004bfe:	4643      	mov	r3, r8
 8004c00:	6023      	str	r3, [r4, #0]
 8004c02:	6325      	str	r5, [r4, #48]	; 0x30
 8004c04:	6367      	str	r7, [r4, #52]	; 0x34
 8004c06:	2000      	movs	r0, #0
 8004c08:	bc04      	pop	{r2}
 8004c0a:	4690      	mov	r8, r2
 8004c0c:	bcf0      	pop	{r4, r5, r6, r7}
 8004c0e:	bc02      	pop	{r1}
 8004c10:	4708      	bx	r1
 8004c12:	2580      	movs	r5, #128	; 0x80
 8004c14:	00ed      	lsls	r5, r5, #3
 8004c16:	1c29      	adds	r1, r5, #0
 8004c18:	f002 f86e 	bl	8006cf8 <_malloc_r>
 8004c1c:	2800      	cmp	r0, #0
 8004c1e:	d011      	beq.n	8004c44 <__submore+0x74>
 8004c20:	6320      	str	r0, [r4, #48]	; 0x30
 8004c22:	6365      	str	r5, [r4, #52]	; 0x34
 8004c24:	2342      	movs	r3, #66	; 0x42
 8004c26:	5ce2      	ldrb	r2, [r4, r3]
 8004c28:	4b08      	ldr	r3, [pc, #32]	; (8004c4c <__submore+0x7c>)
 8004c2a:	54c2      	strb	r2, [r0, r3]
 8004c2c:	2341      	movs	r3, #65	; 0x41
 8004c2e:	5ce2      	ldrb	r2, [r4, r3]
 8004c30:	4b07      	ldr	r3, [pc, #28]	; (8004c50 <__submore+0x80>)
 8004c32:	54c2      	strb	r2, [r0, r3]
 8004c34:	2340      	movs	r3, #64	; 0x40
 8004c36:	5ce2      	ldrb	r2, [r4, r3]
 8004c38:	4b06      	ldr	r3, [pc, #24]	; (8004c54 <__submore+0x84>)
 8004c3a:	54c2      	strb	r2, [r0, r3]
 8004c3c:	18c0      	adds	r0, r0, r3
 8004c3e:	6020      	str	r0, [r4, #0]
 8004c40:	2000      	movs	r0, #0
 8004c42:	e7e1      	b.n	8004c08 <__submore+0x38>
 8004c44:	2001      	movs	r0, #1
 8004c46:	4240      	negs	r0, r0
 8004c48:	e7de      	b.n	8004c08 <__submore+0x38>
 8004c4a:	46c0      	nop			; (mov r8, r8)
 8004c4c:	000003ff 	.word	0x000003ff
 8004c50:	000003fe 	.word	0x000003fe
 8004c54:	000003fd 	.word	0x000003fd

08004c58 <_ungetc_r>:
 8004c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c5a:	1c05      	adds	r5, r0, #0
 8004c5c:	1c0e      	adds	r6, r1, #0
 8004c5e:	1c14      	adds	r4, r2, #0
 8004c60:	1c48      	adds	r0, r1, #1
 8004c62:	d038      	beq.n	8004cd6 <_ungetc_r+0x7e>
 8004c64:	2d00      	cmp	r5, #0
 8004c66:	d002      	beq.n	8004c6e <_ungetc_r+0x16>
 8004c68:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8004c6a:	2900      	cmp	r1, #0
 8004c6c:	d036      	beq.n	8004cdc <_ungetc_r+0x84>
 8004c6e:	2280      	movs	r2, #128	; 0x80
 8004c70:	89a3      	ldrh	r3, [r4, #12]
 8004c72:	0192      	lsls	r2, r2, #6
 8004c74:	4213      	tst	r3, r2
 8004c76:	d104      	bne.n	8004c82 <_ungetc_r+0x2a>
 8004c78:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	4a2e      	ldr	r2, [pc, #184]	; (8004d38 <_ungetc_r+0xe0>)
 8004c7e:	4002      	ands	r2, r0
 8004c80:	6662      	str	r2, [r4, #100]	; 0x64
 8004c82:	2220      	movs	r2, #32
 8004c84:	1c18      	adds	r0, r3, #0
 8004c86:	4390      	bics	r0, r2
 8004c88:	1c19      	adds	r1, r3, #0
 8004c8a:	1c02      	adds	r2, r0, #0
 8004c8c:	81a0      	strh	r0, [r4, #12]
 8004c8e:	0758      	lsls	r0, r3, #29
 8004c90:	d407      	bmi.n	8004ca2 <_ungetc_r+0x4a>
 8004c92:	06d8      	lsls	r0, r3, #27
 8004c94:	d51f      	bpl.n	8004cd6 <_ungetc_r+0x7e>
 8004c96:	2708      	movs	r7, #8
 8004c98:	420f      	tst	r7, r1
 8004c9a:	d13d      	bne.n	8004d18 <_ungetc_r+0xc0>
 8004c9c:	2304      	movs	r3, #4
 8004c9e:	431a      	orrs	r2, r3
 8004ca0:	81a2      	strh	r2, [r4, #12]
 8004ca2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004ca4:	23ff      	movs	r3, #255	; 0xff
 8004ca6:	401e      	ands	r6, r3
 8004ca8:	2900      	cmp	r1, #0
 8004caa:	d01b      	beq.n	8004ce4 <_ungetc_r+0x8c>
 8004cac:	6862      	ldr	r2, [r4, #4]
 8004cae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	da0a      	bge.n	8004cca <_ungetc_r+0x72>
 8004cb4:	6823      	ldr	r3, [r4, #0]
 8004cb6:	3b01      	subs	r3, #1
 8004cb8:	6023      	str	r3, [r4, #0]
 8004cba:	701e      	strb	r6, [r3, #0]
 8004cbc:	6863      	ldr	r3, [r4, #4]
 8004cbe:	3301      	adds	r3, #1
 8004cc0:	6063      	str	r3, [r4, #4]
 8004cc2:	1c30      	adds	r0, r6, #0
 8004cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cc6:	bc02      	pop	{r1}
 8004cc8:	4708      	bx	r1
 8004cca:	1c28      	adds	r0, r5, #0
 8004ccc:	1c21      	adds	r1, r4, #0
 8004cce:	f7ff ff7f 	bl	8004bd0 <__submore>
 8004cd2:	2800      	cmp	r0, #0
 8004cd4:	d0ee      	beq.n	8004cb4 <_ungetc_r+0x5c>
 8004cd6:	2601      	movs	r6, #1
 8004cd8:	4276      	negs	r6, r6
 8004cda:	e7f2      	b.n	8004cc2 <_ungetc_r+0x6a>
 8004cdc:	1c28      	adds	r0, r5, #0
 8004cde:	f001 f9db 	bl	8006098 <__sinit>
 8004ce2:	e7c4      	b.n	8004c6e <_ungetc_r+0x16>
 8004ce4:	6922      	ldr	r2, [r4, #16]
 8004ce6:	6823      	ldr	r3, [r4, #0]
 8004ce8:	2a00      	cmp	r2, #0
 8004cea:	d005      	beq.n	8004cf8 <_ungetc_r+0xa0>
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d203      	bcs.n	8004cf8 <_ungetc_r+0xa0>
 8004cf0:	1e5a      	subs	r2, r3, #1
 8004cf2:	7811      	ldrb	r1, [r2, #0]
 8004cf4:	42b1      	cmp	r1, r6
 8004cf6:	d01a      	beq.n	8004d2e <_ungetc_r+0xd6>
 8004cf8:	63a3      	str	r3, [r4, #56]	; 0x38
 8004cfa:	1c23      	adds	r3, r4, #0
 8004cfc:	3340      	adds	r3, #64	; 0x40
 8004cfe:	6323      	str	r3, [r4, #48]	; 0x30
 8004d00:	2303      	movs	r3, #3
 8004d02:	6363      	str	r3, [r4, #52]	; 0x34
 8004d04:	2342      	movs	r3, #66	; 0x42
 8004d06:	54e6      	strb	r6, [r4, r3]
 8004d08:	1c23      	adds	r3, r4, #0
 8004d0a:	6860      	ldr	r0, [r4, #4]
 8004d0c:	3342      	adds	r3, #66	; 0x42
 8004d0e:	6023      	str	r3, [r4, #0]
 8004d10:	2301      	movs	r3, #1
 8004d12:	63e0      	str	r0, [r4, #60]	; 0x3c
 8004d14:	6063      	str	r3, [r4, #4]
 8004d16:	e7d4      	b.n	8004cc2 <_ungetc_r+0x6a>
 8004d18:	1c28      	adds	r0, r5, #0
 8004d1a:	1c21      	adds	r1, r4, #0
 8004d1c:	f001 f936 	bl	8005f8c <_fflush_r>
 8004d20:	2800      	cmp	r0, #0
 8004d22:	d1d8      	bne.n	8004cd6 <_ungetc_r+0x7e>
 8004d24:	89a2      	ldrh	r2, [r4, #12]
 8004d26:	60a0      	str	r0, [r4, #8]
 8004d28:	43ba      	bics	r2, r7
 8004d2a:	61a0      	str	r0, [r4, #24]
 8004d2c:	e7b6      	b.n	8004c9c <_ungetc_r+0x44>
 8004d2e:	6863      	ldr	r3, [r4, #4]
 8004d30:	3301      	adds	r3, #1
 8004d32:	6022      	str	r2, [r4, #0]
 8004d34:	6063      	str	r3, [r4, #4]
 8004d36:	e7c4      	b.n	8004cc2 <_ungetc_r+0x6a>
 8004d38:	ffffdfff 	.word	0xffffdfff

08004d3c <ungetc>:
 8004d3c:	b508      	push	{r3, lr}
 8004d3e:	1c0a      	adds	r2, r1, #0
 8004d40:	4904      	ldr	r1, [pc, #16]	; (8004d54 <ungetc+0x18>)
 8004d42:	1c03      	adds	r3, r0, #0
 8004d44:	6808      	ldr	r0, [r1, #0]
 8004d46:	1c19      	adds	r1, r3, #0
 8004d48:	f7ff ff86 	bl	8004c58 <_ungetc_r>
 8004d4c:	bc08      	pop	{r3}
 8004d4e:	bc02      	pop	{r1}
 8004d50:	4708      	bx	r1
 8004d52:	46c0      	nop			; (mov r8, r8)
 8004d54:	20000100 	.word	0x20000100

08004d58 <quorem>:
 8004d58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d5a:	464d      	mov	r5, r9
 8004d5c:	4644      	mov	r4, r8
 8004d5e:	465f      	mov	r7, fp
 8004d60:	4656      	mov	r6, sl
 8004d62:	b4f0      	push	{r4, r5, r6, r7}
 8004d64:	4680      	mov	r8, r0
 8004d66:	4689      	mov	r9, r1
 8004d68:	690b      	ldr	r3, [r1, #16]
 8004d6a:	4641      	mov	r1, r8
 8004d6c:	6909      	ldr	r1, [r1, #16]
 8004d6e:	b083      	sub	sp, #12
 8004d70:	2000      	movs	r0, #0
 8004d72:	428b      	cmp	r3, r1
 8004d74:	dd00      	ble.n	8004d78 <quorem+0x20>
 8004d76:	e092      	b.n	8004e9e <quorem+0x146>
 8004d78:	1e5d      	subs	r5, r3, #1
 8004d7a:	3303      	adds	r3, #3
 8004d7c:	009b      	lsls	r3, r3, #2
 8004d7e:	4648      	mov	r0, r9
 8004d80:	4641      	mov	r1, r8
 8004d82:	18c2      	adds	r2, r0, r3
 8004d84:	3114      	adds	r1, #20
 8004d86:	9101      	str	r1, [sp, #4]
 8004d88:	6851      	ldr	r1, [r2, #4]
 8004d8a:	4443      	add	r3, r8
 8004d8c:	3101      	adds	r1, #1
 8004d8e:	6858      	ldr	r0, [r3, #4]
 8004d90:	1d17      	adds	r7, r2, #4
 8004d92:	f003 ef7c 	blx	8008c8c <__aeabi_uidiv>
 8004d96:	464c      	mov	r4, r9
 8004d98:	3414      	adds	r4, #20
 8004d9a:	1e06      	subs	r6, r0, #0
 8004d9c:	d043      	beq.n	8004e26 <quorem+0xce>
 8004d9e:	2100      	movs	r1, #0
 8004da0:	9b01      	ldr	r3, [sp, #4]
 8004da2:	46ab      	mov	fp, r5
 8004da4:	46ba      	mov	sl, r7
 8004da6:	1c22      	adds	r2, r4, #0
 8004da8:	1c37      	adds	r7, r6, #0
 8004daa:	46a4      	mov	ip, r4
 8004dac:	1c0d      	adds	r5, r1, #0
 8004dae:	1c0e      	adds	r6, r1, #0
 8004db0:	ca02      	ldmia	r2!, {r1}
 8004db2:	040c      	lsls	r4, r1, #16
 8004db4:	0c24      	lsrs	r4, r4, #16
 8004db6:	437c      	muls	r4, r7
 8004db8:	0c09      	lsrs	r1, r1, #16
 8004dba:	4379      	muls	r1, r7
 8004dbc:	1934      	adds	r4, r6, r4
 8004dbe:	0c20      	lsrs	r0, r4, #16
 8004dc0:	1840      	adds	r0, r0, r1
 8004dc2:	6819      	ldr	r1, [r3, #0]
 8004dc4:	0409      	lsls	r1, r1, #16
 8004dc6:	0c09      	lsrs	r1, r1, #16
 8004dc8:	0424      	lsls	r4, r4, #16
 8004dca:	194d      	adds	r5, r1, r5
 8004dcc:	0c24      	lsrs	r4, r4, #16
 8004dce:	1b2c      	subs	r4, r5, r4
 8004dd0:	681d      	ldr	r5, [r3, #0]
 8004dd2:	0c06      	lsrs	r6, r0, #16
 8004dd4:	0400      	lsls	r0, r0, #16
 8004dd6:	0c29      	lsrs	r1, r5, #16
 8004dd8:	0c00      	lsrs	r0, r0, #16
 8004dda:	1425      	asrs	r5, r4, #16
 8004ddc:	1a09      	subs	r1, r1, r0
 8004dde:	1949      	adds	r1, r1, r5
 8004de0:	0424      	lsls	r4, r4, #16
 8004de2:	140d      	asrs	r5, r1, #16
 8004de4:	0c24      	lsrs	r4, r4, #16
 8004de6:	0409      	lsls	r1, r1, #16
 8004de8:	4321      	orrs	r1, r4
 8004dea:	c302      	stmia	r3!, {r1}
 8004dec:	4592      	cmp	sl, r2
 8004dee:	d2df      	bcs.n	8004db0 <quorem+0x58>
 8004df0:	465d      	mov	r5, fp
 8004df2:	1d2b      	adds	r3, r5, #4
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	4443      	add	r3, r8
 8004df8:	6858      	ldr	r0, [r3, #4]
 8004dfa:	1c3e      	adds	r6, r7, #0
 8004dfc:	4664      	mov	r4, ip
 8004dfe:	4657      	mov	r7, sl
 8004e00:	2800      	cmp	r0, #0
 8004e02:	d110      	bne.n	8004e26 <quorem+0xce>
 8004e04:	9901      	ldr	r1, [sp, #4]
 8004e06:	4299      	cmp	r1, r3
 8004e08:	d20b      	bcs.n	8004e22 <quorem+0xca>
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	2a00      	cmp	r2, #0
 8004e0e:	d108      	bne.n	8004e22 <quorem+0xca>
 8004e10:	1c0a      	adds	r2, r1, #0
 8004e12:	e002      	b.n	8004e1a <quorem+0xc2>
 8004e14:	6818      	ldr	r0, [r3, #0]
 8004e16:	2800      	cmp	r0, #0
 8004e18:	d103      	bne.n	8004e22 <quorem+0xca>
 8004e1a:	3b04      	subs	r3, #4
 8004e1c:	3d01      	subs	r5, #1
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	d3f8      	bcc.n	8004e14 <quorem+0xbc>
 8004e22:	4641      	mov	r1, r8
 8004e24:	610d      	str	r5, [r1, #16]
 8004e26:	4640      	mov	r0, r8
 8004e28:	4649      	mov	r1, r9
 8004e2a:	f002 fd31 	bl	8007890 <__mcmp>
 8004e2e:	2800      	cmp	r0, #0
 8004e30:	db34      	blt.n	8004e9c <quorem+0x144>
 8004e32:	2200      	movs	r2, #0
 8004e34:	4694      	mov	ip, r2
 8004e36:	9b01      	ldr	r3, [sp, #4]
 8004e38:	1c2a      	adds	r2, r5, #0
 8004e3a:	3601      	adds	r6, #1
 8004e3c:	1c3d      	adds	r5, r7, #0
 8004e3e:	4667      	mov	r7, ip
 8004e40:	4694      	mov	ip, r2
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	cc01      	ldmia	r4!, {r0}
 8004e46:	0411      	lsls	r1, r2, #16
 8004e48:	0c09      	lsrs	r1, r1, #16
 8004e4a:	19cf      	adds	r7, r1, r7
 8004e4c:	0401      	lsls	r1, r0, #16
 8004e4e:	0c09      	lsrs	r1, r1, #16
 8004e50:	1a79      	subs	r1, r7, r1
 8004e52:	0c12      	lsrs	r2, r2, #16
 8004e54:	0c00      	lsrs	r0, r0, #16
 8004e56:	140f      	asrs	r7, r1, #16
 8004e58:	1a12      	subs	r2, r2, r0
 8004e5a:	19d2      	adds	r2, r2, r7
 8004e5c:	0409      	lsls	r1, r1, #16
 8004e5e:	1417      	asrs	r7, r2, #16
 8004e60:	0c09      	lsrs	r1, r1, #16
 8004e62:	0412      	lsls	r2, r2, #16
 8004e64:	430a      	orrs	r2, r1
 8004e66:	c304      	stmia	r3!, {r2}
 8004e68:	42a5      	cmp	r5, r4
 8004e6a:	d2ea      	bcs.n	8004e42 <quorem+0xea>
 8004e6c:	4665      	mov	r5, ip
 8004e6e:	1d2b      	adds	r3, r5, #4
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	4443      	add	r3, r8
 8004e74:	6858      	ldr	r0, [r3, #4]
 8004e76:	2800      	cmp	r0, #0
 8004e78:	d110      	bne.n	8004e9c <quorem+0x144>
 8004e7a:	9901      	ldr	r1, [sp, #4]
 8004e7c:	4299      	cmp	r1, r3
 8004e7e:	d20b      	bcs.n	8004e98 <quorem+0x140>
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	2a00      	cmp	r2, #0
 8004e84:	d108      	bne.n	8004e98 <quorem+0x140>
 8004e86:	1c0a      	adds	r2, r1, #0
 8004e88:	e002      	b.n	8004e90 <quorem+0x138>
 8004e8a:	6818      	ldr	r0, [r3, #0]
 8004e8c:	2800      	cmp	r0, #0
 8004e8e:	d103      	bne.n	8004e98 <quorem+0x140>
 8004e90:	3b04      	subs	r3, #4
 8004e92:	3d01      	subs	r5, #1
 8004e94:	429a      	cmp	r2, r3
 8004e96:	d3f8      	bcc.n	8004e8a <quorem+0x132>
 8004e98:	4641      	mov	r1, r8
 8004e9a:	610d      	str	r5, [r1, #16]
 8004e9c:	1c30      	adds	r0, r6, #0
 8004e9e:	b003      	add	sp, #12
 8004ea0:	bc3c      	pop	{r2, r3, r4, r5}
 8004ea2:	4690      	mov	r8, r2
 8004ea4:	4699      	mov	r9, r3
 8004ea6:	46a2      	mov	sl, r4
 8004ea8:	46ab      	mov	fp, r5
 8004eaa:	bcf0      	pop	{r4, r5, r6, r7}
 8004eac:	bc02      	pop	{r1}
 8004eae:	4708      	bx	r1

08004eb0 <_dtoa_r>:
 8004eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004eb2:	4656      	mov	r6, sl
 8004eb4:	4644      	mov	r4, r8
 8004eb6:	465f      	mov	r7, fp
 8004eb8:	464d      	mov	r5, r9
 8004eba:	b4f0      	push	{r4, r5, r6, r7}
 8004ebc:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8004ebe:	b09d      	sub	sp, #116	; 0x74
 8004ec0:	1c04      	adds	r4, r0, #0
 8004ec2:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 8004ec4:	9202      	str	r2, [sp, #8]
 8004ec6:	9303      	str	r3, [sp, #12]
 8004ec8:	2900      	cmp	r1, #0
 8004eca:	d008      	beq.n	8004ede <_dtoa_r+0x2e>
 8004ecc:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004ece:	2201      	movs	r2, #1
 8004ed0:	409a      	lsls	r2, r3
 8004ed2:	604b      	str	r3, [r1, #4]
 8004ed4:	608a      	str	r2, [r1, #8]
 8004ed6:	f002 fa61 	bl	800739c <_Bfree>
 8004eda:	2300      	movs	r3, #0
 8004edc:	6423      	str	r3, [r4, #64]	; 0x40
 8004ede:	9d03      	ldr	r5, [sp, #12]
 8004ee0:	2d00      	cmp	r5, #0
 8004ee2:	db37      	blt.n	8004f54 <_dtoa_r+0xa4>
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	6033      	str	r3, [r6, #0]
 8004ee8:	4b1f      	ldr	r3, [pc, #124]	; (8004f68 <_dtoa_r+0xb8>)
 8004eea:	1c2a      	adds	r2, r5, #0
 8004eec:	401a      	ands	r2, r3
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d01d      	beq.n	8004f2e <_dtoa_r+0x7e>
 8004ef2:	9e02      	ldr	r6, [sp, #8]
 8004ef4:	9f03      	ldr	r7, [sp, #12]
 8004ef6:	4b1b      	ldr	r3, [pc, #108]	; (8004f64 <_dtoa_r+0xb4>)
 8004ef8:	4a19      	ldr	r2, [pc, #100]	; (8004f60 <_dtoa_r+0xb0>)
 8004efa:	1c30      	adds	r0, r6, #0
 8004efc:	1c39      	adds	r1, r7, #0
 8004efe:	f004 ecc0 	blx	8009880 <__aeabi_dcmpeq>
 8004f02:	2800      	cmp	r0, #0
 8004f04:	d038      	beq.n	8004f78 <_dtoa_r+0xc8>
 8004f06:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 8004f08:	2301      	movs	r3, #1
 8004f0a:	6033      	str	r3, [r6, #0]
 8004f0c:	9e2a      	ldr	r6, [sp, #168]	; 0xa8
 8004f0e:	2e00      	cmp	r6, #0
 8004f10:	d100      	bne.n	8004f14 <_dtoa_r+0x64>
 8004f12:	e21f      	b.n	8005354 <_dtoa_r+0x4a4>
 8004f14:	4f15      	ldr	r7, [pc, #84]	; (8004f6c <_dtoa_r+0xbc>)
 8004f16:	6037      	str	r7, [r6, #0]
 8004f18:	3f01      	subs	r7, #1
 8004f1a:	1c38      	adds	r0, r7, #0
 8004f1c:	b01d      	add	sp, #116	; 0x74
 8004f1e:	bc3c      	pop	{r2, r3, r4, r5}
 8004f20:	4690      	mov	r8, r2
 8004f22:	4699      	mov	r9, r3
 8004f24:	46a2      	mov	sl, r4
 8004f26:	46ab      	mov	fp, r5
 8004f28:	bcf0      	pop	{r4, r5, r6, r7}
 8004f2a:	bc02      	pop	{r1}
 8004f2c:	4708      	bx	r1
 8004f2e:	4b10      	ldr	r3, [pc, #64]	; (8004f70 <_dtoa_r+0xc0>)
 8004f30:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 8004f32:	9802      	ldr	r0, [sp, #8]
 8004f34:	6033      	str	r3, [r6, #0]
 8004f36:	2800      	cmp	r0, #0
 8004f38:	d100      	bne.n	8004f3c <_dtoa_r+0x8c>
 8004f3a:	e1ba      	b.n	80052b2 <_dtoa_r+0x402>
 8004f3c:	4f0d      	ldr	r7, [pc, #52]	; (8004f74 <_dtoa_r+0xc4>)
 8004f3e:	9e2a      	ldr	r6, [sp, #168]	; 0xa8
 8004f40:	2e00      	cmp	r6, #0
 8004f42:	d0ea      	beq.n	8004f1a <_dtoa_r+0x6a>
 8004f44:	78fa      	ldrb	r2, [r7, #3]
 8004f46:	1cfb      	adds	r3, r7, #3
 8004f48:	2a00      	cmp	r2, #0
 8004f4a:	d000      	beq.n	8004f4e <_dtoa_r+0x9e>
 8004f4c:	3305      	adds	r3, #5
 8004f4e:	9e2a      	ldr	r6, [sp, #168]	; 0xa8
 8004f50:	6033      	str	r3, [r6, #0]
 8004f52:	e7e2      	b.n	8004f1a <_dtoa_r+0x6a>
 8004f54:	2301      	movs	r3, #1
 8004f56:	6033      	str	r3, [r6, #0]
 8004f58:	006b      	lsls	r3, r5, #1
 8004f5a:	085d      	lsrs	r5, r3, #1
 8004f5c:	9503      	str	r5, [sp, #12]
 8004f5e:	e7c3      	b.n	8004ee8 <_dtoa_r+0x38>
	...
 8004f68:	7ff00000 	.word	0x7ff00000
 8004f6c:	0800ee6d 	.word	0x0800ee6d
 8004f70:	0000270f 	.word	0x0000270f
 8004f74:	0800ee80 	.word	0x0800ee80
 8004f78:	ab1b      	add	r3, sp, #108	; 0x6c
 8004f7a:	9300      	str	r3, [sp, #0]
 8004f7c:	ab1a      	add	r3, sp, #104	; 0x68
 8004f7e:	9301      	str	r3, [sp, #4]
 8004f80:	1c32      	adds	r2, r6, #0
 8004f82:	1c3b      	adds	r3, r7, #0
 8004f84:	1c20      	adds	r0, r4, #0
 8004f86:	f002 fd8f 	bl	8007aa8 <__d2b>
 8004f8a:	006b      	lsls	r3, r5, #1
 8004f8c:	900b      	str	r0, [sp, #44]	; 0x2c
 8004f8e:	0d5a      	lsrs	r2, r3, #21
 8004f90:	d100      	bne.n	8004f94 <_dtoa_r+0xe4>
 8004f92:	e1c5      	b.n	8005320 <_dtoa_r+0x470>
 8004f94:	4ddc      	ldr	r5, [pc, #880]	; (8005308 <_dtoa_r+0x458>)
 8004f96:	1c30      	adds	r0, r6, #0
 8004f98:	033b      	lsls	r3, r7, #12
 8004f9a:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8004f9c:	0b1b      	lsrs	r3, r3, #12
 8004f9e:	1c29      	adds	r1, r5, #0
 8004fa0:	4319      	orrs	r1, r3
 8004fa2:	46b0      	mov	r8, r6
 8004fa4:	4bd9      	ldr	r3, [pc, #868]	; (800530c <_dtoa_r+0x45c>)
 8004fa6:	2600      	movs	r6, #0
 8004fa8:	9616      	str	r6, [sp, #88]	; 0x58
 8004faa:	18d5      	adds	r5, r2, r3
 8004fac:	4bc5      	ldr	r3, [pc, #788]	; (80052c4 <_dtoa_r+0x414>)
 8004fae:	4ac4      	ldr	r2, [pc, #784]	; (80052c0 <_dtoa_r+0x410>)
 8004fb0:	f003 efa8 	blx	8008f04 <__aeabi_dsub>
 8004fb4:	4ac4      	ldr	r2, [pc, #784]	; (80052c8 <_dtoa_r+0x418>)
 8004fb6:	4bc5      	ldr	r3, [pc, #788]	; (80052cc <_dtoa_r+0x41c>)
 8004fb8:	f004 e9ae 	blx	8009318 <__aeabi_dmul>
 8004fbc:	4ac4      	ldr	r2, [pc, #784]	; (80052d0 <_dtoa_r+0x420>)
 8004fbe:	4bc5      	ldr	r3, [pc, #788]	; (80052d4 <_dtoa_r+0x424>)
 8004fc0:	f003 efa2 	blx	8008f08 <__adddf3>
 8004fc4:	1c06      	adds	r6, r0, #0
 8004fc6:	1c28      	adds	r0, r5, #0
 8004fc8:	1c0f      	adds	r7, r1, #0
 8004fca:	f004 e938 	blx	800923c <__aeabi_i2d>
 8004fce:	4ac2      	ldr	r2, [pc, #776]	; (80052d8 <_dtoa_r+0x428>)
 8004fd0:	4bc2      	ldr	r3, [pc, #776]	; (80052dc <_dtoa_r+0x42c>)
 8004fd2:	f004 e9a2 	blx	8009318 <__aeabi_dmul>
 8004fd6:	1c02      	adds	r2, r0, #0
 8004fd8:	1c0b      	adds	r3, r1, #0
 8004fda:	1c30      	adds	r0, r6, #0
 8004fdc:	1c39      	adds	r1, r7, #0
 8004fde:	f003 ef94 	blx	8008f08 <__adddf3>
 8004fe2:	1c06      	adds	r6, r0, #0
 8004fe4:	1c0f      	adds	r7, r1, #0
 8004fe6:	f004 ec88 	blx	80098f8 <__aeabi_d2iz>
 8004fea:	1c39      	adds	r1, r7, #0
 8004fec:	9007      	str	r0, [sp, #28]
 8004fee:	4abc      	ldr	r2, [pc, #752]	; (80052e0 <_dtoa_r+0x430>)
 8004ff0:	4bbc      	ldr	r3, [pc, #752]	; (80052e4 <_dtoa_r+0x434>)
 8004ff2:	1c30      	adds	r0, r6, #0
 8004ff4:	f004 ec50 	blx	8009898 <__aeabi_dcmplt>
 8004ff8:	2800      	cmp	r0, #0
 8004ffa:	d000      	beq.n	8004ffe <_dtoa_r+0x14e>
 8004ffc:	e359      	b.n	80056b2 <_dtoa_r+0x802>
 8004ffe:	2601      	movs	r6, #1
 8005000:	960e      	str	r6, [sp, #56]	; 0x38
 8005002:	9e07      	ldr	r6, [sp, #28]
 8005004:	2e16      	cmp	r6, #22
 8005006:	d810      	bhi.n	800502a <_dtoa_r+0x17a>
 8005008:	4ac1      	ldr	r2, [pc, #772]	; (8005310 <_dtoa_r+0x460>)
 800500a:	00f3      	lsls	r3, r6, #3
 800500c:	18d3      	adds	r3, r2, r3
 800500e:	6818      	ldr	r0, [r3, #0]
 8005010:	6859      	ldr	r1, [r3, #4]
 8005012:	9a02      	ldr	r2, [sp, #8]
 8005014:	9b03      	ldr	r3, [sp, #12]
 8005016:	f004 ec64 	blx	80098e0 <__aeabi_dcmpgt>
 800501a:	2800      	cmp	r0, #0
 800501c:	d100      	bne.n	8005020 <_dtoa_r+0x170>
 800501e:	e35b      	b.n	80056d8 <_dtoa_r+0x828>
 8005020:	9e07      	ldr	r6, [sp, #28]
 8005022:	3e01      	subs	r6, #1
 8005024:	9607      	str	r6, [sp, #28]
 8005026:	2600      	movs	r6, #0
 8005028:	960e      	str	r6, [sp, #56]	; 0x38
 800502a:	4640      	mov	r0, r8
 800502c:	1b45      	subs	r5, r0, r5
 800502e:	3d01      	subs	r5, #1
 8005030:	d500      	bpl.n	8005034 <_dtoa_r+0x184>
 8005032:	e339      	b.n	80056a8 <_dtoa_r+0x7f8>
 8005034:	2600      	movs	r6, #0
 8005036:	960a      	str	r6, [sp, #40]	; 0x28
 8005038:	46aa      	mov	sl, r5
 800503a:	9e07      	ldr	r6, [sp, #28]
 800503c:	2e00      	cmp	r6, #0
 800503e:	da00      	bge.n	8005042 <_dtoa_r+0x192>
 8005040:	e313      	b.n	800566a <_dtoa_r+0x7ba>
 8005042:	44b2      	add	sl, r6
 8005044:	9611      	str	r6, [sp, #68]	; 0x44
 8005046:	2600      	movs	r6, #0
 8005048:	960f      	str	r6, [sp, #60]	; 0x3c
 800504a:	9826      	ldr	r0, [sp, #152]	; 0x98
 800504c:	2809      	cmp	r0, #9
 800504e:	d900      	bls.n	8005052 <_dtoa_r+0x1a2>
 8005050:	e182      	b.n	8005358 <_dtoa_r+0x4a8>
 8005052:	2301      	movs	r3, #1
 8005054:	2805      	cmp	r0, #5
 8005056:	dd02      	ble.n	800505e <_dtoa_r+0x1ae>
 8005058:	3804      	subs	r0, #4
 800505a:	9026      	str	r0, [sp, #152]	; 0x98
 800505c:	2300      	movs	r3, #0
 800505e:	9926      	ldr	r1, [sp, #152]	; 0x98
 8005060:	2903      	cmp	r1, #3
 8005062:	d101      	bne.n	8005068 <_dtoa_r+0x1b8>
 8005064:	f000 fd82 	bl	8005b6c <_dtoa_r+0xcbc>
 8005068:	dd00      	ble.n	800506c <_dtoa_r+0x1bc>
 800506a:	e353      	b.n	8005714 <_dtoa_r+0x864>
 800506c:	2902      	cmp	r1, #2
 800506e:	d000      	beq.n	8005072 <_dtoa_r+0x1c2>
 8005070:	e174      	b.n	800535c <_dtoa_r+0x4ac>
 8005072:	2600      	movs	r6, #0
 8005074:	9612      	str	r6, [sp, #72]	; 0x48
 8005076:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8005078:	2800      	cmp	r0, #0
 800507a:	dc01      	bgt.n	8005080 <_dtoa_r+0x1d0>
 800507c:	f000 fd84 	bl	8005b88 <_dtoa_r+0xcd8>
 8005080:	2500      	movs	r5, #0
 8005082:	220e      	movs	r2, #14
 8005084:	4282      	cmp	r2, r0
 8005086:	416d      	adcs	r5, r5
 8005088:	9010      	str	r0, [sp, #64]	; 0x40
 800508a:	9009      	str	r0, [sp, #36]	; 0x24
 800508c:	1c06      	adds	r6, r0, #0
 800508e:	401d      	ands	r5, r3
 8005090:	2300      	movs	r3, #0
 8005092:	6463      	str	r3, [r4, #68]	; 0x44
 8005094:	2100      	movs	r1, #0
 8005096:	2e17      	cmp	r6, #23
 8005098:	d909      	bls.n	80050ae <_dtoa_r+0x1fe>
 800509a:	2201      	movs	r2, #1
 800509c:	2304      	movs	r3, #4
 800509e:	005b      	lsls	r3, r3, #1
 80050a0:	1c18      	adds	r0, r3, #0
 80050a2:	3014      	adds	r0, #20
 80050a4:	1c11      	adds	r1, r2, #0
 80050a6:	3201      	adds	r2, #1
 80050a8:	42b0      	cmp	r0, r6
 80050aa:	d9f8      	bls.n	800509e <_dtoa_r+0x1ee>
 80050ac:	6461      	str	r1, [r4, #68]	; 0x44
 80050ae:	1c20      	adds	r0, r4, #0
 80050b0:	f002 f94a 	bl	8007348 <_Balloc>
 80050b4:	4683      	mov	fp, r0
 80050b6:	6420      	str	r0, [r4, #64]	; 0x40
 80050b8:	2d00      	cmp	r5, #0
 80050ba:	d100      	bne.n	80050be <_dtoa_r+0x20e>
 80050bc:	e15e      	b.n	800537c <_dtoa_r+0x4cc>
 80050be:	9e07      	ldr	r6, [sp, #28]
 80050c0:	2e00      	cmp	r6, #0
 80050c2:	dc00      	bgt.n	80050c6 <_dtoa_r+0x216>
 80050c4:	e3ca      	b.n	800585c <_dtoa_r+0x9ac>
 80050c6:	1c32      	adds	r2, r6, #0
 80050c8:	230f      	movs	r3, #15
 80050ca:	401a      	ands	r2, r3
 80050cc:	4990      	ldr	r1, [pc, #576]	; (8005310 <_dtoa_r+0x460>)
 80050ce:	9807      	ldr	r0, [sp, #28]
 80050d0:	00d2      	lsls	r2, r2, #3
 80050d2:	188a      	adds	r2, r1, r2
 80050d4:	1105      	asrs	r5, r0, #4
 80050d6:	6816      	ldr	r6, [r2, #0]
 80050d8:	6857      	ldr	r7, [r2, #4]
 80050da:	06e9      	lsls	r1, r5, #27
 80050dc:	d400      	bmi.n	80050e0 <_dtoa_r+0x230>
 80050de:	e3ae      	b.n	800583e <_dtoa_r+0x98e>
 80050e0:	401d      	ands	r5, r3
 80050e2:	4b8c      	ldr	r3, [pc, #560]	; (8005314 <_dtoa_r+0x464>)
 80050e4:	9802      	ldr	r0, [sp, #8]
 80050e6:	9903      	ldr	r1, [sp, #12]
 80050e8:	6a1a      	ldr	r2, [r3, #32]
 80050ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ec:	f004 ea5c 	blx	80095a8 <__aeabi_ddiv>
 80050f0:	900c      	str	r0, [sp, #48]	; 0x30
 80050f2:	910d      	str	r1, [sp, #52]	; 0x34
 80050f4:	2203      	movs	r2, #3
 80050f6:	4691      	mov	r9, r2
 80050f8:	2d00      	cmp	r5, #0
 80050fa:	d013      	beq.n	8005124 <_dtoa_r+0x274>
 80050fc:	4a85      	ldr	r2, [pc, #532]	; (8005314 <_dtoa_r+0x464>)
 80050fe:	1c30      	adds	r0, r6, #0
 8005100:	1c39      	adds	r1, r7, #0
 8005102:	1c16      	adds	r6, r2, #0
 8005104:	464f      	mov	r7, r9
 8005106:	2301      	movs	r3, #1
 8005108:	422b      	tst	r3, r5
 800510a:	d004      	beq.n	8005116 <_dtoa_r+0x266>
 800510c:	6832      	ldr	r2, [r6, #0]
 800510e:	6873      	ldr	r3, [r6, #4]
 8005110:	3701      	adds	r7, #1
 8005112:	f004 e902 	blx	8009318 <__aeabi_dmul>
 8005116:	106d      	asrs	r5, r5, #1
 8005118:	3608      	adds	r6, #8
 800511a:	2d00      	cmp	r5, #0
 800511c:	d1f3      	bne.n	8005106 <_dtoa_r+0x256>
 800511e:	46b9      	mov	r9, r7
 8005120:	1c06      	adds	r6, r0, #0
 8005122:	1c0f      	adds	r7, r1, #0
 8005124:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005126:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005128:	1c32      	adds	r2, r6, #0
 800512a:	1c3b      	adds	r3, r7, #0
 800512c:	f004 ea3c 	blx	80095a8 <__aeabi_ddiv>
 8005130:	900c      	str	r0, [sp, #48]	; 0x30
 8005132:	910d      	str	r1, [sp, #52]	; 0x34
 8005134:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8005136:	2e00      	cmp	r6, #0
 8005138:	d009      	beq.n	800514e <_dtoa_r+0x29e>
 800513a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800513c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800513e:	4a6a      	ldr	r2, [pc, #424]	; (80052e8 <_dtoa_r+0x438>)
 8005140:	4b6a      	ldr	r3, [pc, #424]	; (80052ec <_dtoa_r+0x43c>)
 8005142:	f004 ebaa 	blx	8009898 <__aeabi_dcmplt>
 8005146:	2800      	cmp	r0, #0
 8005148:	d001      	beq.n	800514e <_dtoa_r+0x29e>
 800514a:	f000 fd40 	bl	8005bce <_dtoa_r+0xd1e>
 800514e:	4648      	mov	r0, r9
 8005150:	f004 e874 	blx	800923c <__aeabi_i2d>
 8005154:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005156:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005158:	f004 e8de 	blx	8009318 <__aeabi_dmul>
 800515c:	4a64      	ldr	r2, [pc, #400]	; (80052f0 <_dtoa_r+0x440>)
 800515e:	4b65      	ldr	r3, [pc, #404]	; (80052f4 <_dtoa_r+0x444>)
 8005160:	f003 eed2 	blx	8008f08 <__adddf3>
 8005164:	4a6c      	ldr	r2, [pc, #432]	; (8005318 <_dtoa_r+0x468>)
 8005166:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005168:	1c06      	adds	r6, r0, #0
 800516a:	188f      	adds	r7, r1, r2
 800516c:	2b00      	cmp	r3, #0
 800516e:	d100      	bne.n	8005172 <_dtoa_r+0x2c2>
 8005170:	e2f6      	b.n	8005760 <_dtoa_r+0x8b0>
 8005172:	9807      	ldr	r0, [sp, #28]
 8005174:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005176:	9017      	str	r0, [sp, #92]	; 0x5c
 8005178:	9113      	str	r1, [sp, #76]	; 0x4c
 800517a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800517c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800517e:	3b01      	subs	r3, #1
 8005180:	2a00      	cmp	r2, #0
 8005182:	d100      	bne.n	8005186 <_dtoa_r+0x2d6>
 8005184:	e39c      	b.n	80058c0 <_dtoa_r+0xa10>
 8005186:	4a62      	ldr	r2, [pc, #392]	; (8005310 <_dtoa_r+0x460>)
 8005188:	00db      	lsls	r3, r3, #3
 800518a:	18d3      	adds	r3, r2, r3
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	4859      	ldr	r0, [pc, #356]	; (80052f8 <_dtoa_r+0x448>)
 8005192:	495a      	ldr	r1, [pc, #360]	; (80052fc <_dtoa_r+0x44c>)
 8005194:	f004 ea08 	blx	80095a8 <__aeabi_ddiv>
 8005198:	1c32      	adds	r2, r6, #0
 800519a:	1c3b      	adds	r3, r7, #0
 800519c:	f003 eeb2 	blx	8008f04 <__aeabi_dsub>
 80051a0:	9014      	str	r0, [sp, #80]	; 0x50
 80051a2:	9115      	str	r1, [sp, #84]	; 0x54
 80051a4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80051a6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80051a8:	f004 eba6 	blx	80098f8 <__aeabi_d2iz>
 80051ac:	1c05      	adds	r5, r0, #0
 80051ae:	f004 e846 	blx	800923c <__aeabi_i2d>
 80051b2:	1c02      	adds	r2, r0, #0
 80051b4:	1c0b      	adds	r3, r1, #0
 80051b6:	980c      	ldr	r0, [sp, #48]	; 0x30
 80051b8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80051ba:	f003 eea4 	blx	8008f04 <__aeabi_dsub>
 80051be:	3530      	adds	r5, #48	; 0x30
 80051c0:	062d      	lsls	r5, r5, #24
 80051c2:	0e2d      	lsrs	r5, r5, #24
 80051c4:	1c06      	adds	r6, r0, #0
 80051c6:	1c0f      	adds	r7, r1, #0
 80051c8:	465b      	mov	r3, fp
 80051ca:	701d      	strb	r5, [r3, #0]
 80051cc:	46a8      	mov	r8, r5
 80051ce:	9814      	ldr	r0, [sp, #80]	; 0x50
 80051d0:	9915      	ldr	r1, [sp, #84]	; 0x54
 80051d2:	465d      	mov	r5, fp
 80051d4:	1c32      	adds	r2, r6, #0
 80051d6:	1c3b      	adds	r3, r7, #0
 80051d8:	3501      	adds	r5, #1
 80051da:	f004 eb82 	blx	80098e0 <__aeabi_dcmpgt>
 80051de:	2800      	cmp	r0, #0
 80051e0:	d001      	beq.n	80051e6 <_dtoa_r+0x336>
 80051e2:	f000 fe0e 	bl	8005e02 <_dtoa_r+0xf52>
 80051e6:	1c32      	adds	r2, r6, #0
 80051e8:	1c3b      	adds	r3, r7, #0
 80051ea:	483f      	ldr	r0, [pc, #252]	; (80052e8 <_dtoa_r+0x438>)
 80051ec:	493f      	ldr	r1, [pc, #252]	; (80052ec <_dtoa_r+0x43c>)
 80051ee:	f003 ee8a 	blx	8008f04 <__aeabi_dsub>
 80051f2:	1c02      	adds	r2, r0, #0
 80051f4:	1c0b      	adds	r3, r1, #0
 80051f6:	9814      	ldr	r0, [sp, #80]	; 0x50
 80051f8:	9915      	ldr	r1, [sp, #84]	; 0x54
 80051fa:	f004 eb72 	blx	80098e0 <__aeabi_dcmpgt>
 80051fe:	2800      	cmp	r0, #0
 8005200:	d001      	beq.n	8005206 <_dtoa_r+0x356>
 8005202:	f000 fd62 	bl	8005cca <_dtoa_r+0xe1a>
 8005206:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8005208:	2901      	cmp	r1, #1
 800520a:	dc00      	bgt.n	800520e <_dtoa_r+0x35e>
 800520c:	e0b6      	b.n	800537c <_dtoa_r+0x4cc>
 800520e:	4650      	mov	r0, sl
 8005210:	465a      	mov	r2, fp
 8005212:	4689      	mov	r9, r1
 8005214:	44d9      	add	r9, fp
 8005216:	46aa      	mov	sl, r5
 8005218:	46a3      	mov	fp, r4
 800521a:	9013      	str	r0, [sp, #76]	; 0x4c
 800521c:	920c      	str	r2, [sp, #48]	; 0x30
 800521e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8005220:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8005222:	e011      	b.n	8005248 <_dtoa_r+0x398>
 8005224:	1c32      	adds	r2, r6, #0
 8005226:	1c3b      	adds	r3, r7, #0
 8005228:	482f      	ldr	r0, [pc, #188]	; (80052e8 <_dtoa_r+0x438>)
 800522a:	4930      	ldr	r1, [pc, #192]	; (80052ec <_dtoa_r+0x43c>)
 800522c:	f003 ee6a 	blx	8008f04 <__aeabi_dsub>
 8005230:	1c22      	adds	r2, r4, #0
 8005232:	1c2b      	adds	r3, r5, #0
 8005234:	f004 eb30 	blx	8009898 <__aeabi_dcmplt>
 8005238:	2800      	cmp	r0, #0
 800523a:	d001      	beq.n	8005240 <_dtoa_r+0x390>
 800523c:	f000 fd41 	bl	8005cc2 <_dtoa_r+0xe12>
 8005240:	45ca      	cmp	sl, r9
 8005242:	d101      	bne.n	8005248 <_dtoa_r+0x398>
 8005244:	f000 fd46 	bl	8005cd4 <_dtoa_r+0xe24>
 8005248:	1c20      	adds	r0, r4, #0
 800524a:	1c29      	adds	r1, r5, #0
 800524c:	4a2c      	ldr	r2, [pc, #176]	; (8005300 <_dtoa_r+0x450>)
 800524e:	4b2d      	ldr	r3, [pc, #180]	; (8005304 <_dtoa_r+0x454>)
 8005250:	f004 e862 	blx	8009318 <__aeabi_dmul>
 8005254:	4a2a      	ldr	r2, [pc, #168]	; (8005300 <_dtoa_r+0x450>)
 8005256:	4b2b      	ldr	r3, [pc, #172]	; (8005304 <_dtoa_r+0x454>)
 8005258:	1c04      	adds	r4, r0, #0
 800525a:	1c0d      	adds	r5, r1, #0
 800525c:	1c30      	adds	r0, r6, #0
 800525e:	1c39      	adds	r1, r7, #0
 8005260:	f004 e85a 	blx	8009318 <__aeabi_dmul>
 8005264:	1c0f      	adds	r7, r1, #0
 8005266:	1c06      	adds	r6, r0, #0
 8005268:	f004 eb46 	blx	80098f8 <__aeabi_d2iz>
 800526c:	4680      	mov	r8, r0
 800526e:	f003 efe6 	blx	800923c <__aeabi_i2d>
 8005272:	1c02      	adds	r2, r0, #0
 8005274:	1c0b      	adds	r3, r1, #0
 8005276:	1c30      	adds	r0, r6, #0
 8005278:	1c39      	adds	r1, r7, #0
 800527a:	f003 ee44 	blx	8008f04 <__aeabi_dsub>
 800527e:	4643      	mov	r3, r8
 8005280:	3330      	adds	r3, #48	; 0x30
 8005282:	061b      	lsls	r3, r3, #24
 8005284:	0e1b      	lsrs	r3, r3, #24
 8005286:	1c06      	adds	r6, r0, #0
 8005288:	1c0f      	adds	r7, r1, #0
 800528a:	4650      	mov	r0, sl
 800528c:	2101      	movs	r1, #1
 800528e:	7003      	strb	r3, [r0, #0]
 8005290:	4698      	mov	r8, r3
 8005292:	448a      	add	sl, r1
 8005294:	1c30      	adds	r0, r6, #0
 8005296:	1c39      	adds	r1, r7, #0
 8005298:	1c22      	adds	r2, r4, #0
 800529a:	1c2b      	adds	r3, r5, #0
 800529c:	f004 eafc 	blx	8009898 <__aeabi_dcmplt>
 80052a0:	2800      	cmp	r0, #0
 80052a2:	d0bf      	beq.n	8005224 <_dtoa_r+0x374>
 80052a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80052a6:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80052a8:	465c      	mov	r4, fp
 80052aa:	1c17      	adds	r7, r2, #0
 80052ac:	46d3      	mov	fp, sl
 80052ae:	9607      	str	r6, [sp, #28]
 80052b0:	e1ca      	b.n	8005648 <_dtoa_r+0x798>
 80052b2:	032b      	lsls	r3, r5, #12
 80052b4:	d000      	beq.n	80052b8 <_dtoa_r+0x408>
 80052b6:	e641      	b.n	8004f3c <_dtoa_r+0x8c>
 80052b8:	4f18      	ldr	r7, [pc, #96]	; (800531c <_dtoa_r+0x46c>)
 80052ba:	e640      	b.n	8004f3e <_dtoa_r+0x8e>
 80052bc:	46c0      	nop			; (mov r8, r8)
 80052be:	46c0      	nop			; (mov r8, r8)
 80052c0:	00000000 	.word	0x00000000
 80052c4:	3ff80000 	.word	0x3ff80000
 80052c8:	636f4361 	.word	0x636f4361
 80052cc:	3fd287a7 	.word	0x3fd287a7
 80052d0:	8b60c8b3 	.word	0x8b60c8b3
 80052d4:	3fc68a28 	.word	0x3fc68a28
 80052d8:	509f79fb 	.word	0x509f79fb
 80052dc:	3fd34413 	.word	0x3fd34413
	...
 80052ec:	3ff00000 	.word	0x3ff00000
 80052f0:	00000000 	.word	0x00000000
 80052f4:	401c0000 	.word	0x401c0000
 80052f8:	00000000 	.word	0x00000000
 80052fc:	3fe00000 	.word	0x3fe00000
 8005300:	00000000 	.word	0x00000000
 8005304:	40240000 	.word	0x40240000
 8005308:	3ff00000 	.word	0x3ff00000
 800530c:	fffffc01 	.word	0xfffffc01
 8005310:	0800eeb0 	.word	0x0800eeb0
 8005314:	0800efa0 	.word	0x0800efa0
 8005318:	fcc00000 	.word	0xfcc00000
 800531c:	0800ee74 	.word	0x0800ee74
 8005320:	981a      	ldr	r0, [sp, #104]	; 0x68
 8005322:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8005324:	4680      	mov	r8, r0
 8005326:	1c0e      	adds	r6, r1, #0
 8005328:	4bd9      	ldr	r3, [pc, #868]	; (8005690 <_dtoa_r+0x7e0>)
 800532a:	4446      	add	r6, r8
 800532c:	429e      	cmp	r6, r3
 800532e:	da00      	bge.n	8005332 <_dtoa_r+0x482>
 8005330:	e1cc      	b.n	80056cc <_dtoa_r+0x81c>
 8005332:	48d8      	ldr	r0, [pc, #864]	; (8005694 <_dtoa_r+0x7e4>)
 8005334:	4ad8      	ldr	r2, [pc, #864]	; (8005698 <_dtoa_r+0x7e8>)
 8005336:	1b80      	subs	r0, r0, r6
 8005338:	9902      	ldr	r1, [sp, #8]
 800533a:	4085      	lsls	r5, r0
 800533c:	18b3      	adds	r3, r6, r2
 800533e:	1c28      	adds	r0, r5, #0
 8005340:	40d9      	lsrs	r1, r3
 8005342:	4308      	orrs	r0, r1
 8005344:	f003 ef68 	blx	8009218 <__aeabi_ui2d>
 8005348:	4bd4      	ldr	r3, [pc, #848]	; (800569c <_dtoa_r+0x7ec>)
 800534a:	1e75      	subs	r5, r6, #1
 800534c:	2601      	movs	r6, #1
 800534e:	18c9      	adds	r1, r1, r3
 8005350:	9616      	str	r6, [sp, #88]	; 0x58
 8005352:	e62b      	b.n	8004fac <_dtoa_r+0xfc>
 8005354:	4fd2      	ldr	r7, [pc, #840]	; (80056a0 <_dtoa_r+0x7f0>)
 8005356:	e5e0      	b.n	8004f1a <_dtoa_r+0x6a>
 8005358:	2000      	movs	r0, #0
 800535a:	9026      	str	r0, [sp, #152]	; 0x98
 800535c:	2300      	movs	r3, #0
 800535e:	6463      	str	r3, [r4, #68]	; 0x44
 8005360:	1c20      	adds	r0, r4, #0
 8005362:	2100      	movs	r1, #0
 8005364:	f001 fff0 	bl	8007348 <_Balloc>
 8005368:	2301      	movs	r3, #1
 800536a:	425b      	negs	r3, r3
 800536c:	4683      	mov	fp, r0
 800536e:	6420      	str	r0, [r4, #64]	; 0x40
 8005370:	2601      	movs	r6, #1
 8005372:	2000      	movs	r0, #0
 8005374:	9310      	str	r3, [sp, #64]	; 0x40
 8005376:	9309      	str	r3, [sp, #36]	; 0x24
 8005378:	9612      	str	r6, [sp, #72]	; 0x48
 800537a:	9027      	str	r0, [sp, #156]	; 0x9c
 800537c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800537e:	2b00      	cmp	r3, #0
 8005380:	da00      	bge.n	8005384 <_dtoa_r+0x4d4>
 8005382:	e0b5      	b.n	80054f0 <_dtoa_r+0x640>
 8005384:	9e07      	ldr	r6, [sp, #28]
 8005386:	2e0e      	cmp	r6, #14
 8005388:	dd00      	ble.n	800538c <_dtoa_r+0x4dc>
 800538a:	e0b1      	b.n	80054f0 <_dtoa_r+0x640>
 800538c:	4ac5      	ldr	r2, [pc, #788]	; (80056a4 <_dtoa_r+0x7f4>)
 800538e:	00f3      	lsls	r3, r6, #3
 8005390:	18d3      	adds	r3, r2, r3
 8005392:	6818      	ldr	r0, [r3, #0]
 8005394:	6859      	ldr	r1, [r3, #4]
 8005396:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8005398:	9004      	str	r0, [sp, #16]
 800539a:	9105      	str	r1, [sp, #20]
 800539c:	2e00      	cmp	r6, #0
 800539e:	dc03      	bgt.n	80053a8 <_dtoa_r+0x4f8>
 80053a0:	9827      	ldr	r0, [sp, #156]	; 0x9c
 80053a2:	2800      	cmp	r0, #0
 80053a4:	da00      	bge.n	80053a8 <_dtoa_r+0x4f8>
 80053a6:	e310      	b.n	80059ca <_dtoa_r+0xb1a>
 80053a8:	9e02      	ldr	r6, [sp, #8]
 80053aa:	9f03      	ldr	r7, [sp, #12]
 80053ac:	9a04      	ldr	r2, [sp, #16]
 80053ae:	9b05      	ldr	r3, [sp, #20]
 80053b0:	1c30      	adds	r0, r6, #0
 80053b2:	1c39      	adds	r1, r7, #0
 80053b4:	f004 e8f8 	blx	80095a8 <__aeabi_ddiv>
 80053b8:	f004 ea9e 	blx	80098f8 <__aeabi_d2iz>
 80053bc:	4680      	mov	r8, r0
 80053be:	f003 ef3e 	blx	800923c <__aeabi_i2d>
 80053c2:	9a04      	ldr	r2, [sp, #16]
 80053c4:	9b05      	ldr	r3, [sp, #20]
 80053c6:	f003 efa8 	blx	8009318 <__aeabi_dmul>
 80053ca:	1c02      	adds	r2, r0, #0
 80053cc:	1c0b      	adds	r3, r1, #0
 80053ce:	1c30      	adds	r0, r6, #0
 80053d0:	1c39      	adds	r1, r7, #0
 80053d2:	f003 ed98 	blx	8008f04 <__aeabi_dsub>
 80053d6:	4643      	mov	r3, r8
 80053d8:	3330      	adds	r3, #48	; 0x30
 80053da:	465a      	mov	r2, fp
 80053dc:	7013      	strb	r3, [r2, #0]
 80053de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053e0:	465d      	mov	r5, fp
 80053e2:	1c06      	adds	r6, r0, #0
 80053e4:	1c0f      	adds	r7, r1, #0
 80053e6:	3501      	adds	r5, #1
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d048      	beq.n	800547e <_dtoa_r+0x5ce>
 80053ec:	4ba5      	ldr	r3, [pc, #660]	; (8005684 <_dtoa_r+0x7d4>)
 80053ee:	4aa4      	ldr	r2, [pc, #656]	; (8005680 <_dtoa_r+0x7d0>)
 80053f0:	f003 ef92 	blx	8009318 <__aeabi_dmul>
 80053f4:	4aa4      	ldr	r2, [pc, #656]	; (8005688 <_dtoa_r+0x7d8>)
 80053f6:	4ba5      	ldr	r3, [pc, #660]	; (800568c <_dtoa_r+0x7dc>)
 80053f8:	1c06      	adds	r6, r0, #0
 80053fa:	1c0f      	adds	r7, r1, #0
 80053fc:	f004 ea40 	blx	8009880 <__aeabi_dcmpeq>
 8005400:	2800      	cmp	r0, #0
 8005402:	d000      	beq.n	8005406 <_dtoa_r+0x556>
 8005404:	e3d0      	b.n	8005ba8 <_dtoa_r+0xcf8>
 8005406:	46a9      	mov	r9, r5
 8005408:	46a2      	mov	sl, r4
 800540a:	9c04      	ldr	r4, [sp, #16]
 800540c:	9d05      	ldr	r5, [sp, #20]
 800540e:	e00e      	b.n	800542e <_dtoa_r+0x57e>
 8005410:	1c10      	adds	r0, r2, #0
 8005412:	1c19      	adds	r1, r3, #0
 8005414:	4b9b      	ldr	r3, [pc, #620]	; (8005684 <_dtoa_r+0x7d4>)
 8005416:	4a9a      	ldr	r2, [pc, #616]	; (8005680 <_dtoa_r+0x7d0>)
 8005418:	f003 ef7e 	blx	8009318 <__aeabi_dmul>
 800541c:	4a9a      	ldr	r2, [pc, #616]	; (8005688 <_dtoa_r+0x7d8>)
 800541e:	4b9b      	ldr	r3, [pc, #620]	; (800568c <_dtoa_r+0x7dc>)
 8005420:	1c06      	adds	r6, r0, #0
 8005422:	1c0f      	adds	r7, r1, #0
 8005424:	f004 ea2c 	blx	8009880 <__aeabi_dcmpeq>
 8005428:	2800      	cmp	r0, #0
 800542a:	d000      	beq.n	800542e <_dtoa_r+0x57e>
 800542c:	e3ba      	b.n	8005ba4 <_dtoa_r+0xcf4>
 800542e:	1c22      	adds	r2, r4, #0
 8005430:	1c2b      	adds	r3, r5, #0
 8005432:	1c30      	adds	r0, r6, #0
 8005434:	1c39      	adds	r1, r7, #0
 8005436:	f004 e8b8 	blx	80095a8 <__aeabi_ddiv>
 800543a:	f004 ea5e 	blx	80098f8 <__aeabi_d2iz>
 800543e:	4680      	mov	r8, r0
 8005440:	f003 eefc 	blx	800923c <__aeabi_i2d>
 8005444:	1c22      	adds	r2, r4, #0
 8005446:	1c2b      	adds	r3, r5, #0
 8005448:	f003 ef66 	blx	8009318 <__aeabi_dmul>
 800544c:	1c02      	adds	r2, r0, #0
 800544e:	1c0b      	adds	r3, r1, #0
 8005450:	1c30      	adds	r0, r6, #0
 8005452:	1c39      	adds	r1, r7, #0
 8005454:	f003 ed56 	blx	8008f04 <__aeabi_dsub>
 8005458:	1c0b      	adds	r3, r1, #0
 800545a:	1c0f      	adds	r7, r1, #0
 800545c:	4641      	mov	r1, r8
 800545e:	3130      	adds	r1, #48	; 0x30
 8005460:	1c02      	adds	r2, r0, #0
 8005462:	1c06      	adds	r6, r0, #0
 8005464:	4648      	mov	r0, r9
 8005466:	7001      	strb	r1, [r0, #0]
 8005468:	2101      	movs	r1, #1
 800546a:	4489      	add	r9, r1
 800546c:	4648      	mov	r0, r9
 800546e:	4659      	mov	r1, fp
 8005470:	1a40      	subs	r0, r0, r1
 8005472:	4684      	mov	ip, r0
 8005474:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005476:	4560      	cmp	r0, ip
 8005478:	d1ca      	bne.n	8005410 <_dtoa_r+0x560>
 800547a:	464d      	mov	r5, r9
 800547c:	4654      	mov	r4, sl
 800547e:	1c32      	adds	r2, r6, #0
 8005480:	1c3b      	adds	r3, r7, #0
 8005482:	1c30      	adds	r0, r6, #0
 8005484:	1c39      	adds	r1, r7, #0
 8005486:	f003 ed40 	blx	8008f08 <__adddf3>
 800548a:	1c06      	adds	r6, r0, #0
 800548c:	1c0f      	adds	r7, r1, #0
 800548e:	1c32      	adds	r2, r6, #0
 8005490:	9804      	ldr	r0, [sp, #16]
 8005492:	9905      	ldr	r1, [sp, #20]
 8005494:	1c3b      	adds	r3, r7, #0
 8005496:	f004 ea00 	blx	8009898 <__aeabi_dcmplt>
 800549a:	2800      	cmp	r0, #0
 800549c:	d10c      	bne.n	80054b8 <_dtoa_r+0x608>
 800549e:	9804      	ldr	r0, [sp, #16]
 80054a0:	9905      	ldr	r1, [sp, #20]
 80054a2:	1c32      	adds	r2, r6, #0
 80054a4:	1c3b      	adds	r3, r7, #0
 80054a6:	f004 e9ec 	blx	8009880 <__aeabi_dcmpeq>
 80054aa:	2800      	cmp	r0, #0
 80054ac:	d100      	bne.n	80054b0 <_dtoa_r+0x600>
 80054ae:	e37b      	b.n	8005ba8 <_dtoa_r+0xcf8>
 80054b0:	4640      	mov	r0, r8
 80054b2:	07c0      	lsls	r0, r0, #31
 80054b4:	d400      	bmi.n	80054b8 <_dtoa_r+0x608>
 80054b6:	e377      	b.n	8005ba8 <_dtoa_r+0xcf8>
 80054b8:	1e6b      	subs	r3, r5, #1
 80054ba:	781b      	ldrb	r3, [r3, #0]
 80054bc:	9e07      	ldr	r6, [sp, #28]
 80054be:	465f      	mov	r7, fp
 80054c0:	9617      	str	r6, [sp, #92]	; 0x5c
 80054c2:	1c19      	adds	r1, r3, #0
 80054c4:	1c2a      	adds	r2, r5, #0
 80054c6:	e002      	b.n	80054ce <_dtoa_r+0x61e>
 80054c8:	3a02      	subs	r2, #2
 80054ca:	7811      	ldrb	r1, [r2, #0]
 80054cc:	1c1a      	adds	r2, r3, #0
 80054ce:	1e53      	subs	r3, r2, #1
 80054d0:	2939      	cmp	r1, #57	; 0x39
 80054d2:	d001      	beq.n	80054d8 <_dtoa_r+0x628>
 80054d4:	f000 fc05 	bl	8005ce2 <_dtoa_r+0xe32>
 80054d8:	429f      	cmp	r7, r3
 80054da:	d1f5      	bne.n	80054c8 <_dtoa_r+0x618>
 80054dc:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80054de:	2330      	movs	r3, #48	; 0x30
 80054e0:	703b      	strb	r3, [r7, #0]
 80054e2:	4693      	mov	fp, r2
 80054e4:	3601      	adds	r6, #1
 80054e6:	1c3b      	adds	r3, r7, #0
 80054e8:	2231      	movs	r2, #49	; 0x31
 80054ea:	9607      	str	r6, [sp, #28]
 80054ec:	701a      	strb	r2, [r3, #0]
 80054ee:	e0ab      	b.n	8005648 <_dtoa_r+0x798>
 80054f0:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80054f2:	2e00      	cmp	r6, #0
 80054f4:	d000      	beq.n	80054f8 <_dtoa_r+0x648>
 80054f6:	e0f2      	b.n	80056de <_dtoa_r+0x82e>
 80054f8:	2100      	movs	r1, #0
 80054fa:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80054fc:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80054fe:	4689      	mov	r9, r1
 8005500:	4652      	mov	r2, sl
 8005502:	2a00      	cmp	r2, #0
 8005504:	dd0c      	ble.n	8005520 <_dtoa_r+0x670>
 8005506:	2f00      	cmp	r7, #0
 8005508:	dd0a      	ble.n	8005520 <_dtoa_r+0x670>
 800550a:	4653      	mov	r3, sl
 800550c:	45ba      	cmp	sl, r7
 800550e:	dd00      	ble.n	8005512 <_dtoa_r+0x662>
 8005510:	1c3b      	adds	r3, r7, #0
 8005512:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005514:	4651      	mov	r1, sl
 8005516:	1ac0      	subs	r0, r0, r3
 8005518:	1ac9      	subs	r1, r1, r3
 800551a:	900a      	str	r0, [sp, #40]	; 0x28
 800551c:	1aff      	subs	r7, r7, r3
 800551e:	468a      	mov	sl, r1
 8005520:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005522:	2a00      	cmp	r2, #0
 8005524:	dd1a      	ble.n	800555c <_dtoa_r+0x6ac>
 8005526:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005528:	2b00      	cmp	r3, #0
 800552a:	d100      	bne.n	800552e <_dtoa_r+0x67e>
 800552c:	e333      	b.n	8005b96 <_dtoa_r+0xce6>
 800552e:	2e00      	cmp	r6, #0
 8005530:	dd10      	ble.n	8005554 <_dtoa_r+0x6a4>
 8005532:	4649      	mov	r1, r9
 8005534:	1c32      	adds	r2, r6, #0
 8005536:	1c20      	adds	r0, r4, #0
 8005538:	f002 f8ea 	bl	8007710 <__pow5mult>
 800553c:	4681      	mov	r9, r0
 800553e:	4649      	mov	r1, r9
 8005540:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005542:	1c20      	adds	r0, r4, #0
 8005544:	f002 f832 	bl	80075ac <__multiply>
 8005548:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800554a:	1c05      	adds	r5, r0, #0
 800554c:	1c20      	adds	r0, r4, #0
 800554e:	f001 ff25 	bl	800739c <_Bfree>
 8005552:	950b      	str	r5, [sp, #44]	; 0x2c
 8005554:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8005556:	1b82      	subs	r2, r0, r6
 8005558:	d000      	beq.n	800555c <_dtoa_r+0x6ac>
 800555a:	e361      	b.n	8005c20 <_dtoa_r+0xd70>
 800555c:	1c20      	adds	r0, r4, #0
 800555e:	2101      	movs	r1, #1
 8005560:	f002 f818 	bl	8007594 <__i2b>
 8005564:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8005566:	4680      	mov	r8, r0
 8005568:	2e00      	cmp	r6, #0
 800556a:	dd05      	ble.n	8005578 <_dtoa_r+0x6c8>
 800556c:	4641      	mov	r1, r8
 800556e:	1c20      	adds	r0, r4, #0
 8005570:	1c32      	adds	r2, r6, #0
 8005572:	f002 f8cd 	bl	8007710 <__pow5mult>
 8005576:	4680      	mov	r8, r0
 8005578:	9826      	ldr	r0, [sp, #152]	; 0x98
 800557a:	2500      	movs	r5, #0
 800557c:	2801      	cmp	r0, #1
 800557e:	dc00      	bgt.n	8005582 <_dtoa_r+0x6d2>
 8005580:	e252      	b.n	8005a28 <_dtoa_r+0xb78>
 8005582:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8005584:	2301      	movs	r3, #1
 8005586:	2e00      	cmp	r6, #0
 8005588:	d000      	beq.n	800558c <_dtoa_r+0x6dc>
 800558a:	e1f5      	b.n	8005978 <_dtoa_r+0xac8>
 800558c:	4453      	add	r3, sl
 800558e:	221f      	movs	r2, #31
 8005590:	4013      	ands	r3, r2
 8005592:	d100      	bne.n	8005596 <_dtoa_r+0x6e6>
 8005594:	e151      	b.n	800583a <_dtoa_r+0x98a>
 8005596:	2220      	movs	r2, #32
 8005598:	1ad2      	subs	r2, r2, r3
 800559a:	2a04      	cmp	r2, #4
 800559c:	dc01      	bgt.n	80055a2 <_dtoa_r+0x6f2>
 800559e:	f000 fc3a 	bl	8005e16 <_dtoa_r+0xf66>
 80055a2:	221c      	movs	r2, #28
 80055a4:	1ad3      	subs	r3, r2, r3
 80055a6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80055a8:	18f6      	adds	r6, r6, r3
 80055aa:	960a      	str	r6, [sp, #40]	; 0x28
 80055ac:	18ff      	adds	r7, r7, r3
 80055ae:	449a      	add	sl, r3
 80055b0:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80055b2:	2e00      	cmp	r6, #0
 80055b4:	dd05      	ble.n	80055c2 <_dtoa_r+0x712>
 80055b6:	1c20      	adds	r0, r4, #0
 80055b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80055ba:	1c32      	adds	r2, r6, #0
 80055bc:	f002 f900 	bl	80077c0 <__lshift>
 80055c0:	900b      	str	r0, [sp, #44]	; 0x2c
 80055c2:	4650      	mov	r0, sl
 80055c4:	2800      	cmp	r0, #0
 80055c6:	dd05      	ble.n	80055d4 <_dtoa_r+0x724>
 80055c8:	4641      	mov	r1, r8
 80055ca:	1c20      	adds	r0, r4, #0
 80055cc:	4652      	mov	r2, sl
 80055ce:	f002 f8f7 	bl	80077c0 <__lshift>
 80055d2:	4680      	mov	r8, r0
 80055d4:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80055d6:	2e00      	cmp	r6, #0
 80055d8:	d000      	beq.n	80055dc <_dtoa_r+0x72c>
 80055da:	e1d8      	b.n	800598e <_dtoa_r+0xade>
 80055dc:	9826      	ldr	r0, [sp, #152]	; 0x98
 80055de:	2301      	movs	r3, #1
 80055e0:	2802      	cmp	r0, #2
 80055e2:	dc00      	bgt.n	80055e6 <_dtoa_r+0x736>
 80055e4:	2300      	movs	r3, #0
 80055e6:	061b      	lsls	r3, r3, #24
 80055e8:	d100      	bne.n	80055ec <_dtoa_r+0x73c>
 80055ea:	e0dc      	b.n	80057a6 <_dtoa_r+0x8f6>
 80055ec:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80055ee:	2e00      	cmp	r6, #0
 80055f0:	dd00      	ble.n	80055f4 <_dtoa_r+0x744>
 80055f2:	e0d8      	b.n	80057a6 <_dtoa_r+0x8f6>
 80055f4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80055f6:	2e00      	cmp	r6, #0
 80055f8:	d000      	beq.n	80055fc <_dtoa_r+0x74c>
 80055fa:	e0ce      	b.n	800579a <_dtoa_r+0x8ea>
 80055fc:	4641      	mov	r1, r8
 80055fe:	1c20      	adds	r0, r4, #0
 8005600:	2205      	movs	r2, #5
 8005602:	2300      	movs	r3, #0
 8005604:	f001 fed6 	bl	80073b4 <__multadd>
 8005608:	4680      	mov	r8, r0
 800560a:	4641      	mov	r1, r8
 800560c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800560e:	f002 f93f 	bl	8007890 <__mcmp>
 8005612:	2800      	cmp	r0, #0
 8005614:	dc00      	bgt.n	8005618 <_dtoa_r+0x768>
 8005616:	e0c0      	b.n	800579a <_dtoa_r+0x8ea>
 8005618:	9e07      	ldr	r6, [sp, #28]
 800561a:	465a      	mov	r2, fp
 800561c:	2331      	movs	r3, #49	; 0x31
 800561e:	3601      	adds	r6, #1
 8005620:	2001      	movs	r0, #1
 8005622:	7013      	strb	r3, [r2, #0]
 8005624:	9607      	str	r6, [sp, #28]
 8005626:	465f      	mov	r7, fp
 8005628:	2500      	movs	r5, #0
 800562a:	4483      	add	fp, r0
 800562c:	1c20      	adds	r0, r4, #0
 800562e:	4641      	mov	r1, r8
 8005630:	f001 feb4 	bl	800739c <_Bfree>
 8005634:	4648      	mov	r0, r9
 8005636:	2800      	cmp	r0, #0
 8005638:	d006      	beq.n	8005648 <_dtoa_r+0x798>
 800563a:	454d      	cmp	r5, r9
 800563c:	d000      	beq.n	8005640 <_dtoa_r+0x790>
 800563e:	e105      	b.n	800584c <_dtoa_r+0x99c>
 8005640:	1c20      	adds	r0, r4, #0
 8005642:	4649      	mov	r1, r9
 8005644:	f001 feaa 	bl	800739c <_Bfree>
 8005648:	1c20      	adds	r0, r4, #0
 800564a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800564c:	f001 fea6 	bl	800739c <_Bfree>
 8005650:	2300      	movs	r3, #0
 8005652:	4658      	mov	r0, fp
 8005654:	7003      	strb	r3, [r0, #0]
 8005656:	9b07      	ldr	r3, [sp, #28]
 8005658:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 800565a:	3301      	adds	r3, #1
 800565c:	6033      	str	r3, [r6, #0]
 800565e:	9e2a      	ldr	r6, [sp, #168]	; 0xa8
 8005660:	2e00      	cmp	r6, #0
 8005662:	d100      	bne.n	8005666 <_dtoa_r+0x7b6>
 8005664:	e459      	b.n	8004f1a <_dtoa_r+0x6a>
 8005666:	6030      	str	r0, [r6, #0]
 8005668:	e457      	b.n	8004f1a <_dtoa_r+0x6a>
 800566a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800566c:	9807      	ldr	r0, [sp, #28]
 800566e:	1a36      	subs	r6, r6, r0
 8005670:	960a      	str	r6, [sp, #40]	; 0x28
 8005672:	4246      	negs	r6, r0
 8005674:	960f      	str	r6, [sp, #60]	; 0x3c
 8005676:	2600      	movs	r6, #0
 8005678:	9611      	str	r6, [sp, #68]	; 0x44
 800567a:	e4e6      	b.n	800504a <_dtoa_r+0x19a>
 800567c:	46c0      	nop			; (mov r8, r8)
 800567e:	46c0      	nop			; (mov r8, r8)
 8005680:	00000000 	.word	0x00000000
 8005684:	40240000 	.word	0x40240000
	...
 8005690:	fffffbef 	.word	0xfffffbef
 8005694:	fffffc0e 	.word	0xfffffc0e
 8005698:	00000412 	.word	0x00000412
 800569c:	fe100000 	.word	0xfe100000
 80056a0:	0800ee6c 	.word	0x0800ee6c
 80056a4:	0800eeb0 	.word	0x0800eeb0
 80056a8:	426d      	negs	r5, r5
 80056aa:	2100      	movs	r1, #0
 80056ac:	950a      	str	r5, [sp, #40]	; 0x28
 80056ae:	468a      	mov	sl, r1
 80056b0:	e4c3      	b.n	800503a <_dtoa_r+0x18a>
 80056b2:	9807      	ldr	r0, [sp, #28]
 80056b4:	f003 edc2 	blx	800923c <__aeabi_i2d>
 80056b8:	1c32      	adds	r2, r6, #0
 80056ba:	1c3b      	adds	r3, r7, #0
 80056bc:	f004 e8e0 	blx	8009880 <__aeabi_dcmpeq>
 80056c0:	9e07      	ldr	r6, [sp, #28]
 80056c2:	4243      	negs	r3, r0
 80056c4:	4143      	adcs	r3, r0
 80056c6:	1af6      	subs	r6, r6, r3
 80056c8:	9607      	str	r6, [sp, #28]
 80056ca:	e498      	b.n	8004ffe <_dtoa_r+0x14e>
 80056cc:	48d2      	ldr	r0, [pc, #840]	; (8005a18 <_dtoa_r+0xb68>)
 80056ce:	9a02      	ldr	r2, [sp, #8]
 80056d0:	1b80      	subs	r0, r0, r6
 80056d2:	4082      	lsls	r2, r0
 80056d4:	1c10      	adds	r0, r2, #0
 80056d6:	e635      	b.n	8005344 <_dtoa_r+0x494>
 80056d8:	2600      	movs	r6, #0
 80056da:	960e      	str	r6, [sp, #56]	; 0x38
 80056dc:	e4a5      	b.n	800502a <_dtoa_r+0x17a>
 80056de:	9826      	ldr	r0, [sp, #152]	; 0x98
 80056e0:	2801      	cmp	r0, #1
 80056e2:	dc00      	bgt.n	80056e6 <_dtoa_r+0x836>
 80056e4:	e2bc      	b.n	8005c60 <_dtoa_r+0xdb0>
 80056e6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80056e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80056ea:	3e01      	subs	r6, #1
 80056ec:	42b2      	cmp	r2, r6
 80056ee:	da00      	bge.n	80056f2 <_dtoa_r+0x842>
 80056f0:	e25d      	b.n	8005bae <_dtoa_r+0xcfe>
 80056f2:	1b96      	subs	r6, r2, r6
 80056f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80056f6:	2a00      	cmp	r2, #0
 80056f8:	da00      	bge.n	80056fc <_dtoa_r+0x84c>
 80056fa:	e2b9      	b.n	8005c70 <_dtoa_r+0xdc0>
 80056fc:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80056fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005700:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005702:	18c0      	adds	r0, r0, r3
 8005704:	900a      	str	r0, [sp, #40]	; 0x28
 8005706:	2101      	movs	r1, #1
 8005708:	1c20      	adds	r0, r4, #0
 800570a:	449a      	add	sl, r3
 800570c:	f001 ff42 	bl	8007594 <__i2b>
 8005710:	4681      	mov	r9, r0
 8005712:	e6f5      	b.n	8005500 <_dtoa_r+0x650>
 8005714:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005716:	2a04      	cmp	r2, #4
 8005718:	d100      	bne.n	800571c <_dtoa_r+0x86c>
 800571a:	e22a      	b.n	8005b72 <_dtoa_r+0xcc2>
 800571c:	2a05      	cmp	r2, #5
 800571e:	d000      	beq.n	8005722 <_dtoa_r+0x872>
 8005720:	e61c      	b.n	800535c <_dtoa_r+0x4ac>
 8005722:	2601      	movs	r6, #1
 8005724:	9612      	str	r6, [sp, #72]	; 0x48
 8005726:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 8005728:	9807      	ldr	r0, [sp, #28]
 800572a:	1836      	adds	r6, r6, r0
 800572c:	9610      	str	r6, [sp, #64]	; 0x40
 800572e:	2500      	movs	r5, #0
 8005730:	3601      	adds	r6, #1
 8005732:	220e      	movs	r2, #14
 8005734:	42b2      	cmp	r2, r6
 8005736:	416d      	adcs	r5, r5
 8005738:	2e00      	cmp	r6, #0
 800573a:	dc00      	bgt.n	800573e <_dtoa_r+0x88e>
 800573c:	e21d      	b.n	8005b7a <_dtoa_r+0xcca>
 800573e:	401d      	ands	r5, r3
 8005740:	9609      	str	r6, [sp, #36]	; 0x24
 8005742:	e4a5      	b.n	8005090 <_dtoa_r+0x1e0>
 8005744:	4648      	mov	r0, r9
 8005746:	f003 ed7a 	blx	800923c <__aeabi_i2d>
 800574a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800574c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800574e:	f003 ede4 	blx	8009318 <__aeabi_dmul>
 8005752:	4baa      	ldr	r3, [pc, #680]	; (80059fc <_dtoa_r+0xb4c>)
 8005754:	4aa8      	ldr	r2, [pc, #672]	; (80059f8 <_dtoa_r+0xb48>)
 8005756:	f003 ebd8 	blx	8008f08 <__adddf3>
 800575a:	1c06      	adds	r6, r0, #0
 800575c:	48af      	ldr	r0, [pc, #700]	; (8005a1c <_dtoa_r+0xb6c>)
 800575e:	180f      	adds	r7, r1, r0
 8005760:	4aa7      	ldr	r2, [pc, #668]	; (8005a00 <_dtoa_r+0xb50>)
 8005762:	4ba8      	ldr	r3, [pc, #672]	; (8005a04 <_dtoa_r+0xb54>)
 8005764:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005766:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005768:	f003 ebcc 	blx	8008f04 <__aeabi_dsub>
 800576c:	1c32      	adds	r2, r6, #0
 800576e:	1c3b      	adds	r3, r7, #0
 8005770:	900c      	str	r0, [sp, #48]	; 0x30
 8005772:	910d      	str	r1, [sp, #52]	; 0x34
 8005774:	f004 e8b4 	blx	80098e0 <__aeabi_dcmpgt>
 8005778:	2800      	cmp	r0, #0
 800577a:	d000      	beq.n	800577e <_dtoa_r+0x8ce>
 800577c:	e09c      	b.n	80058b8 <_dtoa_r+0xa08>
 800577e:	1c32      	adds	r2, r6, #0
 8005780:	2680      	movs	r6, #128	; 0x80
 8005782:	0636      	lsls	r6, r6, #24
 8005784:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005786:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005788:	19bb      	adds	r3, r7, r6
 800578a:	f004 e886 	blx	8009898 <__aeabi_dcmplt>
 800578e:	2800      	cmp	r0, #0
 8005790:	d100      	bne.n	8005794 <_dtoa_r+0x8e4>
 8005792:	e5f3      	b.n	800537c <_dtoa_r+0x4cc>
 8005794:	2000      	movs	r0, #0
 8005796:	4680      	mov	r8, r0
 8005798:	4681      	mov	r9, r0
 800579a:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 800579c:	43f6      	mvns	r6, r6
 800579e:	9607      	str	r6, [sp, #28]
 80057a0:	465f      	mov	r7, fp
 80057a2:	2500      	movs	r5, #0
 80057a4:	e742      	b.n	800562c <_dtoa_r+0x77c>
 80057a6:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80057a8:	2e00      	cmp	r6, #0
 80057aa:	d000      	beq.n	80057ae <_dtoa_r+0x8fe>
 80057ac:	e15f      	b.n	8005a6e <_dtoa_r+0xbbe>
 80057ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 80057b0:	46a2      	mov	sl, r4
 80057b2:	2500      	movs	r5, #0
 80057b4:	4644      	mov	r4, r8
 80057b6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80057b8:	4680      	mov	r8, r0
 80057ba:	e006      	b.n	80057ca <_dtoa_r+0x91a>
 80057bc:	1c31      	adds	r1, r6, #0
 80057be:	4650      	mov	r0, sl
 80057c0:	220a      	movs	r2, #10
 80057c2:	2300      	movs	r3, #0
 80057c4:	f001 fdf6 	bl	80073b4 <__multadd>
 80057c8:	1c06      	adds	r6, r0, #0
 80057ca:	1c21      	adds	r1, r4, #0
 80057cc:	1c30      	adds	r0, r6, #0
 80057ce:	f7ff fac3 	bl	8004d58 <quorem>
 80057d2:	1c07      	adds	r7, r0, #0
 80057d4:	3730      	adds	r7, #48	; 0x30
 80057d6:	4659      	mov	r1, fp
 80057d8:	554f      	strb	r7, [r1, r5]
 80057da:	3501      	adds	r5, #1
 80057dc:	4545      	cmp	r5, r8
 80057de:	dbed      	blt.n	80057bc <_dtoa_r+0x90c>
 80057e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057e2:	46a0      	mov	r8, r4
 80057e4:	960b      	str	r6, [sp, #44]	; 0x2c
 80057e6:	4654      	mov	r4, sl
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	dc00      	bgt.n	80057ee <_dtoa_r+0x93e>
 80057ec:	e2cb      	b.n	8005d86 <_dtoa_r+0xed6>
 80057ee:	469a      	mov	sl, r3
 80057f0:	44da      	add	sl, fp
 80057f2:	2500      	movs	r5, #0
 80057f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80057f6:	1c20      	adds	r0, r4, #0
 80057f8:	2201      	movs	r2, #1
 80057fa:	f001 ffe1 	bl	80077c0 <__lshift>
 80057fe:	4641      	mov	r1, r8
 8005800:	900b      	str	r0, [sp, #44]	; 0x2c
 8005802:	f002 f845 	bl	8007890 <__mcmp>
 8005806:	2800      	cmp	r0, #0
 8005808:	dc00      	bgt.n	800580c <_dtoa_r+0x95c>
 800580a:	e273      	b.n	8005cf4 <_dtoa_r+0xe44>
 800580c:	4656      	mov	r6, sl
 800580e:	3e01      	subs	r6, #1
 8005810:	7833      	ldrb	r3, [r6, #0]
 8005812:	4652      	mov	r2, sl
 8005814:	4659      	mov	r1, fp
 8005816:	e003      	b.n	8005820 <_dtoa_r+0x970>
 8005818:	3a02      	subs	r2, #2
 800581a:	7813      	ldrb	r3, [r2, #0]
 800581c:	1c32      	adds	r2, r6, #0
 800581e:	3e01      	subs	r6, #1
 8005820:	2b39      	cmp	r3, #57	; 0x39
 8005822:	d000      	beq.n	8005826 <_dtoa_r+0x976>
 8005824:	e28d      	b.n	8005d42 <_dtoa_r+0xe92>
 8005826:	42b1      	cmp	r1, r6
 8005828:	d1f6      	bne.n	8005818 <_dtoa_r+0x968>
 800582a:	9e07      	ldr	r6, [sp, #28]
 800582c:	2331      	movs	r3, #49	; 0x31
 800582e:	3601      	adds	r6, #1
 8005830:	9607      	str	r6, [sp, #28]
 8005832:	700b      	strb	r3, [r1, #0]
 8005834:	1c0f      	adds	r7, r1, #0
 8005836:	4693      	mov	fp, r2
 8005838:	e6f8      	b.n	800562c <_dtoa_r+0x77c>
 800583a:	231c      	movs	r3, #28
 800583c:	e6b3      	b.n	80055a6 <_dtoa_r+0x6f6>
 800583e:	9802      	ldr	r0, [sp, #8]
 8005840:	9903      	ldr	r1, [sp, #12]
 8005842:	900c      	str	r0, [sp, #48]	; 0x30
 8005844:	910d      	str	r1, [sp, #52]	; 0x34
 8005846:	2102      	movs	r1, #2
 8005848:	4689      	mov	r9, r1
 800584a:	e455      	b.n	80050f8 <_dtoa_r+0x248>
 800584c:	2d00      	cmp	r5, #0
 800584e:	d100      	bne.n	8005852 <_dtoa_r+0x9a2>
 8005850:	e6f6      	b.n	8005640 <_dtoa_r+0x790>
 8005852:	1c20      	adds	r0, r4, #0
 8005854:	1c29      	adds	r1, r5, #0
 8005856:	f001 fda1 	bl	800739c <_Bfree>
 800585a:	e6f1      	b.n	8005640 <_dtoa_r+0x790>
 800585c:	9e07      	ldr	r6, [sp, #28]
 800585e:	4275      	negs	r5, r6
 8005860:	2d00      	cmp	r5, #0
 8005862:	d100      	bne.n	8005866 <_dtoa_r+0x9b6>
 8005864:	e1ab      	b.n	8005bbe <_dtoa_r+0xd0e>
 8005866:	230f      	movs	r3, #15
 8005868:	402b      	ands	r3, r5
 800586a:	4a6d      	ldr	r2, [pc, #436]	; (8005a20 <_dtoa_r+0xb70>)
 800586c:	00db      	lsls	r3, r3, #3
 800586e:	18d3      	adds	r3, r2, r3
 8005870:	9802      	ldr	r0, [sp, #8]
 8005872:	9903      	ldr	r1, [sp, #12]
 8005874:	681a      	ldr	r2, [r3, #0]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	f003 ed4e 	blx	8009318 <__aeabi_dmul>
 800587c:	112d      	asrs	r5, r5, #4
 800587e:	900c      	str	r0, [sp, #48]	; 0x30
 8005880:	910d      	str	r1, [sp, #52]	; 0x34
 8005882:	2d00      	cmp	r5, #0
 8005884:	d100      	bne.n	8005888 <_dtoa_r+0x9d8>
 8005886:	e2b8      	b.n	8005dfa <_dtoa_r+0xf4a>
 8005888:	2002      	movs	r0, #2
 800588a:	4681      	mov	r9, r0
 800588c:	4e65      	ldr	r6, [pc, #404]	; (8005a24 <_dtoa_r+0xb74>)
 800588e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005890:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005892:	46a0      	mov	r8, r4
 8005894:	2701      	movs	r7, #1
 8005896:	464c      	mov	r4, r9
 8005898:	422f      	tst	r7, r5
 800589a:	d004      	beq.n	80058a6 <_dtoa_r+0x9f6>
 800589c:	6832      	ldr	r2, [r6, #0]
 800589e:	6873      	ldr	r3, [r6, #4]
 80058a0:	3401      	adds	r4, #1
 80058a2:	f003 ed3a 	blx	8009318 <__aeabi_dmul>
 80058a6:	106d      	asrs	r5, r5, #1
 80058a8:	3608      	adds	r6, #8
 80058aa:	2d00      	cmp	r5, #0
 80058ac:	d1f4      	bne.n	8005898 <_dtoa_r+0x9e8>
 80058ae:	46a1      	mov	r9, r4
 80058b0:	900c      	str	r0, [sp, #48]	; 0x30
 80058b2:	910d      	str	r1, [sp, #52]	; 0x34
 80058b4:	4644      	mov	r4, r8
 80058b6:	e43d      	b.n	8005134 <_dtoa_r+0x284>
 80058b8:	2000      	movs	r0, #0
 80058ba:	4680      	mov	r8, r0
 80058bc:	4681      	mov	r9, r0
 80058be:	e6ab      	b.n	8005618 <_dtoa_r+0x768>
 80058c0:	4a57      	ldr	r2, [pc, #348]	; (8005a20 <_dtoa_r+0xb70>)
 80058c2:	9314      	str	r3, [sp, #80]	; 0x50
 80058c4:	00db      	lsls	r3, r3, #3
 80058c6:	18d3      	adds	r3, r2, r3
 80058c8:	6818      	ldr	r0, [r3, #0]
 80058ca:	6859      	ldr	r1, [r3, #4]
 80058cc:	1c32      	adds	r2, r6, #0
 80058ce:	1c3b      	adds	r3, r7, #0
 80058d0:	f003 ed22 	blx	8009318 <__aeabi_dmul>
 80058d4:	9018      	str	r0, [sp, #96]	; 0x60
 80058d6:	9119      	str	r1, [sp, #100]	; 0x64
 80058d8:	980c      	ldr	r0, [sp, #48]	; 0x30
 80058da:	990d      	ldr	r1, [sp, #52]	; 0x34
 80058dc:	f004 e80c 	blx	80098f8 <__aeabi_d2iz>
 80058e0:	1c05      	adds	r5, r0, #0
 80058e2:	f003 ecac 	blx	800923c <__aeabi_i2d>
 80058e6:	1c02      	adds	r2, r0, #0
 80058e8:	1c0b      	adds	r3, r1, #0
 80058ea:	980c      	ldr	r0, [sp, #48]	; 0x30
 80058ec:	990d      	ldr	r1, [sp, #52]	; 0x34
 80058ee:	f003 eb0a 	blx	8008f04 <__aeabi_dsub>
 80058f2:	1c0f      	adds	r7, r1, #0
 80058f4:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80058f6:	3530      	adds	r5, #48	; 0x30
 80058f8:	1c06      	adds	r6, r0, #0
 80058fa:	4658      	mov	r0, fp
 80058fc:	7005      	strb	r5, [r0, #0]
 80058fe:	4689      	mov	r9, r1
 8005900:	3001      	adds	r0, #1
 8005902:	900c      	str	r0, [sp, #48]	; 0x30
 8005904:	44d9      	add	r9, fp
 8005906:	1c05      	adds	r5, r0, #0
 8005908:	2901      	cmp	r1, #1
 800590a:	d01f      	beq.n	800594c <_dtoa_r+0xa9c>
 800590c:	1c30      	adds	r0, r6, #0
 800590e:	1c39      	adds	r1, r7, #0
 8005910:	46a0      	mov	r8, r4
 8005912:	4a3d      	ldr	r2, [pc, #244]	; (8005a08 <_dtoa_r+0xb58>)
 8005914:	4b3d      	ldr	r3, [pc, #244]	; (8005a0c <_dtoa_r+0xb5c>)
 8005916:	f003 ed00 	blx	8009318 <__aeabi_dmul>
 800591a:	1c0f      	adds	r7, r1, #0
 800591c:	1c06      	adds	r6, r0, #0
 800591e:	f003 efec 	blx	80098f8 <__aeabi_d2iz>
 8005922:	1c04      	adds	r4, r0, #0
 8005924:	f003 ec8a 	blx	800923c <__aeabi_i2d>
 8005928:	3430      	adds	r4, #48	; 0x30
 800592a:	1c02      	adds	r2, r0, #0
 800592c:	1c0b      	adds	r3, r1, #0
 800592e:	1c30      	adds	r0, r6, #0
 8005930:	1c39      	adds	r1, r7, #0
 8005932:	f003 eae8 	blx	8008f04 <__aeabi_dsub>
 8005936:	702c      	strb	r4, [r5, #0]
 8005938:	3501      	adds	r5, #1
 800593a:	454d      	cmp	r5, r9
 800593c:	d1e9      	bne.n	8005912 <_dtoa_r+0xa62>
 800593e:	1c06      	adds	r6, r0, #0
 8005940:	1c0f      	adds	r7, r1, #0
 8005942:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005944:	9914      	ldr	r1, [sp, #80]	; 0x50
 8005946:	1840      	adds	r0, r0, r1
 8005948:	900c      	str	r0, [sp, #48]	; 0x30
 800594a:	4644      	mov	r4, r8
 800594c:	4a30      	ldr	r2, [pc, #192]	; (8005a10 <_dtoa_r+0xb60>)
 800594e:	4b31      	ldr	r3, [pc, #196]	; (8005a14 <_dtoa_r+0xb64>)
 8005950:	9818      	ldr	r0, [sp, #96]	; 0x60
 8005952:	9919      	ldr	r1, [sp, #100]	; 0x64
 8005954:	f003 ead8 	blx	8008f08 <__adddf3>
 8005958:	1c32      	adds	r2, r6, #0
 800595a:	1c3b      	adds	r3, r7, #0
 800595c:	f003 ef9c 	blx	8009898 <__aeabi_dcmplt>
 8005960:	2800      	cmp	r0, #0
 8005962:	d100      	bne.n	8005966 <_dtoa_r+0xab6>
 8005964:	e162      	b.n	8005c2c <_dtoa_r+0xd7c>
 8005966:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005968:	3b01      	subs	r3, #1
 800596a:	781b      	ldrb	r3, [r3, #0]
 800596c:	4698      	mov	r8, r3
 800596e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005970:	465f      	mov	r7, fp
 8005972:	4641      	mov	r1, r8
 8005974:	1c1a      	adds	r2, r3, #0
 8005976:	e5aa      	b.n	80054ce <_dtoa_r+0x61e>
 8005978:	4640      	mov	r0, r8
 800597a:	6903      	ldr	r3, [r0, #16]
 800597c:	3303      	adds	r3, #3
 800597e:	009b      	lsls	r3, r3, #2
 8005980:	4443      	add	r3, r8
 8005982:	6858      	ldr	r0, [r3, #4]
 8005984:	f001 fdba 	bl	80074fc <__hi0bits>
 8005988:	2320      	movs	r3, #32
 800598a:	1a1b      	subs	r3, r3, r0
 800598c:	e5fe      	b.n	800558c <_dtoa_r+0x6dc>
 800598e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005990:	4641      	mov	r1, r8
 8005992:	f001 ff7d 	bl	8007890 <__mcmp>
 8005996:	2800      	cmp	r0, #0
 8005998:	db00      	blt.n	800599c <_dtoa_r+0xaec>
 800599a:	e61f      	b.n	80055dc <_dtoa_r+0x72c>
 800599c:	9e07      	ldr	r6, [sp, #28]
 800599e:	1c20      	adds	r0, r4, #0
 80059a0:	3e01      	subs	r6, #1
 80059a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80059a4:	220a      	movs	r2, #10
 80059a6:	2300      	movs	r3, #0
 80059a8:	9607      	str	r6, [sp, #28]
 80059aa:	f001 fd03 	bl	80073b4 <__multadd>
 80059ae:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80059b0:	900b      	str	r0, [sp, #44]	; 0x2c
 80059b2:	2e00      	cmp	r6, #0
 80059b4:	d14b      	bne.n	8005a4e <_dtoa_r+0xb9e>
 80059b6:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80059b8:	2e00      	cmp	r6, #0
 80059ba:	dc03      	bgt.n	80059c4 <_dtoa_r+0xb14>
 80059bc:	9826      	ldr	r0, [sp, #152]	; 0x98
 80059be:	2802      	cmp	r0, #2
 80059c0:	dd00      	ble.n	80059c4 <_dtoa_r+0xb14>
 80059c2:	e224      	b.n	8005e0e <_dtoa_r+0xf5e>
 80059c4:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80059c6:	9609      	str	r6, [sp, #36]	; 0x24
 80059c8:	e6f1      	b.n	80057ae <_dtoa_r+0x8fe>
 80059ca:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80059cc:	2e00      	cmp	r6, #0
 80059ce:	d000      	beq.n	80059d2 <_dtoa_r+0xb22>
 80059d0:	e19f      	b.n	8005d12 <_dtoa_r+0xe62>
 80059d2:	4a0b      	ldr	r2, [pc, #44]	; (8005a00 <_dtoa_r+0xb50>)
 80059d4:	4b0b      	ldr	r3, [pc, #44]	; (8005a04 <_dtoa_r+0xb54>)
 80059d6:	9804      	ldr	r0, [sp, #16]
 80059d8:	9905      	ldr	r1, [sp, #20]
 80059da:	f003 ec9e 	blx	8009318 <__aeabi_dmul>
 80059de:	9a02      	ldr	r2, [sp, #8]
 80059e0:	9b03      	ldr	r3, [sp, #12]
 80059e2:	f003 ef72 	blx	80098c8 <__aeabi_dcmpge>
 80059e6:	2800      	cmp	r0, #0
 80059e8:	d100      	bne.n	80059ec <_dtoa_r+0xb3c>
 80059ea:	e766      	b.n	80058ba <_dtoa_r+0xa0a>
 80059ec:	2600      	movs	r6, #0
 80059ee:	46b0      	mov	r8, r6
 80059f0:	46b1      	mov	r9, r6
 80059f2:	e6d2      	b.n	800579a <_dtoa_r+0x8ea>
 80059f4:	46c0      	nop			; (mov r8, r8)
 80059f6:	46c0      	nop			; (mov r8, r8)
 80059f8:	00000000 	.word	0x00000000
 80059fc:	401c0000 	.word	0x401c0000
 8005a00:	00000000 	.word	0x00000000
 8005a04:	40140000 	.word	0x40140000
 8005a08:	00000000 	.word	0x00000000
 8005a0c:	40240000 	.word	0x40240000
 8005a10:	00000000 	.word	0x00000000
 8005a14:	3fe00000 	.word	0x3fe00000
 8005a18:	fffffbee 	.word	0xfffffbee
 8005a1c:	fcc00000 	.word	0xfcc00000
 8005a20:	0800eeb0 	.word	0x0800eeb0
 8005a24:	0800efa0 	.word	0x0800efa0
 8005a28:	9902      	ldr	r1, [sp, #8]
 8005a2a:	2900      	cmp	r1, #0
 8005a2c:	d000      	beq.n	8005a30 <_dtoa_r+0xb80>
 8005a2e:	e5a8      	b.n	8005582 <_dtoa_r+0x6d2>
 8005a30:	9b03      	ldr	r3, [sp, #12]
 8005a32:	031a      	lsls	r2, r3, #12
 8005a34:	d000      	beq.n	8005a38 <_dtoa_r+0xb88>
 8005a36:	e5a4      	b.n	8005582 <_dtoa_r+0x6d2>
 8005a38:	4adb      	ldr	r2, [pc, #876]	; (8005da8 <_dtoa_r+0xef8>)
 8005a3a:	4213      	tst	r3, r2
 8005a3c:	d100      	bne.n	8005a40 <_dtoa_r+0xb90>
 8005a3e:	e5a0      	b.n	8005582 <_dtoa_r+0x6d2>
 8005a40:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8005a42:	2001      	movs	r0, #1
 8005a44:	3601      	adds	r6, #1
 8005a46:	960a      	str	r6, [sp, #40]	; 0x28
 8005a48:	4482      	add	sl, r0
 8005a4a:	2501      	movs	r5, #1
 8005a4c:	e599      	b.n	8005582 <_dtoa_r+0x6d2>
 8005a4e:	4649      	mov	r1, r9
 8005a50:	1c20      	adds	r0, r4, #0
 8005a52:	220a      	movs	r2, #10
 8005a54:	2300      	movs	r3, #0
 8005a56:	f001 fcad 	bl	80073b4 <__multadd>
 8005a5a:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8005a5c:	4681      	mov	r9, r0
 8005a5e:	2e00      	cmp	r6, #0
 8005a60:	dc03      	bgt.n	8005a6a <_dtoa_r+0xbba>
 8005a62:	9826      	ldr	r0, [sp, #152]	; 0x98
 8005a64:	2802      	cmp	r0, #2
 8005a66:	dd00      	ble.n	8005a6a <_dtoa_r+0xbba>
 8005a68:	e1d1      	b.n	8005e0e <_dtoa_r+0xf5e>
 8005a6a:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8005a6c:	9609      	str	r6, [sp, #36]	; 0x24
 8005a6e:	2f00      	cmp	r7, #0
 8005a70:	dd05      	ble.n	8005a7e <_dtoa_r+0xbce>
 8005a72:	4649      	mov	r1, r9
 8005a74:	1c20      	adds	r0, r4, #0
 8005a76:	1c3a      	adds	r2, r7, #0
 8005a78:	f001 fea2 	bl	80077c0 <__lshift>
 8005a7c:	4681      	mov	r9, r0
 8005a7e:	464e      	mov	r6, r9
 8005a80:	960a      	str	r6, [sp, #40]	; 0x28
 8005a82:	2d00      	cmp	r5, #0
 8005a84:	d000      	beq.n	8005a88 <_dtoa_r+0xbd8>
 8005a86:	e148      	b.n	8005d1a <_dtoa_r+0xe6a>
 8005a88:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a8a:	465b      	mov	r3, fp
 8005a8c:	3b01      	subs	r3, #1
 8005a8e:	181b      	adds	r3, r3, r0
 8005a90:	9902      	ldr	r1, [sp, #8]
 8005a92:	930e      	str	r3, [sp, #56]	; 0x38
 8005a94:	2301      	movs	r3, #1
 8005a96:	4019      	ands	r1, r3
 8005a98:	465e      	mov	r6, fp
 8005a9a:	4643      	mov	r3, r8
 8005a9c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005a9e:	9102      	str	r1, [sp, #8]
 8005aa0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8005aa2:	9308      	str	r3, [sp, #32]
 8005aa4:	960f      	str	r6, [sp, #60]	; 0x3c
 8005aa6:	464d      	mov	r5, r9
 8005aa8:	4680      	mov	r8, r0
 8005aaa:	9908      	ldr	r1, [sp, #32]
 8005aac:	1c38      	adds	r0, r7, #0
 8005aae:	f7ff f953 	bl	8004d58 <quorem>
 8005ab2:	9009      	str	r0, [sp, #36]	; 0x24
 8005ab4:	3030      	adds	r0, #48	; 0x30
 8005ab6:	900a      	str	r0, [sp, #40]	; 0x28
 8005ab8:	1c29      	adds	r1, r5, #0
 8005aba:	1c38      	adds	r0, r7, #0
 8005abc:	f001 fee8 	bl	8007890 <__mcmp>
 8005ac0:	9908      	ldr	r1, [sp, #32]
 8005ac2:	4683      	mov	fp, r0
 8005ac4:	4642      	mov	r2, r8
 8005ac6:	1c20      	adds	r0, r4, #0
 8005ac8:	f001 ff00 	bl	80078cc <__mdiff>
 8005acc:	4681      	mov	r9, r0
 8005ace:	68c0      	ldr	r0, [r0, #12]
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	469a      	mov	sl, r3
 8005ad4:	2800      	cmp	r0, #0
 8005ad6:	d03d      	beq.n	8005b54 <_dtoa_r+0xca4>
 8005ad8:	4649      	mov	r1, r9
 8005ada:	1c20      	adds	r0, r4, #0
 8005adc:	f001 fc5e 	bl	800739c <_Bfree>
 8005ae0:	9926      	ldr	r1, [sp, #152]	; 0x98
 8005ae2:	4653      	mov	r3, sl
 8005ae4:	430b      	orrs	r3, r1
 8005ae6:	d103      	bne.n	8005af0 <_dtoa_r+0xc40>
 8005ae8:	9a02      	ldr	r2, [sp, #8]
 8005aea:	2a00      	cmp	r2, #0
 8005aec:	d100      	bne.n	8005af0 <_dtoa_r+0xc40>
 8005aee:	e16b      	b.n	8005dc8 <_dtoa_r+0xf18>
 8005af0:	465a      	mov	r2, fp
 8005af2:	2a00      	cmp	r2, #0
 8005af4:	da00      	bge.n	8005af8 <_dtoa_r+0xc48>
 8005af6:	e0bf      	b.n	8005c78 <_dtoa_r+0xdc8>
 8005af8:	9826      	ldr	r0, [sp, #152]	; 0x98
 8005afa:	465b      	mov	r3, fp
 8005afc:	4303      	orrs	r3, r0
 8005afe:	d103      	bne.n	8005b08 <_dtoa_r+0xc58>
 8005b00:	9902      	ldr	r1, [sp, #8]
 8005b02:	2900      	cmp	r1, #0
 8005b04:	d100      	bne.n	8005b08 <_dtoa_r+0xc58>
 8005b06:	e0b7      	b.n	8005c78 <_dtoa_r+0xdc8>
 8005b08:	4652      	mov	r2, sl
 8005b0a:	2a00      	cmp	r2, #0
 8005b0c:	dd00      	ble.n	8005b10 <_dtoa_r+0xc60>
 8005b0e:	e123      	b.n	8005d58 <_dtoa_r+0xea8>
 8005b10:	aa0a      	add	r2, sp, #40	; 0x28
 8005b12:	7812      	ldrb	r2, [r2, #0]
 8005b14:	980e      	ldr	r0, [sp, #56]	; 0x38
 8005b16:	1c73      	adds	r3, r6, #1
 8005b18:	7032      	strb	r2, [r6, #0]
 8005b1a:	4699      	mov	r9, r3
 8005b1c:	4286      	cmp	r6, r0
 8005b1e:	d100      	bne.n	8005b22 <_dtoa_r+0xc72>
 8005b20:	e126      	b.n	8005d70 <_dtoa_r+0xec0>
 8005b22:	1c39      	adds	r1, r7, #0
 8005b24:	220a      	movs	r2, #10
 8005b26:	2300      	movs	r3, #0
 8005b28:	1c20      	adds	r0, r4, #0
 8005b2a:	f001 fc43 	bl	80073b4 <__multadd>
 8005b2e:	1c29      	adds	r1, r5, #0
 8005b30:	1c07      	adds	r7, r0, #0
 8005b32:	220a      	movs	r2, #10
 8005b34:	1c20      	adds	r0, r4, #0
 8005b36:	2300      	movs	r3, #0
 8005b38:	4545      	cmp	r5, r8
 8005b3a:	d011      	beq.n	8005b60 <_dtoa_r+0xcb0>
 8005b3c:	f001 fc3a 	bl	80073b4 <__multadd>
 8005b40:	4641      	mov	r1, r8
 8005b42:	1c05      	adds	r5, r0, #0
 8005b44:	220a      	movs	r2, #10
 8005b46:	1c20      	adds	r0, r4, #0
 8005b48:	2300      	movs	r3, #0
 8005b4a:	f001 fc33 	bl	80073b4 <__multadd>
 8005b4e:	464e      	mov	r6, r9
 8005b50:	4680      	mov	r8, r0
 8005b52:	e7aa      	b.n	8005aaa <_dtoa_r+0xbfa>
 8005b54:	1c38      	adds	r0, r7, #0
 8005b56:	4649      	mov	r1, r9
 8005b58:	f001 fe9a 	bl	8007890 <__mcmp>
 8005b5c:	4682      	mov	sl, r0
 8005b5e:	e7bb      	b.n	8005ad8 <_dtoa_r+0xc28>
 8005b60:	f001 fc28 	bl	80073b4 <__multadd>
 8005b64:	464e      	mov	r6, r9
 8005b66:	1c05      	adds	r5, r0, #0
 8005b68:	4680      	mov	r8, r0
 8005b6a:	e79e      	b.n	8005aaa <_dtoa_r+0xbfa>
 8005b6c:	2600      	movs	r6, #0
 8005b6e:	9612      	str	r6, [sp, #72]	; 0x48
 8005b70:	e5d9      	b.n	8005726 <_dtoa_r+0x876>
 8005b72:	2601      	movs	r6, #1
 8005b74:	9612      	str	r6, [sp, #72]	; 0x48
 8005b76:	f7ff fa7e 	bl	8005076 <_dtoa_r+0x1c6>
 8005b7a:	9609      	str	r6, [sp, #36]	; 0x24
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	6462      	str	r2, [r4, #68]	; 0x44
 8005b80:	401d      	ands	r5, r3
 8005b82:	2100      	movs	r1, #0
 8005b84:	f7ff fa93 	bl	80050ae <_dtoa_r+0x1fe>
 8005b88:	2601      	movs	r6, #1
 8005b8a:	2001      	movs	r0, #1
 8005b8c:	2501      	movs	r5, #1
 8005b8e:	9610      	str	r6, [sp, #64]	; 0x40
 8005b90:	9609      	str	r6, [sp, #36]	; 0x24
 8005b92:	9027      	str	r0, [sp, #156]	; 0x9c
 8005b94:	e7f2      	b.n	8005b7c <_dtoa_r+0xccc>
 8005b96:	1c20      	adds	r0, r4, #0
 8005b98:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005b9a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005b9c:	f001 fdb8 	bl	8007710 <__pow5mult>
 8005ba0:	900b      	str	r0, [sp, #44]	; 0x2c
 8005ba2:	e4db      	b.n	800555c <_dtoa_r+0x6ac>
 8005ba4:	464d      	mov	r5, r9
 8005ba6:	4654      	mov	r4, sl
 8005ba8:	465f      	mov	r7, fp
 8005baa:	46ab      	mov	fp, r5
 8005bac:	e54c      	b.n	8005648 <_dtoa_r+0x798>
 8005bae:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8005bb0:	9911      	ldr	r1, [sp, #68]	; 0x44
 8005bb2:	1a33      	subs	r3, r6, r0
 8005bb4:	18c9      	adds	r1, r1, r3
 8005bb6:	960f      	str	r6, [sp, #60]	; 0x3c
 8005bb8:	9111      	str	r1, [sp, #68]	; 0x44
 8005bba:	2600      	movs	r6, #0
 8005bbc:	e59a      	b.n	80056f4 <_dtoa_r+0x844>
 8005bbe:	9902      	ldr	r1, [sp, #8]
 8005bc0:	9a03      	ldr	r2, [sp, #12]
 8005bc2:	910c      	str	r1, [sp, #48]	; 0x30
 8005bc4:	920d      	str	r2, [sp, #52]	; 0x34
 8005bc6:	2202      	movs	r2, #2
 8005bc8:	4691      	mov	r9, r2
 8005bca:	f7ff fab3 	bl	8005134 <_dtoa_r+0x284>
 8005bce:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8005bd0:	2e00      	cmp	r6, #0
 8005bd2:	d100      	bne.n	8005bd6 <_dtoa_r+0xd26>
 8005bd4:	e5b6      	b.n	8005744 <_dtoa_r+0x894>
 8005bd6:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8005bd8:	2e00      	cmp	r6, #0
 8005bda:	dc01      	bgt.n	8005be0 <_dtoa_r+0xd30>
 8005bdc:	f7ff fbce 	bl	800537c <_dtoa_r+0x4cc>
 8005be0:	9e07      	ldr	r6, [sp, #28]
 8005be2:	4b6c      	ldr	r3, [pc, #432]	; (8005d94 <_dtoa_r+0xee4>)
 8005be4:	4a6a      	ldr	r2, [pc, #424]	; (8005d90 <_dtoa_r+0xee0>)
 8005be6:	3e01      	subs	r6, #1
 8005be8:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005bea:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005bec:	9617      	str	r6, [sp, #92]	; 0x5c
 8005bee:	f003 eb94 	blx	8009318 <__aeabi_dmul>
 8005bf2:	900c      	str	r0, [sp, #48]	; 0x30
 8005bf4:	910d      	str	r1, [sp, #52]	; 0x34
 8005bf6:	4648      	mov	r0, r9
 8005bf8:	3001      	adds	r0, #1
 8005bfa:	f003 eb20 	blx	800923c <__aeabi_i2d>
 8005bfe:	1c02      	adds	r2, r0, #0
 8005c00:	1c0b      	adds	r3, r1, #0
 8005c02:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005c04:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005c06:	f003 eb88 	blx	8009318 <__aeabi_dmul>
 8005c0a:	4a63      	ldr	r2, [pc, #396]	; (8005d98 <_dtoa_r+0xee8>)
 8005c0c:	4b63      	ldr	r3, [pc, #396]	; (8005d9c <_dtoa_r+0xeec>)
 8005c0e:	f003 e97c 	blx	8008f08 <__adddf3>
 8005c12:	1c06      	adds	r6, r0, #0
 8005c14:	4865      	ldr	r0, [pc, #404]	; (8005dac <_dtoa_r+0xefc>)
 8005c16:	180f      	adds	r7, r1, r0
 8005c18:	9910      	ldr	r1, [sp, #64]	; 0x40
 8005c1a:	9113      	str	r1, [sp, #76]	; 0x4c
 8005c1c:	f7ff faad 	bl	800517a <_dtoa_r+0x2ca>
 8005c20:	1c20      	adds	r0, r4, #0
 8005c22:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005c24:	f001 fd74 	bl	8007710 <__pow5mult>
 8005c28:	900b      	str	r0, [sp, #44]	; 0x2c
 8005c2a:	e497      	b.n	800555c <_dtoa_r+0x6ac>
 8005c2c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005c2e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005c30:	485b      	ldr	r0, [pc, #364]	; (8005da0 <_dtoa_r+0xef0>)
 8005c32:	495c      	ldr	r1, [pc, #368]	; (8005da4 <_dtoa_r+0xef4>)
 8005c34:	f003 e966 	blx	8008f04 <__aeabi_dsub>
 8005c38:	1c32      	adds	r2, r6, #0
 8005c3a:	1c3b      	adds	r3, r7, #0
 8005c3c:	f003 ee50 	blx	80098e0 <__aeabi_dcmpgt>
 8005c40:	2800      	cmp	r0, #0
 8005c42:	d101      	bne.n	8005c48 <_dtoa_r+0xd98>
 8005c44:	f7ff fb9a 	bl	800537c <_dtoa_r+0x4cc>
 8005c48:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005c4a:	e000      	b.n	8005c4e <_dtoa_r+0xd9e>
 8005c4c:	1c19      	adds	r1, r3, #0
 8005c4e:	1e4b      	subs	r3, r1, #1
 8005c50:	781a      	ldrb	r2, [r3, #0]
 8005c52:	2a30      	cmp	r2, #48	; 0x30
 8005c54:	d0fa      	beq.n	8005c4c <_dtoa_r+0xd9c>
 8005c56:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8005c58:	465f      	mov	r7, fp
 8005c5a:	9607      	str	r6, [sp, #28]
 8005c5c:	468b      	mov	fp, r1
 8005c5e:	e4f3      	b.n	8005648 <_dtoa_r+0x798>
 8005c60:	9e16      	ldr	r6, [sp, #88]	; 0x58
 8005c62:	2e00      	cmp	r6, #0
 8005c64:	d072      	beq.n	8005d4c <_dtoa_r+0xe9c>
 8005c66:	4852      	ldr	r0, [pc, #328]	; (8005db0 <_dtoa_r+0xf00>)
 8005c68:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8005c6a:	181b      	adds	r3, r3, r0
 8005c6c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8005c6e:	e547      	b.n	8005700 <_dtoa_r+0x850>
 8005c70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c72:	1a9f      	subs	r7, r3, r2
 8005c74:	2300      	movs	r3, #0
 8005c76:	e543      	b.n	8005700 <_dtoa_r+0x850>
 8005c78:	970b      	str	r7, [sp, #44]	; 0x2c
 8005c7a:	9808      	ldr	r0, [sp, #32]
 8005c7c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8005c7e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005c80:	4643      	mov	r3, r8
 8005c82:	4652      	mov	r2, sl
 8005c84:	930a      	str	r3, [sp, #40]	; 0x28
 8005c86:	4680      	mov	r8, r0
 8005c88:	468b      	mov	fp, r1
 8005c8a:	46b9      	mov	r9, r7
 8005c8c:	2a00      	cmp	r2, #0
 8005c8e:	dd11      	ble.n	8005cb4 <_dtoa_r+0xe04>
 8005c90:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005c92:	1c20      	adds	r0, r4, #0
 8005c94:	2201      	movs	r2, #1
 8005c96:	f001 fd93 	bl	80077c0 <__lshift>
 8005c9a:	4641      	mov	r1, r8
 8005c9c:	900b      	str	r0, [sp, #44]	; 0x2c
 8005c9e:	f001 fdf7 	bl	8007890 <__mcmp>
 8005ca2:	2800      	cmp	r0, #0
 8005ca4:	dc00      	bgt.n	8005ca8 <_dtoa_r+0xdf8>
 8005ca6:	e0a1      	b.n	8005dec <_dtoa_r+0xf3c>
 8005ca8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005caa:	4648      	mov	r0, r9
 8005cac:	3731      	adds	r7, #49	; 0x31
 8005cae:	2839      	cmp	r0, #57	; 0x39
 8005cb0:	d100      	bne.n	8005cb4 <_dtoa_r+0xe04>
 8005cb2:	e07f      	b.n	8005db4 <_dtoa_r+0xf04>
 8005cb4:	7037      	strb	r7, [r6, #0]
 8005cb6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005cb8:	3601      	adds	r6, #1
 8005cba:	465f      	mov	r7, fp
 8005cbc:	4689      	mov	r9, r1
 8005cbe:	46b3      	mov	fp, r6
 8005cc0:	e4b4      	b.n	800562c <_dtoa_r+0x77c>
 8005cc2:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005cc4:	465c      	mov	r4, fp
 8005cc6:	4655      	mov	r5, sl
 8005cc8:	4683      	mov	fp, r0
 8005cca:	465f      	mov	r7, fp
 8005ccc:	4641      	mov	r1, r8
 8005cce:	1c2a      	adds	r2, r5, #0
 8005cd0:	f7ff fbfd 	bl	80054ce <_dtoa_r+0x61e>
 8005cd4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005cd6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005cd8:	465c      	mov	r4, fp
 8005cda:	4692      	mov	sl, r2
 8005cdc:	469b      	mov	fp, r3
 8005cde:	f7ff fb4d 	bl	800537c <_dtoa_r+0x4cc>
 8005ce2:	4693      	mov	fp, r2
 8005ce4:	1c0a      	adds	r2, r1, #0
 8005ce6:	3201      	adds	r2, #1
 8005ce8:	0612      	lsls	r2, r2, #24
 8005cea:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8005cec:	0e12      	lsrs	r2, r2, #24
 8005cee:	9607      	str	r6, [sp, #28]
 8005cf0:	701a      	strb	r2, [r3, #0]
 8005cf2:	e4a9      	b.n	8005648 <_dtoa_r+0x798>
 8005cf4:	2800      	cmp	r0, #0
 8005cf6:	d102      	bne.n	8005cfe <_dtoa_r+0xe4e>
 8005cf8:	07fe      	lsls	r6, r7, #31
 8005cfa:	d500      	bpl.n	8005cfe <_dtoa_r+0xe4e>
 8005cfc:	e586      	b.n	800580c <_dtoa_r+0x95c>
 8005cfe:	4651      	mov	r1, sl
 8005d00:	e000      	b.n	8005d04 <_dtoa_r+0xe54>
 8005d02:	1c19      	adds	r1, r3, #0
 8005d04:	1e4b      	subs	r3, r1, #1
 8005d06:	781a      	ldrb	r2, [r3, #0]
 8005d08:	2a30      	cmp	r2, #48	; 0x30
 8005d0a:	d0fa      	beq.n	8005d02 <_dtoa_r+0xe52>
 8005d0c:	465f      	mov	r7, fp
 8005d0e:	468b      	mov	fp, r1
 8005d10:	e48c      	b.n	800562c <_dtoa_r+0x77c>
 8005d12:	2200      	movs	r2, #0
 8005d14:	4690      	mov	r8, r2
 8005d16:	4691      	mov	r9, r2
 8005d18:	e53f      	b.n	800579a <_dtoa_r+0x8ea>
 8005d1a:	6871      	ldr	r1, [r6, #4]
 8005d1c:	1c20      	adds	r0, r4, #0
 8005d1e:	f001 fb13 	bl	8007348 <_Balloc>
 8005d22:	6932      	ldr	r2, [r6, #16]
 8005d24:	4649      	mov	r1, r9
 8005d26:	3202      	adds	r2, #2
 8005d28:	1c05      	adds	r5, r0, #0
 8005d2a:	310c      	adds	r1, #12
 8005d2c:	0092      	lsls	r2, r2, #2
 8005d2e:	300c      	adds	r0, #12
 8005d30:	f001 fabc 	bl	80072ac <memcpy>
 8005d34:	1c20      	adds	r0, r4, #0
 8005d36:	1c29      	adds	r1, r5, #0
 8005d38:	2201      	movs	r2, #1
 8005d3a:	f001 fd41 	bl	80077c0 <__lshift>
 8005d3e:	900a      	str	r0, [sp, #40]	; 0x28
 8005d40:	e6a2      	b.n	8005a88 <_dtoa_r+0xbd8>
 8005d42:	3301      	adds	r3, #1
 8005d44:	7033      	strb	r3, [r6, #0]
 8005d46:	1c0f      	adds	r7, r1, #0
 8005d48:	4693      	mov	fp, r2
 8005d4a:	e46f      	b.n	800562c <_dtoa_r+0x77c>
 8005d4c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005d4e:	2336      	movs	r3, #54	; 0x36
 8005d50:	1a5b      	subs	r3, r3, r1
 8005d52:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8005d54:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8005d56:	e4d3      	b.n	8005700 <_dtoa_r+0x850>
 8005d58:	970b      	str	r7, [sp, #44]	; 0x2c
 8005d5a:	9908      	ldr	r1, [sp, #32]
 8005d5c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8005d5e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005d60:	4640      	mov	r0, r8
 8005d62:	900a      	str	r0, [sp, #40]	; 0x28
 8005d64:	4688      	mov	r8, r1
 8005d66:	4693      	mov	fp, r2
 8005d68:	2f39      	cmp	r7, #57	; 0x39
 8005d6a:	d023      	beq.n	8005db4 <_dtoa_r+0xf04>
 8005d6c:	3701      	adds	r7, #1
 8005d6e:	e7a1      	b.n	8005cb4 <_dtoa_r+0xe04>
 8005d70:	9908      	ldr	r1, [sp, #32]
 8005d72:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005d74:	4640      	mov	r0, r8
 8005d76:	970b      	str	r7, [sp, #44]	; 0x2c
 8005d78:	4688      	mov	r8, r1
 8005d7a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8005d7c:	469a      	mov	sl, r3
 8005d7e:	900a      	str	r0, [sp, #40]	; 0x28
 8005d80:	4693      	mov	fp, r2
 8005d82:	4681      	mov	r9, r0
 8005d84:	e536      	b.n	80057f4 <_dtoa_r+0x944>
 8005d86:	2301      	movs	r3, #1
 8005d88:	e531      	b.n	80057ee <_dtoa_r+0x93e>
 8005d8a:	46c0      	nop			; (mov r8, r8)
 8005d8c:	46c0      	nop			; (mov r8, r8)
 8005d8e:	46c0      	nop			; (mov r8, r8)
 8005d90:	00000000 	.word	0x00000000
 8005d94:	40240000 	.word	0x40240000
 8005d98:	00000000 	.word	0x00000000
 8005d9c:	401c0000 	.word	0x401c0000
 8005da0:	00000000 	.word	0x00000000
 8005da4:	3fe00000 	.word	0x3fe00000
 8005da8:	7ff00000 	.word	0x7ff00000
 8005dac:	fcc00000 	.word	0xfcc00000
 8005db0:	00000433 	.word	0x00000433
 8005db4:	2339      	movs	r3, #57	; 0x39
 8005db6:	7033      	strb	r3, [r6, #0]
 8005db8:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005dba:	1c73      	adds	r3, r6, #1
 8005dbc:	469a      	mov	sl, r3
 8005dbe:	4681      	mov	r9, r0
 8005dc0:	2339      	movs	r3, #57	; 0x39
 8005dc2:	4652      	mov	r2, sl
 8005dc4:	4659      	mov	r1, fp
 8005dc6:	e52b      	b.n	8005820 <_dtoa_r+0x970>
 8005dc8:	4640      	mov	r0, r8
 8005dca:	970b      	str	r7, [sp, #44]	; 0x2c
 8005dcc:	9908      	ldr	r1, [sp, #32]
 8005dce:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8005dd0:	900a      	str	r0, [sp, #40]	; 0x28
 8005dd2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8005dd4:	465b      	mov	r3, fp
 8005dd6:	4688      	mov	r8, r1
 8005dd8:	9302      	str	r3, [sp, #8]
 8005dda:	4683      	mov	fp, r0
 8005ddc:	2f39      	cmp	r7, #57	; 0x39
 8005dde:	d0e9      	beq.n	8005db4 <_dtoa_r+0xf04>
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	dc00      	bgt.n	8005de6 <_dtoa_r+0xf36>
 8005de4:	e766      	b.n	8005cb4 <_dtoa_r+0xe04>
 8005de6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005de8:	3731      	adds	r7, #49	; 0x31
 8005dea:	e763      	b.n	8005cb4 <_dtoa_r+0xe04>
 8005dec:	2800      	cmp	r0, #0
 8005dee:	d000      	beq.n	8005df2 <_dtoa_r+0xf42>
 8005df0:	e760      	b.n	8005cb4 <_dtoa_r+0xe04>
 8005df2:	07fb      	lsls	r3, r7, #31
 8005df4:	d400      	bmi.n	8005df8 <_dtoa_r+0xf48>
 8005df6:	e75d      	b.n	8005cb4 <_dtoa_r+0xe04>
 8005df8:	e756      	b.n	8005ca8 <_dtoa_r+0xdf8>
 8005dfa:	2302      	movs	r3, #2
 8005dfc:	4699      	mov	r9, r3
 8005dfe:	f7ff f999 	bl	8005134 <_dtoa_r+0x284>
 8005e02:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8005e04:	465f      	mov	r7, fp
 8005e06:	9607      	str	r6, [sp, #28]
 8005e08:	46ab      	mov	fp, r5
 8005e0a:	f7ff fc1d 	bl	8005648 <_dtoa_r+0x798>
 8005e0e:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8005e10:	9609      	str	r6, [sp, #36]	; 0x24
 8005e12:	f7ff fbef 	bl	80055f4 <_dtoa_r+0x744>
 8005e16:	2a04      	cmp	r2, #4
 8005e18:	d101      	bne.n	8005e1e <_dtoa_r+0xf6e>
 8005e1a:	f7ff fbc9 	bl	80055b0 <_dtoa_r+0x700>
 8005e1e:	223c      	movs	r2, #60	; 0x3c
 8005e20:	1ad3      	subs	r3, r2, r3
 8005e22:	f7ff fbc0 	bl	80055a6 <_dtoa_r+0x6f6>
 8005e26:	46c0      	nop			; (mov r8, r8)

08005e28 <__errno>:
 8005e28:	4b01      	ldr	r3, [pc, #4]	; (8005e30 <__errno+0x8>)
 8005e2a:	6818      	ldr	r0, [r3, #0]
 8005e2c:	4770      	bx	lr
 8005e2e:	46c0      	nop			; (mov r8, r8)
 8005e30:	20000100 	.word	0x20000100

08005e34 <__sflush_r>:
 8005e34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e36:	4647      	mov	r7, r8
 8005e38:	b480      	push	{r7}
 8005e3a:	898b      	ldrh	r3, [r1, #12]
 8005e3c:	4680      	mov	r8, r0
 8005e3e:	1c0d      	adds	r5, r1, #0
 8005e40:	0718      	lsls	r0, r3, #28
 8005e42:	d43d      	bmi.n	8005ec0 <__sflush_r+0x8c>
 8005e44:	2180      	movs	r1, #128	; 0x80
 8005e46:	0109      	lsls	r1, r1, #4
 8005e48:	686a      	ldr	r2, [r5, #4]
 8005e4a:	4319      	orrs	r1, r3
 8005e4c:	81a9      	strh	r1, [r5, #12]
 8005e4e:	2a00      	cmp	r2, #0
 8005e50:	dd58      	ble.n	8005f04 <__sflush_r+0xd0>
 8005e52:	6aac      	ldr	r4, [r5, #40]	; 0x28
 8005e54:	2c00      	cmp	r4, #0
 8005e56:	d02d      	beq.n	8005eb4 <__sflush_r+0x80>
 8005e58:	4640      	mov	r0, r8
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	6806      	ldr	r6, [r0, #0]
 8005e5e:	6002      	str	r2, [r0, #0]
 8005e60:	04da      	lsls	r2, r3, #19
 8005e62:	d553      	bpl.n	8005f0c <__sflush_r+0xd8>
 8005e64:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 8005e66:	074b      	lsls	r3, r1, #29
 8005e68:	d506      	bpl.n	8005e78 <__sflush_r+0x44>
 8005e6a:	686f      	ldr	r7, [r5, #4]
 8005e6c:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8005e6e:	1bd2      	subs	r2, r2, r7
 8005e70:	2800      	cmp	r0, #0
 8005e72:	d001      	beq.n	8005e78 <__sflush_r+0x44>
 8005e74:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 8005e76:	1a52      	subs	r2, r2, r1
 8005e78:	4640      	mov	r0, r8
 8005e7a:	69e9      	ldr	r1, [r5, #28]
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	f000 f8b3 	bl	8005fe8 <fflush+0x2c>
 8005e82:	1c42      	adds	r2, r0, #1
 8005e84:	d04e      	beq.n	8005f24 <__sflush_r+0xf0>
 8005e86:	89ab      	ldrh	r3, [r5, #12]
 8005e88:	4a3f      	ldr	r2, [pc, #252]	; (8005f88 <__sflush_r+0x154>)
 8005e8a:	6929      	ldr	r1, [r5, #16]
 8005e8c:	401a      	ands	r2, r3
 8005e8e:	81aa      	strh	r2, [r5, #12]
 8005e90:	2200      	movs	r2, #0
 8005e92:	606a      	str	r2, [r5, #4]
 8005e94:	6029      	str	r1, [r5, #0]
 8005e96:	04da      	lsls	r2, r3, #19
 8005e98:	d451      	bmi.n	8005f3e <__sflush_r+0x10a>
 8005e9a:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8005e9c:	4640      	mov	r0, r8
 8005e9e:	6006      	str	r6, [r0, #0]
 8005ea0:	2900      	cmp	r1, #0
 8005ea2:	d007      	beq.n	8005eb4 <__sflush_r+0x80>
 8005ea4:	1c2b      	adds	r3, r5, #0
 8005ea6:	3340      	adds	r3, #64	; 0x40
 8005ea8:	4299      	cmp	r1, r3
 8005eaa:	d001      	beq.n	8005eb0 <__sflush_r+0x7c>
 8005eac:	f000 f9dc 	bl	8006268 <_free_r>
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	632b      	str	r3, [r5, #48]	; 0x30
 8005eb4:	2000      	movs	r0, #0
 8005eb6:	bc04      	pop	{r2}
 8005eb8:	4690      	mov	r8, r2
 8005eba:	bcf0      	pop	{r4, r5, r6, r7}
 8005ebc:	bc02      	pop	{r1}
 8005ebe:	4708      	bx	r1
 8005ec0:	690e      	ldr	r6, [r1, #16]
 8005ec2:	2e00      	cmp	r6, #0
 8005ec4:	d0f6      	beq.n	8005eb4 <__sflush_r+0x80>
 8005ec6:	6809      	ldr	r1, [r1, #0]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	1b8c      	subs	r4, r1, r6
 8005ecc:	602e      	str	r6, [r5, #0]
 8005ece:	079f      	lsls	r7, r3, #30
 8005ed0:	d100      	bne.n	8005ed4 <__sflush_r+0xa0>
 8005ed2:	696a      	ldr	r2, [r5, #20]
 8005ed4:	60aa      	str	r2, [r5, #8]
 8005ed6:	2c00      	cmp	r4, #0
 8005ed8:	dc04      	bgt.n	8005ee4 <__sflush_r+0xb0>
 8005eda:	e7eb      	b.n	8005eb4 <__sflush_r+0x80>
 8005edc:	1836      	adds	r6, r6, r0
 8005ede:	1a24      	subs	r4, r4, r0
 8005ee0:	2c00      	cmp	r4, #0
 8005ee2:	dde7      	ble.n	8005eb4 <__sflush_r+0x80>
 8005ee4:	4640      	mov	r0, r8
 8005ee6:	69e9      	ldr	r1, [r5, #28]
 8005ee8:	1c32      	adds	r2, r6, #0
 8005eea:	1c23      	adds	r3, r4, #0
 8005eec:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 8005eee:	f000 f87c 	bl	8005fea <fflush+0x2e>
 8005ef2:	2800      	cmp	r0, #0
 8005ef4:	dcf2      	bgt.n	8005edc <__sflush_r+0xa8>
 8005ef6:	89aa      	ldrh	r2, [r5, #12]
 8005ef8:	2340      	movs	r3, #64	; 0x40
 8005efa:	4313      	orrs	r3, r2
 8005efc:	2001      	movs	r0, #1
 8005efe:	81ab      	strh	r3, [r5, #12]
 8005f00:	4240      	negs	r0, r0
 8005f02:	e7d8      	b.n	8005eb6 <__sflush_r+0x82>
 8005f04:	6bef      	ldr	r7, [r5, #60]	; 0x3c
 8005f06:	2f00      	cmp	r7, #0
 8005f08:	dca3      	bgt.n	8005e52 <__sflush_r+0x1e>
 8005f0a:	e7d3      	b.n	8005eb4 <__sflush_r+0x80>
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	4640      	mov	r0, r8
 8005f10:	69e9      	ldr	r1, [r5, #28]
 8005f12:	2301      	movs	r3, #1
 8005f14:	f000 f868 	bl	8005fe8 <fflush+0x2c>
 8005f18:	1c02      	adds	r2, r0, #0
 8005f1a:	1c43      	adds	r3, r0, #1
 8005f1c:	d01e      	beq.n	8005f5c <__sflush_r+0x128>
 8005f1e:	89a9      	ldrh	r1, [r5, #12]
 8005f20:	6aac      	ldr	r4, [r5, #40]	; 0x28
 8005f22:	e7a0      	b.n	8005e66 <__sflush_r+0x32>
 8005f24:	4647      	mov	r7, r8
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d10a      	bne.n	8005f42 <__sflush_r+0x10e>
 8005f2c:	89aa      	ldrh	r2, [r5, #12]
 8005f2e:	4916      	ldr	r1, [pc, #88]	; (8005f88 <__sflush_r+0x154>)
 8005f30:	692f      	ldr	r7, [r5, #16]
 8005f32:	4011      	ands	r1, r2
 8005f34:	81a9      	strh	r1, [r5, #12]
 8005f36:	606b      	str	r3, [r5, #4]
 8005f38:	602f      	str	r7, [r5, #0]
 8005f3a:	04d1      	lsls	r1, r2, #19
 8005f3c:	d5ad      	bpl.n	8005e9a <__sflush_r+0x66>
 8005f3e:	6528      	str	r0, [r5, #80]	; 0x50
 8005f40:	e7ab      	b.n	8005e9a <__sflush_r+0x66>
 8005f42:	2b1d      	cmp	r3, #29
 8005f44:	d001      	beq.n	8005f4a <__sflush_r+0x116>
 8005f46:	2b16      	cmp	r3, #22
 8005f48:	d119      	bne.n	8005f7e <__sflush_r+0x14a>
 8005f4a:	89aa      	ldrh	r2, [r5, #12]
 8005f4c:	4b0e      	ldr	r3, [pc, #56]	; (8005f88 <__sflush_r+0x154>)
 8005f4e:	4013      	ands	r3, r2
 8005f50:	81ab      	strh	r3, [r5, #12]
 8005f52:	2300      	movs	r3, #0
 8005f54:	606b      	str	r3, [r5, #4]
 8005f56:	692b      	ldr	r3, [r5, #16]
 8005f58:	602b      	str	r3, [r5, #0]
 8005f5a:	e79e      	b.n	8005e9a <__sflush_r+0x66>
 8005f5c:	4647      	mov	r7, r8
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d0dc      	beq.n	8005f1e <__sflush_r+0xea>
 8005f64:	2b16      	cmp	r3, #22
 8005f66:	d001      	beq.n	8005f6c <__sflush_r+0x138>
 8005f68:	2b1d      	cmp	r3, #29
 8005f6a:	d103      	bne.n	8005f74 <__sflush_r+0x140>
 8005f6c:	4640      	mov	r0, r8
 8005f6e:	6006      	str	r6, [r0, #0]
 8005f70:	2000      	movs	r0, #0
 8005f72:	e7a0      	b.n	8005eb6 <__sflush_r+0x82>
 8005f74:	89a9      	ldrh	r1, [r5, #12]
 8005f76:	2340      	movs	r3, #64	; 0x40
 8005f78:	430b      	orrs	r3, r1
 8005f7a:	81ab      	strh	r3, [r5, #12]
 8005f7c:	e79b      	b.n	8005eb6 <__sflush_r+0x82>
 8005f7e:	89aa      	ldrh	r2, [r5, #12]
 8005f80:	2340      	movs	r3, #64	; 0x40
 8005f82:	4313      	orrs	r3, r2
 8005f84:	81ab      	strh	r3, [r5, #12]
 8005f86:	e796      	b.n	8005eb6 <__sflush_r+0x82>
 8005f88:	fffff7ff 	.word	0xfffff7ff

08005f8c <_fflush_r>:
 8005f8c:	b538      	push	{r3, r4, r5, lr}
 8005f8e:	1c04      	adds	r4, r0, #0
 8005f90:	1c0d      	adds	r5, r1, #0
 8005f92:	2800      	cmp	r0, #0
 8005f94:	d002      	beq.n	8005f9c <_fflush_r+0x10>
 8005f96:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8005f98:	2a00      	cmp	r2, #0
 8005f9a:	d00b      	beq.n	8005fb4 <_fflush_r+0x28>
 8005f9c:	220c      	movs	r2, #12
 8005f9e:	5eab      	ldrsh	r3, [r5, r2]
 8005fa0:	2000      	movs	r0, #0
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d003      	beq.n	8005fae <_fflush_r+0x22>
 8005fa6:	1c20      	adds	r0, r4, #0
 8005fa8:	1c29      	adds	r1, r5, #0
 8005faa:	f7ff ff43 	bl	8005e34 <__sflush_r>
 8005fae:	bc38      	pop	{r3, r4, r5}
 8005fb0:	bc02      	pop	{r1}
 8005fb2:	4708      	bx	r1
 8005fb4:	f000 f870 	bl	8006098 <__sinit>
 8005fb8:	e7f0      	b.n	8005f9c <_fflush_r+0x10>
 8005fba:	46c0      	nop			; (mov r8, r8)

08005fbc <fflush>:
 8005fbc:	b508      	push	{r3, lr}
 8005fbe:	1e01      	subs	r1, r0, #0
 8005fc0:	d006      	beq.n	8005fd0 <fflush+0x14>
 8005fc2:	4b06      	ldr	r3, [pc, #24]	; (8005fdc <fflush+0x20>)
 8005fc4:	6818      	ldr	r0, [r3, #0]
 8005fc6:	f7ff ffe1 	bl	8005f8c <_fflush_r>
 8005fca:	bc08      	pop	{r3}
 8005fcc:	bc02      	pop	{r1}
 8005fce:	4708      	bx	r1
 8005fd0:	4b03      	ldr	r3, [pc, #12]	; (8005fe0 <fflush+0x24>)
 8005fd2:	4904      	ldr	r1, [pc, #16]	; (8005fe4 <fflush+0x28>)
 8005fd4:	6818      	ldr	r0, [r3, #0]
 8005fd6:	f000 fa3b 	bl	8006450 <_fwalk_reent>
 8005fda:	e7f6      	b.n	8005fca <fflush+0xe>
 8005fdc:	20000100 	.word	0x20000100
 8005fe0:	0800e84c 	.word	0x0800e84c
 8005fe4:	08005f8d 	.word	0x08005f8d
 8005fe8:	4720      	bx	r4
 8005fea:	4738      	bx	r7

08005fec <__fp_lock>:
 8005fec:	2000      	movs	r0, #0
 8005fee:	4770      	bx	lr

08005ff0 <__fp_unlock>:
 8005ff0:	2000      	movs	r0, #0
 8005ff2:	4770      	bx	lr

08005ff4 <_cleanup_r>:
 8005ff4:	b508      	push	{r3, lr}
 8005ff6:	4903      	ldr	r1, [pc, #12]	; (8006004 <_cleanup_r+0x10>)
 8005ff8:	f000 fa00 	bl	80063fc <_fwalk>
 8005ffc:	bc08      	pop	{r3}
 8005ffe:	bc01      	pop	{r0}
 8006000:	4700      	bx	r0
 8006002:	46c0      	nop			; (mov r8, r8)
 8006004:	08008bc1 	.word	0x08008bc1

08006008 <std.isra.0>:
 8006008:	2300      	movs	r3, #0
 800600a:	b510      	push	{r4, lr}
 800600c:	1c04      	adds	r4, r0, #0
 800600e:	6003      	str	r3, [r0, #0]
 8006010:	6043      	str	r3, [r0, #4]
 8006012:	6083      	str	r3, [r0, #8]
 8006014:	8181      	strh	r1, [r0, #12]
 8006016:	6643      	str	r3, [r0, #100]	; 0x64
 8006018:	81c2      	strh	r2, [r0, #14]
 800601a:	6103      	str	r3, [r0, #16]
 800601c:	6143      	str	r3, [r0, #20]
 800601e:	6183      	str	r3, [r0, #24]
 8006020:	2100      	movs	r1, #0
 8006022:	2208      	movs	r2, #8
 8006024:	305c      	adds	r0, #92	; 0x5c
 8006026:	f7fb f953 	bl	80012d0 <memset>
 800602a:	4b06      	ldr	r3, [pc, #24]	; (8006044 <std.isra.0+0x3c>)
 800602c:	6223      	str	r3, [r4, #32]
 800602e:	4b06      	ldr	r3, [pc, #24]	; (8006048 <std.isra.0+0x40>)
 8006030:	6263      	str	r3, [r4, #36]	; 0x24
 8006032:	4b06      	ldr	r3, [pc, #24]	; (800604c <std.isra.0+0x44>)
 8006034:	62a3      	str	r3, [r4, #40]	; 0x28
 8006036:	4b06      	ldr	r3, [pc, #24]	; (8006050 <std.isra.0+0x48>)
 8006038:	61e4      	str	r4, [r4, #28]
 800603a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800603c:	bc10      	pop	{r4}
 800603e:	bc01      	pop	{r0}
 8006040:	4700      	bx	r0
 8006042:	46c0      	nop			; (mov r8, r8)
 8006044:	080000a9 	.word	0x080000a9
 8006048:	080000d9 	.word	0x080000d9
 800604c:	08000115 	.word	0x08000115
 8006050:	08000145 	.word	0x08000145

08006054 <__sfmoreglue>:
 8006054:	b570      	push	{r4, r5, r6, lr}
 8006056:	2568      	movs	r5, #104	; 0x68
 8006058:	434d      	muls	r5, r1
 800605a:	1c0e      	adds	r6, r1, #0
 800605c:	1c29      	adds	r1, r5, #0
 800605e:	310c      	adds	r1, #12
 8006060:	f000 fe4a 	bl	8006cf8 <_malloc_r>
 8006064:	1e04      	subs	r4, r0, #0
 8006066:	d008      	beq.n	800607a <__sfmoreglue+0x26>
 8006068:	300c      	adds	r0, #12
 800606a:	2300      	movs	r3, #0
 800606c:	6023      	str	r3, [r4, #0]
 800606e:	6066      	str	r6, [r4, #4]
 8006070:	60a0      	str	r0, [r4, #8]
 8006072:	2100      	movs	r1, #0
 8006074:	1c2a      	adds	r2, r5, #0
 8006076:	f7fb f92b 	bl	80012d0 <memset>
 800607a:	1c20      	adds	r0, r4, #0
 800607c:	bc70      	pop	{r4, r5, r6}
 800607e:	bc02      	pop	{r1}
 8006080:	4708      	bx	r1
 8006082:	46c0      	nop			; (mov r8, r8)

08006084 <_cleanup>:
 8006084:	b508      	push	{r3, lr}
 8006086:	4b03      	ldr	r3, [pc, #12]	; (8006094 <_cleanup+0x10>)
 8006088:	6818      	ldr	r0, [r3, #0]
 800608a:	f7ff ffb3 	bl	8005ff4 <_cleanup_r>
 800608e:	bc08      	pop	{r3}
 8006090:	bc01      	pop	{r0}
 8006092:	4700      	bx	r0
 8006094:	0800e84c 	.word	0x0800e84c

08006098 <__sinit>:
 8006098:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800609a:	b510      	push	{r4, lr}
 800609c:	1c04      	adds	r4, r0, #0
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d11f      	bne.n	80060e2 <__sinit+0x4a>
 80060a2:	4a11      	ldr	r2, [pc, #68]	; (80060e8 <__sinit+0x50>)
 80060a4:	63c2      	str	r2, [r0, #60]	; 0x3c
 80060a6:	2201      	movs	r2, #1
 80060a8:	6382      	str	r2, [r0, #56]	; 0x38
 80060aa:	22b8      	movs	r2, #184	; 0xb8
 80060ac:	0092      	lsls	r2, r2, #2
 80060ae:	5083      	str	r3, [r0, r2]
 80060b0:	23b9      	movs	r3, #185	; 0xb9
 80060b2:	2203      	movs	r2, #3
 80060b4:	009b      	lsls	r3, r3, #2
 80060b6:	50c2      	str	r2, [r0, r3]
 80060b8:	23bb      	movs	r3, #187	; 0xbb
 80060ba:	009b      	lsls	r3, r3, #2
 80060bc:	18c2      	adds	r2, r0, r3
 80060be:	23ba      	movs	r3, #186	; 0xba
 80060c0:	009b      	lsls	r3, r3, #2
 80060c2:	50c2      	str	r2, [r0, r3]
 80060c4:	2104      	movs	r1, #4
 80060c6:	6840      	ldr	r0, [r0, #4]
 80060c8:	2200      	movs	r2, #0
 80060ca:	f7ff ff9d 	bl	8006008 <std.isra.0>
 80060ce:	68a0      	ldr	r0, [r4, #8]
 80060d0:	2109      	movs	r1, #9
 80060d2:	2201      	movs	r2, #1
 80060d4:	f7ff ff98 	bl	8006008 <std.isra.0>
 80060d8:	68e0      	ldr	r0, [r4, #12]
 80060da:	2112      	movs	r1, #18
 80060dc:	2202      	movs	r2, #2
 80060de:	f7ff ff93 	bl	8006008 <std.isra.0>
 80060e2:	bc10      	pop	{r4}
 80060e4:	bc01      	pop	{r0}
 80060e6:	4700      	bx	r0
 80060e8:	08005ff5 	.word	0x08005ff5

080060ec <__sfp>:
 80060ec:	4b22      	ldr	r3, [pc, #136]	; (8006178 <__sfp+0x8c>)
 80060ee:	b570      	push	{r4, r5, r6, lr}
 80060f0:	681d      	ldr	r5, [r3, #0]
 80060f2:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 80060f4:	1c06      	adds	r6, r0, #0
 80060f6:	2900      	cmp	r1, #0
 80060f8:	d02e      	beq.n	8006158 <__sfp+0x6c>
 80060fa:	23b8      	movs	r3, #184	; 0xb8
 80060fc:	009b      	lsls	r3, r3, #2
 80060fe:	18ed      	adds	r5, r5, r3
 8006100:	686b      	ldr	r3, [r5, #4]
 8006102:	68ac      	ldr	r4, [r5, #8]
 8006104:	3b01      	subs	r3, #1
 8006106:	d503      	bpl.n	8006110 <__sfp+0x24>
 8006108:	e021      	b.n	800614e <__sfp+0x62>
 800610a:	3468      	adds	r4, #104	; 0x68
 800610c:	3b01      	subs	r3, #1
 800610e:	d31e      	bcc.n	800614e <__sfp+0x62>
 8006110:	210c      	movs	r1, #12
 8006112:	5e62      	ldrsh	r2, [r4, r1]
 8006114:	2a00      	cmp	r2, #0
 8006116:	d1f8      	bne.n	800610a <__sfp+0x1e>
 8006118:	2301      	movs	r3, #1
 800611a:	425b      	negs	r3, r3
 800611c:	2500      	movs	r5, #0
 800611e:	81e3      	strh	r3, [r4, #14]
 8006120:	1c20      	adds	r0, r4, #0
 8006122:	2301      	movs	r3, #1
 8006124:	81a3      	strh	r3, [r4, #12]
 8006126:	6665      	str	r5, [r4, #100]	; 0x64
 8006128:	6025      	str	r5, [r4, #0]
 800612a:	60a5      	str	r5, [r4, #8]
 800612c:	6065      	str	r5, [r4, #4]
 800612e:	6125      	str	r5, [r4, #16]
 8006130:	6165      	str	r5, [r4, #20]
 8006132:	61a5      	str	r5, [r4, #24]
 8006134:	305c      	adds	r0, #92	; 0x5c
 8006136:	2100      	movs	r1, #0
 8006138:	2208      	movs	r2, #8
 800613a:	f7fb f8c9 	bl	80012d0 <memset>
 800613e:	6325      	str	r5, [r4, #48]	; 0x30
 8006140:	6365      	str	r5, [r4, #52]	; 0x34
 8006142:	6465      	str	r5, [r4, #68]	; 0x44
 8006144:	64a5      	str	r5, [r4, #72]	; 0x48
 8006146:	1c20      	adds	r0, r4, #0
 8006148:	bc70      	pop	{r4, r5, r6}
 800614a:	bc02      	pop	{r1}
 800614c:	4708      	bx	r1
 800614e:	6828      	ldr	r0, [r5, #0]
 8006150:	2800      	cmp	r0, #0
 8006152:	d005      	beq.n	8006160 <__sfp+0x74>
 8006154:	1c05      	adds	r5, r0, #0
 8006156:	e7d3      	b.n	8006100 <__sfp+0x14>
 8006158:	1c28      	adds	r0, r5, #0
 800615a:	f7ff ff9d 	bl	8006098 <__sinit>
 800615e:	e7cc      	b.n	80060fa <__sfp+0xe>
 8006160:	1c30      	adds	r0, r6, #0
 8006162:	2104      	movs	r1, #4
 8006164:	f7ff ff76 	bl	8006054 <__sfmoreglue>
 8006168:	6028      	str	r0, [r5, #0]
 800616a:	2800      	cmp	r0, #0
 800616c:	d1f2      	bne.n	8006154 <__sfp+0x68>
 800616e:	230c      	movs	r3, #12
 8006170:	6033      	str	r3, [r6, #0]
 8006172:	2400      	movs	r4, #0
 8006174:	e7e7      	b.n	8006146 <__sfp+0x5a>
 8006176:	46c0      	nop			; (mov r8, r8)
 8006178:	0800e84c 	.word	0x0800e84c

0800617c <__sfp_lock_acquire>:
 800617c:	4770      	bx	lr
 800617e:	46c0      	nop			; (mov r8, r8)

08006180 <__sfp_lock_release>:
 8006180:	4770      	bx	lr
 8006182:	46c0      	nop			; (mov r8, r8)

08006184 <__sinit_lock_acquire>:
 8006184:	4770      	bx	lr
 8006186:	46c0      	nop			; (mov r8, r8)

08006188 <__sinit_lock_release>:
 8006188:	4770      	bx	lr
 800618a:	46c0      	nop			; (mov r8, r8)

0800618c <__fp_lock_all>:
 800618c:	b508      	push	{r3, lr}
 800618e:	4b04      	ldr	r3, [pc, #16]	; (80061a0 <__fp_lock_all+0x14>)
 8006190:	4904      	ldr	r1, [pc, #16]	; (80061a4 <__fp_lock_all+0x18>)
 8006192:	6818      	ldr	r0, [r3, #0]
 8006194:	f000 f932 	bl	80063fc <_fwalk>
 8006198:	bc08      	pop	{r3}
 800619a:	bc01      	pop	{r0}
 800619c:	4700      	bx	r0
 800619e:	46c0      	nop			; (mov r8, r8)
 80061a0:	20000100 	.word	0x20000100
 80061a4:	08005fed 	.word	0x08005fed

080061a8 <__fp_unlock_all>:
 80061a8:	b508      	push	{r3, lr}
 80061aa:	4b04      	ldr	r3, [pc, #16]	; (80061bc <__fp_unlock_all+0x14>)
 80061ac:	4904      	ldr	r1, [pc, #16]	; (80061c0 <__fp_unlock_all+0x18>)
 80061ae:	6818      	ldr	r0, [r3, #0]
 80061b0:	f000 f924 	bl	80063fc <_fwalk>
 80061b4:	bc08      	pop	{r3}
 80061b6:	bc01      	pop	{r0}
 80061b8:	4700      	bx	r0
 80061ba:	46c0      	nop			; (mov r8, r8)
 80061bc:	20000100 	.word	0x20000100
 80061c0:	08005ff1 	.word	0x08005ff1

080061c4 <_malloc_trim_r>:
 80061c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061c6:	1c0f      	adds	r7, r1, #0
 80061c8:	1c04      	adds	r4, r0, #0
 80061ca:	f001 f8b7 	bl	800733c <__malloc_lock>
 80061ce:	4d21      	ldr	r5, [pc, #132]	; (8006254 <_malloc_trim_r+0x90>)
 80061d0:	68ab      	ldr	r3, [r5, #8]
 80061d2:	685e      	ldr	r6, [r3, #4]
 80061d4:	4a20      	ldr	r2, [pc, #128]	; (8006258 <_malloc_trim_r+0x94>)
 80061d6:	2303      	movs	r3, #3
 80061d8:	439e      	bics	r6, r3
 80061da:	18b3      	adds	r3, r6, r2
 80061dc:	1bdf      	subs	r7, r3, r7
 80061de:	0b3f      	lsrs	r7, r7, #12
 80061e0:	4b1e      	ldr	r3, [pc, #120]	; (800625c <_malloc_trim_r+0x98>)
 80061e2:	3f01      	subs	r7, #1
 80061e4:	033f      	lsls	r7, r7, #12
 80061e6:	429f      	cmp	r7, r3
 80061e8:	dd07      	ble.n	80061fa <_malloc_trim_r+0x36>
 80061ea:	1c20      	adds	r0, r4, #0
 80061ec:	2100      	movs	r1, #0
 80061ee:	f001 ff57 	bl	80080a0 <_sbrk_r>
 80061f2:	68aa      	ldr	r2, [r5, #8]
 80061f4:	1993      	adds	r3, r2, r6
 80061f6:	4298      	cmp	r0, r3
 80061f8:	d006      	beq.n	8006208 <_malloc_trim_r+0x44>
 80061fa:	1c20      	adds	r0, r4, #0
 80061fc:	f001 f8a0 	bl	8007340 <__malloc_unlock>
 8006200:	2000      	movs	r0, #0
 8006202:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006204:	bc02      	pop	{r1}
 8006206:	4708      	bx	r1
 8006208:	4279      	negs	r1, r7
 800620a:	1c20      	adds	r0, r4, #0
 800620c:	f001 ff48 	bl	80080a0 <_sbrk_r>
 8006210:	3001      	adds	r0, #1
 8006212:	d00d      	beq.n	8006230 <_malloc_trim_r+0x6c>
 8006214:	68ab      	ldr	r3, [r5, #8]
 8006216:	1bf6      	subs	r6, r6, r7
 8006218:	2201      	movs	r2, #1
 800621a:	4316      	orrs	r6, r2
 800621c:	605e      	str	r6, [r3, #4]
 800621e:	4b10      	ldr	r3, [pc, #64]	; (8006260 <_malloc_trim_r+0x9c>)
 8006220:	681a      	ldr	r2, [r3, #0]
 8006222:	1c20      	adds	r0, r4, #0
 8006224:	1bd7      	subs	r7, r2, r7
 8006226:	601f      	str	r7, [r3, #0]
 8006228:	f001 f88a 	bl	8007340 <__malloc_unlock>
 800622c:	2001      	movs	r0, #1
 800622e:	e7e8      	b.n	8006202 <_malloc_trim_r+0x3e>
 8006230:	1c20      	adds	r0, r4, #0
 8006232:	2100      	movs	r1, #0
 8006234:	f001 ff34 	bl	80080a0 <_sbrk_r>
 8006238:	68ab      	ldr	r3, [r5, #8]
 800623a:	1ac2      	subs	r2, r0, r3
 800623c:	2a0f      	cmp	r2, #15
 800623e:	dddc      	ble.n	80061fa <_malloc_trim_r+0x36>
 8006240:	4908      	ldr	r1, [pc, #32]	; (8006264 <_malloc_trim_r+0xa0>)
 8006242:	6809      	ldr	r1, [r1, #0]
 8006244:	1a40      	subs	r0, r0, r1
 8006246:	4906      	ldr	r1, [pc, #24]	; (8006260 <_malloc_trim_r+0x9c>)
 8006248:	6008      	str	r0, [r1, #0]
 800624a:	2101      	movs	r1, #1
 800624c:	430a      	orrs	r2, r1
 800624e:	605a      	str	r2, [r3, #4]
 8006250:	e7d3      	b.n	80061fa <_malloc_trim_r+0x36>
 8006252:	46c0      	nop			; (mov r8, r8)
 8006254:	200005d8 	.word	0x200005d8
 8006258:	00000fef 	.word	0x00000fef
 800625c:	00000fff 	.word	0x00000fff
 8006260:	20000bb4 	.word	0x20000bb4
 8006264:	200009e0 	.word	0x200009e0

08006268 <_free_r>:
 8006268:	b5f0      	push	{r4, r5, r6, r7, lr}
 800626a:	4647      	mov	r7, r8
 800626c:	b480      	push	{r7}
 800626e:	1c05      	adds	r5, r0, #0
 8006270:	1e0c      	subs	r4, r1, #0
 8006272:	d055      	beq.n	8006320 <_free_r+0xb8>
 8006274:	f001 f862 	bl	800733c <__malloc_lock>
 8006278:	1c21      	adds	r1, r4, #0
 800627a:	3908      	subs	r1, #8
 800627c:	6848      	ldr	r0, [r1, #4]
 800627e:	2701      	movs	r7, #1
 8006280:	1c03      	adds	r3, r0, #0
 8006282:	43bb      	bics	r3, r7
 8006284:	18ca      	adds	r2, r1, r3
 8006286:	6854      	ldr	r4, [r2, #4]
 8006288:	4680      	mov	r8, r0
 800628a:	2003      	movs	r0, #3
 800628c:	4384      	bics	r4, r0
 800628e:	1c20      	adds	r0, r4, #0
 8006290:	4c54      	ldr	r4, [pc, #336]	; (80063e4 <_free_r+0x17c>)
 8006292:	68a6      	ldr	r6, [r4, #8]
 8006294:	4296      	cmp	r6, r2
 8006296:	d062      	beq.n	800635e <_free_r+0xf6>
 8006298:	2600      	movs	r6, #0
 800629a:	46b4      	mov	ip, r6
 800629c:	4646      	mov	r6, r8
 800629e:	6050      	str	r0, [r2, #4]
 80062a0:	4237      	tst	r7, r6
 80062a2:	d10a      	bne.n	80062ba <_free_r+0x52>
 80062a4:	680e      	ldr	r6, [r1, #0]
 80062a6:	1b89      	subs	r1, r1, r6
 80062a8:	199b      	adds	r3, r3, r6
 80062aa:	1c27      	adds	r7, r4, #0
 80062ac:	688e      	ldr	r6, [r1, #8]
 80062ae:	3708      	adds	r7, #8
 80062b0:	42be      	cmp	r6, r7
 80062b2:	d06d      	beq.n	8006390 <_free_r+0x128>
 80062b4:	68cf      	ldr	r7, [r1, #12]
 80062b6:	60f7      	str	r7, [r6, #12]
 80062b8:	60be      	str	r6, [r7, #8]
 80062ba:	1817      	adds	r7, r2, r0
 80062bc:	687f      	ldr	r7, [r7, #4]
 80062be:	2601      	movs	r6, #1
 80062c0:	4237      	tst	r7, r6
 80062c2:	d107      	bne.n	80062d4 <_free_r+0x6c>
 80062c4:	181b      	adds	r3, r3, r0
 80062c6:	4660      	mov	r0, ip
 80062c8:	2800      	cmp	r0, #0
 80062ca:	d02e      	beq.n	800632a <_free_r+0xc2>
 80062cc:	6890      	ldr	r0, [r2, #8]
 80062ce:	68d2      	ldr	r2, [r2, #12]
 80062d0:	60c2      	str	r2, [r0, #12]
 80062d2:	6090      	str	r0, [r2, #8]
 80062d4:	2201      	movs	r2, #1
 80062d6:	1c18      	adds	r0, r3, #0
 80062d8:	4310      	orrs	r0, r2
 80062da:	4666      	mov	r6, ip
 80062dc:	6048      	str	r0, [r1, #4]
 80062de:	50cb      	str	r3, [r1, r3]
 80062e0:	2e00      	cmp	r6, #0
 80062e2:	d11a      	bne.n	800631a <_free_r+0xb2>
 80062e4:	4840      	ldr	r0, [pc, #256]	; (80063e8 <_free_r+0x180>)
 80062e6:	4283      	cmp	r3, r0
 80062e8:	d92b      	bls.n	8006342 <_free_r+0xda>
 80062ea:	0a5a      	lsrs	r2, r3, #9
 80062ec:	2a04      	cmp	r2, #4
 80062ee:	d852      	bhi.n	8006396 <_free_r+0x12e>
 80062f0:	099f      	lsrs	r7, r3, #6
 80062f2:	3738      	adds	r7, #56	; 0x38
 80062f4:	0078      	lsls	r0, r7, #1
 80062f6:	0080      	lsls	r0, r0, #2
 80062f8:	1820      	adds	r0, r4, r0
 80062fa:	6882      	ldr	r2, [r0, #8]
 80062fc:	2603      	movs	r6, #3
 80062fe:	4282      	cmp	r2, r0
 8006300:	d04f      	beq.n	80063a2 <_free_r+0x13a>
 8006302:	6854      	ldr	r4, [r2, #4]
 8006304:	43b4      	bics	r4, r6
 8006306:	42a3      	cmp	r3, r4
 8006308:	d202      	bcs.n	8006310 <_free_r+0xa8>
 800630a:	6892      	ldr	r2, [r2, #8]
 800630c:	4290      	cmp	r0, r2
 800630e:	d1f8      	bne.n	8006302 <_free_r+0x9a>
 8006310:	68d3      	ldr	r3, [r2, #12]
 8006312:	60cb      	str	r3, [r1, #12]
 8006314:	608a      	str	r2, [r1, #8]
 8006316:	60d1      	str	r1, [r2, #12]
 8006318:	6099      	str	r1, [r3, #8]
 800631a:	1c28      	adds	r0, r5, #0
 800631c:	f001 f810 	bl	8007340 <__malloc_unlock>
 8006320:	bc04      	pop	{r2}
 8006322:	4690      	mov	r8, r2
 8006324:	bcf0      	pop	{r4, r5, r6, r7}
 8006326:	bc01      	pop	{r0}
 8006328:	4700      	bx	r0
 800632a:	6890      	ldr	r0, [r2, #8]
 800632c:	4f2f      	ldr	r7, [pc, #188]	; (80063ec <_free_r+0x184>)
 800632e:	42b8      	cmp	r0, r7
 8006330:	d1cd      	bne.n	80062ce <_free_r+0x66>
 8006332:	431e      	orrs	r6, r3
 8006334:	60c1      	str	r1, [r0, #12]
 8006336:	6081      	str	r1, [r0, #8]
 8006338:	60c8      	str	r0, [r1, #12]
 800633a:	6088      	str	r0, [r1, #8]
 800633c:	604e      	str	r6, [r1, #4]
 800633e:	50cb      	str	r3, [r1, r3]
 8006340:	e7eb      	b.n	800631a <_free_r+0xb2>
 8006342:	08db      	lsrs	r3, r3, #3
 8006344:	1098      	asrs	r0, r3, #2
 8006346:	4082      	lsls	r2, r0
 8006348:	6860      	ldr	r0, [r4, #4]
 800634a:	00db      	lsls	r3, r3, #3
 800634c:	4302      	orrs	r2, r0
 800634e:	6062      	str	r2, [r4, #4]
 8006350:	18e4      	adds	r4, r4, r3
 8006352:	68a3      	ldr	r3, [r4, #8]
 8006354:	60cc      	str	r4, [r1, #12]
 8006356:	608b      	str	r3, [r1, #8]
 8006358:	60d9      	str	r1, [r3, #12]
 800635a:	60a1      	str	r1, [r4, #8]
 800635c:	e7dd      	b.n	800631a <_free_r+0xb2>
 800635e:	18c3      	adds	r3, r0, r3
 8006360:	4640      	mov	r0, r8
 8006362:	4207      	tst	r7, r0
 8006364:	d106      	bne.n	8006374 <_free_r+0x10c>
 8006366:	680a      	ldr	r2, [r1, #0]
 8006368:	1a89      	subs	r1, r1, r2
 800636a:	68c8      	ldr	r0, [r1, #12]
 800636c:	189b      	adds	r3, r3, r2
 800636e:	688a      	ldr	r2, [r1, #8]
 8006370:	60d0      	str	r0, [r2, #12]
 8006372:	6082      	str	r2, [r0, #8]
 8006374:	2201      	movs	r2, #1
 8006376:	431a      	orrs	r2, r3
 8006378:	604a      	str	r2, [r1, #4]
 800637a:	4a1d      	ldr	r2, [pc, #116]	; (80063f0 <_free_r+0x188>)
 800637c:	6812      	ldr	r2, [r2, #0]
 800637e:	60a1      	str	r1, [r4, #8]
 8006380:	4293      	cmp	r3, r2
 8006382:	d3ca      	bcc.n	800631a <_free_r+0xb2>
 8006384:	4b1b      	ldr	r3, [pc, #108]	; (80063f4 <_free_r+0x18c>)
 8006386:	1c28      	adds	r0, r5, #0
 8006388:	6819      	ldr	r1, [r3, #0]
 800638a:	f7ff ff1b 	bl	80061c4 <_malloc_trim_r>
 800638e:	e7c4      	b.n	800631a <_free_r+0xb2>
 8006390:	2601      	movs	r6, #1
 8006392:	46b4      	mov	ip, r6
 8006394:	e791      	b.n	80062ba <_free_r+0x52>
 8006396:	2a14      	cmp	r2, #20
 8006398:	d80c      	bhi.n	80063b4 <_free_r+0x14c>
 800639a:	1c17      	adds	r7, r2, #0
 800639c:	375b      	adds	r7, #91	; 0x5b
 800639e:	0078      	lsls	r0, r7, #1
 80063a0:	e7a9      	b.n	80062f6 <_free_r+0x8e>
 80063a2:	10bf      	asrs	r7, r7, #2
 80063a4:	2301      	movs	r3, #1
 80063a6:	40bb      	lsls	r3, r7
 80063a8:	1c1f      	adds	r7, r3, #0
 80063aa:	6863      	ldr	r3, [r4, #4]
 80063ac:	431f      	orrs	r7, r3
 80063ae:	6067      	str	r7, [r4, #4]
 80063b0:	1c13      	adds	r3, r2, #0
 80063b2:	e7ae      	b.n	8006312 <_free_r+0xaa>
 80063b4:	2a54      	cmp	r2, #84	; 0x54
 80063b6:	d803      	bhi.n	80063c0 <_free_r+0x158>
 80063b8:	0b1f      	lsrs	r7, r3, #12
 80063ba:	376e      	adds	r7, #110	; 0x6e
 80063bc:	0078      	lsls	r0, r7, #1
 80063be:	e79a      	b.n	80062f6 <_free_r+0x8e>
 80063c0:	20aa      	movs	r0, #170	; 0xaa
 80063c2:	0040      	lsls	r0, r0, #1
 80063c4:	4282      	cmp	r2, r0
 80063c6:	d803      	bhi.n	80063d0 <_free_r+0x168>
 80063c8:	0bdf      	lsrs	r7, r3, #15
 80063ca:	3777      	adds	r7, #119	; 0x77
 80063cc:	0078      	lsls	r0, r7, #1
 80063ce:	e792      	b.n	80062f6 <_free_r+0x8e>
 80063d0:	4809      	ldr	r0, [pc, #36]	; (80063f8 <_free_r+0x190>)
 80063d2:	4282      	cmp	r2, r0
 80063d4:	d803      	bhi.n	80063de <_free_r+0x176>
 80063d6:	0c9f      	lsrs	r7, r3, #18
 80063d8:	377c      	adds	r7, #124	; 0x7c
 80063da:	0078      	lsls	r0, r7, #1
 80063dc:	e78b      	b.n	80062f6 <_free_r+0x8e>
 80063de:	20fc      	movs	r0, #252	; 0xfc
 80063e0:	277e      	movs	r7, #126	; 0x7e
 80063e2:	e788      	b.n	80062f6 <_free_r+0x8e>
 80063e4:	200005d8 	.word	0x200005d8
 80063e8:	000001ff 	.word	0x000001ff
 80063ec:	200005e0 	.word	0x200005e0
 80063f0:	200009e4 	.word	0x200009e4
 80063f4:	20000bb0 	.word	0x20000bb0
 80063f8:	00000554 	.word	0x00000554

080063fc <_fwalk>:
 80063fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063fe:	22b8      	movs	r2, #184	; 0xb8
 8006400:	0092      	lsls	r2, r2, #2
 8006402:	4647      	mov	r7, r8
 8006404:	1886      	adds	r6, r0, r2
 8006406:	b480      	push	{r7}
 8006408:	4688      	mov	r8, r1
 800640a:	2700      	movs	r7, #0
 800640c:	2e00      	cmp	r6, #0
 800640e:	d018      	beq.n	8006442 <_fwalk+0x46>
 8006410:	6875      	ldr	r5, [r6, #4]
 8006412:	68b4      	ldr	r4, [r6, #8]
 8006414:	3d01      	subs	r5, #1
 8006416:	d411      	bmi.n	800643c <_fwalk+0x40>
 8006418:	340c      	adds	r4, #12
 800641a:	8823      	ldrh	r3, [r4, #0]
 800641c:	1c20      	adds	r0, r4, #0
 800641e:	380c      	subs	r0, #12
 8006420:	2b00      	cmp	r3, #0
 8006422:	d008      	beq.n	8006436 <_fwalk+0x3a>
 8006424:	2b01      	cmp	r3, #1
 8006426:	d906      	bls.n	8006436 <_fwalk+0x3a>
 8006428:	2202      	movs	r2, #2
 800642a:	5ea3      	ldrsh	r3, [r4, r2]
 800642c:	3301      	adds	r3, #1
 800642e:	d002      	beq.n	8006436 <_fwalk+0x3a>
 8006430:	f000 f83c 	bl	80064ac <_fwalk_reent+0x5c>
 8006434:	4307      	orrs	r7, r0
 8006436:	3468      	adds	r4, #104	; 0x68
 8006438:	3d01      	subs	r5, #1
 800643a:	d2ee      	bcs.n	800641a <_fwalk+0x1e>
 800643c:	6836      	ldr	r6, [r6, #0]
 800643e:	2e00      	cmp	r6, #0
 8006440:	d1e6      	bne.n	8006410 <_fwalk+0x14>
 8006442:	1c38      	adds	r0, r7, #0
 8006444:	bc04      	pop	{r2}
 8006446:	4690      	mov	r8, r2
 8006448:	bcf0      	pop	{r4, r5, r6, r7}
 800644a:	bc02      	pop	{r1}
 800644c:	4708      	bx	r1
 800644e:	46c0      	nop			; (mov r8, r8)

08006450 <_fwalk_reent>:
 8006450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006452:	22b8      	movs	r2, #184	; 0xb8
 8006454:	464f      	mov	r7, r9
 8006456:	4646      	mov	r6, r8
 8006458:	0092      	lsls	r2, r2, #2
 800645a:	b4c0      	push	{r6, r7}
 800645c:	4680      	mov	r8, r0
 800645e:	1c16      	adds	r6, r2, #0
 8006460:	4446      	add	r6, r8
 8006462:	4689      	mov	r9, r1
 8006464:	2700      	movs	r7, #0
 8006466:	2e00      	cmp	r6, #0
 8006468:	d019      	beq.n	800649e <_fwalk_reent+0x4e>
 800646a:	6875      	ldr	r5, [r6, #4]
 800646c:	68b4      	ldr	r4, [r6, #8]
 800646e:	3d01      	subs	r5, #1
 8006470:	d412      	bmi.n	8006498 <_fwalk_reent+0x48>
 8006472:	340c      	adds	r4, #12
 8006474:	8823      	ldrh	r3, [r4, #0]
 8006476:	1c21      	adds	r1, r4, #0
 8006478:	390c      	subs	r1, #12
 800647a:	2b00      	cmp	r3, #0
 800647c:	d009      	beq.n	8006492 <_fwalk_reent+0x42>
 800647e:	2b01      	cmp	r3, #1
 8006480:	d907      	bls.n	8006492 <_fwalk_reent+0x42>
 8006482:	2202      	movs	r2, #2
 8006484:	5ea3      	ldrsh	r3, [r4, r2]
 8006486:	3301      	adds	r3, #1
 8006488:	d003      	beq.n	8006492 <_fwalk_reent+0x42>
 800648a:	4640      	mov	r0, r8
 800648c:	f000 f80f 	bl	80064ae <_fwalk_reent+0x5e>
 8006490:	4307      	orrs	r7, r0
 8006492:	3468      	adds	r4, #104	; 0x68
 8006494:	3d01      	subs	r5, #1
 8006496:	d2ed      	bcs.n	8006474 <_fwalk_reent+0x24>
 8006498:	6836      	ldr	r6, [r6, #0]
 800649a:	2e00      	cmp	r6, #0
 800649c:	d1e5      	bne.n	800646a <_fwalk_reent+0x1a>
 800649e:	1c38      	adds	r0, r7, #0
 80064a0:	bc0c      	pop	{r2, r3}
 80064a2:	4690      	mov	r8, r2
 80064a4:	4699      	mov	r9, r3
 80064a6:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064a8:	bc02      	pop	{r1}
 80064aa:	4708      	bx	r1
 80064ac:	4740      	bx	r8
 80064ae:	4748      	bx	r9

080064b0 <rshift>:
 80064b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064b2:	2214      	movs	r2, #20
 80064b4:	1812      	adds	r2, r2, r0
 80064b6:	464f      	mov	r7, r9
 80064b8:	4691      	mov	r9, r2
 80064ba:	6902      	ldr	r2, [r0, #16]
 80064bc:	4646      	mov	r6, r8
 80064be:	b4c0      	push	{r6, r7}
 80064c0:	114b      	asrs	r3, r1, #5
 80064c2:	4293      	cmp	r3, r2
 80064c4:	da2e      	bge.n	8006524 <rshift+0x74>
 80064c6:	3304      	adds	r3, #4
 80064c8:	009b      	lsls	r3, r3, #2
 80064ca:	3204      	adds	r2, #4
 80064cc:	18c3      	adds	r3, r0, r3
 80064ce:	1d1c      	adds	r4, r3, #4
 80064d0:	0092      	lsls	r2, r2, #2
 80064d2:	1882      	adds	r2, r0, r2
 80064d4:	46a4      	mov	ip, r4
 80064d6:	241f      	movs	r4, #31
 80064d8:	3204      	adds	r2, #4
 80064da:	4021      	ands	r1, r4
 80064dc:	d02c      	beq.n	8006538 <rshift+0x88>
 80064de:	2420      	movs	r4, #32
 80064e0:	1a64      	subs	r4, r4, r1
 80064e2:	46a0      	mov	r8, r4
 80064e4:	685c      	ldr	r4, [r3, #4]
 80064e6:	4663      	mov	r3, ip
 80064e8:	3304      	adds	r3, #4
 80064ea:	40cc      	lsrs	r4, r1
 80064ec:	429a      	cmp	r2, r3
 80064ee:	d93e      	bls.n	800656e <rshift+0xbe>
 80064f0:	464d      	mov	r5, r9
 80064f2:	681e      	ldr	r6, [r3, #0]
 80064f4:	4647      	mov	r7, r8
 80064f6:	40be      	lsls	r6, r7
 80064f8:	4334      	orrs	r4, r6
 80064fa:	c510      	stmia	r5!, {r4}
 80064fc:	cb10      	ldmia	r3!, {r4}
 80064fe:	40cc      	lsrs	r4, r1
 8006500:	429a      	cmp	r2, r3
 8006502:	d8f6      	bhi.n	80064f2 <rshift+0x42>
 8006504:	4661      	mov	r1, ip
 8006506:	1a53      	subs	r3, r2, r1
 8006508:	3b05      	subs	r3, #5
 800650a:	089b      	lsrs	r3, r3, #2
 800650c:	3305      	adds	r3, #5
 800650e:	009b      	lsls	r3, r3, #2
 8006510:	18c3      	adds	r3, r0, r3
 8006512:	3304      	adds	r3, #4
 8006514:	601c      	str	r4, [r3, #0]
 8006516:	2c00      	cmp	r4, #0
 8006518:	d025      	beq.n	8006566 <rshift+0xb6>
 800651a:	3304      	adds	r3, #4
 800651c:	464c      	mov	r4, r9
 800651e:	1b1f      	subs	r7, r3, r4
 8006520:	10bf      	asrs	r7, r7, #2
 8006522:	e01c      	b.n	800655e <rshift+0xae>
 8006524:	2300      	movs	r3, #0
 8006526:	6103      	str	r3, [r0, #16]
 8006528:	2300      	movs	r3, #0
 800652a:	6143      	str	r3, [r0, #20]
 800652c:	bc0c      	pop	{r2, r3}
 800652e:	4690      	mov	r8, r2
 8006530:	4699      	mov	r9, r3
 8006532:	bcf0      	pop	{r4, r5, r6, r7}
 8006534:	bc01      	pop	{r0}
 8006536:	4700      	bx	r0
 8006538:	4663      	mov	r3, ip
 800653a:	4649      	mov	r1, r9
 800653c:	4562      	cmp	r2, ip
 800653e:	d9f1      	bls.n	8006524 <rshift+0x74>
 8006540:	cb10      	ldmia	r3!, {r4}
 8006542:	c110      	stmia	r1!, {r4}
 8006544:	429a      	cmp	r2, r3
 8006546:	d8fb      	bhi.n	8006540 <rshift+0x90>
 8006548:	4666      	mov	r6, ip
 800654a:	43f3      	mvns	r3, r6
 800654c:	189b      	adds	r3, r3, r2
 800654e:	089b      	lsrs	r3, r3, #2
 8006550:	3305      	adds	r3, #5
 8006552:	009b      	lsls	r3, r3, #2
 8006554:	18c3      	adds	r3, r0, r3
 8006556:	3304      	adds	r3, #4
 8006558:	4649      	mov	r1, r9
 800655a:	1a5f      	subs	r7, r3, r1
 800655c:	10bf      	asrs	r7, r7, #2
 800655e:	6107      	str	r7, [r0, #16]
 8006560:	2f00      	cmp	r7, #0
 8006562:	d1e3      	bne.n	800652c <rshift+0x7c>
 8006564:	e7e0      	b.n	8006528 <rshift+0x78>
 8006566:	464a      	mov	r2, r9
 8006568:	1a9f      	subs	r7, r3, r2
 800656a:	10bf      	asrs	r7, r7, #2
 800656c:	e7f7      	b.n	800655e <rshift+0xae>
 800656e:	464b      	mov	r3, r9
 8006570:	e7d0      	b.n	8006514 <rshift+0x64>
 8006572:	46c0      	nop			; (mov r8, r8)

08006574 <__hexdig_init>:
 8006574:	b510      	push	{r4, lr}
 8006576:	4a11      	ldr	r2, [pc, #68]	; (80065bc <__hexdig_init+0x48>)
 8006578:	4c11      	ldr	r4, [pc, #68]	; (80065c0 <__hexdig_init+0x4c>)
 800657a:	2300      	movs	r3, #0
 800657c:	2130      	movs	r1, #48	; 0x30
 800657e:	1c18      	adds	r0, r3, #0
 8006580:	3010      	adds	r0, #16
 8006582:	3301      	adds	r3, #1
 8006584:	5450      	strb	r0, [r2, r1]
 8006586:	5ce1      	ldrb	r1, [r4, r3]
 8006588:	2900      	cmp	r1, #0
 800658a:	d1f8      	bne.n	800657e <__hexdig_init+0xa>
 800658c:	4c0d      	ldr	r4, [pc, #52]	; (80065c4 <__hexdig_init+0x50>)
 800658e:	2300      	movs	r3, #0
 8006590:	2161      	movs	r1, #97	; 0x61
 8006592:	1c18      	adds	r0, r3, #0
 8006594:	301a      	adds	r0, #26
 8006596:	3301      	adds	r3, #1
 8006598:	5450      	strb	r0, [r2, r1]
 800659a:	5ce1      	ldrb	r1, [r4, r3]
 800659c:	2900      	cmp	r1, #0
 800659e:	d1f8      	bne.n	8006592 <__hexdig_init+0x1e>
 80065a0:	4c09      	ldr	r4, [pc, #36]	; (80065c8 <__hexdig_init+0x54>)
 80065a2:	2300      	movs	r3, #0
 80065a4:	2141      	movs	r1, #65	; 0x41
 80065a6:	1c18      	adds	r0, r3, #0
 80065a8:	301a      	adds	r0, #26
 80065aa:	3301      	adds	r3, #1
 80065ac:	5450      	strb	r0, [r2, r1]
 80065ae:	5ce1      	ldrb	r1, [r4, r3]
 80065b0:	2900      	cmp	r1, #0
 80065b2:	d1f8      	bne.n	80065a6 <__hexdig_init+0x32>
 80065b4:	bc10      	pop	{r4}
 80065b6:	bc01      	pop	{r0}
 80065b8:	4700      	bx	r0
 80065ba:	46c0      	nop			; (mov r8, r8)
 80065bc:	2000209c 	.word	0x2000209c
 80065c0:	0800ee94 	.word	0x0800ee94
 80065c4:	0800ee8c 	.word	0x0800ee8c
 80065c8:	0800ee84 	.word	0x0800ee84

080065cc <__gethex>:
 80065cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065ce:	465f      	mov	r7, fp
 80065d0:	4656      	mov	r6, sl
 80065d2:	4644      	mov	r4, r8
 80065d4:	464d      	mov	r5, r9
 80065d6:	b4f0      	push	{r4, r5, r6, r7}
 80065d8:	b091      	sub	sp, #68	; 0x44
 80065da:	930f      	str	r3, [sp, #60]	; 0x3c
 80065dc:	4688      	mov	r8, r1
 80065de:	4693      	mov	fp, r2
 80065e0:	900c      	str	r0, [sp, #48]	; 0x30
 80065e2:	f7fa fd93 	bl	800110c <_localeconv_r>
 80065e6:	6800      	ldr	r0, [r0, #0]
 80065e8:	9007      	str	r0, [sp, #28]
 80065ea:	f7f9 fdb3 	bl	8000154 <strlen>
 80065ee:	9f07      	ldr	r7, [sp, #28]
 80065f0:	183b      	adds	r3, r7, r0
 80065f2:	3b01      	subs	r3, #1
 80065f4:	781b      	ldrb	r3, [r3, #0]
 80065f6:	9008      	str	r0, [sp, #32]
 80065f8:	9306      	str	r3, [sp, #24]
 80065fa:	4ec5      	ldr	r6, [pc, #788]	; (8006910 <__gethex+0x344>)
 80065fc:	2330      	movs	r3, #48	; 0x30
 80065fe:	5cf3      	ldrb	r3, [r6, r3]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d100      	bne.n	8006606 <__gethex+0x3a>
 8006604:	e127      	b.n	8006856 <__gethex+0x28a>
 8006606:	4641      	mov	r1, r8
 8006608:	6808      	ldr	r0, [r1, #0]
 800660a:	7882      	ldrb	r2, [r0, #2]
 800660c:	1c84      	adds	r4, r0, #2
 800660e:	2a30      	cmp	r2, #48	; 0x30
 8006610:	d000      	beq.n	8006614 <__gethex+0x48>
 8006612:	e1d4      	b.n	80069be <__gethex+0x3f2>
 8006614:	2102      	movs	r1, #2
 8006616:	4249      	negs	r1, r1
 8006618:	1cc3      	adds	r3, r0, #3
 800661a:	1a09      	subs	r1, r1, r0
 800661c:	18cf      	adds	r7, r1, r3
 800661e:	1c1c      	adds	r4, r3, #0
 8006620:	3301      	adds	r3, #1
 8006622:	1e5a      	subs	r2, r3, #1
 8006624:	7812      	ldrb	r2, [r2, #0]
 8006626:	2a30      	cmp	r2, #48	; 0x30
 8006628:	d0f8      	beq.n	800661c <__gethex+0x50>
 800662a:	5cb3      	ldrb	r3, [r6, r2]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d100      	bne.n	8006632 <__gethex+0x66>
 8006630:	e0f0      	b.n	8006814 <__gethex+0x248>
 8006632:	7823      	ldrb	r3, [r4, #0]
 8006634:	5cf3      	ldrb	r3, [r6, r3]
 8006636:	2000      	movs	r0, #0
 8006638:	1c22      	adds	r2, r4, #0
 800663a:	4681      	mov	r9, r0
 800663c:	2b00      	cmp	r3, #0
 800663e:	d100      	bne.n	8006642 <__gethex+0x76>
 8006640:	e1f7      	b.n	8006a32 <__gethex+0x466>
 8006642:	1c15      	adds	r5, r2, #0
 8006644:	3501      	adds	r5, #1
 8006646:	782b      	ldrb	r3, [r5, #0]
 8006648:	5cf3      	ldrb	r3, [r6, r3]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d1fa      	bne.n	8006644 <__gethex+0x78>
 800664e:	2000      	movs	r0, #0
 8006650:	1c14      	adds	r4, r2, #0
 8006652:	4682      	mov	sl, r0
 8006654:	1c28      	adds	r0, r5, #0
 8006656:	9907      	ldr	r1, [sp, #28]
 8006658:	9a08      	ldr	r2, [sp, #32]
 800665a:	f7f9 fd83 	bl	8000164 <strncmp>
 800665e:	2800      	cmp	r0, #0
 8006660:	d023      	beq.n	80066aa <__gethex+0xde>
 8006662:	464a      	mov	r2, r9
 8006664:	782b      	ldrb	r3, [r5, #0]
 8006666:	2a00      	cmp	r2, #0
 8006668:	d100      	bne.n	800666c <__gethex+0xa0>
 800666a:	e198      	b.n	800699e <__gethex+0x3d2>
 800666c:	4648      	mov	r0, r9
 800666e:	1b42      	subs	r2, r0, r5
 8006670:	0092      	lsls	r2, r2, #2
 8006672:	920b      	str	r2, [sp, #44]	; 0x2c
 8006674:	2b50      	cmp	r3, #80	; 0x50
 8006676:	d100      	bne.n	800667a <__gethex+0xae>
 8006678:	e09e      	b.n	80067b8 <__gethex+0x1ec>
 800667a:	2b70      	cmp	r3, #112	; 0x70
 800667c:	d100      	bne.n	8006680 <__gethex+0xb4>
 800667e:	e09b      	b.n	80067b8 <__gethex+0x1ec>
 8006680:	1c2b      	adds	r3, r5, #0
 8006682:	4640      	mov	r0, r8
 8006684:	4651      	mov	r1, sl
 8006686:	6003      	str	r3, [r0, #0]
 8006688:	2900      	cmp	r1, #0
 800668a:	d014      	beq.n	80066b6 <__gethex+0xea>
 800668c:	427b      	negs	r3, r7
 800668e:	415f      	adcs	r7, r3
 8006690:	2406      	movs	r4, #6
 8006692:	427f      	negs	r7, r7
 8006694:	403c      	ands	r4, r7
 8006696:	1c20      	adds	r0, r4, #0
 8006698:	b011      	add	sp, #68	; 0x44
 800669a:	bc3c      	pop	{r2, r3, r4, r5}
 800669c:	4690      	mov	r8, r2
 800669e:	4699      	mov	r9, r3
 80066a0:	46a2      	mov	sl, r4
 80066a2:	46ab      	mov	fp, r5
 80066a4:	bcf0      	pop	{r4, r5, r6, r7}
 80066a6:	bc02      	pop	{r1}
 80066a8:	4708      	bx	r1
 80066aa:	4649      	mov	r1, r9
 80066ac:	2900      	cmp	r1, #0
 80066ae:	d100      	bne.n	80066b2 <__gethex+0xe6>
 80066b0:	e1af      	b.n	8006a12 <__gethex+0x446>
 80066b2:	782b      	ldrb	r3, [r5, #0]
 80066b4:	e7da      	b.n	800666c <__gethex+0xa0>
 80066b6:	1b2b      	subs	r3, r5, r4
 80066b8:	3b01      	subs	r3, #1
 80066ba:	2100      	movs	r1, #0
 80066bc:	2b07      	cmp	r3, #7
 80066be:	dd03      	ble.n	80066c8 <__gethex+0xfc>
 80066c0:	3101      	adds	r1, #1
 80066c2:	105b      	asrs	r3, r3, #1
 80066c4:	2b07      	cmp	r3, #7
 80066c6:	dcfb      	bgt.n	80066c0 <__gethex+0xf4>
 80066c8:	980c      	ldr	r0, [sp, #48]	; 0x30
 80066ca:	f000 fe3d 	bl	8007348 <_Balloc>
 80066ce:	900a      	str	r0, [sp, #40]	; 0x28
 80066d0:	3014      	adds	r0, #20
 80066d2:	900e      	str	r0, [sp, #56]	; 0x38
 80066d4:	42ac      	cmp	r4, r5
 80066d6:	d300      	bcc.n	80066da <__gethex+0x10e>
 80066d8:	e1c9      	b.n	8006a6e <__gethex+0x4a2>
 80066da:	4682      	mov	sl, r0
 80066dc:	9808      	ldr	r0, [sp, #32]
 80066de:	2201      	movs	r2, #1
 80066e0:	2700      	movs	r7, #0
 80066e2:	1a12      	subs	r2, r2, r0
 80066e4:	210f      	movs	r1, #15
 80066e6:	46a0      	mov	r8, r4
 80066e8:	1c2b      	adds	r3, r5, #0
 80066ea:	920d      	str	r2, [sp, #52]	; 0x34
 80066ec:	4689      	mov	r9, r1
 80066ee:	1c3c      	adds	r4, r7, #0
 80066f0:	e00c      	b.n	800670c <__gethex+0x140>
 80066f2:	2f20      	cmp	r7, #32
 80066f4:	d057      	beq.n	80067a6 <__gethex+0x1da>
 80066f6:	1c3a      	adds	r2, r7, #0
 80066f8:	3704      	adds	r7, #4
 80066fa:	782b      	ldrb	r3, [r5, #0]
 80066fc:	5cf3      	ldrb	r3, [r6, r3]
 80066fe:	4648      	mov	r0, r9
 8006700:	4003      	ands	r3, r0
 8006702:	4093      	lsls	r3, r2
 8006704:	431c      	orrs	r4, r3
 8006706:	1c2b      	adds	r3, r5, #0
 8006708:	4598      	cmp	r8, r3
 800670a:	d213      	bcs.n	8006734 <__gethex+0x168>
 800670c:	1e5d      	subs	r5, r3, #1
 800670e:	782b      	ldrb	r3, [r5, #0]
 8006710:	9a06      	ldr	r2, [sp, #24]
 8006712:	4293      	cmp	r3, r2
 8006714:	d1ed      	bne.n	80066f2 <__gethex+0x126>
 8006716:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006718:	18eb      	adds	r3, r5, r3
 800671a:	9309      	str	r3, [sp, #36]	; 0x24
 800671c:	4598      	cmp	r8, r3
 800671e:	d8e8      	bhi.n	80066f2 <__gethex+0x126>
 8006720:	1c18      	adds	r0, r3, #0
 8006722:	9907      	ldr	r1, [sp, #28]
 8006724:	9a08      	ldr	r2, [sp, #32]
 8006726:	f7f9 fd1d 	bl	8000164 <strncmp>
 800672a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800672c:	2800      	cmp	r0, #0
 800672e:	d1e0      	bne.n	80066f2 <__gethex+0x126>
 8006730:	4598      	cmp	r8, r3
 8006732:	d3eb      	bcc.n	800670c <__gethex+0x140>
 8006734:	46a0      	mov	r8, r4
 8006736:	4653      	mov	r3, sl
 8006738:	4647      	mov	r7, r8
 800673a:	c380      	stmia	r3!, {r7}
 800673c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800673e:	1bdb      	subs	r3, r3, r7
 8006740:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8006742:	109c      	asrs	r4, r3, #2
 8006744:	613c      	str	r4, [r7, #16]
 8006746:	4640      	mov	r0, r8
 8006748:	f000 fed8 	bl	80074fc <__hi0bits>
 800674c:	0164      	lsls	r4, r4, #5
 800674e:	1a24      	subs	r4, r4, r0
 8006750:	4658      	mov	r0, fp
 8006752:	6805      	ldr	r5, [r0, #0]
 8006754:	42ac      	cmp	r4, r5
 8006756:	dd00      	ble.n	800675a <__gethex+0x18e>
 8006758:	e0fa      	b.n	8006950 <__gethex+0x384>
 800675a:	2600      	movs	r6, #0
 800675c:	42ac      	cmp	r4, r5
 800675e:	da00      	bge.n	8006762 <__gethex+0x196>
 8006760:	e120      	b.n	80069a4 <__gethex+0x3d8>
 8006762:	4658      	mov	r0, fp
 8006764:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8006766:	6880      	ldr	r0, [r0, #8]
 8006768:	4287      	cmp	r7, r0
 800676a:	dd00      	ble.n	800676e <__gethex+0x1a2>
 800676c:	e0c0      	b.n	80068f0 <__gethex+0x324>
 800676e:	465a      	mov	r2, fp
 8006770:	6853      	ldr	r3, [r2, #4]
 8006772:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8006774:	429f      	cmp	r7, r3
 8006776:	da00      	bge.n	800677a <__gethex+0x1ae>
 8006778:	e0cc      	b.n	8006914 <__gethex+0x348>
 800677a:	2401      	movs	r4, #1
 800677c:	2e00      	cmp	r6, #0
 800677e:	d00b      	beq.n	8006798 <__gethex+0x1cc>
 8006780:	4658      	mov	r0, fp
 8006782:	68c3      	ldr	r3, [r0, #12]
 8006784:	2b02      	cmp	r3, #2
 8006786:	d100      	bne.n	800678a <__gethex+0x1be>
 8006788:	e17d      	b.n	8006a86 <__gethex+0x4ba>
 800678a:	2b03      	cmp	r3, #3
 800678c:	d100      	bne.n	8006790 <__gethex+0x1c4>
 800678e:	e175      	b.n	8006a7c <__gethex+0x4b0>
 8006790:	2b01      	cmp	r3, #1
 8006792:	d063      	beq.n	800685c <__gethex+0x290>
 8006794:	2310      	movs	r3, #16
 8006796:	431c      	orrs	r4, r3
 8006798:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800679a:	981a      	ldr	r0, [sp, #104]	; 0x68
 800679c:	6007      	str	r7, [r0, #0]
 800679e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80067a0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80067a2:	6007      	str	r7, [r0, #0]
 80067a4:	e777      	b.n	8006696 <__gethex+0xca>
 80067a6:	4657      	mov	r7, sl
 80067a8:	3704      	adds	r7, #4
 80067aa:	46ba      	mov	sl, r7
 80067ac:	3f04      	subs	r7, #4
 80067ae:	c710      	stmia	r7!, {r4}
 80067b0:	2200      	movs	r2, #0
 80067b2:	2704      	movs	r7, #4
 80067b4:	2400      	movs	r4, #0
 80067b6:	e7a0      	b.n	80066fa <__gethex+0x12e>
 80067b8:	786b      	ldrb	r3, [r5, #1]
 80067ba:	2b2b      	cmp	r3, #43	; 0x2b
 80067bc:	d100      	bne.n	80067c0 <__gethex+0x1f4>
 80067be:	e0c4      	b.n	800694a <__gethex+0x37e>
 80067c0:	2b2d      	cmp	r3, #45	; 0x2d
 80067c2:	d100      	bne.n	80067c6 <__gethex+0x1fa>
 80067c4:	e0bc      	b.n	8006940 <__gethex+0x374>
 80067c6:	2000      	movs	r0, #0
 80067c8:	1c6a      	adds	r2, r5, #1
 80067ca:	4684      	mov	ip, r0
 80067cc:	5cf1      	ldrb	r1, [r6, r3]
 80067ce:	1c2b      	adds	r3, r5, #0
 80067d0:	2900      	cmp	r1, #0
 80067d2:	d100      	bne.n	80067d6 <__gethex+0x20a>
 80067d4:	e755      	b.n	8006682 <__gethex+0xb6>
 80067d6:	2919      	cmp	r1, #25
 80067d8:	dd00      	ble.n	80067dc <__gethex+0x210>
 80067da:	e752      	b.n	8006682 <__gethex+0xb6>
 80067dc:	1c53      	adds	r3, r2, #1
 80067de:	7852      	ldrb	r2, [r2, #1]
 80067e0:	5cb2      	ldrb	r2, [r6, r2]
 80067e2:	3910      	subs	r1, #16
 80067e4:	2a00      	cmp	r2, #0
 80067e6:	d10b      	bne.n	8006800 <__gethex+0x234>
 80067e8:	e00c      	b.n	8006804 <__gethex+0x238>
 80067ea:	0088      	lsls	r0, r1, #2
 80067ec:	1841      	adds	r1, r0, r1
 80067ee:	0049      	lsls	r1, r1, #1
 80067f0:	188a      	adds	r2, r1, r2
 80067f2:	3301      	adds	r3, #1
 80067f4:	1c11      	adds	r1, r2, #0
 80067f6:	781a      	ldrb	r2, [r3, #0]
 80067f8:	5cb2      	ldrb	r2, [r6, r2]
 80067fa:	3910      	subs	r1, #16
 80067fc:	2a00      	cmp	r2, #0
 80067fe:	d001      	beq.n	8006804 <__gethex+0x238>
 8006800:	2a19      	cmp	r2, #25
 8006802:	ddf2      	ble.n	80067ea <__gethex+0x21e>
 8006804:	4660      	mov	r0, ip
 8006806:	2800      	cmp	r0, #0
 8006808:	d000      	beq.n	800680c <__gethex+0x240>
 800680a:	4249      	negs	r1, r1
 800680c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800680e:	1852      	adds	r2, r2, r1
 8006810:	920b      	str	r2, [sp, #44]	; 0x2c
 8006812:	e736      	b.n	8006682 <__gethex+0xb6>
 8006814:	1c20      	adds	r0, r4, #0
 8006816:	9907      	ldr	r1, [sp, #28]
 8006818:	9a08      	ldr	r2, [sp, #32]
 800681a:	f7f9 fca3 	bl	8000164 <strncmp>
 800681e:	2800      	cmp	r0, #0
 8006820:	d16f      	bne.n	8006902 <__gethex+0x336>
 8006822:	9b08      	ldr	r3, [sp, #32]
 8006824:	18e5      	adds	r5, r4, r3
 8006826:	782b      	ldrb	r3, [r5, #0]
 8006828:	5cf2      	ldrb	r2, [r6, r3]
 800682a:	2a00      	cmp	r2, #0
 800682c:	d100      	bne.n	8006830 <__gethex+0x264>
 800682e:	e0c8      	b.n	80069c2 <__gethex+0x3f6>
 8006830:	1c2a      	adds	r2, r5, #0
 8006832:	2b30      	cmp	r3, #48	; 0x30
 8006834:	d000      	beq.n	8006838 <__gethex+0x26c>
 8006836:	e107      	b.n	8006a48 <__gethex+0x47c>
 8006838:	3201      	adds	r2, #1
 800683a:	7813      	ldrb	r3, [r2, #0]
 800683c:	2b30      	cmp	r3, #48	; 0x30
 800683e:	d0fb      	beq.n	8006838 <__gethex+0x26c>
 8006840:	5cf3      	ldrb	r3, [r6, r3]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d000      	beq.n	8006848 <__gethex+0x27c>
 8006846:	e0ff      	b.n	8006a48 <__gethex+0x47c>
 8006848:	2101      	movs	r1, #1
 800684a:	46a9      	mov	r9, r5
 800684c:	1c14      	adds	r4, r2, #0
 800684e:	1c15      	adds	r5, r2, #0
 8006850:	468a      	mov	sl, r1
 8006852:	2701      	movs	r7, #1
 8006854:	e6fe      	b.n	8006654 <__gethex+0x88>
 8006856:	f7ff fe8d 	bl	8006574 <__hexdig_init>
 800685a:	e6d4      	b.n	8006606 <__gethex+0x3a>
 800685c:	07b1      	lsls	r1, r6, #30
 800685e:	d599      	bpl.n	8006794 <__gethex+0x1c8>
 8006860:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006862:	6812      	ldr	r2, [r2, #0]
 8006864:	4316      	orrs	r6, r2
 8006866:	4233      	tst	r3, r6
 8006868:	d094      	beq.n	8006794 <__gethex+0x1c8>
 800686a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800686c:	693e      	ldr	r6, [r7, #16]
 800686e:	1d30      	adds	r0, r6, #4
 8006870:	0080      	lsls	r0, r0, #2
 8006872:	1838      	adds	r0, r7, r0
 8006874:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006876:	3004      	adds	r0, #4
 8006878:	2100      	movs	r1, #0
 800687a:	681a      	ldr	r2, [r3, #0]
 800687c:	1c57      	adds	r7, r2, #1
 800687e:	d000      	beq.n	8006882 <__gethex+0x2b6>
 8006880:	e119      	b.n	8006ab6 <__gethex+0x4ea>
 8006882:	c302      	stmia	r3!, {r1}
 8006884:	4298      	cmp	r0, r3
 8006886:	d8f8      	bhi.n	800687a <__gethex+0x2ae>
 8006888:	980a      	ldr	r0, [sp, #40]	; 0x28
 800688a:	6880      	ldr	r0, [r0, #8]
 800688c:	1c33      	adds	r3, r6, #0
 800688e:	4286      	cmp	r6, r0
 8006890:	db00      	blt.n	8006894 <__gethex+0x2c8>
 8006892:	e12a      	b.n	8006aea <__gethex+0x51e>
 8006894:	1d1a      	adds	r2, r3, #4
 8006896:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8006898:	0092      	lsls	r2, r2, #2
 800689a:	18ba      	adds	r2, r7, r2
 800689c:	2101      	movs	r1, #1
 800689e:	3301      	adds	r3, #1
 80068a0:	6051      	str	r1, [r2, #4]
 80068a2:	613b      	str	r3, [r7, #16]
 80068a4:	2c02      	cmp	r4, #2
 80068a6:	d100      	bne.n	80068aa <__gethex+0x2de>
 80068a8:	e108      	b.n	8006abc <__gethex+0x4f0>
 80068aa:	980a      	ldr	r0, [sp, #40]	; 0x28
 80068ac:	6900      	ldr	r0, [r0, #16]
 80068ae:	4286      	cmp	r6, r0
 80068b0:	db11      	blt.n	80068d6 <__gethex+0x30a>
 80068b2:	231f      	movs	r3, #31
 80068b4:	401d      	ands	r5, r3
 80068b6:	2421      	movs	r4, #33	; 0x21
 80068b8:	2d00      	cmp	r5, #0
 80068ba:	d100      	bne.n	80068be <__gethex+0x2f2>
 80068bc:	e76c      	b.n	8006798 <__gethex+0x1cc>
 80068be:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80068c0:	1cf3      	adds	r3, r6, #3
 80068c2:	009b      	lsls	r3, r3, #2
 80068c4:	18fb      	adds	r3, r7, r3
 80068c6:	6858      	ldr	r0, [r3, #4]
 80068c8:	f000 fe18 	bl	80074fc <__hi0bits>
 80068cc:	2320      	movs	r3, #32
 80068ce:	1b5d      	subs	r5, r3, r5
 80068d0:	42a8      	cmp	r0, r5
 80068d2:	db00      	blt.n	80068d6 <__gethex+0x30a>
 80068d4:	e760      	b.n	8006798 <__gethex+0x1cc>
 80068d6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80068d8:	2101      	movs	r1, #1
 80068da:	f7ff fde9 	bl	80064b0 <rshift>
 80068de:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80068e0:	4658      	mov	r0, fp
 80068e2:	6883      	ldr	r3, [r0, #8]
 80068e4:	3701      	adds	r7, #1
 80068e6:	970b      	str	r7, [sp, #44]	; 0x2c
 80068e8:	2421      	movs	r4, #33	; 0x21
 80068ea:	429f      	cmp	r7, r3
 80068ec:	dc00      	bgt.n	80068f0 <__gethex+0x324>
 80068ee:	e753      	b.n	8006798 <__gethex+0x1cc>
 80068f0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80068f2:	980c      	ldr	r0, [sp, #48]	; 0x30
 80068f4:	f000 fd52 	bl	800739c <_Bfree>
 80068f8:	991a      	ldr	r1, [sp, #104]	; 0x68
 80068fa:	2300      	movs	r3, #0
 80068fc:	600b      	str	r3, [r1, #0]
 80068fe:	24a3      	movs	r4, #163	; 0xa3
 8006900:	e6c9      	b.n	8006696 <__gethex+0xca>
 8006902:	2100      	movs	r1, #0
 8006904:	2201      	movs	r2, #1
 8006906:	7823      	ldrb	r3, [r4, #0]
 8006908:	1c25      	adds	r5, r4, #0
 800690a:	910b      	str	r1, [sp, #44]	; 0x2c
 800690c:	4692      	mov	sl, r2
 800690e:	e6b1      	b.n	8006674 <__gethex+0xa8>
 8006910:	2000209c 	.word	0x2000209c
 8006914:	1bdc      	subs	r4, r3, r7
 8006916:	42a5      	cmp	r5, r4
 8006918:	dc58      	bgt.n	80069cc <__gethex+0x400>
 800691a:	68d2      	ldr	r2, [r2, #12]
 800691c:	2a02      	cmp	r2, #2
 800691e:	d100      	bne.n	8006922 <__gethex+0x356>
 8006920:	e095      	b.n	8006a4e <__gethex+0x482>
 8006922:	2a03      	cmp	r2, #3
 8006924:	d100      	bne.n	8006928 <__gethex+0x35c>
 8006926:	e0c1      	b.n	8006aac <__gethex+0x4e0>
 8006928:	2a01      	cmp	r2, #1
 800692a:	d100      	bne.n	800692e <__gethex+0x362>
 800692c:	e0af      	b.n	8006a8e <__gethex+0x4c2>
 800692e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006930:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006932:	f000 fd33 	bl	800739c <_Bfree>
 8006936:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006938:	2300      	movs	r3, #0
 800693a:	600b      	str	r3, [r1, #0]
 800693c:	2450      	movs	r4, #80	; 0x50
 800693e:	e6aa      	b.n	8006696 <__gethex+0xca>
 8006940:	2101      	movs	r1, #1
 8006942:	468c      	mov	ip, r1
 8006944:	1caa      	adds	r2, r5, #2
 8006946:	78ab      	ldrb	r3, [r5, #2]
 8006948:	e740      	b.n	80067cc <__gethex+0x200>
 800694a:	2200      	movs	r2, #0
 800694c:	4694      	mov	ip, r2
 800694e:	e7f9      	b.n	8006944 <__gethex+0x378>
 8006950:	1b64      	subs	r4, r4, r5
 8006952:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006954:	1c21      	adds	r1, r4, #0
 8006956:	f001 f981 	bl	8007c5c <__any_on>
 800695a:	2600      	movs	r6, #0
 800695c:	2800      	cmp	r0, #0
 800695e:	d016      	beq.n	800698e <__gethex+0x3c2>
 8006960:	1e63      	subs	r3, r4, #1
 8006962:	221f      	movs	r2, #31
 8006964:	401a      	ands	r2, r3
 8006966:	2101      	movs	r1, #1
 8006968:	4091      	lsls	r1, r2
 800696a:	1c0a      	adds	r2, r1, #0
 800696c:	1159      	asrs	r1, r3, #5
 800696e:	3104      	adds	r1, #4
 8006970:	0089      	lsls	r1, r1, #2
 8006972:	1879      	adds	r1, r7, r1
 8006974:	6849      	ldr	r1, [r1, #4]
 8006976:	2601      	movs	r6, #1
 8006978:	4211      	tst	r1, r2
 800697a:	d008      	beq.n	800698e <__gethex+0x3c2>
 800697c:	2b01      	cmp	r3, #1
 800697e:	dd7b      	ble.n	8006a78 <__gethex+0x4ac>
 8006980:	1ea1      	subs	r1, r4, #2
 8006982:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006984:	f001 f96a 	bl	8007c5c <__any_on>
 8006988:	2800      	cmp	r0, #0
 800698a:	d075      	beq.n	8006a78 <__gethex+0x4ac>
 800698c:	2603      	movs	r6, #3
 800698e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006990:	1c21      	adds	r1, r4, #0
 8006992:	f7ff fd8d 	bl	80064b0 <rshift>
 8006996:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8006998:	193f      	adds	r7, r7, r4
 800699a:	970b      	str	r7, [sp, #44]	; 0x2c
 800699c:	e6e1      	b.n	8006762 <__gethex+0x196>
 800699e:	2000      	movs	r0, #0
 80069a0:	900b      	str	r0, [sp, #44]	; 0x2c
 80069a2:	e667      	b.n	8006674 <__gethex+0xa8>
 80069a4:	1b2c      	subs	r4, r5, r4
 80069a6:	980c      	ldr	r0, [sp, #48]	; 0x30
 80069a8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80069aa:	1c22      	adds	r2, r4, #0
 80069ac:	f000 ff08 	bl	80077c0 <__lshift>
 80069b0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80069b2:	900a      	str	r0, [sp, #40]	; 0x28
 80069b4:	1b3f      	subs	r7, r7, r4
 80069b6:	3014      	adds	r0, #20
 80069b8:	970b      	str	r7, [sp, #44]	; 0x2c
 80069ba:	900e      	str	r0, [sp, #56]	; 0x38
 80069bc:	e6d1      	b.n	8006762 <__gethex+0x196>
 80069be:	2700      	movs	r7, #0
 80069c0:	e633      	b.n	800662a <__gethex+0x5e>
 80069c2:	2100      	movs	r1, #0
 80069c4:	2201      	movs	r2, #1
 80069c6:	910b      	str	r1, [sp, #44]	; 0x2c
 80069c8:	4692      	mov	sl, r2
 80069ca:	e653      	b.n	8006674 <__gethex+0xa8>
 80069cc:	1e67      	subs	r7, r4, #1
 80069ce:	2e00      	cmp	r6, #0
 80069d0:	d12d      	bne.n	8006a2e <__gethex+0x462>
 80069d2:	2f00      	cmp	r7, #0
 80069d4:	dd04      	ble.n	80069e0 <__gethex+0x414>
 80069d6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80069d8:	1c39      	adds	r1, r7, #0
 80069da:	f001 f93f 	bl	8007c5c <__any_on>
 80069de:	1c06      	adds	r6, r0, #0
 80069e0:	221f      	movs	r2, #31
 80069e2:	117b      	asrs	r3, r7, #5
 80069e4:	4017      	ands	r7, r2
 80069e6:	2201      	movs	r2, #1
 80069e8:	40ba      	lsls	r2, r7
 80069ea:	1c17      	adds	r7, r2, #0
 80069ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80069ee:	009b      	lsls	r3, r3, #2
 80069f0:	58d3      	ldr	r3, [r2, r3]
 80069f2:	423b      	tst	r3, r7
 80069f4:	d001      	beq.n	80069fa <__gethex+0x42e>
 80069f6:	2302      	movs	r3, #2
 80069f8:	431e      	orrs	r6, r3
 80069fa:	1c21      	adds	r1, r4, #0
 80069fc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80069fe:	465f      	mov	r7, fp
 8006a00:	f7ff fd56 	bl	80064b0 <rshift>
 8006a04:	687f      	ldr	r7, [r7, #4]
 8006a06:	1b2d      	subs	r5, r5, r4
 8006a08:	970b      	str	r7, [sp, #44]	; 0x2c
 8006a0a:	2402      	movs	r4, #2
 8006a0c:	e6b6      	b.n	800677c <__gethex+0x1b0>
 8006a0e:	2200      	movs	r2, #0
 8006a10:	4692      	mov	sl, r2
 8006a12:	9b08      	ldr	r3, [sp, #32]
 8006a14:	18e9      	adds	r1, r5, r3
 8006a16:	780b      	ldrb	r3, [r1, #0]
 8006a18:	5cf2      	ldrb	r2, [r6, r3]
 8006a1a:	1c0d      	adds	r5, r1, #0
 8006a1c:	2a00      	cmp	r2, #0
 8006a1e:	d004      	beq.n	8006a2a <__gethex+0x45e>
 8006a20:	3501      	adds	r5, #1
 8006a22:	782b      	ldrb	r3, [r5, #0]
 8006a24:	5cf2      	ldrb	r2, [r6, r3]
 8006a26:	2a00      	cmp	r2, #0
 8006a28:	d1fa      	bne.n	8006a20 <__gethex+0x454>
 8006a2a:	4689      	mov	r9, r1
 8006a2c:	e61e      	b.n	800666c <__gethex+0xa0>
 8006a2e:	2601      	movs	r6, #1
 8006a30:	e7d6      	b.n	80069e0 <__gethex+0x414>
 8006a32:	1c20      	adds	r0, r4, #0
 8006a34:	9907      	ldr	r1, [sp, #28]
 8006a36:	9a08      	ldr	r2, [sp, #32]
 8006a38:	f7f9 fb94 	bl	8000164 <strncmp>
 8006a3c:	1c25      	adds	r5, r4, #0
 8006a3e:	2800      	cmp	r0, #0
 8006a40:	d0e5      	beq.n	8006a0e <__gethex+0x442>
 8006a42:	2100      	movs	r1, #0
 8006a44:	468a      	mov	sl, r1
 8006a46:	e60c      	b.n	8006662 <__gethex+0x96>
 8006a48:	46a9      	mov	r9, r5
 8006a4a:	2701      	movs	r7, #1
 8006a4c:	e5f9      	b.n	8006642 <__gethex+0x76>
 8006a4e:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8006a50:	2900      	cmp	r1, #0
 8006a52:	d000      	beq.n	8006a56 <__gethex+0x48a>
 8006a54:	e76b      	b.n	800692e <__gethex+0x362>
 8006a56:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8006a58:	603b      	str	r3, [r7, #0]
 8006a5a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	613b      	str	r3, [r7, #16]
 8006a60:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8006a62:	981a      	ldr	r0, [sp, #104]	; 0x68
 8006a64:	603b      	str	r3, [r7, #0]
 8006a66:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8006a68:	2462      	movs	r4, #98	; 0x62
 8006a6a:	6007      	str	r7, [r0, #0]
 8006a6c:	e613      	b.n	8006696 <__gethex+0xca>
 8006a6e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8006a70:	2200      	movs	r2, #0
 8006a72:	468a      	mov	sl, r1
 8006a74:	4690      	mov	r8, r2
 8006a76:	e65e      	b.n	8006736 <__gethex+0x16a>
 8006a78:	2602      	movs	r6, #2
 8006a7a:	e788      	b.n	800698e <__gethex+0x3c2>
 8006a7c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d100      	bne.n	8006a84 <__gethex+0x4b8>
 8006a82:	e687      	b.n	8006794 <__gethex+0x1c8>
 8006a84:	e6f1      	b.n	800686a <__gethex+0x29e>
 8006a86:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8006a88:	2301      	movs	r3, #1
 8006a8a:	1bdb      	subs	r3, r3, r7
 8006a8c:	e7f7      	b.n	8006a7e <__gethex+0x4b2>
 8006a8e:	42ac      	cmp	r4, r5
 8006a90:	d000      	beq.n	8006a94 <__gethex+0x4c8>
 8006a92:	e74c      	b.n	800692e <__gethex+0x362>
 8006a94:	2d01      	cmp	r5, #1
 8006a96:	ddde      	ble.n	8006a56 <__gethex+0x48a>
 8006a98:	1e69      	subs	r1, r5, #1
 8006a9a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006a9c:	f001 f8de 	bl	8007c5c <__any_on>
 8006aa0:	2800      	cmp	r0, #0
 8006aa2:	d100      	bne.n	8006aa6 <__gethex+0x4da>
 8006aa4:	e743      	b.n	800692e <__gethex+0x362>
 8006aa6:	4658      	mov	r0, fp
 8006aa8:	6843      	ldr	r3, [r0, #4]
 8006aaa:	e7d4      	b.n	8006a56 <__gethex+0x48a>
 8006aac:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006aae:	2a00      	cmp	r2, #0
 8006ab0:	d100      	bne.n	8006ab4 <__gethex+0x4e8>
 8006ab2:	e73c      	b.n	800692e <__gethex+0x362>
 8006ab4:	e7cf      	b.n	8006a56 <__gethex+0x48a>
 8006ab6:	3201      	adds	r2, #1
 8006ab8:	601a      	str	r2, [r3, #0]
 8006aba:	e6f3      	b.n	80068a4 <__gethex+0x2d8>
 8006abc:	4658      	mov	r0, fp
 8006abe:	6803      	ldr	r3, [r0, #0]
 8006ac0:	3b01      	subs	r3, #1
 8006ac2:	2422      	movs	r4, #34	; 0x22
 8006ac4:	42ab      	cmp	r3, r5
 8006ac6:	d000      	beq.n	8006aca <__gethex+0x4fe>
 8006ac8:	e666      	b.n	8006798 <__gethex+0x1cc>
 8006aca:	231f      	movs	r3, #31
 8006acc:	402b      	ands	r3, r5
 8006ace:	2201      	movs	r2, #1
 8006ad0:	409a      	lsls	r2, r3
 8006ad2:	1c13      	adds	r3, r2, #0
 8006ad4:	116a      	asrs	r2, r5, #5
 8006ad6:	3204      	adds	r2, #4
 8006ad8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8006ada:	0092      	lsls	r2, r2, #2
 8006adc:	18ba      	adds	r2, r7, r2
 8006ade:	6852      	ldr	r2, [r2, #4]
 8006ae0:	4013      	ands	r3, r2
 8006ae2:	1e5a      	subs	r2, r3, #1
 8006ae4:	4193      	sbcs	r3, r2
 8006ae6:	1ae4      	subs	r4, r4, r3
 8006ae8:	e656      	b.n	8006798 <__gethex+0x1cc>
 8006aea:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006aec:	6849      	ldr	r1, [r1, #4]
 8006aee:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006af0:	9103      	str	r1, [sp, #12]
 8006af2:	3101      	adds	r1, #1
 8006af4:	f000 fc28 	bl	8007348 <_Balloc>
 8006af8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006afa:	6912      	ldr	r2, [r2, #16]
 8006afc:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006afe:	9202      	str	r2, [sp, #8]
 8006b00:	3202      	adds	r2, #2
 8006b02:	1c07      	adds	r7, r0, #0
 8006b04:	310c      	adds	r1, #12
 8006b06:	0092      	lsls	r2, r2, #2
 8006b08:	300c      	adds	r0, #12
 8006b0a:	f000 fbcf 	bl	80072ac <memcpy>
 8006b0e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006b10:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006b12:	f000 fc43 	bl	800739c <_Bfree>
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	970a      	str	r7, [sp, #40]	; 0x28
 8006b1a:	e6bb      	b.n	8006894 <__gethex+0x2c8>

08006b1c <__hexnan>:
 8006b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b1e:	4644      	mov	r4, r8
 8006b20:	465f      	mov	r7, fp
 8006b22:	4656      	mov	r6, sl
 8006b24:	464d      	mov	r5, r9
 8006b26:	b4f0      	push	{r4, r5, r6, r7}
 8006b28:	b087      	sub	sp, #28
 8006b2a:	9005      	str	r0, [sp, #20]
 8006b2c:	4f71      	ldr	r7, [pc, #452]	; (8006cf4 <__hexnan+0x1d8>)
 8006b2e:	2330      	movs	r3, #48	; 0x30
 8006b30:	5cfb      	ldrb	r3, [r7, r3]
 8006b32:	1c0c      	adds	r4, r1, #0
 8006b34:	4690      	mov	r8, r2
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d100      	bne.n	8006b3c <__hexnan+0x20>
 8006b3a:	e0cc      	b.n	8006cd6 <__hexnan+0x1ba>
 8006b3c:	6822      	ldr	r2, [r4, #0]
 8006b3e:	211f      	movs	r1, #31
 8006b40:	1153      	asrs	r3, r2, #5
 8006b42:	009b      	lsls	r3, r3, #2
 8006b44:	4011      	ands	r1, r2
 8006b46:	4443      	add	r3, r8
 8006b48:	9104      	str	r1, [sp, #16]
 8006b4a:	2900      	cmp	r1, #0
 8006b4c:	d000      	beq.n	8006b50 <__hexnan+0x34>
 8006b4e:	3304      	adds	r3, #4
 8006b50:	3b04      	subs	r3, #4
 8006b52:	9303      	str	r3, [sp, #12]
 8006b54:	9903      	ldr	r1, [sp, #12]
 8006b56:	9c05      	ldr	r4, [sp, #20]
 8006b58:	2300      	movs	r3, #0
 8006b5a:	600b      	str	r3, [r1, #0]
 8006b5c:	6823      	ldr	r3, [r4, #0]
 8006b5e:	4689      	mov	r9, r1
 8006b60:	1c0e      	adds	r6, r1, #0
 8006b62:	7859      	ldrb	r1, [r3, #1]
 8006b64:	2200      	movs	r2, #0
 8006b66:	2000      	movs	r0, #0
 8006b68:	9202      	str	r2, [sp, #8]
 8006b6a:	4694      	mov	ip, r2
 8006b6c:	2900      	cmp	r1, #0
 8006b6e:	d03c      	beq.n	8006bea <__hexnan+0xce>
 8006b70:	5c7a      	ldrb	r2, [r7, r1]
 8006b72:	2a00      	cmp	r2, #0
 8006b74:	d166      	bne.n	8006c44 <__hexnan+0x128>
 8006b76:	2920      	cmp	r1, #32
 8006b78:	d878      	bhi.n	8006c6c <__hexnan+0x150>
 8006b7a:	9c02      	ldr	r4, [sp, #8]
 8006b7c:	45a4      	cmp	ip, r4
 8006b7e:	dd30      	ble.n	8006be2 <__hexnan+0xc6>
 8006b80:	0fc1      	lsrs	r1, r0, #31
 8006b82:	2407      	movs	r4, #7
 8006b84:	4284      	cmp	r4, r0
 8006b86:	414a      	adcs	r2, r1
 8006b88:	0612      	lsls	r2, r2, #24
 8006b8a:	d020      	beq.n	8006bce <__hexnan+0xb2>
 8006b8c:	454e      	cmp	r6, r9
 8006b8e:	d21e      	bcs.n	8006bce <__hexnan+0xb2>
 8006b90:	2108      	movs	r1, #8
 8006b92:	1a08      	subs	r0, r1, r0
 8006b94:	0080      	lsls	r0, r0, #2
 8006b96:	4682      	mov	sl, r0
 8006b98:	2220      	movs	r2, #32
 8006b9a:	1a14      	subs	r4, r2, r0
 8006b9c:	1c1a      	adds	r2, r3, #0
 8006b9e:	4653      	mov	r3, sl
 8006ba0:	46a3      	mov	fp, r4
 8006ba2:	9300      	str	r3, [sp, #0]
 8006ba4:	6834      	ldr	r4, [r6, #0]
 8006ba6:	1c30      	adds	r0, r6, #0
 8006ba8:	1d31      	adds	r1, r6, #4
 8006baa:	464d      	mov	r5, r9
 8006bac:	4692      	mov	sl, r2
 8006bae:	46b1      	mov	r9, r6
 8006bb0:	465e      	mov	r6, fp
 8006bb2:	680a      	ldr	r2, [r1, #0]
 8006bb4:	1c13      	adds	r3, r2, #0
 8006bb6:	40b3      	lsls	r3, r6
 8006bb8:	431c      	orrs	r4, r3
 8006bba:	9b00      	ldr	r3, [sp, #0]
 8006bbc:	c010      	stmia	r0!, {r4}
 8006bbe:	1c14      	adds	r4, r2, #0
 8006bc0:	40dc      	lsrs	r4, r3
 8006bc2:	c110      	stmia	r1!, {r4}
 8006bc4:	4285      	cmp	r5, r0
 8006bc6:	d8f4      	bhi.n	8006bb2 <__hexnan+0x96>
 8006bc8:	464e      	mov	r6, r9
 8006bca:	4653      	mov	r3, sl
 8006bcc:	46a9      	mov	r9, r5
 8006bce:	2008      	movs	r0, #8
 8006bd0:	4546      	cmp	r6, r8
 8006bd2:	d906      	bls.n	8006be2 <__hexnan+0xc6>
 8006bd4:	3e04      	subs	r6, #4
 8006bd6:	2400      	movs	r4, #0
 8006bd8:	4662      	mov	r2, ip
 8006bda:	6034      	str	r4, [r6, #0]
 8006bdc:	9202      	str	r2, [sp, #8]
 8006bde:	46b1      	mov	r9, r6
 8006be0:	2000      	movs	r0, #0
 8006be2:	3301      	adds	r3, #1
 8006be4:	7859      	ldrb	r1, [r3, #1]
 8006be6:	2900      	cmp	r1, #0
 8006be8:	d1c2      	bne.n	8006b70 <__hexnan+0x54>
 8006bea:	4662      	mov	r2, ip
 8006bec:	2a00      	cmp	r2, #0
 8006bee:	d040      	beq.n	8006c72 <__hexnan+0x156>
 8006bf0:	0fc1      	lsrs	r1, r0, #31
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	2207      	movs	r2, #7
 8006bf6:	4282      	cmp	r2, r0
 8006bf8:	414b      	adcs	r3, r1
 8006bfa:	061b      	lsls	r3, r3, #24
 8006bfc:	d001      	beq.n	8006c02 <__hexnan+0xe6>
 8006bfe:	454e      	cmp	r6, r9
 8006c00:	d341      	bcc.n	8006c86 <__hexnan+0x16a>
 8006c02:	45b0      	cmp	r8, r6
 8006c04:	d258      	bcs.n	8006cb8 <__hexnan+0x19c>
 8006c06:	9803      	ldr	r0, [sp, #12]
 8006c08:	4642      	mov	r2, r8
 8006c0a:	ce02      	ldmia	r6!, {r1}
 8006c0c:	1c13      	adds	r3, r2, #0
 8006c0e:	c302      	stmia	r3!, {r1}
 8006c10:	1c1a      	adds	r2, r3, #0
 8006c12:	42b0      	cmp	r0, r6
 8006c14:	d2f9      	bcs.n	8006c0a <__hexnan+0xee>
 8006c16:	9903      	ldr	r1, [sp, #12]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	c304      	stmia	r3!, {r2}
 8006c1c:	4299      	cmp	r1, r3
 8006c1e:	d2fc      	bcs.n	8006c1a <__hexnan+0xfe>
 8006c20:	9903      	ldr	r1, [sp, #12]
 8006c22:	680b      	ldr	r3, [r1, #0]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d10b      	bne.n	8006c40 <__hexnan+0x124>
 8006c28:	9903      	ldr	r1, [sp, #12]
 8006c2a:	4588      	cmp	r8, r1
 8006c2c:	d056      	beq.n	8006cdc <__hexnan+0x1c0>
 8006c2e:	1c0b      	adds	r3, r1, #0
 8006c30:	4642      	mov	r2, r8
 8006c32:	e001      	b.n	8006c38 <__hexnan+0x11c>
 8006c34:	429a      	cmp	r2, r3
 8006c36:	d052      	beq.n	8006cde <__hexnan+0x1c2>
 8006c38:	3b04      	subs	r3, #4
 8006c3a:	681c      	ldr	r4, [r3, #0]
 8006c3c:	2c00      	cmp	r4, #0
 8006c3e:	d0f9      	beq.n	8006c34 <__hexnan+0x118>
 8006c40:	2005      	movs	r0, #5
 8006c42:	e017      	b.n	8006c74 <__hexnan+0x158>
 8006c44:	2101      	movs	r1, #1
 8006c46:	3001      	adds	r0, #1
 8006c48:	448c      	add	ip, r1
 8006c4a:	2808      	cmp	r0, #8
 8006c4c:	dc07      	bgt.n	8006c5e <__hexnan+0x142>
 8006c4e:	6834      	ldr	r4, [r6, #0]
 8006c50:	0121      	lsls	r1, r4, #4
 8006c52:	240f      	movs	r4, #15
 8006c54:	4022      	ands	r2, r4
 8006c56:	430a      	orrs	r2, r1
 8006c58:	6032      	str	r2, [r6, #0]
 8006c5a:	3301      	adds	r3, #1
 8006c5c:	e7c2      	b.n	8006be4 <__hexnan+0xc8>
 8006c5e:	4546      	cmp	r6, r8
 8006c60:	d9bf      	bls.n	8006be2 <__hexnan+0xc6>
 8006c62:	3e04      	subs	r6, #4
 8006c64:	2100      	movs	r1, #0
 8006c66:	6031      	str	r1, [r6, #0]
 8006c68:	2001      	movs	r0, #1
 8006c6a:	e7f2      	b.n	8006c52 <__hexnan+0x136>
 8006c6c:	4662      	mov	r2, ip
 8006c6e:	2929      	cmp	r1, #41	; 0x29
 8006c70:	d03c      	beq.n	8006cec <__hexnan+0x1d0>
 8006c72:	2004      	movs	r0, #4
 8006c74:	b007      	add	sp, #28
 8006c76:	bc3c      	pop	{r2, r3, r4, r5}
 8006c78:	4690      	mov	r8, r2
 8006c7a:	4699      	mov	r9, r3
 8006c7c:	46a2      	mov	sl, r4
 8006c7e:	46ab      	mov	fp, r5
 8006c80:	bcf0      	pop	{r4, r5, r6, r7}
 8006c82:	bc02      	pop	{r1}
 8006c84:	4708      	bx	r1
 8006c86:	2308      	movs	r3, #8
 8006c88:	1a18      	subs	r0, r3, r0
 8006c8a:	0080      	lsls	r0, r0, #2
 8006c8c:	2720      	movs	r7, #32
 8006c8e:	1a3f      	subs	r7, r7, r0
 8006c90:	6831      	ldr	r1, [r6, #0]
 8006c92:	1c32      	adds	r2, r6, #0
 8006c94:	1d33      	adds	r3, r6, #4
 8006c96:	46b4      	mov	ip, r6
 8006c98:	1c3e      	adds	r6, r7, #0
 8006c9a:	1c07      	adds	r7, r0, #0
 8006c9c:	4648      	mov	r0, r9
 8006c9e:	681c      	ldr	r4, [r3, #0]
 8006ca0:	1c25      	adds	r5, r4, #0
 8006ca2:	40b5      	lsls	r5, r6
 8006ca4:	4329      	orrs	r1, r5
 8006ca6:	c202      	stmia	r2!, {r1}
 8006ca8:	1c21      	adds	r1, r4, #0
 8006caa:	40f9      	lsrs	r1, r7
 8006cac:	c302      	stmia	r3!, {r1}
 8006cae:	4290      	cmp	r0, r2
 8006cb0:	d8f5      	bhi.n	8006c9e <__hexnan+0x182>
 8006cb2:	4666      	mov	r6, ip
 8006cb4:	45b0      	cmp	r8, r6
 8006cb6:	d3a6      	bcc.n	8006c06 <__hexnan+0xea>
 8006cb8:	9a04      	ldr	r2, [sp, #16]
 8006cba:	2a00      	cmp	r2, #0
 8006cbc:	d013      	beq.n	8006ce6 <__hexnan+0x1ca>
 8006cbe:	9904      	ldr	r1, [sp, #16]
 8006cc0:	2220      	movs	r2, #32
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	1a52      	subs	r2, r2, r1
 8006cc6:	425b      	negs	r3, r3
 8006cc8:	40d3      	lsrs	r3, r2
 8006cca:	9a03      	ldr	r2, [sp, #12]
 8006ccc:	6812      	ldr	r2, [r2, #0]
 8006cce:	9c03      	ldr	r4, [sp, #12]
 8006cd0:	4013      	ands	r3, r2
 8006cd2:	6023      	str	r3, [r4, #0]
 8006cd4:	e7a6      	b.n	8006c24 <__hexnan+0x108>
 8006cd6:	f7ff fc4d 	bl	8006574 <__hexdig_init>
 8006cda:	e72f      	b.n	8006b3c <__hexnan+0x20>
 8006cdc:	4643      	mov	r3, r8
 8006cde:	2201      	movs	r2, #1
 8006ce0:	601a      	str	r2, [r3, #0]
 8006ce2:	2005      	movs	r0, #5
 8006ce4:	e7c6      	b.n	8006c74 <__hexnan+0x158>
 8006ce6:	9c03      	ldr	r4, [sp, #12]
 8006ce8:	6823      	ldr	r3, [r4, #0]
 8006cea:	e79b      	b.n	8006c24 <__hexnan+0x108>
 8006cec:	9c05      	ldr	r4, [sp, #20]
 8006cee:	3302      	adds	r3, #2
 8006cf0:	6023      	str	r3, [r4, #0]
 8006cf2:	e77b      	b.n	8006bec <__hexnan+0xd0>
 8006cf4:	2000209c 	.word	0x2000209c

08006cf8 <_malloc_r>:
 8006cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cfa:	4656      	mov	r6, sl
 8006cfc:	4644      	mov	r4, r8
 8006cfe:	465f      	mov	r7, fp
 8006d00:	464d      	mov	r5, r9
 8006d02:	b4f0      	push	{r4, r5, r6, r7}
 8006d04:	1c0c      	adds	r4, r1, #0
 8006d06:	340b      	adds	r4, #11
 8006d08:	b083      	sub	sp, #12
 8006d0a:	1c06      	adds	r6, r0, #0
 8006d0c:	2c16      	cmp	r4, #22
 8006d0e:	d92e      	bls.n	8006d6e <_malloc_r+0x76>
 8006d10:	2307      	movs	r3, #7
 8006d12:	439c      	bics	r4, r3
 8006d14:	0fe3      	lsrs	r3, r4, #31
 8006d16:	428c      	cmp	r4, r1
 8006d18:	d32d      	bcc.n	8006d76 <_malloc_r+0x7e>
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d12b      	bne.n	8006d76 <_malloc_r+0x7e>
 8006d1e:	1c30      	adds	r0, r6, #0
 8006d20:	f000 fb0c 	bl	800733c <__malloc_lock>
 8006d24:	4bc0      	ldr	r3, [pc, #768]	; (8007028 <_malloc_r+0x330>)
 8006d26:	429c      	cmp	r4, r3
 8006d28:	d829      	bhi.n	8006d7e <_malloc_r+0x86>
 8006d2a:	08e2      	lsrs	r2, r4, #3
 8006d2c:	4dbf      	ldr	r5, [pc, #764]	; (800702c <_malloc_r+0x334>)
 8006d2e:	00d3      	lsls	r3, r2, #3
 8006d30:	18eb      	adds	r3, r5, r3
 8006d32:	68df      	ldr	r7, [r3, #12]
 8006d34:	429f      	cmp	r7, r3
 8006d36:	d100      	bne.n	8006d3a <_malloc_r+0x42>
 8006d38:	e1d8      	b.n	80070ec <_malloc_r+0x3f4>
 8006d3a:	6879      	ldr	r1, [r7, #4]
 8006d3c:	2303      	movs	r3, #3
 8006d3e:	68fa      	ldr	r2, [r7, #12]
 8006d40:	4399      	bics	r1, r3
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	60da      	str	r2, [r3, #12]
 8006d46:	6093      	str	r3, [r2, #8]
 8006d48:	187b      	adds	r3, r7, r1
 8006d4a:	6858      	ldr	r0, [r3, #4]
 8006d4c:	2201      	movs	r2, #1
 8006d4e:	4302      	orrs	r2, r0
 8006d50:	605a      	str	r2, [r3, #4]
 8006d52:	1c30      	adds	r0, r6, #0
 8006d54:	f000 faf4 	bl	8007340 <__malloc_unlock>
 8006d58:	1c38      	adds	r0, r7, #0
 8006d5a:	3008      	adds	r0, #8
 8006d5c:	b003      	add	sp, #12
 8006d5e:	bc3c      	pop	{r2, r3, r4, r5}
 8006d60:	4690      	mov	r8, r2
 8006d62:	4699      	mov	r9, r3
 8006d64:	46a2      	mov	sl, r4
 8006d66:	46ab      	mov	fp, r5
 8006d68:	bcf0      	pop	{r4, r5, r6, r7}
 8006d6a:	bc02      	pop	{r1}
 8006d6c:	4708      	bx	r1
 8006d6e:	2410      	movs	r4, #16
 8006d70:	2300      	movs	r3, #0
 8006d72:	428c      	cmp	r4, r1
 8006d74:	d2d1      	bcs.n	8006d1a <_malloc_r+0x22>
 8006d76:	230c      	movs	r3, #12
 8006d78:	6033      	str	r3, [r6, #0]
 8006d7a:	2000      	movs	r0, #0
 8006d7c:	e7ee      	b.n	8006d5c <_malloc_r+0x64>
 8006d7e:	0a63      	lsrs	r3, r4, #9
 8006d80:	d100      	bne.n	8006d84 <_malloc_r+0x8c>
 8006d82:	e08b      	b.n	8006e9c <_malloc_r+0x1a4>
 8006d84:	2b04      	cmp	r3, #4
 8006d86:	d900      	bls.n	8006d8a <_malloc_r+0x92>
 8006d88:	e142      	b.n	8007010 <_malloc_r+0x318>
 8006d8a:	09a3      	lsrs	r3, r4, #6
 8006d8c:	3338      	adds	r3, #56	; 0x38
 8006d8e:	4698      	mov	r8, r3
 8006d90:	0059      	lsls	r1, r3, #1
 8006d92:	4da6      	ldr	r5, [pc, #664]	; (800702c <_malloc_r+0x334>)
 8006d94:	0089      	lsls	r1, r1, #2
 8006d96:	1869      	adds	r1, r5, r1
 8006d98:	68cf      	ldr	r7, [r1, #12]
 8006d9a:	42b9      	cmp	r1, r7
 8006d9c:	d013      	beq.n	8006dc6 <_malloc_r+0xce>
 8006d9e:	687a      	ldr	r2, [r7, #4]
 8006da0:	2303      	movs	r3, #3
 8006da2:	439a      	bics	r2, r3
 8006da4:	1b13      	subs	r3, r2, r4
 8006da6:	2b0f      	cmp	r3, #15
 8006da8:	dc7c      	bgt.n	8006ea4 <_malloc_r+0x1ac>
 8006daa:	2003      	movs	r0, #3
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	db07      	blt.n	8006dc0 <_malloc_r+0xc8>
 8006db0:	e07c      	b.n	8006eac <_malloc_r+0x1b4>
 8006db2:	687a      	ldr	r2, [r7, #4]
 8006db4:	4382      	bics	r2, r0
 8006db6:	1b13      	subs	r3, r2, r4
 8006db8:	2b0f      	cmp	r3, #15
 8006dba:	dc73      	bgt.n	8006ea4 <_malloc_r+0x1ac>
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	da75      	bge.n	8006eac <_malloc_r+0x1b4>
 8006dc0:	68ff      	ldr	r7, [r7, #12]
 8006dc2:	42b9      	cmp	r1, r7
 8006dc4:	d1f5      	bne.n	8006db2 <_malloc_r+0xba>
 8006dc6:	2101      	movs	r1, #1
 8006dc8:	4488      	add	r8, r1
 8006dca:	1c2b      	adds	r3, r5, #0
 8006dcc:	692f      	ldr	r7, [r5, #16]
 8006dce:	3308      	adds	r3, #8
 8006dd0:	429f      	cmp	r7, r3
 8006dd2:	d100      	bne.n	8006dd6 <_malloc_r+0xde>
 8006dd4:	e167      	b.n	80070a6 <_malloc_r+0x3ae>
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	2203      	movs	r2, #3
 8006dda:	4390      	bics	r0, r2
 8006ddc:	1c02      	adds	r2, r0, #0
 8006dde:	1b01      	subs	r1, r0, r4
 8006de0:	290f      	cmp	r1, #15
 8006de2:	dd00      	ble.n	8006de6 <_malloc_r+0xee>
 8006de4:	e14e      	b.n	8007084 <_malloc_r+0x38c>
 8006de6:	616b      	str	r3, [r5, #20]
 8006de8:	612b      	str	r3, [r5, #16]
 8006dea:	2900      	cmp	r1, #0
 8006dec:	da6d      	bge.n	8006eca <_malloc_r+0x1d2>
 8006dee:	4b90      	ldr	r3, [pc, #576]	; (8007030 <_malloc_r+0x338>)
 8006df0:	4298      	cmp	r0, r3
 8006df2:	d900      	bls.n	8006df6 <_malloc_r+0xfe>
 8006df4:	e126      	b.n	8007044 <_malloc_r+0x34c>
 8006df6:	08c2      	lsrs	r2, r0, #3
 8006df8:	1093      	asrs	r3, r2, #2
 8006dfa:	2001      	movs	r0, #1
 8006dfc:	4098      	lsls	r0, r3
 8006dfe:	686b      	ldr	r3, [r5, #4]
 8006e00:	00d2      	lsls	r2, r2, #3
 8006e02:	4318      	orrs	r0, r3
 8006e04:	18ab      	adds	r3, r5, r2
 8006e06:	689a      	ldr	r2, [r3, #8]
 8006e08:	60fb      	str	r3, [r7, #12]
 8006e0a:	60ba      	str	r2, [r7, #8]
 8006e0c:	6068      	str	r0, [r5, #4]
 8006e0e:	609f      	str	r7, [r3, #8]
 8006e10:	60d7      	str	r7, [r2, #12]
 8006e12:	4641      	mov	r1, r8
 8006e14:	108b      	asrs	r3, r1, #2
 8006e16:	2101      	movs	r1, #1
 8006e18:	4099      	lsls	r1, r3
 8006e1a:	4281      	cmp	r1, r0
 8006e1c:	d85a      	bhi.n	8006ed4 <_malloc_r+0x1dc>
 8006e1e:	4201      	tst	r1, r0
 8006e20:	d10d      	bne.n	8006e3e <_malloc_r+0x146>
 8006e22:	2303      	movs	r3, #3
 8006e24:	4642      	mov	r2, r8
 8006e26:	439a      	bics	r2, r3
 8006e28:	1c13      	adds	r3, r2, #0
 8006e2a:	3304      	adds	r3, #4
 8006e2c:	0049      	lsls	r1, r1, #1
 8006e2e:	4698      	mov	r8, r3
 8006e30:	4201      	tst	r1, r0
 8006e32:	d104      	bne.n	8006e3e <_malloc_r+0x146>
 8006e34:	2304      	movs	r3, #4
 8006e36:	0049      	lsls	r1, r1, #1
 8006e38:	4498      	add	r8, r3
 8006e3a:	4201      	tst	r1, r0
 8006e3c:	d0fa      	beq.n	8006e34 <_malloc_r+0x13c>
 8006e3e:	2003      	movs	r0, #3
 8006e40:	4684      	mov	ip, r0
 8006e42:	4642      	mov	r2, r8
 8006e44:	00d3      	lsls	r3, r2, #3
 8006e46:	195b      	adds	r3, r3, r5
 8006e48:	469a      	mov	sl, r3
 8006e4a:	1c18      	adds	r0, r3, #0
 8006e4c:	46c1      	mov	r9, r8
 8006e4e:	68c7      	ldr	r7, [r0, #12]
 8006e50:	42b8      	cmp	r0, r7
 8006e52:	d107      	bne.n	8006e64 <_malloc_r+0x16c>
 8006e54:	e129      	b.n	80070aa <_malloc_r+0x3b2>
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	db00      	blt.n	8006e5c <_malloc_r+0x164>
 8006e5a:	e150      	b.n	80070fe <_malloc_r+0x406>
 8006e5c:	68ff      	ldr	r7, [r7, #12]
 8006e5e:	42b8      	cmp	r0, r7
 8006e60:	d100      	bne.n	8006e64 <_malloc_r+0x16c>
 8006e62:	e122      	b.n	80070aa <_malloc_r+0x3b2>
 8006e64:	687a      	ldr	r2, [r7, #4]
 8006e66:	4663      	mov	r3, ip
 8006e68:	439a      	bics	r2, r3
 8006e6a:	1b13      	subs	r3, r2, r4
 8006e6c:	2b0f      	cmp	r3, #15
 8006e6e:	ddf2      	ble.n	8006e56 <_malloc_r+0x15e>
 8006e70:	2001      	movs	r0, #1
 8006e72:	193a      	adds	r2, r7, r4
 8006e74:	4304      	orrs	r4, r0
 8006e76:	68b9      	ldr	r1, [r7, #8]
 8006e78:	607c      	str	r4, [r7, #4]
 8006e7a:	68fc      	ldr	r4, [r7, #12]
 8006e7c:	4318      	orrs	r0, r3
 8006e7e:	60cc      	str	r4, [r1, #12]
 8006e80:	60a1      	str	r1, [r4, #8]
 8006e82:	616a      	str	r2, [r5, #20]
 8006e84:	612a      	str	r2, [r5, #16]
 8006e86:	3508      	adds	r5, #8
 8006e88:	6050      	str	r0, [r2, #4]
 8006e8a:	60d5      	str	r5, [r2, #12]
 8006e8c:	1c30      	adds	r0, r6, #0
 8006e8e:	6095      	str	r5, [r2, #8]
 8006e90:	50d3      	str	r3, [r2, r3]
 8006e92:	f000 fa55 	bl	8007340 <__malloc_unlock>
 8006e96:	1c38      	adds	r0, r7, #0
 8006e98:	3008      	adds	r0, #8
 8006e9a:	e75f      	b.n	8006d5c <_malloc_r+0x64>
 8006e9c:	08e1      	lsrs	r1, r4, #3
 8006e9e:	4688      	mov	r8, r1
 8006ea0:	0049      	lsls	r1, r1, #1
 8006ea2:	e776      	b.n	8006d92 <_malloc_r+0x9a>
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	425b      	negs	r3, r3
 8006ea8:	4498      	add	r8, r3
 8006eaa:	e78c      	b.n	8006dc6 <_malloc_r+0xce>
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	68f9      	ldr	r1, [r7, #12]
 8006eb0:	18ba      	adds	r2, r7, r2
 8006eb2:	6850      	ldr	r0, [r2, #4]
 8006eb4:	60d9      	str	r1, [r3, #12]
 8006eb6:	608b      	str	r3, [r1, #8]
 8006eb8:	2301      	movs	r3, #1
 8006eba:	4303      	orrs	r3, r0
 8006ebc:	1c30      	adds	r0, r6, #0
 8006ebe:	6053      	str	r3, [r2, #4]
 8006ec0:	f000 fa3e 	bl	8007340 <__malloc_unlock>
 8006ec4:	1c38      	adds	r0, r7, #0
 8006ec6:	3008      	adds	r0, #8
 8006ec8:	e748      	b.n	8006d5c <_malloc_r+0x64>
 8006eca:	183a      	adds	r2, r7, r0
 8006ecc:	6851      	ldr	r1, [r2, #4]
 8006ece:	2301      	movs	r3, #1
 8006ed0:	430b      	orrs	r3, r1
 8006ed2:	e7f3      	b.n	8006ebc <_malloc_r+0x1c4>
 8006ed4:	68af      	ldr	r7, [r5, #8]
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	2303      	movs	r3, #3
 8006eda:	4398      	bics	r0, r3
 8006edc:	4681      	mov	r9, r0
 8006ede:	4284      	cmp	r4, r0
 8006ee0:	d803      	bhi.n	8006eea <_malloc_r+0x1f2>
 8006ee2:	1b03      	subs	r3, r0, r4
 8006ee4:	2b0f      	cmp	r3, #15
 8006ee6:	dd00      	ble.n	8006eea <_malloc_r+0x1f2>
 8006ee8:	e084      	b.n	8006ff4 <_malloc_r+0x2fc>
 8006eea:	4649      	mov	r1, r9
 8006eec:	1879      	adds	r1, r7, r1
 8006eee:	4a51      	ldr	r2, [pc, #324]	; (8007034 <_malloc_r+0x33c>)
 8006ef0:	9101      	str	r1, [sp, #4]
 8006ef2:	4951      	ldr	r1, [pc, #324]	; (8007038 <_malloc_r+0x340>)
 8006ef4:	6810      	ldr	r0, [r2, #0]
 8006ef6:	4692      	mov	sl, r2
 8006ef8:	688a      	ldr	r2, [r1, #8]
 8006efa:	1823      	adds	r3, r4, r0
 8006efc:	468b      	mov	fp, r1
 8006efe:	3201      	adds	r2, #1
 8006f00:	d100      	bne.n	8006f04 <_malloc_r+0x20c>
 8006f02:	e13f      	b.n	8007184 <_malloc_r+0x48c>
 8006f04:	484d      	ldr	r0, [pc, #308]	; (800703c <_malloc_r+0x344>)
 8006f06:	181b      	adds	r3, r3, r0
 8006f08:	0b1b      	lsrs	r3, r3, #12
 8006f0a:	031b      	lsls	r3, r3, #12
 8006f0c:	9300      	str	r3, [sp, #0]
 8006f0e:	9900      	ldr	r1, [sp, #0]
 8006f10:	1c30      	adds	r0, r6, #0
 8006f12:	f001 f8c5 	bl	80080a0 <_sbrk_r>
 8006f16:	1c01      	adds	r1, r0, #0
 8006f18:	4680      	mov	r8, r0
 8006f1a:	3101      	adds	r1, #1
 8006f1c:	d05f      	beq.n	8006fde <_malloc_r+0x2e6>
 8006f1e:	9a01      	ldr	r2, [sp, #4]
 8006f20:	4282      	cmp	r2, r0
 8006f22:	d900      	bls.n	8006f26 <_malloc_r+0x22e>
 8006f24:	e103      	b.n	800712e <_malloc_r+0x436>
 8006f26:	4651      	mov	r1, sl
 8006f28:	9800      	ldr	r0, [sp, #0]
 8006f2a:	6849      	ldr	r1, [r1, #4]
 8006f2c:	1843      	adds	r3, r0, r1
 8006f2e:	9801      	ldr	r0, [sp, #4]
 8006f30:	4652      	mov	r2, sl
 8006f32:	6053      	str	r3, [r2, #4]
 8006f34:	4540      	cmp	r0, r8
 8006f36:	d100      	bne.n	8006f3a <_malloc_r+0x242>
 8006f38:	e132      	b.n	80071a0 <_malloc_r+0x4a8>
 8006f3a:	465a      	mov	r2, fp
 8006f3c:	6892      	ldr	r2, [r2, #8]
 8006f3e:	3201      	adds	r2, #1
 8006f40:	d100      	bne.n	8006f44 <_malloc_r+0x24c>
 8006f42:	e144      	b.n	80071ce <_malloc_r+0x4d6>
 8006f44:	9801      	ldr	r0, [sp, #4]
 8006f46:	4641      	mov	r1, r8
 8006f48:	1a0a      	subs	r2, r1, r0
 8006f4a:	189b      	adds	r3, r3, r2
 8006f4c:	4651      	mov	r1, sl
 8006f4e:	604b      	str	r3, [r1, #4]
 8006f50:	2307      	movs	r3, #7
 8006f52:	4642      	mov	r2, r8
 8006f54:	4013      	ands	r3, r2
 8006f56:	d100      	bne.n	8006f5a <_malloc_r+0x262>
 8006f58:	e0fb      	b.n	8007152 <_malloc_r+0x45a>
 8006f5a:	1ad2      	subs	r2, r2, r3
 8006f5c:	3208      	adds	r2, #8
 8006f5e:	4690      	mov	r8, r2
 8006f60:	4a37      	ldr	r2, [pc, #220]	; (8007040 <_malloc_r+0x348>)
 8006f62:	1ad3      	subs	r3, r2, r3
 8006f64:	9800      	ldr	r0, [sp, #0]
 8006f66:	1c02      	adds	r2, r0, #0
 8006f68:	4442      	add	r2, r8
 8006f6a:	0512      	lsls	r2, r2, #20
 8006f6c:	0d12      	lsrs	r2, r2, #20
 8006f6e:	1a9a      	subs	r2, r3, r2
 8006f70:	1c11      	adds	r1, r2, #0
 8006f72:	1c30      	adds	r0, r6, #0
 8006f74:	4693      	mov	fp, r2
 8006f76:	f001 f893 	bl	80080a0 <_sbrk_r>
 8006f7a:	1c41      	adds	r1, r0, #1
 8006f7c:	d100      	bne.n	8006f80 <_malloc_r+0x288>
 8006f7e:	e11a      	b.n	80071b6 <_malloc_r+0x4be>
 8006f80:	4642      	mov	r2, r8
 8006f82:	1a80      	subs	r0, r0, r2
 8006f84:	4458      	add	r0, fp
 8006f86:	2301      	movs	r3, #1
 8006f88:	4318      	orrs	r0, r3
 8006f8a:	4652      	mov	r2, sl
 8006f8c:	6851      	ldr	r1, [r2, #4]
 8006f8e:	1c0b      	adds	r3, r1, #0
 8006f90:	445b      	add	r3, fp
 8006f92:	4641      	mov	r1, r8
 8006f94:	6053      	str	r3, [r2, #4]
 8006f96:	60a9      	str	r1, [r5, #8]
 8006f98:	6048      	str	r0, [r1, #4]
 8006f9a:	42af      	cmp	r7, r5
 8006f9c:	d013      	beq.n	8006fc6 <_malloc_r+0x2ce>
 8006f9e:	464a      	mov	r2, r9
 8006fa0:	2a0f      	cmp	r2, #15
 8006fa2:	d800      	bhi.n	8006fa6 <_malloc_r+0x2ae>
 8006fa4:	e0e1      	b.n	800716a <_malloc_r+0x472>
 8006fa6:	464a      	mov	r2, r9
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	2107      	movs	r1, #7
 8006fac:	3a0c      	subs	r2, #12
 8006fae:	438a      	bics	r2, r1
 8006fb0:	2101      	movs	r1, #1
 8006fb2:	4001      	ands	r1, r0
 8006fb4:	4311      	orrs	r1, r2
 8006fb6:	6079      	str	r1, [r7, #4]
 8006fb8:	2005      	movs	r0, #5
 8006fba:	18b9      	adds	r1, r7, r2
 8006fbc:	6048      	str	r0, [r1, #4]
 8006fbe:	6088      	str	r0, [r1, #8]
 8006fc0:	2a0f      	cmp	r2, #15
 8006fc2:	d900      	bls.n	8006fc6 <_malloc_r+0x2ce>
 8006fc4:	e0fb      	b.n	80071be <_malloc_r+0x4c6>
 8006fc6:	4652      	mov	r2, sl
 8006fc8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d901      	bls.n	8006fd2 <_malloc_r+0x2da>
 8006fce:	4650      	mov	r0, sl
 8006fd0:	62c3      	str	r3, [r0, #44]	; 0x2c
 8006fd2:	4651      	mov	r1, sl
 8006fd4:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8006fd6:	428b      	cmp	r3, r1
 8006fd8:	d901      	bls.n	8006fde <_malloc_r+0x2e6>
 8006fda:	4652      	mov	r2, sl
 8006fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8006fde:	68af      	ldr	r7, [r5, #8]
 8006fe0:	687a      	ldr	r2, [r7, #4]
 8006fe2:	2303      	movs	r3, #3
 8006fe4:	439a      	bics	r2, r3
 8006fe6:	1b13      	subs	r3, r2, r4
 8006fe8:	4294      	cmp	r4, r2
 8006fea:	d900      	bls.n	8006fee <_malloc_r+0x2f6>
 8006fec:	e0a3      	b.n	8007136 <_malloc_r+0x43e>
 8006fee:	2b0f      	cmp	r3, #15
 8006ff0:	dc00      	bgt.n	8006ff4 <_malloc_r+0x2fc>
 8006ff2:	e0a0      	b.n	8007136 <_malloc_r+0x43e>
 8006ff4:	2201      	movs	r2, #1
 8006ff6:	1c21      	adds	r1, r4, #0
 8006ff8:	4311      	orrs	r1, r2
 8006ffa:	193c      	adds	r4, r7, r4
 8006ffc:	4313      	orrs	r3, r2
 8006ffe:	6079      	str	r1, [r7, #4]
 8007000:	1c30      	adds	r0, r6, #0
 8007002:	60ac      	str	r4, [r5, #8]
 8007004:	6063      	str	r3, [r4, #4]
 8007006:	f000 f99b 	bl	8007340 <__malloc_unlock>
 800700a:	1c38      	adds	r0, r7, #0
 800700c:	3008      	adds	r0, #8
 800700e:	e6a5      	b.n	8006d5c <_malloc_r+0x64>
 8007010:	2b14      	cmp	r3, #20
 8007012:	d800      	bhi.n	8007016 <_malloc_r+0x31e>
 8007014:	e082      	b.n	800711c <_malloc_r+0x424>
 8007016:	2b54      	cmp	r3, #84	; 0x54
 8007018:	d900      	bls.n	800701c <_malloc_r+0x324>
 800701a:	e091      	b.n	8007140 <_malloc_r+0x448>
 800701c:	0b23      	lsrs	r3, r4, #12
 800701e:	336e      	adds	r3, #110	; 0x6e
 8007020:	4698      	mov	r8, r3
 8007022:	0059      	lsls	r1, r3, #1
 8007024:	e6b5      	b.n	8006d92 <_malloc_r+0x9a>
 8007026:	46c0      	nop			; (mov r8, r8)
 8007028:	000001f7 	.word	0x000001f7
 800702c:	200005d8 	.word	0x200005d8
 8007030:	000001ff 	.word	0x000001ff
 8007034:	20000bb0 	.word	0x20000bb0
 8007038:	200009d8 	.word	0x200009d8
 800703c:	0000100f 	.word	0x0000100f
 8007040:	00001008 	.word	0x00001008
 8007044:	0a43      	lsrs	r3, r0, #9
 8007046:	2b04      	cmp	r3, #4
 8007048:	d96c      	bls.n	8007124 <_malloc_r+0x42c>
 800704a:	2b14      	cmp	r3, #20
 800704c:	d900      	bls.n	8007050 <_malloc_r+0x358>
 800704e:	e09c      	b.n	800718a <_malloc_r+0x492>
 8007050:	335b      	adds	r3, #91	; 0x5b
 8007052:	469a      	mov	sl, r3
 8007054:	0058      	lsls	r0, r3, #1
 8007056:	0080      	lsls	r0, r0, #2
 8007058:	1940      	adds	r0, r0, r5
 800705a:	6883      	ldr	r3, [r0, #8]
 800705c:	4681      	mov	r9, r0
 800705e:	2003      	movs	r0, #3
 8007060:	4684      	mov	ip, r0
 8007062:	454b      	cmp	r3, r9
 8007064:	d078      	beq.n	8007158 <_malloc_r+0x460>
 8007066:	6859      	ldr	r1, [r3, #4]
 8007068:	4660      	mov	r0, ip
 800706a:	4381      	bics	r1, r0
 800706c:	428a      	cmp	r2, r1
 800706e:	d202      	bcs.n	8007076 <_malloc_r+0x37e>
 8007070:	689b      	ldr	r3, [r3, #8]
 8007072:	4599      	cmp	r9, r3
 8007074:	d1f7      	bne.n	8007066 <_malloc_r+0x36e>
 8007076:	68da      	ldr	r2, [r3, #12]
 8007078:	6868      	ldr	r0, [r5, #4]
 800707a:	60fa      	str	r2, [r7, #12]
 800707c:	60bb      	str	r3, [r7, #8]
 800707e:	60df      	str	r7, [r3, #12]
 8007080:	6097      	str	r7, [r2, #8]
 8007082:	e6c6      	b.n	8006e12 <_malloc_r+0x11a>
 8007084:	2001      	movs	r0, #1
 8007086:	193a      	adds	r2, r7, r4
 8007088:	4304      	orrs	r4, r0
 800708a:	4308      	orrs	r0, r1
 800708c:	607c      	str	r4, [r7, #4]
 800708e:	616a      	str	r2, [r5, #20]
 8007090:	612a      	str	r2, [r5, #16]
 8007092:	6050      	str	r0, [r2, #4]
 8007094:	60d3      	str	r3, [r2, #12]
 8007096:	1c30      	adds	r0, r6, #0
 8007098:	6093      	str	r3, [r2, #8]
 800709a:	5051      	str	r1, [r2, r1]
 800709c:	f000 f950 	bl	8007340 <__malloc_unlock>
 80070a0:	1c38      	adds	r0, r7, #0
 80070a2:	3008      	adds	r0, #8
 80070a4:	e65a      	b.n	8006d5c <_malloc_r+0x64>
 80070a6:	6868      	ldr	r0, [r5, #4]
 80070a8:	e6b3      	b.n	8006e12 <_malloc_r+0x11a>
 80070aa:	2201      	movs	r2, #1
 80070ac:	4491      	add	r9, r2
 80070ae:	4663      	mov	r3, ip
 80070b0:	464a      	mov	r2, r9
 80070b2:	3008      	adds	r0, #8
 80070b4:	4213      	tst	r3, r2
 80070b6:	d000      	beq.n	80070ba <_malloc_r+0x3c2>
 80070b8:	e6c9      	b.n	8006e4e <_malloc_r+0x156>
 80070ba:	4652      	mov	r2, sl
 80070bc:	4643      	mov	r3, r8
 80070be:	4660      	mov	r0, ip
 80070c0:	4218      	tst	r0, r3
 80070c2:	d100      	bne.n	80070c6 <_malloc_r+0x3ce>
 80070c4:	e098      	b.n	80071f8 <_malloc_r+0x500>
 80070c6:	1c10      	adds	r0, r2, #0
 80070c8:	6812      	ldr	r2, [r2, #0]
 80070ca:	3808      	subs	r0, #8
 80070cc:	3b01      	subs	r3, #1
 80070ce:	4282      	cmp	r2, r0
 80070d0:	d0f5      	beq.n	80070be <_malloc_r+0x3c6>
 80070d2:	686b      	ldr	r3, [r5, #4]
 80070d4:	0049      	lsls	r1, r1, #1
 80070d6:	4299      	cmp	r1, r3
 80070d8:	d900      	bls.n	80070dc <_malloc_r+0x3e4>
 80070da:	e6fb      	b.n	8006ed4 <_malloc_r+0x1dc>
 80070dc:	2900      	cmp	r1, #0
 80070de:	d100      	bne.n	80070e2 <_malloc_r+0x3ea>
 80070e0:	e6f8      	b.n	8006ed4 <_malloc_r+0x1dc>
 80070e2:	4219      	tst	r1, r3
 80070e4:	d100      	bne.n	80070e8 <_malloc_r+0x3f0>
 80070e6:	e08b      	b.n	8007200 <_malloc_r+0x508>
 80070e8:	46c8      	mov	r8, r9
 80070ea:	e6aa      	b.n	8006e42 <_malloc_r+0x14a>
 80070ec:	1c3b      	adds	r3, r7, #0
 80070ee:	697f      	ldr	r7, [r7, #20]
 80070f0:	3202      	adds	r2, #2
 80070f2:	3308      	adds	r3, #8
 80070f4:	4690      	mov	r8, r2
 80070f6:	42bb      	cmp	r3, r7
 80070f8:	d100      	bne.n	80070fc <_malloc_r+0x404>
 80070fa:	e666      	b.n	8006dca <_malloc_r+0xd2>
 80070fc:	e61d      	b.n	8006d3a <_malloc_r+0x42>
 80070fe:	18ba      	adds	r2, r7, r2
 8007100:	6850      	ldr	r0, [r2, #4]
 8007102:	2301      	movs	r3, #1
 8007104:	4303      	orrs	r3, r0
 8007106:	6053      	str	r3, [r2, #4]
 8007108:	68fa      	ldr	r2, [r7, #12]
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	1c30      	adds	r0, r6, #0
 800710e:	60da      	str	r2, [r3, #12]
 8007110:	6093      	str	r3, [r2, #8]
 8007112:	f000 f915 	bl	8007340 <__malloc_unlock>
 8007116:	1c38      	adds	r0, r7, #0
 8007118:	3008      	adds	r0, #8
 800711a:	e61f      	b.n	8006d5c <_malloc_r+0x64>
 800711c:	335b      	adds	r3, #91	; 0x5b
 800711e:	4698      	mov	r8, r3
 8007120:	0059      	lsls	r1, r3, #1
 8007122:	e636      	b.n	8006d92 <_malloc_r+0x9a>
 8007124:	0981      	lsrs	r1, r0, #6
 8007126:	3138      	adds	r1, #56	; 0x38
 8007128:	468a      	mov	sl, r1
 800712a:	0048      	lsls	r0, r1, #1
 800712c:	e793      	b.n	8007056 <_malloc_r+0x35e>
 800712e:	42af      	cmp	r7, r5
 8007130:	d000      	beq.n	8007134 <_malloc_r+0x43c>
 8007132:	e754      	b.n	8006fde <_malloc_r+0x2e6>
 8007134:	e6f7      	b.n	8006f26 <_malloc_r+0x22e>
 8007136:	1c30      	adds	r0, r6, #0
 8007138:	f000 f902 	bl	8007340 <__malloc_unlock>
 800713c:	2000      	movs	r0, #0
 800713e:	e60d      	b.n	8006d5c <_malloc_r+0x64>
 8007140:	22aa      	movs	r2, #170	; 0xaa
 8007142:	0052      	lsls	r2, r2, #1
 8007144:	4293      	cmp	r3, r2
 8007146:	d815      	bhi.n	8007174 <_malloc_r+0x47c>
 8007148:	0be3      	lsrs	r3, r4, #15
 800714a:	3377      	adds	r3, #119	; 0x77
 800714c:	4698      	mov	r8, r3
 800714e:	0059      	lsls	r1, r3, #1
 8007150:	e61f      	b.n	8006d92 <_malloc_r+0x9a>
 8007152:	2380      	movs	r3, #128	; 0x80
 8007154:	015b      	lsls	r3, r3, #5
 8007156:	e705      	b.n	8006f64 <_malloc_r+0x26c>
 8007158:	4652      	mov	r2, sl
 800715a:	1091      	asrs	r1, r2, #2
 800715c:	2001      	movs	r0, #1
 800715e:	4088      	lsls	r0, r1
 8007160:	6869      	ldr	r1, [r5, #4]
 8007162:	4308      	orrs	r0, r1
 8007164:	6068      	str	r0, [r5, #4]
 8007166:	1c1a      	adds	r2, r3, #0
 8007168:	e787      	b.n	800707a <_malloc_r+0x382>
 800716a:	2301      	movs	r3, #1
 800716c:	604b      	str	r3, [r1, #4]
 800716e:	4647      	mov	r7, r8
 8007170:	2200      	movs	r2, #0
 8007172:	e738      	b.n	8006fe6 <_malloc_r+0x2ee>
 8007174:	4a26      	ldr	r2, [pc, #152]	; (8007210 <_malloc_r+0x518>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d80e      	bhi.n	8007198 <_malloc_r+0x4a0>
 800717a:	0ca3      	lsrs	r3, r4, #18
 800717c:	337c      	adds	r3, #124	; 0x7c
 800717e:	4698      	mov	r8, r3
 8007180:	0059      	lsls	r1, r3, #1
 8007182:	e606      	b.n	8006d92 <_malloc_r+0x9a>
 8007184:	3310      	adds	r3, #16
 8007186:	9300      	str	r3, [sp, #0]
 8007188:	e6c1      	b.n	8006f0e <_malloc_r+0x216>
 800718a:	2b54      	cmp	r3, #84	; 0x54
 800718c:	d823      	bhi.n	80071d6 <_malloc_r+0x4de>
 800718e:	0b01      	lsrs	r1, r0, #12
 8007190:	316e      	adds	r1, #110	; 0x6e
 8007192:	468a      	mov	sl, r1
 8007194:	0048      	lsls	r0, r1, #1
 8007196:	e75e      	b.n	8007056 <_malloc_r+0x35e>
 8007198:	227e      	movs	r2, #126	; 0x7e
 800719a:	21fc      	movs	r1, #252	; 0xfc
 800719c:	4690      	mov	r8, r2
 800719e:	e5f8      	b.n	8006d92 <_malloc_r+0x9a>
 80071a0:	0502      	lsls	r2, r0, #20
 80071a2:	d000      	beq.n	80071a6 <_malloc_r+0x4ae>
 80071a4:	e6c9      	b.n	8006f3a <_malloc_r+0x242>
 80071a6:	9900      	ldr	r1, [sp, #0]
 80071a8:	1c08      	adds	r0, r1, #0
 80071aa:	68aa      	ldr	r2, [r5, #8]
 80071ac:	4448      	add	r0, r9
 80071ae:	2101      	movs	r1, #1
 80071b0:	4301      	orrs	r1, r0
 80071b2:	6051      	str	r1, [r2, #4]
 80071b4:	e707      	b.n	8006fc6 <_malloc_r+0x2ce>
 80071b6:	2300      	movs	r3, #0
 80071b8:	2001      	movs	r0, #1
 80071ba:	469b      	mov	fp, r3
 80071bc:	e6e5      	b.n	8006f8a <_malloc_r+0x292>
 80071be:	1c39      	adds	r1, r7, #0
 80071c0:	3108      	adds	r1, #8
 80071c2:	1c30      	adds	r0, r6, #0
 80071c4:	f7ff f850 	bl	8006268 <_free_r>
 80071c8:	4651      	mov	r1, sl
 80071ca:	684b      	ldr	r3, [r1, #4]
 80071cc:	e6fb      	b.n	8006fc6 <_malloc_r+0x2ce>
 80071ce:	4643      	mov	r3, r8
 80071d0:	4658      	mov	r0, fp
 80071d2:	6083      	str	r3, [r0, #8]
 80071d4:	e6bc      	b.n	8006f50 <_malloc_r+0x258>
 80071d6:	21aa      	movs	r1, #170	; 0xaa
 80071d8:	0049      	lsls	r1, r1, #1
 80071da:	428b      	cmp	r3, r1
 80071dc:	d804      	bhi.n	80071e8 <_malloc_r+0x4f0>
 80071de:	0bc1      	lsrs	r1, r0, #15
 80071e0:	3177      	adds	r1, #119	; 0x77
 80071e2:	468a      	mov	sl, r1
 80071e4:	0048      	lsls	r0, r1, #1
 80071e6:	e736      	b.n	8007056 <_malloc_r+0x35e>
 80071e8:	4909      	ldr	r1, [pc, #36]	; (8007210 <_malloc_r+0x518>)
 80071ea:	428b      	cmp	r3, r1
 80071ec:	d80c      	bhi.n	8007208 <_malloc_r+0x510>
 80071ee:	0c81      	lsrs	r1, r0, #18
 80071f0:	317c      	adds	r1, #124	; 0x7c
 80071f2:	468a      	mov	sl, r1
 80071f4:	0048      	lsls	r0, r1, #1
 80071f6:	e72e      	b.n	8007056 <_malloc_r+0x35e>
 80071f8:	686b      	ldr	r3, [r5, #4]
 80071fa:	438b      	bics	r3, r1
 80071fc:	606b      	str	r3, [r5, #4]
 80071fe:	e769      	b.n	80070d4 <_malloc_r+0x3dc>
 8007200:	2204      	movs	r2, #4
 8007202:	4491      	add	r9, r2
 8007204:	0049      	lsls	r1, r1, #1
 8007206:	e76c      	b.n	80070e2 <_malloc_r+0x3ea>
 8007208:	217e      	movs	r1, #126	; 0x7e
 800720a:	20fc      	movs	r0, #252	; 0xfc
 800720c:	468a      	mov	sl, r1
 800720e:	e722      	b.n	8007056 <_malloc_r+0x35e>
 8007210:	00000554 	.word	0x00000554

08007214 <memchr>:
 8007214:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007216:	060c      	lsls	r4, r1, #24
 8007218:	0e24      	lsrs	r4, r4, #24
 800721a:	0783      	lsls	r3, r0, #30
 800721c:	d03f      	beq.n	800729e <memchr+0x8a>
 800721e:	1e53      	subs	r3, r2, #1
 8007220:	2a00      	cmp	r2, #0
 8007222:	d01f      	beq.n	8007264 <memchr+0x50>
 8007224:	7802      	ldrb	r2, [r0, #0]
 8007226:	42a2      	cmp	r2, r4
 8007228:	d01d      	beq.n	8007266 <memchr+0x52>
 800722a:	2503      	movs	r5, #3
 800722c:	e005      	b.n	800723a <memchr+0x26>
 800722e:	2b00      	cmp	r3, #0
 8007230:	d018      	beq.n	8007264 <memchr+0x50>
 8007232:	7802      	ldrb	r2, [r0, #0]
 8007234:	3b01      	subs	r3, #1
 8007236:	42a2      	cmp	r2, r4
 8007238:	d015      	beq.n	8007266 <memchr+0x52>
 800723a:	3001      	adds	r0, #1
 800723c:	4228      	tst	r0, r5
 800723e:	d1f6      	bne.n	800722e <memchr+0x1a>
 8007240:	2b03      	cmp	r3, #3
 8007242:	d813      	bhi.n	800726c <memchr+0x58>
 8007244:	2b00      	cmp	r3, #0
 8007246:	d00d      	beq.n	8007264 <memchr+0x50>
 8007248:	7802      	ldrb	r2, [r0, #0]
 800724a:	42a2      	cmp	r2, r4
 800724c:	d00b      	beq.n	8007266 <memchr+0x52>
 800724e:	1c42      	adds	r2, r0, #1
 8007250:	18c3      	adds	r3, r0, r3
 8007252:	e004      	b.n	800725e <memchr+0x4a>
 8007254:	3201      	adds	r2, #1
 8007256:	1e51      	subs	r1, r2, #1
 8007258:	7809      	ldrb	r1, [r1, #0]
 800725a:	42a1      	cmp	r1, r4
 800725c:	d003      	beq.n	8007266 <memchr+0x52>
 800725e:	1c10      	adds	r0, r2, #0
 8007260:	429a      	cmp	r2, r3
 8007262:	d1f7      	bne.n	8007254 <memchr+0x40>
 8007264:	2000      	movs	r0, #0
 8007266:	bcf0      	pop	{r4, r5, r6, r7}
 8007268:	bc02      	pop	{r1}
 800726a:	4708      	bx	r1
 800726c:	27ff      	movs	r7, #255	; 0xff
 800726e:	4039      	ands	r1, r7
 8007270:	020f      	lsls	r7, r1, #8
 8007272:	4339      	orrs	r1, r7
 8007274:	4d0b      	ldr	r5, [pc, #44]	; (80072a4 <memchr+0x90>)
 8007276:	040f      	lsls	r7, r1, #16
 8007278:	430f      	orrs	r7, r1
 800727a:	46ac      	mov	ip, r5
 800727c:	1c01      	adds	r1, r0, #0
 800727e:	680a      	ldr	r2, [r1, #0]
 8007280:	4e09      	ldr	r6, [pc, #36]	; (80072a8 <memchr+0x94>)
 8007282:	407a      	eors	r2, r7
 8007284:	1995      	adds	r5, r2, r6
 8007286:	4395      	bics	r5, r2
 8007288:	1c2a      	adds	r2, r5, #0
 800728a:	4665      	mov	r5, ip
 800728c:	3004      	adds	r0, #4
 800728e:	422a      	tst	r2, r5
 8007290:	d103      	bne.n	800729a <memchr+0x86>
 8007292:	3b04      	subs	r3, #4
 8007294:	2b03      	cmp	r3, #3
 8007296:	d8f1      	bhi.n	800727c <memchr+0x68>
 8007298:	e7d4      	b.n	8007244 <memchr+0x30>
 800729a:	1c08      	adds	r0, r1, #0
 800729c:	e7d2      	b.n	8007244 <memchr+0x30>
 800729e:	1c13      	adds	r3, r2, #0
 80072a0:	e7ce      	b.n	8007240 <memchr+0x2c>
 80072a2:	46c0      	nop			; (mov r8, r8)
 80072a4:	80808080 	.word	0x80808080
 80072a8:	fefefeff 	.word	0xfefefeff

080072ac <memcpy>:
 80072ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072ae:	2a0f      	cmp	r2, #15
 80072b0:	d93a      	bls.n	8007328 <memcpy+0x7c>
 80072b2:	1c0b      	adds	r3, r1, #0
 80072b4:	4303      	orrs	r3, r0
 80072b6:	079c      	lsls	r4, r3, #30
 80072b8:	d13b      	bne.n	8007332 <memcpy+0x86>
 80072ba:	1c13      	adds	r3, r2, #0
 80072bc:	3b10      	subs	r3, #16
 80072be:	091b      	lsrs	r3, r3, #4
 80072c0:	3301      	adds	r3, #1
 80072c2:	011b      	lsls	r3, r3, #4
 80072c4:	18cc      	adds	r4, r1, r3
 80072c6:	1c05      	adds	r5, r0, #0
 80072c8:	680e      	ldr	r6, [r1, #0]
 80072ca:	602e      	str	r6, [r5, #0]
 80072cc:	684e      	ldr	r6, [r1, #4]
 80072ce:	606e      	str	r6, [r5, #4]
 80072d0:	688e      	ldr	r6, [r1, #8]
 80072d2:	60ae      	str	r6, [r5, #8]
 80072d4:	68ce      	ldr	r6, [r1, #12]
 80072d6:	3110      	adds	r1, #16
 80072d8:	60ee      	str	r6, [r5, #12]
 80072da:	3510      	adds	r5, #16
 80072dc:	428c      	cmp	r4, r1
 80072de:	d1f3      	bne.n	80072c8 <memcpy+0x1c>
 80072e0:	250f      	movs	r5, #15
 80072e2:	18c3      	adds	r3, r0, r3
 80072e4:	4015      	ands	r5, r2
 80072e6:	2d03      	cmp	r5, #3
 80072e8:	d926      	bls.n	8007338 <memcpy+0x8c>
 80072ea:	3d04      	subs	r5, #4
 80072ec:	08ad      	lsrs	r5, r5, #2
 80072ee:	00af      	lsls	r7, r5, #2
 80072f0:	3704      	adds	r7, #4
 80072f2:	46ac      	mov	ip, r5
 80072f4:	1c21      	adds	r1, r4, #0
 80072f6:	19e7      	adds	r7, r4, r7
 80072f8:	1c1d      	adds	r5, r3, #0
 80072fa:	c940      	ldmia	r1!, {r6}
 80072fc:	c540      	stmia	r5!, {r6}
 80072fe:	42b9      	cmp	r1, r7
 8007300:	d1fb      	bne.n	80072fa <memcpy+0x4e>
 8007302:	4661      	mov	r1, ip
 8007304:	3101      	adds	r1, #1
 8007306:	0089      	lsls	r1, r1, #2
 8007308:	2503      	movs	r5, #3
 800730a:	402a      	ands	r2, r5
 800730c:	1864      	adds	r4, r4, r1
 800730e:	185b      	adds	r3, r3, r1
 8007310:	2a00      	cmp	r2, #0
 8007312:	d006      	beq.n	8007322 <memcpy+0x76>
 8007314:	189a      	adds	r2, r3, r2
 8007316:	7821      	ldrb	r1, [r4, #0]
 8007318:	7019      	strb	r1, [r3, #0]
 800731a:	3301      	adds	r3, #1
 800731c:	3401      	adds	r4, #1
 800731e:	4293      	cmp	r3, r2
 8007320:	d1f9      	bne.n	8007316 <memcpy+0x6a>
 8007322:	bcf0      	pop	{r4, r5, r6, r7}
 8007324:	bc02      	pop	{r1}
 8007326:	4708      	bx	r1
 8007328:	1c0c      	adds	r4, r1, #0
 800732a:	1c03      	adds	r3, r0, #0
 800732c:	2a00      	cmp	r2, #0
 800732e:	d1f1      	bne.n	8007314 <memcpy+0x68>
 8007330:	e7f7      	b.n	8007322 <memcpy+0x76>
 8007332:	1c03      	adds	r3, r0, #0
 8007334:	1c0c      	adds	r4, r1, #0
 8007336:	e7ed      	b.n	8007314 <memcpy+0x68>
 8007338:	1c2a      	adds	r2, r5, #0
 800733a:	e7f7      	b.n	800732c <memcpy+0x80>

0800733c <__malloc_lock>:
 800733c:	4770      	bx	lr
 800733e:	46c0      	nop			; (mov r8, r8)

08007340 <__malloc_unlock>:
 8007340:	4770      	bx	lr
 8007342:	46c0      	nop			; (mov r8, r8)
 8007344:	0000      	movs	r0, r0
	...

08007348 <_Balloc>:
 8007348:	b570      	push	{r4, r5, r6, lr}
 800734a:	1c04      	adds	r4, r0, #0
 800734c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800734e:	1c0d      	adds	r5, r1, #0
 8007350:	2800      	cmp	r0, #0
 8007352:	d00c      	beq.n	800736e <_Balloc+0x26>
 8007354:	00aa      	lsls	r2, r5, #2
 8007356:	1882      	adds	r2, r0, r2
 8007358:	6810      	ldr	r0, [r2, #0]
 800735a:	2800      	cmp	r0, #0
 800735c:	d011      	beq.n	8007382 <_Balloc+0x3a>
 800735e:	6803      	ldr	r3, [r0, #0]
 8007360:	6013      	str	r3, [r2, #0]
 8007362:	2200      	movs	r2, #0
 8007364:	6102      	str	r2, [r0, #16]
 8007366:	60c2      	str	r2, [r0, #12]
 8007368:	bc70      	pop	{r4, r5, r6}
 800736a:	bc02      	pop	{r1}
 800736c:	4708      	bx	r1
 800736e:	1c20      	adds	r0, r4, #0
 8007370:	2104      	movs	r1, #4
 8007372:	2221      	movs	r2, #33	; 0x21
 8007374:	f001 fba8 	bl	8008ac8 <_calloc_r>
 8007378:	64e0      	str	r0, [r4, #76]	; 0x4c
 800737a:	2800      	cmp	r0, #0
 800737c:	d1ea      	bne.n	8007354 <_Balloc+0xc>
 800737e:	2000      	movs	r0, #0
 8007380:	e7f2      	b.n	8007368 <_Balloc+0x20>
 8007382:	2601      	movs	r6, #1
 8007384:	40ae      	lsls	r6, r5
 8007386:	1d72      	adds	r2, r6, #5
 8007388:	0092      	lsls	r2, r2, #2
 800738a:	1c20      	adds	r0, r4, #0
 800738c:	2101      	movs	r1, #1
 800738e:	f001 fb9b 	bl	8008ac8 <_calloc_r>
 8007392:	2800      	cmp	r0, #0
 8007394:	d0f3      	beq.n	800737e <_Balloc+0x36>
 8007396:	6045      	str	r5, [r0, #4]
 8007398:	6086      	str	r6, [r0, #8]
 800739a:	e7e2      	b.n	8007362 <_Balloc+0x1a>

0800739c <_Bfree>:
 800739c:	b500      	push	{lr}
 800739e:	2900      	cmp	r1, #0
 80073a0:	d006      	beq.n	80073b0 <_Bfree+0x14>
 80073a2:	684a      	ldr	r2, [r1, #4]
 80073a4:	0093      	lsls	r3, r2, #2
 80073a6:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 80073a8:	18d3      	adds	r3, r2, r3
 80073aa:	681a      	ldr	r2, [r3, #0]
 80073ac:	600a      	str	r2, [r1, #0]
 80073ae:	6019      	str	r1, [r3, #0]
 80073b0:	bc01      	pop	{r0}
 80073b2:	4700      	bx	r0

080073b4 <__multadd>:
 80073b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073b6:	464d      	mov	r5, r9
 80073b8:	4644      	mov	r4, r8
 80073ba:	465f      	mov	r7, fp
 80073bc:	4656      	mov	r6, sl
 80073be:	4698      	mov	r8, r3
 80073c0:	690b      	ldr	r3, [r1, #16]
 80073c2:	b4f0      	push	{r4, r5, r6, r7}
 80073c4:	1c0d      	adds	r5, r1, #0
 80073c6:	4683      	mov	fp, r0
 80073c8:	468a      	mov	sl, r1
 80073ca:	4699      	mov	r9, r3
 80073cc:	3514      	adds	r5, #20
 80073ce:	2400      	movs	r4, #0
 80073d0:	682e      	ldr	r6, [r5, #0]
 80073d2:	0437      	lsls	r7, r6, #16
 80073d4:	0c3f      	lsrs	r7, r7, #16
 80073d6:	4357      	muls	r7, r2
 80073d8:	0c36      	lsrs	r6, r6, #16
 80073da:	4356      	muls	r6, r2
 80073dc:	4447      	add	r7, r8
 80073de:	0c3b      	lsrs	r3, r7, #16
 80073e0:	199e      	adds	r6, r3, r6
 80073e2:	043f      	lsls	r7, r7, #16
 80073e4:	0c31      	lsrs	r1, r6, #16
 80073e6:	0c3f      	lsrs	r7, r7, #16
 80073e8:	0436      	lsls	r6, r6, #16
 80073ea:	19f6      	adds	r6, r6, r7
 80073ec:	3401      	adds	r4, #1
 80073ee:	4688      	mov	r8, r1
 80073f0:	c540      	stmia	r5!, {r6}
 80073f2:	45a1      	cmp	r9, r4
 80073f4:	dcec      	bgt.n	80073d0 <__multadd+0x1c>
 80073f6:	2900      	cmp	r1, #0
 80073f8:	d00d      	beq.n	8007416 <__multadd+0x62>
 80073fa:	4652      	mov	r2, sl
 80073fc:	6892      	ldr	r2, [r2, #8]
 80073fe:	4591      	cmp	r9, r2
 8007400:	da12      	bge.n	8007428 <__multadd+0x74>
 8007402:	464b      	mov	r3, r9
 8007404:	3304      	adds	r3, #4
 8007406:	009b      	lsls	r3, r3, #2
 8007408:	4453      	add	r3, sl
 800740a:	4642      	mov	r2, r8
 800740c:	605a      	str	r2, [r3, #4]
 800740e:	464b      	mov	r3, r9
 8007410:	3301      	adds	r3, #1
 8007412:	4651      	mov	r1, sl
 8007414:	610b      	str	r3, [r1, #16]
 8007416:	4650      	mov	r0, sl
 8007418:	bc3c      	pop	{r2, r3, r4, r5}
 800741a:	4690      	mov	r8, r2
 800741c:	4699      	mov	r9, r3
 800741e:	46a2      	mov	sl, r4
 8007420:	46ab      	mov	fp, r5
 8007422:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007424:	bc02      	pop	{r1}
 8007426:	4708      	bx	r1
 8007428:	4653      	mov	r3, sl
 800742a:	6859      	ldr	r1, [r3, #4]
 800742c:	4658      	mov	r0, fp
 800742e:	3101      	adds	r1, #1
 8007430:	f7ff ff8a 	bl	8007348 <_Balloc>
 8007434:	4653      	mov	r3, sl
 8007436:	691a      	ldr	r2, [r3, #16]
 8007438:	4651      	mov	r1, sl
 800743a:	3202      	adds	r2, #2
 800743c:	1c04      	adds	r4, r0, #0
 800743e:	310c      	adds	r1, #12
 8007440:	0092      	lsls	r2, r2, #2
 8007442:	300c      	adds	r0, #12
 8007444:	f7ff ff32 	bl	80072ac <memcpy>
 8007448:	4651      	mov	r1, sl
 800744a:	6849      	ldr	r1, [r1, #4]
 800744c:	008b      	lsls	r3, r1, #2
 800744e:	4659      	mov	r1, fp
 8007450:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8007452:	18d3      	adds	r3, r2, r3
 8007454:	681a      	ldr	r2, [r3, #0]
 8007456:	4651      	mov	r1, sl
 8007458:	600a      	str	r2, [r1, #0]
 800745a:	46a2      	mov	sl, r4
 800745c:	6019      	str	r1, [r3, #0]
 800745e:	e7d0      	b.n	8007402 <__multadd+0x4e>

08007460 <__s2b>:
 8007460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007462:	4646      	mov	r6, r8
 8007464:	464f      	mov	r7, r9
 8007466:	b4c0      	push	{r6, r7}
 8007468:	1c06      	adds	r6, r0, #0
 800746a:	1c18      	adds	r0, r3, #0
 800746c:	1c0c      	adds	r4, r1, #0
 800746e:	3008      	adds	r0, #8
 8007470:	2109      	movs	r1, #9
 8007472:	4690      	mov	r8, r2
 8007474:	1c1f      	adds	r7, r3, #0
 8007476:	f001 ec98 	blx	8008da8 <__aeabi_idiv>
 800747a:	2801      	cmp	r0, #1
 800747c:	dd3b      	ble.n	80074f6 <__s2b+0x96>
 800747e:	2501      	movs	r5, #1
 8007480:	2100      	movs	r1, #0
 8007482:	006d      	lsls	r5, r5, #1
 8007484:	3101      	adds	r1, #1
 8007486:	42a8      	cmp	r0, r5
 8007488:	dcfb      	bgt.n	8007482 <__s2b+0x22>
 800748a:	1c30      	adds	r0, r6, #0
 800748c:	f7ff ff5c 	bl	8007348 <_Balloc>
 8007490:	9b08      	ldr	r3, [sp, #32]
 8007492:	6143      	str	r3, [r0, #20]
 8007494:	2301      	movs	r3, #1
 8007496:	6103      	str	r3, [r0, #16]
 8007498:	4643      	mov	r3, r8
 800749a:	1c01      	adds	r1, r0, #0
 800749c:	2b09      	cmp	r3, #9
 800749e:	dd27      	ble.n	80074f0 <__s2b+0x90>
 80074a0:	2309      	movs	r3, #9
 80074a2:	191b      	adds	r3, r3, r4
 80074a4:	4699      	mov	r9, r3
 80074a6:	4444      	add	r4, r8
 80074a8:	1c1d      	adds	r5, r3, #0
 80074aa:	782b      	ldrb	r3, [r5, #0]
 80074ac:	1c30      	adds	r0, r6, #0
 80074ae:	3b30      	subs	r3, #48	; 0x30
 80074b0:	220a      	movs	r2, #10
 80074b2:	f7ff ff7f 	bl	80073b4 <__multadd>
 80074b6:	3501      	adds	r5, #1
 80074b8:	1c01      	adds	r1, r0, #0
 80074ba:	42a5      	cmp	r5, r4
 80074bc:	d1f5      	bne.n	80074aa <__s2b+0x4a>
 80074be:	464c      	mov	r4, r9
 80074c0:	4444      	add	r4, r8
 80074c2:	3c08      	subs	r4, #8
 80074c4:	4643      	mov	r3, r8
 80074c6:	429f      	cmp	r7, r3
 80074c8:	dd0b      	ble.n	80074e2 <__s2b+0x82>
 80074ca:	1aff      	subs	r7, r7, r3
 80074cc:	19e7      	adds	r7, r4, r7
 80074ce:	7823      	ldrb	r3, [r4, #0]
 80074d0:	1c30      	adds	r0, r6, #0
 80074d2:	3b30      	subs	r3, #48	; 0x30
 80074d4:	220a      	movs	r2, #10
 80074d6:	f7ff ff6d 	bl	80073b4 <__multadd>
 80074da:	3401      	adds	r4, #1
 80074dc:	1c01      	adds	r1, r0, #0
 80074de:	42bc      	cmp	r4, r7
 80074e0:	d1f5      	bne.n	80074ce <__s2b+0x6e>
 80074e2:	1c08      	adds	r0, r1, #0
 80074e4:	bc0c      	pop	{r2, r3}
 80074e6:	4690      	mov	r8, r2
 80074e8:	4699      	mov	r9, r3
 80074ea:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074ec:	bc02      	pop	{r1}
 80074ee:	4708      	bx	r1
 80074f0:	340a      	adds	r4, #10
 80074f2:	2309      	movs	r3, #9
 80074f4:	e7e7      	b.n	80074c6 <__s2b+0x66>
 80074f6:	2100      	movs	r1, #0
 80074f8:	e7c7      	b.n	800748a <__s2b+0x2a>
 80074fa:	46c0      	nop			; (mov r8, r8)

080074fc <__hi0bits>:
 80074fc:	1c03      	adds	r3, r0, #0
 80074fe:	0c02      	lsrs	r2, r0, #16
 8007500:	b500      	push	{lr}
 8007502:	2000      	movs	r0, #0
 8007504:	2a00      	cmp	r2, #0
 8007506:	d101      	bne.n	800750c <__hi0bits+0x10>
 8007508:	041b      	lsls	r3, r3, #16
 800750a:	2010      	movs	r0, #16
 800750c:	0e1a      	lsrs	r2, r3, #24
 800750e:	d101      	bne.n	8007514 <__hi0bits+0x18>
 8007510:	3008      	adds	r0, #8
 8007512:	021b      	lsls	r3, r3, #8
 8007514:	0f1a      	lsrs	r2, r3, #28
 8007516:	d101      	bne.n	800751c <__hi0bits+0x20>
 8007518:	3004      	adds	r0, #4
 800751a:	011b      	lsls	r3, r3, #4
 800751c:	0f9a      	lsrs	r2, r3, #30
 800751e:	d101      	bne.n	8007524 <__hi0bits+0x28>
 8007520:	3002      	adds	r0, #2
 8007522:	009b      	lsls	r3, r3, #2
 8007524:	2b00      	cmp	r3, #0
 8007526:	db03      	blt.n	8007530 <__hi0bits+0x34>
 8007528:	3001      	adds	r0, #1
 800752a:	005a      	lsls	r2, r3, #1
 800752c:	d400      	bmi.n	8007530 <__hi0bits+0x34>
 800752e:	2020      	movs	r0, #32
 8007530:	bc02      	pop	{r1}
 8007532:	4708      	bx	r1

08007534 <__lo0bits>:
 8007534:	6803      	ldr	r3, [r0, #0]
 8007536:	b500      	push	{lr}
 8007538:	0759      	lsls	r1, r3, #29
 800753a:	d00a      	beq.n	8007552 <__lo0bits+0x1e>
 800753c:	2200      	movs	r2, #0
 800753e:	07d9      	lsls	r1, r3, #31
 8007540:	d404      	bmi.n	800754c <__lo0bits+0x18>
 8007542:	079a      	lsls	r2, r3, #30
 8007544:	d421      	bmi.n	800758a <__lo0bits+0x56>
 8007546:	089b      	lsrs	r3, r3, #2
 8007548:	6003      	str	r3, [r0, #0]
 800754a:	2202      	movs	r2, #2
 800754c:	1c10      	adds	r0, r2, #0
 800754e:	bc02      	pop	{r1}
 8007550:	4708      	bx	r1
 8007552:	0419      	lsls	r1, r3, #16
 8007554:	2200      	movs	r2, #0
 8007556:	2900      	cmp	r1, #0
 8007558:	d101      	bne.n	800755e <__lo0bits+0x2a>
 800755a:	0c1b      	lsrs	r3, r3, #16
 800755c:	2210      	movs	r2, #16
 800755e:	21ff      	movs	r1, #255	; 0xff
 8007560:	4219      	tst	r1, r3
 8007562:	d101      	bne.n	8007568 <__lo0bits+0x34>
 8007564:	3208      	adds	r2, #8
 8007566:	0a1b      	lsrs	r3, r3, #8
 8007568:	0719      	lsls	r1, r3, #28
 800756a:	d101      	bne.n	8007570 <__lo0bits+0x3c>
 800756c:	3204      	adds	r2, #4
 800756e:	091b      	lsrs	r3, r3, #4
 8007570:	0799      	lsls	r1, r3, #30
 8007572:	d101      	bne.n	8007578 <__lo0bits+0x44>
 8007574:	3202      	adds	r2, #2
 8007576:	089b      	lsrs	r3, r3, #2
 8007578:	07d9      	lsls	r1, r3, #31
 800757a:	d404      	bmi.n	8007586 <__lo0bits+0x52>
 800757c:	085b      	lsrs	r3, r3, #1
 800757e:	d101      	bne.n	8007584 <__lo0bits+0x50>
 8007580:	2220      	movs	r2, #32
 8007582:	e7e3      	b.n	800754c <__lo0bits+0x18>
 8007584:	3201      	adds	r2, #1
 8007586:	6003      	str	r3, [r0, #0]
 8007588:	e7e0      	b.n	800754c <__lo0bits+0x18>
 800758a:	085b      	lsrs	r3, r3, #1
 800758c:	6003      	str	r3, [r0, #0]
 800758e:	2201      	movs	r2, #1
 8007590:	e7dc      	b.n	800754c <__lo0bits+0x18>
 8007592:	46c0      	nop			; (mov r8, r8)

08007594 <__i2b>:
 8007594:	b510      	push	{r4, lr}
 8007596:	1c0c      	adds	r4, r1, #0
 8007598:	2101      	movs	r1, #1
 800759a:	f7ff fed5 	bl	8007348 <_Balloc>
 800759e:	2301      	movs	r3, #1
 80075a0:	6144      	str	r4, [r0, #20]
 80075a2:	6103      	str	r3, [r0, #16]
 80075a4:	bc10      	pop	{r4}
 80075a6:	bc02      	pop	{r1}
 80075a8:	4708      	bx	r1
 80075aa:	46c0      	nop			; (mov r8, r8)

080075ac <__multiply>:
 80075ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075ae:	465f      	mov	r7, fp
 80075b0:	4656      	mov	r6, sl
 80075b2:	464d      	mov	r5, r9
 80075b4:	4644      	mov	r4, r8
 80075b6:	b4f0      	push	{r4, r5, r6, r7}
 80075b8:	690e      	ldr	r6, [r1, #16]
 80075ba:	6917      	ldr	r7, [r2, #16]
 80075bc:	b085      	sub	sp, #20
 80075be:	1c0d      	adds	r5, r1, #0
 80075c0:	4690      	mov	r8, r2
 80075c2:	42be      	cmp	r6, r7
 80075c4:	da04      	bge.n	80075d0 <__multiply+0x24>
 80075c6:	1c33      	adds	r3, r6, #0
 80075c8:	1c15      	adds	r5, r2, #0
 80075ca:	1c3e      	adds	r6, r7, #0
 80075cc:	4688      	mov	r8, r1
 80075ce:	1c1f      	adds	r7, r3, #0
 80075d0:	68ab      	ldr	r3, [r5, #8]
 80075d2:	19f2      	adds	r2, r6, r7
 80075d4:	6869      	ldr	r1, [r5, #4]
 80075d6:	4691      	mov	r9, r2
 80075d8:	429a      	cmp	r2, r3
 80075da:	dd00      	ble.n	80075de <__multiply+0x32>
 80075dc:	3101      	adds	r1, #1
 80075de:	f7ff feb3 	bl	8007348 <_Balloc>
 80075e2:	464b      	mov	r3, r9
 80075e4:	3304      	adds	r3, #4
 80075e6:	009b      	lsls	r3, r3, #2
 80075e8:	18c3      	adds	r3, r0, r3
 80075ea:	1c02      	adds	r2, r0, #0
 80075ec:	3304      	adds	r3, #4
 80075ee:	469c      	mov	ip, r3
 80075f0:	3214      	adds	r2, #20
 80075f2:	9003      	str	r0, [sp, #12]
 80075f4:	1c13      	adds	r3, r2, #0
 80075f6:	2100      	movs	r1, #0
 80075f8:	4660      	mov	r0, ip
 80075fa:	4562      	cmp	r2, ip
 80075fc:	d203      	bcs.n	8007606 <__multiply+0x5a>
 80075fe:	c302      	stmia	r3!, {r1}
 8007600:	4298      	cmp	r0, r3
 8007602:	d8fc      	bhi.n	80075fe <__multiply+0x52>
 8007604:	4684      	mov	ip, r0
 8007606:	3604      	adds	r6, #4
 8007608:	1d3b      	adds	r3, r7, #4
 800760a:	00b6      	lsls	r6, r6, #2
 800760c:	009b      	lsls	r3, r3, #2
 800760e:	1c29      	adds	r1, r5, #0
 8007610:	4443      	add	r3, r8
 8007612:	19ad      	adds	r5, r5, r6
 8007614:	4646      	mov	r6, r8
 8007616:	3114      	adds	r1, #20
 8007618:	3304      	adds	r3, #4
 800761a:	3614      	adds	r6, #20
 800761c:	9102      	str	r1, [sp, #8]
 800761e:	3504      	adds	r5, #4
 8007620:	9301      	str	r3, [sp, #4]
 8007622:	4693      	mov	fp, r2
 8007624:	429e      	cmp	r6, r3
 8007626:	d253      	bcs.n	80076d0 <__multiply+0x124>
 8007628:	6833      	ldr	r3, [r6, #0]
 800762a:	041f      	lsls	r7, r3, #16
 800762c:	0c3f      	lsrs	r7, r7, #16
 800762e:	d023      	beq.n	8007678 <__multiply+0xcc>
 8007630:	1c39      	adds	r1, r7, #0
 8007632:	2400      	movs	r4, #0
 8007634:	9a02      	ldr	r2, [sp, #8]
 8007636:	46aa      	mov	sl, r5
 8007638:	465b      	mov	r3, fp
 800763a:	1c27      	adds	r7, r4, #0
 800763c:	46b0      	mov	r8, r6
 800763e:	1c0d      	adds	r5, r1, #0
 8007640:	ca10      	ldmia	r2!, {r4}
 8007642:	0420      	lsls	r0, r4, #16
 8007644:	0c00      	lsrs	r0, r0, #16
 8007646:	1c29      	adds	r1, r5, #0
 8007648:	4341      	muls	r1, r0
 800764a:	0c24      	lsrs	r4, r4, #16
 800764c:	436c      	muls	r4, r5
 800764e:	681e      	ldr	r6, [r3, #0]
 8007650:	0430      	lsls	r0, r6, #16
 8007652:	0c00      	lsrs	r0, r0, #16
 8007654:	1808      	adds	r0, r1, r0
 8007656:	19c0      	adds	r0, r0, r7
 8007658:	0c31      	lsrs	r1, r6, #16
 800765a:	0c07      	lsrs	r7, r0, #16
 800765c:	1861      	adds	r1, r4, r1
 800765e:	19c9      	adds	r1, r1, r7
 8007660:	0400      	lsls	r0, r0, #16
 8007662:	0c0f      	lsrs	r7, r1, #16
 8007664:	0c00      	lsrs	r0, r0, #16
 8007666:	0409      	lsls	r1, r1, #16
 8007668:	4301      	orrs	r1, r0
 800766a:	c302      	stmia	r3!, {r1}
 800766c:	4592      	cmp	sl, r2
 800766e:	d8e7      	bhi.n	8007640 <__multiply+0x94>
 8007670:	601f      	str	r7, [r3, #0]
 8007672:	4646      	mov	r6, r8
 8007674:	6833      	ldr	r3, [r6, #0]
 8007676:	4655      	mov	r5, sl
 8007678:	0c1f      	lsrs	r7, r3, #16
 800767a:	d023      	beq.n	80076c4 <__multiply+0x118>
 800767c:	4659      	mov	r1, fp
 800767e:	680a      	ldr	r2, [r1, #0]
 8007680:	9b02      	ldr	r3, [sp, #8]
 8007682:	9500      	str	r5, [sp, #0]
 8007684:	1c10      	adds	r0, r2, #0
 8007686:	2400      	movs	r4, #0
 8007688:	46b2      	mov	sl, r6
 800768a:	4698      	mov	r8, r3
 800768c:	cb40      	ldmia	r3!, {r6}
 800768e:	0436      	lsls	r6, r6, #16
 8007690:	0c36      	lsrs	r6, r6, #16
 8007692:	437e      	muls	r6, r7
 8007694:	0c00      	lsrs	r0, r0, #16
 8007696:	1830      	adds	r0, r6, r0
 8007698:	1904      	adds	r4, r0, r4
 800769a:	0412      	lsls	r2, r2, #16
 800769c:	0420      	lsls	r0, r4, #16
 800769e:	0c12      	lsrs	r2, r2, #16
 80076a0:	4302      	orrs	r2, r0
 80076a2:	c104      	stmia	r1!, {r2}
 80076a4:	6808      	ldr	r0, [r1, #0]
 80076a6:	4645      	mov	r5, r8
 80076a8:	0402      	lsls	r2, r0, #16
 80076aa:	0c16      	lsrs	r6, r2, #16
 80076ac:	886a      	ldrh	r2, [r5, #2]
 80076ae:	437a      	muls	r2, r7
 80076b0:	0c24      	lsrs	r4, r4, #16
 80076b2:	18b2      	adds	r2, r6, r2
 80076b4:	9e00      	ldr	r6, [sp, #0]
 80076b6:	1912      	adds	r2, r2, r4
 80076b8:	0c14      	lsrs	r4, r2, #16
 80076ba:	429e      	cmp	r6, r3
 80076bc:	d8e5      	bhi.n	800768a <__multiply+0xde>
 80076be:	9d00      	ldr	r5, [sp, #0]
 80076c0:	600a      	str	r2, [r1, #0]
 80076c2:	4656      	mov	r6, sl
 80076c4:	9a01      	ldr	r2, [sp, #4]
 80076c6:	2104      	movs	r1, #4
 80076c8:	3604      	adds	r6, #4
 80076ca:	448b      	add	fp, r1
 80076cc:	42b2      	cmp	r2, r6
 80076ce:	d8ab      	bhi.n	8007628 <__multiply+0x7c>
 80076d0:	464a      	mov	r2, r9
 80076d2:	2a00      	cmp	r2, #0
 80076d4:	dd0e      	ble.n	80076f4 <__multiply+0x148>
 80076d6:	4663      	mov	r3, ip
 80076d8:	3b04      	subs	r3, #4
 80076da:	681c      	ldr	r4, [r3, #0]
 80076dc:	2c00      	cmp	r4, #0
 80076de:	d109      	bne.n	80076f4 <__multiply+0x148>
 80076e0:	464a      	mov	r2, r9
 80076e2:	e003      	b.n	80076ec <__multiply+0x140>
 80076e4:	3b04      	subs	r3, #4
 80076e6:	681d      	ldr	r5, [r3, #0]
 80076e8:	2d00      	cmp	r5, #0
 80076ea:	d102      	bne.n	80076f2 <__multiply+0x146>
 80076ec:	3a01      	subs	r2, #1
 80076ee:	2a00      	cmp	r2, #0
 80076f0:	d1f8      	bne.n	80076e4 <__multiply+0x138>
 80076f2:	4691      	mov	r9, r2
 80076f4:	9903      	ldr	r1, [sp, #12]
 80076f6:	464e      	mov	r6, r9
 80076f8:	1c08      	adds	r0, r1, #0
 80076fa:	610e      	str	r6, [r1, #16]
 80076fc:	b005      	add	sp, #20
 80076fe:	bc3c      	pop	{r2, r3, r4, r5}
 8007700:	4690      	mov	r8, r2
 8007702:	4699      	mov	r9, r3
 8007704:	46a2      	mov	sl, r4
 8007706:	46ab      	mov	fp, r5
 8007708:	bcf0      	pop	{r4, r5, r6, r7}
 800770a:	bc02      	pop	{r1}
 800770c:	4708      	bx	r1
 800770e:	46c0      	nop			; (mov r8, r8)

08007710 <__pow5mult>:
 8007710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007712:	464f      	mov	r7, r9
 8007714:	4646      	mov	r6, r8
 8007716:	2303      	movs	r3, #3
 8007718:	b4c0      	push	{r6, r7}
 800771a:	4681      	mov	r9, r0
 800771c:	1c0f      	adds	r7, r1, #0
 800771e:	1c14      	adds	r4, r2, #0
 8007720:	4013      	ands	r3, r2
 8007722:	d136      	bne.n	8007792 <__pow5mult+0x82>
 8007724:	10a4      	asrs	r4, r4, #2
 8007726:	d022      	beq.n	800776e <__pow5mult+0x5e>
 8007728:	4649      	mov	r1, r9
 800772a:	6c8e      	ldr	r6, [r1, #72]	; 0x48
 800772c:	2e00      	cmp	r6, #0
 800772e:	d039      	beq.n	80077a4 <__pow5mult+0x94>
 8007730:	2301      	movs	r3, #1
 8007732:	4698      	mov	r8, r3
 8007734:	e005      	b.n	8007742 <__pow5mult+0x32>
 8007736:	1064      	asrs	r4, r4, #1
 8007738:	d019      	beq.n	800776e <__pow5mult+0x5e>
 800773a:	6835      	ldr	r5, [r6, #0]
 800773c:	2d00      	cmp	r5, #0
 800773e:	d01d      	beq.n	800777c <__pow5mult+0x6c>
 8007740:	1c2e      	adds	r6, r5, #0
 8007742:	4641      	mov	r1, r8
 8007744:	4221      	tst	r1, r4
 8007746:	d0f6      	beq.n	8007736 <__pow5mult+0x26>
 8007748:	4648      	mov	r0, r9
 800774a:	1c39      	adds	r1, r7, #0
 800774c:	1c32      	adds	r2, r6, #0
 800774e:	f7ff ff2d 	bl	80075ac <__multiply>
 8007752:	2f00      	cmp	r7, #0
 8007754:	d01b      	beq.n	800778e <__pow5mult+0x7e>
 8007756:	687a      	ldr	r2, [r7, #4]
 8007758:	4649      	mov	r1, r9
 800775a:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 800775c:	0093      	lsls	r3, r2, #2
 800775e:	18cb      	adds	r3, r1, r3
 8007760:	681a      	ldr	r2, [r3, #0]
 8007762:	1064      	asrs	r4, r4, #1
 8007764:	603a      	str	r2, [r7, #0]
 8007766:	601f      	str	r7, [r3, #0]
 8007768:	1c07      	adds	r7, r0, #0
 800776a:	2c00      	cmp	r4, #0
 800776c:	d1e5      	bne.n	800773a <__pow5mult+0x2a>
 800776e:	1c38      	adds	r0, r7, #0
 8007770:	bc0c      	pop	{r2, r3}
 8007772:	4690      	mov	r8, r2
 8007774:	4699      	mov	r9, r3
 8007776:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007778:	bc02      	pop	{r1}
 800777a:	4708      	bx	r1
 800777c:	1c31      	adds	r1, r6, #0
 800777e:	1c32      	adds	r2, r6, #0
 8007780:	4648      	mov	r0, r9
 8007782:	f7ff ff13 	bl	80075ac <__multiply>
 8007786:	6030      	str	r0, [r6, #0]
 8007788:	6005      	str	r5, [r0, #0]
 800778a:	1c06      	adds	r6, r0, #0
 800778c:	e7d9      	b.n	8007742 <__pow5mult+0x32>
 800778e:	1c07      	adds	r7, r0, #0
 8007790:	e7d1      	b.n	8007736 <__pow5mult+0x26>
 8007792:	4a09      	ldr	r2, [pc, #36]	; (80077b8 <__pow5mult+0xa8>)
 8007794:	3b01      	subs	r3, #1
 8007796:	009b      	lsls	r3, r3, #2
 8007798:	589a      	ldr	r2, [r3, r2]
 800779a:	2300      	movs	r3, #0
 800779c:	f7ff fe0a 	bl	80073b4 <__multadd>
 80077a0:	1c07      	adds	r7, r0, #0
 80077a2:	e7bf      	b.n	8007724 <__pow5mult+0x14>
 80077a4:	4648      	mov	r0, r9
 80077a6:	4905      	ldr	r1, [pc, #20]	; (80077bc <__pow5mult+0xac>)
 80077a8:	f7ff fef4 	bl	8007594 <__i2b>
 80077ac:	464a      	mov	r2, r9
 80077ae:	2300      	movs	r3, #0
 80077b0:	6490      	str	r0, [r2, #72]	; 0x48
 80077b2:	1c06      	adds	r6, r0, #0
 80077b4:	6003      	str	r3, [r0, #0]
 80077b6:	e7bb      	b.n	8007730 <__pow5mult+0x20>
 80077b8:	0800eea0 	.word	0x0800eea0
 80077bc:	00000271 	.word	0x00000271

080077c0 <__lshift>:
 80077c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80077c2:	464d      	mov	r5, r9
 80077c4:	4644      	mov	r4, r8
 80077c6:	4656      	mov	r6, sl
 80077c8:	465f      	mov	r7, fp
 80077ca:	b4f0      	push	{r4, r5, r6, r7}
 80077cc:	1c0e      	adds	r6, r1, #0
 80077ce:	b083      	sub	sp, #12
 80077d0:	9001      	str	r0, [sp, #4]
 80077d2:	6930      	ldr	r0, [r6, #16]
 80077d4:	1155      	asrs	r5, r2, #5
 80077d6:	1940      	adds	r0, r0, r5
 80077d8:	1c04      	adds	r4, r0, #0
 80077da:	68b3      	ldr	r3, [r6, #8]
 80077dc:	3401      	adds	r4, #1
 80077de:	4690      	mov	r8, r2
 80077e0:	6849      	ldr	r1, [r1, #4]
 80077e2:	4681      	mov	r9, r0
 80077e4:	429c      	cmp	r4, r3
 80077e6:	dd03      	ble.n	80077f0 <__lshift+0x30>
 80077e8:	3101      	adds	r1, #1
 80077ea:	005b      	lsls	r3, r3, #1
 80077ec:	429c      	cmp	r4, r3
 80077ee:	dcfb      	bgt.n	80077e8 <__lshift+0x28>
 80077f0:	9801      	ldr	r0, [sp, #4]
 80077f2:	f7ff fda9 	bl	8007348 <_Balloc>
 80077f6:	1c02      	adds	r2, r0, #0
 80077f8:	4683      	mov	fp, r0
 80077fa:	3214      	adds	r2, #20
 80077fc:	2d00      	cmp	r5, #0
 80077fe:	dd09      	ble.n	8007814 <__lshift+0x54>
 8007800:	2300      	movs	r3, #0
 8007802:	2100      	movs	r1, #0
 8007804:	3301      	adds	r3, #1
 8007806:	c202      	stmia	r2!, {r1}
 8007808:	42ab      	cmp	r3, r5
 800780a:	d1fb      	bne.n	8007804 <__lshift+0x44>
 800780c:	1d1a      	adds	r2, r3, #4
 800780e:	0092      	lsls	r2, r2, #2
 8007810:	445a      	add	r2, fp
 8007812:	3204      	adds	r2, #4
 8007814:	6935      	ldr	r5, [r6, #16]
 8007816:	3504      	adds	r5, #4
 8007818:	4641      	mov	r1, r8
 800781a:	00ad      	lsls	r5, r5, #2
 800781c:	201f      	movs	r0, #31
 800781e:	1c33      	adds	r3, r6, #0
 8007820:	1975      	adds	r5, r6, r5
 8007822:	4001      	ands	r1, r0
 8007824:	3314      	adds	r3, #20
 8007826:	3504      	adds	r5, #4
 8007828:	4688      	mov	r8, r1
 800782a:	2900      	cmp	r1, #0
 800782c:	d027      	beq.n	800787e <__lshift+0xbe>
 800782e:	2020      	movs	r0, #32
 8007830:	1a41      	subs	r1, r0, r1
 8007832:	468c      	mov	ip, r1
 8007834:	2100      	movs	r1, #0
 8007836:	681f      	ldr	r7, [r3, #0]
 8007838:	4640      	mov	r0, r8
 800783a:	4087      	lsls	r7, r0
 800783c:	4339      	orrs	r1, r7
 800783e:	c202      	stmia	r2!, {r1}
 8007840:	cb02      	ldmia	r3!, {r1}
 8007842:	4667      	mov	r7, ip
 8007844:	40f9      	lsrs	r1, r7
 8007846:	429d      	cmp	r5, r3
 8007848:	d8f5      	bhi.n	8007836 <__lshift+0x76>
 800784a:	6011      	str	r1, [r2, #0]
 800784c:	2900      	cmp	r1, #0
 800784e:	d001      	beq.n	8007854 <__lshift+0x94>
 8007850:	464c      	mov	r4, r9
 8007852:	3402      	adds	r4, #2
 8007854:	9f01      	ldr	r7, [sp, #4]
 8007856:	6871      	ldr	r1, [r6, #4]
 8007858:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800785a:	008b      	lsls	r3, r1, #2
 800785c:	4658      	mov	r0, fp
 800785e:	18d3      	adds	r3, r2, r3
 8007860:	3c01      	subs	r4, #1
 8007862:	6104      	str	r4, [r0, #16]
 8007864:	6818      	ldr	r0, [r3, #0]
 8007866:	6030      	str	r0, [r6, #0]
 8007868:	4658      	mov	r0, fp
 800786a:	601e      	str	r6, [r3, #0]
 800786c:	b003      	add	sp, #12
 800786e:	bc3c      	pop	{r2, r3, r4, r5}
 8007870:	4690      	mov	r8, r2
 8007872:	4699      	mov	r9, r3
 8007874:	46a2      	mov	sl, r4
 8007876:	46ab      	mov	fp, r5
 8007878:	bcf0      	pop	{r4, r5, r6, r7}
 800787a:	bc02      	pop	{r1}
 800787c:	4708      	bx	r1
 800787e:	cb02      	ldmia	r3!, {r1}
 8007880:	c202      	stmia	r2!, {r1}
 8007882:	429d      	cmp	r5, r3
 8007884:	d9e6      	bls.n	8007854 <__lshift+0x94>
 8007886:	cb02      	ldmia	r3!, {r1}
 8007888:	c202      	stmia	r2!, {r1}
 800788a:	429d      	cmp	r5, r3
 800788c:	d8f7      	bhi.n	800787e <__lshift+0xbe>
 800788e:	e7e1      	b.n	8007854 <__lshift+0x94>

08007890 <__mcmp>:
 8007890:	b530      	push	{r4, r5, lr}
 8007892:	690a      	ldr	r2, [r1, #16]
 8007894:	6904      	ldr	r4, [r0, #16]
 8007896:	1c03      	adds	r3, r0, #0
 8007898:	1aa0      	subs	r0, r4, r2
 800789a:	d10f      	bne.n	80078bc <__mcmp+0x2c>
 800789c:	3204      	adds	r2, #4
 800789e:	0092      	lsls	r2, r2, #2
 80078a0:	1c1d      	adds	r5, r3, #0
 80078a2:	1889      	adds	r1, r1, r2
 80078a4:	189b      	adds	r3, r3, r2
 80078a6:	3514      	adds	r5, #20
 80078a8:	3304      	adds	r3, #4
 80078aa:	3104      	adds	r1, #4
 80078ac:	3b04      	subs	r3, #4
 80078ae:	3904      	subs	r1, #4
 80078b0:	681c      	ldr	r4, [r3, #0]
 80078b2:	680a      	ldr	r2, [r1, #0]
 80078b4:	4294      	cmp	r4, r2
 80078b6:	d104      	bne.n	80078c2 <__mcmp+0x32>
 80078b8:	429d      	cmp	r5, r3
 80078ba:	d3f7      	bcc.n	80078ac <__mcmp+0x1c>
 80078bc:	bc30      	pop	{r4, r5}
 80078be:	bc02      	pop	{r1}
 80078c0:	4708      	bx	r1
 80078c2:	4294      	cmp	r4, r2
 80078c4:	4180      	sbcs	r0, r0
 80078c6:	2301      	movs	r3, #1
 80078c8:	4318      	orrs	r0, r3
 80078ca:	e7f7      	b.n	80078bc <__mcmp+0x2c>

080078cc <__mdiff>:
 80078cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078ce:	464f      	mov	r7, r9
 80078d0:	4646      	mov	r6, r8
 80078d2:	b4c0      	push	{r6, r7}
 80078d4:	1c0c      	adds	r4, r1, #0
 80078d6:	1c07      	adds	r7, r0, #0
 80078d8:	1c08      	adds	r0, r1, #0
 80078da:	1c11      	adds	r1, r2, #0
 80078dc:	1c15      	adds	r5, r2, #0
 80078de:	f7ff ffd7 	bl	8007890 <__mcmp>
 80078e2:	1e06      	subs	r6, r0, #0
 80078e4:	d060      	beq.n	80079a8 <__mdiff+0xdc>
 80078e6:	db5a      	blt.n	800799e <__mdiff+0xd2>
 80078e8:	2600      	movs	r6, #0
 80078ea:	1c38      	adds	r0, r7, #0
 80078ec:	6861      	ldr	r1, [r4, #4]
 80078ee:	f7ff fd2b 	bl	8007348 <_Balloc>
 80078f2:	4684      	mov	ip, r0
 80078f4:	60c6      	str	r6, [r0, #12]
 80078f6:	6920      	ldr	r0, [r4, #16]
 80078f8:	1d03      	adds	r3, r0, #4
 80078fa:	009b      	lsls	r3, r3, #2
 80078fc:	18e3      	adds	r3, r4, r3
 80078fe:	3304      	adds	r3, #4
 8007900:	4698      	mov	r8, r3
 8007902:	692b      	ldr	r3, [r5, #16]
 8007904:	3304      	adds	r3, #4
 8007906:	009b      	lsls	r3, r3, #2
 8007908:	18eb      	adds	r3, r5, r3
 800790a:	3304      	adds	r3, #4
 800790c:	1c21      	adds	r1, r4, #0
 800790e:	1c2a      	adds	r2, r5, #0
 8007910:	4667      	mov	r7, ip
 8007912:	4699      	mov	r9, r3
 8007914:	3114      	adds	r1, #20
 8007916:	3214      	adds	r2, #20
 8007918:	3714      	adds	r7, #20
 800791a:	2600      	movs	r6, #0
 800791c:	c920      	ldmia	r1!, {r5}
 800791e:	ca10      	ldmia	r2!, {r4}
 8007920:	042b      	lsls	r3, r5, #16
 8007922:	0c1b      	lsrs	r3, r3, #16
 8007924:	199e      	adds	r6, r3, r6
 8007926:	0423      	lsls	r3, r4, #16
 8007928:	0c1b      	lsrs	r3, r3, #16
 800792a:	1af3      	subs	r3, r6, r3
 800792c:	0c24      	lsrs	r4, r4, #16
 800792e:	0c2d      	lsrs	r5, r5, #16
 8007930:	141e      	asrs	r6, r3, #16
 8007932:	1b2d      	subs	r5, r5, r4
 8007934:	19ad      	adds	r5, r5, r6
 8007936:	041b      	lsls	r3, r3, #16
 8007938:	0c1b      	lsrs	r3, r3, #16
 800793a:	142e      	asrs	r6, r5, #16
 800793c:	042d      	lsls	r5, r5, #16
 800793e:	431d      	orrs	r5, r3
 8007940:	1c3b      	adds	r3, r7, #0
 8007942:	c320      	stmia	r3!, {r5}
 8007944:	1c0c      	adds	r4, r1, #0
 8007946:	1c1f      	adds	r7, r3, #0
 8007948:	4591      	cmp	r9, r2
 800794a:	d8e7      	bhi.n	800791c <__mdiff+0x50>
 800794c:	4699      	mov	r9, r3
 800794e:	4588      	cmp	r8, r1
 8007950:	d914      	bls.n	800797c <__mdiff+0xb0>
 8007952:	cc80      	ldmia	r4!, {r7}
 8007954:	043a      	lsls	r2, r7, #16
 8007956:	0c12      	lsrs	r2, r2, #16
 8007958:	1992      	adds	r2, r2, r6
 800795a:	1415      	asrs	r5, r2, #16
 800795c:	0c3f      	lsrs	r7, r7, #16
 800795e:	19ed      	adds	r5, r5, r7
 8007960:	0412      	lsls	r2, r2, #16
 8007962:	142e      	asrs	r6, r5, #16
 8007964:	0c12      	lsrs	r2, r2, #16
 8007966:	042d      	lsls	r5, r5, #16
 8007968:	4315      	orrs	r5, r2
 800796a:	c320      	stmia	r3!, {r5}
 800796c:	45a0      	cmp	r8, r4
 800796e:	d8f0      	bhi.n	8007952 <__mdiff+0x86>
 8007970:	43cb      	mvns	r3, r1
 8007972:	4443      	add	r3, r8
 8007974:	089b      	lsrs	r3, r3, #2
 8007976:	3301      	adds	r3, #1
 8007978:	009b      	lsls	r3, r3, #2
 800797a:	444b      	add	r3, r9
 800797c:	3b04      	subs	r3, #4
 800797e:	2d00      	cmp	r5, #0
 8007980:	d104      	bne.n	800798c <__mdiff+0xc0>
 8007982:	3b04      	subs	r3, #4
 8007984:	681a      	ldr	r2, [r3, #0]
 8007986:	3801      	subs	r0, #1
 8007988:	2a00      	cmp	r2, #0
 800798a:	d0fa      	beq.n	8007982 <__mdiff+0xb6>
 800798c:	4663      	mov	r3, ip
 800798e:	6118      	str	r0, [r3, #16]
 8007990:	4660      	mov	r0, ip
 8007992:	bc0c      	pop	{r2, r3}
 8007994:	4690      	mov	r8, r2
 8007996:	4699      	mov	r9, r3
 8007998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800799a:	bc02      	pop	{r1}
 800799c:	4708      	bx	r1
 800799e:	1c23      	adds	r3, r4, #0
 80079a0:	2601      	movs	r6, #1
 80079a2:	1c2c      	adds	r4, r5, #0
 80079a4:	1c1d      	adds	r5, r3, #0
 80079a6:	e7a0      	b.n	80078ea <__mdiff+0x1e>
 80079a8:	1c38      	adds	r0, r7, #0
 80079aa:	2100      	movs	r1, #0
 80079ac:	f7ff fccc 	bl	8007348 <_Balloc>
 80079b0:	2301      	movs	r3, #1
 80079b2:	4684      	mov	ip, r0
 80079b4:	6103      	str	r3, [r0, #16]
 80079b6:	6146      	str	r6, [r0, #20]
 80079b8:	e7ea      	b.n	8007990 <__mdiff+0xc4>
 80079ba:	46c0      	nop			; (mov r8, r8)

080079bc <__ulp>:
 80079bc:	4b0f      	ldr	r3, [pc, #60]	; (80079fc <__ulp+0x40>)
 80079be:	4a10      	ldr	r2, [pc, #64]	; (8007a00 <__ulp+0x44>)
 80079c0:	400b      	ands	r3, r1
 80079c2:	189b      	adds	r3, r3, r2
 80079c4:	b510      	push	{r4, lr}
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	dd04      	ble.n	80079d4 <__ulp+0x18>
 80079ca:	1c19      	adds	r1, r3, #0
 80079cc:	2000      	movs	r0, #0
 80079ce:	bc10      	pop	{r4}
 80079d0:	bc04      	pop	{r2}
 80079d2:	4710      	bx	r2
 80079d4:	425b      	negs	r3, r3
 80079d6:	151b      	asrs	r3, r3, #20
 80079d8:	2000      	movs	r0, #0
 80079da:	2100      	movs	r1, #0
 80079dc:	2b13      	cmp	r3, #19
 80079de:	dd07      	ble.n	80079f0 <__ulp+0x34>
 80079e0:	2201      	movs	r2, #1
 80079e2:	2b32      	cmp	r3, #50	; 0x32
 80079e4:	dc02      	bgt.n	80079ec <__ulp+0x30>
 80079e6:	2433      	movs	r4, #51	; 0x33
 80079e8:	1ae3      	subs	r3, r4, r3
 80079ea:	409a      	lsls	r2, r3
 80079ec:	1c10      	adds	r0, r2, #0
 80079ee:	e7ee      	b.n	80079ce <__ulp+0x12>
 80079f0:	2280      	movs	r2, #128	; 0x80
 80079f2:	0312      	lsls	r2, r2, #12
 80079f4:	1c11      	adds	r1, r2, #0
 80079f6:	4119      	asrs	r1, r3
 80079f8:	2000      	movs	r0, #0
 80079fa:	e7e8      	b.n	80079ce <__ulp+0x12>
 80079fc:	7ff00000 	.word	0x7ff00000
 8007a00:	fcc00000 	.word	0xfcc00000

08007a04 <__b2d>:
 8007a04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a06:	6904      	ldr	r4, [r0, #16]
 8007a08:	3404      	adds	r4, #4
 8007a0a:	00a4      	lsls	r4, r4, #2
 8007a0c:	1904      	adds	r4, r0, r4
 8007a0e:	6825      	ldr	r5, [r4, #0]
 8007a10:	4647      	mov	r7, r8
 8007a12:	b480      	push	{r7}
 8007a14:	1c06      	adds	r6, r0, #0
 8007a16:	1c28      	adds	r0, r5, #0
 8007a18:	1c0f      	adds	r7, r1, #0
 8007a1a:	f7ff fd6f 	bl	80074fc <__hi0bits>
 8007a1e:	2320      	movs	r3, #32
 8007a20:	1a1b      	subs	r3, r3, r0
 8007a22:	3614      	adds	r6, #20
 8007a24:	603b      	str	r3, [r7, #0]
 8007a26:	280a      	cmp	r0, #10
 8007a28:	dc19      	bgt.n	8007a5e <__b2d+0x5a>
 8007a2a:	270b      	movs	r7, #11
 8007a2c:	1a3f      	subs	r7, r7, r0
 8007a2e:	1c29      	adds	r1, r5, #0
 8007a30:	40f9      	lsrs	r1, r7
 8007a32:	4688      	mov	r8, r1
 8007a34:	491b      	ldr	r1, [pc, #108]	; (8007aa4 <__b2d+0xa0>)
 8007a36:	1c0b      	adds	r3, r1, #0
 8007a38:	4641      	mov	r1, r8
 8007a3a:	430b      	orrs	r3, r1
 8007a3c:	2100      	movs	r1, #0
 8007a3e:	42a6      	cmp	r6, r4
 8007a40:	d202      	bcs.n	8007a48 <__b2d+0x44>
 8007a42:	3c04      	subs	r4, #4
 8007a44:	6821      	ldr	r1, [r4, #0]
 8007a46:	40f9      	lsrs	r1, r7
 8007a48:	3015      	adds	r0, #21
 8007a4a:	4085      	lsls	r5, r0
 8007a4c:	1c0a      	adds	r2, r1, #0
 8007a4e:	432a      	orrs	r2, r5
 8007a50:	1c10      	adds	r0, r2, #0
 8007a52:	1c19      	adds	r1, r3, #0
 8007a54:	bc04      	pop	{r2}
 8007a56:	4690      	mov	r8, r2
 8007a58:	bcf0      	pop	{r4, r5, r6, r7}
 8007a5a:	bc04      	pop	{r2}
 8007a5c:	4710      	bx	r2
 8007a5e:	2100      	movs	r1, #0
 8007a60:	42a6      	cmp	r6, r4
 8007a62:	d201      	bcs.n	8007a68 <__b2d+0x64>
 8007a64:	3c04      	subs	r4, #4
 8007a66:	6821      	ldr	r1, [r4, #0]
 8007a68:	1c07      	adds	r7, r0, #0
 8007a6a:	3f0b      	subs	r7, #11
 8007a6c:	2f00      	cmp	r7, #0
 8007a6e:	d013      	beq.n	8007a98 <__b2d+0x94>
 8007a70:	232b      	movs	r3, #43	; 0x2b
 8007a72:	1a18      	subs	r0, r3, r0
 8007a74:	4b0b      	ldr	r3, [pc, #44]	; (8007aa4 <__b2d+0xa0>)
 8007a76:	40bd      	lsls	r5, r7
 8007a78:	432b      	orrs	r3, r5
 8007a7a:	469c      	mov	ip, r3
 8007a7c:	1c0d      	adds	r5, r1, #0
 8007a7e:	40c5      	lsrs	r5, r0
 8007a80:	4663      	mov	r3, ip
 8007a82:	432b      	orrs	r3, r5
 8007a84:	2500      	movs	r5, #0
 8007a86:	42b4      	cmp	r4, r6
 8007a88:	d902      	bls.n	8007a90 <__b2d+0x8c>
 8007a8a:	3c04      	subs	r4, #4
 8007a8c:	6825      	ldr	r5, [r4, #0]
 8007a8e:	40c5      	lsrs	r5, r0
 8007a90:	40b9      	lsls	r1, r7
 8007a92:	1c2a      	adds	r2, r5, #0
 8007a94:	430a      	orrs	r2, r1
 8007a96:	e7db      	b.n	8007a50 <__b2d+0x4c>
 8007a98:	4802      	ldr	r0, [pc, #8]	; (8007aa4 <__b2d+0xa0>)
 8007a9a:	1c03      	adds	r3, r0, #0
 8007a9c:	432b      	orrs	r3, r5
 8007a9e:	1c0a      	adds	r2, r1, #0
 8007aa0:	e7d6      	b.n	8007a50 <__b2d+0x4c>
 8007aa2:	46c0      	nop			; (mov r8, r8)
 8007aa4:	3ff00000 	.word	0x3ff00000

08007aa8 <__d2b>:
 8007aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007aaa:	2101      	movs	r1, #1
 8007aac:	b083      	sub	sp, #12
 8007aae:	1c1d      	adds	r5, r3, #0
 8007ab0:	1c14      	adds	r4, r2, #0
 8007ab2:	f7ff fc49 	bl	8007348 <_Balloc>
 8007ab6:	032a      	lsls	r2, r5, #12
 8007ab8:	006b      	lsls	r3, r5, #1
 8007aba:	1c06      	adds	r6, r0, #0
 8007abc:	0b12      	lsrs	r2, r2, #12
 8007abe:	0d5f      	lsrs	r7, r3, #21
 8007ac0:	d002      	beq.n	8007ac8 <__d2b+0x20>
 8007ac2:	2380      	movs	r3, #128	; 0x80
 8007ac4:	035b      	lsls	r3, r3, #13
 8007ac6:	431a      	orrs	r2, r3
 8007ac8:	9201      	str	r2, [sp, #4]
 8007aca:	2c00      	cmp	r4, #0
 8007acc:	d01a      	beq.n	8007b04 <__d2b+0x5c>
 8007ace:	4668      	mov	r0, sp
 8007ad0:	9400      	str	r4, [sp, #0]
 8007ad2:	f7ff fd2f 	bl	8007534 <__lo0bits>
 8007ad6:	2800      	cmp	r0, #0
 8007ad8:	d132      	bne.n	8007b40 <__d2b+0x98>
 8007ada:	9b00      	ldr	r3, [sp, #0]
 8007adc:	9c01      	ldr	r4, [sp, #4]
 8007ade:	6173      	str	r3, [r6, #20]
 8007ae0:	61b4      	str	r4, [r6, #24]
 8007ae2:	4263      	negs	r3, r4
 8007ae4:	4163      	adcs	r3, r4
 8007ae6:	2402      	movs	r4, #2
 8007ae8:	1ae4      	subs	r4, r4, r3
 8007aea:	6134      	str	r4, [r6, #16]
 8007aec:	2f00      	cmp	r7, #0
 8007aee:	d014      	beq.n	8007b1a <__d2b+0x72>
 8007af0:	4a19      	ldr	r2, [pc, #100]	; (8007b58 <__d2b+0xb0>)
 8007af2:	9908      	ldr	r1, [sp, #32]
 8007af4:	18bb      	adds	r3, r7, r2
 8007af6:	181b      	adds	r3, r3, r0
 8007af8:	600b      	str	r3, [r1, #0]
 8007afa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007afc:	2335      	movs	r3, #53	; 0x35
 8007afe:	1a18      	subs	r0, r3, r0
 8007b00:	6010      	str	r0, [r2, #0]
 8007b02:	e018      	b.n	8007b36 <__d2b+0x8e>
 8007b04:	a801      	add	r0, sp, #4
 8007b06:	f7ff fd15 	bl	8007534 <__lo0bits>
 8007b0a:	9901      	ldr	r1, [sp, #4]
 8007b0c:	2301      	movs	r3, #1
 8007b0e:	6171      	str	r1, [r6, #20]
 8007b10:	6133      	str	r3, [r6, #16]
 8007b12:	3020      	adds	r0, #32
 8007b14:	2401      	movs	r4, #1
 8007b16:	2f00      	cmp	r7, #0
 8007b18:	d1ea      	bne.n	8007af0 <__d2b+0x48>
 8007b1a:	4b10      	ldr	r3, [pc, #64]	; (8007b5c <__d2b+0xb4>)
 8007b1c:	18c0      	adds	r0, r0, r3
 8007b1e:	1ce3      	adds	r3, r4, #3
 8007b20:	9908      	ldr	r1, [sp, #32]
 8007b22:	009b      	lsls	r3, r3, #2
 8007b24:	18f3      	adds	r3, r6, r3
 8007b26:	6008      	str	r0, [r1, #0]
 8007b28:	6858      	ldr	r0, [r3, #4]
 8007b2a:	f7ff fce7 	bl	80074fc <__hi0bits>
 8007b2e:	0164      	lsls	r4, r4, #5
 8007b30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b32:	1a24      	subs	r4, r4, r0
 8007b34:	6014      	str	r4, [r2, #0]
 8007b36:	1c30      	adds	r0, r6, #0
 8007b38:	b003      	add	sp, #12
 8007b3a:	bcf0      	pop	{r4, r5, r6, r7}
 8007b3c:	bc02      	pop	{r1}
 8007b3e:	4708      	bx	r1
 8007b40:	9c01      	ldr	r4, [sp, #4]
 8007b42:	2320      	movs	r3, #32
 8007b44:	1a1b      	subs	r3, r3, r0
 8007b46:	1c21      	adds	r1, r4, #0
 8007b48:	4099      	lsls	r1, r3
 8007b4a:	9a00      	ldr	r2, [sp, #0]
 8007b4c:	1c0b      	adds	r3, r1, #0
 8007b4e:	4313      	orrs	r3, r2
 8007b50:	40c4      	lsrs	r4, r0
 8007b52:	6173      	str	r3, [r6, #20]
 8007b54:	9401      	str	r4, [sp, #4]
 8007b56:	e7c3      	b.n	8007ae0 <__d2b+0x38>
 8007b58:	fffffbcd 	.word	0xfffffbcd
 8007b5c:	fffffbce 	.word	0xfffffbce

08007b60 <__ratio>:
 8007b60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b62:	4657      	mov	r7, sl
 8007b64:	464e      	mov	r6, r9
 8007b66:	4645      	mov	r5, r8
 8007b68:	b4e0      	push	{r5, r6, r7}
 8007b6a:	b084      	sub	sp, #16
 8007b6c:	4689      	mov	r9, r1
 8007b6e:	a902      	add	r1, sp, #8
 8007b70:	4680      	mov	r8, r0
 8007b72:	f7ff ff47 	bl	8007a04 <__b2d>
 8007b76:	1c06      	adds	r6, r0, #0
 8007b78:	1c0f      	adds	r7, r1, #0
 8007b7a:	4648      	mov	r0, r9
 8007b7c:	a903      	add	r1, sp, #12
 8007b7e:	f7ff ff41 	bl	8007a04 <__b2d>
 8007b82:	1c02      	adds	r2, r0, #0
 8007b84:	1c0b      	adds	r3, r1, #0
 8007b86:	9802      	ldr	r0, [sp, #8]
 8007b88:	9903      	ldr	r1, [sp, #12]
 8007b8a:	1a40      	subs	r0, r0, r1
 8007b8c:	4641      	mov	r1, r8
 8007b8e:	4682      	mov	sl, r0
 8007b90:	6908      	ldr	r0, [r1, #16]
 8007b92:	4684      	mov	ip, r0
 8007b94:	4648      	mov	r0, r9
 8007b96:	6901      	ldr	r1, [r0, #16]
 8007b98:	4660      	mov	r0, ip
 8007b9a:	1a41      	subs	r1, r0, r1
 8007b9c:	0149      	lsls	r1, r1, #5
 8007b9e:	4451      	add	r1, sl
 8007ba0:	9200      	str	r2, [sp, #0]
 8007ba2:	9301      	str	r3, [sp, #4]
 8007ba4:	2900      	cmp	r1, #0
 8007ba6:	dd0e      	ble.n	8007bc6 <__ratio+0x66>
 8007ba8:	0509      	lsls	r1, r1, #20
 8007baa:	19cd      	adds	r5, r1, r7
 8007bac:	1c2f      	adds	r7, r5, #0
 8007bae:	1c30      	adds	r0, r6, #0
 8007bb0:	1c39      	adds	r1, r7, #0
 8007bb2:	f001 ecfa 	blx	80095a8 <__aeabi_ddiv>
 8007bb6:	b004      	add	sp, #16
 8007bb8:	bc1c      	pop	{r2, r3, r4}
 8007bba:	4690      	mov	r8, r2
 8007bbc:	4699      	mov	r9, r3
 8007bbe:	46a2      	mov	sl, r4
 8007bc0:	bcf0      	pop	{r4, r5, r6, r7}
 8007bc2:	bc04      	pop	{r2}
 8007bc4:	4710      	bx	r2
 8007bc6:	9b01      	ldr	r3, [sp, #4]
 8007bc8:	0509      	lsls	r1, r1, #20
 8007bca:	1a59      	subs	r1, r3, r1
 8007bcc:	9101      	str	r1, [sp, #4]
 8007bce:	9a00      	ldr	r2, [sp, #0]
 8007bd0:	9b01      	ldr	r3, [sp, #4]
 8007bd2:	e7ec      	b.n	8007bae <__ratio+0x4e>

08007bd4 <_mprec_log10>:
 8007bd4:	b510      	push	{r4, lr}
 8007bd6:	1c04      	adds	r4, r0, #0
 8007bd8:	2817      	cmp	r0, #23
 8007bda:	dd0b      	ble.n	8007bf4 <_mprec_log10+0x20>
 8007bdc:	4909      	ldr	r1, [pc, #36]	; (8007c04 <_mprec_log10+0x30>)
 8007bde:	4808      	ldr	r0, [pc, #32]	; (8007c00 <_mprec_log10+0x2c>)
 8007be0:	4a09      	ldr	r2, [pc, #36]	; (8007c08 <_mprec_log10+0x34>)
 8007be2:	4b0a      	ldr	r3, [pc, #40]	; (8007c0c <_mprec_log10+0x38>)
 8007be4:	3c01      	subs	r4, #1
 8007be6:	f001 eb98 	blx	8009318 <__aeabi_dmul>
 8007bea:	2c00      	cmp	r4, #0
 8007bec:	d1f8      	bne.n	8007be0 <_mprec_log10+0xc>
 8007bee:	bc10      	pop	{r4}
 8007bf0:	bc04      	pop	{r2}
 8007bf2:	4710      	bx	r2
 8007bf4:	4b06      	ldr	r3, [pc, #24]	; (8007c10 <_mprec_log10+0x3c>)
 8007bf6:	00c4      	lsls	r4, r0, #3
 8007bf8:	191c      	adds	r4, r3, r4
 8007bfa:	6920      	ldr	r0, [r4, #16]
 8007bfc:	6961      	ldr	r1, [r4, #20]
 8007bfe:	e7f6      	b.n	8007bee <_mprec_log10+0x1a>
 8007c00:	00000000 	.word	0x00000000
 8007c04:	3ff00000 	.word	0x3ff00000
 8007c08:	00000000 	.word	0x00000000
 8007c0c:	40240000 	.word	0x40240000
 8007c10:	0800eea0 	.word	0x0800eea0

08007c14 <__copybits>:
 8007c14:	b570      	push	{r4, r5, r6, lr}
 8007c16:	6915      	ldr	r5, [r2, #16]
 8007c18:	1e4e      	subs	r6, r1, #1
 8007c1a:	3504      	adds	r5, #4
 8007c1c:	1176      	asrs	r6, r6, #5
 8007c1e:	00ad      	lsls	r5, r5, #2
 8007c20:	3601      	adds	r6, #1
 8007c22:	1c13      	adds	r3, r2, #0
 8007c24:	1955      	adds	r5, r2, r5
 8007c26:	00b6      	lsls	r6, r6, #2
 8007c28:	3314      	adds	r3, #20
 8007c2a:	3504      	adds	r5, #4
 8007c2c:	1986      	adds	r6, r0, r6
 8007c2e:	42ab      	cmp	r3, r5
 8007c30:	d20a      	bcs.n	8007c48 <__copybits+0x34>
 8007c32:	1c01      	adds	r1, r0, #0
 8007c34:	cb10      	ldmia	r3!, {r4}
 8007c36:	c110      	stmia	r1!, {r4}
 8007c38:	429d      	cmp	r5, r3
 8007c3a:	d8fb      	bhi.n	8007c34 <__copybits+0x20>
 8007c3c:	1aab      	subs	r3, r5, r2
 8007c3e:	3b15      	subs	r3, #21
 8007c40:	089b      	lsrs	r3, r3, #2
 8007c42:	3301      	adds	r3, #1
 8007c44:	009b      	lsls	r3, r3, #2
 8007c46:	18c0      	adds	r0, r0, r3
 8007c48:	2300      	movs	r3, #0
 8007c4a:	4286      	cmp	r6, r0
 8007c4c:	d902      	bls.n	8007c54 <__copybits+0x40>
 8007c4e:	c008      	stmia	r0!, {r3}
 8007c50:	4286      	cmp	r6, r0
 8007c52:	d8fc      	bhi.n	8007c4e <__copybits+0x3a>
 8007c54:	bc70      	pop	{r4, r5, r6}
 8007c56:	bc01      	pop	{r0}
 8007c58:	4700      	bx	r0
 8007c5a:	46c0      	nop			; (mov r8, r8)

08007c5c <__any_on>:
 8007c5c:	1c03      	adds	r3, r0, #0
 8007c5e:	1c02      	adds	r2, r0, #0
 8007c60:	6900      	ldr	r0, [r0, #16]
 8007c62:	b530      	push	{r4, r5, lr}
 8007c64:	3314      	adds	r3, #20
 8007c66:	114c      	asrs	r4, r1, #5
 8007c68:	42a0      	cmp	r0, r4
 8007c6a:	da11      	bge.n	8007c90 <__any_on+0x34>
 8007c6c:	1c04      	adds	r4, r0, #0
 8007c6e:	1d20      	adds	r0, r4, #4
 8007c70:	0080      	lsls	r0, r0, #2
 8007c72:	1810      	adds	r0, r2, r0
 8007c74:	1d02      	adds	r2, r0, #4
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d303      	bcc.n	8007c82 <__any_on+0x26>
 8007c7a:	e01a      	b.n	8007cb2 <__any_on+0x56>
 8007c7c:	4283      	cmp	r3, r0
 8007c7e:	d218      	bcs.n	8007cb2 <__any_on+0x56>
 8007c80:	3804      	subs	r0, #4
 8007c82:	6802      	ldr	r2, [r0, #0]
 8007c84:	2a00      	cmp	r2, #0
 8007c86:	d0f9      	beq.n	8007c7c <__any_on+0x20>
 8007c88:	2001      	movs	r0, #1
 8007c8a:	bc30      	pop	{r4, r5}
 8007c8c:	bc02      	pop	{r1}
 8007c8e:	4708      	bx	r1
 8007c90:	42a0      	cmp	r0, r4
 8007c92:	ddec      	ble.n	8007c6e <__any_on+0x12>
 8007c94:	201f      	movs	r0, #31
 8007c96:	4001      	ands	r1, r0
 8007c98:	d0e9      	beq.n	8007c6e <__any_on+0x12>
 8007c9a:	1d20      	adds	r0, r4, #4
 8007c9c:	0080      	lsls	r0, r0, #2
 8007c9e:	1810      	adds	r0, r2, r0
 8007ca0:	6845      	ldr	r5, [r0, #4]
 8007ca2:	1c28      	adds	r0, r5, #0
 8007ca4:	40c8      	lsrs	r0, r1
 8007ca6:	4088      	lsls	r0, r1
 8007ca8:	1c01      	adds	r1, r0, #0
 8007caa:	2001      	movs	r0, #1
 8007cac:	42a9      	cmp	r1, r5
 8007cae:	d1ec      	bne.n	8007c8a <__any_on+0x2e>
 8007cb0:	e7dd      	b.n	8007c6e <__any_on+0x12>
 8007cb2:	2000      	movs	r0, #0
 8007cb4:	e7e9      	b.n	8007c8a <__any_on+0x2e>
 8007cb6:	46c0      	nop			; (mov r8, r8)

08007cb8 <_realloc_r>:
 8007cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007cba:	465f      	mov	r7, fp
 8007cbc:	4644      	mov	r4, r8
 8007cbe:	4656      	mov	r6, sl
 8007cc0:	464d      	mov	r5, r9
 8007cc2:	b4f0      	push	{r4, r5, r6, r7}
 8007cc4:	4693      	mov	fp, r2
 8007cc6:	b085      	sub	sp, #20
 8007cc8:	1c07      	adds	r7, r0, #0
 8007cca:	1c0c      	adds	r4, r1, #0
 8007ccc:	2900      	cmp	r1, #0
 8007cce:	d100      	bne.n	8007cd2 <_realloc_r+0x1a>
 8007cd0:	e103      	b.n	8007eda <_realloc_r+0x222>
 8007cd2:	1c26      	adds	r6, r4, #0
 8007cd4:	3e08      	subs	r6, #8
 8007cd6:	f7ff fb31 	bl	800733c <__malloc_lock>
 8007cda:	6873      	ldr	r3, [r6, #4]
 8007cdc:	2203      	movs	r2, #3
 8007cde:	1c18      	adds	r0, r3, #0
 8007ce0:	465d      	mov	r5, fp
 8007ce2:	4390      	bics	r0, r2
 8007ce4:	350b      	adds	r5, #11
 8007ce6:	4680      	mov	r8, r0
 8007ce8:	2d16      	cmp	r5, #22
 8007cea:	d865      	bhi.n	8007db8 <_realloc_r+0x100>
 8007cec:	2110      	movs	r1, #16
 8007cee:	9101      	str	r1, [sp, #4]
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	2510      	movs	r5, #16
 8007cf4:	455d      	cmp	r5, fp
 8007cf6:	d200      	bcs.n	8007cfa <_realloc_r+0x42>
 8007cf8:	e0f4      	b.n	8007ee4 <_realloc_r+0x22c>
 8007cfa:	2a00      	cmp	r2, #0
 8007cfc:	d000      	beq.n	8007d00 <_realloc_r+0x48>
 8007cfe:	e0f1      	b.n	8007ee4 <_realloc_r+0x22c>
 8007d00:	9801      	ldr	r0, [sp, #4]
 8007d02:	4580      	cmp	r8, r0
 8007d04:	da5d      	bge.n	8007dc2 <_realloc_r+0x10a>
 8007d06:	48d4      	ldr	r0, [pc, #848]	; (8008058 <_realloc_r+0x3a0>)
 8007d08:	4641      	mov	r1, r8
 8007d0a:	6880      	ldr	r0, [r0, #8]
 8007d0c:	1872      	adds	r2, r6, r1
 8007d0e:	9002      	str	r0, [sp, #8]
 8007d10:	4290      	cmp	r0, r2
 8007d12:	d100      	bne.n	8007d16 <_realloc_r+0x5e>
 8007d14:	e0eb      	b.n	8007eee <_realloc_r+0x236>
 8007d16:	6851      	ldr	r1, [r2, #4]
 8007d18:	2001      	movs	r0, #1
 8007d1a:	468a      	mov	sl, r1
 8007d1c:	4381      	bics	r1, r0
 8007d1e:	4689      	mov	r9, r1
 8007d20:	4491      	add	r9, r2
 8007d22:	4684      	mov	ip, r0
 8007d24:	4648      	mov	r0, r9
 8007d26:	6841      	ldr	r1, [r0, #4]
 8007d28:	4660      	mov	r0, ip
 8007d2a:	4201      	tst	r1, r0
 8007d2c:	d064      	beq.n	8007df8 <_realloc_r+0x140>
 8007d2e:	2100      	movs	r1, #0
 8007d30:	468c      	mov	ip, r1
 8007d32:	2200      	movs	r2, #0
 8007d34:	07d9      	lsls	r1, r3, #31
 8007d36:	d500      	bpl.n	8007d3a <_realloc_r+0x82>
 8007d38:	e07d      	b.n	8007e36 <_realloc_r+0x17e>
 8007d3a:	6833      	ldr	r3, [r6, #0]
 8007d3c:	1af3      	subs	r3, r6, r3
 8007d3e:	469a      	mov	sl, r3
 8007d40:	4651      	mov	r1, sl
 8007d42:	6848      	ldr	r0, [r1, #4]
 8007d44:	2303      	movs	r3, #3
 8007d46:	4398      	bics	r0, r3
 8007d48:	1c03      	adds	r3, r0, #0
 8007d4a:	2a00      	cmp	r2, #0
 8007d4c:	d100      	bne.n	8007d50 <_realloc_r+0x98>
 8007d4e:	e099      	b.n	8007e84 <_realloc_r+0x1cc>
 8007d50:	9802      	ldr	r0, [sp, #8]
 8007d52:	4443      	add	r3, r8
 8007d54:	4282      	cmp	r2, r0
 8007d56:	d100      	bne.n	8007d5a <_realloc_r+0xa2>
 8007d58:	e102      	b.n	8007f60 <_realloc_r+0x2a8>
 8007d5a:	4699      	mov	r9, r3
 8007d5c:	9302      	str	r3, [sp, #8]
 8007d5e:	9b01      	ldr	r3, [sp, #4]
 8007d60:	44e1      	add	r9, ip
 8007d62:	4599      	cmp	r9, r3
 8007d64:	da00      	bge.n	8007d68 <_realloc_r+0xb0>
 8007d66:	e08f      	b.n	8007e88 <_realloc_r+0x1d0>
 8007d68:	6893      	ldr	r3, [r2, #8]
 8007d6a:	68d1      	ldr	r1, [r2, #12]
 8007d6c:	60d9      	str	r1, [r3, #12]
 8007d6e:	608b      	str	r3, [r1, #8]
 8007d70:	4650      	mov	r0, sl
 8007d72:	68c2      	ldr	r2, [r0, #12]
 8007d74:	6883      	ldr	r3, [r0, #8]
 8007d76:	60da      	str	r2, [r3, #12]
 8007d78:	6093      	str	r3, [r2, #8]
 8007d7a:	4642      	mov	r2, r8
 8007d7c:	4656      	mov	r6, sl
 8007d7e:	3a04      	subs	r2, #4
 8007d80:	3608      	adds	r6, #8
 8007d82:	2a24      	cmp	r2, #36	; 0x24
 8007d84:	d900      	bls.n	8007d88 <_realloc_r+0xd0>
 8007d86:	e136      	b.n	8007ff6 <_realloc_r+0x33e>
 8007d88:	1c33      	adds	r3, r6, #0
 8007d8a:	2a13      	cmp	r2, #19
 8007d8c:	d909      	bls.n	8007da2 <_realloc_r+0xea>
 8007d8e:	6821      	ldr	r1, [r4, #0]
 8007d90:	6081      	str	r1, [r0, #8]
 8007d92:	6863      	ldr	r3, [r4, #4]
 8007d94:	60c3      	str	r3, [r0, #12]
 8007d96:	2a1b      	cmp	r2, #27
 8007d98:	d900      	bls.n	8007d9c <_realloc_r+0xe4>
 8007d9a:	e135      	b.n	8008008 <_realloc_r+0x350>
 8007d9c:	4653      	mov	r3, sl
 8007d9e:	3310      	adds	r3, #16
 8007da0:	3408      	adds	r4, #8
 8007da2:	6820      	ldr	r0, [r4, #0]
 8007da4:	6018      	str	r0, [r3, #0]
 8007da6:	6861      	ldr	r1, [r4, #4]
 8007da8:	6059      	str	r1, [r3, #4]
 8007daa:	68a4      	ldr	r4, [r4, #8]
 8007dac:	609c      	str	r4, [r3, #8]
 8007dae:	4652      	mov	r2, sl
 8007db0:	1c34      	adds	r4, r6, #0
 8007db2:	6853      	ldr	r3, [r2, #4]
 8007db4:	4656      	mov	r6, sl
 8007db6:	e005      	b.n	8007dc4 <_realloc_r+0x10c>
 8007db8:	2207      	movs	r2, #7
 8007dba:	4395      	bics	r5, r2
 8007dbc:	9501      	str	r5, [sp, #4]
 8007dbe:	0fea      	lsrs	r2, r5, #31
 8007dc0:	e798      	b.n	8007cf4 <_realloc_r+0x3c>
 8007dc2:	46c1      	mov	r9, r8
 8007dc4:	4649      	mov	r1, r9
 8007dc6:	1b4a      	subs	r2, r1, r5
 8007dc8:	2a0f      	cmp	r2, #15
 8007dca:	d823      	bhi.n	8007e14 <_realloc_r+0x15c>
 8007dcc:	2201      	movs	r2, #1
 8007dce:	4013      	ands	r3, r2
 8007dd0:	430b      	orrs	r3, r1
 8007dd2:	6073      	str	r3, [r6, #4]
 8007dd4:	444e      	add	r6, r9
 8007dd6:	6871      	ldr	r1, [r6, #4]
 8007dd8:	430a      	orrs	r2, r1
 8007dda:	6072      	str	r2, [r6, #4]
 8007ddc:	1c38      	adds	r0, r7, #0
 8007dde:	f7ff faaf 	bl	8007340 <__malloc_unlock>
 8007de2:	46a1      	mov	r9, r4
 8007de4:	4648      	mov	r0, r9
 8007de6:	b005      	add	sp, #20
 8007de8:	bc3c      	pop	{r2, r3, r4, r5}
 8007dea:	4690      	mov	r8, r2
 8007dec:	4699      	mov	r9, r3
 8007dee:	46a2      	mov	sl, r4
 8007df0:	46ab      	mov	fp, r5
 8007df2:	bcf0      	pop	{r4, r5, r6, r7}
 8007df4:	bc02      	pop	{r1}
 8007df6:	4708      	bx	r1
 8007df8:	2003      	movs	r0, #3
 8007dfa:	4651      	mov	r1, sl
 8007dfc:	4381      	bics	r1, r0
 8007dfe:	4689      	mov	r9, r1
 8007e00:	9801      	ldr	r0, [sp, #4]
 8007e02:	44c1      	add	r9, r8
 8007e04:	468c      	mov	ip, r1
 8007e06:	4581      	cmp	r9, r0
 8007e08:	db94      	blt.n	8007d34 <_realloc_r+0x7c>
 8007e0a:	68d1      	ldr	r1, [r2, #12]
 8007e0c:	6892      	ldr	r2, [r2, #8]
 8007e0e:	60d1      	str	r1, [r2, #12]
 8007e10:	608a      	str	r2, [r1, #8]
 8007e12:	e7d7      	b.n	8007dc4 <_realloc_r+0x10c>
 8007e14:	2001      	movs	r0, #1
 8007e16:	4003      	ands	r3, r0
 8007e18:	1971      	adds	r1, r6, r5
 8007e1a:	431d      	orrs	r5, r3
 8007e1c:	1c13      	adds	r3, r2, #0
 8007e1e:	4303      	orrs	r3, r0
 8007e20:	6075      	str	r5, [r6, #4]
 8007e22:	604b      	str	r3, [r1, #4]
 8007e24:	188a      	adds	r2, r1, r2
 8007e26:	6853      	ldr	r3, [r2, #4]
 8007e28:	4318      	orrs	r0, r3
 8007e2a:	6050      	str	r0, [r2, #4]
 8007e2c:	3108      	adds	r1, #8
 8007e2e:	1c38      	adds	r0, r7, #0
 8007e30:	f7fe fa1a 	bl	8006268 <_free_r>
 8007e34:	e7d2      	b.n	8007ddc <_realloc_r+0x124>
 8007e36:	1c38      	adds	r0, r7, #0
 8007e38:	4659      	mov	r1, fp
 8007e3a:	f7fe ff5d 	bl	8006cf8 <_malloc_r>
 8007e3e:	4681      	mov	r9, r0
 8007e40:	2800      	cmp	r0, #0
 8007e42:	d01b      	beq.n	8007e7c <_realloc_r+0x1c4>
 8007e44:	6873      	ldr	r3, [r6, #4]
 8007e46:	1c02      	adds	r2, r0, #0
 8007e48:	2101      	movs	r1, #1
 8007e4a:	1c18      	adds	r0, r3, #0
 8007e4c:	4388      	bics	r0, r1
 8007e4e:	3a08      	subs	r2, #8
 8007e50:	1831      	adds	r1, r6, r0
 8007e52:	428a      	cmp	r2, r1
 8007e54:	d100      	bne.n	8007e58 <_realloc_r+0x1a0>
 8007e56:	e0c8      	b.n	8007fea <_realloc_r+0x332>
 8007e58:	4642      	mov	r2, r8
 8007e5a:	3a04      	subs	r2, #4
 8007e5c:	2a24      	cmp	r2, #36	; 0x24
 8007e5e:	d87a      	bhi.n	8007f56 <_realloc_r+0x29e>
 8007e60:	2a13      	cmp	r2, #19
 8007e62:	d851      	bhi.n	8007f08 <_realloc_r+0x250>
 8007e64:	464b      	mov	r3, r9
 8007e66:	1c22      	adds	r2, r4, #0
 8007e68:	6811      	ldr	r1, [r2, #0]
 8007e6a:	6019      	str	r1, [r3, #0]
 8007e6c:	6850      	ldr	r0, [r2, #4]
 8007e6e:	6058      	str	r0, [r3, #4]
 8007e70:	6892      	ldr	r2, [r2, #8]
 8007e72:	609a      	str	r2, [r3, #8]
 8007e74:	1c38      	adds	r0, r7, #0
 8007e76:	1c21      	adds	r1, r4, #0
 8007e78:	f7fe f9f6 	bl	8006268 <_free_r>
 8007e7c:	1c38      	adds	r0, r7, #0
 8007e7e:	f7ff fa5f 	bl	8007340 <__malloc_unlock>
 8007e82:	e7af      	b.n	8007de4 <_realloc_r+0x12c>
 8007e84:	4443      	add	r3, r8
 8007e86:	9302      	str	r3, [sp, #8]
 8007e88:	9a02      	ldr	r2, [sp, #8]
 8007e8a:	9b01      	ldr	r3, [sp, #4]
 8007e8c:	429a      	cmp	r2, r3
 8007e8e:	dbd2      	blt.n	8007e36 <_realloc_r+0x17e>
 8007e90:	4650      	mov	r0, sl
 8007e92:	68c2      	ldr	r2, [r0, #12]
 8007e94:	6883      	ldr	r3, [r0, #8]
 8007e96:	60da      	str	r2, [r3, #12]
 8007e98:	6093      	str	r3, [r2, #8]
 8007e9a:	4642      	mov	r2, r8
 8007e9c:	4656      	mov	r6, sl
 8007e9e:	3a04      	subs	r2, #4
 8007ea0:	3608      	adds	r6, #8
 8007ea2:	2a24      	cmp	r2, #36	; 0x24
 8007ea4:	d83c      	bhi.n	8007f20 <_realloc_r+0x268>
 8007ea6:	1c33      	adds	r3, r6, #0
 8007ea8:	2a13      	cmp	r2, #19
 8007eaa:	d909      	bls.n	8007ec0 <_realloc_r+0x208>
 8007eac:	6821      	ldr	r1, [r4, #0]
 8007eae:	6081      	str	r1, [r0, #8]
 8007eb0:	6863      	ldr	r3, [r4, #4]
 8007eb2:	60c3      	str	r3, [r0, #12]
 8007eb4:	2a1b      	cmp	r2, #27
 8007eb6:	d900      	bls.n	8007eba <_realloc_r+0x202>
 8007eb8:	e0ba      	b.n	8008030 <_realloc_r+0x378>
 8007eba:	4653      	mov	r3, sl
 8007ebc:	3310      	adds	r3, #16
 8007ebe:	3408      	adds	r4, #8
 8007ec0:	6820      	ldr	r0, [r4, #0]
 8007ec2:	6018      	str	r0, [r3, #0]
 8007ec4:	6861      	ldr	r1, [r4, #4]
 8007ec6:	6059      	str	r1, [r3, #4]
 8007ec8:	68a4      	ldr	r4, [r4, #8]
 8007eca:	9802      	ldr	r0, [sp, #8]
 8007ecc:	609c      	str	r4, [r3, #8]
 8007ece:	4652      	mov	r2, sl
 8007ed0:	1c34      	adds	r4, r6, #0
 8007ed2:	6853      	ldr	r3, [r2, #4]
 8007ed4:	4681      	mov	r9, r0
 8007ed6:	4656      	mov	r6, sl
 8007ed8:	e774      	b.n	8007dc4 <_realloc_r+0x10c>
 8007eda:	1c11      	adds	r1, r2, #0
 8007edc:	f7fe ff0c 	bl	8006cf8 <_malloc_r>
 8007ee0:	4681      	mov	r9, r0
 8007ee2:	e77f      	b.n	8007de4 <_realloc_r+0x12c>
 8007ee4:	230c      	movs	r3, #12
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	603b      	str	r3, [r7, #0]
 8007eea:	4691      	mov	r9, r2
 8007eec:	e77a      	b.n	8007de4 <_realloc_r+0x12c>
 8007eee:	9902      	ldr	r1, [sp, #8]
 8007ef0:	6849      	ldr	r1, [r1, #4]
 8007ef2:	2203      	movs	r2, #3
 8007ef4:	4391      	bics	r1, r2
 8007ef6:	1c0a      	adds	r2, r1, #0
 8007ef8:	468c      	mov	ip, r1
 8007efa:	2110      	movs	r1, #16
 8007efc:	4442      	add	r2, r8
 8007efe:	1949      	adds	r1, r1, r5
 8007f00:	428a      	cmp	r2, r1
 8007f02:	da18      	bge.n	8007f36 <_realloc_r+0x27e>
 8007f04:	9a02      	ldr	r2, [sp, #8]
 8007f06:	e715      	b.n	8007d34 <_realloc_r+0x7c>
 8007f08:	6823      	ldr	r3, [r4, #0]
 8007f0a:	4648      	mov	r0, r9
 8007f0c:	6003      	str	r3, [r0, #0]
 8007f0e:	6861      	ldr	r1, [r4, #4]
 8007f10:	6041      	str	r1, [r0, #4]
 8007f12:	2a1b      	cmp	r2, #27
 8007f14:	d85d      	bhi.n	8007fd2 <_realloc_r+0x31a>
 8007f16:	464b      	mov	r3, r9
 8007f18:	1c22      	adds	r2, r4, #0
 8007f1a:	3308      	adds	r3, #8
 8007f1c:	3208      	adds	r2, #8
 8007f1e:	e7a3      	b.n	8007e68 <_realloc_r+0x1b0>
 8007f20:	1c21      	adds	r1, r4, #0
 8007f22:	1c30      	adds	r0, r6, #0
 8007f24:	f000 fe5a 	bl	8008bdc <memmove>
 8007f28:	9a02      	ldr	r2, [sp, #8]
 8007f2a:	4651      	mov	r1, sl
 8007f2c:	1c34      	adds	r4, r6, #0
 8007f2e:	684b      	ldr	r3, [r1, #4]
 8007f30:	4691      	mov	r9, r2
 8007f32:	4656      	mov	r6, sl
 8007f34:	e746      	b.n	8007dc4 <_realloc_r+0x10c>
 8007f36:	4b48      	ldr	r3, [pc, #288]	; (8008058 <_realloc_r+0x3a0>)
 8007f38:	1971      	adds	r1, r6, r5
 8007f3a:	6099      	str	r1, [r3, #8]
 8007f3c:	1b52      	subs	r2, r2, r5
 8007f3e:	2301      	movs	r3, #1
 8007f40:	431a      	orrs	r2, r3
 8007f42:	604a      	str	r2, [r1, #4]
 8007f44:	6870      	ldr	r0, [r6, #4]
 8007f46:	4003      	ands	r3, r0
 8007f48:	431d      	orrs	r5, r3
 8007f4a:	6075      	str	r5, [r6, #4]
 8007f4c:	1c38      	adds	r0, r7, #0
 8007f4e:	f7ff f9f7 	bl	8007340 <__malloc_unlock>
 8007f52:	46a1      	mov	r9, r4
 8007f54:	e746      	b.n	8007de4 <_realloc_r+0x12c>
 8007f56:	4648      	mov	r0, r9
 8007f58:	1c21      	adds	r1, r4, #0
 8007f5a:	f000 fe3f 	bl	8008bdc <memmove>
 8007f5e:	e789      	b.n	8007e74 <_realloc_r+0x1bc>
 8007f60:	9302      	str	r3, [sp, #8]
 8007f62:	4463      	add	r3, ip
 8007f64:	1c1a      	adds	r2, r3, #0
 8007f66:	9303      	str	r3, [sp, #12]
 8007f68:	1c2b      	adds	r3, r5, #0
 8007f6a:	3310      	adds	r3, #16
 8007f6c:	429a      	cmp	r2, r3
 8007f6e:	db8b      	blt.n	8007e88 <_realloc_r+0x1d0>
 8007f70:	4653      	mov	r3, sl
 8007f72:	68da      	ldr	r2, [r3, #12]
 8007f74:	689b      	ldr	r3, [r3, #8]
 8007f76:	2008      	movs	r0, #8
 8007f78:	60da      	str	r2, [r3, #12]
 8007f7a:	6093      	str	r3, [r2, #8]
 8007f7c:	4642      	mov	r2, r8
 8007f7e:	4681      	mov	r9, r0
 8007f80:	3a04      	subs	r2, #4
 8007f82:	44d1      	add	r9, sl
 8007f84:	2a24      	cmp	r2, #36	; 0x24
 8007f86:	d872      	bhi.n	800806e <_realloc_r+0x3b6>
 8007f88:	464b      	mov	r3, r9
 8007f8a:	2a13      	cmp	r2, #19
 8007f8c:	d908      	bls.n	8007fa0 <_realloc_r+0x2e8>
 8007f8e:	6821      	ldr	r1, [r4, #0]
 8007f90:	4653      	mov	r3, sl
 8007f92:	6099      	str	r1, [r3, #8]
 8007f94:	6860      	ldr	r0, [r4, #4]
 8007f96:	60d8      	str	r0, [r3, #12]
 8007f98:	2a1b      	cmp	r2, #27
 8007f9a:	d86d      	bhi.n	8008078 <_realloc_r+0x3c0>
 8007f9c:	3310      	adds	r3, #16
 8007f9e:	3408      	adds	r4, #8
 8007fa0:	6820      	ldr	r0, [r4, #0]
 8007fa2:	6018      	str	r0, [r3, #0]
 8007fa4:	6861      	ldr	r1, [r4, #4]
 8007fa6:	6059      	str	r1, [r3, #4]
 8007fa8:	68a4      	ldr	r4, [r4, #8]
 8007faa:	609c      	str	r4, [r3, #8]
 8007fac:	4653      	mov	r3, sl
 8007fae:	195a      	adds	r2, r3, r5
 8007fb0:	9b03      	ldr	r3, [sp, #12]
 8007fb2:	1b59      	subs	r1, r3, r5
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	4319      	orrs	r1, r3
 8007fb8:	4827      	ldr	r0, [pc, #156]	; (8008058 <_realloc_r+0x3a0>)
 8007fba:	6051      	str	r1, [r2, #4]
 8007fbc:	6082      	str	r2, [r0, #8]
 8007fbe:	4650      	mov	r0, sl
 8007fc0:	6840      	ldr	r0, [r0, #4]
 8007fc2:	4003      	ands	r3, r0
 8007fc4:	431d      	orrs	r5, r3
 8007fc6:	4651      	mov	r1, sl
 8007fc8:	604d      	str	r5, [r1, #4]
 8007fca:	1c38      	adds	r0, r7, #0
 8007fcc:	f7ff f9b8 	bl	8007340 <__malloc_unlock>
 8007fd0:	e708      	b.n	8007de4 <_realloc_r+0x12c>
 8007fd2:	68a3      	ldr	r3, [r4, #8]
 8007fd4:	4648      	mov	r0, r9
 8007fd6:	6083      	str	r3, [r0, #8]
 8007fd8:	68e1      	ldr	r1, [r4, #12]
 8007fda:	60c1      	str	r1, [r0, #12]
 8007fdc:	2a24      	cmp	r2, #36	; 0x24
 8007fde:	d01e      	beq.n	800801e <_realloc_r+0x366>
 8007fe0:	464b      	mov	r3, r9
 8007fe2:	1c22      	adds	r2, r4, #0
 8007fe4:	3310      	adds	r3, #16
 8007fe6:	3210      	adds	r2, #16
 8007fe8:	e73e      	b.n	8007e68 <_realloc_r+0x1b0>
 8007fea:	6852      	ldr	r2, [r2, #4]
 8007fec:	2103      	movs	r1, #3
 8007fee:	438a      	bics	r2, r1
 8007ff0:	4691      	mov	r9, r2
 8007ff2:	44c1      	add	r9, r8
 8007ff4:	e6e6      	b.n	8007dc4 <_realloc_r+0x10c>
 8007ff6:	1c30      	adds	r0, r6, #0
 8007ff8:	1c21      	adds	r1, r4, #0
 8007ffa:	f000 fdef 	bl	8008bdc <memmove>
 8007ffe:	4650      	mov	r0, sl
 8008000:	1c34      	adds	r4, r6, #0
 8008002:	6843      	ldr	r3, [r0, #4]
 8008004:	4656      	mov	r6, sl
 8008006:	e6dd      	b.n	8007dc4 <_realloc_r+0x10c>
 8008008:	68a0      	ldr	r0, [r4, #8]
 800800a:	4651      	mov	r1, sl
 800800c:	6108      	str	r0, [r1, #16]
 800800e:	68e3      	ldr	r3, [r4, #12]
 8008010:	614b      	str	r3, [r1, #20]
 8008012:	2a24      	cmp	r2, #36	; 0x24
 8008014:	d017      	beq.n	8008046 <_realloc_r+0x38e>
 8008016:	4653      	mov	r3, sl
 8008018:	3318      	adds	r3, #24
 800801a:	3410      	adds	r4, #16
 800801c:	e6c1      	b.n	8007da2 <_realloc_r+0xea>
 800801e:	6922      	ldr	r2, [r4, #16]
 8008020:	6102      	str	r2, [r0, #16]
 8008022:	6960      	ldr	r0, [r4, #20]
 8008024:	464b      	mov	r3, r9
 8008026:	1c22      	adds	r2, r4, #0
 8008028:	6158      	str	r0, [r3, #20]
 800802a:	3218      	adds	r2, #24
 800802c:	3318      	adds	r3, #24
 800802e:	e71b      	b.n	8007e68 <_realloc_r+0x1b0>
 8008030:	68a0      	ldr	r0, [r4, #8]
 8008032:	4651      	mov	r1, sl
 8008034:	6108      	str	r0, [r1, #16]
 8008036:	68e3      	ldr	r3, [r4, #12]
 8008038:	614b      	str	r3, [r1, #20]
 800803a:	2a24      	cmp	r2, #36	; 0x24
 800803c:	d00e      	beq.n	800805c <_realloc_r+0x3a4>
 800803e:	4653      	mov	r3, sl
 8008040:	3318      	adds	r3, #24
 8008042:	3410      	adds	r4, #16
 8008044:	e73c      	b.n	8007ec0 <_realloc_r+0x208>
 8008046:	6920      	ldr	r0, [r4, #16]
 8008048:	4651      	mov	r1, sl
 800804a:	6188      	str	r0, [r1, #24]
 800804c:	6962      	ldr	r2, [r4, #20]
 800804e:	4653      	mov	r3, sl
 8008050:	61ca      	str	r2, [r1, #28]
 8008052:	3320      	adds	r3, #32
 8008054:	3418      	adds	r4, #24
 8008056:	e6a4      	b.n	8007da2 <_realloc_r+0xea>
 8008058:	200005d8 	.word	0x200005d8
 800805c:	6920      	ldr	r0, [r4, #16]
 800805e:	4651      	mov	r1, sl
 8008060:	6188      	str	r0, [r1, #24]
 8008062:	6962      	ldr	r2, [r4, #20]
 8008064:	4653      	mov	r3, sl
 8008066:	61ca      	str	r2, [r1, #28]
 8008068:	3320      	adds	r3, #32
 800806a:	3418      	adds	r4, #24
 800806c:	e728      	b.n	8007ec0 <_realloc_r+0x208>
 800806e:	4648      	mov	r0, r9
 8008070:	1c21      	adds	r1, r4, #0
 8008072:	f000 fdb3 	bl	8008bdc <memmove>
 8008076:	e799      	b.n	8007fac <_realloc_r+0x2f4>
 8008078:	68a1      	ldr	r1, [r4, #8]
 800807a:	4653      	mov	r3, sl
 800807c:	6119      	str	r1, [r3, #16]
 800807e:	68e0      	ldr	r0, [r4, #12]
 8008080:	6158      	str	r0, [r3, #20]
 8008082:	2a24      	cmp	r2, #36	; 0x24
 8008084:	d002      	beq.n	800808c <_realloc_r+0x3d4>
 8008086:	3318      	adds	r3, #24
 8008088:	3410      	adds	r4, #16
 800808a:	e789      	b.n	8007fa0 <_realloc_r+0x2e8>
 800808c:	6921      	ldr	r1, [r4, #16]
 800808e:	6199      	str	r1, [r3, #24]
 8008090:	6963      	ldr	r3, [r4, #20]
 8008092:	4652      	mov	r2, sl
 8008094:	61d3      	str	r3, [r2, #28]
 8008096:	4653      	mov	r3, sl
 8008098:	3320      	adds	r3, #32
 800809a:	3418      	adds	r4, #24
 800809c:	e780      	b.n	8007fa0 <_realloc_r+0x2e8>
 800809e:	46c0      	nop			; (mov r8, r8)

080080a0 <_sbrk_r>:
 80080a0:	b538      	push	{r3, r4, r5, lr}
 80080a2:	4c08      	ldr	r4, [pc, #32]	; (80080c4 <_sbrk_r+0x24>)
 80080a4:	2300      	movs	r3, #0
 80080a6:	1c05      	adds	r5, r0, #0
 80080a8:	1c08      	adds	r0, r1, #0
 80080aa:	6023      	str	r3, [r4, #0]
 80080ac:	f7fc fc9e 	bl	80049ec <_sbrk>
 80080b0:	1c43      	adds	r3, r0, #1
 80080b2:	d002      	beq.n	80080ba <_sbrk_r+0x1a>
 80080b4:	bc38      	pop	{r3, r4, r5}
 80080b6:	bc02      	pop	{r1}
 80080b8:	4708      	bx	r1
 80080ba:	6823      	ldr	r3, [r4, #0]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d0f9      	beq.n	80080b4 <_sbrk_r+0x14>
 80080c0:	602b      	str	r3, [r5, #0]
 80080c2:	e7f7      	b.n	80080b4 <_sbrk_r+0x14>
 80080c4:	20002098 	.word	0x20002098

080080c8 <__ssprint_r>:
 80080c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80080ca:	465f      	mov	r7, fp
 80080cc:	464d      	mov	r5, r9
 80080ce:	4644      	mov	r4, r8
 80080d0:	4656      	mov	r6, sl
 80080d2:	b4f0      	push	{r4, r5, r6, r7}
 80080d4:	6893      	ldr	r3, [r2, #8]
 80080d6:	b083      	sub	sp, #12
 80080d8:	9001      	str	r0, [sp, #4]
 80080da:	1c0d      	adds	r5, r1, #0
 80080dc:	4690      	mov	r8, r2
 80080de:	6817      	ldr	r7, [r2, #0]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d100      	bne.n	80080e6 <__ssprint_r+0x1e>
 80080e4:	e07e      	b.n	80081e4 <__ssprint_r+0x11c>
 80080e6:	6808      	ldr	r0, [r1, #0]
 80080e8:	2400      	movs	r4, #0
 80080ea:	2100      	movs	r1, #0
 80080ec:	4689      	mov	r9, r1
 80080ee:	68ab      	ldr	r3, [r5, #8]
 80080f0:	2c00      	cmp	r4, #0
 80080f2:	d048      	beq.n	8008186 <__ssprint_r+0xbe>
 80080f4:	1c1e      	adds	r6, r3, #0
 80080f6:	469a      	mov	sl, r3
 80080f8:	429c      	cmp	r4, r3
 80080fa:	d34e      	bcc.n	800819a <__ssprint_r+0xd2>
 80080fc:	2290      	movs	r2, #144	; 0x90
 80080fe:	89ab      	ldrh	r3, [r5, #12]
 8008100:	00d2      	lsls	r2, r2, #3
 8008102:	4213      	tst	r3, r2
 8008104:	d02e      	beq.n	8008164 <__ssprint_r+0x9c>
 8008106:	6929      	ldr	r1, [r5, #16]
 8008108:	696a      	ldr	r2, [r5, #20]
 800810a:	1a40      	subs	r0, r0, r1
 800810c:	4683      	mov	fp, r0
 800810e:	0050      	lsls	r0, r2, #1
 8008110:	1882      	adds	r2, r0, r2
 8008112:	0fd0      	lsrs	r0, r2, #31
 8008114:	1882      	adds	r2, r0, r2
 8008116:	1c60      	adds	r0, r4, #1
 8008118:	1052      	asrs	r2, r2, #1
 800811a:	4458      	add	r0, fp
 800811c:	4692      	mov	sl, r2
 800811e:	4282      	cmp	r2, r0
 8008120:	d201      	bcs.n	8008126 <__ssprint_r+0x5e>
 8008122:	4682      	mov	sl, r0
 8008124:	1c02      	adds	r2, r0, #0
 8008126:	2080      	movs	r0, #128	; 0x80
 8008128:	00c0      	lsls	r0, r0, #3
 800812a:	4203      	tst	r3, r0
 800812c:	d038      	beq.n	80081a0 <__ssprint_r+0xd8>
 800812e:	9801      	ldr	r0, [sp, #4]
 8008130:	1c11      	adds	r1, r2, #0
 8008132:	f7fe fde1 	bl	8006cf8 <_malloc_r>
 8008136:	1e06      	subs	r6, r0, #0
 8008138:	d057      	beq.n	80081ea <__ssprint_r+0x122>
 800813a:	465a      	mov	r2, fp
 800813c:	1c30      	adds	r0, r6, #0
 800813e:	6929      	ldr	r1, [r5, #16]
 8008140:	f7ff f8b4 	bl	80072ac <memcpy>
 8008144:	89ab      	ldrh	r3, [r5, #12]
 8008146:	4a2b      	ldr	r2, [pc, #172]	; (80081f4 <__ssprint_r+0x12c>)
 8008148:	4013      	ands	r3, r2
 800814a:	2280      	movs	r2, #128	; 0x80
 800814c:	4313      	orrs	r3, r2
 800814e:	81ab      	strh	r3, [r5, #12]
 8008150:	4652      	mov	r2, sl
 8008152:	4659      	mov	r1, fp
 8008154:	1870      	adds	r0, r6, r1
 8008156:	1a53      	subs	r3, r2, r1
 8008158:	6028      	str	r0, [r5, #0]
 800815a:	616a      	str	r2, [r5, #20]
 800815c:	60ab      	str	r3, [r5, #8]
 800815e:	612e      	str	r6, [r5, #16]
 8008160:	46a2      	mov	sl, r4
 8008162:	1c26      	adds	r6, r4, #0
 8008164:	4649      	mov	r1, r9
 8008166:	4652      	mov	r2, sl
 8008168:	f000 fd38 	bl	8008bdc <memmove>
 800816c:	6829      	ldr	r1, [r5, #0]
 800816e:	4642      	mov	r2, r8
 8008170:	68ab      	ldr	r3, [r5, #8]
 8008172:	6892      	ldr	r2, [r2, #8]
 8008174:	1c08      	adds	r0, r1, #0
 8008176:	1b9b      	subs	r3, r3, r6
 8008178:	4450      	add	r0, sl
 800817a:	1b14      	subs	r4, r2, r4
 800817c:	4641      	mov	r1, r8
 800817e:	60ab      	str	r3, [r5, #8]
 8008180:	6028      	str	r0, [r5, #0]
 8008182:	608c      	str	r4, [r1, #8]
 8008184:	d023      	beq.n	80081ce <__ssprint_r+0x106>
 8008186:	6839      	ldr	r1, [r7, #0]
 8008188:	687c      	ldr	r4, [r7, #4]
 800818a:	4689      	mov	r9, r1
 800818c:	3708      	adds	r7, #8
 800818e:	2c00      	cmp	r4, #0
 8008190:	d0f9      	beq.n	8008186 <__ssprint_r+0xbe>
 8008192:	1c1e      	adds	r6, r3, #0
 8008194:	469a      	mov	sl, r3
 8008196:	429c      	cmp	r4, r3
 8008198:	d2b0      	bcs.n	80080fc <__ssprint_r+0x34>
 800819a:	1c26      	adds	r6, r4, #0
 800819c:	46a2      	mov	sl, r4
 800819e:	e7e1      	b.n	8008164 <__ssprint_r+0x9c>
 80081a0:	9801      	ldr	r0, [sp, #4]
 80081a2:	f7ff fd89 	bl	8007cb8 <_realloc_r>
 80081a6:	1e06      	subs	r6, r0, #0
 80081a8:	d1d2      	bne.n	8008150 <__ssprint_r+0x88>
 80081aa:	9801      	ldr	r0, [sp, #4]
 80081ac:	6929      	ldr	r1, [r5, #16]
 80081ae:	f7fe f85b 	bl	8006268 <_free_r>
 80081b2:	9801      	ldr	r0, [sp, #4]
 80081b4:	230c      	movs	r3, #12
 80081b6:	6003      	str	r3, [r0, #0]
 80081b8:	89aa      	ldrh	r2, [r5, #12]
 80081ba:	2340      	movs	r3, #64	; 0x40
 80081bc:	4313      	orrs	r3, r2
 80081be:	81ab      	strh	r3, [r5, #12]
 80081c0:	4640      	mov	r0, r8
 80081c2:	2300      	movs	r3, #0
 80081c4:	6083      	str	r3, [r0, #8]
 80081c6:	6043      	str	r3, [r0, #4]
 80081c8:	2001      	movs	r0, #1
 80081ca:	4240      	negs	r0, r0
 80081cc:	e001      	b.n	80081d2 <__ssprint_r+0x10a>
 80081ce:	604c      	str	r4, [r1, #4]
 80081d0:	2000      	movs	r0, #0
 80081d2:	b003      	add	sp, #12
 80081d4:	bc3c      	pop	{r2, r3, r4, r5}
 80081d6:	4690      	mov	r8, r2
 80081d8:	4699      	mov	r9, r3
 80081da:	46a2      	mov	sl, r4
 80081dc:	46ab      	mov	fp, r5
 80081de:	bcf0      	pop	{r4, r5, r6, r7}
 80081e0:	bc02      	pop	{r1}
 80081e2:	4708      	bx	r1
 80081e4:	6053      	str	r3, [r2, #4]
 80081e6:	2000      	movs	r0, #0
 80081e8:	e7f3      	b.n	80081d2 <__ssprint_r+0x10a>
 80081ea:	9901      	ldr	r1, [sp, #4]
 80081ec:	230c      	movs	r3, #12
 80081ee:	600b      	str	r3, [r1, #0]
 80081f0:	e7e2      	b.n	80081b8 <__ssprint_r+0xf0>
 80081f2:	46c0      	nop			; (mov r8, r8)
 80081f4:	fffffb7f 	.word	0xfffffb7f

080081f8 <_svfiprintf_r>:
 80081f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081fa:	465f      	mov	r7, fp
 80081fc:	4644      	mov	r4, r8
 80081fe:	4656      	mov	r6, sl
 8008200:	464d      	mov	r5, r9
 8008202:	b4f0      	push	{r4, r5, r6, r7}
 8008204:	b0af      	sub	sp, #188	; 0xbc
 8008206:	9005      	str	r0, [sp, #20]
 8008208:	9308      	str	r3, [sp, #32]
 800820a:	898b      	ldrh	r3, [r1, #12]
 800820c:	468b      	mov	fp, r1
 800820e:	1c14      	adds	r4, r2, #0
 8008210:	0618      	lsls	r0, r3, #24
 8008212:	d504      	bpl.n	800821e <_svfiprintf_r+0x26>
 8008214:	6909      	ldr	r1, [r1, #16]
 8008216:	2900      	cmp	r1, #0
 8008218:	d101      	bne.n	800821e <_svfiprintf_r+0x26>
 800821a:	f000 fc1a 	bl	8008a52 <_svfiprintf_r+0x85a>
 800821e:	46a1      	mov	r9, r4
 8008220:	2400      	movs	r4, #0
 8008222:	940c      	str	r4, [sp, #48]	; 0x30
 8008224:	9406      	str	r4, [sp, #24]
 8008226:	466c      	mov	r4, sp
 8008228:	a91e      	add	r1, sp, #120	; 0x78
 800822a:	3477      	adds	r4, #119	; 0x77
 800822c:	2300      	movs	r3, #0
 800822e:	4688      	mov	r8, r1
 8008230:	9111      	str	r1, [sp, #68]	; 0x44
 8008232:	1c0f      	adds	r7, r1, #0
 8008234:	1b09      	subs	r1, r1, r4
 8008236:	9313      	str	r3, [sp, #76]	; 0x4c
 8008238:	9312      	str	r3, [sp, #72]	; 0x48
 800823a:	9401      	str	r4, [sp, #4]
 800823c:	910d      	str	r1, [sp, #52]	; 0x34
 800823e:	464d      	mov	r5, r9
 8008240:	782b      	ldrb	r3, [r5, #0]
 8008242:	1c2c      	adds	r4, r5, #0
 8008244:	2b00      	cmp	r3, #0
 8008246:	d019      	beq.n	800827c <_svfiprintf_r+0x84>
 8008248:	2b25      	cmp	r3, #37	; 0x25
 800824a:	d102      	bne.n	8008252 <_svfiprintf_r+0x5a>
 800824c:	e016      	b.n	800827c <_svfiprintf_r+0x84>
 800824e:	2b00      	cmp	r3, #0
 8008250:	d003      	beq.n	800825a <_svfiprintf_r+0x62>
 8008252:	3401      	adds	r4, #1
 8008254:	7823      	ldrb	r3, [r4, #0]
 8008256:	2b25      	cmp	r3, #37	; 0x25
 8008258:	d1f9      	bne.n	800824e <_svfiprintf_r+0x56>
 800825a:	1b66      	subs	r6, r4, r5
 800825c:	d00e      	beq.n	800827c <_svfiprintf_r+0x84>
 800825e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8008260:	1983      	adds	r3, r0, r6
 8008262:	9313      	str	r3, [sp, #76]	; 0x4c
 8008264:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008266:	3301      	adds	r3, #1
 8008268:	603d      	str	r5, [r7, #0]
 800826a:	607e      	str	r6, [r7, #4]
 800826c:	9312      	str	r3, [sp, #72]	; 0x48
 800826e:	2b07      	cmp	r3, #7
 8008270:	dd00      	ble.n	8008274 <_svfiprintf_r+0x7c>
 8008272:	e323      	b.n	80088bc <_svfiprintf_r+0x6c4>
 8008274:	3708      	adds	r7, #8
 8008276:	9906      	ldr	r1, [sp, #24]
 8008278:	1989      	adds	r1, r1, r6
 800827a:	9106      	str	r1, [sp, #24]
 800827c:	7823      	ldrb	r3, [r4, #0]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d100      	bne.n	8008284 <_svfiprintf_r+0x8c>
 8008282:	e2f2      	b.n	800886a <_svfiprintf_r+0x672>
 8008284:	1c65      	adds	r5, r4, #1
 8008286:	2401      	movs	r4, #1
 8008288:	4264      	negs	r4, r4
 800828a:	223f      	movs	r2, #63	; 0x3f
 800828c:	2300      	movs	r3, #0
 800828e:	446a      	add	r2, sp
 8008290:	46a1      	mov	r9, r4
 8008292:	2400      	movs	r4, #0
 8008294:	7013      	strb	r3, [r2, #0]
 8008296:	9407      	str	r4, [sp, #28]
 8008298:	2280      	movs	r2, #128	; 0x80
 800829a:	2304      	movs	r3, #4
 800829c:	9402      	str	r4, [sp, #8]
 800829e:	49cd      	ldr	r1, [pc, #820]	; (80085d4 <_svfiprintf_r+0x3dc>)
 80082a0:	2000      	movs	r0, #0
 80082a2:	2610      	movs	r6, #16
 80082a4:	4692      	mov	sl, r2
 80082a6:	469c      	mov	ip, r3
 80082a8:	782b      	ldrb	r3, [r5, #0]
 80082aa:	3501      	adds	r5, #1
 80082ac:	1c1a      	adds	r2, r3, #0
 80082ae:	3a20      	subs	r2, #32
 80082b0:	2a58      	cmp	r2, #88	; 0x58
 80082b2:	d800      	bhi.n	80082b6 <_svfiprintf_r+0xbe>
 80082b4:	e118      	b.n	80084e8 <_svfiprintf_r+0x2f0>
 80082b6:	213f      	movs	r1, #63	; 0x3f
 80082b8:	4469      	add	r1, sp
 80082ba:	7008      	strb	r0, [r1, #0]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d100      	bne.n	80082c2 <_svfiprintf_r+0xca>
 80082c0:	e2d3      	b.n	800886a <_svfiprintf_r+0x672>
 80082c2:	aa14      	add	r2, sp, #80	; 0x50
 80082c4:	2401      	movs	r4, #1
 80082c6:	7013      	strb	r3, [r2, #0]
 80082c8:	2300      	movs	r3, #0
 80082ca:	700b      	strb	r3, [r1, #0]
 80082cc:	9403      	str	r4, [sp, #12]
 80082ce:	9404      	str	r4, [sp, #16]
 80082d0:	920b      	str	r2, [sp, #44]	; 0x2c
 80082d2:	2400      	movs	r4, #0
 80082d4:	9409      	str	r4, [sp, #36]	; 0x24
 80082d6:	9c02      	ldr	r4, [sp, #8]
 80082d8:	2302      	movs	r3, #2
 80082da:	401c      	ands	r4, r3
 80082dc:	940a      	str	r4, [sp, #40]	; 0x28
 80082de:	d002      	beq.n	80082e6 <_svfiprintf_r+0xee>
 80082e0:	9c03      	ldr	r4, [sp, #12]
 80082e2:	3402      	adds	r4, #2
 80082e4:	9403      	str	r4, [sp, #12]
 80082e6:	9c02      	ldr	r4, [sp, #8]
 80082e8:	2384      	movs	r3, #132	; 0x84
 80082ea:	401c      	ands	r4, r3
 80082ec:	46a2      	mov	sl, r4
 80082ee:	d138      	bne.n	8008362 <_svfiprintf_r+0x16a>
 80082f0:	9807      	ldr	r0, [sp, #28]
 80082f2:	9903      	ldr	r1, [sp, #12]
 80082f4:	1a44      	subs	r4, r0, r1
 80082f6:	2c00      	cmp	r4, #0
 80082f8:	dd33      	ble.n	8008362 <_svfiprintf_r+0x16a>
 80082fa:	4eb7      	ldr	r6, [pc, #732]	; (80085d8 <_svfiprintf_r+0x3e0>)
 80082fc:	2c10      	cmp	r4, #16
 80082fe:	dd24      	ble.n	800834a <_svfiprintf_r+0x152>
 8008300:	2210      	movs	r2, #16
 8008302:	1c3b      	adds	r3, r7, #0
 8008304:	4691      	mov	r9, r2
 8008306:	465f      	mov	r7, fp
 8008308:	46ab      	mov	fp, r5
 800830a:	9d05      	ldr	r5, [sp, #20]
 800830c:	e003      	b.n	8008316 <_svfiprintf_r+0x11e>
 800830e:	3c10      	subs	r4, #16
 8008310:	3308      	adds	r3, #8
 8008312:	2c10      	cmp	r4, #16
 8008314:	dd16      	ble.n	8008344 <_svfiprintf_r+0x14c>
 8008316:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008318:	3210      	adds	r2, #16
 800831a:	9213      	str	r2, [sp, #76]	; 0x4c
 800831c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800831e:	4648      	mov	r0, r9
 8008320:	3201      	adds	r2, #1
 8008322:	601e      	str	r6, [r3, #0]
 8008324:	6058      	str	r0, [r3, #4]
 8008326:	9212      	str	r2, [sp, #72]	; 0x48
 8008328:	2a07      	cmp	r2, #7
 800832a:	ddf0      	ble.n	800830e <_svfiprintf_r+0x116>
 800832c:	1c28      	adds	r0, r5, #0
 800832e:	1c39      	adds	r1, r7, #0
 8008330:	aa11      	add	r2, sp, #68	; 0x44
 8008332:	f7ff fec9 	bl	80080c8 <__ssprint_r>
 8008336:	2800      	cmp	r0, #0
 8008338:	d000      	beq.n	800833c <_svfiprintf_r+0x144>
 800833a:	e332      	b.n	80089a2 <_svfiprintf_r+0x7aa>
 800833c:	3c10      	subs	r4, #16
 800833e:	4643      	mov	r3, r8
 8008340:	2c10      	cmp	r4, #16
 8008342:	dce8      	bgt.n	8008316 <_svfiprintf_r+0x11e>
 8008344:	465d      	mov	r5, fp
 8008346:	46bb      	mov	fp, r7
 8008348:	1c1f      	adds	r7, r3, #0
 800834a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800834c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800834e:	607c      	str	r4, [r7, #4]
 8008350:	3301      	adds	r3, #1
 8008352:	190c      	adds	r4, r1, r4
 8008354:	603e      	str	r6, [r7, #0]
 8008356:	9413      	str	r4, [sp, #76]	; 0x4c
 8008358:	9312      	str	r3, [sp, #72]	; 0x48
 800835a:	2b07      	cmp	r3, #7
 800835c:	dd00      	ble.n	8008360 <_svfiprintf_r+0x168>
 800835e:	e316      	b.n	800898e <_svfiprintf_r+0x796>
 8008360:	3708      	adds	r7, #8
 8008362:	223f      	movs	r2, #63	; 0x3f
 8008364:	446a      	add	r2, sp
 8008366:	7813      	ldrb	r3, [r2, #0]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d00c      	beq.n	8008386 <_svfiprintf_r+0x18e>
 800836c:	2301      	movs	r3, #1
 800836e:	607b      	str	r3, [r7, #4]
 8008370:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008372:	3301      	adds	r3, #1
 8008374:	9313      	str	r3, [sp, #76]	; 0x4c
 8008376:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008378:	3301      	adds	r3, #1
 800837a:	603a      	str	r2, [r7, #0]
 800837c:	9312      	str	r3, [sp, #72]	; 0x48
 800837e:	2b07      	cmp	r3, #7
 8008380:	dd00      	ble.n	8008384 <_svfiprintf_r+0x18c>
 8008382:	e2ad      	b.n	80088e0 <_svfiprintf_r+0x6e8>
 8008384:	3708      	adds	r7, #8
 8008386:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008388:	2c00      	cmp	r4, #0
 800838a:	d00d      	beq.n	80083a8 <_svfiprintf_r+0x1b0>
 800838c:	ab10      	add	r3, sp, #64	; 0x40
 800838e:	603b      	str	r3, [r7, #0]
 8008390:	2302      	movs	r3, #2
 8008392:	607b      	str	r3, [r7, #4]
 8008394:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008396:	3302      	adds	r3, #2
 8008398:	9313      	str	r3, [sp, #76]	; 0x4c
 800839a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800839c:	3301      	adds	r3, #1
 800839e:	9312      	str	r3, [sp, #72]	; 0x48
 80083a0:	2b07      	cmp	r3, #7
 80083a2:	dd00      	ble.n	80083a6 <_svfiprintf_r+0x1ae>
 80083a4:	e2a5      	b.n	80088f2 <_svfiprintf_r+0x6fa>
 80083a6:	3708      	adds	r7, #8
 80083a8:	4650      	mov	r0, sl
 80083aa:	2880      	cmp	r0, #128	; 0x80
 80083ac:	d100      	bne.n	80083b0 <_svfiprintf_r+0x1b8>
 80083ae:	e212      	b.n	80087d6 <_svfiprintf_r+0x5de>
 80083b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80083b2:	9904      	ldr	r1, [sp, #16]
 80083b4:	1a44      	subs	r4, r0, r1
 80083b6:	2c00      	cmp	r4, #0
 80083b8:	dd3a      	ble.n	8008430 <_svfiprintf_r+0x238>
 80083ba:	4e87      	ldr	r6, [pc, #540]	; (80085d8 <_svfiprintf_r+0x3e0>)
 80083bc:	2c10      	cmp	r4, #16
 80083be:	dd2a      	ble.n	8008416 <_svfiprintf_r+0x21e>
 80083c0:	2210      	movs	r2, #16
 80083c2:	1992      	adds	r2, r2, r6
 80083c4:	2310      	movs	r3, #16
 80083c6:	4699      	mov	r9, r3
 80083c8:	4692      	mov	sl, r2
 80083ca:	1c3b      	adds	r3, r7, #0
 80083cc:	1c37      	adds	r7, r6, #0
 80083ce:	465e      	mov	r6, fp
 80083d0:	46ab      	mov	fp, r5
 80083d2:	9d05      	ldr	r5, [sp, #20]
 80083d4:	e003      	b.n	80083de <_svfiprintf_r+0x1e6>
 80083d6:	3c10      	subs	r4, #16
 80083d8:	3308      	adds	r3, #8
 80083da:	2c10      	cmp	r4, #16
 80083dc:	dd17      	ble.n	800840e <_svfiprintf_r+0x216>
 80083de:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80083e0:	3210      	adds	r2, #16
 80083e2:	9213      	str	r2, [sp, #76]	; 0x4c
 80083e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80083e6:	4650      	mov	r0, sl
 80083e8:	4649      	mov	r1, r9
 80083ea:	3201      	adds	r2, #1
 80083ec:	6018      	str	r0, [r3, #0]
 80083ee:	6059      	str	r1, [r3, #4]
 80083f0:	9212      	str	r2, [sp, #72]	; 0x48
 80083f2:	2a07      	cmp	r2, #7
 80083f4:	ddef      	ble.n	80083d6 <_svfiprintf_r+0x1de>
 80083f6:	1c28      	adds	r0, r5, #0
 80083f8:	1c31      	adds	r1, r6, #0
 80083fa:	aa11      	add	r2, sp, #68	; 0x44
 80083fc:	f7ff fe64 	bl	80080c8 <__ssprint_r>
 8008400:	2800      	cmp	r0, #0
 8008402:	d000      	beq.n	8008406 <_svfiprintf_r+0x20e>
 8008404:	e258      	b.n	80088b8 <_svfiprintf_r+0x6c0>
 8008406:	3c10      	subs	r4, #16
 8008408:	4643      	mov	r3, r8
 800840a:	2c10      	cmp	r4, #16
 800840c:	dce7      	bgt.n	80083de <_svfiprintf_r+0x1e6>
 800840e:	465d      	mov	r5, fp
 8008410:	46b3      	mov	fp, r6
 8008412:	1c3e      	adds	r6, r7, #0
 8008414:	1c1f      	adds	r7, r3, #0
 8008416:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008418:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800841a:	3610      	adds	r6, #16
 800841c:	607c      	str	r4, [r7, #4]
 800841e:	3301      	adds	r3, #1
 8008420:	1914      	adds	r4, r2, r4
 8008422:	603e      	str	r6, [r7, #0]
 8008424:	9413      	str	r4, [sp, #76]	; 0x4c
 8008426:	9312      	str	r3, [sp, #72]	; 0x48
 8008428:	2b07      	cmp	r3, #7
 800842a:	dd00      	ble.n	800842e <_svfiprintf_r+0x236>
 800842c:	e24f      	b.n	80088ce <_svfiprintf_r+0x6d6>
 800842e:	3708      	adds	r7, #8
 8008430:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8008432:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8008434:	603c      	str	r4, [r7, #0]
 8008436:	9c04      	ldr	r4, [sp, #16]
 8008438:	1903      	adds	r3, r0, r4
 800843a:	9313      	str	r3, [sp, #76]	; 0x4c
 800843c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800843e:	3301      	adds	r3, #1
 8008440:	607c      	str	r4, [r7, #4]
 8008442:	9312      	str	r3, [sp, #72]	; 0x48
 8008444:	2b07      	cmp	r3, #7
 8008446:	dd00      	ble.n	800844a <_svfiprintf_r+0x252>
 8008448:	e206      	b.n	8008858 <_svfiprintf_r+0x660>
 800844a:	1c3b      	adds	r3, r7, #0
 800844c:	3308      	adds	r3, #8
 800844e:	9c02      	ldr	r4, [sp, #8]
 8008450:	0764      	lsls	r4, r4, #29
 8008452:	d539      	bpl.n	80084c8 <_svfiprintf_r+0x2d0>
 8008454:	9807      	ldr	r0, [sp, #28]
 8008456:	9903      	ldr	r1, [sp, #12]
 8008458:	1a44      	subs	r4, r0, r1
 800845a:	2c00      	cmp	r4, #0
 800845c:	dd34      	ble.n	80084c8 <_svfiprintf_r+0x2d0>
 800845e:	4e5e      	ldr	r6, [pc, #376]	; (80085d8 <_svfiprintf_r+0x3e0>)
 8008460:	2c10      	cmp	r4, #16
 8008462:	dd1f      	ble.n	80084a4 <_svfiprintf_r+0x2ac>
 8008464:	46a9      	mov	r9, r5
 8008466:	2710      	movs	r7, #16
 8008468:	465d      	mov	r5, fp
 800846a:	e003      	b.n	8008474 <_svfiprintf_r+0x27c>
 800846c:	3c10      	subs	r4, #16
 800846e:	3308      	adds	r3, #8
 8008470:	2c10      	cmp	r4, #16
 8008472:	dd15      	ble.n	80084a0 <_svfiprintf_r+0x2a8>
 8008474:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008476:	3210      	adds	r2, #16
 8008478:	9213      	str	r2, [sp, #76]	; 0x4c
 800847a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800847c:	3201      	adds	r2, #1
 800847e:	601e      	str	r6, [r3, #0]
 8008480:	605f      	str	r7, [r3, #4]
 8008482:	9212      	str	r2, [sp, #72]	; 0x48
 8008484:	2a07      	cmp	r2, #7
 8008486:	ddf1      	ble.n	800846c <_svfiprintf_r+0x274>
 8008488:	9805      	ldr	r0, [sp, #20]
 800848a:	1c29      	adds	r1, r5, #0
 800848c:	aa11      	add	r2, sp, #68	; 0x44
 800848e:	f7ff fe1b 	bl	80080c8 <__ssprint_r>
 8008492:	2800      	cmp	r0, #0
 8008494:	d000      	beq.n	8008498 <_svfiprintf_r+0x2a0>
 8008496:	e2c7      	b.n	8008a28 <_svfiprintf_r+0x830>
 8008498:	3c10      	subs	r4, #16
 800849a:	4643      	mov	r3, r8
 800849c:	2c10      	cmp	r4, #16
 800849e:	dce9      	bgt.n	8008474 <_svfiprintf_r+0x27c>
 80084a0:	46ab      	mov	fp, r5
 80084a2:	464d      	mov	r5, r9
 80084a4:	605c      	str	r4, [r3, #4]
 80084a6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80084a8:	601e      	str	r6, [r3, #0]
 80084aa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80084ac:	18a4      	adds	r4, r4, r2
 80084ae:	3301      	adds	r3, #1
 80084b0:	9413      	str	r4, [sp, #76]	; 0x4c
 80084b2:	9312      	str	r3, [sp, #72]	; 0x48
 80084b4:	2b07      	cmp	r3, #7
 80084b6:	dd08      	ble.n	80084ca <_svfiprintf_r+0x2d2>
 80084b8:	9805      	ldr	r0, [sp, #20]
 80084ba:	4659      	mov	r1, fp
 80084bc:	aa11      	add	r2, sp, #68	; 0x44
 80084be:	f7ff fe03 	bl	80080c8 <__ssprint_r>
 80084c2:	2800      	cmp	r0, #0
 80084c4:	d000      	beq.n	80084c8 <_svfiprintf_r+0x2d0>
 80084c6:	e1d8      	b.n	800887a <_svfiprintf_r+0x682>
 80084c8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80084ca:	9b03      	ldr	r3, [sp, #12]
 80084cc:	9807      	ldr	r0, [sp, #28]
 80084ce:	4283      	cmp	r3, r0
 80084d0:	da00      	bge.n	80084d4 <_svfiprintf_r+0x2dc>
 80084d2:	1c03      	adds	r3, r0, #0
 80084d4:	9906      	ldr	r1, [sp, #24]
 80084d6:	18c9      	adds	r1, r1, r3
 80084d8:	9106      	str	r1, [sp, #24]
 80084da:	2c00      	cmp	r4, #0
 80084dc:	d000      	beq.n	80084e0 <_svfiprintf_r+0x2e8>
 80084de:	e1dd      	b.n	800889c <_svfiprintf_r+0x6a4>
 80084e0:	2300      	movs	r3, #0
 80084e2:	9312      	str	r3, [sp, #72]	; 0x48
 80084e4:	4647      	mov	r7, r8
 80084e6:	e6ab      	b.n	8008240 <_svfiprintf_r+0x48>
 80084e8:	0092      	lsls	r2, r2, #2
 80084ea:	588a      	ldr	r2, [r1, r2]
 80084ec:	4697      	mov	pc, r2
 80084ee:	9c02      	ldr	r4, [sp, #8]
 80084f0:	4334      	orrs	r4, r6
 80084f2:	9402      	str	r4, [sp, #8]
 80084f4:	e6d8      	b.n	80082a8 <_svfiprintf_r+0xb0>
 80084f6:	9c02      	ldr	r4, [sp, #8]
 80084f8:	2310      	movs	r3, #16
 80084fa:	431c      	orrs	r4, r3
 80084fc:	9402      	str	r4, [sp, #8]
 80084fe:	9c02      	ldr	r4, [sp, #8]
 8008500:	06e4      	lsls	r4, r4, #27
 8008502:	d403      	bmi.n	800850c <_svfiprintf_r+0x314>
 8008504:	9c02      	ldr	r4, [sp, #8]
 8008506:	0664      	lsls	r4, r4, #25
 8008508:	d500      	bpl.n	800850c <_svfiprintf_r+0x314>
 800850a:	e260      	b.n	80089ce <_svfiprintf_r+0x7d6>
 800850c:	9c08      	ldr	r4, [sp, #32]
 800850e:	6826      	ldr	r6, [r4, #0]
 8008510:	1c31      	adds	r1, r6, #0
 8008512:	3404      	adds	r4, #4
 8008514:	1e4b      	subs	r3, r1, #1
 8008516:	4199      	sbcs	r1, r3
 8008518:	9408      	str	r4, [sp, #32]
 800851a:	2300      	movs	r3, #0
 800851c:	e012      	b.n	8008544 <_svfiprintf_r+0x34c>
 800851e:	9c02      	ldr	r4, [sp, #8]
 8008520:	2310      	movs	r3, #16
 8008522:	431c      	orrs	r4, r3
 8008524:	9402      	str	r4, [sp, #8]
 8008526:	9c02      	ldr	r4, [sp, #8]
 8008528:	06e4      	lsls	r4, r4, #27
 800852a:	d403      	bmi.n	8008534 <_svfiprintf_r+0x33c>
 800852c:	9c02      	ldr	r4, [sp, #8]
 800852e:	0664      	lsls	r4, r4, #25
 8008530:	d500      	bpl.n	8008534 <_svfiprintf_r+0x33c>
 8008532:	e252      	b.n	80089da <_svfiprintf_r+0x7e2>
 8008534:	9c08      	ldr	r4, [sp, #32]
 8008536:	6826      	ldr	r6, [r4, #0]
 8008538:	3404      	adds	r4, #4
 800853a:	1c31      	adds	r1, r6, #0
 800853c:	9408      	str	r4, [sp, #32]
 800853e:	1e4b      	subs	r3, r1, #1
 8008540:	4199      	sbcs	r1, r3
 8008542:	2301      	movs	r3, #1
 8008544:	203f      	movs	r0, #63	; 0x3f
 8008546:	2200      	movs	r2, #0
 8008548:	4468      	add	r0, sp
 800854a:	7002      	strb	r2, [r0, #0]
 800854c:	2400      	movs	r4, #0
 800854e:	464a      	mov	r2, r9
 8008550:	2a00      	cmp	r2, #0
 8008552:	db03      	blt.n	800855c <_svfiprintf_r+0x364>
 8008554:	9802      	ldr	r0, [sp, #8]
 8008556:	2280      	movs	r2, #128	; 0x80
 8008558:	4390      	bics	r0, r2
 800855a:	9002      	str	r0, [sp, #8]
 800855c:	464a      	mov	r2, r9
 800855e:	2a00      	cmp	r2, #0
 8008560:	d102      	bne.n	8008568 <_svfiprintf_r+0x370>
 8008562:	2900      	cmp	r1, #0
 8008564:	d100      	bne.n	8008568 <_svfiprintf_r+0x370>
 8008566:	e11a      	b.n	800879e <_svfiprintf_r+0x5a6>
 8008568:	2b01      	cmp	r3, #1
 800856a:	d100      	bne.n	800856e <_svfiprintf_r+0x376>
 800856c:	e1e8      	b.n	8008940 <_svfiprintf_r+0x748>
 800856e:	2b02      	cmp	r3, #2
 8008570:	d100      	bne.n	8008574 <_svfiprintf_r+0x37c>
 8008572:	e1cc      	b.n	800890e <_svfiprintf_r+0x716>
 8008574:	466b      	mov	r3, sp
 8008576:	3377      	adds	r3, #119	; 0x77
 8008578:	2107      	movs	r1, #7
 800857a:	1c0a      	adds	r2, r1, #0
 800857c:	4032      	ands	r2, r6
 800857e:	3230      	adds	r2, #48	; 0x30
 8008580:	1c18      	adds	r0, r3, #0
 8008582:	701a      	strb	r2, [r3, #0]
 8008584:	08f6      	lsrs	r6, r6, #3
 8008586:	3b01      	subs	r3, #1
 8008588:	2e00      	cmp	r6, #0
 800858a:	d1f6      	bne.n	800857a <_svfiprintf_r+0x382>
 800858c:	900b      	str	r0, [sp, #44]	; 0x2c
 800858e:	1c01      	adds	r1, r0, #0
 8008590:	9802      	ldr	r0, [sp, #8]
 8008592:	07c0      	lsls	r0, r0, #31
 8008594:	d400      	bmi.n	8008598 <_svfiprintf_r+0x3a0>
 8008596:	e206      	b.n	80089a6 <_svfiprintf_r+0x7ae>
 8008598:	2a30      	cmp	r2, #48	; 0x30
 800859a:	d100      	bne.n	800859e <_svfiprintf_r+0x3a6>
 800859c:	e266      	b.n	8008a6c <_svfiprintf_r+0x874>
 800859e:	930b      	str	r3, [sp, #44]	; 0x2c
 80085a0:	3901      	subs	r1, #1
 80085a2:	2330      	movs	r3, #48	; 0x30
 80085a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80085a6:	700b      	strb	r3, [r1, #0]
 80085a8:	4641      	mov	r1, r8
 80085aa:	1a89      	subs	r1, r1, r2
 80085ac:	9104      	str	r1, [sp, #16]
 80085ae:	e104      	b.n	80087ba <_svfiprintf_r+0x5c2>
 80085b0:	9c08      	ldr	r4, [sp, #32]
 80085b2:	6824      	ldr	r4, [r4, #0]
 80085b4:	9407      	str	r4, [sp, #28]
 80085b6:	9c08      	ldr	r4, [sp, #32]
 80085b8:	3404      	adds	r4, #4
 80085ba:	9408      	str	r4, [sp, #32]
 80085bc:	9c07      	ldr	r4, [sp, #28]
 80085be:	2c00      	cmp	r4, #0
 80085c0:	db00      	blt.n	80085c4 <_svfiprintf_r+0x3cc>
 80085c2:	e671      	b.n	80082a8 <_svfiprintf_r+0xb0>
 80085c4:	4264      	negs	r4, r4
 80085c6:	9407      	str	r4, [sp, #28]
 80085c8:	9c02      	ldr	r4, [sp, #8]
 80085ca:	4662      	mov	r2, ip
 80085cc:	4314      	orrs	r4, r2
 80085ce:	9402      	str	r4, [sp, #8]
 80085d0:	e66a      	b.n	80082a8 <_svfiprintf_r+0xb0>
 80085d2:	46c0      	nop			; (mov r8, r8)
 80085d4:	0800efc8 	.word	0x0800efc8
 80085d8:	0800f12c 	.word	0x0800f12c
 80085dc:	243f      	movs	r4, #63	; 0x3f
 80085de:	446c      	add	r4, sp
 80085e0:	7020      	strb	r0, [r4, #0]
 80085e2:	9c02      	ldr	r4, [sp, #8]
 80085e4:	06e4      	lsls	r4, r4, #27
 80085e6:	d403      	bmi.n	80085f0 <_svfiprintf_r+0x3f8>
 80085e8:	9c02      	ldr	r4, [sp, #8]
 80085ea:	0664      	lsls	r4, r4, #25
 80085ec:	d500      	bpl.n	80085f0 <_svfiprintf_r+0x3f8>
 80085ee:	e1fc      	b.n	80089ea <_svfiprintf_r+0x7f2>
 80085f0:	9c08      	ldr	r4, [sp, #32]
 80085f2:	6826      	ldr	r6, [r4, #0]
 80085f4:	3404      	adds	r4, #4
 80085f6:	9408      	str	r4, [sp, #32]
 80085f8:	2e00      	cmp	r6, #0
 80085fa:	da00      	bge.n	80085fe <_svfiprintf_r+0x406>
 80085fc:	e1fe      	b.n	80089fc <_svfiprintf_r+0x804>
 80085fe:	203f      	movs	r0, #63	; 0x3f
 8008600:	4468      	add	r0, sp
 8008602:	1c31      	adds	r1, r6, #0
 8008604:	1e4b      	subs	r3, r1, #1
 8008606:	4199      	sbcs	r1, r3
 8008608:	7804      	ldrb	r4, [r0, #0]
 800860a:	2301      	movs	r3, #1
 800860c:	e79f      	b.n	800854e <_svfiprintf_r+0x356>
 800860e:	9a08      	ldr	r2, [sp, #32]
 8008610:	1c14      	adds	r4, r2, #0
 8008612:	6812      	ldr	r2, [r2, #0]
 8008614:	3404      	adds	r4, #4
 8008616:	ab14      	add	r3, sp, #80	; 0x50
 8008618:	203f      	movs	r0, #63	; 0x3f
 800861a:	9408      	str	r4, [sp, #32]
 800861c:	701a      	strb	r2, [r3, #0]
 800861e:	2401      	movs	r4, #1
 8008620:	2200      	movs	r2, #0
 8008622:	4468      	add	r0, sp
 8008624:	7002      	strb	r2, [r0, #0]
 8008626:	9403      	str	r4, [sp, #12]
 8008628:	9404      	str	r4, [sp, #16]
 800862a:	930b      	str	r3, [sp, #44]	; 0x2c
 800862c:	e651      	b.n	80082d2 <_svfiprintf_r+0xda>
 800862e:	213f      	movs	r1, #63	; 0x3f
 8008630:	4cc0      	ldr	r4, [pc, #768]	; (8008934 <_svfiprintf_r+0x73c>)
 8008632:	4469      	add	r1, sp
 8008634:	7008      	strb	r0, [r1, #0]
 8008636:	940c      	str	r4, [sp, #48]	; 0x30
 8008638:	9c02      	ldr	r4, [sp, #8]
 800863a:	06e4      	lsls	r4, r4, #27
 800863c:	d403      	bmi.n	8008646 <_svfiprintf_r+0x44e>
 800863e:	9c02      	ldr	r4, [sp, #8]
 8008640:	0664      	lsls	r4, r4, #25
 8008642:	d500      	bpl.n	8008646 <_svfiprintf_r+0x44e>
 8008644:	e1cc      	b.n	80089e0 <_svfiprintf_r+0x7e8>
 8008646:	9c08      	ldr	r4, [sp, #32]
 8008648:	6826      	ldr	r6, [r4, #0]
 800864a:	3404      	adds	r4, #4
 800864c:	9408      	str	r4, [sp, #32]
 800864e:	9c02      	ldr	r4, [sp, #8]
 8008650:	07e4      	lsls	r4, r4, #31
 8008652:	d500      	bpl.n	8008656 <_svfiprintf_r+0x45e>
 8008654:	e18f      	b.n	8008976 <_svfiprintf_r+0x77e>
 8008656:	1c31      	adds	r1, r6, #0
 8008658:	1e4b      	subs	r3, r1, #1
 800865a:	4199      	sbcs	r1, r3
 800865c:	2302      	movs	r3, #2
 800865e:	e771      	b.n	8008544 <_svfiprintf_r+0x34c>
 8008660:	213f      	movs	r1, #63	; 0x3f
 8008662:	4cb5      	ldr	r4, [pc, #724]	; (8008938 <_svfiprintf_r+0x740>)
 8008664:	4469      	add	r1, sp
 8008666:	7008      	strb	r0, [r1, #0]
 8008668:	940c      	str	r4, [sp, #48]	; 0x30
 800866a:	e7e5      	b.n	8008638 <_svfiprintf_r+0x440>
 800866c:	9c02      	ldr	r4, [sp, #8]
 800866e:	2240      	movs	r2, #64	; 0x40
 8008670:	4314      	orrs	r4, r2
 8008672:	9402      	str	r4, [sp, #8]
 8008674:	e618      	b.n	80082a8 <_svfiprintf_r+0xb0>
 8008676:	223f      	movs	r2, #63	; 0x3f
 8008678:	9c02      	ldr	r4, [sp, #8]
 800867a:	446a      	add	r2, sp
 800867c:	7010      	strb	r0, [r2, #0]
 800867e:	06e4      	lsls	r4, r4, #27
 8008680:	d500      	bpl.n	8008684 <_svfiprintf_r+0x48c>
 8008682:	e19c      	b.n	80089be <_svfiprintf_r+0x7c6>
 8008684:	9c02      	ldr	r4, [sp, #8]
 8008686:	0664      	lsls	r4, r4, #25
 8008688:	d400      	bmi.n	800868c <_svfiprintf_r+0x494>
 800868a:	e198      	b.n	80089be <_svfiprintf_r+0x7c6>
 800868c:	9808      	ldr	r0, [sp, #32]
 800868e:	9c08      	ldr	r4, [sp, #32]
 8008690:	4669      	mov	r1, sp
 8008692:	2218      	movs	r2, #24
 8008694:	6800      	ldr	r0, [r0, #0]
 8008696:	5a52      	ldrh	r2, [r2, r1]
 8008698:	3404      	adds	r4, #4
 800869a:	9000      	str	r0, [sp, #0]
 800869c:	8002      	strh	r2, [r0, #0]
 800869e:	9408      	str	r4, [sp, #32]
 80086a0:	e5ce      	b.n	8008240 <_svfiprintf_r+0x48>
 80086a2:	9c08      	ldr	r4, [sp, #32]
 80086a4:	203f      	movs	r0, #63	; 0x3f
 80086a6:	9e08      	ldr	r6, [sp, #32]
 80086a8:	6824      	ldr	r4, [r4, #0]
 80086aa:	2300      	movs	r3, #0
 80086ac:	4468      	add	r0, sp
 80086ae:	7003      	strb	r3, [r0, #0]
 80086b0:	3604      	adds	r6, #4
 80086b2:	940b      	str	r4, [sp, #44]	; 0x2c
 80086b4:	2c00      	cmp	r4, #0
 80086b6:	d100      	bne.n	80086ba <_svfiprintf_r+0x4c2>
 80086b8:	e1dd      	b.n	8008a76 <_svfiprintf_r+0x87e>
 80086ba:	4648      	mov	r0, r9
 80086bc:	2800      	cmp	r0, #0
 80086be:	da00      	bge.n	80086c2 <_svfiprintf_r+0x4ca>
 80086c0:	e1a7      	b.n	8008a12 <_svfiprintf_r+0x81a>
 80086c2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80086c4:	2100      	movs	r1, #0
 80086c6:	464a      	mov	r2, r9
 80086c8:	f7fe fda4 	bl	8007214 <memchr>
 80086cc:	2800      	cmp	r0, #0
 80086ce:	d100      	bne.n	80086d2 <_svfiprintf_r+0x4da>
 80086d0:	e1b6      	b.n	8008a40 <_svfiprintf_r+0x848>
 80086d2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80086d4:	1b00      	subs	r0, r0, r4
 80086d6:	9004      	str	r0, [sp, #16]
 80086d8:	4548      	cmp	r0, r9
 80086da:	dd00      	ble.n	80086de <_svfiprintf_r+0x4e6>
 80086dc:	e1b0      	b.n	8008a40 <_svfiprintf_r+0x848>
 80086de:	203f      	movs	r0, #63	; 0x3f
 80086e0:	4468      	add	r0, sp
 80086e2:	2100      	movs	r1, #0
 80086e4:	7804      	ldrb	r4, [r0, #0]
 80086e6:	9608      	str	r6, [sp, #32]
 80086e8:	9109      	str	r1, [sp, #36]	; 0x24
 80086ea:	e068      	b.n	80087be <_svfiprintf_r+0x5c6>
 80086ec:	782b      	ldrb	r3, [r5, #0]
 80086ee:	3501      	adds	r5, #1
 80086f0:	2b2a      	cmp	r3, #42	; 0x2a
 80086f2:	d100      	bne.n	80086f6 <_svfiprintf_r+0x4fe>
 80086f4:	e1d0      	b.n	8008a98 <_svfiprintf_r+0x8a0>
 80086f6:	1c1a      	adds	r2, r3, #0
 80086f8:	3a30      	subs	r2, #48	; 0x30
 80086fa:	2400      	movs	r4, #0
 80086fc:	2a09      	cmp	r2, #9
 80086fe:	d80f      	bhi.n	8008720 <_svfiprintf_r+0x528>
 8008700:	00a3      	lsls	r3, r4, #2
 8008702:	191c      	adds	r4, r3, r4
 8008704:	782b      	ldrb	r3, [r5, #0]
 8008706:	0064      	lsls	r4, r4, #1
 8008708:	1914      	adds	r4, r2, r4
 800870a:	1c1a      	adds	r2, r3, #0
 800870c:	3a30      	subs	r2, #48	; 0x30
 800870e:	3501      	adds	r5, #1
 8008710:	2a09      	cmp	r2, #9
 8008712:	d9f5      	bls.n	8008700 <_svfiprintf_r+0x508>
 8008714:	46a1      	mov	r9, r4
 8008716:	2c00      	cmp	r4, #0
 8008718:	db00      	blt.n	800871c <_svfiprintf_r+0x524>
 800871a:	e5c7      	b.n	80082ac <_svfiprintf_r+0xb4>
 800871c:	2401      	movs	r4, #1
 800871e:	4264      	negs	r4, r4
 8008720:	46a1      	mov	r9, r4
 8008722:	e5c3      	b.n	80082ac <_svfiprintf_r+0xb4>
 8008724:	202b      	movs	r0, #43	; 0x2b
 8008726:	e5bf      	b.n	80082a8 <_svfiprintf_r+0xb0>
 8008728:	9c02      	ldr	r4, [sp, #8]
 800872a:	213f      	movs	r1, #63	; 0x3f
 800872c:	2310      	movs	r3, #16
 800872e:	4469      	add	r1, sp
 8008730:	431c      	orrs	r4, r3
 8008732:	7008      	strb	r0, [r1, #0]
 8008734:	9402      	str	r4, [sp, #8]
 8008736:	e754      	b.n	80085e2 <_svfiprintf_r+0x3ea>
 8008738:	1c1a      	adds	r2, r3, #0
 800873a:	2400      	movs	r4, #0
 800873c:	3a30      	subs	r2, #48	; 0x30
 800873e:	00a3      	lsls	r3, r4, #2
 8008740:	191c      	adds	r4, r3, r4
 8008742:	782b      	ldrb	r3, [r5, #0]
 8008744:	0064      	lsls	r4, r4, #1
 8008746:	18a4      	adds	r4, r4, r2
 8008748:	1c1a      	adds	r2, r3, #0
 800874a:	3a30      	subs	r2, #48	; 0x30
 800874c:	3501      	adds	r5, #1
 800874e:	2a09      	cmp	r2, #9
 8008750:	d9f5      	bls.n	800873e <_svfiprintf_r+0x546>
 8008752:	9407      	str	r4, [sp, #28]
 8008754:	e5aa      	b.n	80082ac <_svfiprintf_r+0xb4>
 8008756:	9c02      	ldr	r4, [sp, #8]
 8008758:	4652      	mov	r2, sl
 800875a:	4314      	orrs	r4, r2
 800875c:	9402      	str	r4, [sp, #8]
 800875e:	e5a3      	b.n	80082a8 <_svfiprintf_r+0xb0>
 8008760:	9b08      	ldr	r3, [sp, #32]
 8008762:	1c1c      	adds	r4, r3, #0
 8008764:	3404      	adds	r4, #4
 8008766:	9408      	str	r4, [sp, #32]
 8008768:	9c02      	ldr	r4, [sp, #8]
 800876a:	681e      	ldr	r6, [r3, #0]
 800876c:	2302      	movs	r3, #2
 800876e:	431c      	orrs	r4, r3
 8008770:	2230      	movs	r2, #48	; 0x30
 8008772:	ab10      	add	r3, sp, #64	; 0x40
 8008774:	9402      	str	r4, [sp, #8]
 8008776:	4c70      	ldr	r4, [pc, #448]	; (8008938 <_svfiprintf_r+0x740>)
 8008778:	701a      	strb	r2, [r3, #0]
 800877a:	1c31      	adds	r1, r6, #0
 800877c:	2278      	movs	r2, #120	; 0x78
 800877e:	705a      	strb	r2, [r3, #1]
 8008780:	940c      	str	r4, [sp, #48]	; 0x30
 8008782:	1e4b      	subs	r3, r1, #1
 8008784:	4199      	sbcs	r1, r3
 8008786:	2302      	movs	r3, #2
 8008788:	e6dc      	b.n	8008544 <_svfiprintf_r+0x34c>
 800878a:	9c02      	ldr	r4, [sp, #8]
 800878c:	2201      	movs	r2, #1
 800878e:	4314      	orrs	r4, r2
 8008790:	9402      	str	r4, [sp, #8]
 8008792:	e589      	b.n	80082a8 <_svfiprintf_r+0xb0>
 8008794:	2800      	cmp	r0, #0
 8008796:	d000      	beq.n	800879a <_svfiprintf_r+0x5a2>
 8008798:	e586      	b.n	80082a8 <_svfiprintf_r+0xb0>
 800879a:	2020      	movs	r0, #32
 800879c:	e584      	b.n	80082a8 <_svfiprintf_r+0xb0>
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d000      	beq.n	80087a4 <_svfiprintf_r+0x5ac>
 80087a2:	e084      	b.n	80088ae <_svfiprintf_r+0x6b6>
 80087a4:	9902      	ldr	r1, [sp, #8]
 80087a6:	07c9      	lsls	r1, r1, #31
 80087a8:	d400      	bmi.n	80087ac <_svfiprintf_r+0x5b4>
 80087aa:	e0ab      	b.n	8008904 <_svfiprintf_r+0x70c>
 80087ac:	2277      	movs	r2, #119	; 0x77
 80087ae:	2330      	movs	r3, #48	; 0x30
 80087b0:	446a      	add	r2, sp
 80087b2:	7013      	strb	r3, [r2, #0]
 80087b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80087b6:	920b      	str	r2, [sp, #44]	; 0x2c
 80087b8:	9304      	str	r3, [sp, #16]
 80087ba:	4648      	mov	r0, r9
 80087bc:	9009      	str	r0, [sp, #36]	; 0x24
 80087be:	9804      	ldr	r0, [sp, #16]
 80087c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80087c2:	9003      	str	r0, [sp, #12]
 80087c4:	4288      	cmp	r0, r1
 80087c6:	da00      	bge.n	80087ca <_svfiprintf_r+0x5d2>
 80087c8:	9103      	str	r1, [sp, #12]
 80087ca:	9a03      	ldr	r2, [sp, #12]
 80087cc:	1e63      	subs	r3, r4, #1
 80087ce:	419c      	sbcs	r4, r3
 80087d0:	1912      	adds	r2, r2, r4
 80087d2:	9203      	str	r2, [sp, #12]
 80087d4:	e57f      	b.n	80082d6 <_svfiprintf_r+0xde>
 80087d6:	9907      	ldr	r1, [sp, #28]
 80087d8:	9a03      	ldr	r2, [sp, #12]
 80087da:	1a8c      	subs	r4, r1, r2
 80087dc:	2c00      	cmp	r4, #0
 80087de:	dc00      	bgt.n	80087e2 <_svfiprintf_r+0x5ea>
 80087e0:	e5e6      	b.n	80083b0 <_svfiprintf_r+0x1b8>
 80087e2:	4e56      	ldr	r6, [pc, #344]	; (800893c <_svfiprintf_r+0x744>)
 80087e4:	2c10      	cmp	r4, #16
 80087e6:	dd29      	ble.n	800883c <_svfiprintf_r+0x644>
 80087e8:	2310      	movs	r3, #16
 80087ea:	199b      	adds	r3, r3, r6
 80087ec:	2010      	movs	r0, #16
 80087ee:	469a      	mov	sl, r3
 80087f0:	4681      	mov	r9, r0
 80087f2:	1c3b      	adds	r3, r7, #0
 80087f4:	1c37      	adds	r7, r6, #0
 80087f6:	465e      	mov	r6, fp
 80087f8:	46ab      	mov	fp, r5
 80087fa:	9d05      	ldr	r5, [sp, #20]
 80087fc:	e003      	b.n	8008806 <_svfiprintf_r+0x60e>
 80087fe:	3c10      	subs	r4, #16
 8008800:	3308      	adds	r3, #8
 8008802:	2c10      	cmp	r4, #16
 8008804:	dd16      	ble.n	8008834 <_svfiprintf_r+0x63c>
 8008806:	464a      	mov	r2, r9
 8008808:	605a      	str	r2, [r3, #4]
 800880a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800880c:	3210      	adds	r2, #16
 800880e:	9213      	str	r2, [sp, #76]	; 0x4c
 8008810:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008812:	4651      	mov	r1, sl
 8008814:	3201      	adds	r2, #1
 8008816:	6019      	str	r1, [r3, #0]
 8008818:	9212      	str	r2, [sp, #72]	; 0x48
 800881a:	2a07      	cmp	r2, #7
 800881c:	ddef      	ble.n	80087fe <_svfiprintf_r+0x606>
 800881e:	1c28      	adds	r0, r5, #0
 8008820:	1c31      	adds	r1, r6, #0
 8008822:	aa11      	add	r2, sp, #68	; 0x44
 8008824:	f7ff fc50 	bl	80080c8 <__ssprint_r>
 8008828:	2800      	cmp	r0, #0
 800882a:	d145      	bne.n	80088b8 <_svfiprintf_r+0x6c0>
 800882c:	3c10      	subs	r4, #16
 800882e:	4643      	mov	r3, r8
 8008830:	2c10      	cmp	r4, #16
 8008832:	dce8      	bgt.n	8008806 <_svfiprintf_r+0x60e>
 8008834:	465d      	mov	r5, fp
 8008836:	46b3      	mov	fp, r6
 8008838:	1c3e      	adds	r6, r7, #0
 800883a:	1c1f      	adds	r7, r3, #0
 800883c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800883e:	607c      	str	r4, [r7, #4]
 8008840:	191c      	adds	r4, r3, r4
 8008842:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008844:	3610      	adds	r6, #16
 8008846:	3301      	adds	r3, #1
 8008848:	603e      	str	r6, [r7, #0]
 800884a:	9413      	str	r4, [sp, #76]	; 0x4c
 800884c:	9312      	str	r3, [sp, #72]	; 0x48
 800884e:	2b07      	cmp	r3, #7
 8008850:	dd00      	ble.n	8008854 <_svfiprintf_r+0x65c>
 8008852:	e0eb      	b.n	8008a2c <_svfiprintf_r+0x834>
 8008854:	3708      	adds	r7, #8
 8008856:	e5ab      	b.n	80083b0 <_svfiprintf_r+0x1b8>
 8008858:	9805      	ldr	r0, [sp, #20]
 800885a:	4659      	mov	r1, fp
 800885c:	aa11      	add	r2, sp, #68	; 0x44
 800885e:	f7ff fc33 	bl	80080c8 <__ssprint_r>
 8008862:	2800      	cmp	r0, #0
 8008864:	d109      	bne.n	800887a <_svfiprintf_r+0x682>
 8008866:	4643      	mov	r3, r8
 8008868:	e5f1      	b.n	800844e <_svfiprintf_r+0x256>
 800886a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800886c:	2a00      	cmp	r2, #0
 800886e:	d004      	beq.n	800887a <_svfiprintf_r+0x682>
 8008870:	9805      	ldr	r0, [sp, #20]
 8008872:	4659      	mov	r1, fp
 8008874:	aa11      	add	r2, sp, #68	; 0x44
 8008876:	f7ff fc27 	bl	80080c8 <__ssprint_r>
 800887a:	465c      	mov	r4, fp
 800887c:	89a3      	ldrh	r3, [r4, #12]
 800887e:	0658      	lsls	r0, r3, #25
 8008880:	d502      	bpl.n	8008888 <_svfiprintf_r+0x690>
 8008882:	2301      	movs	r3, #1
 8008884:	425b      	negs	r3, r3
 8008886:	9306      	str	r3, [sp, #24]
 8008888:	9806      	ldr	r0, [sp, #24]
 800888a:	b02f      	add	sp, #188	; 0xbc
 800888c:	bc3c      	pop	{r2, r3, r4, r5}
 800888e:	4690      	mov	r8, r2
 8008890:	4699      	mov	r9, r3
 8008892:	46a2      	mov	sl, r4
 8008894:	46ab      	mov	fp, r5
 8008896:	bcf0      	pop	{r4, r5, r6, r7}
 8008898:	bc02      	pop	{r1}
 800889a:	4708      	bx	r1
 800889c:	9805      	ldr	r0, [sp, #20]
 800889e:	4659      	mov	r1, fp
 80088a0:	aa11      	add	r2, sp, #68	; 0x44
 80088a2:	f7ff fc11 	bl	80080c8 <__ssprint_r>
 80088a6:	2800      	cmp	r0, #0
 80088a8:	d100      	bne.n	80088ac <_svfiprintf_r+0x6b4>
 80088aa:	e619      	b.n	80084e0 <_svfiprintf_r+0x2e8>
 80088ac:	e7e5      	b.n	800887a <_svfiprintf_r+0x682>
 80088ae:	2100      	movs	r1, #0
 80088b0:	4643      	mov	r3, r8
 80088b2:	9104      	str	r1, [sp, #16]
 80088b4:	930b      	str	r3, [sp, #44]	; 0x2c
 80088b6:	e780      	b.n	80087ba <_svfiprintf_r+0x5c2>
 80088b8:	46b3      	mov	fp, r6
 80088ba:	e7de      	b.n	800887a <_svfiprintf_r+0x682>
 80088bc:	9805      	ldr	r0, [sp, #20]
 80088be:	4659      	mov	r1, fp
 80088c0:	aa11      	add	r2, sp, #68	; 0x44
 80088c2:	f7ff fc01 	bl	80080c8 <__ssprint_r>
 80088c6:	2800      	cmp	r0, #0
 80088c8:	d1d7      	bne.n	800887a <_svfiprintf_r+0x682>
 80088ca:	4647      	mov	r7, r8
 80088cc:	e4d3      	b.n	8008276 <_svfiprintf_r+0x7e>
 80088ce:	9805      	ldr	r0, [sp, #20]
 80088d0:	4659      	mov	r1, fp
 80088d2:	aa11      	add	r2, sp, #68	; 0x44
 80088d4:	f7ff fbf8 	bl	80080c8 <__ssprint_r>
 80088d8:	2800      	cmp	r0, #0
 80088da:	d1ce      	bne.n	800887a <_svfiprintf_r+0x682>
 80088dc:	4647      	mov	r7, r8
 80088de:	e5a7      	b.n	8008430 <_svfiprintf_r+0x238>
 80088e0:	9805      	ldr	r0, [sp, #20]
 80088e2:	4659      	mov	r1, fp
 80088e4:	aa11      	add	r2, sp, #68	; 0x44
 80088e6:	f7ff fbef 	bl	80080c8 <__ssprint_r>
 80088ea:	2800      	cmp	r0, #0
 80088ec:	d1c5      	bne.n	800887a <_svfiprintf_r+0x682>
 80088ee:	4647      	mov	r7, r8
 80088f0:	e549      	b.n	8008386 <_svfiprintf_r+0x18e>
 80088f2:	9805      	ldr	r0, [sp, #20]
 80088f4:	4659      	mov	r1, fp
 80088f6:	aa11      	add	r2, sp, #68	; 0x44
 80088f8:	f7ff fbe6 	bl	80080c8 <__ssprint_r>
 80088fc:	2800      	cmp	r0, #0
 80088fe:	d1bc      	bne.n	800887a <_svfiprintf_r+0x682>
 8008900:	4647      	mov	r7, r8
 8008902:	e551      	b.n	80083a8 <_svfiprintf_r+0x1b0>
 8008904:	2000      	movs	r0, #0
 8008906:	4642      	mov	r2, r8
 8008908:	9004      	str	r0, [sp, #16]
 800890a:	920b      	str	r2, [sp, #44]	; 0x2c
 800890c:	e755      	b.n	80087ba <_svfiprintf_r+0x5c2>
 800890e:	466b      	mov	r3, sp
 8008910:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008912:	3377      	adds	r3, #119	; 0x77
 8008914:	220f      	movs	r2, #15
 8008916:	1c19      	adds	r1, r3, #0
 8008918:	1c13      	adds	r3, r2, #0
 800891a:	4033      	ands	r3, r6
 800891c:	5cc3      	ldrb	r3, [r0, r3]
 800891e:	0936      	lsrs	r6, r6, #4
 8008920:	700b      	strb	r3, [r1, #0]
 8008922:	1e4b      	subs	r3, r1, #1
 8008924:	2e00      	cmp	r6, #0
 8008926:	d1f6      	bne.n	8008916 <_svfiprintf_r+0x71e>
 8008928:	4640      	mov	r0, r8
 800892a:	1a40      	subs	r0, r0, r1
 800892c:	910b      	str	r1, [sp, #44]	; 0x2c
 800892e:	9004      	str	r0, [sp, #16]
 8008930:	e743      	b.n	80087ba <_svfiprintf_r+0x5c2>
 8008932:	46c0      	nop			; (mov r8, r8)
 8008934:	0800ee3c 	.word	0x0800ee3c
 8008938:	0800ee50 	.word	0x0800ee50
 800893c:	0800f12c 	.word	0x0800f12c
 8008940:	2e09      	cmp	r6, #9
 8008942:	d934      	bls.n	80089ae <_svfiprintf_r+0x7b6>
 8008944:	466b      	mov	r3, sp
 8008946:	3377      	adds	r3, #119	; 0x77
 8008948:	46a2      	mov	sl, r4
 800894a:	1c30      	adds	r0, r6, #0
 800894c:	210a      	movs	r1, #10
 800894e:	1c1c      	adds	r4, r3, #0
 8008950:	f000 ea1a 	blx	8008d88 <__aeabi_uidivmod>
 8008954:	3130      	adds	r1, #48	; 0x30
 8008956:	7021      	strb	r1, [r4, #0]
 8008958:	1c30      	adds	r0, r6, #0
 800895a:	210a      	movs	r1, #10
 800895c:	f000 e996 	blx	8008c8c <__aeabi_uidiv>
 8008960:	1e63      	subs	r3, r4, #1
 8008962:	1c06      	adds	r6, r0, #0
 8008964:	2800      	cmp	r0, #0
 8008966:	d1f0      	bne.n	800894a <_svfiprintf_r+0x752>
 8008968:	940b      	str	r4, [sp, #44]	; 0x2c
 800896a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800896c:	4642      	mov	r2, r8
 800896e:	1ad2      	subs	r2, r2, r3
 8008970:	4654      	mov	r4, sl
 8008972:	9204      	str	r2, [sp, #16]
 8008974:	e721      	b.n	80087ba <_svfiprintf_r+0x5c2>
 8008976:	2e00      	cmp	r6, #0
 8008978:	d02c      	beq.n	80089d4 <_svfiprintf_r+0x7dc>
 800897a:	aa10      	add	r2, sp, #64	; 0x40
 800897c:	9c02      	ldr	r4, [sp, #8]
 800897e:	7053      	strb	r3, [r2, #1]
 8008980:	2302      	movs	r3, #2
 8008982:	2130      	movs	r1, #48	; 0x30
 8008984:	431c      	orrs	r4, r3
 8008986:	7011      	strb	r1, [r2, #0]
 8008988:	9402      	str	r4, [sp, #8]
 800898a:	2101      	movs	r1, #1
 800898c:	e5da      	b.n	8008544 <_svfiprintf_r+0x34c>
 800898e:	9805      	ldr	r0, [sp, #20]
 8008990:	4659      	mov	r1, fp
 8008992:	aa11      	add	r2, sp, #68	; 0x44
 8008994:	f7ff fb98 	bl	80080c8 <__ssprint_r>
 8008998:	2800      	cmp	r0, #0
 800899a:	d000      	beq.n	800899e <_svfiprintf_r+0x7a6>
 800899c:	e76d      	b.n	800887a <_svfiprintf_r+0x682>
 800899e:	4647      	mov	r7, r8
 80089a0:	e4df      	b.n	8008362 <_svfiprintf_r+0x16a>
 80089a2:	46bb      	mov	fp, r7
 80089a4:	e769      	b.n	800887a <_svfiprintf_r+0x682>
 80089a6:	4642      	mov	r2, r8
 80089a8:	1a52      	subs	r2, r2, r1
 80089aa:	9204      	str	r2, [sp, #16]
 80089ac:	e705      	b.n	80087ba <_svfiprintf_r+0x5c2>
 80089ae:	2377      	movs	r3, #119	; 0x77
 80089b0:	980d      	ldr	r0, [sp, #52]	; 0x34
 80089b2:	446b      	add	r3, sp
 80089b4:	3630      	adds	r6, #48	; 0x30
 80089b6:	701e      	strb	r6, [r3, #0]
 80089b8:	9004      	str	r0, [sp, #16]
 80089ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80089bc:	e6fd      	b.n	80087ba <_svfiprintf_r+0x5c2>
 80089be:	9c08      	ldr	r4, [sp, #32]
 80089c0:	6823      	ldr	r3, [r4, #0]
 80089c2:	9c06      	ldr	r4, [sp, #24]
 80089c4:	601c      	str	r4, [r3, #0]
 80089c6:	9c08      	ldr	r4, [sp, #32]
 80089c8:	3404      	adds	r4, #4
 80089ca:	9408      	str	r4, [sp, #32]
 80089cc:	e438      	b.n	8008240 <_svfiprintf_r+0x48>
 80089ce:	9c08      	ldr	r4, [sp, #32]
 80089d0:	8826      	ldrh	r6, [r4, #0]
 80089d2:	e59d      	b.n	8008510 <_svfiprintf_r+0x318>
 80089d4:	2100      	movs	r1, #0
 80089d6:	2302      	movs	r3, #2
 80089d8:	e5b4      	b.n	8008544 <_svfiprintf_r+0x34c>
 80089da:	9c08      	ldr	r4, [sp, #32]
 80089dc:	8826      	ldrh	r6, [r4, #0]
 80089de:	e5ab      	b.n	8008538 <_svfiprintf_r+0x340>
 80089e0:	9c08      	ldr	r4, [sp, #32]
 80089e2:	8826      	ldrh	r6, [r4, #0]
 80089e4:	3404      	adds	r4, #4
 80089e6:	9408      	str	r4, [sp, #32]
 80089e8:	e631      	b.n	800864e <_svfiprintf_r+0x456>
 80089ea:	9c08      	ldr	r4, [sp, #32]
 80089ec:	2600      	movs	r6, #0
 80089ee:	5fa6      	ldrsh	r6, [r4, r6]
 80089f0:	9c08      	ldr	r4, [sp, #32]
 80089f2:	3404      	adds	r4, #4
 80089f4:	9408      	str	r4, [sp, #32]
 80089f6:	2e00      	cmp	r6, #0
 80089f8:	db00      	blt.n	80089fc <_svfiprintf_r+0x804>
 80089fa:	e600      	b.n	80085fe <_svfiprintf_r+0x406>
 80089fc:	213f      	movs	r1, #63	; 0x3f
 80089fe:	232d      	movs	r3, #45	; 0x2d
 8008a00:	4469      	add	r1, sp
 8008a02:	4276      	negs	r6, r6
 8008a04:	700b      	strb	r3, [r1, #0]
 8008a06:	1c31      	adds	r1, r6, #0
 8008a08:	1e4b      	subs	r3, r1, #1
 8008a0a:	4199      	sbcs	r1, r3
 8008a0c:	242d      	movs	r4, #45	; 0x2d
 8008a0e:	2301      	movs	r3, #1
 8008a10:	e59d      	b.n	800854e <_svfiprintf_r+0x356>
 8008a12:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008a14:	f7f7 fb9e 	bl	8000154 <strlen>
 8008a18:	223f      	movs	r2, #63	; 0x3f
 8008a1a:	446a      	add	r2, sp
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	9004      	str	r0, [sp, #16]
 8008a20:	7814      	ldrb	r4, [r2, #0]
 8008a22:	9608      	str	r6, [sp, #32]
 8008a24:	9309      	str	r3, [sp, #36]	; 0x24
 8008a26:	e6ca      	b.n	80087be <_svfiprintf_r+0x5c6>
 8008a28:	46ab      	mov	fp, r5
 8008a2a:	e726      	b.n	800887a <_svfiprintf_r+0x682>
 8008a2c:	9805      	ldr	r0, [sp, #20]
 8008a2e:	4659      	mov	r1, fp
 8008a30:	aa11      	add	r2, sp, #68	; 0x44
 8008a32:	f7ff fb49 	bl	80080c8 <__ssprint_r>
 8008a36:	2800      	cmp	r0, #0
 8008a38:	d000      	beq.n	8008a3c <_svfiprintf_r+0x844>
 8008a3a:	e71e      	b.n	800887a <_svfiprintf_r+0x682>
 8008a3c:	4647      	mov	r7, r8
 8008a3e:	e4b7      	b.n	80083b0 <_svfiprintf_r+0x1b8>
 8008a40:	203f      	movs	r0, #63	; 0x3f
 8008a42:	4468      	add	r0, sp
 8008a44:	464a      	mov	r2, r9
 8008a46:	2300      	movs	r3, #0
 8008a48:	7804      	ldrb	r4, [r0, #0]
 8008a4a:	9608      	str	r6, [sp, #32]
 8008a4c:	9204      	str	r2, [sp, #16]
 8008a4e:	9309      	str	r3, [sp, #36]	; 0x24
 8008a50:	e6b5      	b.n	80087be <_svfiprintf_r+0x5c6>
 8008a52:	9805      	ldr	r0, [sp, #20]
 8008a54:	2140      	movs	r1, #64	; 0x40
 8008a56:	f7fe f94f 	bl	8006cf8 <_malloc_r>
 8008a5a:	465a      	mov	r2, fp
 8008a5c:	6010      	str	r0, [r2, #0]
 8008a5e:	6110      	str	r0, [r2, #16]
 8008a60:	2800      	cmp	r0, #0
 8008a62:	d028      	beq.n	8008ab6 <_svfiprintf_r+0x8be>
 8008a64:	2340      	movs	r3, #64	; 0x40
 8008a66:	6153      	str	r3, [r2, #20]
 8008a68:	f7ff fbd9 	bl	800821e <_svfiprintf_r+0x26>
 8008a6c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008a6e:	4643      	mov	r3, r8
 8008a70:	1a1b      	subs	r3, r3, r0
 8008a72:	9304      	str	r3, [sp, #16]
 8008a74:	e6a1      	b.n	80087ba <_svfiprintf_r+0x5c2>
 8008a76:	464c      	mov	r4, r9
 8008a78:	9404      	str	r4, [sp, #16]
 8008a7a:	2c06      	cmp	r4, #6
 8008a7c:	d906      	bls.n	8008a8c <_svfiprintf_r+0x894>
 8008a7e:	2406      	movs	r4, #6
 8008a80:	9404      	str	r4, [sp, #16]
 8008a82:	9403      	str	r4, [sp, #12]
 8008a84:	4c0f      	ldr	r4, [pc, #60]	; (8008ac4 <_svfiprintf_r+0x8cc>)
 8008a86:	9608      	str	r6, [sp, #32]
 8008a88:	940b      	str	r4, [sp, #44]	; 0x2c
 8008a8a:	e422      	b.n	80082d2 <_svfiprintf_r+0xda>
 8008a8c:	9c04      	ldr	r4, [sp, #16]
 8008a8e:	43e3      	mvns	r3, r4
 8008a90:	17db      	asrs	r3, r3, #31
 8008a92:	401c      	ands	r4, r3
 8008a94:	9403      	str	r4, [sp, #12]
 8008a96:	e7f5      	b.n	8008a84 <_svfiprintf_r+0x88c>
 8008a98:	9c08      	ldr	r4, [sp, #32]
 8008a9a:	9b08      	ldr	r3, [sp, #32]
 8008a9c:	6822      	ldr	r2, [r4, #0]
 8008a9e:	3304      	adds	r3, #4
 8008aa0:	4691      	mov	r9, r2
 8008aa2:	9308      	str	r3, [sp, #32]
 8008aa4:	2a00      	cmp	r2, #0
 8008aa6:	db01      	blt.n	8008aac <_svfiprintf_r+0x8b4>
 8008aa8:	f7ff fbfe 	bl	80082a8 <_svfiprintf_r+0xb0>
 8008aac:	2401      	movs	r4, #1
 8008aae:	4264      	negs	r4, r4
 8008ab0:	46a1      	mov	r9, r4
 8008ab2:	f7ff fbf9 	bl	80082a8 <_svfiprintf_r+0xb0>
 8008ab6:	9c05      	ldr	r4, [sp, #20]
 8008ab8:	230c      	movs	r3, #12
 8008aba:	6023      	str	r3, [r4, #0]
 8008abc:	2301      	movs	r3, #1
 8008abe:	425b      	negs	r3, r3
 8008ac0:	9306      	str	r3, [sp, #24]
 8008ac2:	e6e1      	b.n	8008888 <_svfiprintf_r+0x690>
 8008ac4:	0800ee64 	.word	0x0800ee64

08008ac8 <_calloc_r>:
 8008ac8:	b510      	push	{r4, lr}
 8008aca:	4351      	muls	r1, r2
 8008acc:	f7fe f914 	bl	8006cf8 <_malloc_r>
 8008ad0:	1e04      	subs	r4, r0, #0
 8008ad2:	d00e      	beq.n	8008af2 <_calloc_r+0x2a>
 8008ad4:	1c23      	adds	r3, r4, #0
 8008ad6:	3b08      	subs	r3, #8
 8008ad8:	685a      	ldr	r2, [r3, #4]
 8008ada:	2303      	movs	r3, #3
 8008adc:	439a      	bics	r2, r3
 8008ade:	3a04      	subs	r2, #4
 8008ae0:	2a24      	cmp	r2, #36	; 0x24
 8008ae2:	d816      	bhi.n	8008b12 <_calloc_r+0x4a>
 8008ae4:	1c23      	adds	r3, r4, #0
 8008ae6:	2a13      	cmp	r2, #19
 8008ae8:	d807      	bhi.n	8008afa <_calloc_r+0x32>
 8008aea:	2200      	movs	r2, #0
 8008aec:	601a      	str	r2, [r3, #0]
 8008aee:	605a      	str	r2, [r3, #4]
 8008af0:	609a      	str	r2, [r3, #8]
 8008af2:	1c20      	adds	r0, r4, #0
 8008af4:	bc10      	pop	{r4}
 8008af6:	bc02      	pop	{r1}
 8008af8:	4708      	bx	r1
 8008afa:	2300      	movs	r3, #0
 8008afc:	6023      	str	r3, [r4, #0]
 8008afe:	6063      	str	r3, [r4, #4]
 8008b00:	2a1b      	cmp	r2, #27
 8008b02:	d90b      	bls.n	8008b1c <_calloc_r+0x54>
 8008b04:	60a3      	str	r3, [r4, #8]
 8008b06:	60e3      	str	r3, [r4, #12]
 8008b08:	2a24      	cmp	r2, #36	; 0x24
 8008b0a:	d00a      	beq.n	8008b22 <_calloc_r+0x5a>
 8008b0c:	1c23      	adds	r3, r4, #0
 8008b0e:	3310      	adds	r3, #16
 8008b10:	e7eb      	b.n	8008aea <_calloc_r+0x22>
 8008b12:	1c20      	adds	r0, r4, #0
 8008b14:	2100      	movs	r1, #0
 8008b16:	f7f8 fbdb 	bl	80012d0 <memset>
 8008b1a:	e7ea      	b.n	8008af2 <_calloc_r+0x2a>
 8008b1c:	1c23      	adds	r3, r4, #0
 8008b1e:	3308      	adds	r3, #8
 8008b20:	e7e3      	b.n	8008aea <_calloc_r+0x22>
 8008b22:	6123      	str	r3, [r4, #16]
 8008b24:	6163      	str	r3, [r4, #20]
 8008b26:	1c23      	adds	r3, r4, #0
 8008b28:	3318      	adds	r3, #24
 8008b2a:	e7de      	b.n	8008aea <_calloc_r+0x22>

08008b2c <_fclose_r>:
 8008b2c:	b570      	push	{r4, r5, r6, lr}
 8008b2e:	1c05      	adds	r5, r0, #0
 8008b30:	1e0c      	subs	r4, r1, #0
 8008b32:	d008      	beq.n	8008b46 <_fclose_r+0x1a>
 8008b34:	2800      	cmp	r0, #0
 8008b36:	d002      	beq.n	8008b3e <_fclose_r+0x12>
 8008b38:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8008b3a:	2a00      	cmp	r2, #0
 8008b3c:	d034      	beq.n	8008ba8 <_fclose_r+0x7c>
 8008b3e:	220c      	movs	r2, #12
 8008b40:	5ea3      	ldrsh	r3, [r4, r2]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d104      	bne.n	8008b50 <_fclose_r+0x24>
 8008b46:	2600      	movs	r6, #0
 8008b48:	1c30      	adds	r0, r6, #0
 8008b4a:	bc70      	pop	{r4, r5, r6}
 8008b4c:	bc02      	pop	{r1}
 8008b4e:	4708      	bx	r1
 8008b50:	1c28      	adds	r0, r5, #0
 8008b52:	1c21      	adds	r1, r4, #0
 8008b54:	f7fd fa1a 	bl	8005f8c <_fflush_r>
 8008b58:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008b5a:	1c06      	adds	r6, r0, #0
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d005      	beq.n	8008b6c <_fclose_r+0x40>
 8008b60:	1c28      	adds	r0, r5, #0
 8008b62:	69e1      	ldr	r1, [r4, #28]
 8008b64:	f000 f838 	bl	8008bd8 <fclose+0x18>
 8008b68:	2800      	cmp	r0, #0
 8008b6a:	db20      	blt.n	8008bae <_fclose_r+0x82>
 8008b6c:	89a3      	ldrh	r3, [r4, #12]
 8008b6e:	061a      	lsls	r2, r3, #24
 8008b70:	d420      	bmi.n	8008bb4 <_fclose_r+0x88>
 8008b72:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8008b74:	2900      	cmp	r1, #0
 8008b76:	d008      	beq.n	8008b8a <_fclose_r+0x5e>
 8008b78:	1c23      	adds	r3, r4, #0
 8008b7a:	3340      	adds	r3, #64	; 0x40
 8008b7c:	4299      	cmp	r1, r3
 8008b7e:	d002      	beq.n	8008b86 <_fclose_r+0x5a>
 8008b80:	1c28      	adds	r0, r5, #0
 8008b82:	f7fd fb71 	bl	8006268 <_free_r>
 8008b86:	2300      	movs	r3, #0
 8008b88:	6323      	str	r3, [r4, #48]	; 0x30
 8008b8a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8008b8c:	2900      	cmp	r1, #0
 8008b8e:	d004      	beq.n	8008b9a <_fclose_r+0x6e>
 8008b90:	1c28      	adds	r0, r5, #0
 8008b92:	f7fd fb69 	bl	8006268 <_free_r>
 8008b96:	2300      	movs	r3, #0
 8008b98:	6463      	str	r3, [r4, #68]	; 0x44
 8008b9a:	f7fd faef 	bl	800617c <__sfp_lock_acquire>
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	81a3      	strh	r3, [r4, #12]
 8008ba2:	f7fd faed 	bl	8006180 <__sfp_lock_release>
 8008ba6:	e7cf      	b.n	8008b48 <_fclose_r+0x1c>
 8008ba8:	f7fd fa76 	bl	8006098 <__sinit>
 8008bac:	e7c7      	b.n	8008b3e <_fclose_r+0x12>
 8008bae:	2601      	movs	r6, #1
 8008bb0:	4276      	negs	r6, r6
 8008bb2:	e7db      	b.n	8008b6c <_fclose_r+0x40>
 8008bb4:	1c28      	adds	r0, r5, #0
 8008bb6:	6921      	ldr	r1, [r4, #16]
 8008bb8:	f7fd fb56 	bl	8006268 <_free_r>
 8008bbc:	e7d9      	b.n	8008b72 <_fclose_r+0x46>
 8008bbe:	46c0      	nop			; (mov r8, r8)

08008bc0 <fclose>:
 8008bc0:	b508      	push	{r3, lr}
 8008bc2:	4b04      	ldr	r3, [pc, #16]	; (8008bd4 <fclose+0x14>)
 8008bc4:	1c01      	adds	r1, r0, #0
 8008bc6:	6818      	ldr	r0, [r3, #0]
 8008bc8:	f7ff ffb0 	bl	8008b2c <_fclose_r>
 8008bcc:	bc08      	pop	{r3}
 8008bce:	bc02      	pop	{r1}
 8008bd0:	4708      	bx	r1
 8008bd2:	46c0      	nop			; (mov r8, r8)
 8008bd4:	20000100 	.word	0x20000100
 8008bd8:	4718      	bx	r3
 8008bda:	46c0      	nop			; (mov r8, r8)

08008bdc <memmove>:
 8008bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008bde:	4288      	cmp	r0, r1
 8008be0:	d910      	bls.n	8008c04 <memmove+0x28>
 8008be2:	188d      	adds	r5, r1, r2
 8008be4:	42a8      	cmp	r0, r5
 8008be6:	d20d      	bcs.n	8008c04 <memmove+0x28>
 8008be8:	1886      	adds	r6, r0, r2
 8008bea:	1e53      	subs	r3, r2, #1
 8008bec:	4251      	negs	r1, r2
 8008bee:	2a00      	cmp	r2, #0
 8008bf0:	d005      	beq.n	8008bfe <memmove+0x22>
 8008bf2:	186a      	adds	r2, r5, r1
 8008bf4:	5cd4      	ldrb	r4, [r2, r3]
 8008bf6:	1872      	adds	r2, r6, r1
 8008bf8:	54d4      	strb	r4, [r2, r3]
 8008bfa:	3b01      	subs	r3, #1
 8008bfc:	d2f9      	bcs.n	8008bf2 <memmove+0x16>
 8008bfe:	bcf0      	pop	{r4, r5, r6, r7}
 8008c00:	bc02      	pop	{r1}
 8008c02:	4708      	bx	r1
 8008c04:	2a0f      	cmp	r2, #15
 8008c06:	d80b      	bhi.n	8008c20 <memmove+0x44>
 8008c08:	1c0c      	adds	r4, r1, #0
 8008c0a:	1c03      	adds	r3, r0, #0
 8008c0c:	2a00      	cmp	r2, #0
 8008c0e:	d0f6      	beq.n	8008bfe <memmove+0x22>
 8008c10:	189a      	adds	r2, r3, r2
 8008c12:	7821      	ldrb	r1, [r4, #0]
 8008c14:	7019      	strb	r1, [r3, #0]
 8008c16:	3301      	adds	r3, #1
 8008c18:	3401      	adds	r4, #1
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	d1f9      	bne.n	8008c12 <memmove+0x36>
 8008c1e:	e7ee      	b.n	8008bfe <memmove+0x22>
 8008c20:	1c0b      	adds	r3, r1, #0
 8008c22:	4303      	orrs	r3, r0
 8008c24:	079c      	lsls	r4, r3, #30
 8008c26:	d12b      	bne.n	8008c80 <memmove+0xa4>
 8008c28:	1c13      	adds	r3, r2, #0
 8008c2a:	3b10      	subs	r3, #16
 8008c2c:	091b      	lsrs	r3, r3, #4
 8008c2e:	3301      	adds	r3, #1
 8008c30:	011b      	lsls	r3, r3, #4
 8008c32:	18cc      	adds	r4, r1, r3
 8008c34:	1c05      	adds	r5, r0, #0
 8008c36:	680e      	ldr	r6, [r1, #0]
 8008c38:	602e      	str	r6, [r5, #0]
 8008c3a:	684e      	ldr	r6, [r1, #4]
 8008c3c:	606e      	str	r6, [r5, #4]
 8008c3e:	688e      	ldr	r6, [r1, #8]
 8008c40:	60ae      	str	r6, [r5, #8]
 8008c42:	68ce      	ldr	r6, [r1, #12]
 8008c44:	3110      	adds	r1, #16
 8008c46:	60ee      	str	r6, [r5, #12]
 8008c48:	3510      	adds	r5, #16
 8008c4a:	428c      	cmp	r4, r1
 8008c4c:	d1f3      	bne.n	8008c36 <memmove+0x5a>
 8008c4e:	250f      	movs	r5, #15
 8008c50:	18c3      	adds	r3, r0, r3
 8008c52:	4015      	ands	r5, r2
 8008c54:	2d03      	cmp	r5, #3
 8008c56:	d916      	bls.n	8008c86 <memmove+0xaa>
 8008c58:	3d04      	subs	r5, #4
 8008c5a:	08ad      	lsrs	r5, r5, #2
 8008c5c:	00af      	lsls	r7, r5, #2
 8008c5e:	3704      	adds	r7, #4
 8008c60:	46ac      	mov	ip, r5
 8008c62:	1c21      	adds	r1, r4, #0
 8008c64:	19e7      	adds	r7, r4, r7
 8008c66:	1c1d      	adds	r5, r3, #0
 8008c68:	c940      	ldmia	r1!, {r6}
 8008c6a:	c540      	stmia	r5!, {r6}
 8008c6c:	42b9      	cmp	r1, r7
 8008c6e:	d1fb      	bne.n	8008c68 <memmove+0x8c>
 8008c70:	4661      	mov	r1, ip
 8008c72:	3101      	adds	r1, #1
 8008c74:	0089      	lsls	r1, r1, #2
 8008c76:	2503      	movs	r5, #3
 8008c78:	402a      	ands	r2, r5
 8008c7a:	1864      	adds	r4, r4, r1
 8008c7c:	185b      	adds	r3, r3, r1
 8008c7e:	e7c5      	b.n	8008c0c <memmove+0x30>
 8008c80:	1c03      	adds	r3, r0, #0
 8008c82:	1c0c      	adds	r4, r1, #0
 8008c84:	e7c4      	b.n	8008c10 <memmove+0x34>
 8008c86:	1c2a      	adds	r2, r5, #0
 8008c88:	e7c0      	b.n	8008c0c <memmove+0x30>
 8008c8a:	46c0      	nop			; (mov r8, r8)

08008c8c <__aeabi_uidiv>:
 8008c8c:	e2512001 	subs	r2, r1, #1
 8008c90:	012fff1e 	bxeq	lr
 8008c94:	3a000036 	bcc	8008d74 <__aeabi_uidiv+0xe8>
 8008c98:	e1500001 	cmp	r0, r1
 8008c9c:	9a000022 	bls	8008d2c <__aeabi_uidiv+0xa0>
 8008ca0:	e1110002 	tst	r1, r2
 8008ca4:	0a000023 	beq	8008d38 <__aeabi_uidiv+0xac>
 8008ca8:	e311020e 	tst	r1, #-536870912	; 0xe0000000
 8008cac:	01a01181 	lsleq	r1, r1, #3
 8008cb0:	03a03008 	moveq	r3, #8
 8008cb4:	13a03001 	movne	r3, #1
 8008cb8:	e3510201 	cmp	r1, #268435456	; 0x10000000
 8008cbc:	31510000 	cmpcc	r1, r0
 8008cc0:	31a01201 	lslcc	r1, r1, #4
 8008cc4:	31a03203 	lslcc	r3, r3, #4
 8008cc8:	3afffffa 	bcc	8008cb8 <__aeabi_uidiv+0x2c>
 8008ccc:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
 8008cd0:	31510000 	cmpcc	r1, r0
 8008cd4:	31a01081 	lslcc	r1, r1, #1
 8008cd8:	31a03083 	lslcc	r3, r3, #1
 8008cdc:	3afffffa 	bcc	8008ccc <__aeabi_uidiv+0x40>
 8008ce0:	e3a02000 	mov	r2, #0
 8008ce4:	e1500001 	cmp	r0, r1
 8008ce8:	20400001 	subcs	r0, r0, r1
 8008cec:	21822003 	orrcs	r2, r2, r3
 8008cf0:	e15000a1 	cmp	r0, r1, lsr #1
 8008cf4:	204000a1 	subcs	r0, r0, r1, lsr #1
 8008cf8:	218220a3 	orrcs	r2, r2, r3, lsr #1
 8008cfc:	e1500121 	cmp	r0, r1, lsr #2
 8008d00:	20400121 	subcs	r0, r0, r1, lsr #2
 8008d04:	21822123 	orrcs	r2, r2, r3, lsr #2
 8008d08:	e15001a1 	cmp	r0, r1, lsr #3
 8008d0c:	204001a1 	subcs	r0, r0, r1, lsr #3
 8008d10:	218221a3 	orrcs	r2, r2, r3, lsr #3
 8008d14:	e3500000 	cmp	r0, #0
 8008d18:	11b03223 	lsrsne	r3, r3, #4
 8008d1c:	11a01221 	lsrne	r1, r1, #4
 8008d20:	1affffef 	bne	8008ce4 <__aeabi_uidiv+0x58>
 8008d24:	e1a00002 	mov	r0, r2
 8008d28:	e12fff1e 	bx	lr
 8008d2c:	03a00001 	moveq	r0, #1
 8008d30:	13a00000 	movne	r0, #0
 8008d34:	e12fff1e 	bx	lr
 8008d38:	e3510801 	cmp	r1, #65536	; 0x10000
 8008d3c:	21a01821 	lsrcs	r1, r1, #16
 8008d40:	23a02010 	movcs	r2, #16
 8008d44:	33a02000 	movcc	r2, #0
 8008d48:	e3510c01 	cmp	r1, #256	; 0x100
 8008d4c:	21a01421 	lsrcs	r1, r1, #8
 8008d50:	22822008 	addcs	r2, r2, #8
 8008d54:	e3510010 	cmp	r1, #16
 8008d58:	21a01221 	lsrcs	r1, r1, #4
 8008d5c:	22822004 	addcs	r2, r2, #4
 8008d60:	e3510004 	cmp	r1, #4
 8008d64:	82822003 	addhi	r2, r2, #3
 8008d68:	908220a1 	addls	r2, r2, r1, lsr #1
 8008d6c:	e1a00230 	lsr	r0, r0, r2
 8008d70:	e12fff1e 	bx	lr
 8008d74:	e12fff1f 	bx	pc
 8008d78:	e1a00000 	nop			; (mov r0, r0)
 8008d7c:	e3500000 	cmp	r0, #0
 8008d80:	13e00000 	mvnne	r0, #0
 8008d84:	ea0013c3 	b	800dc98 <____aeabi_idiv0_from_arm>

08008d88 <__aeabi_uidivmod>:
 8008d88:	e3510000 	cmp	r1, #0
 8008d8c:	0afffff8 	beq	8008d74 <__aeabi_uidiv+0xe8>
 8008d90:	e92d4003 	push	{r0, r1, lr}
 8008d94:	ebffffbc 	bl	8008c8c <__aeabi_uidiv>
 8008d98:	e8bd4006 	pop	{r1, r2, lr}
 8008d9c:	e0030092 	mul	r3, r2, r0
 8008da0:	e0411003 	sub	r1, r1, r3
 8008da4:	e12fff1e 	bx	lr

08008da8 <__aeabi_idiv>:
 8008da8:	e3510000 	cmp	r1, #0
 8008dac:	0a000043 	beq	8008ec0 <.divsi3_skip_div0_test+0x110>

08008db0 <.divsi3_skip_div0_test>:
 8008db0:	e020c001 	eor	ip, r0, r1
 8008db4:	42611000 	rsbmi	r1, r1, #0
 8008db8:	e2512001 	subs	r2, r1, #1
 8008dbc:	0a000027 	beq	8008e60 <.divsi3_skip_div0_test+0xb0>
 8008dc0:	e1b03000 	movs	r3, r0
 8008dc4:	42603000 	rsbmi	r3, r0, #0
 8008dc8:	e1530001 	cmp	r3, r1
 8008dcc:	9a000026 	bls	8008e6c <.divsi3_skip_div0_test+0xbc>
 8008dd0:	e1110002 	tst	r1, r2
 8008dd4:	0a000028 	beq	8008e7c <.divsi3_skip_div0_test+0xcc>
 8008dd8:	e311020e 	tst	r1, #-536870912	; 0xe0000000
 8008ddc:	01a01181 	lsleq	r1, r1, #3
 8008de0:	03a02008 	moveq	r2, #8
 8008de4:	13a02001 	movne	r2, #1
 8008de8:	e3510201 	cmp	r1, #268435456	; 0x10000000
 8008dec:	31510003 	cmpcc	r1, r3
 8008df0:	31a01201 	lslcc	r1, r1, #4
 8008df4:	31a02202 	lslcc	r2, r2, #4
 8008df8:	3afffffa 	bcc	8008de8 <.divsi3_skip_div0_test+0x38>
 8008dfc:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
 8008e00:	31510003 	cmpcc	r1, r3
 8008e04:	31a01081 	lslcc	r1, r1, #1
 8008e08:	31a02082 	lslcc	r2, r2, #1
 8008e0c:	3afffffa 	bcc	8008dfc <.divsi3_skip_div0_test+0x4c>
 8008e10:	e3a00000 	mov	r0, #0
 8008e14:	e1530001 	cmp	r3, r1
 8008e18:	20433001 	subcs	r3, r3, r1
 8008e1c:	21800002 	orrcs	r0, r0, r2
 8008e20:	e15300a1 	cmp	r3, r1, lsr #1
 8008e24:	204330a1 	subcs	r3, r3, r1, lsr #1
 8008e28:	218000a2 	orrcs	r0, r0, r2, lsr #1
 8008e2c:	e1530121 	cmp	r3, r1, lsr #2
 8008e30:	20433121 	subcs	r3, r3, r1, lsr #2
 8008e34:	21800122 	orrcs	r0, r0, r2, lsr #2
 8008e38:	e15301a1 	cmp	r3, r1, lsr #3
 8008e3c:	204331a1 	subcs	r3, r3, r1, lsr #3
 8008e40:	218001a2 	orrcs	r0, r0, r2, lsr #3
 8008e44:	e3530000 	cmp	r3, #0
 8008e48:	11b02222 	lsrsne	r2, r2, #4
 8008e4c:	11a01221 	lsrne	r1, r1, #4
 8008e50:	1affffef 	bne	8008e14 <.divsi3_skip_div0_test+0x64>
 8008e54:	e35c0000 	cmp	ip, #0
 8008e58:	42600000 	rsbmi	r0, r0, #0
 8008e5c:	e12fff1e 	bx	lr
 8008e60:	e13c0000 	teq	ip, r0
 8008e64:	42600000 	rsbmi	r0, r0, #0
 8008e68:	e12fff1e 	bx	lr
 8008e6c:	33a00000 	movcc	r0, #0
 8008e70:	01a00fcc 	asreq	r0, ip, #31
 8008e74:	03800001 	orreq	r0, r0, #1
 8008e78:	e12fff1e 	bx	lr
 8008e7c:	e3510801 	cmp	r1, #65536	; 0x10000
 8008e80:	21a01821 	lsrcs	r1, r1, #16
 8008e84:	23a02010 	movcs	r2, #16
 8008e88:	33a02000 	movcc	r2, #0
 8008e8c:	e3510c01 	cmp	r1, #256	; 0x100
 8008e90:	21a01421 	lsrcs	r1, r1, #8
 8008e94:	22822008 	addcs	r2, r2, #8
 8008e98:	e3510010 	cmp	r1, #16
 8008e9c:	21a01221 	lsrcs	r1, r1, #4
 8008ea0:	22822004 	addcs	r2, r2, #4
 8008ea4:	e3510004 	cmp	r1, #4
 8008ea8:	82822003 	addhi	r2, r2, #3
 8008eac:	908220a1 	addls	r2, r2, r1, lsr #1
 8008eb0:	e35c0000 	cmp	ip, #0
 8008eb4:	e1a00233 	lsr	r0, r3, r2
 8008eb8:	42600000 	rsbmi	r0, r0, #0
 8008ebc:	e12fff1e 	bx	lr
 8008ec0:	e12fff1f 	bx	pc
 8008ec4:	e1a00000 	nop			; (mov r0, r0)
 8008ec8:	e3500000 	cmp	r0, #0
 8008ecc:	c3e00102 	mvngt	r0, #-2147483648	; 0x80000000
 8008ed0:	b3a00102 	movlt	r0, #-2147483648	; 0x80000000
 8008ed4:	ea00136f 	b	800dc98 <____aeabi_idiv0_from_arm>

08008ed8 <__aeabi_idivmod>:
 8008ed8:	e3510000 	cmp	r1, #0
 8008edc:	0afffff7 	beq	8008ec0 <.divsi3_skip_div0_test+0x110>
 8008ee0:	e92d4003 	push	{r0, r1, lr}
 8008ee4:	ebffffb1 	bl	8008db0 <.divsi3_skip_div0_test>
 8008ee8:	e8bd4006 	pop	{r1, r2, lr}
 8008eec:	e0030092 	mul	r3, r2, r0
 8008ef0:	e0411003 	sub	r1, r1, r3
 8008ef4:	e12fff1e 	bx	lr

08008ef8 <__aeabi_idiv0>:
 8008ef8:	4770      	bx	lr
 8008efa:	46c0      	nop			; (mov r8, r8)

08008efc <__aeabi_drsub>:
 8008efc:	e2211102 	eor	r1, r1, #-2147483648	; 0x80000000
 8008f00:	ea000000 	b	8008f08 <__adddf3>

08008f04 <__aeabi_dsub>:
 8008f04:	e2233102 	eor	r3, r3, #-2147483648	; 0x80000000

08008f08 <__adddf3>:
 8008f08:	e92d4030 	push	{r4, r5, lr}
 8008f0c:	e1a04081 	lsl	r4, r1, #1
 8008f10:	e1a05083 	lsl	r5, r3, #1
 8008f14:	e1340005 	teq	r4, r5
 8008f18:	01300002 	teqeq	r0, r2
 8008f1c:	1194c000 	orrsne	ip, r4, r0
 8008f20:	1195c002 	orrsne	ip, r5, r2
 8008f24:	11f0cac4 	mvnsne	ip, r4, asr #21
 8008f28:	11f0cac5 	mvnsne	ip, r5, asr #21
 8008f2c:	0a00008c 	beq	8009164 <__adddf3+0x25c>
 8008f30:	e1a04aa4 	lsr	r4, r4, #21
 8008f34:	e0745aa5 	rsbs	r5, r4, r5, lsr #21
 8008f38:	b2655000 	rsblt	r5, r5, #0
 8008f3c:	da000006 	ble	8008f5c <__adddf3+0x54>
 8008f40:	e0844005 	add	r4, r4, r5
 8008f44:	e0202002 	eor	r2, r0, r2
 8008f48:	e0213003 	eor	r3, r1, r3
 8008f4c:	e0220000 	eor	r0, r2, r0
 8008f50:	e0231001 	eor	r1, r3, r1
 8008f54:	e0202002 	eor	r2, r0, r2
 8008f58:	e0213003 	eor	r3, r1, r3
 8008f5c:	e3550036 	cmp	r5, #54	; 0x36
 8008f60:	88bd4030 	pophi	{r4, r5, lr}
 8008f64:	812fff1e 	bxhi	lr
 8008f68:	e3110102 	tst	r1, #-2147483648	; 0x80000000
 8008f6c:	e1a01601 	lsl	r1, r1, #12
 8008f70:	e3a0c601 	mov	ip, #1048576	; 0x100000
 8008f74:	e18c1621 	orr	r1, ip, r1, lsr #12
 8008f78:	0a000001 	beq	8008f84 <__adddf3+0x7c>
 8008f7c:	e2700000 	rsbs	r0, r0, #0
 8008f80:	e2e11000 	rsc	r1, r1, #0
 8008f84:	e3130102 	tst	r3, #-2147483648	; 0x80000000
 8008f88:	e1a03603 	lsl	r3, r3, #12
 8008f8c:	e18c3623 	orr	r3, ip, r3, lsr #12
 8008f90:	0a000001 	beq	8008f9c <__adddf3+0x94>
 8008f94:	e2722000 	rsbs	r2, r2, #0
 8008f98:	e2e33000 	rsc	r3, r3, #0
 8008f9c:	e1340005 	teq	r4, r5
 8008fa0:	0a000069 	beq	800914c <__adddf3+0x244>
 8008fa4:	e2444001 	sub	r4, r4, #1
 8008fa8:	e275e020 	rsbs	lr, r5, #32
 8008fac:	ba000005 	blt	8008fc8 <__adddf3+0xc0>
 8008fb0:	e1a0ce12 	lsl	ip, r2, lr
 8008fb4:	e0900532 	adds	r0, r0, r2, lsr r5
 8008fb8:	e2a11000 	adc	r1, r1, #0
 8008fbc:	e0900e13 	adds	r0, r0, r3, lsl lr
 8008fc0:	e0b11553 	adcs	r1, r1, r3, asr r5
 8008fc4:	ea000006 	b	8008fe4 <__adddf3+0xdc>
 8008fc8:	e2455020 	sub	r5, r5, #32
 8008fcc:	e28ee020 	add	lr, lr, #32
 8008fd0:	e3520001 	cmp	r2, #1
 8008fd4:	e1a0ce13 	lsl	ip, r3, lr
 8008fd8:	238cc002 	orrcs	ip, ip, #2
 8008fdc:	e0900553 	adds	r0, r0, r3, asr r5
 8008fe0:	e0b11fc3 	adcs	r1, r1, r3, asr #31
 8008fe4:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
 8008fe8:	5a000002 	bpl	8008ff8 <__adddf3+0xf0>
 8008fec:	e27cc000 	rsbs	ip, ip, #0
 8008ff0:	e2f00000 	rscs	r0, r0, #0
 8008ff4:	e2e11000 	rsc	r1, r1, #0
 8008ff8:	e3510601 	cmp	r1, #1048576	; 0x100000
 8008ffc:	3a00000f 	bcc	8009040 <__adddf3+0x138>
 8009000:	e3510602 	cmp	r1, #2097152	; 0x200000
 8009004:	3a000006 	bcc	8009024 <__adddf3+0x11c>
 8009008:	e1b010a1 	lsrs	r1, r1, #1
 800900c:	e1b00060 	rrxs	r0, r0
 8009010:	e1a0c06c 	rrx	ip, ip
 8009014:	e2844001 	add	r4, r4, #1
 8009018:	e1a02a84 	lsl	r2, r4, #21
 800901c:	e3720501 	cmn	r2, #4194304	; 0x400000
 8009020:	2a00006b 	bcs	80091d4 <__adddf3+0x2cc>
 8009024:	e35c0102 	cmp	ip, #-2147483648	; 0x80000000
 8009028:	01b0c0a0 	lsrseq	ip, r0, #1
 800902c:	e2b00000 	adcs	r0, r0, #0
 8009030:	e0a11a04 	adc	r1, r1, r4, lsl #20
 8009034:	e1811005 	orr	r1, r1, r5
 8009038:	e8bd4030 	pop	{r4, r5, lr}
 800903c:	e12fff1e 	bx	lr
 8009040:	e1b0c08c 	lsls	ip, ip, #1
 8009044:	e0b00000 	adcs	r0, r0, r0
 8009048:	e0a11001 	adc	r1, r1, r1
 800904c:	e3110601 	tst	r1, #1048576	; 0x100000
 8009050:	e2444001 	sub	r4, r4, #1
 8009054:	1afffff2 	bne	8009024 <__adddf3+0x11c>
 8009058:	e3310000 	teq	r1, #0
 800905c:	13a03014 	movne	r3, #20
 8009060:	03a03034 	moveq	r3, #52	; 0x34
 8009064:	01a01000 	moveq	r1, r0
 8009068:	03a00000 	moveq	r0, #0
 800906c:	e1a02001 	mov	r2, r1
 8009070:	e3520801 	cmp	r2, #65536	; 0x10000
 8009074:	21a02822 	lsrcs	r2, r2, #16
 8009078:	22433010 	subcs	r3, r3, #16
 800907c:	e3520c01 	cmp	r2, #256	; 0x100
 8009080:	21a02422 	lsrcs	r2, r2, #8
 8009084:	22433008 	subcs	r3, r3, #8
 8009088:	e3520010 	cmp	r2, #16
 800908c:	21a02222 	lsrcs	r2, r2, #4
 8009090:	22433004 	subcs	r3, r3, #4
 8009094:	e3520004 	cmp	r2, #4
 8009098:	22433002 	subcs	r3, r3, #2
 800909c:	304330a2 	subcc	r3, r3, r2, lsr #1
 80090a0:	e04331a2 	sub	r3, r3, r2, lsr #3
 80090a4:	e2532020 	subs	r2, r3, #32
 80090a8:	aa000007 	bge	80090cc <__adddf3+0x1c4>
 80090ac:	e292200c 	adds	r2, r2, #12
 80090b0:	da000004 	ble	80090c8 <__adddf3+0x1c0>
 80090b4:	e282c014 	add	ip, r2, #20
 80090b8:	e262200c 	rsb	r2, r2, #12
 80090bc:	e1a00c11 	lsl	r0, r1, ip
 80090c0:	e1a01231 	lsr	r1, r1, r2
 80090c4:	ea000004 	b	80090dc <__adddf3+0x1d4>
 80090c8:	e2822014 	add	r2, r2, #20
 80090cc:	d262c020 	rsble	ip, r2, #32
 80090d0:	e1a01211 	lsl	r1, r1, r2
 80090d4:	d1811c30 	orrle	r1, r1, r0, lsr ip
 80090d8:	d1a00210 	lslle	r0, r0, r2
 80090dc:	e0544003 	subs	r4, r4, r3
 80090e0:	a0811a04 	addge	r1, r1, r4, lsl #20
 80090e4:	a1811005 	orrge	r1, r1, r5
 80090e8:	a8bd4030 	popge	{r4, r5, lr}
 80090ec:	a12fff1e 	bxge	lr
 80090f0:	e1e04004 	mvn	r4, r4
 80090f4:	e254401f 	subs	r4, r4, #31
 80090f8:	aa00000f 	bge	800913c <__adddf3+0x234>
 80090fc:	e294400c 	adds	r4, r4, #12
 8009100:	ca000006 	bgt	8009120 <__adddf3+0x218>
 8009104:	e2844014 	add	r4, r4, #20
 8009108:	e2642020 	rsb	r2, r4, #32
 800910c:	e1a00430 	lsr	r0, r0, r4
 8009110:	e1800211 	orr	r0, r0, r1, lsl r2
 8009114:	e1851431 	orr	r1, r5, r1, lsr r4
 8009118:	e8bd4030 	pop	{r4, r5, lr}
 800911c:	e12fff1e 	bx	lr
 8009120:	e264400c 	rsb	r4, r4, #12
 8009124:	e2642020 	rsb	r2, r4, #32
 8009128:	e1a00230 	lsr	r0, r0, r2
 800912c:	e1800411 	orr	r0, r0, r1, lsl r4
 8009130:	e1a01005 	mov	r1, r5
 8009134:	e8bd4030 	pop	{r4, r5, lr}
 8009138:	e12fff1e 	bx	lr
 800913c:	e1a00431 	lsr	r0, r1, r4
 8009140:	e1a01005 	mov	r1, r5
 8009144:	e8bd4030 	pop	{r4, r5, lr}
 8009148:	e12fff1e 	bx	lr
 800914c:	e3340000 	teq	r4, #0
 8009150:	e2233601 	eor	r3, r3, #1048576	; 0x100000
 8009154:	02211601 	eoreq	r1, r1, #1048576	; 0x100000
 8009158:	02844001 	addeq	r4, r4, #1
 800915c:	12455001 	subne	r5, r5, #1
 8009160:	eaffff8f 	b	8008fa4 <__adddf3+0x9c>
 8009164:	e1f0cac4 	mvns	ip, r4, asr #21
 8009168:	11f0cac5 	mvnsne	ip, r5, asr #21
 800916c:	0a00001d 	beq	80091e8 <__adddf3+0x2e0>
 8009170:	e1340005 	teq	r4, r5
 8009174:	01300002 	teqeq	r0, r2
 8009178:	0a000004 	beq	8009190 <__adddf3+0x288>
 800917c:	e194c000 	orrs	ip, r4, r0
 8009180:	01a01003 	moveq	r1, r3
 8009184:	01a00002 	moveq	r0, r2
 8009188:	e8bd4030 	pop	{r4, r5, lr}
 800918c:	e12fff1e 	bx	lr
 8009190:	e1310003 	teq	r1, r3
 8009194:	13a01000 	movne	r1, #0
 8009198:	13a00000 	movne	r0, #0
 800919c:	18bd4030 	popne	{r4, r5, lr}
 80091a0:	112fff1e 	bxne	lr
 80091a4:	e1b0caa4 	lsrs	ip, r4, #21
 80091a8:	1a000004 	bne	80091c0 <__adddf3+0x2b8>
 80091ac:	e1b00080 	lsls	r0, r0, #1
 80091b0:	e0b11001 	adcs	r1, r1, r1
 80091b4:	23811102 	orrcs	r1, r1, #-2147483648	; 0x80000000
 80091b8:	e8bd4030 	pop	{r4, r5, lr}
 80091bc:	e12fff1e 	bx	lr
 80091c0:	e2944501 	adds	r4, r4, #4194304	; 0x400000
 80091c4:	32811601 	addcc	r1, r1, #1048576	; 0x100000
 80091c8:	38bd4030 	popcc	{r4, r5, lr}
 80091cc:	312fff1e 	bxcc	lr
 80091d0:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
 80091d4:	e385147f 	orr	r1, r5, #2130706432	; 0x7f000000
 80091d8:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
 80091dc:	e3a00000 	mov	r0, #0
 80091e0:	e8bd4030 	pop	{r4, r5, lr}
 80091e4:	e12fff1e 	bx	lr
 80091e8:	e1f0cac4 	mvns	ip, r4, asr #21
 80091ec:	11a01003 	movne	r1, r3
 80091f0:	11a00002 	movne	r0, r2
 80091f4:	01f0cac5 	mvnseq	ip, r5, asr #21
 80091f8:	11a03001 	movne	r3, r1
 80091fc:	11a02000 	movne	r2, r0
 8009200:	e1904601 	orrs	r4, r0, r1, lsl #12
 8009204:	01925603 	orrseq	r5, r2, r3, lsl #12
 8009208:	01310003 	teqeq	r1, r3
 800920c:	13811702 	orrne	r1, r1, #524288	; 0x80000
 8009210:	e8bd4030 	pop	{r4, r5, lr}
 8009214:	e12fff1e 	bx	lr

08009218 <__aeabi_ui2d>:
 8009218:	e3300000 	teq	r0, #0
 800921c:	03a01000 	moveq	r1, #0
 8009220:	012fff1e 	bxeq	lr
 8009224:	e92d4030 	push	{r4, r5, lr}
 8009228:	e3a04b01 	mov	r4, #1024	; 0x400
 800922c:	e2844032 	add	r4, r4, #50	; 0x32
 8009230:	e3a05000 	mov	r5, #0
 8009234:	e3a01000 	mov	r1, #0
 8009238:	eaffff86 	b	8009058 <__adddf3+0x150>

0800923c <__aeabi_i2d>:
 800923c:	e3300000 	teq	r0, #0
 8009240:	03a01000 	moveq	r1, #0
 8009244:	012fff1e 	bxeq	lr
 8009248:	e92d4030 	push	{r4, r5, lr}
 800924c:	e3a04b01 	mov	r4, #1024	; 0x400
 8009250:	e2844032 	add	r4, r4, #50	; 0x32
 8009254:	e2105102 	ands	r5, r0, #-2147483648	; 0x80000000
 8009258:	42600000 	rsbmi	r0, r0, #0
 800925c:	e3a01000 	mov	r1, #0
 8009260:	eaffff7c 	b	8009058 <__adddf3+0x150>

08009264 <__aeabi_f2d>:
 8009264:	e1b02080 	lsls	r2, r0, #1
 8009268:	e1a011c2 	asr	r1, r2, #3
 800926c:	e1a01061 	rrx	r1, r1
 8009270:	e1a00e02 	lsl	r0, r2, #28
 8009274:	121234ff 	andsne	r3, r2, #-16777216	; 0xff000000
 8009278:	133304ff 	teqne	r3, #-16777216	; 0xff000000
 800927c:	1221130e 	eorne	r1, r1, #939524096	; 0x38000000
 8009280:	112fff1e 	bxne	lr
 8009284:	e3320000 	teq	r2, #0
 8009288:	133304ff 	teqne	r3, #-16777216	; 0xff000000
 800928c:	012fff1e 	bxeq	lr
 8009290:	e92d4030 	push	{r4, r5, lr}
 8009294:	e3a04d0e 	mov	r4, #896	; 0x380
 8009298:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
 800929c:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
 80092a0:	eaffff6c 	b	8009058 <__adddf3+0x150>

080092a4 <__aeabi_ul2d>:
 80092a4:	e1902001 	orrs	r2, r0, r1
 80092a8:	012fff1e 	bxeq	lr
 80092ac:	e92d4030 	push	{r4, r5, lr}
 80092b0:	e3a05000 	mov	r5, #0
 80092b4:	ea000006 	b	80092d4 <__aeabi_l2d+0x1c>

080092b8 <__aeabi_l2d>:
 80092b8:	e1902001 	orrs	r2, r0, r1
 80092bc:	012fff1e 	bxeq	lr
 80092c0:	e92d4030 	push	{r4, r5, lr}
 80092c4:	e2115102 	ands	r5, r1, #-2147483648	; 0x80000000
 80092c8:	5a000001 	bpl	80092d4 <__aeabi_l2d+0x1c>
 80092cc:	e2700000 	rsbs	r0, r0, #0
 80092d0:	e2e11000 	rsc	r1, r1, #0
 80092d4:	e3a04b01 	mov	r4, #1024	; 0x400
 80092d8:	e2844032 	add	r4, r4, #50	; 0x32
 80092dc:	e1b0cb21 	lsrs	ip, r1, #22
 80092e0:	0affff44 	beq	8008ff8 <__adddf3+0xf0>
 80092e4:	e3a02003 	mov	r2, #3
 80092e8:	e1b0c1ac 	lsrs	ip, ip, #3
 80092ec:	12822003 	addne	r2, r2, #3
 80092f0:	e1b0c1ac 	lsrs	ip, ip, #3
 80092f4:	12822003 	addne	r2, r2, #3
 80092f8:	e08221ac 	add	r2, r2, ip, lsr #3
 80092fc:	e2623020 	rsb	r3, r2, #32
 8009300:	e1a0c310 	lsl	ip, r0, r3
 8009304:	e1a00230 	lsr	r0, r0, r2
 8009308:	e1800311 	orr	r0, r0, r1, lsl r3
 800930c:	e1a01231 	lsr	r1, r1, r2
 8009310:	e0844002 	add	r4, r4, r2
 8009314:	eaffff37 	b	8008ff8 <__adddf3+0xf0>

08009318 <__aeabi_dmul>:
 8009318:	e92d4070 	push	{r4, r5, r6, lr}
 800931c:	e3a0c0ff 	mov	ip, #255	; 0xff
 8009320:	e38ccc07 	orr	ip, ip, #1792	; 0x700
 8009324:	e01c4a21 	ands	r4, ip, r1, lsr #20
 8009328:	101c5a23 	andsne	r5, ip, r3, lsr #20
 800932c:	1134000c 	teqne	r4, ip
 8009330:	1135000c 	teqne	r5, ip
 8009334:	0b000075 	bleq	8009510 <__aeabi_dmul+0x1f8>
 8009338:	e0844005 	add	r4, r4, r5
 800933c:	e0216003 	eor	r6, r1, r3
 8009340:	e1c11a8c 	bic	r1, r1, ip, lsl #21
 8009344:	e1c33a8c 	bic	r3, r3, ip, lsl #21
 8009348:	e1905601 	orrs	r5, r0, r1, lsl #12
 800934c:	11925603 	orrsne	r5, r2, r3, lsl #12
 8009350:	e3811601 	orr	r1, r1, #1048576	; 0x100000
 8009354:	e3833601 	orr	r3, r3, #1048576	; 0x100000
 8009358:	0a00001d 	beq	80093d4 <__aeabi_dmul+0xbc>
 800935c:	e08ec290 	umull	ip, lr, r0, r2
 8009360:	e3a05000 	mov	r5, #0
 8009364:	e0a5e291 	umlal	lr, r5, r1, r2
 8009368:	e2062102 	and	r2, r6, #-2147483648	; 0x80000000
 800936c:	e0a5e390 	umlal	lr, r5, r0, r3
 8009370:	e3a06000 	mov	r6, #0
 8009374:	e0a65391 	umlal	r5, r6, r1, r3
 8009378:	e33c0000 	teq	ip, #0
 800937c:	138ee001 	orrne	lr, lr, #1
 8009380:	e24440ff 	sub	r4, r4, #255	; 0xff
 8009384:	e3560c02 	cmp	r6, #512	; 0x200
 8009388:	e2c44c03 	sbc	r4, r4, #768	; 0x300
 800938c:	2a000002 	bcs	800939c <__aeabi_dmul+0x84>
 8009390:	e1b0e08e 	lsls	lr, lr, #1
 8009394:	e0b55005 	adcs	r5, r5, r5
 8009398:	e0a66006 	adc	r6, r6, r6
 800939c:	e1821586 	orr	r1, r2, r6, lsl #11
 80093a0:	e1811aa5 	orr	r1, r1, r5, lsr #21
 80093a4:	e1a00585 	lsl	r0, r5, #11
 80093a8:	e1800aae 	orr	r0, r0, lr, lsr #21
 80093ac:	e1a0e58e 	lsl	lr, lr, #11
 80093b0:	e254c0fd 	subs	ip, r4, #253	; 0xfd
 80093b4:	835c0c07 	cmphi	ip, #1792	; 0x700
 80093b8:	8a000011 	bhi	8009404 <__aeabi_dmul+0xec>
 80093bc:	e35e0102 	cmp	lr, #-2147483648	; 0x80000000
 80093c0:	01b0e0a0 	lsrseq	lr, r0, #1
 80093c4:	e2b00000 	adcs	r0, r0, #0
 80093c8:	e0a11a04 	adc	r1, r1, r4, lsl #20
 80093cc:	e8bd4070 	pop	{r4, r5, r6, lr}
 80093d0:	e12fff1e 	bx	lr
 80093d4:	e2066102 	and	r6, r6, #-2147483648	; 0x80000000
 80093d8:	e1861001 	orr	r1, r6, r1
 80093dc:	e1800002 	orr	r0, r0, r2
 80093e0:	e0211003 	eor	r1, r1, r3
 80093e4:	e05440ac 	subs	r4, r4, ip, lsr #1
 80093e8:	c074500c 	rsbsgt	r5, r4, ip
 80093ec:	c1811a04 	orrgt	r1, r1, r4, lsl #20
 80093f0:	c8bd4070 	popgt	{r4, r5, r6, lr}
 80093f4:	c12fff1e 	bxgt	lr
 80093f8:	e3811601 	orr	r1, r1, #1048576	; 0x100000
 80093fc:	e3a0e000 	mov	lr, #0
 8009400:	e2544001 	subs	r4, r4, #1
 8009404:	ca00005d 	bgt	8009580 <__aeabi_dmul+0x268>
 8009408:	e3740036 	cmn	r4, #54	; 0x36
 800940c:	d3a00000 	movle	r0, #0
 8009410:	d2011102 	andle	r1, r1, #-2147483648	; 0x80000000
 8009414:	d8bd4070 	pople	{r4, r5, r6, lr}
 8009418:	d12fff1e 	bxle	lr
 800941c:	e2644000 	rsb	r4, r4, #0
 8009420:	e2544020 	subs	r4, r4, #32
 8009424:	aa00001a 	bge	8009494 <__aeabi_dmul+0x17c>
 8009428:	e294400c 	adds	r4, r4, #12
 800942c:	ca00000c 	bgt	8009464 <__aeabi_dmul+0x14c>
 8009430:	e2844014 	add	r4, r4, #20
 8009434:	e2645020 	rsb	r5, r4, #32
 8009438:	e1a03510 	lsl	r3, r0, r5
 800943c:	e1a00430 	lsr	r0, r0, r4
 8009440:	e1800511 	orr	r0, r0, r1, lsl r5
 8009444:	e2012102 	and	r2, r1, #-2147483648	; 0x80000000
 8009448:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
 800944c:	e0900fa3 	adds	r0, r0, r3, lsr #31
 8009450:	e0a21431 	adc	r1, r2, r1, lsr r4
 8009454:	e19ee083 	orrs	lr, lr, r3, lsl #1
 8009458:	01c00fa3 	biceq	r0, r0, r3, lsr #31
 800945c:	e8bd4070 	pop	{r4, r5, r6, lr}
 8009460:	e12fff1e 	bx	lr
 8009464:	e264400c 	rsb	r4, r4, #12
 8009468:	e2645020 	rsb	r5, r4, #32
 800946c:	e1a03410 	lsl	r3, r0, r4
 8009470:	e1a00530 	lsr	r0, r0, r5
 8009474:	e1800411 	orr	r0, r0, r1, lsl r4
 8009478:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
 800947c:	e0900fa3 	adds	r0, r0, r3, lsr #31
 8009480:	e2a11000 	adc	r1, r1, #0
 8009484:	e19ee083 	orrs	lr, lr, r3, lsl #1
 8009488:	01c00fa3 	biceq	r0, r0, r3, lsr #31
 800948c:	e8bd4070 	pop	{r4, r5, r6, lr}
 8009490:	e12fff1e 	bx	lr
 8009494:	e2645020 	rsb	r5, r4, #32
 8009498:	e18ee510 	orr	lr, lr, r0, lsl r5
 800949c:	e1a03430 	lsr	r3, r0, r4
 80094a0:	e1833511 	orr	r3, r3, r1, lsl r5
 80094a4:	e1a00431 	lsr	r0, r1, r4
 80094a8:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
 80094ac:	e1c00431 	bic	r0, r0, r1, lsr r4
 80094b0:	e0800fa3 	add	r0, r0, r3, lsr #31
 80094b4:	e19ee083 	orrs	lr, lr, r3, lsl #1
 80094b8:	01c00fa3 	biceq	r0, r0, r3, lsr #31
 80094bc:	e8bd4070 	pop	{r4, r5, r6, lr}
 80094c0:	e12fff1e 	bx	lr
 80094c4:	e3340000 	teq	r4, #0
 80094c8:	1a000008 	bne	80094f0 <__aeabi_dmul+0x1d8>
 80094cc:	e2016102 	and	r6, r1, #-2147483648	; 0x80000000
 80094d0:	e1b00080 	lsls	r0, r0, #1
 80094d4:	e0a11001 	adc	r1, r1, r1
 80094d8:	e3110601 	tst	r1, #1048576	; 0x100000
 80094dc:	02444001 	subeq	r4, r4, #1
 80094e0:	0afffffa 	beq	80094d0 <__aeabi_dmul+0x1b8>
 80094e4:	e1811006 	orr	r1, r1, r6
 80094e8:	e3350000 	teq	r5, #0
 80094ec:	112fff1e 	bxne	lr
 80094f0:	e2036102 	and	r6, r3, #-2147483648	; 0x80000000
 80094f4:	e1b02082 	lsls	r2, r2, #1
 80094f8:	e0a33003 	adc	r3, r3, r3
 80094fc:	e3130601 	tst	r3, #1048576	; 0x100000
 8009500:	02455001 	subeq	r5, r5, #1
 8009504:	0afffffa 	beq	80094f4 <__aeabi_dmul+0x1dc>
 8009508:	e1833006 	orr	r3, r3, r6
 800950c:	e12fff1e 	bx	lr
 8009510:	e134000c 	teq	r4, ip
 8009514:	e00c5a23 	and	r5, ip, r3, lsr #20
 8009518:	1135000c 	teqne	r5, ip
 800951c:	0a000007 	beq	8009540 <__aeabi_dmul+0x228>
 8009520:	e1906081 	orrs	r6, r0, r1, lsl #1
 8009524:	11926083 	orrsne	r6, r2, r3, lsl #1
 8009528:	1affffe5 	bne	80094c4 <__aeabi_dmul+0x1ac>
 800952c:	e0211003 	eor	r1, r1, r3
 8009530:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
 8009534:	e3a00000 	mov	r0, #0
 8009538:	e8bd4070 	pop	{r4, r5, r6, lr}
 800953c:	e12fff1e 	bx	lr
 8009540:	e1906081 	orrs	r6, r0, r1, lsl #1
 8009544:	01a00002 	moveq	r0, r2
 8009548:	01a01003 	moveq	r1, r3
 800954c:	11926083 	orrsne	r6, r2, r3, lsl #1
 8009550:	0a000010 	beq	8009598 <__aeabi_dmul+0x280>
 8009554:	e134000c 	teq	r4, ip
 8009558:	1a000001 	bne	8009564 <__aeabi_dmul+0x24c>
 800955c:	e1906601 	orrs	r6, r0, r1, lsl #12
 8009560:	1a00000c 	bne	8009598 <__aeabi_dmul+0x280>
 8009564:	e135000c 	teq	r5, ip
 8009568:	1a000003 	bne	800957c <__aeabi_dmul+0x264>
 800956c:	e1926603 	orrs	r6, r2, r3, lsl #12
 8009570:	11a00002 	movne	r0, r2
 8009574:	11a01003 	movne	r1, r3
 8009578:	1a000006 	bne	8009598 <__aeabi_dmul+0x280>
 800957c:	e0211003 	eor	r1, r1, r3
 8009580:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
 8009584:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
 8009588:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
 800958c:	e3a00000 	mov	r0, #0
 8009590:	e8bd4070 	pop	{r4, r5, r6, lr}
 8009594:	e12fff1e 	bx	lr
 8009598:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
 800959c:	e381173e 	orr	r1, r1, #16252928	; 0xf80000
 80095a0:	e8bd4070 	pop	{r4, r5, r6, lr}
 80095a4:	e12fff1e 	bx	lr

080095a8 <__aeabi_ddiv>:
 80095a8:	e92d4070 	push	{r4, r5, r6, lr}
 80095ac:	e3a0c0ff 	mov	ip, #255	; 0xff
 80095b0:	e38ccc07 	orr	ip, ip, #1792	; 0x700
 80095b4:	e01c4a21 	ands	r4, ip, r1, lsr #20
 80095b8:	101c5a23 	andsne	r5, ip, r3, lsr #20
 80095bc:	1134000c 	teqne	r4, ip
 80095c0:	1135000c 	teqne	r5, ip
 80095c4:	0b00005e 	bleq	8009744 <__aeabi_ddiv+0x19c>
 80095c8:	e0444005 	sub	r4, r4, r5
 80095cc:	e021e003 	eor	lr, r1, r3
 80095d0:	e1925603 	orrs	r5, r2, r3, lsl #12
 80095d4:	e1a01601 	lsl	r1, r1, #12
 80095d8:	0a00004c 	beq	8009710 <__aeabi_ddiv+0x168>
 80095dc:	e1a03603 	lsl	r3, r3, #12
 80095e0:	e3a05201 	mov	r5, #268435456	; 0x10000000
 80095e4:	e1853223 	orr	r3, r5, r3, lsr #4
 80095e8:	e1833c22 	orr	r3, r3, r2, lsr #24
 80095ec:	e1a02402 	lsl	r2, r2, #8
 80095f0:	e1855221 	orr	r5, r5, r1, lsr #4
 80095f4:	e1855c20 	orr	r5, r5, r0, lsr #24
 80095f8:	e1a06400 	lsl	r6, r0, #8
 80095fc:	e20e1102 	and	r1, lr, #-2147483648	; 0x80000000
 8009600:	e1550003 	cmp	r5, r3
 8009604:	01560002 	cmpeq	r6, r2
 8009608:	e2a440fd 	adc	r4, r4, #253	; 0xfd
 800960c:	e2844c03 	add	r4, r4, #768	; 0x300
 8009610:	2a000001 	bcs	800961c <__aeabi_ddiv+0x74>
 8009614:	e1b030a3 	lsrs	r3, r3, #1
 8009618:	e1a02062 	rrx	r2, r2
 800961c:	e0566002 	subs	r6, r6, r2
 8009620:	e0c55003 	sbc	r5, r5, r3
 8009624:	e1b030a3 	lsrs	r3, r3, #1
 8009628:	e1a02062 	rrx	r2, r2
 800962c:	e3a00601 	mov	r0, #1048576	; 0x100000
 8009630:	e3a0c702 	mov	ip, #524288	; 0x80000
 8009634:	e056e002 	subs	lr, r6, r2
 8009638:	e0d5e003 	sbcs	lr, r5, r3
 800963c:	20466002 	subcs	r6, r6, r2
 8009640:	21a0500e 	movcs	r5, lr
 8009644:	2180000c 	orrcs	r0, r0, ip
 8009648:	e1b030a3 	lsrs	r3, r3, #1
 800964c:	e1a02062 	rrx	r2, r2
 8009650:	e056e002 	subs	lr, r6, r2
 8009654:	e0d5e003 	sbcs	lr, r5, r3
 8009658:	20466002 	subcs	r6, r6, r2
 800965c:	21a0500e 	movcs	r5, lr
 8009660:	218000ac 	orrcs	r0, r0, ip, lsr #1
 8009664:	e1b030a3 	lsrs	r3, r3, #1
 8009668:	e1a02062 	rrx	r2, r2
 800966c:	e056e002 	subs	lr, r6, r2
 8009670:	e0d5e003 	sbcs	lr, r5, r3
 8009674:	20466002 	subcs	r6, r6, r2
 8009678:	21a0500e 	movcs	r5, lr
 800967c:	2180012c 	orrcs	r0, r0, ip, lsr #2
 8009680:	e1b030a3 	lsrs	r3, r3, #1
 8009684:	e1a02062 	rrx	r2, r2
 8009688:	e056e002 	subs	lr, r6, r2
 800968c:	e0d5e003 	sbcs	lr, r5, r3
 8009690:	20466002 	subcs	r6, r6, r2
 8009694:	21a0500e 	movcs	r5, lr
 8009698:	218001ac 	orrcs	r0, r0, ip, lsr #3
 800969c:	e195e006 	orrs	lr, r5, r6
 80096a0:	0a00000d 	beq	80096dc <__aeabi_ddiv+0x134>
 80096a4:	e1a05205 	lsl	r5, r5, #4
 80096a8:	e1855e26 	orr	r5, r5, r6, lsr #28
 80096ac:	e1a06206 	lsl	r6, r6, #4
 80096b0:	e1a03183 	lsl	r3, r3, #3
 80096b4:	e1833ea2 	orr	r3, r3, r2, lsr #29
 80096b8:	e1a02182 	lsl	r2, r2, #3
 80096bc:	e1b0c22c 	lsrs	ip, ip, #4
 80096c0:	1affffdb 	bne	8009634 <__aeabi_ddiv+0x8c>
 80096c4:	e3110601 	tst	r1, #1048576	; 0x100000
 80096c8:	1a000006 	bne	80096e8 <__aeabi_ddiv+0x140>
 80096cc:	e1811000 	orr	r1, r1, r0
 80096d0:	e3a00000 	mov	r0, #0
 80096d4:	e3a0c102 	mov	ip, #-2147483648	; 0x80000000
 80096d8:	eaffffd5 	b	8009634 <__aeabi_ddiv+0x8c>
 80096dc:	e3110601 	tst	r1, #1048576	; 0x100000
 80096e0:	01811000 	orreq	r1, r1, r0
 80096e4:	03a00000 	moveq	r0, #0
 80096e8:	e254c0fd 	subs	ip, r4, #253	; 0xfd
 80096ec:	835c0c07 	cmphi	ip, #1792	; 0x700
 80096f0:	8affff43 	bhi	8009404 <__aeabi_dmul+0xec>
 80096f4:	e055c003 	subs	ip, r5, r3
 80096f8:	0056c002 	subseq	ip, r6, r2
 80096fc:	01b0c0a0 	lsrseq	ip, r0, #1
 8009700:	e2b00000 	adcs	r0, r0, #0
 8009704:	e0a11a04 	adc	r1, r1, r4, lsl #20
 8009708:	e8bd4070 	pop	{r4, r5, r6, lr}
 800970c:	e12fff1e 	bx	lr
 8009710:	e20ee102 	and	lr, lr, #-2147483648	; 0x80000000
 8009714:	e18e1621 	orr	r1, lr, r1, lsr #12
 8009718:	e09440ac 	adds	r4, r4, ip, lsr #1
 800971c:	c074500c 	rsbsgt	r5, r4, ip
 8009720:	c1811a04 	orrgt	r1, r1, r4, lsl #20
 8009724:	c8bd4070 	popgt	{r4, r5, r6, lr}
 8009728:	c12fff1e 	bxgt	lr
 800972c:	e3811601 	orr	r1, r1, #1048576	; 0x100000
 8009730:	e3a0e000 	mov	lr, #0
 8009734:	e2544001 	subs	r4, r4, #1
 8009738:	eaffff31 	b	8009404 <__aeabi_dmul+0xec>
 800973c:	e185e006 	orr	lr, r5, r6
 8009740:	eaffff2f 	b	8009404 <__aeabi_dmul+0xec>
 8009744:	e00c5a23 	and	r5, ip, r3, lsr #20
 8009748:	e134000c 	teq	r4, ip
 800974c:	0135000c 	teqeq	r5, ip
 8009750:	0affff90 	beq	8009598 <__aeabi_dmul+0x280>
 8009754:	e134000c 	teq	r4, ip
 8009758:	1a000006 	bne	8009778 <__aeabi_ddiv+0x1d0>
 800975c:	e1904601 	orrs	r4, r0, r1, lsl #12
 8009760:	1affff8c 	bne	8009598 <__aeabi_dmul+0x280>
 8009764:	e135000c 	teq	r5, ip
 8009768:	1affff83 	bne	800957c <__aeabi_dmul+0x264>
 800976c:	e1a00002 	mov	r0, r2
 8009770:	e1a01003 	mov	r1, r3
 8009774:	eaffff87 	b	8009598 <__aeabi_dmul+0x280>
 8009778:	e135000c 	teq	r5, ip
 800977c:	1a000004 	bne	8009794 <__aeabi_ddiv+0x1ec>
 8009780:	e1925603 	orrs	r5, r2, r3, lsl #12
 8009784:	0affff68 	beq	800952c <__aeabi_dmul+0x214>
 8009788:	e1a00002 	mov	r0, r2
 800978c:	e1a01003 	mov	r1, r3
 8009790:	eaffff80 	b	8009598 <__aeabi_dmul+0x280>
 8009794:	e1906081 	orrs	r6, r0, r1, lsl #1
 8009798:	11926083 	orrsne	r6, r2, r3, lsl #1
 800979c:	1affff48 	bne	80094c4 <__aeabi_dmul+0x1ac>
 80097a0:	e1904081 	orrs	r4, r0, r1, lsl #1
 80097a4:	1affff74 	bne	800957c <__aeabi_dmul+0x264>
 80097a8:	e1925083 	orrs	r5, r2, r3, lsl #1
 80097ac:	1affff5e 	bne	800952c <__aeabi_dmul+0x214>
 80097b0:	eaffff78 	b	8009598 <__aeabi_dmul+0x280>

080097b4 <__gedf2>:
 80097b4:	e3e0c000 	mvn	ip, #0
 80097b8:	ea000002 	b	80097c8 <__cmpdf2+0x4>

080097bc <__ledf2>:
 80097bc:	e3a0c001 	mov	ip, #1
 80097c0:	ea000000 	b	80097c8 <__cmpdf2+0x4>

080097c4 <__cmpdf2>:
 80097c4:	e3a0c001 	mov	ip, #1
 80097c8:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 80097cc:	e1a0c081 	lsl	ip, r1, #1
 80097d0:	e1f0cacc 	mvns	ip, ip, asr #21
 80097d4:	e1a0c083 	lsl	ip, r3, #1
 80097d8:	11f0cacc 	mvnsne	ip, ip, asr #21
 80097dc:	0a00000e 	beq	800981c <__cmpdf2+0x58>
 80097e0:	e28dd004 	add	sp, sp, #4
 80097e4:	e190c081 	orrs	ip, r0, r1, lsl #1
 80097e8:	0192c083 	orrseq	ip, r2, r3, lsl #1
 80097ec:	11310003 	teqne	r1, r3
 80097f0:	01300002 	teqeq	r0, r2
 80097f4:	03a00000 	moveq	r0, #0
 80097f8:	012fff1e 	bxeq	lr
 80097fc:	e3700000 	cmn	r0, #0
 8009800:	e1310003 	teq	r1, r3
 8009804:	51510003 	cmppl	r1, r3
 8009808:	01500002 	cmpeq	r0, r2
 800980c:	21a00fc3 	asrcs	r0, r3, #31
 8009810:	31e00fc3 	mvncc	r0, r3, asr #31
 8009814:	e3800001 	orr	r0, r0, #1
 8009818:	e12fff1e 	bx	lr
 800981c:	e1a0c081 	lsl	ip, r1, #1
 8009820:	e1f0cacc 	mvns	ip, ip, asr #21
 8009824:	1a000001 	bne	8009830 <__cmpdf2+0x6c>
 8009828:	e190c601 	orrs	ip, r0, r1, lsl #12
 800982c:	1a000004 	bne	8009844 <__cmpdf2+0x80>
 8009830:	e1a0c083 	lsl	ip, r3, #1
 8009834:	e1f0cacc 	mvns	ip, ip, asr #21
 8009838:	1affffe8 	bne	80097e0 <__cmpdf2+0x1c>
 800983c:	e192c603 	orrs	ip, r2, r3, lsl #12
 8009840:	0affffe6 	beq	80097e0 <__cmpdf2+0x1c>
 8009844:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 8009848:	e12fff1e 	bx	lr

0800984c <__aeabi_cdrcmple>:
 800984c:	e1a0c000 	mov	ip, r0
 8009850:	e1a00002 	mov	r0, r2
 8009854:	e1a0200c 	mov	r2, ip
 8009858:	e1a0c001 	mov	ip, r1
 800985c:	e1a01003 	mov	r1, r3
 8009860:	e1a0300c 	mov	r3, ip
 8009864:	eaffffff 	b	8009868 <__aeabi_cdcmpeq>

08009868 <__aeabi_cdcmpeq>:
 8009868:	e92d4001 	push	{r0, lr}
 800986c:	ebffffd4 	bl	80097c4 <__cmpdf2>
 8009870:	e3500000 	cmp	r0, #0
 8009874:	43700000 	cmnmi	r0, #0
 8009878:	e8bd4001 	pop	{r0, lr}
 800987c:	e12fff1e 	bx	lr

08009880 <__aeabi_dcmpeq>:
 8009880:	e52de008 	str	lr, [sp, #-8]!
 8009884:	ebfffff7 	bl	8009868 <__aeabi_cdcmpeq>
 8009888:	03a00001 	moveq	r0, #1
 800988c:	13a00000 	movne	r0, #0
 8009890:	e49de008 	ldr	lr, [sp], #8
 8009894:	e12fff1e 	bx	lr

08009898 <__aeabi_dcmplt>:
 8009898:	e52de008 	str	lr, [sp, #-8]!
 800989c:	ebfffff1 	bl	8009868 <__aeabi_cdcmpeq>
 80098a0:	33a00001 	movcc	r0, #1
 80098a4:	23a00000 	movcs	r0, #0
 80098a8:	e49de008 	ldr	lr, [sp], #8
 80098ac:	e12fff1e 	bx	lr

080098b0 <__aeabi_dcmple>:
 80098b0:	e52de008 	str	lr, [sp, #-8]!
 80098b4:	ebffffeb 	bl	8009868 <__aeabi_cdcmpeq>
 80098b8:	93a00001 	movls	r0, #1
 80098bc:	83a00000 	movhi	r0, #0
 80098c0:	e49de008 	ldr	lr, [sp], #8
 80098c4:	e12fff1e 	bx	lr

080098c8 <__aeabi_dcmpge>:
 80098c8:	e52de008 	str	lr, [sp, #-8]!
 80098cc:	ebffffde 	bl	800984c <__aeabi_cdrcmple>
 80098d0:	93a00001 	movls	r0, #1
 80098d4:	83a00000 	movhi	r0, #0
 80098d8:	e49de008 	ldr	lr, [sp], #8
 80098dc:	e12fff1e 	bx	lr

080098e0 <__aeabi_dcmpgt>:
 80098e0:	e52de008 	str	lr, [sp, #-8]!
 80098e4:	ebffffd8 	bl	800984c <__aeabi_cdrcmple>
 80098e8:	33a00001 	movcc	r0, #1
 80098ec:	23a00000 	movcs	r0, #0
 80098f0:	e49de008 	ldr	lr, [sp], #8
 80098f4:	e12fff1e 	bx	lr

080098f8 <__aeabi_d2iz>:
 80098f8:	e1a02081 	lsl	r2, r1, #1
 80098fc:	e2922602 	adds	r2, r2, #2097152	; 0x200000
 8009900:	2a00000c 	bcs	8009938 <__aeabi_d2iz+0x40>
 8009904:	5a000009 	bpl	8009930 <__aeabi_d2iz+0x38>
 8009908:	e3e03e3e 	mvn	r3, #992	; 0x3e0
 800990c:	e0532ac2 	subs	r2, r3, r2, asr #21
 8009910:	9a00000a 	bls	8009940 <__aeabi_d2iz+0x48>
 8009914:	e1a03581 	lsl	r3, r1, #11
 8009918:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
 800991c:	e1833aa0 	orr	r3, r3, r0, lsr #21
 8009920:	e3110102 	tst	r1, #-2147483648	; 0x80000000
 8009924:	e1a00233 	lsr	r0, r3, r2
 8009928:	12600000 	rsbne	r0, r0, #0
 800992c:	e12fff1e 	bx	lr
 8009930:	e3a00000 	mov	r0, #0
 8009934:	e12fff1e 	bx	lr
 8009938:	e1900601 	orrs	r0, r0, r1, lsl #12
 800993c:	1a000002 	bne	800994c <__aeabi_d2iz+0x54>
 8009940:	e2110102 	ands	r0, r1, #-2147483648	; 0x80000000
 8009944:	03e00102 	mvneq	r0, #-2147483648	; 0x80000000
 8009948:	e12fff1e 	bx	lr
 800994c:	e3a00000 	mov	r0, #0
 8009950:	e12fff1e 	bx	lr

08009954 <__aeabi_d2uiz>:
 8009954:	e1b02081 	lsls	r2, r1, #1
 8009958:	2a00000a 	bcs	8009988 <__aeabi_d2uiz+0x34>
 800995c:	e2922602 	adds	r2, r2, #2097152	; 0x200000
 8009960:	2a00000a 	bcs	8009990 <__aeabi_d2uiz+0x3c>
 8009964:	5a000007 	bpl	8009988 <__aeabi_d2uiz+0x34>
 8009968:	e3e03e3e 	mvn	r3, #992	; 0x3e0
 800996c:	e0532ac2 	subs	r2, r3, r2, asr #21
 8009970:	4a000008 	bmi	8009998 <__aeabi_d2uiz+0x44>
 8009974:	e1a03581 	lsl	r3, r1, #11
 8009978:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
 800997c:	e1833aa0 	orr	r3, r3, r0, lsr #21
 8009980:	e1a00233 	lsr	r0, r3, r2
 8009984:	e12fff1e 	bx	lr
 8009988:	e3a00000 	mov	r0, #0
 800998c:	e12fff1e 	bx	lr
 8009990:	e1900601 	orrs	r0, r0, r1, lsl #12
 8009994:	1a000001 	bne	80099a0 <__aeabi_d2uiz+0x4c>
 8009998:	e3e00000 	mvn	r0, #0
 800999c:	e12fff1e 	bx	lr
 80099a0:	e3a00000 	mov	r0, #0
 80099a4:	e12fff1e 	bx	lr

080099a8 <__aeabi_d2f>:
 80099a8:	e1a02081 	lsl	r2, r1, #1
 80099ac:	e2523207 	subs	r3, r2, #1879048192	; 0x70000000
 80099b0:	2253c602 	subscs	ip, r3, #2097152	; 0x200000
 80099b4:	227cc57f 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80099b8:	9a000006 	bls	80099d8 <__aeabi_d2f+0x30>
 80099bc:	e201c102 	and	ip, r1, #-2147483648	; 0x80000000
 80099c0:	e1a02180 	lsl	r2, r0, #3
 80099c4:	e18c0ea0 	orr	r0, ip, r0, lsr #29
 80099c8:	e3520102 	cmp	r2, #-2147483648	; 0x80000000
 80099cc:	e0a00103 	adc	r0, r0, r3, lsl #2
 80099d0:	03c00001 	biceq	r0, r0, #1
 80099d4:	e12fff1e 	bx	lr
 80099d8:	e3110101 	tst	r1, #1073741824	; 0x40000000
 80099dc:	1a00000f 	bne	8009a20 <__aeabi_d2f+0x78>
 80099e0:	e293262e 	adds	r2, r3, #48234496	; 0x2e00000
 80099e4:	b2010102 	andlt	r0, r1, #-2147483648	; 0x80000000
 80099e8:	b12fff1e 	bxlt	lr
 80099ec:	e3811601 	orr	r1, r1, #1048576	; 0x100000
 80099f0:	e1a02aa2 	lsr	r2, r2, #21
 80099f4:	e2622018 	rsb	r2, r2, #24
 80099f8:	e262c020 	rsb	ip, r2, #32
 80099fc:	e1b03c10 	lsls	r3, r0, ip
 8009a00:	e1a00230 	lsr	r0, r0, r2
 8009a04:	13800001 	orrne	r0, r0, #1
 8009a08:	e1a03581 	lsl	r3, r1, #11
 8009a0c:	e1a035a3 	lsr	r3, r3, #11
 8009a10:	e1800c13 	orr	r0, r0, r3, lsl ip
 8009a14:	e1a03233 	lsr	r3, r3, r2
 8009a18:	e1a03083 	lsl	r3, r3, #1
 8009a1c:	eaffffe6 	b	80099bc <__aeabi_d2f+0x14>
 8009a20:	e1f03ac2 	mvns	r3, r2, asr #21
 8009a24:	1a000003 	bne	8009a38 <__aeabi_d2f+0x90>
 8009a28:	e1903601 	orrs	r3, r0, r1, lsl #12
 8009a2c:	13a0047f 	movne	r0, #2130706432	; 0x7f000000
 8009a30:	13800503 	orrne	r0, r0, #12582912	; 0xc00000
 8009a34:	112fff1e 	bxne	lr
 8009a38:	e2010102 	and	r0, r1, #-2147483648	; 0x80000000
 8009a3c:	e380047f 	orr	r0, r0, #2130706432	; 0x7f000000
 8009a40:	e3800502 	orr	r0, r0, #8388608	; 0x800000
 8009a44:	e12fff1e 	bx	lr

08009a48 <LED_Tick>:
static void Main_Init( void );



void LED_Tick( void )
{
 8009a48:	b508      	push	{r3, lr}
	Hw_Led_Toggle(0);
 8009a4a:	f24b 53ed 	movw	r3, #46573	; 0xb5ed
 8009a4e:	2000      	movs	r0, #0
 8009a50:	f6c0 0300 	movt	r3, #2048	; 0x800
 8009a54:	4798      	blx	r3
 8009a56:	bd08      	pop	{r3, pc}

08009a58 <main>:
     ARG     : 	void
     RET     : 	
     			int
---------------------------------------------------------------------------*/
int main(void)
{
 8009a58:	b500      	push	{lr}
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Main_Init( void )
{
	Hw_Init();
 8009a5a:	4b0b      	ldr	r3, [pc, #44]	; (8009a88 <main+0x30>)
     ARG     : 	void
     RET     : 	
     			int
---------------------------------------------------------------------------*/
int main(void)
{
 8009a5c:	b083      	sub	sp, #12
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Main_Init( void )
{
	Hw_Init();
 8009a5e:	4798      	blx	r3
	Ap_Init();
	
	Hw_Timer_Set  ( HW_TIMER_CH_LED, 1000, LOOP_TIME, LED_Tick, NULL );
 8009a60:	2400      	movs	r4, #0
     RET     : void
---------------------------------------------------------------------------*/
void Main_Init( void )
{
	Hw_Init();
	Ap_Init();
 8009a62:	4b0a      	ldr	r3, [pc, #40]	; (8009a8c <main+0x34>)
 8009a64:	4798      	blx	r3
	
	Hw_Timer_Set  ( HW_TIMER_CH_LED, 1000, LOOP_TIME, LED_Tick, NULL );
 8009a66:	4d0a      	ldr	r5, [pc, #40]	; (8009a90 <main+0x38>)
 8009a68:	4620      	mov	r0, r4
 8009a6a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8009a6e:	2202      	movs	r2, #2
 8009a70:	4b08      	ldr	r3, [pc, #32]	; (8009a94 <main+0x3c>)
 8009a72:	9400      	str	r4, [sp, #0]
 8009a74:	47a8      	blx	r5
	Hw_Timer_Start( HW_TIMER_CH_LED );	
 8009a76:	4620      	mov	r0, r4
 8009a78:	4b07      	ldr	r3, [pc, #28]	; (8009a98 <main+0x40>)
 8009a7a:	4798      	blx	r3
 8009a7c:	4d07      	ldr	r5, [pc, #28]	; (8009a9c <main+0x44>)
 8009a7e:	4c08      	ldr	r4, [pc, #32]	; (8009aa0 <main+0x48>)

	//-- 명령어 처리
	//
	while(1)
	{
		Ap_EduMenu_ExeCmd();
 8009a80:	47a8      	blx	r5
		Ap_StrCmd_ExeCmd();
 8009a82:	47a0      	blx	r4
 8009a84:	e7fc      	b.n	8009a80 <main+0x28>
 8009a86:	bf00      	nop
 8009a88:	0800ad5d 	.word	0x0800ad5d
 8009a8c:	08009aa5 	.word	0x08009aa5
 8009a90:	0800b315 	.word	0x0800b315
 8009a94:	08009a49 	.word	0x08009a49
 8009a98:	0800b335 	.word	0x0800b335
 8009a9c:	0800a28d 	.word	0x0800a28d
 8009aa0:	08009fd1 	.word	0x08009fd1

08009aa4 <Ap_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Ap_Init( void )
{
 8009aa4:	b508      	push	{r3, lr}
	{
		Lb_printf("Radio Init Fail\n");
	}
	*/

	Ap_StrCmd_Init();
 8009aa6:	f649 4311 	movw	r3, #39953	; 0x9c11
 8009aaa:	f6c0 0300 	movt	r3, #2048	; 0x800
 8009aae:	4798      	blx	r3
 8009ab0:	bd08      	pop	{r3, pc}
 8009ab2:	bf00      	nop

08009ab4 <Ap_StrCmd_PutFunc>:

void Ap_StrCmd_Echo( u8 OpCode,  void *arg );


void Ap_StrCmd_PutFunc( char Ch )
{
 8009ab4:	b508      	push	{r3, lr}
	Hw_Uart_Putch( HW_USE_UART_CH_STRCMD, Ch );
 8009ab6:	f24b 037d 	movw	r3, #45181	; 0xb07d

void Ap_StrCmd_Echo( u8 OpCode,  void *arg );


void Ap_StrCmd_PutFunc( char Ch )
{
 8009aba:	4601      	mov	r1, r0
	Hw_Uart_Putch( HW_USE_UART_CH_STRCMD, Ch );
 8009abc:	f6c0 0300 	movt	r3, #2048	; 0x800
 8009ac0:	2001      	movs	r0, #1
 8009ac2:	4798      	blx	r3
 8009ac4:	bd08      	pop	{r3, pc}
 8009ac6:	bf00      	nop

08009ac8 <Ap_StrCmd_CallBack_RxdISR>:
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_StrCmd_CallBack_RxdISR( char Ch )
{	
 8009ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	if( Ap_StrCmd_ChSize >= AP_STRCMD_STR_MAX )
 8009aca:	4b1a      	ldr	r3, [pc, #104]	; (8009b34 <Ap_StrCmd_CallBack_RxdISR+0x6c>)
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_StrCmd_CallBack_RxdISR( char Ch )
{	
 8009acc:	4604      	mov	r4, r0

	if( Ap_StrCmd_ChSize >= AP_STRCMD_STR_MAX )
 8009ace:	881a      	ldrh	r2, [r3, #0]
 8009ad0:	b292      	uxth	r2, r2
 8009ad2:	2a3b      	cmp	r2, #59	; 0x3b
 8009ad4:	d901      	bls.n	8009ada <Ap_StrCmd_CallBack_RxdISR+0x12>
	{
		Ap_StrCmd_ChSize = 0;
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	801a      	strh	r2, [r3, #0]
	}
	
	//Ch = toupper( Ch );
	
	Ap_StrCmd_CmdStr[ Ap_StrCmd_ChSize ] = Ch;
 8009ada:	8818      	ldrh	r0, [r3, #0]
	
	Ap_StrCmd_ChSize++;
 8009adc:	8819      	ldrh	r1, [r3, #0]
		Ap_StrCmd_ChSize = 0;
	}
	
	//Ch = toupper( Ch );
	
	Ap_StrCmd_CmdStr[ Ap_StrCmd_ChSize ] = Ch;
 8009ade:	4a16      	ldr	r2, [pc, #88]	; (8009b38 <Ap_StrCmd_CallBack_RxdISR+0x70>)
	
	Ap_StrCmd_ChSize++;
 8009ae0:	3101      	adds	r1, #1
		Ap_StrCmd_ChSize = 0;
	}
	
	//Ch = toupper( Ch );
	
	Ap_StrCmd_CmdStr[ Ap_StrCmd_ChSize ] = Ch;
 8009ae2:	b280      	uxth	r0, r0
	
	Ap_StrCmd_ChSize++;
 8009ae4:	b289      	uxth	r1, r1
	

	if( Ch == 0x0D )  // '\n'
 8009ae6:	2c0d      	cmp	r4, #13
	
	//Ch = toupper( Ch );
	
	Ap_StrCmd_CmdStr[ Ap_StrCmd_ChSize ] = Ch;
	
	Ap_StrCmd_ChSize++;
 8009ae8:	8019      	strh	r1, [r3, #0]
		Ap_StrCmd_ChSize = 0;
	}
	
	//Ch = toupper( Ch );
	
	Ap_StrCmd_CmdStr[ Ap_StrCmd_ChSize ] = Ch;
 8009aea:	5414      	strb	r4, [r2, r0]
 8009aec:	4b11      	ldr	r3, [pc, #68]	; (8009b34 <Ap_StrCmd_CallBack_RxdISR+0x6c>)
	
	Ap_StrCmd_ChSize++;
	

	if( Ch == 0x0D )  // '\n'
 8009aee:	d010      	beq.n	8009b12 <Ap_StrCmd_CallBack_RxdISR+0x4a>
		Ap_StrCmd_LoopCheck = 1;
		
		Ap_StrCmd_Q_Push( AP_STRCMD_Q_RX_CH, (AP_STRCMD_CMD_OBJ *)Ap_StrCmd_CmdStr );
	}

	if( Ap_StrCmd_EchoEnable == TRUE )
 8009af0:	4b12      	ldr	r3, [pc, #72]	; (8009b3c <Ap_StrCmd_CallBack_RxdISR+0x74>)
 8009af2:	781b      	ldrb	r3, [r3, #0]
 8009af4:	2b01      	cmp	r3, #1
 8009af6:	d000      	beq.n	8009afa <Ap_StrCmd_CallBack_RxdISR+0x32>
 8009af8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	{
		if( Ap_StrCmd_PutchPtr != NULL_FUNC )
 8009afa:	4d11      	ldr	r5, [pc, #68]	; (8009b40 <Ap_StrCmd_CallBack_RxdISR+0x78>)
 8009afc:	682b      	ldr	r3, [r5, #0]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d0fa      	beq.n	8009af8 <Ap_StrCmd_CallBack_RxdISR+0x30>
		{

			(*Ap_StrCmd_PutchPtr)( Ch );
 8009b02:	4620      	mov	r0, r4
 8009b04:	4798      	blx	r3
			
			if( Ch == '\r' )
 8009b06:	2c0d      	cmp	r4, #13
 8009b08:	d1f6      	bne.n	8009af8 <Ap_StrCmd_CallBack_RxdISR+0x30>
			{
				(*Ap_StrCmd_PutchPtr)( '\n' );	
 8009b0a:	682b      	ldr	r3, [r5, #0]
 8009b0c:	200a      	movs	r0, #10
 8009b0e:	4798      	blx	r3
 8009b10:	e7f2      	b.n	8009af8 <Ap_StrCmd_CallBack_RxdISR+0x30>
	Ap_StrCmd_ChSize++;
	

	if( Ch == 0x0D )  // '\n'
	{
		Ap_StrCmd_CmdStr[ Ap_StrCmd_ChSize ] = 0;
 8009b12:	2600      	movs	r6, #0
 8009b14:	881f      	ldrh	r7, [r3, #0]
		
		Ap_StrCmd_ChSize    = 0;
 8009b16:	801e      	strh	r6, [r3, #0]
		Ap_StrCmd_DlyCheck  = 1;
 8009b18:	4b0a      	ldr	r3, [pc, #40]	; (8009b44 <Ap_StrCmd_CallBack_RxdISR+0x7c>)
 8009b1a:	2501      	movs	r5, #1
 8009b1c:	701d      	strb	r5, [r3, #0]
		
		Ap_StrCmd_CmdCheck  = 1;
 8009b1e:	4b0a      	ldr	r3, [pc, #40]	; (8009b48 <Ap_StrCmd_CallBack_RxdISR+0x80>)
	Ap_StrCmd_ChSize++;
	

	if( Ch == 0x0D )  // '\n'
	{
		Ap_StrCmd_CmdStr[ Ap_StrCmd_ChSize ] = 0;
 8009b20:	b2bf      	uxth	r7, r7
		
		Ap_StrCmd_ChSize    = 0;
		Ap_StrCmd_DlyCheck  = 1;
		
		Ap_StrCmd_CmdCheck  = 1;
 8009b22:	701d      	strb	r5, [r3, #0]
		Ap_StrCmd_LoopCheck = 1;
 8009b24:	4b09      	ldr	r3, [pc, #36]	; (8009b4c <Ap_StrCmd_CallBack_RxdISR+0x84>)
		
		Ap_StrCmd_Q_Push( AP_STRCMD_Q_RX_CH, (AP_STRCMD_CMD_OBJ *)Ap_StrCmd_CmdStr );
 8009b26:	4630      	mov	r0, r6
		
		Ap_StrCmd_ChSize    = 0;
		Ap_StrCmd_DlyCheck  = 1;
		
		Ap_StrCmd_CmdCheck  = 1;
		Ap_StrCmd_LoopCheck = 1;
 8009b28:	701d      	strb	r5, [r3, #0]
		
		Ap_StrCmd_Q_Push( AP_STRCMD_Q_RX_CH, (AP_STRCMD_CMD_OBJ *)Ap_StrCmd_CmdStr );
 8009b2a:	4611      	mov	r1, r2
 8009b2c:	4b08      	ldr	r3, [pc, #32]	; (8009b50 <Ap_StrCmd_CallBack_RxdISR+0x88>)
	Ap_StrCmd_ChSize++;
	

	if( Ch == 0x0D )  // '\n'
	{
		Ap_StrCmd_CmdStr[ Ap_StrCmd_ChSize ] = 0;
 8009b2e:	55d6      	strb	r6, [r2, r7]
		Ap_StrCmd_DlyCheck  = 1;
		
		Ap_StrCmd_CmdCheck  = 1;
		Ap_StrCmd_LoopCheck = 1;
		
		Ap_StrCmd_Q_Push( AP_STRCMD_Q_RX_CH, (AP_STRCMD_CMD_OBJ *)Ap_StrCmd_CmdStr );
 8009b30:	4798      	blx	r3
 8009b32:	e7dd      	b.n	8009af0 <Ap_StrCmd_CallBack_RxdISR+0x28>
 8009b34:	20000f90 	.word	0x20000f90
 8009b38:	20000f94 	.word	0x20000f94
 8009b3c:	20000a00 	.word	0x20000a00
 8009b40:	20000fdc 	.word	0x20000fdc
 8009b44:	20000fd0 	.word	0x20000fd0
 8009b48:	20000f92 	.word	0x20000f92
 8009b4c:	20000fe0 	.word	0x20000fe0
 8009b50:	0800a03d 	.word	0x0800a03d

08009b54 <Ap_StrCmd_AddCmd>:
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u8 Ap_StrCmd_AddCmd( char *NameStr, char *MenuStr,  Ap_StrCmd_FuncType Func_Ptr )
{
 8009b54:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}

	if( Ap_StrCmd_Size >= AP_STRCMD_DIC_MAX ) return FALSE;  // 사이즈 오버플로어
 8009b58:	4f2b      	ldr	r7, [pc, #172]	; (8009c08 <Ap_StrCmd_AddCmd+0xb4>)
 8009b5a:	883b      	ldrh	r3, [r7, #0]
 8009b5c:	b29b      	uxth	r3, r3
 8009b5e:	2b13      	cmp	r3, #19
 8009b60:	d84b      	bhi.n	8009bfa <Ap_StrCmd_AddCmd+0xa6>
	
	Ap_StrCmd_StrCopy( Ap_StrCmd_Dic_Ptr[Ap_StrCmd_Size].NameStr, NameStr );
 8009b62:	f8b7 8000 	ldrh.w	r8, [r7]
{
	u16 Size = 0;

	while(1)
	{
		if( Dest[Size] == 0 ) break;
 8009b66:	7804      	ldrb	r4, [r0, #0]
u8 Ap_StrCmd_AddCmd( char *NameStr, char *MenuStr,  Ap_StrCmd_FuncType Func_Ptr )
{

	if( Ap_StrCmd_Size >= AP_STRCMD_DIC_MAX ) return FALSE;  // 사이즈 오버플로어
	
	Ap_StrCmd_StrCopy( Ap_StrCmd_Dic_Ptr[Ap_StrCmd_Size].NameStr, NameStr );
 8009b68:	fa1f f888 	uxth.w	r8, r8
{
	u16 Size = 0;

	while(1)
	{
		if( Dest[Size] == 0 ) break;
 8009b6c:	2c00      	cmp	r4, #0
 8009b6e:	d048      	beq.n	8009c02 <Ap_StrCmd_AddCmd+0xae>
 8009b70:	2400      	movs	r4, #0

		Size++;
 8009b72:	3401      	adds	r4, #1
 8009b74:	b2a4      	uxth	r4, r4
{
	u16 Size = 0;

	while(1)
	{
		if( Dest[Size] == 0 ) break;
 8009b76:	5d03      	ldrb	r3, [r0, r4]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d1fa      	bne.n	8009b72 <Ap_StrCmd_AddCmd+0x1e>
     TITLE   : Ap_StrCmd_AddCmd
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u8 Ap_StrCmd_AddCmd( char *NameStr, char *MenuStr,  Ap_StrCmd_FuncType Func_Ptr )
 8009b7c:	f8df c08c 	ldr.w	ip, [pc, #140]	; 8009c0c <Ap_StrCmd_AddCmd+0xb8>
	u16 Size;
	u16 i;

	Size = Ap_StrCmd_StrLen( Origin );

	for( i=0; i<Size; i++ )
 8009b80:	b144      	cbz	r4, 8009b94 <Ap_StrCmd_AddCmd+0x40>
     TITLE   : Ap_StrCmd_AddCmd
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u8 Ap_StrCmd_AddCmd( char *NameStr, char *MenuStr,  Ap_StrCmd_FuncType Func_Ptr )
 8009b82:	262c      	movs	r6, #44	; 0x2c
 8009b84:	fb06 c608 	mla	r6, r6, r8, ip

	Size = Ap_StrCmd_StrLen( Origin );

	for( i=0; i<Size; i++ )
	{
		Dest[i] = Origin[i];
 8009b88:	5cc5      	ldrb	r5, [r0, r3]
 8009b8a:	54f5      	strb	r5, [r6, r3]
 8009b8c:	3301      	adds	r3, #1
	u16 Size;
	u16 i;

	Size = Ap_StrCmd_StrLen( Origin );

	for( i=0; i<Size; i++ )
 8009b8e:	b29d      	uxth	r5, r3
 8009b90:	42a5      	cmp	r5, r4
 8009b92:	d3f9      	bcc.n	8009b88 <Ap_StrCmd_AddCmd+0x34>
	{
		Dest[i] = Origin[i];
	}
	Dest[i] = 0;
 8009b94:	232c      	movs	r3, #44	; 0x2c
 8009b96:	fb03 4408 	mla	r4, r3, r8, r4
 8009b9a:	2000      	movs	r0, #0
 8009b9c:	f80c 0004 	strb.w	r0, [ip, r4]
{

	if( Ap_StrCmd_Size >= AP_STRCMD_DIC_MAX ) return FALSE;  // 사이즈 오버플로어
	
	Ap_StrCmd_StrCopy( Ap_StrCmd_Dic_Ptr[Ap_StrCmd_Size].NameStr, NameStr );
	Ap_StrCmd_StrCopy( Ap_StrCmd_Dic_Ptr[Ap_StrCmd_Size].MenuStr, MenuStr );
 8009ba0:	f8b7 9000 	ldrh.w	r9, [r7]
{
	u16 Size = 0;

	while(1)
	{
		if( Dest[Size] == 0 ) break;
 8009ba4:	780b      	ldrb	r3, [r1, #0]
{

	if( Ap_StrCmd_Size >= AP_STRCMD_DIC_MAX ) return FALSE;  // 사이즈 오버플로어
	
	Ap_StrCmd_StrCopy( Ap_StrCmd_Dic_Ptr[Ap_StrCmd_Size].NameStr, NameStr );
	Ap_StrCmd_StrCopy( Ap_StrCmd_Dic_Ptr[Ap_StrCmd_Size].MenuStr, MenuStr );
 8009ba6:	fa1f f989 	uxth.w	r9, r9
{
	u16 Size = 0;

	while(1)
	{
		if( Dest[Size] == 0 ) break;
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d027      	beq.n	8009bfe <Ap_StrCmd_AddCmd+0xaa>

		Size++;
 8009bae:	3001      	adds	r0, #1
 8009bb0:	b280      	uxth	r0, r0
{
	u16 Size = 0;

	while(1)
	{
		if( Dest[Size] == 0 ) break;
 8009bb2:	5c0b      	ldrb	r3, [r1, r0]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d1fa      	bne.n	8009bae <Ap_StrCmd_AddCmd+0x5a>
	u16 Size;
	u16 i;

	Size = Ap_StrCmd_StrLen( Origin );

	for( i=0; i<Size; i++ )
 8009bb8:	b158      	cbz	r0, 8009bd2 <Ap_StrCmd_AddCmd+0x7e>
     TITLE   : Ap_StrCmd_AddCmd
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u8 Ap_StrCmd_AddCmd( char *NameStr, char *MenuStr,  Ap_StrCmd_FuncType Func_Ptr )
 8009bba:	f04f 082c 	mov.w	r8, #44	; 0x2c
 8009bbe:	fb08 c809 	mla	r8, r8, r9, ip

	Size = Ap_StrCmd_StrLen( Origin );

	for( i=0; i<Size; i++ )
	{
		Dest[i] = Origin[i];
 8009bc2:	5cce      	ldrb	r6, [r1, r3]
     TITLE   : Ap_StrCmd_AddCmd
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u8 Ap_StrCmd_AddCmd( char *NameStr, char *MenuStr,  Ap_StrCmd_FuncType Func_Ptr )
 8009bc4:	eb08 0503 	add.w	r5, r8, r3
 8009bc8:	3301      	adds	r3, #1
	u16 Size;
	u16 i;

	Size = Ap_StrCmd_StrLen( Origin );

	for( i=0; i<Size; i++ )
 8009bca:	b29c      	uxth	r4, r3
 8009bcc:	4284      	cmp	r4, r0
	{
		Dest[i] = Origin[i];
 8009bce:	752e      	strb	r6, [r5, #20]
	u16 Size;
	u16 i;

	Size = Ap_StrCmd_StrLen( Origin );

	for( i=0; i<Size; i++ )
 8009bd0:	d3f7      	bcc.n	8009bc2 <Ap_StrCmd_AddCmd+0x6e>

	if( Ap_StrCmd_Size >= AP_STRCMD_DIC_MAX ) return FALSE;  // 사이즈 오버플로어
	
	Ap_StrCmd_StrCopy( Ap_StrCmd_Dic_Ptr[Ap_StrCmd_Size].NameStr, NameStr );
	Ap_StrCmd_StrCopy( Ap_StrCmd_Dic_Ptr[Ap_StrCmd_Size].MenuStr, MenuStr );
	AP_STRCMD_DIC_FUNC_SET( Ap_StrCmd_Size, Func_Ptr );
 8009bd2:	883c      	ldrh	r4, [r7, #0]

	for( i=0; i<Size; i++ )
	{
		Dest[i] = Origin[i];
	}
	Dest[i] = 0;
 8009bd4:	232c      	movs	r3, #44	; 0x2c
 8009bd6:	fb03 c909 	mla	r9, r3, r9, ip

	if( Ap_StrCmd_Size >= AP_STRCMD_DIC_MAX ) return FALSE;  // 사이즈 오버플로어
	
	Ap_StrCmd_StrCopy( Ap_StrCmd_Dic_Ptr[Ap_StrCmd_Size].NameStr, NameStr );
	Ap_StrCmd_StrCopy( Ap_StrCmd_Dic_Ptr[Ap_StrCmd_Size].MenuStr, MenuStr );
	AP_STRCMD_DIC_FUNC_SET( Ap_StrCmd_Size, Func_Ptr );
 8009bda:	b2a4      	uxth	r4, r4

	Ap_StrCmd_Size++;
 8009bdc:	8839      	ldrh	r1, [r7, #0]

	if( Ap_StrCmd_Size >= AP_STRCMD_DIC_MAX ) return FALSE;  // 사이즈 오버플로어
	
	Ap_StrCmd_StrCopy( Ap_StrCmd_Dic_Ptr[Ap_StrCmd_Size].NameStr, NameStr );
	Ap_StrCmd_StrCopy( Ap_StrCmd_Dic_Ptr[Ap_StrCmd_Size].MenuStr, MenuStr );
	AP_STRCMD_DIC_FUNC_SET( Ap_StrCmd_Size, Func_Ptr );
 8009bde:	fb03 cc04 	mla	ip, r3, r4, ip

	Ap_StrCmd_Size++;
 8009be2:	3101      	adds	r1, #1

	for( i=0; i<Size; i++ )
	{
		Dest[i] = Origin[i];
	}
	Dest[i] = 0;
 8009be4:	4448      	add	r0, r9
	
	Ap_StrCmd_StrCopy( Ap_StrCmd_Dic_Ptr[Ap_StrCmd_Size].NameStr, NameStr );
	Ap_StrCmd_StrCopy( Ap_StrCmd_Dic_Ptr[Ap_StrCmd_Size].MenuStr, MenuStr );
	AP_STRCMD_DIC_FUNC_SET( Ap_StrCmd_Size, Func_Ptr );

	Ap_StrCmd_Size++;
 8009be6:	b289      	uxth	r1, r1

	for( i=0; i<Size; i++ )
	{
		Dest[i] = Origin[i];
	}
	Dest[i] = 0;
 8009be8:	2300      	movs	r3, #0
 8009bea:	7503      	strb	r3, [r0, #20]

	if( Ap_StrCmd_Size >= AP_STRCMD_DIC_MAX ) return FALSE;  // 사이즈 오버플로어
	
	Ap_StrCmd_StrCopy( Ap_StrCmd_Dic_Ptr[Ap_StrCmd_Size].NameStr, NameStr );
	Ap_StrCmd_StrCopy( Ap_StrCmd_Dic_Ptr[Ap_StrCmd_Size].MenuStr, MenuStr );
	AP_STRCMD_DIC_FUNC_SET( Ap_StrCmd_Size, Func_Ptr );
 8009bec:	f8cc 2028 	str.w	r2, [ip, #40]	; 0x28

	Ap_StrCmd_Size++;
 8009bf0:	8039      	strh	r1, [r7, #0]
 8009bf2:	2001      	movs	r0, #1
	
	return TRUE;
}
 8009bf4:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8009bf8:	4770      	bx	lr
     RET     : void   
---------------------------------------------------------------------------*/
u8 Ap_StrCmd_AddCmd( char *NameStr, char *MenuStr,  Ap_StrCmd_FuncType Func_Ptr )
{

	if( Ap_StrCmd_Size >= AP_STRCMD_DIC_MAX ) return FALSE;  // 사이즈 오버플로어
 8009bfa:	2000      	movs	r0, #0
 8009bfc:	e7fa      	b.n	8009bf4 <Ap_StrCmd_AddCmd+0xa0>
{
	u16 Size = 0;

	while(1)
	{
		if( Dest[Size] == 0 ) break;
 8009bfe:	4618      	mov	r0, r3
 8009c00:	e7e7      	b.n	8009bd2 <Ap_StrCmd_AddCmd+0x7e>
 8009c02:	f8df c008 	ldr.w	ip, [pc, #8]	; 8009c0c <Ap_StrCmd_AddCmd+0xb8>
 8009c06:	e7c5      	b.n	8009b94 <Ap_StrCmd_AddCmd+0x40>
 8009c08:	20000fd8 	.word	0x20000fd8
 8009c0c:	20000be4 	.word	0x20000be4

08009c10 <Ap_StrCmd_Init>:
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_StrCmd_Init( void )
{
 8009c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c12:	4b18      	ldr	r3, [pc, #96]	; (8009c74 <Ap_StrCmd_Init+0x64>)
		
	//----- 명령어 사전 포인터 초기화
	//
	for( i=0; i<AP_STRCMD_DIC_MAX; i++)
	{
		AP_STRCMD_DIC_FUNC(i)   = NULL_FUNC;  // 모두 어떠한 함수도 가르키지 않는다
 8009c14:	2100      	movs	r1, #0
     TITLE   : Ap_StrCmd_Init
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_StrCmd_Init( void )
 8009c16:	f503 725c 	add.w	r2, r3, #880	; 0x370
		
	//----- 명령어 사전 포인터 초기화
	//
	for( i=0; i<AP_STRCMD_DIC_MAX; i++)
	{
		AP_STRCMD_DIC_FUNC(i)   = NULL_FUNC;  // 모두 어떠한 함수도 가르키지 않는다
 8009c1a:	6299      	str	r1, [r3, #40]	; 0x28
 8009c1c:	332c      	adds	r3, #44	; 0x2c
 8009c1e:	2400      	movs	r4, #0
{
	int i;
		
	//----- 명령어 사전 포인터 초기화
	//
	for( i=0; i<AP_STRCMD_DIC_MAX; i++)
 8009c20:	4293      	cmp	r3, r2
 8009c22:	d1fa      	bne.n	8009c1a <Ap_StrCmd_Init+0xa>
	{
		AP_STRCMD_DIC_FUNC(i)   = NULL_FUNC;  // 모두 어떠한 함수도 가르키지 않는다
	}    
		
	Ap_StrCmd_Size     	= 0;				
 8009c24:	4f14      	ldr	r7, [pc, #80]	; (8009c78 <Ap_StrCmd_Init+0x68>)
	Ap_StrCmd_ChSize   	= 0;
	Ap_StrCmd_CmdCheck 	= 0;	
	
	Ap_StrCmd_PutchPtr 	= NULL;
 8009c26:	4e15      	ldr	r6, [pc, #84]	; (8009c7c <Ap_StrCmd_Init+0x6c>)
	for( i=0; i<AP_STRCMD_DIC_MAX; i++)
	{
		AP_STRCMD_DIC_FUNC(i)   = NULL_FUNC;  // 모두 어떠한 함수도 가르키지 않는다
	}    
		
	Ap_StrCmd_Size     	= 0;				
 8009c28:	803c      	strh	r4, [r7, #0]
	Ap_StrCmd_ChSize   	= 0;
 8009c2a:	4f15      	ldr	r7, [pc, #84]	; (8009c80 <Ap_StrCmd_Init+0x70>)
	for( i=0; i<AP_STRCMD_DIC_MAX; i++)
	{
		AP_STRCMD_DIC_FUNC(i)   = NULL_FUNC;  // 모두 어떠한 함수도 가르키지 않는다
	}    
		
	Ap_StrCmd_Size     	= 0;				
 8009c2c:	4623      	mov	r3, r4
	Ap_StrCmd_ChSize   	= 0;
 8009c2e:	803c      	strh	r4, [r7, #0]
	Ap_StrCmd_CmdCheck 	= 0;	
	
	Ap_StrCmd_PutchPtr 	= NULL;
	Ap_StrCmd_PrintPtr 	= NULL;
 8009c30:	4f14      	ldr	r7, [pc, #80]	; (8009c84 <Ap_StrCmd_Init+0x74>)
		
	Ap_StrCmd_Size     	= 0;				
	Ap_StrCmd_ChSize   	= 0;
	Ap_StrCmd_CmdCheck 	= 0;	
	
	Ap_StrCmd_PutchPtr 	= NULL;
 8009c32:	6034      	str	r4, [r6, #0]
	Ap_StrCmd_PrintPtr 	= NULL;
 8009c34:	603c      	str	r4, [r7, #0]
		AP_STRCMD_DIC_FUNC(i)   = NULL_FUNC;  // 모두 어떠한 함수도 가르키지 않는다
	}    
		
	Ap_StrCmd_Size     	= 0;				
	Ap_StrCmd_ChSize   	= 0;
	Ap_StrCmd_CmdCheck 	= 0;	
 8009c36:	4c14      	ldr	r4, [pc, #80]	; (8009c88 <Ap_StrCmd_Init+0x78>)
	Ap_StrCmd_PutchPtr 	= NULL;
	Ap_StrCmd_PrintPtr 	= NULL;
	
	Ap_StrCmd_EchoEnable = FALSE;

	Ap_StrCmd_AddCmd( "HELP", "Menu Help",        Ap_StrCmd_ShowMenuHelp );	
 8009c38:	4d14      	ldr	r5, [pc, #80]	; (8009c8c <Ap_StrCmd_Init+0x7c>)
		AP_STRCMD_DIC_FUNC(i)   = NULL_FUNC;  // 모두 어떠한 함수도 가르키지 않는다
	}    
		
	Ap_StrCmd_Size     	= 0;				
	Ap_StrCmd_ChSize   	= 0;
	Ap_StrCmd_CmdCheck 	= 0;	
 8009c3a:	7023      	strb	r3, [r4, #0]
	
	Ap_StrCmd_PutchPtr 	= NULL;
	Ap_StrCmd_PrintPtr 	= NULL;
	
	Ap_StrCmd_EchoEnable = FALSE;
 8009c3c:	4c14      	ldr	r4, [pc, #80]	; (8009c90 <Ap_StrCmd_Init+0x80>)

	Ap_StrCmd_AddCmd( "HELP", "Menu Help",        Ap_StrCmd_ShowMenuHelp );	
 8009c3e:	4915      	ldr	r1, [pc, #84]	; (8009c94 <Ap_StrCmd_Init+0x84>)
 8009c40:	4a15      	ldr	r2, [pc, #84]	; (8009c98 <Ap_StrCmd_Init+0x88>)
 8009c42:	4816      	ldr	r0, [pc, #88]	; (8009c9c <Ap_StrCmd_Init+0x8c>)
	Ap_StrCmd_CmdCheck 	= 0;	
	
	Ap_StrCmd_PutchPtr 	= NULL;
	Ap_StrCmd_PrintPtr 	= NULL;
	
	Ap_StrCmd_EchoEnable = FALSE;
 8009c44:	7023      	strb	r3, [r4, #0]

	Ap_StrCmd_AddCmd( "HELP", "Menu Help",        Ap_StrCmd_ShowMenuHelp );	
 8009c46:	47a8      	blx	r5
	Ap_StrCmd_AddCmd( "MENU", "Display Menu",     Ap_StrCmd_ShowMenu );
 8009c48:	4915      	ldr	r1, [pc, #84]	; (8009ca0 <Ap_StrCmd_Init+0x90>)
 8009c4a:	4a16      	ldr	r2, [pc, #88]	; (8009ca4 <Ap_StrCmd_Init+0x94>)
 8009c4c:	4816      	ldr	r0, [pc, #88]	; (8009ca8 <Ap_StrCmd_Init+0x98>)
 8009c4e:	47a8      	blx	r5
	Ap_StrCmd_AddCmd( "INFO", "Info",     		  Ap_StrCmd_ShowInfo );
 8009c50:	4916      	ldr	r1, [pc, #88]	; (8009cac <Ap_StrCmd_Init+0x9c>)
 8009c52:	4a17      	ldr	r2, [pc, #92]	; (8009cb0 <Ap_StrCmd_Init+0xa0>)
 8009c54:	4817      	ldr	r0, [pc, #92]	; (8009cb4 <Ap_StrCmd_Init+0xa4>)
 8009c56:	47a8      	blx	r5
	Ap_StrCmd_AddCmd( "ECHO", "Echo",     		  Ap_StrCmd_Echo );
 8009c58:	4917      	ldr	r1, [pc, #92]	; (8009cb8 <Ap_StrCmd_Init+0xa8>)
 8009c5a:	4a18      	ldr	r2, [pc, #96]	; (8009cbc <Ap_StrCmd_Init+0xac>)
 8009c5c:	4818      	ldr	r0, [pc, #96]	; (8009cc0 <Ap_StrCmd_Init+0xb0>)
 8009c5e:	47a8      	blx	r5


	Ap_StrCmd_Q_Init();
 8009c60:	4b18      	ldr	r3, [pc, #96]	; (8009cc4 <Ap_StrCmd_Init+0xb4>)
 8009c62:	4798      	blx	r3
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_StrCmd_SetFunc_Putch( void (*FuncPtr)( char ) )
{
	Ap_StrCmd_PutchPtr = FuncPtr;
 8009c64:	4b18      	ldr	r3, [pc, #96]	; (8009cc8 <Ap_StrCmd_Init+0xb8>)

	//-- 통신 함수 설정 
	//
	Ap_StrCmd_SetFunc_Putch( Ap_StrCmd_PutFunc );

	Hw_Uart_SetReceiveFuncISR( HW_USE_UART_CH_STRCMD, Ap_StrCmd_CallBack_RxdISR );
 8009c66:	2001      	movs	r0, #1
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_StrCmd_SetFunc_Putch( void (*FuncPtr)( char ) )
{
	Ap_StrCmd_PutchPtr = FuncPtr;
 8009c68:	6033      	str	r3, [r6, #0]

	//-- 통신 함수 설정 
	//
	Ap_StrCmd_SetFunc_Putch( Ap_StrCmd_PutFunc );

	Hw_Uart_SetReceiveFuncISR( HW_USE_UART_CH_STRCMD, Ap_StrCmd_CallBack_RxdISR );
 8009c6a:	4918      	ldr	r1, [pc, #96]	; (8009ccc <Ap_StrCmd_Init+0xbc>)
 8009c6c:	4b18      	ldr	r3, [pc, #96]	; (8009cd0 <Ap_StrCmd_Init+0xc0>)
 8009c6e:	4798      	blx	r3
 8009c70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c72:	bf00      	nop
 8009c74:	20000be4 	.word	0x20000be4
 8009c78:	20000fd8 	.word	0x20000fd8
 8009c7c:	20000fdc 	.word	0x20000fdc
 8009c80:	20000f90 	.word	0x20000f90
 8009c84:	20000fd4 	.word	0x20000fd4
 8009c88:	20000f92 	.word	0x20000f92
 8009c8c:	08009b55 	.word	0x08009b55
 8009c90:	20000a00 	.word	0x20000a00
 8009c94:	0800dca8 	.word	0x0800dca8
 8009c98:	08009d09 	.word	0x08009d09
 8009c9c:	0800dca0 	.word	0x0800dca0
 8009ca0:	0800dcbc 	.word	0x0800dcbc
 8009ca4:	08009d7d 	.word	0x08009d7d
 8009ca8:	0800dcb4 	.word	0x0800dcb4
 8009cac:	0800dcd4 	.word	0x0800dcd4
 8009cb0:	08009e91 	.word	0x08009e91
 8009cb4:	0800dccc 	.word	0x0800dccc
 8009cb8:	0800dce4 	.word	0x0800dce4
 8009cbc:	08009e19 	.word	0x08009e19
 8009cc0:	0800dcdc 	.word	0x0800dcdc
 8009cc4:	08009fed 	.word	0x08009fed
 8009cc8:	08009ab5 	.word	0x08009ab5
 8009ccc:	08009ac9 	.word	0x08009ac9
 8009cd0:	0800b069 	.word	0x0800b069

08009cd4 <Ap_StrCmd_Print>:
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_StrCmd_Print( char *Buffer )
{
 8009cd4:	b538      	push	{r3, r4, r5, lr}
	while( *Buffer != '\0') 
 8009cd6:	7803      	ldrb	r3, [r0, #0]
 8009cd8:	b193      	cbz	r3, 8009d00 <Ap_StrCmd_Print+0x2c>
 8009cda:	4d0a      	ldr	r5, [pc, #40]	; (8009d04 <Ap_StrCmd_Print+0x30>)
     TITLE   : Ap_StrCmd_Print
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_StrCmd_Print( char *Buffer )
 8009cdc:	1c44      	adds	r4, r0, #1
 8009cde:	e007      	b.n	8009cf0 <Ap_StrCmd_Print+0x1c>
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_StrCmd_Putch( char Ch )
{
	if( Ap_StrCmd_PutchPtr != NULL_FUNC )
 8009ce0:	682b      	ldr	r3, [r5, #0]
		if( *Buffer == '\n' )
		{
			Ap_StrCmd_Putch( '\r' );
		}

		Ap_StrCmd_Putch( *Buffer ) ;                              		
 8009ce2:	f814 0c01 	ldrb.w	r0, [r4, #-1]
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_StrCmd_Putch( char Ch )
{
	if( Ap_StrCmd_PutchPtr != NULL_FUNC )
 8009ce6:	b103      	cbz	r3, 8009cea <Ap_StrCmd_Print+0x16>
	{
		(*Ap_StrCmd_PutchPtr)( Ch );
 8009ce8:	4798      	blx	r3
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_StrCmd_Print( char *Buffer )
{
	while( *Buffer != '\0') 
 8009cea:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009cee:	b13b      	cbz	r3, 8009d00 <Ap_StrCmd_Print+0x2c>
	{
		if( *Buffer == '\n' )
 8009cf0:	2b0a      	cmp	r3, #10
 8009cf2:	d1f5      	bne.n	8009ce0 <Ap_StrCmd_Print+0xc>
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_StrCmd_Putch( char Ch )
{
	if( Ap_StrCmd_PutchPtr != NULL_FUNC )
 8009cf4:	682b      	ldr	r3, [r5, #0]
	{
		(*Ap_StrCmd_PutchPtr)( Ch );
 8009cf6:	200d      	movs	r0, #13
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_StrCmd_Putch( char Ch )
{
	if( Ap_StrCmd_PutchPtr != NULL_FUNC )
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d0f6      	beq.n	8009cea <Ap_StrCmd_Print+0x16>
	{
		(*Ap_StrCmd_PutchPtr)( Ch );
 8009cfc:	4798      	blx	r3
 8009cfe:	e7ef      	b.n	8009ce0 <Ap_StrCmd_Print+0xc>
 8009d00:	bd38      	pop	{r3, r4, r5, pc}
 8009d02:	bf00      	nop
 8009d04:	20000fdc 	.word	0x20000fdc

08009d08 <Ap_StrCmd_ShowMenuHelp>:
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_StrCmd_ShowMenuHelp( u8 OpCode,  void *arg )
{
 8009d08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u16 Ap_StrCmd_GetSize( void )
{
	return Ap_StrCmd_Size;
 8009d0c:	4e13      	ldr	r6, [pc, #76]	; (8009d5c <Ap_StrCmd_ShowMenuHelp+0x54>)
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_StrCmd_ShowMenuHelp( u8 OpCode,  void *arg )
{
 8009d0e:	b09d      	sub	sp, #116	; 0x74
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u16 Ap_StrCmd_GetSize( void )
{
	return Ap_StrCmd_Size;
 8009d10:	8833      	ldrh	r3, [r6, #0]
 8009d12:	b29b      	uxth	r3, r3
	char StrBuf[100];
	
	arg = arg;

	
	for( i=0; i<Ap_StrCmd_GetSize(); i++ )
 8009d14:	b1c3      	cbz	r3, 8009d48 <Ap_StrCmd_ShowMenuHelp+0x40>
 8009d16:	4d12      	ldr	r5, [pc, #72]	; (8009d60 <Ap_StrCmd_ShowMenuHelp+0x58>)
 8009d18:	f8df 9058 	ldr.w	r9, [pc, #88]	; 8009d74 <Ap_StrCmd_ShowMenuHelp+0x6c>
 8009d1c:	f8df 8058 	ldr.w	r8, [pc, #88]	; 8009d78 <Ap_StrCmd_ShowMenuHelp+0x70>
 8009d20:	2400      	movs	r4, #0
	{
		Lb_sprintf( StrBuf, "%c<%s> - %s\n", AP_STRCMD_FRAME_PRINT, Ap_StrCmd_Dic_Ptr[i].NameStr, Ap_StrCmd_Dic_Ptr[i].MenuStr );			
 8009d22:	272c      	movs	r7, #44	; 0x2c
 8009d24:	fb07 f304 	mul.w	r3, r7, r4
 8009d28:	18e8      	adds	r0, r5, r3
 8009d2a:	3014      	adds	r0, #20
 8009d2c:	222a      	movs	r2, #42	; 0x2a
 8009d2e:	18eb      	adds	r3, r5, r3
 8009d30:	490c      	ldr	r1, [pc, #48]	; (8009d64 <Ap_StrCmd_ShowMenuHelp+0x5c>)
 8009d32:	9000      	str	r0, [sp, #0]
 8009d34:	a803      	add	r0, sp, #12
 8009d36:	47c8      	blx	r9
		Ap_StrCmd_Print( StrBuf );
 8009d38:	a803      	add	r0, sp, #12
 8009d3a:	47c0      	blx	r8
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u16 Ap_StrCmd_GetSize( void )
{
	return Ap_StrCmd_Size;
 8009d3c:	8833      	ldrh	r3, [r6, #0]
	char StrBuf[100];
	
	arg = arg;

	
	for( i=0; i<Ap_StrCmd_GetSize(); i++ )
 8009d3e:	3401      	adds	r4, #1
 8009d40:	b2a4      	uxth	r4, r4
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u16 Ap_StrCmd_GetSize( void )
{
	return Ap_StrCmd_Size;
 8009d42:	b29b      	uxth	r3, r3
	char StrBuf[100];
	
	arg = arg;

	
	for( i=0; i<Ap_StrCmd_GetSize(); i++ )
 8009d44:	429c      	cmp	r4, r3
 8009d46:	d3ed      	bcc.n	8009d24 <Ap_StrCmd_ShowMenuHelp+0x1c>
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_StrCmd_CmdClear( void )
{
	Ap_StrCmd_CmdCheck  = 0;
 8009d48:	4a07      	ldr	r2, [pc, #28]	; (8009d68 <Ap_StrCmd_ShowMenuHelp+0x60>)
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	7013      	strb	r3, [r2, #0]
	Ap_StrCmd_DlyCheck  = 0;
 8009d4e:	4a07      	ldr	r2, [pc, #28]	; (8009d6c <Ap_StrCmd_ShowMenuHelp+0x64>)
 8009d50:	7013      	strb	r3, [r2, #0]
	Ap_StrCmd_LoopCheck = 0;	
 8009d52:	4a07      	ldr	r2, [pc, #28]	; (8009d70 <Ap_StrCmd_ShowMenuHelp+0x68>)
 8009d54:	7013      	strb	r3, [r2, #0]
		Ap_StrCmd_Print( StrBuf );
	}			
	
	Ap_StrCmd_CmdClear();

}
 8009d56:	b01d      	add	sp, #116	; 0x74
 8009d58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009d5c:	20000fd8 	.word	0x20000fd8
 8009d60:	20000be4 	.word	0x20000be4
 8009d64:	0800dcec 	.word	0x0800dcec
 8009d68:	20000f92 	.word	0x20000f92
 8009d6c:	20000fd0 	.word	0x20000fd0
 8009d70:	20000fe0 	.word	0x20000fe0
 8009d74:	0800aabd 	.word	0x0800aabd
 8009d78:	08009cd5 	.word	0x08009cd5

08009d7c <Ap_StrCmd_ShowMenu>:
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_StrCmd_ShowMenu( u8 OpCode, void *arg )
{
 8009d7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u16 Ap_StrCmd_GetSize( void )
{
	return Ap_StrCmd_Size;
 8009d80:	4d11      	ldr	r5, [pc, #68]	; (8009dc8 <Ap_StrCmd_ShowMenu+0x4c>)
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_StrCmd_ShowMenu( u8 OpCode, void *arg )
{
 8009d82:	b0b3      	sub	sp, #204	; 0xcc
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u16 Ap_StrCmd_GetSize( void )
{
	return Ap_StrCmd_Size;
 8009d84:	882b      	ldrh	r3, [r5, #0]
 8009d86:	b29b      	uxth	r3, r3
	char StrBuf[200];
	
	OpCode = OpCode;
	arg = arg;
	
	for( i=0; i<Ap_StrCmd_GetSize(); i++ )
 8009d88:	b1a3      	cbz	r3, 8009db4 <Ap_StrCmd_ShowMenu+0x38>
 8009d8a:	f8df 9054 	ldr.w	r9, [pc, #84]	; 8009de0 <Ap_StrCmd_ShowMenu+0x64>
 8009d8e:	f8df 8054 	ldr.w	r8, [pc, #84]	; 8009de4 <Ap_StrCmd_ShowMenu+0x68>
 8009d92:	4f0e      	ldr	r7, [pc, #56]	; (8009dcc <Ap_StrCmd_ShowMenu+0x50>)
 8009d94:	2400      	movs	r4, #0
	{
		Lb_sprintf( StrBuf, "%c%s\n", AP_STRCMD_FRAME_PRINT, Ap_StrCmd_Dic_Ptr[i].NameStr );
 8009d96:	262c      	movs	r6, #44	; 0x2c
 8009d98:	fb06 9304 	mla	r3, r6, r4, r9
 8009d9c:	222a      	movs	r2, #42	; 0x2a
 8009d9e:	490c      	ldr	r1, [pc, #48]	; (8009dd0 <Ap_StrCmd_ShowMenu+0x54>)
 8009da0:	4668      	mov	r0, sp
 8009da2:	47c0      	blx	r8
		Ap_StrCmd_Print( StrBuf );
 8009da4:	4668      	mov	r0, sp
 8009da6:	47b8      	blx	r7
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u16 Ap_StrCmd_GetSize( void )
{
	return Ap_StrCmd_Size;
 8009da8:	882b      	ldrh	r3, [r5, #0]
	char StrBuf[200];
	
	OpCode = OpCode;
	arg = arg;
	
	for( i=0; i<Ap_StrCmd_GetSize(); i++ )
 8009daa:	3401      	adds	r4, #1
 8009dac:	b2a4      	uxth	r4, r4
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u16 Ap_StrCmd_GetSize( void )
{
	return Ap_StrCmd_Size;
 8009dae:	b29b      	uxth	r3, r3
	char StrBuf[200];
	
	OpCode = OpCode;
	arg = arg;
	
	for( i=0; i<Ap_StrCmd_GetSize(); i++ )
 8009db0:	429c      	cmp	r4, r3
 8009db2:	d3f1      	bcc.n	8009d98 <Ap_StrCmd_ShowMenu+0x1c>
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_StrCmd_CmdClear( void )
{
	Ap_StrCmd_CmdCheck  = 0;
 8009db4:	4a07      	ldr	r2, [pc, #28]	; (8009dd4 <Ap_StrCmd_ShowMenu+0x58>)
 8009db6:	2300      	movs	r3, #0
 8009db8:	7013      	strb	r3, [r2, #0]
	Ap_StrCmd_DlyCheck  = 0;
 8009dba:	4a07      	ldr	r2, [pc, #28]	; (8009dd8 <Ap_StrCmd_ShowMenu+0x5c>)
 8009dbc:	7013      	strb	r3, [r2, #0]
	Ap_StrCmd_LoopCheck = 0;	
 8009dbe:	4a07      	ldr	r2, [pc, #28]	; (8009ddc <Ap_StrCmd_ShowMenu+0x60>)
 8009dc0:	7013      	strb	r3, [r2, #0]
		Lb_sprintf( StrBuf, "%c%s\n", AP_STRCMD_FRAME_PRINT, Ap_StrCmd_Dic_Ptr[i].NameStr );
		Ap_StrCmd_Print( StrBuf );
	}			

	Ap_StrCmd_CmdClear();
}
 8009dc2:	b033      	add	sp, #204	; 0xcc
 8009dc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009dc8:	20000fd8 	.word	0x20000fd8
 8009dcc:	08009cd5 	.word	0x08009cd5
 8009dd0:	0800dcfc 	.word	0x0800dcfc
 8009dd4:	20000f92 	.word	0x20000f92
 8009dd8:	20000fd0 	.word	0x20000fd0
 8009ddc:	20000fe0 	.word	0x20000fe0
 8009de0:	20000be4 	.word	0x20000be4
 8009de4:	0800aabd 	.word	0x0800aabd

08009de8 <Ap_StrCmd_Printf>:
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_StrCmd_Printf( char *format, ... )
{
 8009de8:	b40f      	push	{r0, r1, r2, r3}
 8009dea:	b500      	push	{lr}
 8009dec:	b0b3      	sub	sp, #204	; 0xcc
	char Str[200];
	Lb_va_list ap;
	
	Lb_va_start( ap, format );

	Lb_vsprintf( Str, format, ap );	
 8009dee:	aa34      	add	r2, sp, #208	; 0xd0
 8009df0:	f64a 33c1 	movw	r3, #43969	; 0xabc1
 8009df4:	4668      	mov	r0, sp
 8009df6:	f852 1b04 	ldr.w	r1, [r2], #4
 8009dfa:	f6c0 0300 	movt	r3, #2048	; 0x800
 8009dfe:	4798      	blx	r3

	Lb_va_end(ap);	
	
	Ap_StrCmd_Print(Str);
 8009e00:	f649 43d5 	movw	r3, #40149	; 0x9cd5
 8009e04:	4668      	mov	r0, sp
 8009e06:	f6c0 0300 	movt	r3, #2048	; 0x800
 8009e0a:	4798      	blx	r3
}
 8009e0c:	b033      	add	sp, #204	; 0xcc
 8009e0e:	f85d eb04 	ldr.w	lr, [sp], #4
 8009e12:	b004      	add	sp, #16
 8009e14:	4770      	bx	lr
 8009e16:	bf00      	nop

08009e18 <Ap_StrCmd_Echo>:
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_StrCmd_Echo( u8 OpCode,  void *arg )
{
 8009e18:	b510      	push	{r4, lr}
 8009e1a:	b086      	sub	sp, #24
	char Arg1[10];

	OpCode = OpCode;
	arg = arg;

	sscanf(arg, "%s %s", CmdMain, Arg1);
 8009e1c:	4608      	mov	r0, r1
 8009e1e:	466a      	mov	r2, sp
 8009e20:	4910      	ldr	r1, [pc, #64]	; (8009e64 <Ap_StrCmd_Echo+0x4c>)
 8009e22:	ab03      	add	r3, sp, #12
 8009e24:	4c10      	ldr	r4, [pc, #64]	; (8009e68 <Ap_StrCmd_Echo+0x50>)
 8009e26:	47a0      	blx	r4

	if( strncmp( Arg1, "ON", 2 ) == 0 )
 8009e28:	a803      	add	r0, sp, #12
 8009e2a:	4910      	ldr	r1, [pc, #64]	; (8009e6c <Ap_StrCmd_Echo+0x54>)
 8009e2c:	2202      	movs	r2, #2
 8009e2e:	4b10      	ldr	r3, [pc, #64]	; (8009e70 <Ap_StrCmd_Echo+0x58>)
 8009e30:	4798      	blx	r3
 8009e32:	b178      	cbz	r0, 8009e54 <Ap_StrCmd_Echo+0x3c>
		Ap_StrCmd_EchoEnable = TRUE;
		Ap_StrCmd_Printf("%cEcho on\n", AP_STRCMD_FRAME_PRINT);
	}
	else
	{
		Ap_StrCmd_EchoEnable = FALSE;
 8009e34:	4b0f      	ldr	r3, [pc, #60]	; (8009e74 <Ap_StrCmd_Echo+0x5c>)
 8009e36:	2200      	movs	r2, #0
 8009e38:	701a      	strb	r2, [r3, #0]
		Ap_StrCmd_Printf("%cEcho off\n", AP_STRCMD_FRAME_PRINT);	
 8009e3a:	480f      	ldr	r0, [pc, #60]	; (8009e78 <Ap_StrCmd_Echo+0x60>)
 8009e3c:	212a      	movs	r1, #42	; 0x2a
 8009e3e:	4b0f      	ldr	r3, [pc, #60]	; (8009e7c <Ap_StrCmd_Echo+0x64>)
 8009e40:	4798      	blx	r3
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_StrCmd_CmdClear( void )
{
	Ap_StrCmd_CmdCheck  = 0;
 8009e42:	4a0f      	ldr	r2, [pc, #60]	; (8009e80 <Ap_StrCmd_Echo+0x68>)
 8009e44:	2300      	movs	r3, #0
 8009e46:	7013      	strb	r3, [r2, #0]
	Ap_StrCmd_DlyCheck  = 0;
 8009e48:	4a0e      	ldr	r2, [pc, #56]	; (8009e84 <Ap_StrCmd_Echo+0x6c>)
 8009e4a:	7013      	strb	r3, [r2, #0]
	Ap_StrCmd_LoopCheck = 0;	
 8009e4c:	4a0e      	ldr	r2, [pc, #56]	; (8009e88 <Ap_StrCmd_Echo+0x70>)
 8009e4e:	7013      	strb	r3, [r2, #0]
		Ap_StrCmd_EchoEnable = FALSE;
		Ap_StrCmd_Printf("%cEcho off\n", AP_STRCMD_FRAME_PRINT);	
	}

	Ap_StrCmd_CmdClear();
}
 8009e50:	b006      	add	sp, #24
 8009e52:	bd10      	pop	{r4, pc}

	sscanf(arg, "%s %s", CmdMain, Arg1);

	if( strncmp( Arg1, "ON", 2 ) == 0 )
	{
		Ap_StrCmd_EchoEnable = TRUE;
 8009e54:	4b07      	ldr	r3, [pc, #28]	; (8009e74 <Ap_StrCmd_Echo+0x5c>)
 8009e56:	2201      	movs	r2, #1
 8009e58:	701a      	strb	r2, [r3, #0]
		Ap_StrCmd_Printf("%cEcho on\n", AP_STRCMD_FRAME_PRINT);
 8009e5a:	480c      	ldr	r0, [pc, #48]	; (8009e8c <Ap_StrCmd_Echo+0x74>)
 8009e5c:	212a      	movs	r1, #42	; 0x2a
 8009e5e:	4b07      	ldr	r3, [pc, #28]	; (8009e7c <Ap_StrCmd_Echo+0x64>)
 8009e60:	4798      	blx	r3
 8009e62:	e7ee      	b.n	8009e42 <Ap_StrCmd_Echo+0x2a>
 8009e64:	0800dd04 	.word	0x0800dd04
 8009e68:	08000009 	.word	0x08000009
 8009e6c:	0800dd0c 	.word	0x0800dd0c
 8009e70:	08000165 	.word	0x08000165
 8009e74:	20000a00 	.word	0x20000a00
 8009e78:	0800dd1c 	.word	0x0800dd1c
 8009e7c:	08009de9 	.word	0x08009de9
 8009e80:	20000f92 	.word	0x20000f92
 8009e84:	20000fd0 	.word	0x20000fd0
 8009e88:	20000fe0 	.word	0x20000fe0
 8009e8c:	0800dd10 	.word	0x0800dd10

08009e90 <Ap_StrCmd_ShowInfo>:
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_StrCmd_ShowInfo( u8 OpCode,  void *arg )
{
 8009e90:	b538      	push	{r3, r4, r5, lr}
	OpCode = OpCode;
	arg = arg;

	Ap_StrCmd_Printf( "%c----------------------------------------- \r\n", AP_STRCMD_FRAME_PRINT );
 8009e92:	f64d 5528 	movw	r5, #56616	; 0xdd28
 8009e96:	f6c0 0500 	movt	r5, #2048	; 0x800
 8009e9a:	f649 54e9 	movw	r4, #40425	; 0x9de9
 8009e9e:	f6c0 0400 	movt	r4, #2048	; 0x800
 8009ea2:	4628      	mov	r0, r5
 8009ea4:	212a      	movs	r1, #42	; 0x2a
 8009ea6:	47a0      	blx	r4
	Ap_StrCmd_Printf( "%c             Ap_StrCmd v0.1               \r\n", AP_STRCMD_FRAME_PRINT );
 8009ea8:	f64d 5058 	movw	r0, #56664	; 0xdd58
 8009eac:	f6c0 0000 	movt	r0, #2048	; 0x800
 8009eb0:	212a      	movs	r1, #42	; 0x2a
 8009eb2:	47a0      	blx	r4
	Ap_StrCmd_Printf( "%c                                          \r\n", AP_STRCMD_FRAME_PRINT );
 8009eb4:	f64d 5088 	movw	r0, #56712	; 0xdd88
 8009eb8:	f6c0 0000 	movt	r0, #2048	; 0x800
 8009ebc:	212a      	movs	r1, #42	; 0x2a
 8009ebe:	47a0      	blx	r4
	Ap_StrCmd_Printf( "%c        made by : Cho Han Cheol           \r\n", AP_STRCMD_FRAME_PRINT );	
 8009ec0:	f64d 50b8 	movw	r0, #56760	; 0xddb8
 8009ec4:	212a      	movs	r1, #42	; 0x2a
 8009ec6:	f6c0 0000 	movt	r0, #2048	; 0x800
 8009eca:	47a0      	blx	r4
	Ap_StrCmd_Printf( "%c----------------------------------------- \r\n", AP_STRCMD_FRAME_PRINT );
 8009ecc:	4628      	mov	r0, r5
 8009ece:	212a      	movs	r1, #42	; 0x2a
 8009ed0:	47a0      	blx	r4
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_StrCmd_CmdClear( void )
{
	Ap_StrCmd_CmdCheck  = 0;
 8009ed2:	f640 7092 	movw	r0, #3986	; 0xf92
	Ap_StrCmd_DlyCheck  = 0;
 8009ed6:	f640 71d0 	movw	r1, #4048	; 0xfd0
	Ap_StrCmd_LoopCheck = 0;	
 8009eda:	f640 73e0 	movw	r3, #4064	; 0xfe0
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_StrCmd_CmdClear( void )
{
	Ap_StrCmd_CmdCheck  = 0;
 8009ede:	2200      	movs	r2, #0
 8009ee0:	f2c2 0000 	movt	r0, #8192	; 0x2000
	Ap_StrCmd_DlyCheck  = 0;
 8009ee4:	f2c2 0100 	movt	r1, #8192	; 0x2000
	Ap_StrCmd_LoopCheck = 0;	
 8009ee8:	f2c2 0300 	movt	r3, #8192	; 0x2000
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
void Ap_StrCmd_CmdClear( void )
{
	Ap_StrCmd_CmdCheck  = 0;
 8009eec:	7002      	strb	r2, [r0, #0]
	Ap_StrCmd_DlyCheck  = 0;
 8009eee:	700a      	strb	r2, [r1, #0]
	Ap_StrCmd_LoopCheck = 0;	
 8009ef0:	701a      	strb	r2, [r3, #0]
 8009ef2:	bd38      	pop	{r3, r4, r5, pc}

08009ef4 <Ap_StrCmd_ExeFunc>:
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
s16 Ap_StrCmd_ExeFunc( void )
{
 8009ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ef8:	b091      	sub	sp, #68	; 0x44
	u16 j;

	AP_STRCMD_CMD_OBJ CmdMsg;
	
	
	Disable_ISR();
 8009efa:	b672      	cpsid	i
	Ap_StrCmd_Q_Pop( AP_STRCMD_Q_RX_CH, &CmdMsg );
 8009efc:	2000      	movs	r0, #0
 8009efe:	a901      	add	r1, sp, #4
 8009f00:	4b2f      	ldr	r3, [pc, #188]	; (8009fc0 <Ap_StrCmd_ExeFunc+0xcc>)
 8009f02:	4798      	blx	r3
	Enable_ISR();
 8009f04:	b662      	cpsie	i
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u16 Ap_StrCmd_GetSize( void )
{
	return Ap_StrCmd_Size;
 8009f06:	4b2f      	ldr	r3, [pc, #188]	; (8009fc4 <Ap_StrCmd_ExeFunc+0xd0>)
 8009f08:	f8b3 8000 	ldrh.w	r8, [r3]
 8009f0c:	fa1f f888 	uxth.w	r8, r8
	Ap_StrCmd_Q_Pop( AP_STRCMD_Q_RX_CH, &CmdMsg );
	Enable_ISR();
	
	CmdSize = Ap_StrCmd_GetSize();
	
	for( i=0; i<CmdSize; i++ )
 8009f10:	f1b8 0f00 	cmp.w	r8, #0
 8009f14:	d049      	beq.n	8009faa <Ap_StrCmd_ExeFunc+0xb6>
 8009f16:	4b2c      	ldr	r3, [pc, #176]	; (8009fc8 <Ap_StrCmd_ExeFunc+0xd4>)
 8009f18:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 8009fcc <Ap_StrCmd_ExeFunc+0xd8>
 8009f1c:	f04f 0b00 	mov.w	fp, #0
 8009f20:	681c      	ldr	r4, [r3, #0]
 8009f22:	4655      	mov	r5, sl
 8009f24:	465e      	mov	r6, fp
{
	u16 Size = 0;

	while(1)
	{
		if( Dest[Size] == 0 ) break;
 8009f26:	272c      	movs	r7, #44	; 0x2c
 8009f28:	782b      	ldrb	r3, [r5, #0]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d041      	beq.n	8009fb2 <Ap_StrCmd_ExeFunc+0xbe>
 8009f2e:	fb07 f10b 	mul.w	r1, r7, fp
 8009f32:	2300      	movs	r3, #0

		Size++;
 8009f34:	3301      	adds	r3, #1
 8009f36:	b29b      	uxth	r3, r3
{
	u16 Size = 0;

	while(1)
	{
		if( Dest[Size] == 0 ) break;
 8009f38:	18ca      	adds	r2, r1, r3
 8009f3a:	f81a 2002 	ldrb.w	r2, [sl, r2]
 8009f3e:	4699      	mov	r9, r3
 8009f40:	2a00      	cmp	r2, #0
 8009f42:	d1f7      	bne.n	8009f34 <Ap_StrCmd_ExeFunc+0x40>
	CmdSize = Ap_StrCmd_GetSize();
	
	for( i=0; i<CmdSize; i++ )
	{
		CmdStrSize = Ap_StrCmd_StrLen( Ap_StrCmd_Dic_Ptr[i].NameStr );
		CmdBufStrSize = strlen( (char *)CmdMsg.Str );
 8009f44:	f240 1255 	movw	r2, #341	; 0x155
 8009f48:	a801      	add	r0, sp, #4
 8009f4a:	f6c0 0200 	movt	r2, #2048	; 0x800
 8009f4e:	4790      	blx	r2
 8009f50:	b280      	uxth	r0, r0
		
		for( j=0; j<CmdBufStrSize; j++ )
 8009f52:	b1b0      	cbz	r0, 8009f82 <Ap_StrCmd_ExeFunc+0x8e>
     TITLE   : Ap_StrCmd_ExeFunc
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
s16 Ap_StrCmd_ExeFunc( void )
 8009f54:	f100 3eff 	add.w	lr, r0, #4294967295	; 0xffffffff
 8009f58:	fa1f fe8e 	uxth.w	lr, lr
 8009f5c:	f10d 0205 	add.w	r2, sp, #5
 8009f60:	ab01      	add	r3, sp, #4
 8009f62:	4496      	add	lr, r2
		CmdStrSize = Ap_StrCmd_StrLen( Ap_StrCmd_Dic_Ptr[i].NameStr );
		CmdBufStrSize = strlen( (char *)CmdMsg.Str );
		
		for( j=0; j<CmdBufStrSize; j++ )
		{
			CmdMsg.Str[j] = toupper( CmdMsg.Str[j] );
 8009f64:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f68:	18a1      	adds	r1, r4, r2
 8009f6a:	7848      	ldrb	r0, [r1, #1]
 8009f6c:	4611      	mov	r1, r2
 8009f6e:	f000 0003 	and.w	r0, r0, #3
 8009f72:	2802      	cmp	r0, #2
 8009f74:	bf08      	it	eq
 8009f76:	f1a2 0120 	subeq.w	r1, r2, #32
	for( i=0; i<CmdSize; i++ )
	{
		CmdStrSize = Ap_StrCmd_StrLen( Ap_StrCmd_Dic_Ptr[i].NameStr );
		CmdBufStrSize = strlen( (char *)CmdMsg.Str );
		
		for( j=0; j<CmdBufStrSize; j++ )
 8009f7a:	4573      	cmp	r3, lr
		{
			CmdMsg.Str[j] = toupper( CmdMsg.Str[j] );
 8009f7c:	f803 1c01 	strb.w	r1, [r3, #-1]
	for( i=0; i<CmdSize; i++ )
	{
		CmdStrSize = Ap_StrCmd_StrLen( Ap_StrCmd_Dic_Ptr[i].NameStr );
		CmdBufStrSize = strlen( (char *)CmdMsg.Str );
		
		for( j=0; j<CmdBufStrSize; j++ )
 8009f80:	d1f0      	bne.n	8009f64 <Ap_StrCmd_ExeFunc+0x70>
		{
			CmdMsg.Str[j] = toupper( CmdMsg.Str[j] );
		}
		
		CmdCheck = strncmp( Ap_StrCmd_Dic_Ptr[i].NameStr, (char *)CmdMsg.Str, CmdStrSize );
 8009f82:	f240 1365 	movw	r3, #357	; 0x165
 8009f86:	fb07 a00b 	mla	r0, r7, fp, sl
 8009f8a:	a901      	add	r1, sp, #4
 8009f8c:	464a      	mov	r2, r9
 8009f8e:	f6c0 0300 	movt	r3, #2048	; 0x800
 8009f92:	4798      	blx	r3
		
		
		if( CmdCheck == 0 && Ap_StrCmd_Dic_Ptr[i].Func_Ptr != NULL )
 8009f94:	b200      	sxth	r0, r0
 8009f96:	b908      	cbnz	r0, 8009f9c <Ap_StrCmd_ExeFunc+0xa8>
 8009f98:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8009f9a:	b963      	cbnz	r3, 8009fb6 <Ap_StrCmd_ExeFunc+0xc2>
 8009f9c:	f10b 0b01 	add.w	fp, fp, #1
	Ap_StrCmd_Q_Pop( AP_STRCMD_Q_RX_CH, &CmdMsg );
	Enable_ISR();
	
	CmdSize = Ap_StrCmd_GetSize();
	
	for( i=0; i<CmdSize; i++ )
 8009fa0:	fa1f f68b 	uxth.w	r6, fp
 8009fa4:	352c      	adds	r5, #44	; 0x2c
 8009fa6:	45b0      	cmp	r8, r6
 8009fa8:	d8be      	bhi.n	8009f28 <Ap_StrCmd_ExeFunc+0x34>
		}
	}
	
	
	return 0;
}
 8009faa:	2000      	movs	r0, #0
 8009fac:	b011      	add	sp, #68	; 0x44
 8009fae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
	u16 Size = 0;

	while(1)
	{
		if( Dest[Size] == 0 ) break;
 8009fb2:	4699      	mov	r9, r3
 8009fb4:	e7c6      	b.n	8009f44 <Ap_StrCmd_ExeFunc+0x50>
		CmdCheck = strncmp( Ap_StrCmd_Dic_Ptr[i].NameStr, (char *)CmdMsg.Str, CmdStrSize );
		
		
		if( CmdCheck == 0 && Ap_StrCmd_Dic_Ptr[i].Func_Ptr != NULL )
		{		
			AP_STRCMD_DIC_FUNC_EXEC(i, CmdMsg.Str); 			
 8009fb6:	b2f0      	uxtb	r0, r6
 8009fb8:	a901      	add	r1, sp, #4
 8009fba:	4798      	blx	r3
			break;
 8009fbc:	e7f5      	b.n	8009faa <Ap_StrCmd_ExeFunc+0xb6>
 8009fbe:	bf00      	nop
 8009fc0:	0800a0e9 	.word	0x0800a0e9
 8009fc4:	20000fd8 	.word	0x20000fd8
 8009fc8:	200000f8 	.word	0x200000f8
 8009fcc:	20000be4 	.word	0x20000be4

08009fd0 <Ap_StrCmd_ExeCmd>:
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u8 Ap_StrCmd_ExeCmd( void )
{
 8009fd0:	b508      	push	{r3, lr}
	u8 Ret = FALSE;

	if( Ap_StrCmd_Q_SIZE(AP_STRCMD_Q_RX_CH) )
 8009fd2:	2000      	movs	r0, #0
 8009fd4:	4b03      	ldr	r3, [pc, #12]	; (8009fe4 <Ap_StrCmd_ExeCmd+0x14>)
 8009fd6:	4798      	blx	r3
 8009fd8:	b110      	cbz	r0, 8009fe0 <Ap_StrCmd_ExeCmd+0x10>
	{
		Ap_StrCmd_ExeFunc();
 8009fda:	4b03      	ldr	r3, [pc, #12]	; (8009fe8 <Ap_StrCmd_ExeCmd+0x18>)
 8009fdc:	4798      	blx	r3
		Ret = TRUE;
 8009fde:	2001      	movs	r0, #1
	}

	return Ret; 
}
 8009fe0:	bd08      	pop	{r3, pc}
 8009fe2:	bf00      	nop
 8009fe4:	0800a005 	.word	0x0800a005
 8009fe8:	08009ef5 	.word	0x08009ef5

08009fec <Ap_StrCmd_Q_Init>:
{
	u8 i;
	
	for( i=0; i<AP_STRCMD_Q_CH_MAX; i++ )
	{
		Ap_StrCmd_Q_Start[i] = Ap_StrCmd_Q_End[i] = 0;
 8009fec:	f241 1250 	movw	r2, #4432	; 0x1150
 8009ff0:	f640 73e4 	movw	r3, #4068	; 0xfe4
 8009ff4:	2100      	movs	r1, #0
 8009ff6:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8009ffa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009ffe:	8011      	strh	r1, [r2, #0]
 800a000:	8019      	strh	r1, [r3, #0]
 800a002:	4770      	bx	lr

0800a004 <Ap_StrCmd_Q_SIZE>:
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u32 Ap_StrCmd_Q_SIZE( u8 Ch )
{
	return (Ap_StrCmd_Q_Start[Ch] - Ap_StrCmd_Q_End[Ch] + AP_STRCMD_BUFFER_MAX) % AP_STRCMD_BUFFER_MAX;
 800a004:	f640 72e4 	movw	r2, #4068	; 0xfe4
 800a008:	f241 1350 	movw	r3, #4432	; 0x1150
 800a00c:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800a010:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a014:	f932 2010 	ldrsh.w	r2, [r2, r0, lsl #1]
 800a018:	f933 3010 	ldrsh.w	r3, [r3, r0, lsl #1]
 800a01c:	f246 6067 	movw	r0, #26215	; 0x6667
 800a020:	1ad3      	subs	r3, r2, r3
 800a022:	3305      	adds	r3, #5
 800a024:	f2c6 6066 	movt	r0, #26214	; 0x6666
 800a028:	fb80 2003 	smull	r2, r0, r0, r3
 800a02c:	17da      	asrs	r2, r3, #31
 800a02e:	ebc2 0060 	rsb	r0, r2, r0, asr #1
 800a032:	eb00 0080 	add.w	r0, r0, r0, lsl #2
}
 800a036:	1a18      	subs	r0, r3, r0
 800a038:	4770      	bx	lr
 800a03a:	bf00      	nop

0800a03c <Ap_StrCmd_Q_Push>:
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u32 Ap_StrCmd_Q_SIZE( u8 Ch )
{
	return (Ap_StrCmd_Q_Start[Ch] - Ap_StrCmd_Q_End[Ch] + AP_STRCMD_BUFFER_MAX) % AP_STRCMD_BUFFER_MAX;
 800a03c:	f8df c0a4 	ldr.w	ip, [pc, #164]	; 800a0e4 <Ap_StrCmd_Q_Push+0xa8>
 800a040:	4b26      	ldr	r3, [pc, #152]	; (800a0dc <Ap_StrCmd_Q_Push+0xa0>)
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
s8 Ap_StrCmd_Q_Push( u8 Ch, AP_STRCMD_DATA_PTR_TYPE  *Push_Ptr )
{
 800a042:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u32 Ap_StrCmd_Q_SIZE( u8 Ch )
{
	return (Ap_StrCmd_Q_Start[Ch] - Ap_StrCmd_Q_End[Ch] + AP_STRCMD_BUFFER_MAX) % AP_STRCMD_BUFFER_MAX;
 800a046:	f83c 8010 	ldrh.w	r8, [ip, r0, lsl #1]
 800a04a:	f933 3010 	ldrsh.w	r3, [r3, r0, lsl #1]
 800a04e:	fa0f f288 	sxth.w	r2, r8
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
s8 Ap_StrCmd_Q_Push( u8 Ch, AP_STRCMD_DATA_PTR_TYPE  *Push_Ptr )
{
 800a052:	4606      	mov	r6, r0
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u32 Ap_StrCmd_Q_SIZE( u8 Ch )
{
	return (Ap_StrCmd_Q_Start[Ch] - Ap_StrCmd_Q_End[Ch] + AP_STRCMD_BUFFER_MAX) % AP_STRCMD_BUFFER_MAX;
 800a054:	1ad3      	subs	r3, r2, r3
 800a056:	f246 6067 	movw	r0, #26215	; 0x6667
 800a05a:	3305      	adds	r3, #5
 800a05c:	f2c6 6066 	movt	r0, #26214	; 0x6666
 800a060:	fb80 4003 	smull	r4, r0, r0, r3
 800a064:	17dc      	asrs	r4, r3, #31
 800a066:	ebc4 0060 	rsb	r0, r4, r0, asr #1
 800a06a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a06e:	1a1b      	subs	r3, r3, r0
     RET     : void   
---------------------------------------------------------------------------*/
s8 Ap_StrCmd_Q_Push( u8 Ch, AP_STRCMD_DATA_PTR_TYPE  *Push_Ptr )
{
        
	if (Ap_StrCmd_Q_SIZE(Ch) == (AP_STRCMD_BUFFER_MAX-1)) return FALSE;
 800a070:	2000      	movs	r0, #0
 800a072:	2b04      	cmp	r3, #4
 800a074:	d02f      	beq.n	800a0d6 <Ap_StrCmd_Q_Push+0x9a>
	
	Ap_StrCmd_Q_Buffer[Ch][Ap_StrCmd_Q_Start[Ch]++] = *Push_Ptr;
 800a076:	f44f 77b4 	mov.w	r7, #360	; 0x168
 800a07a:	fb07 f706 	mul.w	r7, r7, r6
 800a07e:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 800a082:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 800a086:	4f16      	ldr	r7, [pc, #88]	; (800a0e0 <Ap_StrCmd_Q_Push+0xa4>)
 800a088:	460c      	mov	r4, r1
 800a08a:	18bf      	adds	r7, r7, r2
 800a08c:	f101 0930 	add.w	r9, r1, #48	; 0x30
 800a090:	6820      	ldr	r0, [r4, #0]
 800a092:	6861      	ldr	r1, [r4, #4]
 800a094:	68a2      	ldr	r2, [r4, #8]
 800a096:	68e3      	ldr	r3, [r4, #12]
 800a098:	463d      	mov	r5, r7
 800a09a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a09c:	3410      	adds	r4, #16
 800a09e:	454c      	cmp	r4, r9
 800a0a0:	462f      	mov	r7, r5
 800a0a2:	d1f5      	bne.n	800a090 <Ap_StrCmd_Q_Push+0x54>
 800a0a4:	f108 0801 	add.w	r8, r8, #1
	Ap_StrCmd_Q_Start[Ch] %= AP_STRCMD_BUFFER_MAX;
 800a0a8:	f246 6367 	movw	r3, #26215	; 0x6667
 800a0ac:	fa0f f888 	sxth.w	r8, r8
 800a0b0:	f2c6 6366 	movt	r3, #26214	; 0x6666
 800a0b4:	fb83 2308 	smull	r2, r3, r3, r8
 800a0b8:	ea4f 72e8 	mov.w	r2, r8, asr #31
 800a0bc:	ebc2 0363 	rsb	r3, r2, r3, asr #1
s8 Ap_StrCmd_Q_Push( u8 Ch, AP_STRCMD_DATA_PTR_TYPE  *Push_Ptr )
{
        
	if (Ap_StrCmd_Q_SIZE(Ch) == (AP_STRCMD_BUFFER_MAX-1)) return FALSE;
	
	Ap_StrCmd_Q_Buffer[Ch][Ap_StrCmd_Q_Start[Ch]++] = *Push_Ptr;
 800a0c0:	6820      	ldr	r0, [r4, #0]
 800a0c2:	6861      	ldr	r1, [r4, #4]
 800a0c4:	68a2      	ldr	r2, [r4, #8]
	Ap_StrCmd_Q_Start[Ch] %= AP_STRCMD_BUFFER_MAX;
 800a0c6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a0ca:	ebc3 0808 	rsb	r8, r3, r8
s8 Ap_StrCmd_Q_Push( u8 Ch, AP_STRCMD_DATA_PTR_TYPE  *Push_Ptr )
{
        
	if (Ap_StrCmd_Q_SIZE(Ch) == (AP_STRCMD_BUFFER_MAX-1)) return FALSE;
	
	Ap_StrCmd_Q_Buffer[Ch][Ap_StrCmd_Q_Start[Ch]++] = *Push_Ptr;
 800a0ce:	c707      	stmia	r7!, {r0, r1, r2}
	Ap_StrCmd_Q_Start[Ch] %= AP_STRCMD_BUFFER_MAX;
 800a0d0:	f82c 8016 	strh.w	r8, [ip, r6, lsl #1]
	
	return TRUE;
 800a0d4:	2001      	movs	r0, #1
}                                                  
 800a0d6:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800a0da:	4770      	bx	lr
 800a0dc:	20001150 	.word	0x20001150
 800a0e0:	20000fe8 	.word	0x20000fe8
 800a0e4:	20000fe4 	.word	0x20000fe4

0800a0e8 <Ap_StrCmd_Q_Pop>:
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u32 Ap_StrCmd_Q_SIZE( u8 Ch )
{
	return (Ap_StrCmd_Q_Start[Ch] - Ap_StrCmd_Q_End[Ch] + AP_STRCMD_BUFFER_MAX) % AP_STRCMD_BUFFER_MAX;
 800a0e8:	f8df c0a4 	ldr.w	ip, [pc, #164]	; 800a190 <Ap_StrCmd_Q_Pop+0xa8>
 800a0ec:	4b26      	ldr	r3, [pc, #152]	; (800a188 <Ap_StrCmd_Q_Pop+0xa0>)
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
s8 Ap_StrCmd_Q_Pop( u8 Ch, AP_STRCMD_DATA_PTR_TYPE *Pop_Ptr )
{
 800a0ee:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u32 Ap_StrCmd_Q_SIZE( u8 Ch )
{
	return (Ap_StrCmd_Q_Start[Ch] - Ap_StrCmd_Q_End[Ch] + AP_STRCMD_BUFFER_MAX) % AP_STRCMD_BUFFER_MAX;
 800a0f2:	f83c 8010 	ldrh.w	r8, [ip, r0, lsl #1]
 800a0f6:	f933 3010 	ldrsh.w	r3, [r3, r0, lsl #1]
 800a0fa:	fa0f f288 	sxth.w	r2, r8
     WORK    : 
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
s8 Ap_StrCmd_Q_Pop( u8 Ch, AP_STRCMD_DATA_PTR_TYPE *Pop_Ptr )
{
 800a0fe:	4606      	mov	r6, r0
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
u32 Ap_StrCmd_Q_SIZE( u8 Ch )
{
	return (Ap_StrCmd_Q_Start[Ch] - Ap_StrCmd_Q_End[Ch] + AP_STRCMD_BUFFER_MAX) % AP_STRCMD_BUFFER_MAX;
 800a100:	1a9b      	subs	r3, r3, r2
 800a102:	f246 6067 	movw	r0, #26215	; 0x6667
 800a106:	3305      	adds	r3, #5
 800a108:	f2c6 6066 	movt	r0, #26214	; 0x6666
 800a10c:	fb80 4003 	smull	r4, r0, r0, r3
 800a110:	17dc      	asrs	r4, r3, #31
 800a112:	ebc4 0060 	rsb	r0, r4, r0, asr #1
 800a116:	eb00 0080 	add.w	r0, r0, r0, lsl #2
     ARG     : void
     RET     : void   
---------------------------------------------------------------------------*/
s8 Ap_StrCmd_Q_Pop( u8 Ch, AP_STRCMD_DATA_PTR_TYPE *Pop_Ptr )
{
	if (Ap_StrCmd_Q_SIZE(Ch) == 0) return FALSE;
 800a11a:	1a1b      	subs	r3, r3, r0
 800a11c:	d02f      	beq.n	800a17e <Ap_StrCmd_Q_Pop+0x96>
	
	*Pop_Ptr = Ap_StrCmd_Q_Buffer[Ch][Ap_StrCmd_Q_End[Ch]++];
 800a11e:	f44f 73b4 	mov.w	r3, #360	; 0x168
 800a122:	fb03 f306 	mul.w	r3, r3, r6
 800a126:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 800a12a:	4f18      	ldr	r7, [pc, #96]	; (800a18c <Ap_StrCmd_Q_Pop+0xa4>)
 800a12c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800a130:	18bf      	adds	r7, r7, r2
 800a132:	460d      	mov	r5, r1
 800a134:	f107 0930 	add.w	r9, r7, #48	; 0x30
 800a138:	463c      	mov	r4, r7
 800a13a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a13c:	6028      	str	r0, [r5, #0]
 800a13e:	6069      	str	r1, [r5, #4]
 800a140:	60aa      	str	r2, [r5, #8]
 800a142:	60eb      	str	r3, [r5, #12]
 800a144:	3510      	adds	r5, #16
 800a146:	454c      	cmp	r4, r9
 800a148:	4627      	mov	r7, r4
 800a14a:	d1f5      	bne.n	800a138 <Ap_StrCmd_Q_Pop+0x50>
 800a14c:	f108 0801 	add.w	r8, r8, #1
	
	Ap_StrCmd_Q_End[Ch] %= AP_STRCMD_BUFFER_MAX;
 800a150:	f246 6367 	movw	r3, #26215	; 0x6667
 800a154:	fa0f f888 	sxth.w	r8, r8
 800a158:	f2c6 6366 	movt	r3, #26214	; 0x6666
 800a15c:	fb83 2308 	smull	r2, r3, r3, r8
 800a160:	ea4f 72e8 	mov.w	r2, r8, asr #31
 800a164:	ebc2 0363 	rsb	r3, r2, r3, asr #1
 800a168:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a16c:	ebc3 0808 	rsb	r8, r3, r8
---------------------------------------------------------------------------*/
s8 Ap_StrCmd_Q_Pop( u8 Ch, AP_STRCMD_DATA_PTR_TYPE *Pop_Ptr )
{
	if (Ap_StrCmd_Q_SIZE(Ch) == 0) return FALSE;
	
	*Pop_Ptr = Ap_StrCmd_Q_Buffer[Ch][Ap_StrCmd_Q_End[Ch]++];
 800a170:	cf07      	ldmia	r7!, {r0, r1, r2}
	
	Ap_StrCmd_Q_End[Ch] %= AP_STRCMD_BUFFER_MAX;

    return AP_STRCMD_POP_SUCCESS;
 800a172:	2302      	movs	r3, #2
---------------------------------------------------------------------------*/
s8 Ap_StrCmd_Q_Pop( u8 Ch, AP_STRCMD_DATA_PTR_TYPE *Pop_Ptr )
{
	if (Ap_StrCmd_Q_SIZE(Ch) == 0) return FALSE;
	
	*Pop_Ptr = Ap_StrCmd_Q_Buffer[Ch][Ap_StrCmd_Q_End[Ch]++];
 800a174:	6028      	str	r0, [r5, #0]
 800a176:	6069      	str	r1, [r5, #4]
 800a178:	60aa      	str	r2, [r5, #8]
	
	Ap_StrCmd_Q_End[Ch] %= AP_STRCMD_BUFFER_MAX;
 800a17a:	f82c 8016 	strh.w	r8, [ip, r6, lsl #1]

    return AP_STRCMD_POP_SUCCESS;
}
 800a17e:	b258      	sxtb	r0, r3
 800a180:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800a184:	4770      	bx	lr
 800a186:	bf00      	nop
 800a188:	20000fe4 	.word	0x20000fe4
 800a18c:	20000fe8 	.word	0x20000fe8
 800a190:	20001150 	.word	0x20001150

0800a194 <KeyPad_DownKeyEvent>:
	}
}

void KeyPad_DownKeyEvent( u32 Event )
{
	if( Event == HW_KEYPAD_EVENT_RELEASED || Event == HW_KEYPAD_EVENT_REPEAT )
 800a194:	3801      	subs	r0, #1
 800a196:	2801      	cmp	r0, #1
		Hw_7Seg_Printf( 0, "%d", Seg_Count++ );
	}
}

void KeyPad_DownKeyEvent( u32 Event )
{
 800a198:	b510      	push	{r4, lr}
	if( Event == HW_KEYPAD_EVENT_RELEASED || Event == HW_KEYPAD_EVENT_REPEAT )
 800a19a:	d900      	bls.n	800a19e <KeyPad_DownKeyEvent+0xa>
 800a19c:	bd10      	pop	{r4, pc}
	{
		Seg_Count -= 2;
 800a19e:	4b05      	ldr	r3, [pc, #20]	; (800a1b4 <KeyPad_DownKeyEvent+0x20>)
		
		
		Hw_7Seg_Printf( 0, "%d", Seg_Count++ );
 800a1a0:	2000      	movs	r0, #0

void KeyPad_DownKeyEvent( u32 Event )
{
	if( Event == HW_KEYPAD_EVENT_RELEASED || Event == HW_KEYPAD_EVENT_REPEAT )
	{
		Seg_Count -= 2;
 800a1a2:	881c      	ldrh	r4, [r3, #0]
		
		
		Hw_7Seg_Printf( 0, "%d", Seg_Count++ );
 800a1a4:	4904      	ldr	r1, [pc, #16]	; (800a1b8 <KeyPad_DownKeyEvent+0x24>)

void KeyPad_DownKeyEvent( u32 Event )
{
	if( Event == HW_KEYPAD_EVENT_RELEASED || Event == HW_KEYPAD_EVENT_REPEAT )
	{
		Seg_Count -= 2;
 800a1a6:	1ea2      	subs	r2, r4, #2
		
		
		Hw_7Seg_Printf( 0, "%d", Seg_Count++ );
 800a1a8:	3c01      	subs	r4, #1
 800a1aa:	801c      	strh	r4, [r3, #0]
 800a1ac:	b292      	uxth	r2, r2
 800a1ae:	4b03      	ldr	r3, [pc, #12]	; (800a1bc <KeyPad_DownKeyEvent+0x28>)
 800a1b0:	4798      	blx	r3
 800a1b2:	bd10      	pop	{r4, pc}
 800a1b4:	20000a02 	.word	0x20000a02
 800a1b8:	0800e1f0 	.word	0x0800e1f0
 800a1bc:	0800be95 	.word	0x0800be95

0800a1c0 <KeyPad_UpKeyEvent>:



void KeyPad_UpKeyEvent( u32 Event )
{
	if( Event == HW_KEYPAD_EVENT_RELEASED || Event == HW_KEYPAD_EVENT_REPEAT )
 800a1c0:	3801      	subs	r0, #1
 800a1c2:	2801      	cmp	r0, #1
void Ap_EduMenu_ShowMenu(void);



void KeyPad_UpKeyEvent( u32 Event )
{
 800a1c4:	b510      	push	{r4, lr}
	if( Event == HW_KEYPAD_EVENT_RELEASED || Event == HW_KEYPAD_EVENT_REPEAT )
 800a1c6:	d900      	bls.n	800a1ca <KeyPad_UpKeyEvent+0xa>
 800a1c8:	bd10      	pop	{r4, pc}
	{
		Hw_7Seg_Printf( 0, "%d", Seg_Count++ );
 800a1ca:	4b04      	ldr	r3, [pc, #16]	; (800a1dc <KeyPad_UpKeyEvent+0x1c>)
 800a1cc:	2000      	movs	r0, #0
 800a1ce:	881a      	ldrh	r2, [r3, #0]
 800a1d0:	4903      	ldr	r1, [pc, #12]	; (800a1e0 <KeyPad_UpKeyEvent+0x20>)
 800a1d2:	1c54      	adds	r4, r2, #1
 800a1d4:	801c      	strh	r4, [r3, #0]
 800a1d6:	4b03      	ldr	r3, [pc, #12]	; (800a1e4 <KeyPad_UpKeyEvent+0x24>)
 800a1d8:	4798      	blx	r3
 800a1da:	bd10      	pop	{r4, pc}
 800a1dc:	20000a02 	.word	0x20000a02
 800a1e0:	0800e1f0 	.word	0x0800e1f0
 800a1e4:	0800be95 	.word	0x0800be95

0800a1e8 <Ap_EduMenu_ShowMenu>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Ap_EduMenu_ShowMenu(void)
{
 800a1e8:	b538      	push	{r3, r4, r5, lr}
	u8 key;

	Lb_printf("\n\n");
 800a1ea:	f64d 50e8 	movw	r0, #56808	; 0xdde8
 800a1ee:	f64a 14c9 	movw	r4, #43465	; 0xa9c9
	Lb_printf("*******************************************************\n");
 800a1f2:	f64d 55ec 	movw	r5, #56812	; 0xddec
---------------------------------------------------------------------------*/
void Ap_EduMenu_ShowMenu(void)
{
	u8 key;

	Lb_printf("\n\n");
 800a1f6:	f6c0 0400 	movt	r4, #2048	; 0x800
	Lb_printf("*******************************************************\n");
 800a1fa:	f6c0 0500 	movt	r5, #2048	; 0x800
---------------------------------------------------------------------------*/
void Ap_EduMenu_ShowMenu(void)
{
	u8 key;

	Lb_printf("\n\n");
 800a1fe:	f6c0 0000 	movt	r0, #2048	; 0x800
 800a202:	47a0      	blx	r4
	Lb_printf("*******************************************************\n");
 800a204:	4628      	mov	r0, r5
 800a206:	47a0      	blx	r4
	Lb_printf("                      Edu V0.7                         \n");
 800a208:	f64d 6028 	movw	r0, #56872	; 0xde28
 800a20c:	f6c0 0000 	movt	r0, #2048	; 0x800
 800a210:	47a0      	blx	r4
	Lb_printf("*******************************************************\n");
 800a212:	4628      	mov	r0, r5
 800a214:	47a0      	blx	r4
	Lb_printf("* 1. Test.. LED                                       *\n");
 800a216:	f64d 6064 	movw	r0, #56932	; 0xde64
 800a21a:	f6c0 0000 	movt	r0, #2048	; 0x800
 800a21e:	47a0      	blx	r4
	Lb_printf("* 2. Test.. KeyPad                                    *\n");
 800a220:	f64d 60a0 	movw	r0, #56992	; 0xdea0
 800a224:	f6c0 0000 	movt	r0, #2048	; 0x800
 800a228:	47a0      	blx	r4
	Lb_printf("* 3. Test.. 7Seg                                      *\n");
 800a22a:	f64d 60dc 	movw	r0, #57052	; 0xdedc
 800a22e:	f6c0 0000 	movt	r0, #2048	; 0x800
 800a232:	47a0      	blx	r4
	Lb_printf("* 4. Test.. CLcd                                      *\n");
 800a234:	f64d 7018 	movw	r0, #57112	; 0xdf18
 800a238:	f6c0 0000 	movt	r0, #2048	; 0x800
 800a23c:	47a0      	blx	r4
	Lb_printf("* 5. Test.. BT                                        *\n");
 800a23e:	f64d 7054 	movw	r0, #57172	; 0xdf54
 800a242:	f6c0 0000 	movt	r0, #2048	; 0x800
 800a246:	47a0      	blx	r4
	Lb_printf("* 6. Test.. Cds                                       *\n");
 800a248:	f64d 7090 	movw	r0, #57232	; 0xdf90
 800a24c:	f6c0 0000 	movt	r0, #2048	; 0x800
 800a250:	47a0      	blx	r4
	Lb_printf("* 7. Test.. DHT11                                     *\n");
 800a252:	f64d 70cc 	movw	r0, #57292	; 0xdfcc
 800a256:	f6c0 0000 	movt	r0, #2048	; 0x800
 800a25a:	47a0      	blx	r4
	Lb_printf("* 8.                                                  *\n");
 800a25c:	f24e 0008 	movw	r0, #57352	; 0xe008
 800a260:	f6c0 0000 	movt	r0, #2048	; 0x800
 800a264:	47a0      	blx	r4
	Lb_printf("* 9.                                                  *\n");
 800a266:	f24e 0044 	movw	r0, #57412	; 0xe044
 800a26a:	f6c0 0000 	movt	r0, #2048	; 0x800
 800a26e:	47a0      	blx	r4
	Lb_printf("* m.  Menu                                            *\n");
 800a270:	f24e 0080 	movw	r0, #57472	; 0xe080
 800a274:	f6c0 0000 	movt	r0, #2048	; 0x800
 800a278:	47a0      	blx	r4
	Lb_printf("*******************************************************\n");
 800a27a:	4628      	mov	r0, r5
 800a27c:	47a0      	blx	r4
	Lb_printf("\n");
 800a27e:	f24e 106c 	movw	r0, #57708	; 0xe16c
 800a282:	f6c0 0000 	movt	r0, #2048	; 0x800
 800a286:	47a0      	blx	r4
 800a288:	bd38      	pop	{r3, r4, r5, pc}
 800a28a:	bf00      	nop

0800a28c <Ap_EduMenu_ExeCmd>:
     ARG     : void
     RET     : 
				u8 : 눌려진 메뉴키 데이터 
---------------------------------------------------------------------------*/
u8 Ap_EduMenu_ExeCmd(void)
{
 800a28c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	
	static u8 ExeFirst = TRUE;
	u16 Ret = ERR_NONE;
			
	
	if( ExeFirst == TRUE )
 800a290:	4caa      	ldr	r4, [pc, #680]	; (800a53c <Ap_EduMenu_ExeCmd+0x2b0>)
     ARG     : void
     RET     : 
				u8 : 눌려진 메뉴키 데이터 
---------------------------------------------------------------------------*/
u8 Ap_EduMenu_ExeCmd(void)
{
 800a292:	b085      	sub	sp, #20
	
	static u8 ExeFirst = TRUE;
	u16 Ret = ERR_NONE;
			
	
	if( ExeFirst == TRUE )
 800a294:	7823      	ldrb	r3, [r4, #0]
 800a296:	2b01      	cmp	r3, #1
 800a298:	f000 8094 	beq.w	800a3c4 <Ap_EduMenu_ExeCmd+0x138>
		ExeFirst = FALSE;
	}

	key = 0;

	if( Hw_Uart_GetchNoWait( HW_USE_UART_CH_MENU, &UartData ) == TRUE )
 800a29c:	2000      	movs	r0, #0
 800a29e:	f10d 010f 	add.w	r1, sp, #15
 800a2a2:	4ca7      	ldr	r4, [pc, #668]	; (800a540 <Ap_EduMenu_ExeCmd+0x2b4>)
 800a2a4:	47a0      	blx	r4
 800a2a6:	2801      	cmp	r0, #1
 800a2a8:	d003      	beq.n	800a2b2 <Ap_EduMenu_ExeCmd+0x26>
               break;
        }
    }
    
    return Ret;
}
 800a2aa:	2000      	movs	r0, #0
 800a2ac:	b005      	add	sp, #20
 800a2ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

	key = 0;

	if( Hw_Uart_GetchNoWait( HW_USE_UART_CH_MENU, &UartData ) == TRUE )
	{
		Lb_printf(">> %c\n", UartData);
 800a2b2:	48a4      	ldr	r0, [pc, #656]	; (800a544 <Ap_EduMenu_ExeCmd+0x2b8>)
 800a2b4:	f89d 100f 	ldrb.w	r1, [sp, #15]
 800a2b8:	4da3      	ldr	r5, [pc, #652]	; (800a548 <Ap_EduMenu_ExeCmd+0x2bc>)
 800a2ba:	47a8      	blx	r5
		key = UartData;
 800a2bc:	f89d 300f 	ldrb.w	r3, [sp, #15]
	else
	{
		return 0;
	}

    if( key > 0 )
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d0f2      	beq.n	800a2aa <Ap_EduMenu_ExeCmd+0x1e>
    {
        switch(key)
 800a2c4:	3b31      	subs	r3, #49	; 0x31
 800a2c6:	2b3c      	cmp	r3, #60	; 0x3c
 800a2c8:	d8ef      	bhi.n	800a2aa <Ap_EduMenu_ExeCmd+0x1e>
 800a2ca:	a201      	add	r2, pc, #4	; (adr r2, 800a2d0 <Ap_EduMenu_ExeCmd+0x44>)
 800a2cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2d0:	0800a4d5 	.word	0x0800a4d5
 800a2d4:	0800a49d 	.word	0x0800a49d
 800a2d8:	0800a48b 	.word	0x0800a48b
 800a2dc:	0800a477 	.word	0x0800a477
 800a2e0:	0800a435 	.word	0x0800a435
 800a2e4:	0800a405 	.word	0x0800a405
 800a2e8:	0800a3dd 	.word	0x0800a3dd
 800a2ec:	0800a2ab 	.word	0x0800a2ab
 800a2f0:	0800a2ab 	.word	0x0800a2ab
 800a2f4:	0800a2ab 	.word	0x0800a2ab
 800a2f8:	0800a2ab 	.word	0x0800a2ab
 800a2fc:	0800a2ab 	.word	0x0800a2ab
 800a300:	0800a2ab 	.word	0x0800a2ab
 800a304:	0800a2ab 	.word	0x0800a2ab
 800a308:	0800a2ab 	.word	0x0800a2ab
 800a30c:	0800a2ab 	.word	0x0800a2ab
 800a310:	0800a2ab 	.word	0x0800a2ab
 800a314:	0800a2ab 	.word	0x0800a2ab
 800a318:	0800a2ab 	.word	0x0800a2ab
 800a31c:	0800a2ab 	.word	0x0800a2ab
 800a320:	0800a2ab 	.word	0x0800a2ab
 800a324:	0800a2ab 	.word	0x0800a2ab
 800a328:	0800a2ab 	.word	0x0800a2ab
 800a32c:	0800a2ab 	.word	0x0800a2ab
 800a330:	0800a2ab 	.word	0x0800a2ab
 800a334:	0800a2ab 	.word	0x0800a2ab
 800a338:	0800a2ab 	.word	0x0800a2ab
 800a33c:	0800a2ab 	.word	0x0800a2ab
 800a340:	0800a503 	.word	0x0800a503
 800a344:	0800a2ab 	.word	0x0800a2ab
 800a348:	0800a2ab 	.word	0x0800a2ab
 800a34c:	0800a2ab 	.word	0x0800a2ab
 800a350:	0800a2ab 	.word	0x0800a2ab
 800a354:	0800a2ab 	.word	0x0800a2ab
 800a358:	0800a2ab 	.word	0x0800a2ab
 800a35c:	0800a2ab 	.word	0x0800a2ab
 800a360:	0800a2ab 	.word	0x0800a2ab
 800a364:	0800a2ab 	.word	0x0800a2ab
 800a368:	0800a2ab 	.word	0x0800a2ab
 800a36c:	0800a2ab 	.word	0x0800a2ab
 800a370:	0800a2ab 	.word	0x0800a2ab
 800a374:	0800a2ab 	.word	0x0800a2ab
 800a378:	0800a2ab 	.word	0x0800a2ab
 800a37c:	0800a2ab 	.word	0x0800a2ab
 800a380:	0800a2ab 	.word	0x0800a2ab
 800a384:	0800a2ab 	.word	0x0800a2ab
 800a388:	0800a2ab 	.word	0x0800a2ab
 800a38c:	0800a2ab 	.word	0x0800a2ab
 800a390:	0800a2ab 	.word	0x0800a2ab
 800a394:	0800a2ab 	.word	0x0800a2ab
 800a398:	0800a2ab 	.word	0x0800a2ab
 800a39c:	0800a2ab 	.word	0x0800a2ab
 800a3a0:	0800a2ab 	.word	0x0800a2ab
 800a3a4:	0800a2ab 	.word	0x0800a2ab
 800a3a8:	0800a2ab 	.word	0x0800a2ab
 800a3ac:	0800a2ab 	.word	0x0800a2ab
 800a3b0:	0800a2ab 	.word	0x0800a2ab
 800a3b4:	0800a2ab 	.word	0x0800a2ab
 800a3b8:	0800a2ab 	.word	0x0800a2ab
 800a3bc:	0800a2ab 	.word	0x0800a2ab
 800a3c0:	0800a503 	.word	0x0800a503
	u16 Ret = ERR_NONE;
			
	
	if( ExeFirst == TRUE )
	{
		Ap_EduMenu_ShowMenu();		
 800a3c4:	4b61      	ldr	r3, [pc, #388]	; (800a54c <Ap_EduMenu_ExeCmd+0x2c0>)
 800a3c6:	4798      	blx	r3
		
		Hw_KeyPad_SetEventFunc( 2, KeyPad_UpKeyEvent );
 800a3c8:	4d61      	ldr	r5, [pc, #388]	; (800a550 <Ap_EduMenu_ExeCmd+0x2c4>)
 800a3ca:	2002      	movs	r0, #2
 800a3cc:	4961      	ldr	r1, [pc, #388]	; (800a554 <Ap_EduMenu_ExeCmd+0x2c8>)
 800a3ce:	47a8      	blx	r5
		Hw_KeyPad_SetEventFunc( 0, KeyPad_DownKeyEvent );	
 800a3d0:	2000      	movs	r0, #0
 800a3d2:	4961      	ldr	r1, [pc, #388]	; (800a558 <Ap_EduMenu_ExeCmd+0x2cc>)
 800a3d4:	47a8      	blx	r5

		ExeFirst = FALSE;
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	7023      	strb	r3, [r4, #0]
 800a3da:	e75f      	b.n	800a29c <Ap_EduMenu_ExeCmd+0x10>

				Lb_printf("Cds Test Exit\n");     		
               break;  

           case '7':
           		Lb_printf("H : %d, T : %d \n", Hw_DHT11_GetHumidity(), Hw_DHT11_GetTemperature() );
 800a3dc:	4e5f      	ldr	r6, [pc, #380]	; (800a55c <Ap_EduMenu_ExeCmd+0x2d0>)
 800a3de:	47b0      	blx	r6
 800a3e0:	4c5f      	ldr	r4, [pc, #380]	; (800a560 <Ap_EduMenu_ExeCmd+0x2d4>)
 800a3e2:	4607      	mov	r7, r0
 800a3e4:	47a0      	blx	r4
 800a3e6:	4639      	mov	r1, r7
 800a3e8:	4602      	mov	r2, r0
 800a3ea:	485e      	ldr	r0, [pc, #376]	; (800a564 <Ap_EduMenu_ExeCmd+0x2d8>)
 800a3ec:	47a8      	blx	r5
           		Hw_CLcd_Printf( 0, 1, "H:%d, T:%d", Hw_DHT11_GetHumidity(), Hw_DHT11_GetTemperature() );
 800a3ee:	47b0      	blx	r6
 800a3f0:	4605      	mov	r5, r0
 800a3f2:	47a0      	blx	r4
 800a3f4:	2101      	movs	r1, #1
 800a3f6:	9000      	str	r0, [sp, #0]
 800a3f8:	4a5b      	ldr	r2, [pc, #364]	; (800a568 <Ap_EduMenu_ExeCmd+0x2dc>)
 800a3fa:	462b      	mov	r3, r5
 800a3fc:	2000      	movs	r0, #0
 800a3fe:	4c5b      	ldr	r4, [pc, #364]	; (800a56c <Ap_EduMenu_ExeCmd+0x2e0>)
 800a400:	47a0      	blx	r4
               break;  
 800a402:	e752      	b.n	800a2aa <Ap_EduMenu_ExeCmd+0x1e>
				
				Lb_printf("BT Test Exit\n");
				break; 

           case '6':
           		Lb_printf("Cds Test Start, press x to exit\n");
 800a404:	485a      	ldr	r0, [pc, #360]	; (800a570 <Ap_EduMenu_ExeCmd+0x2e4>)
 800a406:	47a8      	blx	r5
           				{
           					break;
           				}
           			}

           			Hw_CLcd_Printf( 0, 1, "Cds : %d", Hw_Cds_GetData() );
 800a408:	4f5a      	ldr	r7, [pc, #360]	; (800a574 <Ap_EduMenu_ExeCmd+0x2e8>)
 800a40a:	4e58      	ldr	r6, [pc, #352]	; (800a56c <Ap_EduMenu_ExeCmd+0x2e0>)
 800a40c:	e005      	b.n	800a41a <Ap_EduMenu_ExeCmd+0x18e>
 800a40e:	47b8      	blx	r7
 800a410:	2101      	movs	r1, #1
 800a412:	4603      	mov	r3, r0
 800a414:	4a58      	ldr	r2, [pc, #352]	; (800a578 <Ap_EduMenu_ExeCmd+0x2ec>)
 800a416:	2000      	movs	r0, #0
 800a418:	47b0      	blx	r6
           		Lb_printf("Cds Test Start, press x to exit\n");
           		
           		while(1)
           		{

           			if( Hw_Uart_GetchNoWait( HW_USE_UART_CH_MENU, &UartData ) == TRUE )
 800a41a:	2000      	movs	r0, #0
 800a41c:	f10d 010f 	add.w	r1, sp, #15
 800a420:	47a0      	blx	r4
 800a422:	2801      	cmp	r0, #1
 800a424:	d1f3      	bne.n	800a40e <Ap_EduMenu_ExeCmd+0x182>
           			{
           				if( UartData == 'x' )
 800a426:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800a42a:	2b78      	cmp	r3, #120	; 0x78
 800a42c:	d1ef      	bne.n	800a40e <Ap_EduMenu_ExeCmd+0x182>

           			Hw_CLcd_Printf( 0, 1, "Cds : %d", Hw_Cds_GetData() );

				}      

				Lb_printf("Cds Test Exit\n");     		
 800a42e:	4853      	ldr	r0, [pc, #332]	; (800a57c <Ap_EduMenu_ExeCmd+0x2f0>)
 800a430:	47a8      	blx	r5
               break;  
 800a432:	e73a      	b.n	800a2aa <Ap_EduMenu_ExeCmd+0x1e>
           case '4':
           		Hw_CLcd_Printf( 0, 1, "Cnt : %d", Seg_Count++);
				break;  

           case '5':
           		Lb_printf("BT Test Start, press x to exit\n");
 800a434:	4852      	ldr	r0, [pc, #328]	; (800a580 <Ap_EduMenu_ExeCmd+0x2f4>)
 800a436:	47a8      	blx	r5
           				{
           					break;
           				}
           				else
           				{
           					Hw_Uart_Printf( HW_USE_UART_CH_BT, "Menu:Send : %c\r\n",UartData );
 800a438:	4e52      	ldr	r6, [pc, #328]	; (800a584 <Ap_EduMenu_ExeCmd+0x2f8>)
 800a43a:	e005      	b.n	800a448 <Ap_EduMenu_ExeCmd+0x1bc>
           			if( Hw_Uart_GetchNoWait( HW_USE_UART_CH_BT, &UartData) == TRUE )
           			{
           				Lb_printf( "BT Rxd : %c \n", UartData );
           			}

           			if( Hw_Uart_GetchNoWait( HW_USE_UART_CH_MENU, &UartData ) == TRUE )
 800a43c:	2000      	movs	r0, #0
 800a43e:	f10d 010f 	add.w	r1, sp, #15
 800a442:	47a0      	blx	r4
 800a444:	2801      	cmp	r0, #1
 800a446:	d00f      	beq.n	800a468 <Ap_EduMenu_ExeCmd+0x1dc>
           case '5':
           		Lb_printf("BT Test Start, press x to exit\n");

           		while(1)
           		{
           			if( Hw_Uart_GetchNoWait( HW_USE_UART_CH_BT, &UartData) == TRUE )
 800a448:	2001      	movs	r0, #1
 800a44a:	f10d 010f 	add.w	r1, sp, #15
 800a44e:	47a0      	blx	r4
 800a450:	2801      	cmp	r0, #1
 800a452:	d1f3      	bne.n	800a43c <Ap_EduMenu_ExeCmd+0x1b0>
           			{
           				Lb_printf( "BT Rxd : %c \n", UartData );
 800a454:	f89d 100f 	ldrb.w	r1, [sp, #15]
 800a458:	484b      	ldr	r0, [pc, #300]	; (800a588 <Ap_EduMenu_ExeCmd+0x2fc>)
 800a45a:	47a8      	blx	r5
           			}

           			if( Hw_Uart_GetchNoWait( HW_USE_UART_CH_MENU, &UartData ) == TRUE )
 800a45c:	2000      	movs	r0, #0
 800a45e:	f10d 010f 	add.w	r1, sp, #15
 800a462:	47a0      	blx	r4
 800a464:	2801      	cmp	r0, #1
 800a466:	d1ef      	bne.n	800a448 <Ap_EduMenu_ExeCmd+0x1bc>
           			{
           				if( UartData == 'x' )
 800a468:	f89d 200f 	ldrb.w	r2, [sp, #15]
           				{
           					break;
           				}
           				else
           				{
           					Hw_Uart_Printf( HW_USE_UART_CH_BT, "Menu:Send : %c\r\n",UartData );
 800a46c:	4947      	ldr	r1, [pc, #284]	; (800a58c <Ap_EduMenu_ExeCmd+0x300>)
           				Lb_printf( "BT Rxd : %c \n", UartData );
           			}

           			if( Hw_Uart_GetchNoWait( HW_USE_UART_CH_MENU, &UartData ) == TRUE )
           			{
           				if( UartData == 'x' )
 800a46e:	2a78      	cmp	r2, #120	; 0x78
 800a470:	d061      	beq.n	800a536 <Ap_EduMenu_ExeCmd+0x2aa>
           				{
           					break;
           				}
           				else
           				{
           					Hw_Uart_Printf( HW_USE_UART_CH_BT, "Menu:Send : %c\r\n",UartData );
 800a472:	47b0      	blx	r6
 800a474:	e7e8      	b.n	800a448 <Ap_EduMenu_ExeCmd+0x1bc>
           case '3':	
           		Hw_7Seg_Printf( 0, "%d", Seg_Count++ );
               break; 

           case '4':
           		Hw_CLcd_Printf( 0, 1, "Cnt : %d", Seg_Count++);
 800a476:	4c46      	ldr	r4, [pc, #280]	; (800a590 <Ap_EduMenu_ExeCmd+0x304>)
 800a478:	2101      	movs	r1, #1
 800a47a:	8823      	ldrh	r3, [r4, #0]
 800a47c:	4a45      	ldr	r2, [pc, #276]	; (800a594 <Ap_EduMenu_ExeCmd+0x308>)
 800a47e:	185d      	adds	r5, r3, r1
 800a480:	8025      	strh	r5, [r4, #0]
 800a482:	2000      	movs	r0, #0
 800a484:	4c39      	ldr	r4, [pc, #228]	; (800a56c <Ap_EduMenu_ExeCmd+0x2e0>)
 800a486:	47a0      	blx	r4
				break;  
 800a488:	e70f      	b.n	800a2aa <Ap_EduMenu_ExeCmd+0x1e>
					}	
				}
				break;

           case '3':	
           		Hw_7Seg_Printf( 0, "%d", Seg_Count++ );
 800a48a:	4b41      	ldr	r3, [pc, #260]	; (800a590 <Ap_EduMenu_ExeCmd+0x304>)
 800a48c:	2000      	movs	r0, #0
 800a48e:	881a      	ldrh	r2, [r3, #0]
 800a490:	4941      	ldr	r1, [pc, #260]	; (800a598 <Ap_EduMenu_ExeCmd+0x30c>)
 800a492:	1c54      	adds	r4, r2, #1
 800a494:	801c      	strh	r4, [r3, #0]
 800a496:	4b41      	ldr	r3, [pc, #260]	; (800a59c <Ap_EduMenu_ExeCmd+0x310>)
 800a498:	4798      	blx	r3
               break; 
 800a49a:	e706      	b.n	800a2aa <Ap_EduMenu_ExeCmd+0x1e>
           		Hw_Led_Toggle( 3 );
           		Hw_Timer_Delay_ms(500);
               	break;

           case '2':
           		Lb_printf("KeyPad Start : press two keys to exit\n");
 800a49c:	4840      	ldr	r0, [pc, #256]	; (800a5a0 <Ap_EduMenu_ExeCmd+0x314>)
 800a49e:	47a8      	blx	r5
 800a4a0:	4e40      	ldr	r6, [pc, #256]	; (800a5a4 <Ap_EduMenu_ExeCmd+0x318>)
 800a4a2:	4c41      	ldr	r4, [pc, #260]	; (800a5a8 <Ap_EduMenu_ExeCmd+0x31c>)
						Lb_printf("%x KeyReleased\n", Hw_KeyPad_GetEventKeyData(HW_KEYPAD_EVENT_RELEASED) );           		           									
					}
					else
					if( IS_SET_BIT( KeyEvent, HW_KEYPAD_EVENT_REPEAT) )
					{
						KeyNum = Hw_KeyPad_GetEventKeyNum(HW_KEYPAD_EVENT_REPEAT);
 800a4a4:	f8df 9124 	ldr.w	r9, [pc, #292]	; 800a5cc <Ap_EduMenu_ExeCmd+0x340>
						
						Lb_printf("%x KeyRepeat Cnt : %d\n",Hw_KeyPad_GetEventKeyData(HW_KEYPAD_EVENT_REPEAT), Hw_KeyPad_GetRepeatCnt( KeyNum ) );           		           									
 800a4a8:	4f40      	ldr	r7, [pc, #256]	; (800a5ac <Ap_EduMenu_ExeCmd+0x320>)
 800a4aa:	f8df 8124 	ldr.w	r8, [pc, #292]	; 800a5d0 <Ap_EduMenu_ExeCmd+0x344>
 800a4ae:	e006      	b.n	800a4be <Ap_EduMenu_ExeCmd+0x232>
           			if( IS_SET_BIT( KeyEvent, HW_KEYPAD_EVENT_PRESSED) )
           			{ 
           				Lb_printf("%x KeyPressed\n", Hw_KeyPad_GetEventKeyData(HW_KEYPAD_EVENT_PRESSED) );           		           			
					}										
					else
					if( IS_SET_BIT( KeyEvent, HW_KEYPAD_EVENT_RELEASED) )
 800a4b0:	0742      	lsls	r2, r0, #29
 800a4b2:	d429      	bmi.n	800a508 <Ap_EduMenu_ExeCmd+0x27c>
					{
						Lb_printf("%x KeyReleased\n", Hw_KeyPad_GetEventKeyData(HW_KEYPAD_EVENT_RELEASED) );           		           									
					}
					else
					if( IS_SET_BIT( KeyEvent, HW_KEYPAD_EVENT_REPEAT) )
 800a4b4:	0783      	lsls	r3, r0, #30
 800a4b6:	d42d      	bmi.n	800a514 <Ap_EduMenu_ExeCmd+0x288>
						KeyNum = Hw_KeyPad_GetEventKeyNum(HW_KEYPAD_EVENT_REPEAT);
						
						Lb_printf("%x KeyRepeat Cnt : %d\n",Hw_KeyPad_GetEventKeyData(HW_KEYPAD_EVENT_REPEAT), Hw_KeyPad_GetRepeatCnt( KeyNum ) );           		           									
					}
					
					KeyPressedCnt = Hw_KeyPad_GetPressedCnt();
 800a4b8:	47a0      	blx	r4
						
					if( KeyPressedCnt >= 2 )
 800a4ba:	2801      	cmp	r0, #1
 800a4bc:	d838      	bhi.n	800a530 <Ap_EduMenu_ExeCmd+0x2a4>

           case '2':
           		Lb_printf("KeyPad Start : press two keys to exit\n");
           		while(1)
           		{
           			KeyEvent = Hw_KeyPad_WaitForEvent(1000);
 800a4be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a4c2:	47b0      	blx	r6
           			 
           			if( IS_SET_BIT( KeyEvent, HW_KEYPAD_EVENT_PRESSED) )
 800a4c4:	07c1      	lsls	r1, r0, #31
 800a4c6:	d5f3      	bpl.n	800a4b0 <Ap_EduMenu_ExeCmd+0x224>
           			{ 
           				Lb_printf("%x KeyPressed\n", Hw_KeyPad_GetEventKeyData(HW_KEYPAD_EVENT_PRESSED) );           		           			
 800a4c8:	2000      	movs	r0, #0
 800a4ca:	47b8      	blx	r7
 800a4cc:	4601      	mov	r1, r0
 800a4ce:	4838      	ldr	r0, [pc, #224]	; (800a5b0 <Ap_EduMenu_ExeCmd+0x324>)
 800a4d0:	47a8      	blx	r5
 800a4d2:	e7f1      	b.n	800a4b8 <Ap_EduMenu_ExeCmd+0x22c>
    if( key > 0 )
    {
        switch(key)
        {
           case '1':
           		Hw_Led_Toggle( 0 );
 800a4d4:	4d37      	ldr	r5, [pc, #220]	; (800a5b4 <Ap_EduMenu_ExeCmd+0x328>)
 800a4d6:	2000      	movs	r0, #0
           		Hw_Timer_Delay_ms(500);
 800a4d8:	4c37      	ldr	r4, [pc, #220]	; (800a5b8 <Ap_EduMenu_ExeCmd+0x32c>)
    if( key > 0 )
    {
        switch(key)
        {
           case '1':
           		Hw_Led_Toggle( 0 );
 800a4da:	47a8      	blx	r5
           		Hw_Timer_Delay_ms(500);
 800a4dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a4e0:	47a0      	blx	r4
           		Hw_Led_Toggle( 1 );
 800a4e2:	2001      	movs	r0, #1
 800a4e4:	47a8      	blx	r5
           		Hw_Timer_Delay_ms(500);
 800a4e6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a4ea:	47a0      	blx	r4
           		Hw_Led_Toggle( 2 );;
 800a4ec:	2002      	movs	r0, #2
 800a4ee:	47a8      	blx	r5
           		Hw_Timer_Delay_ms(500);
 800a4f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a4f4:	47a0      	blx	r4
           		Hw_Led_Toggle( 3 );
 800a4f6:	2003      	movs	r0, #3
 800a4f8:	47a8      	blx	r5
           		Hw_Timer_Delay_ms(500);
 800a4fa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a4fe:	47a0      	blx	r4
               	break;
 800a500:	e6d3      	b.n	800a2aa <Ap_EduMenu_ExeCmd+0x1e>
           case '0':
               break;

			case 'm':
			case 'M':
				Ap_EduMenu_ShowMenu();
 800a502:	4b12      	ldr	r3, [pc, #72]	; (800a54c <Ap_EduMenu_ExeCmd+0x2c0>)
 800a504:	4798      	blx	r3
				break;
 800a506:	e6d0      	b.n	800a2aa <Ap_EduMenu_ExeCmd+0x1e>
           				Lb_printf("%x KeyPressed\n", Hw_KeyPad_GetEventKeyData(HW_KEYPAD_EVENT_PRESSED) );           		           			
					}										
					else
					if( IS_SET_BIT( KeyEvent, HW_KEYPAD_EVENT_RELEASED) )
					{
						Lb_printf("%x KeyReleased\n", Hw_KeyPad_GetEventKeyData(HW_KEYPAD_EVENT_RELEASED) );           		           									
 800a508:	2002      	movs	r0, #2
 800a50a:	47b8      	blx	r7
 800a50c:	4601      	mov	r1, r0
 800a50e:	482b      	ldr	r0, [pc, #172]	; (800a5bc <Ap_EduMenu_ExeCmd+0x330>)
 800a510:	47a8      	blx	r5
 800a512:	e7d1      	b.n	800a4b8 <Ap_EduMenu_ExeCmd+0x22c>
					}
					else
					if( IS_SET_BIT( KeyEvent, HW_KEYPAD_EVENT_REPEAT) )
					{
						KeyNum = Hw_KeyPad_GetEventKeyNum(HW_KEYPAD_EVENT_REPEAT);
 800a514:	2001      	movs	r0, #1
 800a516:	47c8      	blx	r9
 800a518:	4683      	mov	fp, r0
						
						Lb_printf("%x KeyRepeat Cnt : %d\n",Hw_KeyPad_GetEventKeyData(HW_KEYPAD_EVENT_REPEAT), Hw_KeyPad_GetRepeatCnt( KeyNum ) );           		           									
 800a51a:	2001      	movs	r0, #1
 800a51c:	47b8      	blx	r7
 800a51e:	4682      	mov	sl, r0
 800a520:	fa5f f08b 	uxtb.w	r0, fp
 800a524:	47c0      	blx	r8
 800a526:	4651      	mov	r1, sl
 800a528:	4602      	mov	r2, r0
 800a52a:	4825      	ldr	r0, [pc, #148]	; (800a5c0 <Ap_EduMenu_ExeCmd+0x334>)
 800a52c:	47a8      	blx	r5
 800a52e:	e7c3      	b.n	800a4b8 <Ap_EduMenu_ExeCmd+0x22c>
					
					KeyPressedCnt = Hw_KeyPad_GetPressedCnt();
						
					if( KeyPressedCnt >= 2 )
					{
						Lb_printf("Key Exit\n");
 800a530:	4824      	ldr	r0, [pc, #144]	; (800a5c4 <Ap_EduMenu_ExeCmd+0x338>)
 800a532:	47a8      	blx	r5
						break;
					}	
				}
				break;
 800a534:	e6b9      	b.n	800a2aa <Ap_EduMenu_ExeCmd+0x1e>
           				}
           			}

				}
				
				Lb_printf("BT Test Exit\n");
 800a536:	4824      	ldr	r0, [pc, #144]	; (800a5c8 <Ap_EduMenu_ExeCmd+0x33c>)
 800a538:	47a8      	blx	r5
				break; 
 800a53a:	e6b6      	b.n	800a2aa <Ap_EduMenu_ExeCmd+0x1e>
 800a53c:	20000000 	.word	0x20000000
 800a540:	0800b0fd 	.word	0x0800b0fd
 800a544:	0800e0c0 	.word	0x0800e0c0
 800a548:	0800a9c9 	.word	0x0800a9c9
 800a54c:	0800a1e9 	.word	0x0800a1e9
 800a550:	0800bcdd 	.word	0x0800bcdd
 800a554:	0800a1c1 	.word	0x0800a1c1
 800a558:	0800a195 	.word	0x0800a195
 800a55c:	0800c2a1 	.word	0x0800c2a1
 800a560:	0800c2b1 	.word	0x0800c2b1
 800a564:	0800e1d4 	.word	0x0800e1d4
 800a568:	0800e1e8 	.word	0x0800e1e8
 800a56c:	0800bff1 	.word	0x0800bff1
 800a570:	0800e194 	.word	0x0800e194
 800a574:	0800c0b1 	.word	0x0800c0b1
 800a578:	0800e1b8 	.word	0x0800e1b8
 800a57c:	0800e1c4 	.word	0x0800e1c4
 800a580:	0800e140 	.word	0x0800e140
 800a584:	0800b0cd 	.word	0x0800b0cd
 800a588:	0800e160 	.word	0x0800e160
 800a58c:	0800e170 	.word	0x0800e170
 800a590:	20000a02 	.word	0x20000a02
 800a594:	0800e134 	.word	0x0800e134
 800a598:	0800e1f0 	.word	0x0800e1f0
 800a59c:	0800be95 	.word	0x0800be95
 800a5a0:	0800e0c8 	.word	0x0800e0c8
 800a5a4:	0800bd1d 	.word	0x0800bd1d
 800a5a8:	0800bd11 	.word	0x0800bd11
 800a5ac:	0800bd55 	.word	0x0800bd55
 800a5b0:	0800e0f0 	.word	0x0800e0f0
 800a5b4:	0800b5ed 	.word	0x0800b5ed
 800a5b8:	0800b349 	.word	0x0800b349
 800a5bc:	0800e100 	.word	0x0800e100
 800a5c0:	0800e110 	.word	0x0800e110
 800a5c4:	0800e128 	.word	0x0800e128
 800a5c8:	0800e184 	.word	0x0800e184
 800a5cc:	0800bd69 	.word	0x0800bd69
 800a5d0:	0800bcf5 	.word	0x0800bcf5

0800a5d4 <print_byte_out>:




void print_byte_out(unsigned int c)
{
 800a5d4:	b538      	push	{r3, r4, r5, lr}
	if( StrPrintMode == LB_PRINT_OUT_UART )
 800a5d6:	4b09      	ldr	r3, [pc, #36]	; (800a5fc <print_byte_out+0x28>)




void print_byte_out(unsigned int c)
{
 800a5d8:	4605      	mov	r5, r0
	if( StrPrintMode == LB_PRINT_OUT_UART )
 800a5da:	781b      	ldrb	r3, [r3, #0]
 800a5dc:	b153      	cbz	r3, 800a5f4 <print_byte_out+0x20>
	{
		print_byte(c);
	}
	else
	{
		pStrPrintBuf[ StrPrintBufIndex++ ] = c; 
 800a5de:	4a08      	ldr	r2, [pc, #32]	; (800a600 <print_byte_out+0x2c>)
 800a5e0:	4908      	ldr	r1, [pc, #32]	; (800a604 <print_byte_out+0x30>)
 800a5e2:	6814      	ldr	r4, [r2, #0]
 800a5e4:	6808      	ldr	r0, [r1, #0]
 800a5e6:	1c63      	adds	r3, r4, #1
 800a5e8:	5505      	strb	r5, [r0, r4]
		pStrPrintBuf[ StrPrintBufIndex   ] = 0; 
 800a5ea:	6809      	ldr	r1, [r1, #0]
	{
		print_byte(c);
	}
	else
	{
		pStrPrintBuf[ StrPrintBufIndex++ ] = c; 
 800a5ec:	6013      	str	r3, [r2, #0]
		pStrPrintBuf[ StrPrintBufIndex   ] = 0; 
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	54ca      	strb	r2, [r1, r3]
 800a5f2:	bd38      	pop	{r3, r4, r5, pc}

void print_byte_out(unsigned int c)
{
	if( StrPrintMode == LB_PRINT_OUT_UART )
	{
		print_byte(c);
 800a5f4:	4b04      	ldr	r3, [pc, #16]	; (800a608 <print_byte_out+0x34>)
 800a5f6:	4798      	blx	r3
 800a5f8:	bd38      	pop	{r3, r4, r5, pc}
 800a5fa:	bf00      	nop
 800a5fc:	20000a08 	.word	0x20000a08
 800a600:	20000a04 	.word	0x20000a04
 800a604:	20001158 	.word	0x20001158
 800a608:	0800b11d 	.word	0x0800b11d

0800a60c <PrintString.part.0>:
                }
        }
        return;
}

void PrintString(char *fmt, char *s)
 800a60c:	b538      	push	{r3, r4, r5, lr}
 800a60e:	4604      	mov	r4, r0
{
        if (!fmt || !s) return;
        while (*s) print_byte_out(*s++);
 800a610:	7800      	ldrb	r0, [r0, #0]
 800a612:	b128      	cbz	r0, 800a620 <PrintString.part.0+0x14>
 800a614:	4d03      	ldr	r5, [pc, #12]	; (800a624 <PrintString.part.0+0x18>)
 800a616:	47a8      	blx	r5
 800a618:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 800a61c:	2800      	cmp	r0, #0
 800a61e:	d1fa      	bne.n	800a616 <PrintString.part.0+0xa>
 800a620:	bd38      	pop	{r3, r4, r5, pc}
 800a622:	bf00      	nop
 800a624:	0800a5d5 	.word	0x0800a5d5

0800a628 <DecToLong>:
// 역할 : 10진수 문자열 s에서 정수를 만들어 retval이 가리키는 위치에 기록.
// 매개 : s      : 변환할 문자열의 주소.
//        retval : 변환된 값이 기록될 주소.
// 반환 : return : 1 : success                0 : failure.
// 주의 :
int DecToLong(char *s, long *retval){
 800a628:	b430      	push	{r4, r5}
        long remainder;
        if (!s || !s[0]) return false;
 800a62a:	b1d0      	cbz	r0, 800a662 <DecToLong+0x3a>
 800a62c:	7803      	ldrb	r3, [r0, #0]
 800a62e:	b1d3      	cbz	r3, 800a666 <DecToLong+0x3e>


        for (*retval=0; *s; s++){
 800a630:	2300      	movs	r3, #0
 800a632:	600b      	str	r3, [r1, #0]
 800a634:	7802      	ldrb	r2, [r0, #0]
 800a636:	b19a      	cbz	r2, 800a660 <DecToLong+0x38>
                if (*s < '0' || *s > '9') return false;
 800a638:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
 800a63c:	b2e2      	uxtb	r2, r4
 800a63e:	2a09      	cmp	r2, #9
 800a640:	d902      	bls.n	800a648 <DecToLong+0x20>
 800a642:	e012      	b.n	800a66a <DecToLong+0x42>
 800a644:	2d09      	cmp	r5, #9
 800a646:	d810      	bhi.n	800a66a <DecToLong+0x42>
                remainder = *s - '0';
                *retval = *retval * 10 + remainder;
 800a648:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a64c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800a650:	600b      	str	r3, [r1, #0]
int DecToLong(char *s, long *retval){
        long remainder;
        if (!s || !s[0]) return false;


        for (*retval=0; *s; s++){
 800a652:	f810 2f01 	ldrb.w	r2, [r0, #1]!
                if (*s < '0' || *s > '9') return false;
 800a656:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
 800a65a:	b2e5      	uxtb	r5, r4
int DecToLong(char *s, long *retval){
        long remainder;
        if (!s || !s[0]) return false;


        for (*retval=0; *s; s++){
 800a65c:	2a00      	cmp	r2, #0
 800a65e:	d1f1      	bne.n	800a644 <DecToLong+0x1c>
                remainder = *s - '0';
                *retval = *retval * 10 + remainder;
        }


        return true;
 800a660:	2001      	movs	r0, #1
}        // DecToLong.
 800a662:	bc30      	pop	{r4, r5}
 800a664:	4770      	bx	lr
//        retval : 변환된 값이 기록될 주소.
// 반환 : return : 1 : success                0 : failure.
// 주의 :
int DecToLong(char *s, long *retval){
        long remainder;
        if (!s || !s[0]) return false;
 800a666:	4618      	mov	r0, r3
 800a668:	e7fb      	b.n	800a662 <DecToLong+0x3a>


        for (*retval=0; *s; s++){
                if (*s < '0' || *s > '9') return false;
 800a66a:	2000      	movs	r0, #0
 800a66c:	e7f9      	b.n	800a662 <DecToLong+0x3a>
 800a66e:	bf00      	nop

0800a670 <PrintDec>:
        return;
}


void PrintDec(char *fmt, int l)
{
 800a670:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	bool        leading_zero=true;			// long형의 data를 출력하기 위한 변수.
	long        divisor, result, remainder;


	// fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
	for (i=0; (c=s[i]) != 0; i++)
 800a674:	7803      	ldrb	r3, [r0, #0]
        return;
}


void PrintDec(char *fmt, int l)
{
 800a676:	b084      	sub	sp, #16
	int        i, j;
	char        c, *s=fmt, tol[10];
	bool        flag0=false, flagl=false;	// "%08lx"에서 '0', 'l'의 존재 여부.
	long        flagcnt=0;              	// "%08lx"에서 "8"을 찾아서 long형으로.
 800a678:	2600      	movs	r6, #0
        return;
}


void PrintDec(char *fmt, int l)
{
 800a67a:	4682      	mov	sl, r0
 800a67c:	4689      	mov	r9, r1
	int        i, j;
	char        c, *s=fmt, tol[10];
	bool        flag0=false, flagl=false;	// "%08lx"에서 '0', 'l'의 존재 여부.
	long        flagcnt=0;              	// "%08lx"에서 "8"을 찾아서 long형으로.
 800a67e:	9600      	str	r6, [sp, #0]
	bool        leading_zero=true;			// long형의 data를 출력하기 위한 변수.
	long        divisor, result, remainder;


	// fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
	for (i=0; (c=s[i]) != 0; i++)
 800a680:	2b00      	cmp	r3, #0
 800a682:	d07f      	beq.n	800a784 <PrintDec+0x114>
	{
		if (c=='d') break;
 800a684:	2b64      	cmp	r3, #100	; 0x64
 800a686:	d07d      	beq.n	800a784 <PrintDec+0x114>
			{
				tol[j] = s[i++];
			}
			tol[j] = '\0';
			i--;
			DecToLong(tol, &flagcnt);
 800a688:	4f56      	ldr	r7, [pc, #344]	; (800a7e4 <PrintDec+0x174>)


	// fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
	for (i=0; (c=s[i]) != 0; i++)
	{
		if (c=='d') break;
 800a68a:	4634      	mov	r4, r6
		{
			for (j=0; s[i]>='0' && s[i]<='9'; j++)
			{
				tol[j] = s[i++];
			}
			tol[j] = '\0';
 800a68c:	46b0      	mov	r8, r6

	// fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
	for (i=0; (c=s[i]) != 0; i++)
	{
		if (c=='d') break;
		else if (c>='1' && c<='9')
 800a68e:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800a692:	2a08      	cmp	r2, #8
 800a694:	d872      	bhi.n	800a77c <PrintDec+0x10c>
		{
			for (j=0; s[i]>='0' && s[i]<='9'; j++)
 800a696:	f81a 2004 	ldrb.w	r2, [sl, r4]
 800a69a:	eb0a 0504 	add.w	r5, sl, r4
 800a69e:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800a6a2:	2b09      	cmp	r3, #9
 800a6a4:	a801      	add	r0, sp, #4
 800a6a6:	f04f 0300 	mov.w	r3, #0
 800a6aa:	d808      	bhi.n	800a6be <PrintDec+0x4e>
			{
				tol[j] = s[i++];
 800a6ac:	54c2      	strb	r2, [r0, r3]
	for (i=0; (c=s[i]) != 0; i++)
	{
		if (c=='d') break;
		else if (c>='1' && c<='9')
		{
			for (j=0; s[i]>='0' && s[i]<='9'; j++)
 800a6ae:	f815 2f01 	ldrb.w	r2, [r5, #1]!
			{
				tol[j] = s[i++];
 800a6b2:	3401      	adds	r4, #1
	for (i=0; (c=s[i]) != 0; i++)
	{
		if (c=='d') break;
		else if (c>='1' && c<='9')
		{
			for (j=0; s[i]>='0' && s[i]<='9'; j++)
 800a6b4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800a6b8:	3301      	adds	r3, #1
 800a6ba:	2909      	cmp	r1, #9
 800a6bc:	d9f6      	bls.n	800a6ac <PrintDec+0x3c>
			{
				tol[j] = s[i++];
			}
			tol[j] = '\0';
 800a6be:	aa04      	add	r2, sp, #16
 800a6c0:	18d3      	adds	r3, r2, r3
			i--;
			DecToLong(tol, &flagcnt);
 800a6c2:	4669      	mov	r1, sp
		{
			for (j=0; s[i]>='0' && s[i]<='9'; j++)
			{
				tol[j] = s[i++];
			}
			tol[j] = '\0';
 800a6c4:	f803 8c0c 	strb.w	r8, [r3, #-12]
			i--;
 800a6c8:	3c01      	subs	r4, #1
			DecToLong(tol, &flagcnt);
 800a6ca:	47b8      	blx	r7
	bool        leading_zero=true;			// long형의 data를 출력하기 위한 변수.
	long        divisor, result, remainder;


	// fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
	for (i=0; (c=s[i]) != 0; i++)
 800a6cc:	3401      	adds	r4, #1
 800a6ce:	f81a 3004 	ldrb.w	r3, [sl, r4]
 800a6d2:	b10b      	cbz	r3, 800a6d8 <PrintDec+0x68>
	{
		if (c=='d') break;
 800a6d4:	2b64      	cmp	r3, #100	; 0x64
 800a6d6:	d1da      	bne.n	800a68e <PrintDec+0x1e>
		else if (c=='l') flagl=true;
		else continue;
	}

	// 위의 flag에 따라 출력.
	if (flagcnt)
 800a6d8:	9800      	ldr	r0, [sp, #0]
 800a6da:	2800      	cmp	r0, #0
 800a6dc:	d052      	beq.n	800a784 <PrintDec+0x114>
	{
                if (flagcnt>9) flagcnt=9;
 800a6de:	2809      	cmp	r0, #9
 800a6e0:	dd78      	ble.n	800a7d4 <PrintDec+0x164>
 800a6e2:	2009      	movs	r0, #9
 800a6e4:	9000      	str	r0, [sp, #0]
 800a6e6:	2206      	movs	r2, #6
{
        long retval=num;
        cnt--;


        while (cnt--){
 800a6e8:	2107      	movs	r1, #7
 800a6ea:	230a      	movs	r3, #10
                retval *= num;
 800a6ec:	eb03 0383 	add.w	r3, r3, r3, lsl #2
{
        long retval=num;
        cnt--;


        while (cnt--){
 800a6f0:	3901      	subs	r1, #1
                retval *= num;
 800a6f2:	005b      	lsls	r3, r3, #1
{
        long retval=num;
        cnt--;


        while (cnt--){
 800a6f4:	1c4c      	adds	r4, r1, #1
 800a6f6:	d1f9      	bne.n	800a6ec <PrintDec+0x7c>

	// 위의 flag에 따라 출력.
	if (flagcnt)
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.
 800a6f8:	fb99 f1f3 	sdiv	r1, r9, r3
{
        long retval=num;
        cnt--;


        while (cnt--){
 800a6fc:	240a      	movs	r4, #10
 800a6fe:	2802      	cmp	r0, #2

	// 위의 flag에 따라 출력.
	if (flagcnt)
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.
 800a700:	fb03 9911 	mls	r9, r3, r1, r9
{
        long retval=num;
        cnt--;


        while (cnt--){
 800a704:	d005      	beq.n	800a712 <PrintDec+0xa2>
                retval *= num;
 800a706:	eb04 0484 	add.w	r4, r4, r4, lsl #2
{
        long retval=num;
        cnt--;


        while (cnt--){
 800a70a:	3a01      	subs	r2, #1
                retval *= num;
 800a70c:	0064      	lsls	r4, r4, #1
{
        long retval=num;
        cnt--;


        while (cnt--){
 800a70e:	1c53      	adds	r3, r2, #1
 800a710:	d1f9      	bne.n	800a706 <PrintDec+0x96>
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
 800a712:	f246 6567 	movw	r5, #26215	; 0x6667
 800a716:	4f34      	ldr	r7, [pc, #208]	; (800a7e8 <PrintDec+0x178>)
        return;
}

int Power(int num, int cnt)
{
        long retval=num;
 800a718:	f04f 0801 	mov.w	r8, #1
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
 800a71c:	f2c6 6566 	movt	r5, #26214	; 0x6666
 800a720:	e00d      	b.n	800a73e <PrintDec+0xce>


                        if (result!=0 || divisor==1) leading_zero = false;


                        if (leading_zero==true){
 800a722:	f1b8 0f00 	cmp.w	r8, #0
 800a726:	d01c      	beq.n	800a762 <PrintDec+0xf2>
                                if (flag0)        print_byte_out('0');
 800a728:	2030      	movs	r0, #48	; 0x30
 800a72a:	b906      	cbnz	r6, 800a72e <PrintDec+0xbe>
                                else                print_byte_out(' ');
 800a72c:	2020      	movs	r0, #32
 800a72e:	47b8      	blx	r7
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
 800a730:	fb85 2304 	smull	r2, r3, r5, r4
 800a734:	17e4      	asrs	r4, r4, #31
 800a736:	ebc4 04a3 	rsb	r4, r4, r3, asr #2
 800a73a:	2c00      	cmp	r4, #0
 800a73c:	dd1b      	ble.n	800a776 <PrintDec+0x106>
                        result = remainder/divisor;
 800a73e:	fb99 f3f4 	sdiv	r3, r9, r4

                        if (leading_zero==true){
                                if (flag0)        print_byte_out('0');
                                else                print_byte_out(' ');
                        }
                        else print_byte_out((char)(result)+'0');
 800a742:	b2d8      	uxtb	r0, r3
 800a744:	3030      	adds	r0, #48	; 0x30
                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
 800a746:	f1b4 0e01 	subs.w	lr, r4, #1
 800a74a:	f1de 0200 	rsbs	r2, lr, #0
 800a74e:	eb52 020e 	adcs.w	r2, r2, lr
 800a752:	2b00      	cmp	r3, #0
 800a754:	bf18      	it	ne
 800a756:	f042 0201 	orrne.w	r2, r2, #1
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 800a75a:	fb04 9913 	mls	r9, r4, r3, r9


                        if (result!=0 || divisor==1) leading_zero = false;
 800a75e:	2a00      	cmp	r2, #0
 800a760:	d0df      	beq.n	800a722 <PrintDec+0xb2>

                        if (leading_zero==true){
                                if (flag0)        print_byte_out('0');
                                else                print_byte_out(' ');
                        }
                        else print_byte_out((char)(result)+'0');
 800a762:	47b8      	blx	r7
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
 800a764:	fb85 2304 	smull	r2, r3, r5, r4
 800a768:	17e4      	asrs	r4, r4, #31
 800a76a:	ebc4 04a3 	rsb	r4, r4, r3, asr #2
 800a76e:	2c00      	cmp	r4, #0

                        if (leading_zero==true){
                                if (flag0)        print_byte_out('0');
                                else                print_byte_out(' ');
                        }
                        else print_byte_out((char)(result)+'0');
 800a770:	f04f 0800 	mov.w	r8, #0
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
 800a774:	dce3      	bgt.n	800a73e <PrintDec+0xce>
                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
                }
        }
        return;
}
 800a776:	b004      	add	sp, #16
 800a778:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			}
			tol[j] = '\0';
			i--;
			DecToLong(tol, &flagcnt);
		}
		else if (c=='0') flag0=true;
 800a77c:	2b30      	cmp	r3, #48	; 0x30
 800a77e:	bf08      	it	eq
 800a780:	2601      	moveq	r6, #1
 800a782:	e7a3      	b.n	800a6cc <PrintDec+0x5c>

                        if (leading_zero==true){
                                if (flag0)        print_byte_out('0');
                                else                print_byte_out(' ');
                        }
                        else print_byte_out((char)(result)+'0');
 800a784:	f44f 444a 	mov.w	r4, #51712	; 0xca00
                }
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
 800a788:	f246 6767 	movw	r7, #26215	; 0x6667

                        if (leading_zero==true){
                                if (flag0)        print_byte_out('0');
                                else                print_byte_out(' ');
                        }
                        else print_byte_out((char)(result)+'0');
 800a78c:	250a      	movs	r5, #10
 800a78e:	f6c3 349a 	movt	r4, #15258	; 0x3b9a
 800a792:	2101      	movs	r1, #1
                        result = remainder/divisor;
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 800a794:	4e14      	ldr	r6, [pc, #80]	; (800a7e8 <PrintDec+0x178>)
                }
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
 800a796:	f2c6 6766 	movt	r7, #26214	; 0x6666
 800a79a:	e008      	b.n	800a7ae <PrintDec+0x13e>
                        result = remainder/divisor;
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 800a79c:	47b0      	blx	r6
 800a79e:	2100      	movs	r1, #0
                }
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
 800a7a0:	fb87 2304 	smull	r2, r3, r7, r4
 800a7a4:	17e4      	asrs	r4, r4, #31
 800a7a6:	3d01      	subs	r5, #1
 800a7a8:	ebc4 04a3 	rsb	r4, r4, r3, asr #2
 800a7ac:	d0e3      	beq.n	800a776 <PrintDec+0x106>
                        result = remainder/divisor;
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
 800a7ae:	1e60      	subs	r0, r4, #1
 800a7b0:	4242      	negs	r2, r0
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 800a7b2:	fb99 f3f4 	sdiv	r3, r9, r4
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
 800a7b6:	4142      	adcs	r2, r0
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	bf18      	it	ne
 800a7bc:	f042 0201 	orrne.w	r2, r2, #1
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 800a7c0:	b2d8      	uxtb	r0, r3
 800a7c2:	3030      	adds	r0, #48	; 0x30
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 800a7c4:	fb04 9913 	mls	r9, r4, r3, r9


                        if (result!=0 || divisor==1) leading_zero = false;
 800a7c8:	2a00      	cmp	r2, #0
 800a7ca:	d1e7      	bne.n	800a79c <PrintDec+0x12c>
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 800a7cc:	2900      	cmp	r1, #0
 800a7ce:	d0e5      	beq.n	800a79c <PrintDec+0x12c>
 800a7d0:	2101      	movs	r1, #1
 800a7d2:	e7e5      	b.n	800a7a0 <PrintDec+0x130>
}

int Power(int num, int cnt)
{
        long retval=num;
        cnt--;
 800a7d4:	1e43      	subs	r3, r0, #1


        while (cnt--){
 800a7d6:	1e81      	subs	r1, r0, #2
 800a7d8:	1ec2      	subs	r2, r0, #3
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d185      	bne.n	800a6ea <PrintDec+0x7a>
        return;
}

int Power(int num, int cnt)
{
        long retval=num;
 800a7de:	230a      	movs	r3, #10
 800a7e0:	e78a      	b.n	800a6f8 <PrintDec+0x88>
 800a7e2:	bf00      	nop
 800a7e4:	0800a629 	.word	0x0800a629
 800a7e8:	0800a5d5 	.word	0x0800a5d5

0800a7ec <PrintHex>:
                }
        }
        return;
}

void PrintHex(char *fmt, int l){
 800a7ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        char        uHex, lHex;
        int                cnt;                                                // "%5x"의 경우 5개만 출력하도록 출력한 개수.


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
 800a7f0:	7803      	ldrb	r3, [r0, #0]
                }
        }
        return;
}

void PrintHex(char *fmt, int l){
 800a7f2:	b087      	sub	sp, #28
        int                i, j;
        char        c, *s=fmt, tol[10];
        bool        flag0=false, flagl=false;        // flags.
        long        flagcnt=0;
 800a7f4:	2600      	movs	r6, #0
                }
        }
        return;
}

void PrintHex(char *fmt, int l){
 800a7f6:	4681      	mov	r9, r0
 800a7f8:	9101      	str	r1, [sp, #4]
        int                i, j;
        char        c, *s=fmt, tol[10];
        bool        flag0=false, flagl=false;        // flags.
        long        flagcnt=0;
 800a7fa:	9602      	str	r6, [sp, #8]
        char        uHex, lHex;
        int                cnt;                                                // "%5x"의 경우 5개만 출력하도록 출력한 개수.


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	f000 8085 	beq.w	800a90c <PrintHex+0x120>
                if (c=='x') break;
 800a802:	2b78      	cmp	r3, #120	; 0x78
 800a804:	f000 8082 	beq.w	800a90c <PrintHex+0x120>
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
                                tol[j] = s[i++];
                        }
                        tol[j] = '\0';
                        i--;
                        DecToLong(tol, &flagcnt);
 800a808:	4f6d      	ldr	r7, [pc, #436]	; (800a9c0 <PrintHex+0x1d4>)
        int                cnt;                                                // "%5x"의 경우 5개만 출력하도록 출력한 개수.


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='x') break;
 800a80a:	4634      	mov	r4, r6
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
                                tol[j] = s[i++];
                        }
                        tol[j] = '\0';
 800a80c:	46b0      	mov	r8, r6


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='x') break;
                else if (c>='1' && c<='9'){
 800a80e:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800a812:	2a08      	cmp	r2, #8
 800a814:	d876      	bhi.n	800a904 <PrintHex+0x118>
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
 800a816:	f819 2004 	ldrb.w	r2, [r9, r4]
 800a81a:	eb09 0104 	add.w	r1, r9, r4
 800a81e:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800a822:	2b09      	cmp	r3, #9
 800a824:	a803      	add	r0, sp, #12
 800a826:	f04f 0300 	mov.w	r3, #0
 800a82a:	d808      	bhi.n	800a83e <PrintHex+0x52>
                                tol[j] = s[i++];
 800a82c:	54c2      	strb	r2, [r0, r3]

        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='x') break;
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
 800a82e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
                                tol[j] = s[i++];
 800a832:	3401      	adds	r4, #1

        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='x') break;
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
 800a834:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800a838:	3301      	adds	r3, #1
 800a83a:	2d09      	cmp	r5, #9
 800a83c:	d9f6      	bls.n	800a82c <PrintHex+0x40>
                                tol[j] = s[i++];
                        }
                        tol[j] = '\0';
 800a83e:	aa06      	add	r2, sp, #24
 800a840:	18d3      	adds	r3, r2, r3
                        i--;
                        DecToLong(tol, &flagcnt);
 800a842:	a902      	add	r1, sp, #8
                if (c=='x') break;
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
                                tol[j] = s[i++];
                        }
                        tol[j] = '\0';
 800a844:	f803 8c0c 	strb.w	r8, [r3, #-12]
                        i--;
 800a848:	3c01      	subs	r4, #1
                        DecToLong(tol, &flagcnt);
 800a84a:	47b8      	blx	r7
        char        uHex, lHex;
        int                cnt;                                                // "%5x"의 경우 5개만 출력하도록 출력한 개수.


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
 800a84c:	3401      	adds	r4, #1
 800a84e:	f819 3004 	ldrb.w	r3, [r9, r4]
 800a852:	b10b      	cbz	r3, 800a858 <PrintHex+0x6c>
                if (c=='x') break;
 800a854:	2b78      	cmp	r3, #120	; 0x78
 800a856:	d1da      	bne.n	800a80e <PrintHex+0x22>
 800a858:	9a01      	ldr	r2, [sp, #4]
 800a85a:	9b02      	ldr	r3, [sp, #8]
 800a85c:	ba12      	rev	r2, r2
                else continue;
        }


        s = (char *)(&l);
        l = SWAP32(l);                // little, big endian에 따라서.(big이 출력하기 쉬워 순서를 바꿈)
 800a85e:	9201      	str	r2, [sp, #4]
        
        // 위의 flag에 따라 출력.
        if (flagcnt){
 800a860:	2b00      	cmp	r3, #0
 800a862:	d056      	beq.n	800a912 <PrintHex+0x126>
                if (flagcnt&0x01){        // flagcnt가 홀수 일때, upper를 무시, lower만 출력.
 800a864:	07da      	lsls	r2, r3, #31
void PrintHex(char *fmt, int l){
        int                i, j;
        char        c, *s=fmt, tol[10];
        bool        flag0=false, flagl=false;        // flags.
        long        flagcnt=0;
        bool        leading_zero=true;
 800a866:	bf58      	it	pl
 800a868:	f04f 0801 	movpl.w	r8, #1
        s = (char *)(&l);
        l = SWAP32(l);                // little, big endian에 따라서.(big이 출력하기 쉬워 순서를 바꿈)
        
        // 위의 flag에 따라 출력.
        if (flagcnt){
                if (flagcnt&0x01){        // flagcnt가 홀수 일때, upper를 무시, lower만 출력.
 800a86c:	d521      	bpl.n	800a8b2 <PrintHex+0xc6>
                        c = s[(8-(flagcnt+1))/2]; // 홀수 일때 그 위치를 포함하는 곳의 값을 가져 옵니다.
 800a86e:	43db      	mvns	r3, r3
 800a870:	3308      	adds	r3, #8
 800a872:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800a876:	aa06      	add	r2, sp, #24
 800a878:	eb02 0363 	add.w	r3, r2, r3, asr #1
                        
                        // lower 4 bits를 가져와서 ascii code로.
                        lHex = ((c>>0)&0x0f);
 800a87c:	f813 3c14 	ldrb.w	r3, [r3, #-20]
                        if (lHex!=0) leading_zero=false;
 800a880:	f013 030f 	ands.w	r3, r3, #15
 800a884:	d00b      	beq.n	800a89e <PrintHex+0xb2>
                        if (lHex<10) lHex+='0';
 800a886:	2b09      	cmp	r3, #9
 800a888:	bf98      	it	ls
 800a88a:	f103 0030 	addls.w	r0, r3, #48	; 0x30
 800a88e:	d901      	bls.n	800a894 <PrintHex+0xa8>
                        else         lHex+='A'-10;
 800a890:	f103 0037 	add.w	r0, r3, #55	; 0x37
                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(lHex);
 800a894:	4f4b      	ldr	r7, [pc, #300]	; (800a9c4 <PrintHex+0x1d8>)
 800a896:	47b8      	blx	r7
 800a898:	f04f 0800 	mov.w	r8, #0
 800a89c:	e006      	b.n	800a8ac <PrintHex+0xc0>
                        else         lHex+='A'-10;


                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
 800a89e:	2e00      	cmp	r6, #0
 800a8a0:	d07c      	beq.n	800a99c <PrintHex+0x1b0>
 800a8a2:	2030      	movs	r0, #48	; 0x30
 800a8a4:	4f47      	ldr	r7, [pc, #284]	; (800a9c4 <PrintHex+0x1d8>)
 800a8a6:	47b8      	blx	r7
 800a8a8:	f04f 0801 	mov.w	r8, #1
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(lHex);
                        
                        flagcnt--;
 800a8ac:	9b02      	ldr	r3, [sp, #8]
 800a8ae:	3b01      	subs	r3, #1
 800a8b0:	9302      	str	r3, [sp, #8]
                }


                // byte단위의 data를 Hex로 출력.
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
 800a8b2:	f1c3 0308 	rsb	r3, r3, #8
 800a8b6:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800a8ba:	105c      	asrs	r4, r3, #1
 800a8bc:	2c03      	cmp	r4, #3
 800a8be:	dc1e      	bgt.n	800a8fe <PrintHex+0x112>
                }
        }
        return;
}

void PrintHex(char *fmt, int l){
 800a8c0:	ab01      	add	r3, sp, #4
 800a8c2:	4f40      	ldr	r7, [pc, #256]	; (800a9c4 <PrintHex+0x1d8>)
 800a8c4:	191c      	adds	r4, r3, r4
 800a8c6:	f10d 0908 	add.w	r9, sp, #8
                }


                // byte단위의 data를 Hex로 출력.
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
                        c = s[i];
 800a8ca:	f814 3b01 	ldrb.w	r3, [r4], #1
                                
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 800a8ce:	f003 050f 	and.w	r5, r3, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 800a8d2:	091b      	lsrs	r3, r3, #4
 800a8d4:	d04d      	beq.n	800a972 <PrintHex+0x186>
                        if (uHex<10) uHex+='0';
 800a8d6:	2b09      	cmp	r3, #9
                        else         uHex+='A'-10;
 800a8d8:	bf88      	it	hi
 800a8da:	f103 0037 	addhi.w	r0, r3, #55	; 0x37


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 800a8de:	d969      	bls.n	800a9b4 <PrintHex+0x1c8>
                        // upper 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(uHex);
 800a8e0:	47b8      	blx	r7
 800a8e2:	f04f 0800 	mov.w	r8, #0
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
 800a8e6:	2d00      	cmp	r5, #0
 800a8e8:	d04b      	beq.n	800a982 <PrintHex+0x196>
                        if (lHex<10) lHex+='0';
 800a8ea:	2d09      	cmp	r5, #9
                        else         lHex+='A'-10;
 800a8ec:	bf88      	it	hi
 800a8ee:	f105 0037 	addhi.w	r0, r5, #55	; 0x37
                        }
                        else print_byte_out(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
                        if (lHex<10) lHex+='0';
 800a8f2:	d959      	bls.n	800a9a8 <PrintHex+0x1bc>
                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(lHex);
 800a8f4:	47b8      	blx	r7
 800a8f6:	f04f 0800 	mov.w	r8, #0
                        flagcnt--;
                }


                // byte단위의 data를 Hex로 출력.
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
 800a8fa:	454c      	cmp	r4, r9
 800a8fc:	d1e5      	bne.n	800a8ca <PrintHex+0xde>
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte_out(lHex);
                }
        }
        return;
}
 800a8fe:	b007      	add	sp, #28
 800a900:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                        }
                        tol[j] = '\0';
                        i--;
                        DecToLong(tol, &flagcnt);
                }
                else if (c=='0') flag0=true;
 800a904:	2b30      	cmp	r3, #48	; 0x30
 800a906:	bf08      	it	eq
 800a908:	2601      	moveq	r6, #1
 800a90a:	e79f      	b.n	800a84c <PrintHex+0x60>
 800a90c:	9b01      	ldr	r3, [sp, #4]
 800a90e:	ba1b      	rev	r3, r3
                else continue;
        }


        s = (char *)(&l);
        l = SWAP32(l);                // little, big endian에 따라서.(big이 출력하기 쉬워 순서를 바꿈)
 800a910:	9301      	str	r3, [sp, #4]
                }
        }
        return;
}

void PrintHex(char *fmt, int l){
 800a912:	f10d 0603 	add.w	r6, sp, #3
                        else print_byte_out(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
                        c = s[i];
 800a916:	f816 3f01 	ldrb.w	r3, [r6, #1]!
                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(lHex);
 800a91a:	2201      	movs	r2, #1
 800a91c:	2400      	movs	r4, #0
                for (i=0; i<4; i++){
                        c = s[i];
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 800a91e:	f003 050f 	and.w	r5, r3, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 800a922:	091b      	lsrs	r3, r3, #4
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
 800a924:	4f27      	ldr	r7, [pc, #156]	; (800a9c4 <PrintHex+0x1d8>)
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 800a926:	d01e      	beq.n	800a966 <PrintHex+0x17a>
                        if (uHex<10) uHex+='0';
 800a928:	2b09      	cmp	r3, #9
                        else         uHex+='A'-10;
 800a92a:	bf88      	it	hi
 800a92c:	f103 0037 	addhi.w	r0, r3, #55	; 0x37
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 800a930:	d93d      	bls.n	800a9ae <PrintHex+0x1c2>
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
 800a932:	47b8      	blx	r7
 800a934:	2200      	movs	r2, #0
                        
                        if (lHex!=0 || i==3) leading_zero = false;
 800a936:	1c2b      	adds	r3, r5, #0
 800a938:	bf18      	it	ne
 800a93a:	2301      	movne	r3, #1
 800a93c:	2c03      	cmp	r4, #3
 800a93e:	bf08      	it	eq
 800a940:	f043 0301 	orreq.w	r3, r3, #1
 800a944:	b193      	cbz	r3, 800a96c <PrintHex+0x180>
                        if (lHex<10) lHex+='0';
 800a946:	2d09      	cmp	r5, #9
                        else         lHex+='A'-10;
 800a948:	bf88      	it	hi
 800a94a:	f105 0037 	addhi.w	r0, r5, #55	; 0x37
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
 800a94e:	d934      	bls.n	800a9ba <PrintHex+0x1ce>
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte_out(lHex);
 800a950:	47b8      	blx	r7
 800a952:	2200      	movs	r2, #0
                        }
                        else print_byte_out(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
 800a954:	3401      	adds	r4, #1
 800a956:	2c04      	cmp	r4, #4
 800a958:	d0d1      	beq.n	800a8fe <PrintHex+0x112>
                        c = s[i];
 800a95a:	f816 3f01 	ldrb.w	r3, [r6, #1]!
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 800a95e:	f003 050f 	and.w	r5, r3, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 800a962:	091b      	lsrs	r3, r3, #4
 800a964:	d1e0      	bne.n	800a928 <PrintHex+0x13c>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
 800a966:	b312      	cbz	r2, 800a9ae <PrintHex+0x1c2>
 800a968:	2201      	movs	r2, #1
 800a96a:	e7e4      	b.n	800a936 <PrintHex+0x14a>
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte_out(lHex);
 800a96c:	b32a      	cbz	r2, 800a9ba <PrintHex+0x1ce>
 800a96e:	2201      	movs	r2, #1
 800a970:	e7f0      	b.n	800a954 <PrintHex+0x168>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;


                        // upper 4 bits 출력.
                        if (leading_zero){
 800a972:	f1b8 0f00 	cmp.w	r8, #0
 800a976:	d01d      	beq.n	800a9b4 <PrintHex+0x1c8>
                                if (flag0) print_byte_out('0');
 800a978:	b156      	cbz	r6, 800a990 <PrintHex+0x1a4>
 800a97a:	2030      	movs	r0, #48	; 0x30
 800a97c:	47b8      	blx	r7
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
 800a97e:	2d00      	cmp	r5, #0
 800a980:	d1b3      	bne.n	800a8ea <PrintHex+0xfe>
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;


                        // lower 4 bits 출력.
                        if (leading_zero){
 800a982:	f1b8 0f00 	cmp.w	r8, #0
 800a986:	d00f      	beq.n	800a9a8 <PrintHex+0x1bc>
                                if (flag0) print_byte_out('0');
 800a988:	b12e      	cbz	r6, 800a996 <PrintHex+0x1aa>
 800a98a:	2030      	movs	r0, #48	; 0x30
 800a98c:	47b8      	blx	r7
 800a98e:	e7b4      	b.n	800a8fa <PrintHex+0x10e>


                        // upper 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
 800a990:	2020      	movs	r0, #32
 800a992:	47b8      	blx	r7
 800a994:	e7a7      	b.n	800a8e6 <PrintHex+0xfa>


                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
 800a996:	2020      	movs	r0, #32
 800a998:	47b8      	blx	r7
 800a99a:	e7ae      	b.n	800a8fa <PrintHex+0x10e>


                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
 800a99c:	2020      	movs	r0, #32
 800a99e:	4f09      	ldr	r7, [pc, #36]	; (800a9c4 <PrintHex+0x1d8>)
 800a9a0:	47b8      	blx	r7
 800a9a2:	f04f 0801 	mov.w	r8, #1
 800a9a6:	e781      	b.n	800a8ac <PrintHex+0xc0>
                        }
                        else print_byte_out(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
                        if (lHex<10) lHex+='0';
 800a9a8:	f105 0030 	add.w	r0, r5, #48	; 0x30
 800a9ac:	e7a2      	b.n	800a8f4 <PrintHex+0x108>
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 800a9ae:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800a9b2:	e7be      	b.n	800a932 <PrintHex+0x146>


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 800a9b4:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800a9b8:	e792      	b.n	800a8e0 <PrintHex+0xf4>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
 800a9ba:	f105 0030 	add.w	r0, r5, #48	; 0x30
 800a9be:	e7c7      	b.n	800a950 <PrintHex+0x164>
 800a9c0:	0800a629 	.word	0x0800a629
 800a9c4:	0800a5d5 	.word	0x0800a5d5

0800a9c8 <Lb_printf>:
// 매개 : fmt : printf()와 동일하나 "%s", "%c", "%d", "%x" 사용 가능.
//              %d, %x의 경우에는 "%08x", "%8x"와 같이 나타낼 길이와 빈 공간을 0으로 채울지 선택 가능.
// 반환 : 없음.
// 주의 : 없음.
void Lb_printf(char *fmt, ...)
{
 800a9c8:	b40f      	push	{r0, r1, r2, r3}
 800a9ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9ce:	b084      	sub	sp, #16
	int		i;
	va_list args;
	char	*s=fmt;
 800a9d0:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
        
	va_start(args, fmt);
	
	StrPrintMode = LB_PRINT_OUT_UART;
 800a9d4:	4b34      	ldr	r3, [pc, #208]	; (800aaa8 <Lb_printf+0xe0>)
 800a9d6:	2200      	movs	r2, #0
// 주의 : 없음.
void Lb_printf(char *fmt, ...)
{
	int		i;
	va_list args;
	char	*s=fmt;
 800a9d8:	f85a 4b04 	ldr.w	r4, [sl], #4



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 800a9dc:	4d33      	ldr	r5, [pc, #204]	; (800aaac <Lb_printf+0xe4>)
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
 800a9de:	4f34      	ldr	r7, [pc, #208]	; (800aab0 <Lb_printf+0xe8>)
 800a9e0:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 800aab8 <Lb_printf+0xf0>
					break;
				case 'x' :
					PrintHex(format, va_arg(args, int));
 800a9e4:	4e33      	ldr	r6, [pc, #204]	; (800aab4 <Lb_printf+0xec>)
	char	*s=fmt;
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
        
	va_start(args, fmt);
	
	StrPrintMode = LB_PRINT_OUT_UART;
 800a9e6:	701a      	strb	r2, [r3, #0]
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
 800a9e8:	f10d 0904 	add.w	r9, sp, #4
        
	va_start(args, fmt);
	
	StrPrintMode = LB_PRINT_OUT_UART;
	
	while (*s)
 800a9ec:	7820      	ldrb	r0, [r4, #0]
 800a9ee:	b350      	cbz	r0, 800aa46 <Lb_printf+0x7e>
	{
		if (*s=='%')
 800a9f0:	2825      	cmp	r0, #37	; 0x25
 800a9f2:	d12d      	bne.n	800aa50 <Lb_printf+0x88>
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
 800a9f4:	f88d 0004 	strb.w	r0, [sp, #4]
	
	while (*s)
	{
		if (*s=='%')
		{
			s++;
 800a9f8:	1c62      	adds	r2, r4, #1
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
 800a9fa:	2101      	movs	r1, #1
 800a9fc:	4694      	mov	ip, r2
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 800a9fe:	f812 3b01 	ldrb.w	r3, [r2], #1
 800aa02:	f1a3 0463 	sub.w	r4, r3, #99	; 0x63
 800aa06:	2b78      	cmp	r3, #120	; 0x78
 800aa08:	bf18      	it	ne
 800aa0a:	2c01      	cmpne	r4, #1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 800aa0c:	4610      	mov	r0, r2
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 800aa0e:	d922      	bls.n	800aa56 <Lb_printf+0x8e>
 800aa10:	2b73      	cmp	r3, #115	; 0x73
 800aa12:	d020      	beq.n	800aa56 <Lb_printf+0x8e>
 800aa14:	2b25      	cmp	r3, #37	; 0x25
 800aa16:	d01e      	beq.n	800aa56 <Lb_printf+0x8e>
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 800aa18:	f801 3009 	strb.w	r3, [r1, r9]
 800aa1c:	3101      	adds	r1, #1
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
 800aa1e:	290a      	cmp	r1, #10
 800aa20:	d1ec      	bne.n	800a9fc <Lb_printf+0x34>
 800aa22:	f89c 3001 	ldrb.w	r3, [ip, #1]
					format[i++] = *s++;
				}
			}
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
 800aa26:	1c44      	adds	r4, r0, #1
 800aa28:	2b64      	cmp	r3, #100	; 0x64
 800aa2a:	d01f      	beq.n	800aa6c <Lb_printf+0xa4>
 800aa2c:	d825      	bhi.n	800aa7a <Lb_printf+0xb2>
 800aa2e:	2b25      	cmp	r3, #37	; 0x25
 800aa30:	d036      	beq.n	800aaa0 <Lb_printf+0xd8>
 800aa32:	2b63      	cmp	r3, #99	; 0x63
 800aa34:	d1da      	bne.n	800a9ec <Lb_printf+0x24>



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 800aa36:	f89a 0000 	ldrb.w	r0, [sl]
 800aa3a:	47a8      	blx	r5
        
	va_start(args, fmt);
	
	StrPrintMode = LB_PRINT_OUT_UART;
	
	while (*s)
 800aa3c:	7820      	ldrb	r0, [r4, #0]
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
 800aa3e:	f10a 0a04 	add.w	sl, sl, #4
        
	va_start(args, fmt);
	
	StrPrintMode = LB_PRINT_OUT_UART;
	
	while (*s)
 800aa42:	2800      	cmp	r0, #0
 800aa44:	d1d4      	bne.n	800a9f0 <Lb_printf+0x28>
			s++;
		}
	}
	va_end(args);
	return;
}
 800aa46:	b004      	add	sp, #16
 800aa48:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa4c:	b004      	add	sp, #16
 800aa4e:	4770      	bx	lr



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 800aa50:	47a8      	blx	r5
            }
		}
		else 
		{
			PrintChar("%c", *s);
			s++;
 800aa52:	3401      	adds	r4, #1
 800aa54:	e7ca      	b.n	800a9ec <Lb_printf+0x24>
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
				{
					format[i++] = *s;
 800aa56:	aa04      	add	r2, sp, #16
					format[i] = '\0';
                	break;
 800aa58:	4660      	mov	r0, ip
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
				{
					format[i++] = *s;
 800aa5a:	1851      	adds	r1, r2, r1
					format[i++] = *s++;
				}
			}
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
 800aa5c:	1c44      	adds	r4, r0, #1
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
				{
					format[i++] = *s;
					format[i] = '\0';
 800aa5e:	2200      	movs	r2, #0
					format[i++] = *s++;
				}
			}
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
 800aa60:	2b64      	cmp	r3, #100	; 0x64
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
				{
					format[i++] = *s;
 800aa62:	f801 3c0c 	strb.w	r3, [r1, #-12]
					format[i] = '\0';
 800aa66:	f801 2c0b 	strb.w	r2, [r1, #-11]
					format[i++] = *s++;
				}
			}
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
 800aa6a:	d1df      	bne.n	800aa2c <Lb_printf+0x64>
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
 800aa6c:	f8da 1000 	ldr.w	r1, [sl]
 800aa70:	4648      	mov	r0, r9
 800aa72:	f10a 0a04 	add.w	sl, sl, #4
 800aa76:	47b8      	blx	r7
					break;
 800aa78:	e7b8      	b.n	800a9ec <Lb_printf+0x24>
					format[i++] = *s++;
				}
			}
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
 800aa7a:	2b73      	cmp	r3, #115	; 0x73
 800aa7c:	d008      	beq.n	800aa90 <Lb_printf+0xc8>
 800aa7e:	2b78      	cmp	r3, #120	; 0x78
 800aa80:	d1b4      	bne.n	800a9ec <Lb_printf+0x24>
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
					break;
				case 'x' :
					PrintHex(format, va_arg(args, int));
 800aa82:	f8da 1000 	ldr.w	r1, [sl]
 800aa86:	4648      	mov	r0, r9
 800aa88:	f10a 0a04 	add.w	sl, sl, #4
 800aa8c:	47b0      	blx	r6
					break;
 800aa8e:	e7ad      	b.n	800a9ec <Lb_printf+0x24>
				case 's' :
					PrintString(format, va_arg(args, char *));
 800aa90:	f8da 0000 	ldr.w	r0, [sl]
 800aa94:	f10a 0a04 	add.w	sl, sl, #4
        return;
}

void PrintString(char *fmt, char *s)
{
        if (!fmt || !s) return;
 800aa98:	2800      	cmp	r0, #0
 800aa9a:	d0a7      	beq.n	800a9ec <Lb_printf+0x24>
 800aa9c:	47c0      	blx	r8
 800aa9e:	e7a5      	b.n	800a9ec <Lb_printf+0x24>



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	47a8      	blx	r5
 800aaa4:	e7a2      	b.n	800a9ec <Lb_printf+0x24>
 800aaa6:	bf00      	nop
 800aaa8:	20000a08 	.word	0x20000a08
 800aaac:	0800a5d5 	.word	0x0800a5d5
 800aab0:	0800a671 	.word	0x0800a671
 800aab4:	0800a7ed 	.word	0x0800a7ed
 800aab8:	0800a60d 	.word	0x0800a60d

0800aabc <Lb_sprintf>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Lb_sprintf( char *pStr, char *fmt, ... )
{
 800aabc:	b40e      	push	{r1, r2, r3}
 800aabe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int		i;
	char	*s=fmt;
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
	va_list args;
	        	
	StrPrintMode = LB_PRINT_OUT_STR;
 800aac2:	4b38      	ldr	r3, [pc, #224]	; (800aba4 <Lb_sprintf+0xe8>)
 800aac4:	2201      	movs	r2, #1
 800aac6:	701a      	strb	r2, [r3, #0]
	pStrPrintBuf = pStr;
 800aac8:	4b37      	ldr	r3, [pc, #220]	; (800aba8 <Lb_sprintf+0xec>)
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Lb_sprintf( char *pStr, char *fmt, ... )
{
 800aaca:	b085      	sub	sp, #20
	char	*s=fmt;
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
	va_list args;
	        	
	StrPrintMode = LB_PRINT_OUT_STR;
	pStrPrintBuf = pStr;
 800aacc:	6018      	str	r0, [r3, #0]
     RET     : void
---------------------------------------------------------------------------*/
void Lb_sprintf( char *pStr, char *fmt, ... )
{
	int		i;
	char	*s=fmt;
 800aace:	f10d 0a34 	add.w	sl, sp, #52	; 0x34
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
	va_list args;
	        	
	StrPrintMode = LB_PRINT_OUT_STR;
	pStrPrintBuf = pStr;
	StrPrintBufIndex = 0;
 800aad2:	4b36      	ldr	r3, [pc, #216]	; (800abac <Lb_sprintf+0xf0>)
 800aad4:	2200      	movs	r2, #0
     RET     : void
---------------------------------------------------------------------------*/
void Lb_sprintf( char *pStr, char *fmt, ... )
{
	int		i;
	char	*s=fmt;
 800aad6:	f85a 4b04 	ldr.w	r4, [sl], #4



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 800aada:	4d35      	ldr	r5, [pc, #212]	; (800abb0 <Lb_sprintf+0xf4>)
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
 800aadc:	4f35      	ldr	r7, [pc, #212]	; (800abb4 <Lb_sprintf+0xf8>)
 800aade:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 800abbc <Lb_sprintf+0x100>
					break;
				case 'x' :
					PrintHex(format, va_arg(args, int));
 800aae2:	4e35      	ldr	r6, [pc, #212]	; (800abb8 <Lb_sprintf+0xfc>)
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
	va_list args;
	        	
	StrPrintMode = LB_PRINT_OUT_STR;
	pStrPrintBuf = pStr;
	StrPrintBufIndex = 0;
 800aae4:	601a      	str	r2, [r3, #0]
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
 800aae6:	f10d 0904 	add.w	r9, sp, #4
	pStrPrintBuf = pStr;
	StrPrintBufIndex = 0;
	
	va_start(args, fmt);
	
	while (*s)
 800aaea:	7820      	ldrb	r0, [r4, #0]
 800aaec:	b350      	cbz	r0, 800ab44 <Lb_sprintf+0x88>
	{
		if (*s=='%')
 800aaee:	2825      	cmp	r0, #37	; 0x25
 800aaf0:	d12d      	bne.n	800ab4e <Lb_sprintf+0x92>
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
 800aaf2:	f88d 0004 	strb.w	r0, [sp, #4]
	
	while (*s)
	{
		if (*s=='%')
		{
			s++;
 800aaf6:	1c62      	adds	r2, r4, #1
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
 800aaf8:	2101      	movs	r1, #1
 800aafa:	4694      	mov	ip, r2
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 800aafc:	f812 3b01 	ldrb.w	r3, [r2], #1
 800ab00:	f1a3 0463 	sub.w	r4, r3, #99	; 0x63
 800ab04:	2b78      	cmp	r3, #120	; 0x78
 800ab06:	bf18      	it	ne
 800ab08:	2c01      	cmpne	r4, #1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 800ab0a:	4610      	mov	r0, r2
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 800ab0c:	d922      	bls.n	800ab54 <Lb_sprintf+0x98>
 800ab0e:	2b73      	cmp	r3, #115	; 0x73
 800ab10:	d020      	beq.n	800ab54 <Lb_sprintf+0x98>
 800ab12:	2b25      	cmp	r3, #37	; 0x25
 800ab14:	d01e      	beq.n	800ab54 <Lb_sprintf+0x98>
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 800ab16:	f801 3009 	strb.w	r3, [r1, r9]
 800ab1a:	3101      	adds	r1, #1
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
 800ab1c:	290a      	cmp	r1, #10
 800ab1e:	d1ec      	bne.n	800aafa <Lb_sprintf+0x3e>
 800ab20:	f89c 3001 	ldrb.w	r3, [ip, #1]
					format[i++] = *s++;
				}
			}
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
 800ab24:	1c44      	adds	r4, r0, #1
 800ab26:	2b64      	cmp	r3, #100	; 0x64
 800ab28:	d01f      	beq.n	800ab6a <Lb_sprintf+0xae>
 800ab2a:	d825      	bhi.n	800ab78 <Lb_sprintf+0xbc>
 800ab2c:	2b25      	cmp	r3, #37	; 0x25
 800ab2e:	d036      	beq.n	800ab9e <Lb_sprintf+0xe2>
 800ab30:	2b63      	cmp	r3, #99	; 0x63
 800ab32:	d1da      	bne.n	800aaea <Lb_sprintf+0x2e>



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 800ab34:	f89a 0000 	ldrb.w	r0, [sl]
 800ab38:	47a8      	blx	r5
	pStrPrintBuf = pStr;
	StrPrintBufIndex = 0;
	
	va_start(args, fmt);
	
	while (*s)
 800ab3a:	7820      	ldrb	r0, [r4, #0]
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
 800ab3c:	f10a 0a04 	add.w	sl, sl, #4
	pStrPrintBuf = pStr;
	StrPrintBufIndex = 0;
	
	va_start(args, fmt);
	
	while (*s)
 800ab40:	2800      	cmp	r0, #0
 800ab42:	d1d4      	bne.n	800aaee <Lb_sprintf+0x32>
	}
	
	va_end(args);
	
	return;
}
 800ab44:	b005      	add	sp, #20
 800ab46:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab4a:	b003      	add	sp, #12
 800ab4c:	4770      	bx	lr



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 800ab4e:	47a8      	blx	r5
            }
		}
		else 
		{
			PrintChar("%c", *s);
			s++;
 800ab50:	3401      	adds	r4, #1
 800ab52:	e7ca      	b.n	800aaea <Lb_sprintf+0x2e>
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
				{
					format[i++] = *s;
 800ab54:	aa04      	add	r2, sp, #16
					format[i] = '\0';
                	break;
 800ab56:	4660      	mov	r0, ip
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
				{
					format[i++] = *s;
 800ab58:	1851      	adds	r1, r2, r1
					format[i++] = *s++;
				}
			}
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
 800ab5a:	1c44      	adds	r4, r0, #1
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
				{
					format[i++] = *s;
					format[i] = '\0';
 800ab5c:	2200      	movs	r2, #0
					format[i++] = *s++;
				}
			}
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
 800ab5e:	2b64      	cmp	r3, #100	; 0x64
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
				{
					format[i++] = *s;
 800ab60:	f801 3c0c 	strb.w	r3, [r1, #-12]
					format[i] = '\0';
 800ab64:	f801 2c0b 	strb.w	r2, [r1, #-11]
					format[i++] = *s++;
				}
			}
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
 800ab68:	d1df      	bne.n	800ab2a <Lb_sprintf+0x6e>
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
 800ab6a:	f8da 1000 	ldr.w	r1, [sl]
 800ab6e:	4648      	mov	r0, r9
 800ab70:	f10a 0a04 	add.w	sl, sl, #4
 800ab74:	47b8      	blx	r7
					break;
 800ab76:	e7b8      	b.n	800aaea <Lb_sprintf+0x2e>
					format[i++] = *s++;
				}
			}
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
 800ab78:	2b73      	cmp	r3, #115	; 0x73
 800ab7a:	d008      	beq.n	800ab8e <Lb_sprintf+0xd2>
 800ab7c:	2b78      	cmp	r3, #120	; 0x78
 800ab7e:	d1b4      	bne.n	800aaea <Lb_sprintf+0x2e>
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
					break;
				case 'x' :
					PrintHex(format, va_arg(args, int));
 800ab80:	f8da 1000 	ldr.w	r1, [sl]
 800ab84:	4648      	mov	r0, r9
 800ab86:	f10a 0a04 	add.w	sl, sl, #4
 800ab8a:	47b0      	blx	r6
					break;
 800ab8c:	e7ad      	b.n	800aaea <Lb_sprintf+0x2e>
				case 's' :
					PrintString(format, va_arg(args, char *));
 800ab8e:	f8da 0000 	ldr.w	r0, [sl]
 800ab92:	f10a 0a04 	add.w	sl, sl, #4
        return;
}

void PrintString(char *fmt, char *s)
{
        if (!fmt || !s) return;
 800ab96:	2800      	cmp	r0, #0
 800ab98:	d0a7      	beq.n	800aaea <Lb_sprintf+0x2e>
 800ab9a:	47c0      	blx	r8
 800ab9c:	e7a5      	b.n	800aaea <Lb_sprintf+0x2e>



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 800ab9e:	4618      	mov	r0, r3
 800aba0:	47a8      	blx	r5
 800aba2:	e7a2      	b.n	800aaea <Lb_sprintf+0x2e>
 800aba4:	20000a08 	.word	0x20000a08
 800aba8:	20001158 	.word	0x20001158
 800abac:	20000a04 	.word	0x20000a04
 800abb0:	0800a5d5 	.word	0x0800a5d5
 800abb4:	0800a671 	.word	0x0800a671
 800abb8:	0800a7ed 	.word	0x0800a7ed
 800abbc:	0800a60d 	.word	0x0800a60d

0800abc0 <Lb_vsprintf>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Lb_vsprintf( char *pStr, char *fmt, Lb_va_list args )
{
 800abc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int		i;
	char	*s=fmt;
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
	        	
	StrPrintMode = LB_PRINT_OUT_STR;
 800abc4:	4b32      	ldr	r3, [pc, #200]	; (800ac90 <Lb_vsprintf+0xd0>)
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Lb_vsprintf( char *pStr, char *fmt, Lb_va_list args )
{
 800abc6:	4615      	mov	r5, r2
	int		i;
	char	*s=fmt;
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
	        	
	StrPrintMode = LB_PRINT_OUT_STR;
 800abc8:	2201      	movs	r2, #1
 800abca:	701a      	strb	r2, [r3, #0]
	pStrPrintBuf = pStr;
 800abcc:	4b31      	ldr	r3, [pc, #196]	; (800ac94 <Lb_vsprintf+0xd4>)
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Lb_vsprintf( char *pStr, char *fmt, Lb_va_list args )
{
 800abce:	b084      	sub	sp, #16
	int		i;
	char	*s=fmt;
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
	        	
	StrPrintMode = LB_PRINT_OUT_STR;
	pStrPrintBuf = pStr;
 800abd0:	6018      	str	r0, [r3, #0]
	StrPrintBufIndex = 0;
 800abd2:	4b31      	ldr	r3, [pc, #196]	; (800ac98 <Lb_vsprintf+0xd8>)
 800abd4:	2200      	movs	r2, #0



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 800abd6:	4e31      	ldr	r6, [pc, #196]	; (800ac9c <Lb_vsprintf+0xdc>)
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
 800abd8:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 800aca4 <Lb_vsprintf+0xe4>
 800abdc:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 800aca8 <Lb_vsprintf+0xe8>
					break;
				case 'x' :
					PrintHex(format, va_arg(args, int));
 800abe0:	4f2f      	ldr	r7, [pc, #188]	; (800aca0 <Lb_vsprintf+0xe0>)
	char	*s=fmt;
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
	        	
	StrPrintMode = LB_PRINT_OUT_STR;
	pStrPrintBuf = pStr;
	StrPrintBufIndex = 0;
 800abe2:	601a      	str	r2, [r3, #0]
     RET     : void
---------------------------------------------------------------------------*/
void Lb_vsprintf( char *pStr, char *fmt, Lb_va_list args )
{
	int		i;
	char	*s=fmt;
 800abe4:	460c      	mov	r4, r1
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
 800abe6:	f10d 0a04 	add.w	sl, sp, #4
	StrPrintMode = LB_PRINT_OUT_STR;
	pStrPrintBuf = pStr;
	StrPrintBufIndex = 0;
	
	
	while (*s)
 800abea:	7820      	ldrb	r0, [r4, #0]
 800abec:	b338      	cbz	r0, 800ac3e <Lb_vsprintf+0x7e>
	{
		if (*s=='%')
 800abee:	2825      	cmp	r0, #37	; 0x25
 800abf0:	d128      	bne.n	800ac44 <Lb_vsprintf+0x84>
		{
			s++;
 800abf2:	1c61      	adds	r1, r4, #1
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
 800abf4:	f88d 0004 	strb.w	r0, [sp, #4]
			
			for (i=1; i<10;)
 800abf8:	2401      	movs	r4, #1
 800abfa:	4608      	mov	r0, r1
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 800abfc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ac00:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
 800ac04:	2b78      	cmp	r3, #120	; 0x78
 800ac06:	bf18      	it	ne
 800ac08:	2a01      	cmpne	r2, #1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 800ac0a:	460a      	mov	r2, r1
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 800ac0c:	d91d      	bls.n	800ac4a <Lb_vsprintf+0x8a>
 800ac0e:	2b73      	cmp	r3, #115	; 0x73
 800ac10:	d01b      	beq.n	800ac4a <Lb_vsprintf+0x8a>
 800ac12:	2b25      	cmp	r3, #37	; 0x25
 800ac14:	d019      	beq.n	800ac4a <Lb_vsprintf+0x8a>
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 800ac16:	f804 300a 	strb.w	r3, [r4, sl]
 800ac1a:	3401      	adds	r4, #1
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
 800ac1c:	2c0a      	cmp	r4, #10
 800ac1e:	d1ec      	bne.n	800abfa <Lb_vsprintf+0x3a>
 800ac20:	7843      	ldrb	r3, [r0, #1]
					format[i++] = *s++;
				}
			}
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
 800ac22:	1c54      	adds	r4, r2, #1
 800ac24:	2b64      	cmp	r3, #100	; 0x64
 800ac26:	d01b      	beq.n	800ac60 <Lb_vsprintf+0xa0>
 800ac28:	d81f      	bhi.n	800ac6a <Lb_vsprintf+0xaa>
 800ac2a:	2b25      	cmp	r3, #37	; 0x25
 800ac2c:	d02c      	beq.n	800ac88 <Lb_vsprintf+0xc8>
 800ac2e:	2b63      	cmp	r3, #99	; 0x63
 800ac30:	d1db      	bne.n	800abea <Lb_vsprintf+0x2a>



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 800ac32:	7828      	ldrb	r0, [r5, #0]
 800ac34:	47b0      	blx	r6
	StrPrintMode = LB_PRINT_OUT_STR;
	pStrPrintBuf = pStr;
	StrPrintBufIndex = 0;
	
	
	while (*s)
 800ac36:	7820      	ldrb	r0, [r4, #0]
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
 800ac38:	3504      	adds	r5, #4
	StrPrintMode = LB_PRINT_OUT_STR;
	pStrPrintBuf = pStr;
	StrPrintBufIndex = 0;
	
	
	while (*s)
 800ac3a:	2800      	cmp	r0, #0
 800ac3c:	d1d7      	bne.n	800abee <Lb_vsprintf+0x2e>
			s++;
		}
	}
	
	return;
}
 800ac3e:	b004      	add	sp, #16
 800ac40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 800ac44:	47b0      	blx	r6
            }
		}
		else 
		{
			PrintChar("%c", *s);
			s++;
 800ac46:	3401      	adds	r4, #1
 800ac48:	e7cf      	b.n	800abea <Lb_vsprintf+0x2a>
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
				{
					format[i++] = *s;
 800ac4a:	aa04      	add	r2, sp, #16
 800ac4c:	1914      	adds	r4, r2, r4
					format[i] = '\0';
 800ac4e:	2200      	movs	r2, #0
 800ac50:	f804 2c0b 	strb.w	r2, [r4, #-11]
                	break;
 800ac54:	4602      	mov	r2, r0
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
				{
					format[i++] = *s;
 800ac56:	f804 3c0c 	strb.w	r3, [r4, #-12]
					format[i++] = *s++;
				}
			}
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
 800ac5a:	1c54      	adds	r4, r2, #1
 800ac5c:	2b64      	cmp	r3, #100	; 0x64
 800ac5e:	d1e3      	bne.n	800ac28 <Lb_vsprintf+0x68>
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
 800ac60:	6829      	ldr	r1, [r5, #0]
 800ac62:	4650      	mov	r0, sl
 800ac64:	3504      	adds	r5, #4
 800ac66:	47c0      	blx	r8
					break;
 800ac68:	e7bf      	b.n	800abea <Lb_vsprintf+0x2a>
					format[i++] = *s++;
				}
			}
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
 800ac6a:	2b73      	cmp	r3, #115	; 0x73
 800ac6c:	d006      	beq.n	800ac7c <Lb_vsprintf+0xbc>
 800ac6e:	2b78      	cmp	r3, #120	; 0x78
 800ac70:	d1bb      	bne.n	800abea <Lb_vsprintf+0x2a>
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
					break;
				case 'x' :
					PrintHex(format, va_arg(args, int));
 800ac72:	6829      	ldr	r1, [r5, #0]
 800ac74:	4650      	mov	r0, sl
 800ac76:	3504      	adds	r5, #4
 800ac78:	47b8      	blx	r7
					break;
 800ac7a:	e7b6      	b.n	800abea <Lb_vsprintf+0x2a>
				case 's' :
					PrintString(format, va_arg(args, char *));
 800ac7c:	6828      	ldr	r0, [r5, #0]
 800ac7e:	3504      	adds	r5, #4
        return;
}

void PrintString(char *fmt, char *s)
{
        if (!fmt || !s) return;
 800ac80:	2800      	cmp	r0, #0
 800ac82:	d0b2      	beq.n	800abea <Lb_vsprintf+0x2a>
 800ac84:	47c8      	blx	r9
 800ac86:	e7b0      	b.n	800abea <Lb_vsprintf+0x2a>



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 800ac88:	4618      	mov	r0, r3
 800ac8a:	47b0      	blx	r6
 800ac8c:	e7ad      	b.n	800abea <Lb_vsprintf+0x2a>
 800ac8e:	bf00      	nop
 800ac90:	20000a08 	.word	0x20000a08
 800ac94:	20001158 	.word	0x20001158
 800ac98:	20000a04 	.word	0x20000a04
 800ac9c:	0800a5d5 	.word	0x0800a5d5
 800aca0:	0800a7ed 	.word	0x0800a7ed
 800aca4:	0800a671 	.word	0x0800a671
 800aca8:	0800a60d 	.word	0x0800a60d

0800acac <Hw_StartUp_Init>:
     			보드 리셋시에 처음 실행되는 함수
     ARG     : 	void
     RET     : 	void
---------------------------------------------------------------------------*/
void Hw_StartUp_Init(void)
{
 800acac:	4668      	mov	r0, sp
 800acae:	f020 0107 	bic.w	r1, r0, #7
 800acb2:	468d      	mov	sp, r1
 800acb4:	b519      	push	{r0, r3, r4, lr}
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 800acb6:	4923      	ldr	r1, [pc, #140]	; (800ad44 <zero_loop+0x66>)
 800acb8:	4b23      	ldr	r3, [pc, #140]	; (800ad48 <zero_loop+0x6a>)
 800acba:	4299      	cmp	r1, r3
 800acbc:	d20b      	bcs.n	800acd6 <Hw_StartUp_Init+0x2a>
     WORK    :	 
     			보드 리셋시에 처음 실행되는 함수
     ARG     : 	void
     RET     : 	void
---------------------------------------------------------------------------*/
void Hw_StartUp_Init(void)
 800acbe:	43c8      	mvns	r0, r1
 800acc0:	18c0      	adds	r0, r0, r3
 800acc2:	f020 0003 	bic.w	r0, r0, #3
 800acc6:	4c21      	ldr	r4, [pc, #132]	; (800ad4c <zero_loop+0x6e>)
 800acc8:	3004      	adds	r0, #4
 800acca:	2300      	movs	r3, #0
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
	{
		*(pulDest++) = *(pulSrc++);
 800accc:	591a      	ldr	r2, [r3, r4]
 800acce:	505a      	str	r2, [r3, r1]
 800acd0:	3304      	adds	r3, #4
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 800acd2:	4283      	cmp	r3, r0
 800acd4:	d1fa      	bne.n	800accc <Hw_StartUp_Init+0x20>
		*(pulDest++) = *(pulSrc++);
	}
  
	/* Zero fill the bss segment.  This is done with inline assembly since this
	   will clear the value of pulDest if it is not kept in a register. */
	__asm("  ldr     r0, =_sbss\n"
 800acd6:	481f      	ldr	r0, [pc, #124]	; (800ad54 <zero_loop+0x76>)
 800acd8:	491f      	ldr	r1, [pc, #124]	; (800ad58 <zero_loop+0x7a>)
 800acda:	f04f 0200 	mov.w	r2, #0

0800acde <zero_loop>:
 800acde:	4288      	cmp	r0, r1
 800ace0:	bfb8      	it	lt
 800ace2:	f840 2b04 	strlt.w	r2, [r0], #4
 800ace6:	f6ff affa 	blt.w	800acde <zero_loop>
	
    // HSI or HSE 선택
            
    //-- CR_HSEON_Set
    //
	REG_RCC_CR |= (1<<16);	
 800acea:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 800acee:	f2c4 0402 	movt	r4, #16386	; 0x4002
 800acf2:	6822      	ldr	r2, [r4, #0]
     RET     : 	void
---------------------------------------------------------------------------*/
void Hw_StartUp_Init(void)
{
	
	u32 TimeOutCnt  = 0;
 800acf4:	2300      	movs	r3, #0
	
    // HSI or HSE 선택
            
    //-- CR_HSEON_Set
    //
	REG_RCC_CR |= (1<<16);	
 800acf6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800acfa:	6022      	str	r2, [r4, #0]
	//
	do
	{	
		HSEStatus = REG_RCC_CR & (1<<17);	// HSE 인경우
		TimeOutCnt++;		
	} while( (HSEStatus == 0) && (TimeOutCnt < 1280) );
 800acfc:	f240 40ff 	movw	r0, #1279	; 0x4ff
		
	//-- 설정된 clock 이 설정 되었는지 확인
	//
	do
	{	
		HSEStatus = REG_RCC_CR & (1<<17);	// HSE 인경우
 800ad00:	6821      	ldr	r1, [r4, #0]
		TimeOutCnt++;		
 800ad02:	3301      	adds	r3, #1
	} while( (HSEStatus == 0) && (TimeOutCnt < 1280) );
 800ad04:	4283      	cmp	r3, r0
 800ad06:	f481 3100 	eor.w	r1, r1, #131072	; 0x20000
 800ad0a:	bf8c      	ite	hi
 800ad0c:	2200      	movhi	r2, #0
 800ad0e:	2201      	movls	r2, #1
 800ad10:	ea12 4251 	ands.w	r2, r2, r1, lsr #17
 800ad14:	d1f4      	bne.n	800ad00 <zero_loop+0x22>
  

	//-- FLASH Access 타이밍 설정
	//
	REG_FLASH_ACR |=  (1<<4);	// Prefetch buffer enable
 800ad16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ad1a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800ad1e:	681a      	ldr	r2, [r3, #0]
 800ad20:	f042 0210 	orr.w	r2, r2, #16
 800ad24:	601a      	str	r2, [r3, #0]
	REG_FLASH_ACR &= ~(3<<0);	// LATENCY Clear
 800ad26:	681a      	ldr	r2, [r3, #0]
 800ad28:	f022 0203 	bic.w	r2, r2, #3
 800ad2c:	601a      	str	r2, [r3, #0]
	REG_FLASH_ACR |=  (2<<0);	// LATENCY = two wait
 800ad2e:	681a      	ldr	r2, [r3, #0]
 800ad30:	f042 0202 	orr.w	r2, r2, #2
 800ad34:	601a      	str	r2, [r3, #0]


    main();
 800ad36:	4b06      	ldr	r3, [pc, #24]	; (800ad50 <zero_loop+0x72>)
 800ad38:	4798      	blx	r3

}
 800ad3a:	e8bd 4019 	ldmia.w	sp!, {r0, r3, r4, lr}
 800ad3e:	4685      	mov	sp, r0
 800ad40:	4770      	bx	lr
 800ad42:	bf00      	nop
 800ad44:	20000000 	.word	0x20000000
 800ad48:	200009e8 	.word	0x200009e8
 800ad4c:	0800f14c 	.word	0x0800f14c
 800ad50:	08009a59 	.word	0x08009a59
 800ad54:	20000a00 	.word	0x20000a00
 800ad58:	2000219c 	.word	0x2000219c

0800ad5c <Hw_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Init( void )
{
 800ad5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	//-- PLL 설정
	//
	Hw_PLL_Init();
 800ad5e:	f24b 1339 	movw	r3, #45369	; 0xb139
 800ad62:	f6c0 0300 	movt	r3, #2048	; 0x800
 800ad66:	4798      	blx	r3
	
	
	//-- 인터럽트 관련 초기화
	//
	Hw_ISR_Init();
 800ad68:	f24b 13cd 	movw	r3, #45517	; 0xb1cd
 800ad6c:	f6c0 0300 	movt	r3, #2048	; 0x800
 800ad70:	4798      	blx	r3
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
 800ad72:	f640 0604 	movw	r6, #2052	; 0x804
	Hw_ISR_Init();
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
 800ad76:	f44f 6e00 	mov.w	lr, #2048	; 0x800
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
 800ad7a:	f243 47b3 	movw	r7, #13491	; 0x34b3
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
 800ad7e:	f44f 6540 	mov.w	r5, #3072	; 0xc00
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
 800ad82:	f640 4404 	movw	r4, #3076	; 0xc04
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
 800ad86:	f241 0104 	movw	r1, #4100	; 0x1004
 800ad8a:	f244 4044 	movw	r0, #17476	; 0x4444
	Hw_ISR_Init();
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
 800ad8e:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 800ad92:	f2c4 0e01 	movt	lr, #16385	; 0x4001
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
 800ad96:	f2c4 0101 	movt	r1, #16385	; 0x4001
 800ad9a:	f2c3 3044 	movt	r0, #13124	; 0x3344
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
 800ad9e:	f2c4 0601 	movt	r6, #16385	; 0x4001
 800ada2:	f2c3 3733 	movt	r7, #13107	; 0x3333
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
 800ada6:	f2c4 0501 	movt	r5, #16385	; 0x4001
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
 800adaa:	f2c4 0401 	movt	r4, #16385	; 0x4001
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
	
	//Hw_DMA_Init();
	Hw_Uart_Init();
 800adae:	f24b 031d 	movw	r3, #45085	; 0xb01d
	Hw_ISR_Init();
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
 800adb2:	f8ce 2000 	str.w	r2, [lr]
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
	
	//Hw_DMA_Init();
	Hw_Uart_Init();
 800adb6:	f6c0 0300 	movt	r3, #2048	; 0x800
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
 800adba:	6037      	str	r7, [r6, #0]
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
 800adbc:	602a      	str	r2, [r5, #0]
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
 800adbe:	6022      	str	r2, [r4, #0]
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
 800adc0:	6008      	str	r0, [r1, #0]
	
	//Hw_DMA_Init();
	Hw_Uart_Init();
 800adc2:	4798      	blx	r3
	Hw_Timer_Init();
 800adc4:	f24b 231d 	movw	r3, #45597	; 0xb21d
 800adc8:	f6c0 0300 	movt	r3, #2048	; 0x800
 800adcc:	4798      	blx	r3

	Hw_Adc_Init();
 800adce:	f24b 4365 	movw	r3, #46181	; 0xb465
 800add2:	f6c0 0300 	movt	r3, #2048	; 0x800
 800add6:	4798      	blx	r3

	//Hw_Si47xx_Init();
	//Hw_N5110G_Init();
	Hw_VBus_Init();
 800add8:	f64b 036d 	movw	r3, #47213	; 0xb86d
 800addc:	f6c0 0300 	movt	r3, #2048	; 0x800
 800ade0:	4798      	blx	r3
	Hw_VCom_Init();
 800ade2:	f24b 6329 	movw	r3, #46633	; 0xb629
 800ade6:	f6c0 0300 	movt	r3, #2048	; 0x800
 800adea:	4798      	blx	r3
	
	Hw_Led_Init();
 800adec:	f24b 53c5 	movw	r3, #46533	; 0xb5c5
 800adf0:	f6c0 0300 	movt	r3, #2048	; 0x800
 800adf4:	4798      	blx	r3
	Hw_KeyPad_Init();
 800adf6:	f64b 4309 	movw	r3, #48137	; 0xbc09
 800adfa:	f6c0 0300 	movt	r3, #2048	; 0x800
 800adfe:	4798      	blx	r3
	Hw_7Seg_Init();
 800ae00:	f64b 53b5 	movw	r3, #48565	; 0xbdb5
 800ae04:	f6c0 0300 	movt	r3, #2048	; 0x800
 800ae08:	4798      	blx	r3
	Hw_CLcd_Init();
 800ae0a:	f24c 0335 	movw	r3, #49205	; 0xc035
 800ae0e:	f6c0 0300 	movt	r3, #2048	; 0x800
 800ae12:	4798      	blx	r3
	Hw_Cds_Init();
 800ae14:	f24c 03ad 	movw	r3, #49325	; 0xc0ad
 800ae18:	f6c0 0300 	movt	r3, #2048	; 0x800
 800ae1c:	4798      	blx	r3
	Hw_DHT11_Init();
 800ae1e:	f24c 330d 	movw	r3, #49933	; 0xc30d
 800ae22:	f6c0 0300 	movt	r3, #2048	; 0x800
 800ae26:	4798      	blx	r3
 800ae28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae2a:	bf00      	nop

0800ae2c <Hw_Wait_Usec>:
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Wait( u32 delay )
{
    volatile u32 i;
    for ( i = 0 ; i < delay ; i++ ){ };
 800ae2c:	2300      	movs	r3, #0
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Wait_Usec( u32 usec )
{
 800ae2e:	b082      	sub	sp, #8
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Wait( u32 delay )
{
    volatile u32 i;
    for ( i = 0 ; i < delay ; i++ ){ };
 800ae30:	9301      	str	r3, [sp, #4]
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Wait_Usec( u32 usec )
{
    Hw_Wait( usec * 6 );
 800ae32:	eb00 0040 	add.w	r0, r0, r0, lsl #1
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Wait( u32 delay )
{
    volatile u32 i;
    for ( i = 0 ; i < delay ; i++ ){ };
 800ae36:	9b01      	ldr	r3, [sp, #4]
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Wait_Usec( u32 usec )
{
    Hw_Wait( usec * 6 );
 800ae38:	0042      	lsls	r2, r0, #1
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Wait( u32 delay )
{
    volatile u32 i;
    for ( i = 0 ; i < delay ; i++ ){ };
 800ae3a:	429a      	cmp	r2, r3
 800ae3c:	d905      	bls.n	800ae4a <Hw_Wait_Usec+0x1e>
 800ae3e:	9b01      	ldr	r3, [sp, #4]
 800ae40:	3301      	adds	r3, #1
 800ae42:	9301      	str	r3, [sp, #4]
 800ae44:	9b01      	ldr	r3, [sp, #4]
 800ae46:	429a      	cmp	r2, r3
 800ae48:	d8f9      	bhi.n	800ae3e <Hw_Wait_Usec+0x12>
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Wait_Usec( u32 usec )
{
    Hw_Wait( usec * 6 );
}
 800ae4a:	b002      	add	sp, #8
 800ae4c:	4770      	bx	lr
 800ae4e:	bf00      	nop

0800ae50 <Hw_ISR_UART2_Handler>:


//-- UART2 ISR
//
void Hw_ISR_UART2_Handler(void)
{
 800ae50:	b500      	push	{lr}
	u8 UartData;
				
	UartData = REG_USART2_DR;
 800ae52:	f244 4304 	movw	r3, #17412	; 0x4404
 800ae56:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ae5a:	681b      	ldr	r3, [r3, #0]


//-- UART2 ISR
//
void Hw_ISR_UART2_Handler(void)
{
 800ae5c:	b083      	sub	sp, #12
	u8 UartData;
				
	UartData = REG_USART2_DR;
 800ae5e:	a902      	add	r1, sp, #8
 800ae60:	f801 3d01 	strb.w	r3, [r1, #-1]!
	

	Hw_Uart_Q_Push( 1, &UartData );
 800ae64:	2001      	movs	r0, #1
 800ae66:	4b05      	ldr	r3, [pc, #20]	; (800ae7c <Hw_ISR_UART2_Handler+0x2c>)
 800ae68:	4798      	blx	r3

	if( Hw_Uart_Ch[HW_UART_COM2].ISR_FuncPtr != NULL )
 800ae6a:	4b05      	ldr	r3, [pc, #20]	; (800ae80 <Hw_ISR_UART2_Handler+0x30>)
 800ae6c:	695b      	ldr	r3, [r3, #20]
 800ae6e:	b113      	cbz	r3, 800ae76 <Hw_ISR_UART2_Handler+0x26>
	{
		(*Hw_Uart_Ch[HW_UART_COM2].ISR_FuncPtr)(UartData);	
 800ae70:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800ae74:	4798      	blx	r3
	} 
}
 800ae76:	b003      	add	sp, #12
 800ae78:	bd00      	pop	{pc}
 800ae7a:	bf00      	nop
 800ae7c:	0800b3b1 	.word	0x0800b3b1
 800ae80:	2000115c 	.word	0x2000115c

0800ae84 <Hw_ISR_UART1_Handler>:


//-- UART1 ISR
//
void Hw_ISR_UART1_Handler(void)
{
 800ae84:	b500      	push	{lr}
	u8 UartData;
				
	UartData = REG_USART1_DR;
 800ae86:	f643 0304 	movw	r3, #14340	; 0x3804
 800ae8a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800ae8e:	681b      	ldr	r3, [r3, #0]


//-- UART1 ISR
//
void Hw_ISR_UART1_Handler(void)
{
 800ae90:	b083      	sub	sp, #12
	u8 UartData;
				
	UartData = REG_USART1_DR;
 800ae92:	a902      	add	r1, sp, #8
 800ae94:	f801 3d01 	strb.w	r3, [r1, #-1]!
	
	Hw_Uart_Q_Push( 0, &UartData );
 800ae98:	2000      	movs	r0, #0
 800ae9a:	4b05      	ldr	r3, [pc, #20]	; (800aeb0 <Hw_ISR_UART1_Handler+0x2c>)
 800ae9c:	4798      	blx	r3

	if( Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr != NULL )
 800ae9e:	4b05      	ldr	r3, [pc, #20]	; (800aeb4 <Hw_ISR_UART1_Handler+0x30>)
 800aea0:	689b      	ldr	r3, [r3, #8]
 800aea2:	b113      	cbz	r3, 800aeaa <Hw_ISR_UART1_Handler+0x26>
	{
		(*Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr)(UartData);	
 800aea4:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800aea8:	4798      	blx	r3
	} 
}
 800aeaa:	b003      	add	sp, #12
 800aeac:	bd00      	pop	{pc}
 800aeae:	bf00      	nop
 800aeb0:	0800b3b1 	.word	0x0800b3b1
 800aeb4:	2000115c 	.word	0x2000115c

0800aeb8 <Hw_Uart_Putch.part.0>:
void Hw_Uart_Putch( u8 Ch,  char Uart_PutData )
{
	switch( Ch )
	{
		case HW_UART_COM1:
		    while( !(REG_USART1_SR & 0x80) );
 800aeb8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800aebc:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800aec0:	6813      	ldr	r3, [r2, #0]
 800aec2:	061b      	lsls	r3, r3, #24
 800aec4:	d5fc      	bpl.n	800aec0 <Hw_Uart_Putch.part.0+0x8>
    		REG_USART1_DR = Uart_PutData;
 800aec6:	f643 0304 	movw	r3, #14340	; 0x3804
 800aeca:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800aece:	6018      	str	r0, [r3, #0]
 800aed0:	4770      	bx	lr
 800aed2:	bf00      	nop

0800aed4 <Hw_Uart_Open_COM1>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Open_COM1( u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	
 800aed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr = ISR_FuncPtr;
	
	
	//-- Clock Enable
	//
	SET_BIT( REG_RCC_APB2ENR, 14 );		// USART1 Clock Enable
 800aed8:	f241 0618 	movw	r6, #4120	; 0x1018
 800aedc:	f2c4 0602 	movt	r6, #16386	; 0x4002
 800aee0:	6835      	ldr	r5, [r6, #0]
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Open_COM1( u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	

	Hw_Uart_Ch[HW_UART_COM1].Baud 		 = BaudData;
 800aee2:	f241 135c 	movw	r3, #4444	; 0x115c
 800aee6:	f2c2 0300 	movt	r3, #8192	; 0x2000
	//
	
	
	//-- USART1 설정
	//	
	REG_USART1_CR1  = 0 
 800aeea:	f643 040c 	movw	r4, #14348	; 0x380c
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Open_COM1( u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	

	Hw_Uart_Ch[HW_UART_COM1].Baud 		 = BaudData;
 800aeee:	6058      	str	r0, [r3, #4]
	Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr = ISR_FuncPtr;
 800aef0:	6099      	str	r1, [r3, #8]
	//
	
	
	//-- USART1 설정
	//	
	REG_USART1_CR1  = 0 
 800aef2:	f2c4 0401 	movt	r4, #16385	; 0x4001
	Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr = ISR_FuncPtr;
	
	
	//-- Clock Enable
	//
	SET_BIT( REG_RCC_APB2ENR, 14 );		// USART1 Clock Enable
 800aef6:	f445 4880 	orr.w	r8, r5, #16384	; 0x4000
	//
	
	
	//-- USART1 설정
	//	
	REG_USART1_CR1  = 0 
 800aefa:	230c      	movs	r3, #12
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART1_CR2  = ( 0 << 12 );		// 1 stop bit	
 800aefc:	f643 0c10 	movw	ip, #14352	; 0x3810
	REG_USART1_CR3  = 0;
 800af00:	f643 0e14 	movw	lr, #14356	; 0x3814
	
	
	//-- 115200bps로 통신 속도 설정
	//
	REG_USART1_BRR  = 0
 800af04:	f643 0708 	movw	r7, #14344	; 0x3808
	Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr = ISR_FuncPtr;
	
	
	//-- Clock Enable
	//
	SET_BIT( REG_RCC_APB2ENR, 14 );		// USART1 Clock Enable
 800af08:	f8c6 8000 	str.w	r8, [r6]
	REG_USART1_CR1  = 0 
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART1_CR2  = ( 0 << 12 );		// 1 stop bit	
 800af0c:	2200      	movs	r2, #0
	//
	
	
	//-- USART1 설정
	//	
	REG_USART1_CR1  = 0 
 800af0e:	6023      	str	r3, [r4, #0]
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART1_CR2  = ( 0 << 12 );		// 1 stop bit	
 800af10:	f2c4 0c01 	movt	ip, #16385	; 0x4001
	REG_USART1_CR3  = 0;
 800af14:	f2c4 0e01 	movt	lr, #16385	; 0x4001
	
	
	//-- 115200bps로 통신 속도 설정
	//
	REG_USART1_BRR  = 0
 800af18:	f240 2371 	movw	r3, #625	; 0x271
 800af1c:	f2c4 0701 	movt	r7, #16385	; 0x4001
					| (  1 << 0 );		// DIV Fraction
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
 800af20:	f24e 1504 	movw	r5, #57604	; 0xe104
	REG_USART1_CR1  = 0 
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART1_CR2  = ( 0 << 12 );		// 1 stop bit	
 800af24:	f8cc 2000 	str.w	r2, [ip]
					| (  1 << 0 );		// DIV Fraction
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
 800af28:	f2ce 0500 	movt	r5, #57344	; 0xe000
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART1_CR2  = ( 0 << 12 );		// 1 stop bit	
	REG_USART1_CR3  = 0;
 800af2c:	f8ce 2000 	str.w	r2, [lr]
	
	
	//-- 115200bps로 통신 속도 설정
	//
	REG_USART1_BRR  = 0
 800af30:	603b      	str	r3, [r7, #0]
					| (  1 << 0 );		// DIV Fraction
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
 800af32:	682b      	ldr	r3, [r5, #0]
	SET_BIT( REG_USART1_CR1, 5 );				// RX 인터럽트 활성화
	
	Hw_ISR_SetIRQFunc( 37, (u32)Hw_ISR_UART1_Handler, 0 );
 800af34:	2025      	movs	r0, #37	; 0x25
					| (  1 << 0 );		// DIV Fraction
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
 800af36:	f043 0320 	orr.w	r3, r3, #32
 800af3a:	602b      	str	r3, [r5, #0]
	SET_BIT( REG_USART1_CR1, 5 );				// RX 인터럽트 활성화
 800af3c:	6821      	ldr	r1, [r4, #0]
	
	Hw_ISR_SetIRQFunc( 37, (u32)Hw_ISR_UART1_Handler, 0 );
 800af3e:	f24b 13e1 	movw	r3, #45537	; 0xb1e1
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
	SET_BIT( REG_USART1_CR1, 5 );				// RX 인터럽트 활성화
 800af42:	f041 0120 	orr.w	r1, r1, #32
 800af46:	6021      	str	r1, [r4, #0]
	
	Hw_ISR_SetIRQFunc( 37, (u32)Hw_ISR_UART1_Handler, 0 );
 800af48:	f64a 6185 	movw	r1, #44677	; 0xae85
 800af4c:	f6c0 0300 	movt	r3, #2048	; 0x800
 800af50:	f6c0 0100 	movt	r1, #2048	; 0x800
 800af54:	4798      	blx	r3
	
	REG_USART1_CR1 |= ( 1 << 13 );	    // USART Enable
 800af56:	6823      	ldr	r3, [r4, #0]
 800af58:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800af5c:	6023      	str	r3, [r4, #0]
 800af5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af62:	bf00      	nop

0800af64 <Hw_Uart_Open_COM2>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Open_COM2( u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	
 800af64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	Hw_Uart_Ch[HW_UART_COM2].ISR_FuncPtr = ISR_FuncPtr;
	
	
	//-- Clock Enable
	//
	SET_BIT( REG_RCC_APB1ENR, 17 );		// USART2 Clock Enable	PCLK2 = 72Mhz
 800af66:	f241 041c 	movw	r4, #4124	; 0x101c
 800af6a:	f2c4 0402 	movt	r4, #16386	; 0x4002
 800af6e:	6825      	ldr	r5, [r4, #0]
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Open_COM2( u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	

	Hw_Uart_Ch[HW_UART_COM2].Baud 		 = BaudData;
 800af70:	f241 125c 	movw	r2, #4444	; 0x115c
 800af74:	f2c2 0200 	movt	r2, #8192	; 0x2000
	Hw_Uart_Ch[HW_UART_COM2].ISR_FuncPtr = ISR_FuncPtr;
	
	
	//-- Clock Enable
	//
	SET_BIT( REG_RCC_APB1ENR, 17 );		// USART2 Clock Enable	PCLK2 = 72Mhz
 800af78:	f445 3500 	orr.w	r5, r5, #131072	; 0x20000
	
	//-- I/O Port 설정
	//
	
	// PA2 - TX
	REG_GPIOA_CRL &= ~(0x0F << ( 8));	// Clear
 800af7c:	f44f 6300 	mov.w	r3, #2048	; 0x800
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Open_COM2( u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	

	Hw_Uart_Ch[HW_UART_COM2].Baud 		 = BaudData;
 800af80:	6110      	str	r0, [r2, #16]
	Hw_Uart_Ch[HW_UART_COM2].ISR_FuncPtr = ISR_FuncPtr;
 800af82:	6151      	str	r1, [r2, #20]
	
	//-- I/O Port 설정
	//
	
	// PA2 - TX
	REG_GPIOA_CRL &= ~(0x0F << ( 8));	// Clear
 800af84:	f2c4 0301 	movt	r3, #16385	; 0x4001
	Hw_Uart_Ch[HW_UART_COM2].ISR_FuncPtr = ISR_FuncPtr;
	
	
	//-- Clock Enable
	//
	SET_BIT( REG_RCC_APB1ENR, 17 );		// USART2 Clock Enable	PCLK2 = 72Mhz
 800af88:	6025      	str	r5, [r4, #0]
	
	//-- I/O Port 설정
	//
	
	// PA2 - TX
	REG_GPIOA_CRL &= ~(0x0F << ( 8));	// Clear
 800af8a:	681a      	ldr	r2, [r3, #0]
	REG_GPIOA_CRL |=  (0x01 << (14));	// CNF    - Floating input	
	

	//-- USART2 설정
	//	
	REG_USART2_CR1  = 0 
 800af8c:	f244 440c 	movw	r4, #17420	; 0x440c
	
	//-- I/O Port 설정
	//
	
	// PA2 - TX
	REG_GPIOA_CRL &= ~(0x0F << ( 8));	// Clear
 800af90:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 800af94:	601a      	str	r2, [r3, #0]
	REG_GPIOA_CRL |=  (0x03 << ( 8));	// MODE   - Output mode, max speed 50Mhz
 800af96:	681a      	ldr	r2, [r3, #0]
	REG_GPIOA_CRL |=  (0x01 << (14));	// CNF    - Floating input	
	

	//-- USART2 설정
	//	
	REG_USART2_CR1  = 0 
 800af98:	f2c4 0400 	movt	r4, #16384	; 0x4000
	//-- I/O Port 설정
	//
	
	// PA2 - TX
	REG_GPIOA_CRL &= ~(0x0F << ( 8));	// Clear
	REG_GPIOA_CRL |=  (0x03 << ( 8));	// MODE   - Output mode, max speed 50Mhz
 800af9c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800afa0:	601a      	str	r2, [r3, #0]
	REG_GPIOA_CRL |=  (0x02 << (10));	// CNF    - Alternate function output Push-pull
 800afa2:	681a      	ldr	r2, [r3, #0]
	REG_USART2_CR1  = 0 
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART2_CR2  = ( 0 << 12 );		// 1 stop bit	
 800afa4:	f244 4610 	movw	r6, #17424	; 0x4410
	//
	
	// PA2 - TX
	REG_GPIOA_CRL &= ~(0x0F << ( 8));	// Clear
	REG_GPIOA_CRL |=  (0x03 << ( 8));	// MODE   - Output mode, max speed 50Mhz
	REG_GPIOA_CRL |=  (0x02 << (10));	// CNF    - Alternate function output Push-pull
 800afa8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800afac:	601a      	str	r2, [r3, #0]
										     	    	
	// PA3 - RX
	REG_GPIOA_CRL &= ~(0x0F << (12));	// Clear
 800afae:	681a      	ldr	r2, [r3, #0]
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART2_CR2  = ( 0 << 12 );		// 1 stop bit	
	REG_USART2_CR3  = 0;
 800afb0:	f244 4514 	movw	r5, #17428	; 0x4414
	REG_GPIOA_CRL &= ~(0x0F << ( 8));	// Clear
	REG_GPIOA_CRL |=  (0x03 << ( 8));	// MODE   - Output mode, max speed 50Mhz
	REG_GPIOA_CRL |=  (0x02 << (10));	// CNF    - Alternate function output Push-pull
										     	    	
	// PA3 - RX
	REG_GPIOA_CRL &= ~(0x0F << (12));	// Clear
 800afb4:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 800afb8:	601a      	str	r2, [r3, #0]
	REG_GPIOA_CRL |=  (0x00 << (12));	// MODE   - Input mode
 800afba:	681a      	ldr	r2, [r3, #0]
	REG_USART2_CR3  = 0;
	
	
	//-- 115200bps로 통신 속도 설정
	//
	REG_USART2_BRR  = 0
 800afbc:	f244 4008 	movw	r0, #17416	; 0x4408
	REG_GPIOA_CRL |=  (0x03 << ( 8));	// MODE   - Output mode, max speed 50Mhz
	REG_GPIOA_CRL |=  (0x02 << (10));	// CNF    - Alternate function output Push-pull
										     	    	
	// PA3 - RX
	REG_GPIOA_CRL &= ~(0x0F << (12));	// Clear
	REG_GPIOA_CRL |=  (0x00 << (12));	// MODE   - Input mode
 800afc0:	601a      	str	r2, [r3, #0]
	REG_GPIOA_CRL |=  (0x01 << (14));	// CNF    - Floating input	
 800afc2:	681f      	ldr	r7, [r3, #0]
	REG_USART2_CR1  = 0 
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART2_CR2  = ( 0 << 12 );		// 1 stop bit	
 800afc4:	2200      	movs	r2, #0
	REG_GPIOA_CRL |=  (0x02 << (10));	// CNF    - Alternate function output Push-pull
										     	    	
	// PA3 - RX
	REG_GPIOA_CRL &= ~(0x0F << (12));	// Clear
	REG_GPIOA_CRL |=  (0x00 << (12));	// MODE   - Input mode
	REG_GPIOA_CRL |=  (0x01 << (14));	// CNF    - Floating input	
 800afc6:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 800afca:	601f      	str	r7, [r3, #0]
	

	//-- USART2 설정
	//	
	REG_USART2_CR1  = 0 
 800afcc:	230c      	movs	r3, #12
 800afce:	6023      	str	r3, [r4, #0]
	REG_USART2_CR3  = 0;
	
	
	//-- 115200bps로 통신 속도 설정
	//
	REG_USART2_BRR  = 0
 800afd0:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800afd4:	f44f 739c 	mov.w	r3, #312	; 0x138
	REG_USART2_CR1  = 0 
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART2_CR2  = ( 0 << 12 );		// 1 stop bit	
 800afd8:	f2c4 0600 	movt	r6, #16384	; 0x4000
	REG_USART2_CR3  = 0;
 800afdc:	f2c4 0500 	movt	r5, #16384	; 0x4000
					| (  8 << 0 );		// DIV Fraction
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 38/32 ), 38%32 );	// NVIC 37번 USART1 인터럽트 활성화
 800afe0:	f24e 1104 	movw	r1, #57604	; 0xe104
	REG_USART2_CR1  = 0 
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART2_CR2  = ( 0 << 12 );		// 1 stop bit	
 800afe4:	6032      	str	r2, [r6, #0]
					| (  8 << 0 );		// DIV Fraction
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 38/32 ), 38%32 );	// NVIC 37번 USART1 인터럽트 활성화
 800afe6:	f2ce 0100 	movt	r1, #57344	; 0xe000
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART2_CR2  = ( 0 << 12 );		// 1 stop bit	
	REG_USART2_CR3  = 0;
 800afea:	602a      	str	r2, [r5, #0]
	
	
	//-- 115200bps로 통신 속도 설정
	//
	REG_USART2_BRR  = 0
 800afec:	6003      	str	r3, [r0, #0]
					| (  8 << 0 );		// DIV Fraction
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 38/32 ), 38%32 );	// NVIC 37번 USART1 인터럽트 활성화
 800afee:	680b      	ldr	r3, [r1, #0]
	SET_BIT( REG_USART2_CR1, 5 );				// RX 인터럽트 활성화
	
	Hw_ISR_SetIRQFunc( 38, (u32)Hw_ISR_UART2_Handler, 0 );
 800aff0:	2026      	movs	r0, #38	; 0x26
					| (  8 << 0 );		// DIV Fraction
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 38/32 ), 38%32 );	// NVIC 37번 USART1 인터럽트 활성화
 800aff2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aff6:	600b      	str	r3, [r1, #0]
	SET_BIT( REG_USART2_CR1, 5 );				// RX 인터럽트 활성화
 800aff8:	6821      	ldr	r1, [r4, #0]
	
	Hw_ISR_SetIRQFunc( 38, (u32)Hw_ISR_UART2_Handler, 0 );
 800affa:	f24b 13e1 	movw	r3, #45537	; 0xb1e1
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 38/32 ), 38%32 );	// NVIC 37번 USART1 인터럽트 활성화
	SET_BIT( REG_USART2_CR1, 5 );				// RX 인터럽트 활성화
 800affe:	f041 0120 	orr.w	r1, r1, #32
 800b002:	6021      	str	r1, [r4, #0]
	
	Hw_ISR_SetIRQFunc( 38, (u32)Hw_ISR_UART2_Handler, 0 );
 800b004:	f64a 6151 	movw	r1, #44625	; 0xae51
 800b008:	f6c0 0300 	movt	r3, #2048	; 0x800
 800b00c:	f6c0 0100 	movt	r1, #2048	; 0x800
 800b010:	4798      	blx	r3
	
	REG_USART2_CR1 |= ( 1 << 13 );	    // USART Enable
 800b012:	6823      	ldr	r3, [r4, #0]
 800b014:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b018:	6023      	str	r3, [r4, #0]
 800b01a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b01c <Hw_Uart_Init>:
---------------------------------------------------------------------------*/
void Hw_Uart_Init( void )
{
	u32 i;
	
	Hw_Uart_Q_Init();
 800b01c:	f24b 3369 	movw	r3, #45929	; 0xb369
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Init( void )
{
 800b020:	b510      	push	{r4, lr}
	u32 i;
	
	Hw_Uart_Q_Init();
 800b022:	f6c0 0300 	movt	r3, #2048	; 0x800
 800b026:	4798      	blx	r3
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 800b028:	f241 135c 	movw	r3, #4444	; 0x115c
 800b02c:	2400      	movs	r4, #0
 800b02e:	f2c2 0300 	movt	r3, #8192	; 0x2000
void Hw_Uart_Open( u8 Ch, u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	
	switch( Ch )
	{
		case HW_UART_COM1:
			Hw_Uart_Open_COM1( BaudData, ISR_FuncPtr );
 800b032:	f64a 62d5 	movw	r2, #44757	; 0xaed5
 800b036:	4621      	mov	r1, r4
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 800b038:	605c      	str	r4, [r3, #4]
		Hw_Uart_Ch[i].ISR_FuncPtr = NULL;
 800b03a:	609c      	str	r4, [r3, #8]
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 800b03c:	611c      	str	r4, [r3, #16]
		Hw_Uart_Ch[i].ISR_FuncPtr = NULL;
 800b03e:	615c      	str	r4, [r3, #20]
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 800b040:	61dc      	str	r4, [r3, #28]
		Hw_Uart_Ch[i].ISR_FuncPtr = NULL;
 800b042:	621c      	str	r4, [r3, #32]
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 800b044:	629c      	str	r4, [r3, #40]	; 0x28
		Hw_Uart_Ch[i].ISR_FuncPtr = NULL;
 800b046:	62dc      	str	r4, [r3, #44]	; 0x2c
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 800b048:	635c      	str	r4, [r3, #52]	; 0x34
		Hw_Uart_Ch[i].ISR_FuncPtr = NULL;
 800b04a:	639c      	str	r4, [r3, #56]	; 0x38
void Hw_Uart_Open( u8 Ch, u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	
	switch( Ch )
	{
		case HW_UART_COM1:
			Hw_Uart_Open_COM1( BaudData, ISR_FuncPtr );
 800b04c:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 800b050:	f6c0 0200 	movt	r2, #2048	; 0x800
 800b054:	4790      	blx	r2
			break;
			
		case HW_UART_COM2:
			Hw_Uart_Open_COM2( BaudData, ISR_FuncPtr );
 800b056:	f64a 7365 	movw	r3, #44901	; 0xaf65
 800b05a:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 800b05e:	4621      	mov	r1, r4
 800b060:	f6c0 0300 	movt	r3, #2048	; 0x800
 800b064:	4798      	blx	r3
 800b066:	bd10      	pop	{r4, pc}

0800b068 <Hw_Uart_SetReceiveFuncISR>:
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Uart_SetReceiveFuncISR( u8 Ch, void (*ISR_FuncPtr)(char Ch) )
{
	Hw_Uart_Ch[Ch].ISR_FuncPtr = ISR_FuncPtr;	
 800b068:	f241 135c 	movw	r3, #4444	; 0x115c
 800b06c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b070:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800b074:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800b078:	6099      	str	r1, [r3, #8]
 800b07a:	4770      	bx	lr

0800b07c <Hw_Uart_Putch>:
			: 시리얼 포트로 문자 1바이트 전송
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Uart_Putch( u8 Ch,  char Uart_PutData )
{
 800b07c:	b508      	push	{r3, lr}
	switch( Ch )
 800b07e:	b918      	cbnz	r0, 800b088 <Hw_Uart_Putch+0xc>
 800b080:	4608      	mov	r0, r1
 800b082:	4b09      	ldr	r3, [pc, #36]	; (800b0a8 <Hw_Uart_Putch+0x2c>)
 800b084:	4798      	blx	r3
 800b086:	bd08      	pop	{r3, pc}
 800b088:	2801      	cmp	r0, #1
 800b08a:	d000      	beq.n	800b08e <Hw_Uart_Putch+0x12>
 800b08c:	bd08      	pop	{r3, pc}
		    while( !(REG_USART1_SR & 0x80) );
    		REG_USART1_DR = Uart_PutData;
			break;
			
		case HW_UART_COM2:
		    while( !(REG_USART2_SR & 0x80) );
 800b08e:	f44f 4288 	mov.w	r2, #17408	; 0x4400
 800b092:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800b096:	6813      	ldr	r3, [r2, #0]
 800b098:	0618      	lsls	r0, r3, #24
 800b09a:	d5fc      	bpl.n	800b096 <Hw_Uart_Putch+0x1a>
    		REG_USART2_DR = Uart_PutData;
 800b09c:	f244 4304 	movw	r3, #17412	; 0x4404
 800b0a0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b0a4:	6019      	str	r1, [r3, #0]
 800b0a6:	bd08      	pop	{r3, pc}
 800b0a8:	0800aeb9 	.word	0x0800aeb9

0800b0ac <Hw_Uart_PrintEx>:
     WORK
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Uart_PrintEx( u8 Ch, char *UartPrintData )
{
 800b0ac:	b570      	push	{r4, r5, r6, lr}
 800b0ae:	460c      	mov	r4, r1
	while( *UartPrintData != '\0' )
 800b0b0:	7809      	ldrb	r1, [r1, #0]
     WORK
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Uart_PrintEx( u8 Ch, char *UartPrintData )
{
 800b0b2:	4605      	mov	r5, r0
	while( *UartPrintData != '\0' )
 800b0b4:	b131      	cbz	r1, 800b0c4 <Hw_Uart_PrintEx+0x18>
 800b0b6:	4e04      	ldr	r6, [pc, #16]	; (800b0c8 <Hw_Uart_PrintEx+0x1c>)
	{
		Hw_Uart_Putch( Ch, *UartPrintData );
 800b0b8:	4628      	mov	r0, r5
 800b0ba:	47b0      	blx	r6
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Uart_PrintEx( u8 Ch, char *UartPrintData )
{
	while( *UartPrintData != '\0' )
 800b0bc:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 800b0c0:	2900      	cmp	r1, #0
 800b0c2:	d1f9      	bne.n	800b0b8 <Hw_Uart_PrintEx+0xc>
 800b0c4:	bd70      	pop	{r4, r5, r6, pc}
 800b0c6:	bf00      	nop
 800b0c8:	0800b07d 	.word	0x0800b07d

0800b0cc <Hw_Uart_Printf>:
     WORK
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Uart_Printf( u8 Ch,  char *format, ... )
{
 800b0cc:	b40e      	push	{r1, r2, r3}
 800b0ce:	b510      	push	{r4, lr}
	
	//va_start( ap, format );

	//vsprintf( Str, format, ap );	

	Lb_sprintf(Str, format );
 800b0d0:	f64a 23bd 	movw	r3, #43709	; 0xaabd
     WORK
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Uart_Printf( u8 Ch,  char *format, ... )
{
 800b0d4:	b0b3      	sub	sp, #204	; 0xcc
 800b0d6:	4604      	mov	r4, r0
	
	//va_start( ap, format );

	//vsprintf( Str, format, ap );	

	Lb_sprintf(Str, format );
 800b0d8:	9935      	ldr	r1, [sp, #212]	; 0xd4
 800b0da:	4668      	mov	r0, sp
 800b0dc:	f6c0 0300 	movt	r3, #2048	; 0x800
 800b0e0:	4798      	blx	r3
	//va_end(ap);	
	
	
	
	
	Hw_Uart_PrintEx( Ch, Str );
 800b0e2:	f24b 03ad 	movw	r3, #45229	; 0xb0ad
 800b0e6:	4620      	mov	r0, r4
 800b0e8:	4669      	mov	r1, sp
 800b0ea:	f6c0 0300 	movt	r3, #2048	; 0x800
 800b0ee:	4798      	blx	r3
}
 800b0f0:	b033      	add	sp, #204	; 0xcc
 800b0f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b0f6:	b003      	add	sp, #12
 800b0f8:	4770      	bx	lr
 800b0fa:	bf00      	nop

0800b0fc <Hw_Uart_GetchNoWait>:
     WORK
     ARG
     RET
---------------------------------------------------------------------------*/
u8 Hw_Uart_GetchNoWait( u8 Ch, u8 *cReturn )
{
 800b0fc:	b538      	push	{r3, r4, r5, lr}
	// 버퍼에 데이터 없으면 실패로 종료.
	if( HW_UART_Q_VAILD(Ch) == 0 )
 800b0fe:	4b05      	ldr	r3, [pc, #20]	; (800b114 <Hw_Uart_GetchNoWait+0x18>)
     WORK
     ARG
     RET
---------------------------------------------------------------------------*/
u8 Hw_Uart_GetchNoWait( u8 Ch, u8 *cReturn )
{
 800b100:	4605      	mov	r5, r0
 800b102:	460c      	mov	r4, r1
	// 버퍼에 데이터 없으면 실패로 종료.
	if( HW_UART_Q_VAILD(Ch) == 0 )
 800b104:	4798      	blx	r3
 800b106:	b120      	cbz	r0, 800b112 <Hw_Uart_GetchNoWait+0x16>
	{
		return FALSE;
	}
		   
	Hw_Uart_Q_Pop( Ch, cReturn );
 800b108:	4628      	mov	r0, r5
 800b10a:	4621      	mov	r1, r4
 800b10c:	4b02      	ldr	r3, [pc, #8]	; (800b118 <Hw_Uart_GetchNoWait+0x1c>)
 800b10e:	4798      	blx	r3
	
	return TRUE;
 800b110:	2001      	movs	r0, #1
}
 800b112:	bd38      	pop	{r3, r4, r5, pc}
 800b114:	0800b385 	.word	0x0800b385
 800b118:	0800b40d 	.word	0x0800b40d

0800b11c <print_byte>:
#if HW_USE_USB_VCOM == 1
	if (c == '\n') Hw_VCom_Putch('\r');
    
    Hw_VCom_Putch(c);
#else	
	if (c == '\n') Hw_Uart_Putch(HW_USE_UART_CH_MENU, '\r');
 800b11c:	280a      	cmp	r0, #10


//------------------------------- printf 포팅용 --------------------------------
//
void print_byte(unsigned int c)
{
 800b11e:	b538      	push	{r3, r4, r5, lr}
 800b120:	4604      	mov	r4, r0
#if HW_USE_USB_VCOM == 1
	if (c == '\n') Hw_VCom_Putch('\r');
    
    Hw_VCom_Putch(c);
#else	
	if (c == '\n') Hw_Uart_Putch(HW_USE_UART_CH_MENU, '\r');
 800b122:	d003      	beq.n	800b12c <print_byte+0x10>
 800b124:	4d03      	ldr	r5, [pc, #12]	; (800b134 <print_byte+0x18>)
 800b126:	b2e0      	uxtb	r0, r4
 800b128:	47a8      	blx	r5
 800b12a:	bd38      	pop	{r3, r4, r5, pc}
 800b12c:	200d      	movs	r0, #13
 800b12e:	4d01      	ldr	r5, [pc, #4]	; (800b134 <print_byte+0x18>)
 800b130:	47a8      	blx	r5
 800b132:	e7f8      	b.n	800b126 <print_byte+0xa>
 800b134:	0800aeb9 	.word	0x0800aeb9

0800b138 <Hw_PLL_Init>:
{
	
#if	CLOCK_EXT == 1
	//-- PLL 설정 72Mhz로 설정함
	//
	REG_RCC_CFGR &= ~(0xF<<18 | 0x1<<17 | 0x1<<16 | 0xF<<4);
 800b138:	f241 0304 	movw	r3, #4100	; 0x1004
 800b13c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b140:	681a      	ldr	r2, [r3, #0]
	REG_RCC_CFGR |=  (0x7<<18 | 0x1<<16);			// 8MHz
    REG_RCC_CR   |=  0x01 << 24;                    // PLLON
 800b142:	f44f 5180 	mov.w	r1, #4096	; 0x1000
{
	
#if	CLOCK_EXT == 1
	//-- PLL 설정 72Mhz로 설정함
	//
	REG_RCC_CFGR &= ~(0xF<<18 | 0x1<<17 | 0x1<<16 | 0xF<<4);
 800b146:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 800b14a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800b14e:	601a      	str	r2, [r3, #0]
	REG_RCC_CFGR |=  (0x7<<18 | 0x1<<16);			// 8MHz
 800b150:	681a      	ldr	r2, [r3, #0]
    REG_RCC_CR   |=  0x01 << 24;                    // PLLON
 800b152:	f2c4 0102 	movt	r1, #16386	; 0x4002
	
#if	CLOCK_EXT == 1
	//-- PLL 설정 72Mhz로 설정함
	//
	REG_RCC_CFGR &= ~(0xF<<18 | 0x1<<17 | 0x1<<16 | 0xF<<4);
	REG_RCC_CFGR |=  (0x7<<18 | 0x1<<16);			// 8MHz
 800b156:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
 800b15a:	601a      	str	r2, [r3, #0]
    REG_RCC_CR   |=  0x01 << 24;                    // PLLON
 800b15c:	680b      	ldr	r3, [r1, #0]

	while( (REG_RCC_CR & (1<<25)) == 0 );			// PLLRDY
 800b15e:	460a      	mov	r2, r1
#if	CLOCK_EXT == 1
	//-- PLL 설정 72Mhz로 설정함
	//
	REG_RCC_CFGR &= ~(0xF<<18 | 0x1<<17 | 0x1<<16 | 0xF<<4);
	REG_RCC_CFGR |=  (0x7<<18 | 0x1<<16);			// 8MHz
    REG_RCC_CR   |=  0x01 << 24;                    // PLLON
 800b160:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b164:	600b      	str	r3, [r1, #0]

	while( (REG_RCC_CR & (1<<25)) == 0 );			// PLLRDY
 800b166:	6813      	ldr	r3, [r2, #0]
 800b168:	019b      	lsls	r3, r3, #6
 800b16a:	d5fc      	bpl.n	800b166 <Hw_PLL_Init+0x2e>
    /////Bits 1:0 SW : System clock switch
    //00: HSI selected as system clock
    //01: HSE selected as system clock
    //10: PLL selected as system clock   <----------------- 선택됨
    //11: not allowed
	REG_RCC_CFGR &= ~0x3;
 800b16c:	f241 0304 	movw	r3, #4100	; 0x1004
 800b170:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b174:	6819      	ldr	r1, [r3, #0]
	//
	REG_RCC_CFGR &= ~(0x7<<11);
	REG_RCC_CFGR |=  (0x0<<11);

    
    while( (REG_RCC_CFGR & 0xC) != 0x08 );
 800b176:	461a      	mov	r2, r3
    /////Bits 1:0 SW : System clock switch
    //00: HSI selected as system clock
    //01: HSE selected as system clock
    //10: PLL selected as system clock   <----------------- 선택됨
    //11: not allowed
	REG_RCC_CFGR &= ~0x3;
 800b178:	f021 0103 	bic.w	r1, r1, #3
 800b17c:	6019      	str	r1, [r3, #0]
	REG_RCC_CFGR |=  0x2;
 800b17e:	6819      	ldr	r1, [r3, #0]
 800b180:	f041 0102 	orr.w	r1, r1, #2
 800b184:	6019      	str	r1, [r3, #0]

	// USB 72M * 2 / 3 = 48Mhz
	//
	CLR_BIT( REG_RCC_CFGR, 22 );
 800b186:	6819      	ldr	r1, [r3, #0]
 800b188:	f421 0180 	bic.w	r1, r1, #4194304	; 0x400000
 800b18c:	6019      	str	r1, [r3, #0]

	// APB1 - PCLK1 36Mhz
	//
	REG_RCC_CFGR &= ~(0x7<<8);
 800b18e:	6819      	ldr	r1, [r3, #0]
 800b190:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 800b194:	6019      	str	r1, [r3, #0]
	REG_RCC_CFGR |=  (0x4<<8);
 800b196:	6819      	ldr	r1, [r3, #0]
 800b198:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 800b19c:	6019      	str	r1, [r3, #0]
	
	// APB2 - PCLK2 72Mhz
	//
	REG_RCC_CFGR &= ~(0x7<<11);
 800b19e:	6819      	ldr	r1, [r3, #0]
 800b1a0:	f421 5160 	bic.w	r1, r1, #14336	; 0x3800
 800b1a4:	6019      	str	r1, [r3, #0]
	REG_RCC_CFGR |=  (0x0<<11);
 800b1a6:	6819      	ldr	r1, [r3, #0]
 800b1a8:	6019      	str	r1, [r3, #0]

    
    while( (REG_RCC_CFGR & 0xC) != 0x08 );
 800b1aa:	6813      	ldr	r3, [r2, #0]
 800b1ac:	f003 030c 	and.w	r3, r3, #12
 800b1b0:	2b08      	cmp	r3, #8
 800b1b2:	d1fa      	bne.n	800b1aa <Hw_PLL_Init+0x72>
    
    //APB2에 있는 UART 등 주변장치에 Clock 소스 동작제어
    //UART가 동작되기 위해서는 GPIO와 Alternation Function IO가 동작상태에 있어야 함
	REG_RCC_APB2ENR |= 0  |
 800b1b4:	f241 0318 	movw	r3, #4120	; 0x1018
 800b1b8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b1bc:	681a      	ldr	r2, [r3, #0]
 800b1be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b1c2:	f042 021d 	orr.w	r2, r2, #29
 800b1c6:	601a      	str	r2, [r3, #0]
 800b1c8:	4770      	bx	lr
 800b1ca:	bf00      	nop

0800b1cc <Hw_ISR_Init>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_ISR_Init( void )
{
	REG_SCB_VTOR = (u32)Hw_ISR_VectorTable;
 800b1cc:	f241 2300 	movw	r3, #4608	; 0x1200
 800b1d0:	f64e 5208 	movw	r2, #60680	; 0xed08
 800b1d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b1d8:	f2ce 0200 	movt	r2, #57344	; 0xe000
 800b1dc:	6013      	str	r3, [r2, #0]
 800b1de:	4770      	bx	lr

0800b1e0 <Hw_ISR_SetIRQFunc>:
---------------------------------------------------------------------------*/
void Hw_ISR_SetIRQFunc( u8 ISR_Num, u32 FuncAddress, u8 ISR_Priority )
{	
	u32 ISR_StartOffset = 16;
	
	Hw_ISR_VectorTable[ ISR_StartOffset + ISR_Num ] = FuncAddress;	
 800b1e0:	f241 2300 	movw	r3, #4608	; 0x1200
 800b1e4:	3010      	adds	r0, #16
 800b1e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b1ea:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 800b1ee:	4770      	bx	lr

0800b1f0 <Hw_ISR_SetIRQFuncByAddr>:
---------------------------------------------------------------------------*/
void Hw_ISR_SetIRQFuncByAddr( u32 ISR_Addr, u32 FuncAddress, u8 ISR_Priority )
{	
	u32 ISR_StartOffset = ISR_Addr/4;
	
	Hw_ISR_VectorTable[ ISR_StartOffset ] = FuncAddress;	
 800b1f0:	f241 2300 	movw	r3, #4608	; 0x1200
     			u8  ISR_Priority : 인터럽트 우선순위(작은값이 우선순위 높음)
     RET     : void
---------------------------------------------------------------------------*/
void Hw_ISR_SetIRQFuncByAddr( u32 ISR_Addr, u32 FuncAddress, u8 ISR_Priority )
{	
	u32 ISR_StartOffset = ISR_Addr/4;
 800b1f4:	0880      	lsrs	r0, r0, #2
	
	Hw_ISR_VectorTable[ ISR_StartOffset ] = FuncAddress;	
 800b1f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b1fa:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 800b1fe:	4770      	bx	lr

0800b200 <Hw_Timer_SetupISR>:
     	 	 	 타이머 H/W 기능을 초기화 한다.
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_SetupISR( void )
{	
 800b200:	b508      	push	{r3, lr}
	Hw_ISR_SetIRQFuncByAddr( 0x003C, (u32)Hw_Timer_ISR, 0 );	
 800b202:	f24b 3105 	movw	r1, #45829	; 0xb305
 800b206:	f24b 13f1 	movw	r3, #45553	; 0xb1f1
 800b20a:	203c      	movs	r0, #60	; 0x3c
 800b20c:	f6c0 0100 	movt	r1, #2048	; 0x800
 800b210:	2200      	movs	r2, #0
 800b212:	f6c0 0300 	movt	r3, #2048	; 0x800
 800b216:	4798      	blx	r3
 800b218:	bd08      	pop	{r3, pc}
 800b21a:	bf00      	nop

0800b21c <Hw_Timer_Init>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_Init( void )
{
 800b21c:	b510      	push	{r4, lr}
	u8 i;
	static u8 Excute = 0;

	
	if( Excute == 1 ) return;  // 이미 한번 실행했다면 정지.
 800b21e:	4c1b      	ldr	r4, [pc, #108]	; (800b28c <Hw_Timer_Init+0x70>)
 800b220:	7823      	ldrb	r3, [r4, #0]
 800b222:	2b01      	cmp	r3, #1
 800b224:	d030      	beq.n	800b288 <Hw_Timer_Init+0x6c>
 800b226:	4b1a      	ldr	r3, [pc, #104]	; (800b290 <Hw_Timer_Init+0x74>)
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 800b228:	2200      	movs	r2, #0
     TITLE   : Hw_Timer_Init
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_Init( void )
 800b22a:	f103 01a0 	add.w	r1, r3, #160	; 0xa0
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 800b22e:	f803 2c08 	strb.w	r2, [r3, #-8]
		Timer_Tbl[i].Timer_Ctn  = 0;
 800b232:	f823 2c06 	strh.w	r2, [r3, #-6]
		Timer_Tbl[i].Timer_Init = 0;
 800b236:	f823 2c04 	strh.w	r2, [r3, #-4]
		Timer_Tbl[i].TmrFnct    = NULL;
 800b23a:	f843 2b10 	str.w	r2, [r3], #16
	
	if( Excute == 1 ) return;  // 이미 한번 실행했다면 정지.
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
 800b23e:	428b      	cmp	r3, r1
 800b240:	d1f5      	bne.n	800b22e <Hw_Timer_Init+0x12>
		Timer_Tbl[i].Timer_Init = 0;
		Timer_Tbl[i].TmrFnct    = NULL;
	}	                   
	
	
	Hw_Timer_SetupISR();
 800b242:	4b14      	ldr	r3, [pc, #80]	; (800b294 <Hw_Timer_Init+0x78>)
 800b244:	4798      	blx	r3
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_Setup( void )
{

	REG_STK_LOAD = 72000 - 1;	// 72000000 / 72000 = 1000us = 1ms
 800b246:	f24e 0114 	movw	r1, #57364	; 0xe014
 800b24a:	f641 103f 	movw	r0, #6463	; 0x193f
 800b24e:	f2ce 0100 	movt	r1, #57344	; 0xe000
	
	REG_STK_VAL  = 0;	
 800b252:	f24e 0218 	movw	r2, #57368	; 0xe018
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_Setup( void )
{

	REG_STK_LOAD = 72000 - 1;	// 72000000 / 72000 = 1000us = 1ms
 800b256:	f2c0 0001 	movt	r0, #1
 800b25a:	6008      	str	r0, [r1, #0]
	
	REG_STK_VAL  = 0;	
 800b25c:	f2ce 0200 	movt	r2, #57344	; 0xe000
	
	SET_BIT( REG_STK_CTRL, 2 );	// CLKSOURCE = Processor Clock 72Mhz		
 800b260:	f24e 0310 	movw	r3, #57360	; 0xe010
void Hw_Timer_Setup( void )
{

	REG_STK_LOAD = 72000 - 1;	// 72000000 / 72000 = 1000us = 1ms
	
	REG_STK_VAL  = 0;	
 800b264:	2100      	movs	r1, #0
	
	SET_BIT( REG_STK_CTRL, 2 );	// CLKSOURCE = Processor Clock 72Mhz		
 800b266:	f2ce 0300 	movt	r3, #57344	; 0xe000
void Hw_Timer_Setup( void )
{

	REG_STK_LOAD = 72000 - 1;	// 72000000 / 72000 = 1000us = 1ms
	
	REG_STK_VAL  = 0;	
 800b26a:	6011      	str	r1, [r2, #0]
	
	SET_BIT( REG_STK_CTRL, 2 );	// CLKSOURCE = Processor Clock 72Mhz		
 800b26c:	681a      	ldr	r2, [r3, #0]
 800b26e:	f042 0204 	orr.w	r2, r2, #4
 800b272:	601a      	str	r2, [r3, #0]
	SET_BIT( REG_STK_CTRL, 1 );	// 인터럽트 활성화		
 800b274:	681a      	ldr	r2, [r3, #0]
 800b276:	f042 0202 	orr.w	r2, r2, #2
 800b27a:	601a      	str	r2, [r3, #0]
	SET_BIT( REG_STK_CTRL, 0 );	// Counter Enable
 800b27c:	681a      	ldr	r2, [r3, #0]
 800b27e:	f042 0201 	orr.w	r2, r2, #1
 800b282:	601a      	str	r2, [r3, #0]
	
	
	Hw_Timer_SetupISR();
	Hw_Timer_Setup();	

	Excute = 1;
 800b284:	2301      	movs	r3, #1
 800b286:	7023      	strb	r3, [r4, #0]
 800b288:	bd10      	pop	{r4, pc}
 800b28a:	bf00      	nop
 800b28c:	20000ab2 	.word	0x20000ab2
 800b290:	20000a14 	.word	0x20000a14
 800b294:	0800b201 	.word	0x0800b201

0800b298 <Hw_Timer_Tick>:
void Hw_Timer_Tick(void)
{
	u8 i;

	
	Hw_Timer_Counter++;
 800b298:	4a17      	ldr	r2, [pc, #92]	; (800b2f8 <Hw_Timer_Tick+0x60>)
			타이머인터럽트 발생시에 실행되는 함수(1ms 혹은 10ms 단위로 실행)
     ARG	: void
     RET	: void
---------------------------------------------------------------------------*/
void Hw_Timer_Tick(void)
{
 800b29a:	b538      	push	{r3, r4, r5, lr}
	u8 i;

	
	Hw_Timer_Counter++;
 800b29c:	6811      	ldr	r1, [r2, #0]


	if( Tmr_Ctn ) Tmr_Ctn--;
 800b29e:	4b17      	ldr	r3, [pc, #92]	; (800b2fc <Hw_Timer_Tick+0x64>)
void Hw_Timer_Tick(void)
{
	u8 i;

	
	Hw_Timer_Counter++;
 800b2a0:	3101      	adds	r1, #1
 800b2a2:	6011      	str	r1, [r2, #0]


	if( Tmr_Ctn ) Tmr_Ctn--;
 800b2a4:	881a      	ldrh	r2, [r3, #0]
 800b2a6:	b292      	uxth	r2, r2
 800b2a8:	b11a      	cbz	r2, 800b2b2 <Hw_Timer_Tick+0x1a>
 800b2aa:	881a      	ldrh	r2, [r3, #0]
 800b2ac:	3a01      	subs	r2, #1
 800b2ae:	b292      	uxth	r2, r2
 800b2b0:	801a      	strh	r2, [r3, #0]
 800b2b2:	4c13      	ldr	r4, [pc, #76]	; (800b300 <Hw_Timer_Tick+0x68>)
     WORK	:
			타이머인터럽트 발생시에 실행되는 함수(1ms 혹은 10ms 단위로 실행)
     ARG	: void
     RET	: void
---------------------------------------------------------------------------*/
void Hw_Timer_Tick(void)
 800b2b4:	f104 05a0 	add.w	r5, r4, #160	; 0xa0
 800b2b8:	e002      	b.n	800b2c0 <Hw_Timer_Tick+0x28>
 800b2ba:	3410      	adds	r4, #16

	if( Tmr_Ctn ) Tmr_Ctn--;
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
 800b2bc:	42ac      	cmp	r4, r5
 800b2be:	d01a      	beq.n	800b2f6 <Hw_Timer_Tick+0x5e>
	{
		if( Timer_Tbl[i].Timer_En == ON)   					// 타이머가 활성화 됬니?
 800b2c0:	f814 3c08 	ldrb.w	r3, [r4, #-8]
 800b2c4:	2b01      	cmp	r3, #1
 800b2c6:	d1f8      	bne.n	800b2ba <Hw_Timer_Tick+0x22>
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소
 800b2c8:	f834 3c06 	ldrh.w	r3, [r4, #-6]
 800b2cc:	3b01      	subs	r3, #1
 800b2ce:	b29b      	uxth	r3, r3
 800b2d0:	f824 3c06 	strh.w	r3, [r4, #-6]

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d1f0      	bne.n	800b2ba <Hw_Timer_Tick+0x22>
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 800b2d8:	f814 2c07 	ldrb.w	r2, [r4, #-7]
 800b2dc:	2a01      	cmp	r2, #1

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 800b2de:	f834 2c04 	ldrh.w	r2, [r4, #-4]

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.
 800b2e2:	bf08      	it	eq
 800b2e4:	f804 3c08 	strbeq.w	r3, [r4, #-8]

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 800b2e8:	f824 2c06 	strh.w	r2, [r4, #-6]

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 800b2ec:	6823      	ldr	r3, [r4, #0]
 800b2ee:	3410      	adds	r4, #16
 800b2f0:	4798      	blx	r3

	if( Tmr_Ctn ) Tmr_Ctn--;
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
 800b2f2:	42ac      	cmp	r4, r5
 800b2f4:	d1e4      	bne.n	800b2c0 <Hw_Timer_Tick+0x28>
				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
			}
		}
	}
	
}
 800b2f6:	bd38      	pop	{r3, r4, r5, pc}
 800b2f8:	20000aac 	.word	0x20000aac
 800b2fc:	20000ab0 	.word	0x20000ab0
 800b300:	20000a14 	.word	0x20000a14

0800b304 <Hw_Timer_ISR>:
void Hw_Timer_Setup( void );



void Hw_Timer_ISR(void)
{
 800b304:	b508      	push	{r3, lr}

	Hw_Timer_Tick();  
 800b306:	f24b 2399 	movw	r3, #45721	; 0xb299
 800b30a:	f6c0 0300 	movt	r3, #2048	; 0x800
 800b30e:	4798      	blx	r3
 800b310:	bd08      	pop	{r3, pc}
 800b312:	bf00      	nop

0800b314 <Hw_Timer_Set>:
			void (*Fnct)(void),void *arg : 실행할 타이머 함수.
     RET
     	 	void
---------------------------------------------------------------------------*/
void Hw_Timer_Set(u8 TmrNum, u16 TmrData, u8 TmrMode, void (*Fnct)(void),void *arg)
{
 800b314:	b410      	push	{r4}
	Timer_Tbl[TmrNum].Timer_Mode = TmrMode;    // 모트설정
 800b316:	f640 240c 	movw	r4, #2572	; 0xa0c
 800b31a:	f2c2 0400 	movt	r4, #8192	; 0x2000
 800b31e:	eb04 1000 	add.w	r0, r4, r0, lsl #4
	Timer_Tbl[TmrNum].TmrFnct    = Fnct;       // 실행할 함수
 800b322:	6083      	str	r3, [r0, #8]
	Timer_Tbl[TmrNum].TmrFnctArg = arg;        // 매개변수
 800b324:	9b01      	ldr	r3, [sp, #4]
     RET
     	 	void
---------------------------------------------------------------------------*/
void Hw_Timer_Set(u8 TmrNum, u16 TmrData, u8 TmrMode, void (*Fnct)(void),void *arg)
{
	Timer_Tbl[TmrNum].Timer_Mode = TmrMode;    // 모트설정
 800b326:	7042      	strb	r2, [r0, #1]
	Timer_Tbl[TmrNum].TmrFnct    = Fnct;       // 실행할 함수
	Timer_Tbl[TmrNum].TmrFnctArg = arg;        // 매개변수
 800b328:	60c3      	str	r3, [r0, #12]
	Timer_Tbl[TmrNum].Timer_Ctn  = TmrData;
 800b32a:	8041      	strh	r1, [r0, #2]
	Timer_Tbl[TmrNum].Timer_Init = TmrData;
 800b32c:	8081      	strh	r1, [r0, #4]
}
 800b32e:	bc10      	pop	{r4}
 800b330:	4770      	bx	lr
 800b332:	bf00      	nop

0800b334 <Hw_Timer_Start>:
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Timer_Start(u8 TmrNum)
{
	if(TmrNum < TIMER_MAX)
 800b334:	2809      	cmp	r0, #9
 800b336:	d803      	bhi.n	800b340 <Hw_Timer_Start+0xc>
		Timer_Tbl[TmrNum].Timer_En = ON;
 800b338:	4b02      	ldr	r3, [pc, #8]	; (800b344 <Hw_Timer_Start+0x10>)
 800b33a:	0100      	lsls	r0, r0, #4
 800b33c:	2201      	movs	r2, #1
 800b33e:	541a      	strb	r2, [r3, r0]
 800b340:	4770      	bx	lr
 800b342:	bf00      	nop
 800b344:	20000a0c 	.word	0x20000a0c

0800b348 <Hw_Timer_Delay_ms>:
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Timer_Delay_ms( u16 DelayData )
{
	Tmr_Ctn = DelayData;
 800b348:	4a03      	ldr	r2, [pc, #12]	; (800b358 <Hw_Timer_Delay_ms+0x10>)
 800b34a:	8010      	strh	r0, [r2, #0]
	
	while( Tmr_Ctn );
 800b34c:	8813      	ldrh	r3, [r2, #0]
 800b34e:	b29b      	uxth	r3, r3
 800b350:	2b00      	cmp	r3, #0
 800b352:	d1fb      	bne.n	800b34c <Hw_Timer_Delay_ms+0x4>
}
 800b354:	4770      	bx	lr
 800b356:	bf00      	nop
 800b358:	20000ab0 	.word	0x20000ab0

0800b35c <Hw_Timer_Get_CountValue>:
     ARG
     RET
---------------------------------------------------------------------------*/
u32 Hw_Timer_Get_CountValue( void )
{
	return Hw_Timer_Counter;
 800b35c:	f640 23ac 	movw	r3, #2732	; 0xaac
 800b360:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b364:	6818      	ldr	r0, [r3, #0]
}
 800b366:	4770      	bx	lr

0800b368 <Hw_Uart_Q_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Q_Init( void )
{
 800b368:	2300      	movs	r3, #0
 800b36a:	4804      	ldr	r0, [pc, #16]	; (800b37c <Hw_Uart_Q_Init+0x14>)
 800b36c:	4904      	ldr	r1, [pc, #16]	; (800b380 <Hw_Uart_Q_Init+0x18>)
	u8 i;

	for( i=0; i<HW_UART_Q_CH_MAX; i++ )
	{
		Hw_Uart_Q_Start[i] = Hw_Uart_Q_End[i] = 0;
 800b36e:	461a      	mov	r2, r3
 800b370:	521a      	strh	r2, [r3, r0]
 800b372:	525a      	strh	r2, [r3, r1]
 800b374:	3302      	adds	r3, #2
---------------------------------------------------------------------------*/
void Hw_Uart_Q_Init( void )
{
	u8 i;

	for( i=0; i<HW_UART_Q_CH_MAX; i++ )
 800b376:	2b0e      	cmp	r3, #14
 800b378:	d1fa      	bne.n	800b370 <Hw_Uart_Q_Init+0x8>
	{
		Hw_Uart_Q_Start[i] = Hw_Uart_Q_End[i] = 0;
	}
}
 800b37a:	4770      	bx	lr
 800b37c:	20001488 	.word	0x20001488
 800b380:	20001498 	.word	0x20001498

0800b384 <HW_UART_Q_VAILD>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 800b384:	f241 4298 	movw	r2, #5272	; 0x1498
 800b388:	f241 4388 	movw	r3, #5256	; 0x1488
 800b38c:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800b390:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b394:	f933 3010 	ldrsh.w	r3, [r3, r0, lsl #1]
 800b398:	f932 2010 	ldrsh.w	r2, [r2, r0, lsl #1]
 800b39c:	1ad2      	subs	r2, r2, r3
 800b39e:	3220      	adds	r2, #32
 800b3a0:	17d3      	asrs	r3, r2, #31
 800b3a2:	0edb      	lsrs	r3, r3, #27
 800b3a4:	18d2      	adds	r2, r2, r3
 800b3a6:	f002 001f 	and.w	r0, r2, #31
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_VAILD( u8 Ch )
{
	return HW_UART_Q_SIZE(Ch);
}
 800b3aa:	1ac0      	subs	r0, r0, r3
 800b3ac:	4770      	bx	lr
 800b3ae:	bf00      	nop

0800b3b0 <Hw_Uart_Q_Push>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{
 800b3b0:	b470      	push	{r4, r5, r6}
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 800b3b2:	4c13      	ldr	r4, [pc, #76]	; (800b400 <Hw_Uart_Q_Push+0x50>)
 800b3b4:	4b13      	ldr	r3, [pc, #76]	; (800b404 <Hw_Uart_Q_Push+0x54>)
 800b3b6:	f834 6010 	ldrh.w	r6, [r4, r0, lsl #1]
 800b3ba:	f933 2010 	ldrsh.w	r2, [r3, r0, lsl #1]
 800b3be:	b235      	sxth	r5, r6
 800b3c0:	1aaa      	subs	r2, r5, r2
 800b3c2:	3220      	adds	r2, #32
 800b3c4:	17d3      	asrs	r3, r2, #31
 800b3c6:	0edb      	lsrs	r3, r3, #27
 800b3c8:	18d2      	adds	r2, r2, r3
 800b3ca:	f002 021f 	and.w	r2, r2, #31
 800b3ce:	1ad3      	subs	r3, r2, r3
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;
 800b3d0:	2b1f      	cmp	r3, #31
 800b3d2:	d012      	beq.n	800b3fa <Hw_Uart_Q_Push+0x4a>

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
 800b3d4:	3601      	adds	r6, #1
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 800b3d6:	b236      	sxth	r6, r6
 800b3d8:	17f3      	asrs	r3, r6, #31
 800b3da:	0edb      	lsrs	r3, r3, #27
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
 800b3dc:	eb00 1240 	add.w	r2, r0, r0, lsl #5
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 800b3e0:	18f6      	adds	r6, r6, r3
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
 800b3e2:	7809      	ldrb	r1, [r1, #0]
 800b3e4:	1955      	adds	r5, r2, r5
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 800b3e6:	f006 061f 	and.w	r6, r6, #31
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
 800b3ea:	4a07      	ldr	r2, [pc, #28]	; (800b408 <Hw_Uart_Q_Push+0x58>)
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 800b3ec:	1af3      	subs	r3, r6, r3
 800b3ee:	f824 3010 	strh.w	r3, [r4, r0, lsl #1]
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
 800b3f2:	5551      	strb	r1, [r2, r5]
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;

	return TRUE;
 800b3f4:	2001      	movs	r0, #1
}
 800b3f6:	bc70      	pop	{r4, r5, r6}
 800b3f8:	4770      	bx	lr
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;
 800b3fa:	2000      	movs	r0, #0
 800b3fc:	e7fb      	b.n	800b3f6 <Hw_Uart_Q_Push+0x46>
 800b3fe:	bf00      	nop
 800b400:	20001498 	.word	0x20001498
 800b404:	20001488 	.word	0x20001488
 800b408:	20001390 	.word	0x20001390

0800b40c <Hw_Uart_Q_Pop>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
 800b40c:	b470      	push	{r4, r5, r6}
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 800b40e:	4c12      	ldr	r4, [pc, #72]	; (800b458 <Hw_Uart_Q_Pop+0x4c>)
 800b410:	4a12      	ldr	r2, [pc, #72]	; (800b45c <Hw_Uart_Q_Pop+0x50>)
 800b412:	f834 6010 	ldrh.w	r6, [r4, r0, lsl #1]
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
 800b416:	4603      	mov	r3, r0
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 800b418:	f932 0010 	ldrsh.w	r0, [r2, r0, lsl #1]
 800b41c:	b235      	sxth	r5, r6
 800b41e:	1b40      	subs	r0, r0, r5
 800b420:	3020      	adds	r0, #32
 800b422:	17c2      	asrs	r2, r0, #31
 800b424:	0ed2      	lsrs	r2, r2, #27
 800b426:	1880      	adds	r0, r0, r2
 800b428:	f000 001f 	and.w	r0, r0, #31
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;
 800b42c:	1a80      	subs	r0, r0, r2
 800b42e:	d010      	beq.n	800b452 <Hw_Uart_Q_Pop+0x46>

	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];
 800b430:	3601      	adds	r6, #1

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;
 800b432:	b236      	sxth	r6, r6
 800b434:	17f2      	asrs	r2, r6, #31
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;

	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];
 800b436:	eb03 1043 	add.w	r0, r3, r3, lsl #5

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;
 800b43a:	0ed2      	lsrs	r2, r2, #27
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;

	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];
 800b43c:	1945      	adds	r5, r0, r5
 800b43e:	4808      	ldr	r0, [pc, #32]	; (800b460 <Hw_Uart_Q_Pop+0x54>)

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;
 800b440:	18b6      	adds	r6, r6, r2
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;

	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];
 800b442:	5d40      	ldrb	r0, [r0, r5]

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;
 800b444:	f006 061f 	and.w	r6, r6, #31
 800b448:	1ab2      	subs	r2, r6, r2
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;

	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];
 800b44a:	7008      	strb	r0, [r1, #0]

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;

    return TRUE;
 800b44c:	2001      	movs	r0, #1
{
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;

	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;
 800b44e:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]

    return TRUE;
}
 800b452:	bc70      	pop	{r4, r5, r6}
 800b454:	4770      	bx	lr
 800b456:	bf00      	nop
 800b458:	20001488 	.word	0x20001488
 800b45c:	20001498 	.word	0x20001498
 800b460:	20001390 	.word	0x20001390

0800b464 <Hw_Adc_Init>:
{
	//GPIO_InitTypeDef GPIO_InitStructure;

	//-- ADC GPIO 설정  PA7 : AIN7
	//
	REG_GPIOA_CRL &= ~(0x0F << (28));	// Clear
 800b464:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b468:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800b46c:	6819      	ldr	r1, [r3, #0]


	// PCLK2 is the APB2 clock
	// ADCCLK = PCLK2/6 = 72/6 = 12MHz
	//
	SET_BIT( REG_RCC_CFGR, 15 );
 800b46e:	f241 0204 	movw	r2, #4100	; 0x1004
{
	//GPIO_InitTypeDef GPIO_InitStructure;

	//-- ADC GPIO 설정  PA7 : AIN7
	//
	REG_GPIOA_CRL &= ~(0x0F << (28));	// Clear
 800b472:	f021 4170 	bic.w	r1, r1, #4026531840	; 0xf0000000
 800b476:	6019      	str	r1, [r3, #0]
	REG_GPIOA_CRL |=  (0x00 << (28));	// MODE, PA.7 Input Mode
 800b478:	6819      	ldr	r1, [r3, #0]


	// PCLK2 is the APB2 clock
	// ADCCLK = PCLK2/6 = 72/6 = 12MHz
	//
	SET_BIT( REG_RCC_CFGR, 15 );
 800b47a:	f2c4 0202 	movt	r2, #16386	; 0x4002
	//GPIO_InitTypeDef GPIO_InitStructure;

	//-- ADC GPIO 설정  PA7 : AIN7
	//
	REG_GPIOA_CRL &= ~(0x0F << (28));	// Clear
	REG_GPIOA_CRL |=  (0x00 << (28));	// MODE, PA.7 Input Mode
 800b47e:	6019      	str	r1, [r3, #0]
	REG_GPIOA_CRL |=  (0x00 << (30));	// CNF,  PA.7 Analog Mode	
 800b480:	6818      	ldr	r0, [r3, #0]
	CLR_BIT( REG_RCC_CFGR, 14 );


	// Enable ADC1 clock so that we can talk to it
	//
	SET_BIT( REG_RCC_APB2ENR, 9 );
 800b482:	f241 0118 	movw	r1, #4120	; 0x1018

	//-- ADC GPIO 설정  PA7 : AIN7
	//
	REG_GPIOA_CRL &= ~(0x0F << (28));	// Clear
	REG_GPIOA_CRL |=  (0x00 << (28));	// MODE, PA.7 Input Mode
	REG_GPIOA_CRL |=  (0x00 << (30));	// CNF,  PA.7 Analog Mode	
 800b486:	6018      	str	r0, [r3, #0]


	// PCLK2 is the APB2 clock
	// ADCCLK = PCLK2/6 = 72/6 = 12MHz
	//
	SET_BIT( REG_RCC_CFGR, 15 );
 800b488:	6813      	ldr	r3, [r2, #0]
	CLR_BIT( REG_RCC_CFGR, 14 );


	// Enable ADC1 clock so that we can talk to it
	//
	SET_BIT( REG_RCC_APB2ENR, 9 );
 800b48a:	f2c4 0102 	movt	r1, #16386	; 0x4002


	// PCLK2 is the APB2 clock
	// ADCCLK = PCLK2/6 = 72/6 = 12MHz
	//
	SET_BIT( REG_RCC_CFGR, 15 );
 800b48e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b492:	6013      	str	r3, [r2, #0]
	CLR_BIT( REG_RCC_CFGR, 14 );
 800b494:	6813      	ldr	r3, [r2, #0]
	SET_BIT( REG_RCC_APB2ENR, 9 );


	// ADC1 Configuration ------------------------------------------------------
	//
	REG_ADC1_CR1 = 0
 800b496:	f242 4004 	movw	r0, #9220	; 0x2404

	// PCLK2 is the APB2 clock
	// ADCCLK = PCLK2/6 = 72/6 = 12MHz
	//
	SET_BIT( REG_RCC_CFGR, 15 );
	CLR_BIT( REG_RCC_CFGR, 14 );
 800b49a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b49e:	6013      	str	r3, [r2, #0]


	// Enable ADC1 clock so that we can talk to it
	//
	SET_BIT( REG_RCC_APB2ENR, 9 );
 800b4a0:	680a      	ldr	r2, [r1, #0]
        				//             0~17
        				//             



	REG_ADC1_CR2 = 0
 800b4a2:	f242 4308 	movw	r3, #9224	; 0x2408
	CLR_BIT( REG_RCC_CFGR, 14 );


	// Enable ADC1 clock so that we can talk to it
	//
	SET_BIT( REG_RCC_APB2ENR, 9 );
 800b4a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b4aa:	600a      	str	r2, [r1, #0]


	// ADC1 Configuration ------------------------------------------------------
	//
	REG_ADC1_CR1 = 0
 800b4ac:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800b4b0:	2200      	movs	r2, #0
        				//             0~17
        				//             



	REG_ADC1_CR2 = 0
 800b4b2:	f2c4 0301 	movt	r3, #16385	; 0x4001
	SET_BIT( REG_RCC_APB2ENR, 9 );


	// ADC1 Configuration ------------------------------------------------------
	//
	REG_ADC1_CR1 = 0
 800b4b6:	6002      	str	r2, [r0, #0]
        				//             0~17
        				//             



	REG_ADC1_CR2 = 0
 800b4b8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800b4bc:	601a      	str	r2, [r3, #0]
						//             1 : Enabled


	// Enable ADC1
	//
	SET_BIT( REG_ADC1_CR2, 0 );
 800b4be:	681a      	ldr	r2, [r3, #0]
	//
	SET_BIT( REG_ADC1_CR2, 3 );	

	// Check the end of ADC1 reset calibration register
	//
	while(IS_SET_BIT(REG_ADC1_CR2, 3));
 800b4c0:	4619      	mov	r1, r3
						//             1 : Enabled


	// Enable ADC1
	//
	SET_BIT( REG_ADC1_CR2, 0 );
 800b4c2:	f042 0201 	orr.w	r2, r2, #1
 800b4c6:	601a      	str	r2, [r3, #0]

	// Enable ADC1 reset calibaration register
	//
	SET_BIT( REG_ADC1_CR2, 3 );	
 800b4c8:	681a      	ldr	r2, [r3, #0]
 800b4ca:	f042 0208 	orr.w	r2, r2, #8
 800b4ce:	601a      	str	r2, [r3, #0]

	// Check the end of ADC1 reset calibration register
	//
	while(IS_SET_BIT(REG_ADC1_CR2, 3));
 800b4d0:	680a      	ldr	r2, [r1, #0]
 800b4d2:	f242 4308 	movw	r3, #9224	; 0x2408
 800b4d6:	0712      	lsls	r2, r2, #28
 800b4d8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800b4dc:	d4f8      	bmi.n	800b4d0 <Hw_Adc_Init+0x6c>

	// Start ADC1 calibaration
	//
	//ADC_StartCalibration(ADC1);
	SET_BIT( REG_ADC1_CR2, 2 );
 800b4de:	6819      	ldr	r1, [r3, #0]

	// Check the end of ADC1 calibration
	//
	while(IS_SET_BIT(REG_ADC1_CR2, 2));
 800b4e0:	461a      	mov	r2, r3
	while(IS_SET_BIT(REG_ADC1_CR2, 3));

	// Start ADC1 calibaration
	//
	//ADC_StartCalibration(ADC1);
	SET_BIT( REG_ADC1_CR2, 2 );
 800b4e2:	f041 0104 	orr.w	r1, r1, #4
 800b4e6:	6019      	str	r1, [r3, #0]

	// Check the end of ADC1 calibration
	//
	while(IS_SET_BIT(REG_ADC1_CR2, 2));
 800b4e8:	6813      	ldr	r3, [r2, #0]
 800b4ea:	f013 0304 	ands.w	r3, r3, #4
 800b4ee:	d1fb      	bne.n	800b4e8 <Hw_Adc_Init+0x84>


	REG_ADC1_SQR1  = 0;
 800b4f0:	f242 422c 	movw	r2, #9260	; 0x242c
 800b4f4:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800b4f8:	6013      	str	r3, [r2, #0]
	REG_ADC1_SQR1 |= (1<<20);	// 1개 채널만 컨버젼
 800b4fa:	6813      	ldr	r3, [r2, #0]
 800b4fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b500:	6013      	str	r3, [r2, #0]
 800b502:	4770      	bx	lr

0800b504 <Hw_Adc_GetData>:
{
	u32 TimeOut;

	//-- 채널 설정
	//
	if( Ch >= 10 )
 800b504:	2809      	cmp	r0, #9
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_Adc_GetData( u8 Ch )
{
 800b506:	b410      	push	{r4}

	//-- 채널 설정
	//
	if( Ch >= 10 )
	{
		REG_ADC1_SMPR1 &= ~(0x07<<(Ch-10)*3);
 800b508:	eb00 0340 	add.w	r3, r0, r0, lsl #1
{
	u32 TimeOut;

	//-- 채널 설정
	//
	if( Ch >= 10 )
 800b50c:	d932      	bls.n	800b574 <Hw_Adc_GetData+0x70>
	{
		REG_ADC1_SMPR1 &= ~(0x07<<(Ch-10)*3);
 800b50e:	3b1e      	subs	r3, #30
 800b510:	2407      	movs	r4, #7
		REG_ADC1_SMPR1 |=  (0x05<<(Ch-10)*3);	// 55.5 cycles
 800b512:	2105      	movs	r1, #5

	//-- 채널 설정
	//
	if( Ch >= 10 )
	{
		REG_ADC1_SMPR1 &= ~(0x07<<(Ch-10)*3);
 800b514:	fa04 f403 	lsl.w	r4, r4, r3
		REG_ADC1_SMPR1 |=  (0x05<<(Ch-10)*3);	// 55.5 cycles
 800b518:	fa01 f103 	lsl.w	r1, r1, r3

	//-- 채널 설정
	//
	if( Ch >= 10 )
	{
		REG_ADC1_SMPR1 &= ~(0x07<<(Ch-10)*3);
 800b51c:	f242 430c 	movw	r3, #9228	; 0x240c
		REG_ADC1_SMPR1 |=  (0x05<<(Ch-10)*3);	// 55.5 cycles
	}
	else
	{
		REG_ADC1_SMPR2 &= ~(0x07<<(Ch*3));
 800b520:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800b524:	681a      	ldr	r2, [r3, #0]
 800b526:	ea22 0204 	bic.w	r2, r2, r4
 800b52a:	601a      	str	r2, [r3, #0]
		REG_ADC1_SMPR2 |=  (0x05<<(Ch*3));	// 55.5 cycles
 800b52c:	681a      	ldr	r2, [r3, #0]
 800b52e:	430a      	orrs	r2, r1
 800b530:	601a      	str	r2, [r3, #0]
	}

	REG_ADC1_SQR3 = Ch;
 800b532:	f242 4234 	movw	r2, #9268	; 0x2434
 800b536:	f2c4 0201 	movt	r2, #16385	; 0x4001


	//-- Start the conversion
	//
	SET_BIT( REG_ADC1_CR2, 0 );
 800b53a:	f242 4308 	movw	r3, #9224	; 0x2408
 800b53e:	f2c4 0301 	movt	r3, #16385	; 0x4001
	{
		REG_ADC1_SMPR2 &= ~(0x07<<(Ch*3));
		REG_ADC1_SMPR2 |=  (0x05<<(Ch*3));	// 55.5 cycles
	}

	REG_ADC1_SQR3 = Ch;
 800b542:	6010      	str	r0, [r2, #0]


	//-- Start the conversion
	//
	SET_BIT( REG_ADC1_CR2, 0 );
 800b544:	681a      	ldr	r2, [r3, #0]

	//-- Wait until conversion completion
	//
	TimeOut = 10000;
	while( IS_CLR_BIT( REG_ADC1_SR, 1) )
 800b546:	f44f 5110 	mov.w	r1, #9216	; 0x2400
	REG_ADC1_SQR3 = Ch;


	//-- Start the conversion
	//
	SET_BIT( REG_ADC1_CR2, 0 );
 800b54a:	f042 0201 	orr.w	r2, r2, #1
 800b54e:	601a      	str	r2, [r3, #0]

	//-- Wait until conversion completion
	//
	TimeOut = 10000;
	while( IS_CLR_BIT( REG_ADC1_SR, 1) )
 800b550:	f2c4 0101 	movt	r1, #16385	; 0x4001
 800b554:	f242 7310 	movw	r3, #10000	; 0x2710
 800b558:	e001      	b.n	800b55e <Hw_Adc_GetData+0x5a>
	{
		TimeOut--;
		if( TimeOut == 0 ) break;
 800b55a:	3b01      	subs	r3, #1
 800b55c:	d002      	beq.n	800b564 <Hw_Adc_GetData+0x60>
	SET_BIT( REG_ADC1_CR2, 0 );

	//-- Wait until conversion completion
	//
	TimeOut = 10000;
	while( IS_CLR_BIT( REG_ADC1_SR, 1) )
 800b55e:	680a      	ldr	r2, [r1, #0]
 800b560:	0790      	lsls	r0, r2, #30
 800b562:	d5fa      	bpl.n	800b55a <Hw_Adc_GetData+0x56>
		if( TimeOut == 0 ) break;
	} 

	// Get the conversion value

	return REG_ADC1_DR;
 800b564:	f242 434c 	movw	r3, #9292	; 0x244c
 800b568:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800b56c:	6818      	ldr	r0, [r3, #0]
}
 800b56e:	b280      	uxth	r0, r0
 800b570:	bc10      	pop	{r4}
 800b572:	4770      	bx	lr
		REG_ADC1_SMPR1 &= ~(0x07<<(Ch-10)*3);
		REG_ADC1_SMPR1 |=  (0x05<<(Ch-10)*3);	// 55.5 cycles
	}
	else
	{
		REG_ADC1_SMPR2 &= ~(0x07<<(Ch*3));
 800b574:	2407      	movs	r4, #7
		REG_ADC1_SMPR2 |=  (0x05<<(Ch*3));	// 55.5 cycles
 800b576:	2105      	movs	r1, #5
		REG_ADC1_SMPR1 &= ~(0x07<<(Ch-10)*3);
		REG_ADC1_SMPR1 |=  (0x05<<(Ch-10)*3);	// 55.5 cycles
	}
	else
	{
		REG_ADC1_SMPR2 &= ~(0x07<<(Ch*3));
 800b578:	fa04 f403 	lsl.w	r4, r4, r3
		REG_ADC1_SMPR2 |=  (0x05<<(Ch*3));	// 55.5 cycles
 800b57c:	fa01 f103 	lsl.w	r1, r1, r3
		REG_ADC1_SMPR1 &= ~(0x07<<(Ch-10)*3);
		REG_ADC1_SMPR1 |=  (0x05<<(Ch-10)*3);	// 55.5 cycles
	}
	else
	{
		REG_ADC1_SMPR2 &= ~(0x07<<(Ch*3));
 800b580:	f242 4310 	movw	r3, #9232	; 0x2410
 800b584:	e7cc      	b.n	800b520 <Hw_Adc_GetData+0x1c>
 800b586:	bf00      	nop

0800b588 <Hw_Led_Off>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Led_Off( u8 Ch )
{
 800b588:	b508      	push	{r3, lr}
	switch( Ch )
 800b58a:	2803      	cmp	r0, #3
 800b58c:	d807      	bhi.n	800b59e <Hw_Led_Off+0x16>
 800b58e:	e8df f000 	tbb	[pc, r0]
 800b592:	0c11      	.short	0x0c11
 800b594:	0207      	.short	0x0207
		case 2:
			Hw_VBus_SetBit( HW_VBUS_CS_LED_1, 2 );
			break;

		case 3:
			Hw_VBus_SetBit( HW_VBUS_CS_LED_1, 3 );
 800b596:	2012      	movs	r0, #18
 800b598:	2103      	movs	r1, #3
 800b59a:	4b09      	ldr	r3, [pc, #36]	; (800b5c0 <Hw_Led_Off+0x38>)
 800b59c:	4798      	blx	r3
 800b59e:	bd08      	pop	{r3, pc}
		case 1:
			Hw_VBus_SetBit( HW_VBUS_CS_LED_1, 1 );
			break;

		case 2:
			Hw_VBus_SetBit( HW_VBUS_CS_LED_1, 2 );
 800b5a0:	2012      	movs	r0, #18
 800b5a2:	2102      	movs	r1, #2
 800b5a4:	4b06      	ldr	r3, [pc, #24]	; (800b5c0 <Hw_Led_Off+0x38>)
 800b5a6:	4798      	blx	r3
			break;
 800b5a8:	bd08      	pop	{r3, pc}
		case 0:
			Hw_VBus_SetBit( HW_VBUS_CS_LED_1, 0 );
			break;

		case 1:
			Hw_VBus_SetBit( HW_VBUS_CS_LED_1, 1 );
 800b5aa:	2012      	movs	r0, #18
 800b5ac:	2101      	movs	r1, #1
 800b5ae:	4b04      	ldr	r3, [pc, #16]	; (800b5c0 <Hw_Led_Off+0x38>)
 800b5b0:	4798      	blx	r3
			break;
 800b5b2:	bd08      	pop	{r3, pc}
void Hw_Led_Off( u8 Ch )
{
	switch( Ch )
	{
		case 0:
			Hw_VBus_SetBit( HW_VBUS_CS_LED_1, 0 );
 800b5b4:	2012      	movs	r0, #18
 800b5b6:	2100      	movs	r1, #0
 800b5b8:	4b01      	ldr	r3, [pc, #4]	; (800b5c0 <Hw_Led_Off+0x38>)
 800b5ba:	4798      	blx	r3
 800b5bc:	bd08      	pop	{r3, pc}
 800b5be:	bf00      	nop
 800b5c0:	0800ba21 	.word	0x0800ba21

0800b5c4 <Hw_Led_Init>:
 800b5c4:	f64b 2321 	movw	r3, #47649	; 0xba21
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Led_Init( void )
{		
 800b5c8:	b510      	push	{r4, lr}
void Hw_Led_Off( u8 Ch )
{
	switch( Ch )
	{
		case 0:
			Hw_VBus_SetBit( HW_VBUS_CS_LED_1, 0 );
 800b5ca:	2100      	movs	r1, #0
 800b5cc:	f6c0 0300 	movt	r3, #2048	; 0x800
 800b5d0:	2012      	movs	r0, #18
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Led_Init( void )
{		
	Hw_Led_Off(0);
	Hw_Led_Off(1);
 800b5d2:	f24b 5489 	movw	r4, #46473	; 0xb589
void Hw_Led_Off( u8 Ch )
{
	switch( Ch )
	{
		case 0:
			Hw_VBus_SetBit( HW_VBUS_CS_LED_1, 0 );
 800b5d6:	4798      	blx	r3
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Led_Init( void )
{		
	Hw_Led_Off(0);
	Hw_Led_Off(1);
 800b5d8:	f6c0 0400 	movt	r4, #2048	; 0x800
 800b5dc:	2001      	movs	r0, #1
 800b5de:	47a0      	blx	r4
	Hw_Led_Off(2);
 800b5e0:	2002      	movs	r0, #2
 800b5e2:	47a0      	blx	r4
	Hw_Led_Off(3);
 800b5e4:	2003      	movs	r0, #3
 800b5e6:	47a0      	blx	r4
 800b5e8:	bd10      	pop	{r4, pc}
 800b5ea:	bf00      	nop

0800b5ec <Hw_Led_Toggle>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Led_Toggle( u8 Ch )
{
 800b5ec:	b508      	push	{r3, lr}
	switch( Ch )
 800b5ee:	2803      	cmp	r0, #3
 800b5f0:	d807      	bhi.n	800b602 <Hw_Led_Toggle+0x16>
 800b5f2:	e8df f000 	tbb	[pc, r0]
 800b5f6:	0c11      	.short	0x0c11
 800b5f8:	0207      	.short	0x0207
		case 2:
			Hw_VBus_TglBit( HW_VBUS_CS_LED_1, 2 );
			break;

		case 3:
			Hw_VBus_TglBit( HW_VBUS_CS_LED_1, 3 );
 800b5fa:	2012      	movs	r0, #18
 800b5fc:	2103      	movs	r1, #3
 800b5fe:	4b09      	ldr	r3, [pc, #36]	; (800b624 <Hw_Led_Toggle+0x38>)
 800b600:	4798      	blx	r3
 800b602:	bd08      	pop	{r3, pc}
		case 1:
			Hw_VBus_TglBit( HW_VBUS_CS_LED_1, 1 );
			break;

		case 2:
			Hw_VBus_TglBit( HW_VBUS_CS_LED_1, 2 );
 800b604:	2012      	movs	r0, #18
 800b606:	2102      	movs	r1, #2
 800b608:	4b06      	ldr	r3, [pc, #24]	; (800b624 <Hw_Led_Toggle+0x38>)
 800b60a:	4798      	blx	r3
			break;
 800b60c:	bd08      	pop	{r3, pc}
		case 0:
			Hw_VBus_TglBit( HW_VBUS_CS_LED_1, 0 );
			break;

		case 1:
			Hw_VBus_TglBit( HW_VBUS_CS_LED_1, 1 );
 800b60e:	2012      	movs	r0, #18
 800b610:	2101      	movs	r1, #1
 800b612:	4b04      	ldr	r3, [pc, #16]	; (800b624 <Hw_Led_Toggle+0x38>)
 800b614:	4798      	blx	r3
			break;
 800b616:	bd08      	pop	{r3, pc}
void Hw_Led_Toggle( u8 Ch )
{
	switch( Ch )
	{
		case 0:
			Hw_VBus_TglBit( HW_VBUS_CS_LED_1, 0 );
 800b618:	2012      	movs	r0, #18
 800b61a:	2100      	movs	r1, #0
 800b61c:	4b01      	ldr	r3, [pc, #4]	; (800b624 <Hw_Led_Toggle+0x38>)
 800b61e:	4798      	blx	r3
			break;
 800b620:	bd08      	pop	{r3, pc}
 800b622:	bf00      	nop
 800b624:	0800ba79 	.word	0x0800ba79

0800b628 <Hw_VCom_Init>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_VCom_Init( void )
{
 800b628:	b508      	push	{r3, lr}
	Set_System();
 800b62a:	f64c 339d 	movw	r3, #52125	; 0xcb9d
 800b62e:	f6c0 0300 	movt	r3, #2048	; 0x800
 800b632:	4798      	blx	r3
	Set_USBClock();
 800b634:	f64c 33bd 	movw	r3, #52157	; 0xcbbd
 800b638:	f6c0 0300 	movt	r3, #2048	; 0x800
 800b63c:	4798      	blx	r3
	USB_Interrupts_Config();
 800b63e:	f64c 4301 	movw	r3, #52225	; 0xcc01
 800b642:	f6c0 0300 	movt	r3, #2048	; 0x800
 800b646:	4798      	blx	r3
	USB_Init();	
 800b648:	f24d 7361 	movw	r3, #55137	; 0xd761
 800b64c:	f6c0 0300 	movt	r3, #2048	; 0x800
 800b650:	4798      	blx	r3
 800b652:	bd08      	pop	{r3, pc}

0800b654 <Hw_VBus_SetDataPortOutput>:
---------------------------------------------------------------------------*/
void Hw_VBus_SetDataPortOutput( void )
{
	//-- D0 PB.0
	//
	REG_GPIOB_CRL &= ~(0x0F << ( 0));	// Clear
 800b654:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800b658:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800b65c:	681a      	ldr	r2, [r3, #0]
 800b65e:	f022 020f 	bic.w	r2, r2, #15
 800b662:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x03 << ( 0));	// MODE, PB.0 Output mode, max speed 50Mhz
 800b664:	681a      	ldr	r2, [r3, #0]
 800b666:	f042 0203 	orr.w	r2, r2, #3
 800b66a:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x00 << ( 2));	// CNF,  PB.0 General purpose output push-pul	
 800b66c:	681a      	ldr	r2, [r3, #0]
 800b66e:	601a      	str	r2, [r3, #0]

	//-- D1 PB.1
	//
	REG_GPIOB_CRL &= ~(0x0F << ( 4));	// Clear
 800b670:	681a      	ldr	r2, [r3, #0]
 800b672:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800b676:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x03 << ( 4));	// MODE, PB.1 Output mode, max speed 50Mhz
 800b678:	681a      	ldr	r2, [r3, #0]
 800b67a:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 800b67e:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x00 << ( 6));	// CNF,  PB.1 General purpose output push-pul	
 800b680:	681a      	ldr	r2, [r3, #0]
 800b682:	601a      	str	r2, [r3, #0]

	//-- D2 PB.2
	//
	REG_GPIOB_CRL &= ~(0x0F << ( 8));	// Clear
 800b684:	681a      	ldr	r2, [r3, #0]
 800b686:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 800b68a:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x03 << ( 8));	// MODE, PB.2 Output mode, max speed 50Mhz
 800b68c:	681a      	ldr	r2, [r3, #0]
 800b68e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800b692:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x00 << (10));	// CNF,  PB.2 General purpose output push-pul	
 800b694:	681a      	ldr	r2, [r3, #0]
 800b696:	601a      	str	r2, [r3, #0]

	//-- D3 PB.3
	//
	REG_GPIOB_CRL &= ~(0x0F << (12));	// Clear
 800b698:	681a      	ldr	r2, [r3, #0]
 800b69a:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 800b69e:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x03 << (12));	// MODE, PB.2 Output mode, max speed 50Mhz
 800b6a0:	681a      	ldr	r2, [r3, #0]
 800b6a2:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 800b6a6:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x00 << (14));	// CNF,  PB.2 General purpose output push-pul	
 800b6a8:	681a      	ldr	r2, [r3, #0]
 800b6aa:	601a      	str	r2, [r3, #0]

	//-- D4 PB.4
	//
	REG_GPIOB_CRL &= ~(0x0F << (16));	// Clear
 800b6ac:	681a      	ldr	r2, [r3, #0]
 800b6ae:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 800b6b2:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x03 << (16));	// MODE, PB.2 Output mode, max speed 50Mhz
 800b6b4:	681a      	ldr	r2, [r3, #0]
 800b6b6:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 800b6ba:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x00 << (18));	// CNF,  PB.2 General purpose output push-pul	
 800b6bc:	681a      	ldr	r2, [r3, #0]
 800b6be:	601a      	str	r2, [r3, #0]
	
	//-- D5 PB.5
	//
	REG_GPIOB_CRL &= ~(0x0F << (20));	// Clear
 800b6c0:	681a      	ldr	r2, [r3, #0]
 800b6c2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800b6c6:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x03 << (20));	// MODE, PB.6 Output mode, max speed 50Mhz
 800b6c8:	681a      	ldr	r2, [r3, #0]
 800b6ca:	f442 1240 	orr.w	r2, r2, #3145728	; 0x300000
 800b6ce:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x00 << (22));	// CNF,  PB.6 General purpose output push-pul	
 800b6d0:	681a      	ldr	r2, [r3, #0]
 800b6d2:	601a      	str	r2, [r3, #0]
	
	//-- D6 PB.6
	//
	REG_GPIOB_CRL &= ~(0x0F << (24));	// Clear
 800b6d4:	681a      	ldr	r2, [r3, #0]
 800b6d6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800b6da:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x03 << (24));	// MODE, PB.6 Output mode, max speed 50Mhz
 800b6dc:	681a      	ldr	r2, [r3, #0]
 800b6de:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 800b6e2:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x00 << (26));	// CNF,  PB.6 General purpose output push-pul	
 800b6e4:	681a      	ldr	r2, [r3, #0]
 800b6e6:	601a      	str	r2, [r3, #0]

	//-- D7 PB.7
	//
	REG_GPIOB_CRL &= ~(0x0F << (28));	// Clear
 800b6e8:	681a      	ldr	r2, [r3, #0]
 800b6ea:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800b6ee:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x03 << (28));	// MODE, PB.7 Output mode, max speed 50Mhz
 800b6f0:	681a      	ldr	r2, [r3, #0]
 800b6f2:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800b6f6:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x00 << (30));	// CNF,  PB.7 General purpose output push-pul				
 800b6f8:	681a      	ldr	r2, [r3, #0]
 800b6fa:	601a      	str	r2, [r3, #0]
 800b6fc:	4770      	bx	lr
 800b6fe:	bf00      	nop

0800b700 <Hw_VBus_SetDataPortInput>:
---------------------------------------------------------------------------*/
void Hw_VBus_SetDataPortInput( void )
{
	//-- D0 PB.0
	//
	REG_GPIOB_CRL &= ~(0x0F << ( 0));	// Clear
 800b700:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800b704:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800b708:	681a      	ldr	r2, [r3, #0]
 800b70a:	f022 020f 	bic.w	r2, r2, #15
 800b70e:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x00 << ( 0));	// MODE, PB.0 Input Mode
 800b710:	681a      	ldr	r2, [r3, #0]
 800b712:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x01 << ( 2));	// CNF,  PB.0 Floating input
 800b714:	681a      	ldr	r2, [r3, #0]
 800b716:	f042 0204 	orr.w	r2, r2, #4
 800b71a:	601a      	str	r2, [r3, #0]
		
	//-- D1 PB.1
	//
	REG_GPIOB_CRL &= ~(0x0F << ( 4));	// Clear
 800b71c:	681a      	ldr	r2, [r3, #0]
 800b71e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800b722:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x00 << ( 4));	// MODE, PB.1 Input Mode
 800b724:	681a      	ldr	r2, [r3, #0]
 800b726:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x01 << ( 6));	// CNF,  PB.1 Floating input
 800b728:	681a      	ldr	r2, [r3, #0]
 800b72a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b72e:	601a      	str	r2, [r3, #0]

	//-- D2 PB.2
	//
	REG_GPIOB_CRL &= ~(0x0F << ( 8));	// Clear
 800b730:	681a      	ldr	r2, [r3, #0]
 800b732:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 800b736:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x00 << ( 8));	// MODE, PB.2 Input Mode
 800b738:	681a      	ldr	r2, [r3, #0]
 800b73a:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x01 << (10));	// CNF,  PB.2 Floating input
 800b73c:	681a      	ldr	r2, [r3, #0]
 800b73e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b742:	601a      	str	r2, [r3, #0]

	//-- D3 PB.3
	//
	REG_GPIOB_CRL &= ~(0x0F << (12));	// Clear
 800b744:	681a      	ldr	r2, [r3, #0]
 800b746:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 800b74a:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x00 << (12));	// MODE, PB.2 Input Mode
 800b74c:	681a      	ldr	r2, [r3, #0]
 800b74e:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x01 << (14));	// CNF,  PB.2 Floating input
 800b750:	681a      	ldr	r2, [r3, #0]
 800b752:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b756:	601a      	str	r2, [r3, #0]

	//-- D4 PB.4
	//
	REG_GPIOB_CRL &= ~(0x0F << (16));	// Clear
 800b758:	681a      	ldr	r2, [r3, #0]
 800b75a:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 800b75e:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x00 << (16));	// MODE, PB.2 Input Mode
 800b760:	681a      	ldr	r2, [r3, #0]
 800b762:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x01 << (18));	// CNF,  PB.2 Floating input
 800b764:	681a      	ldr	r2, [r3, #0]
 800b766:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800b76a:	601a      	str	r2, [r3, #0]
	
	//-- D5 PB.5
	//
	REG_GPIOB_CRL &= ~(0x0F << (20));	// Clear
 800b76c:	681a      	ldr	r2, [r3, #0]
 800b76e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800b772:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x00 << (20));	// MODE, PB.6 Input Mode
 800b774:	681a      	ldr	r2, [r3, #0]
 800b776:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x01 << (22));	// CNF,  PB.6 Floating input
 800b778:	681a      	ldr	r2, [r3, #0]
 800b77a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800b77e:	601a      	str	r2, [r3, #0]
	
	//-- D6 PB.6
	//
	REG_GPIOB_CRL &= ~(0x0F << (24));	// Clear
 800b780:	681a      	ldr	r2, [r3, #0]
 800b782:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800b786:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x00 << (24));	// MODE, PB.6 Input Mode
 800b788:	681a      	ldr	r2, [r3, #0]
 800b78a:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x01 << (26));	// CNF,  PB.6 Floating input
 800b78c:	681a      	ldr	r2, [r3, #0]
 800b78e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800b792:	601a      	str	r2, [r3, #0]

	//-- D7 PB.7
	//
	REG_GPIOB_CRL &= ~(0x0F << (28));	// Clear
 800b794:	681a      	ldr	r2, [r3, #0]
 800b796:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800b79a:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x00 << (28));	// MODE, PB.7 Input Mode
 800b79c:	681a      	ldr	r2, [r3, #0]
 800b79e:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x01 << (30));	// CNF,  PB.7 Floating input
 800b7a0:	681a      	ldr	r2, [r3, #0]
 800b7a2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800b7a6:	601a      	str	r2, [r3, #0]
 800b7a8:	4770      	bx	lr
 800b7aa:	bf00      	nop

0800b7ac <Hw_VBus_SetAddress>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_VBus_SetAddress( u32 Address )
{
	if( Address & (1<<0) )	SET_BIT( REG_GPIOA_ODR, 13 );
 800b7ac:	f640 030c 	movw	r3, #2060	; 0x80c
 800b7b0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800b7b4:	681a      	ldr	r2, [r3, #0]
 800b7b6:	07c1      	lsls	r1, r0, #31
 800b7b8:	bf4c      	ite	mi
 800b7ba:	f442 5200 	orrmi.w	r2, r2, #8192	; 0x2000
	else					CLR_BIT( REG_GPIOA_ODR, 13 );
 800b7be:	f422 5200 	bicpl.w	r2, r2, #8192	; 0x2000
 800b7c2:	601a      	str	r2, [r3, #0]

	if( Address & (1<<1) )	SET_BIT( REG_GPIOA_ODR, 14 );
 800b7c4:	f640 030c 	movw	r3, #2060	; 0x80c
 800b7c8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800b7cc:	681a      	ldr	r2, [r3, #0]
 800b7ce:	0781      	lsls	r1, r0, #30
 800b7d0:	bf4c      	ite	mi
 800b7d2:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
	else					CLR_BIT( REG_GPIOA_ODR, 14 );
 800b7d6:	f422 4280 	bicpl.w	r2, r2, #16384	; 0x4000
 800b7da:	601a      	str	r2, [r3, #0]

	if( Address & (1<<2) )	SET_BIT( REG_GPIOA_ODR, 15 );
 800b7dc:	f640 030c 	movw	r3, #2060	; 0x80c
 800b7e0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800b7e4:	681a      	ldr	r2, [r3, #0]
 800b7e6:	0741      	lsls	r1, r0, #29
 800b7e8:	bf4c      	ite	mi
 800b7ea:	f442 4200 	orrmi.w	r2, r2, #32768	; 0x8000
	else					CLR_BIT( REG_GPIOA_ODR, 15 );
 800b7ee:	f422 4200 	bicpl.w	r2, r2, #32768	; 0x8000
 800b7f2:	601a      	str	r2, [r3, #0]
	
	if( Address & (1<<3) )	SET_BIT( REG_GPIOC_ODR, 14 );
 800b7f4:	f241 030c 	movw	r3, #4108	; 0x100c
 800b7f8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800b7fc:	681a      	ldr	r2, [r3, #0]
 800b7fe:	0701      	lsls	r1, r0, #28
 800b800:	bf4c      	ite	mi
 800b802:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
	else					CLR_BIT( REG_GPIOC_ODR, 14 );
 800b806:	f422 4280 	bicpl.w	r2, r2, #16384	; 0x4000
 800b80a:	601a      	str	r2, [r3, #0]

	if( Address & (1<<4) )	SET_BIT( REG_GPIOC_ODR, 15 );
 800b80c:	f241 030c 	movw	r3, #4108	; 0x100c
 800b810:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800b814:	681a      	ldr	r2, [r3, #0]
 800b816:	06c1      	lsls	r1, r0, #27
 800b818:	bf4c      	ite	mi
 800b81a:	f442 4200 	orrmi.w	r2, r2, #32768	; 0x8000
	else					CLR_BIT( REG_GPIOC_ODR, 15 );
 800b81e:	f422 4200 	bicpl.w	r2, r2, #32768	; 0x8000
 800b822:	601a      	str	r2, [r3, #0]
 800b824:	4770      	bx	lr
 800b826:	bf00      	nop

0800b828 <Hw_VBus_SetIdle>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_VBus_SetIdle( void )
{
 800b828:	b508      	push	{r3, lr}
	SET_BIT( REG_GPIOC_ODR, 14 );
 800b82a:	f241 030c 	movw	r3, #4108	; 0x100c
 800b82e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800b832:	6819      	ldr	r1, [r3, #0]
---------------------------------------------------------------------------*/
void Hw_VBus_SetData( u8 Data  )
{
	u32 RegData;
	
	RegData  = REG_GPIOB_ODR;
 800b834:	f640 420c 	movw	r2, #3084	; 0xc0c
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_VBus_SetIdle( void )
{
	SET_BIT( REG_GPIOC_ODR, 14 );
 800b838:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 800b83c:	6019      	str	r1, [r3, #0]
	SET_BIT( REG_GPIOC_ODR, 15 );	
 800b83e:	6819      	ldr	r1, [r3, #0]
---------------------------------------------------------------------------*/
void Hw_VBus_SetData( u8 Data  )
{
	u32 RegData;
	
	RegData  = REG_GPIOB_ODR;
 800b840:	f2c4 0201 	movt	r2, #16385	; 0x4001
     RET     : void
---------------------------------------------------------------------------*/
void Hw_VBus_SetIdle( void )
{
	SET_BIT( REG_GPIOC_ODR, 14 );
	SET_BIT( REG_GPIOC_ODR, 15 );	
 800b844:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800b848:	6019      	str	r1, [r3, #0]
	
	#if HW_VBUS_BUG_FIX_FND == 1

	Hw_VBus_SetData(Hw_VBus_AddrTbl[ HW_VBUS_CS_FND_2 ].Data);
 800b84a:	f241 43a8 	movw	r3, #5288	; 0x14a8
---------------------------------------------------------------------------*/
void Hw_VBus_SetData( u8 Data  )
{
	u32 RegData;
	
	RegData  = REG_GPIOB_ODR;
 800b84e:	6811      	ldr	r1, [r2, #0]
	SET_BIT( REG_GPIOC_ODR, 14 );
	SET_BIT( REG_GPIOC_ODR, 15 );	
	
	#if HW_VBUS_BUG_FIX_FND == 1

	Hw_VBus_SetData(Hw_VBus_AddrTbl[ HW_VBUS_CS_FND_2 ].Data);
 800b850:	f2c2 0300 	movt	r3, #8192	; 0x2000
{
	u32 RegData;
	
	RegData  = REG_GPIOB_ODR;
	RegData &= ~(0xFF);
	RegData |= Data;
 800b854:	7e5b      	ldrb	r3, [r3, #25]
void Hw_VBus_SetData( u8 Data  )
{
	u32 RegData;
	
	RegData  = REG_GPIOB_ODR;
	RegData &= ~(0xFF);
 800b856:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
	RegData |= Data;
 800b85a:	4319      	orrs	r1, r3
	SET_BIT( REG_GPIOC_ODR, 15 );	
	
	#if HW_VBUS_BUG_FIX_FND == 1

	Hw_VBus_SetData(Hw_VBus_AddrTbl[ HW_VBUS_CS_FND_2 ].Data);
	Hw_VBus_SetAddress( HW_VBUS_CS_FND_2 );
 800b85c:	f24b 73ad 	movw	r3, #47021	; 0xb7ad
	
	RegData  = REG_GPIOB_ODR;
	RegData &= ~(0xFF);
	RegData |= Data;
	
	REG_GPIOB_ODR = RegData; 
 800b860:	6011      	str	r1, [r2, #0]
	SET_BIT( REG_GPIOC_ODR, 15 );	
	
	#if HW_VBUS_BUG_FIX_FND == 1

	Hw_VBus_SetData(Hw_VBus_AddrTbl[ HW_VBUS_CS_FND_2 ].Data);
	Hw_VBus_SetAddress( HW_VBUS_CS_FND_2 );
 800b862:	200c      	movs	r0, #12
 800b864:	f6c0 0300 	movt	r3, #2048	; 0x800
 800b868:	4798      	blx	r3
 800b86a:	bd08      	pop	{r3, pc}

0800b86c <Hw_VBus_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_VBus_Init( void )
{
 800b86c:	b510      	push	{r4, lr}
 800b86e:	2300      	movs	r3, #0
 800b870:	4c35      	ldr	r4, [pc, #212]	; (800b948 <Hw_VBus_Init+0xdc>)
	u32 i;
	
	for( i=0; i<256; i++ )
	{
		Hw_VBus_AddrTbl[i].Dir = HW_VBUS_PORT_DIR_OUT;
 800b872:	4618      	mov	r0, r3
 800b874:	5518      	strb	r0, [r3, r4]
 800b876:	3302      	adds	r3, #2
 800b878:	2100      	movs	r1, #0
---------------------------------------------------------------------------*/
void Hw_VBus_Init( void )
{
	u32 i;
	
	for( i=0; i<256; i++ )
 800b87a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
	{
		Hw_VBus_AddrTbl[i].Dir = HW_VBUS_PORT_DIR_OUT;
 800b87e:	4a32      	ldr	r2, [pc, #200]	; (800b948 <Hw_VBus_Init+0xdc>)
---------------------------------------------------------------------------*/
void Hw_VBus_Init( void )
{
	u32 i;
	
	for( i=0; i<256; i++ )
 800b880:	d1f8      	bne.n	800b874 <Hw_VBus_Init+0x8>
	

	Hw_VBus_AddrTbl[ HW_VBUS_CS_FND_0 ].Dir = HW_VBUS_PORT_DIR_OUT;
	Hw_VBus_AddrTbl[ HW_VBUS_CS_FND_2 ].Dir = HW_VBUS_PORT_DIR_OUT;
	Hw_VBus_AddrTbl[ HW_VBUS_CS_LCD   ].Dir = HW_VBUS_PORT_DIR_OUT;
	Hw_VBus_AddrTbl[ HW_VBUS_CS_KEY   ].Dir = HW_VBUS_PORT_DIR_IN;
 800b882:	2001      	movs	r0, #1
	
	
	
	//-- JTAG 핀을 Disable하고 PB3,4를 GPIO로 사용한다.(핀구성에 따라 사용하지 않을수 있음)
	//
	REG_AFIO_MAPR &= ~(0x07 << 24);
 800b884:	2304      	movs	r3, #4
		Hw_VBus_AddrTbl[i].Dir = HW_VBUS_PORT_DIR_OUT;
	}
	
	

	Hw_VBus_AddrTbl[ HW_VBUS_CS_FND_0 ].Dir = HW_VBUS_PORT_DIR_OUT;
 800b886:	7511      	strb	r1, [r2, #20]
	Hw_VBus_AddrTbl[ HW_VBUS_CS_FND_2 ].Dir = HW_VBUS_PORT_DIR_OUT;
 800b888:	7611      	strb	r1, [r2, #24]
	Hw_VBus_AddrTbl[ HW_VBUS_CS_LCD   ].Dir = HW_VBUS_PORT_DIR_OUT;
 800b88a:	f882 1020 	strb.w	r1, [r2, #32]
	Hw_VBus_AddrTbl[ HW_VBUS_CS_KEY   ].Dir = HW_VBUS_PORT_DIR_IN;
 800b88e:	f882 0022 	strb.w	r0, [r2, #34]	; 0x22
	Hw_VBus_AddrTbl[ HW_VBUS_CS_LED_1 ].Dir = HW_VBUS_PORT_DIR_OUT;
 800b892:	f882 1024 	strb.w	r1, [r2, #36]	; 0x24
	Hw_VBus_AddrTbl[ HW_VBUS_CS_LED_2 ].Dir = HW_VBUS_PORT_DIR_OUT;
 800b896:	f882 1026 	strb.w	r1, [r2, #38]	; 0x26
	Hw_VBus_AddrTbl[ HW_VBUS_CS_BUSIO ].Dir = HW_VBUS_PORT_DIR_OUT;
 800b89a:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
	
	Hw_VBus_AddrTbl[ HW_VBUS_CS_FND_0 ].Data = 0;
 800b89e:	7551      	strb	r1, [r2, #21]
	Hw_VBus_AddrTbl[ HW_VBUS_CS_FND_2 ].Data = 0;
 800b8a0:	7651      	strb	r1, [r2, #25]
	Hw_VBus_AddrTbl[ HW_VBUS_CS_LCD   ].Data = 0;
 800b8a2:	f882 1021 	strb.w	r1, [r2, #33]	; 0x21
	Hw_VBus_AddrTbl[ HW_VBUS_CS_KEY   ].Data = 0;
 800b8a6:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
	Hw_VBus_AddrTbl[ HW_VBUS_CS_LED_1 ].Data = 0;
 800b8aa:	f882 1025 	strb.w	r1, [r2, #37]	; 0x25
	Hw_VBus_AddrTbl[ HW_VBUS_CS_LED_2 ].Data = 0;
 800b8ae:	f882 1027 	strb.w	r1, [r2, #39]	; 0x27
	Hw_VBus_AddrTbl[ HW_VBUS_CS_BUSIO ].Data = 0;	
 800b8b2:	f882 1029 	strb.w	r1, [r2, #41]	; 0x29
	
	
	
	//-- JTAG 핀을 Disable하고 PB3,4를 GPIO로 사용한다.(핀구성에 따라 사용하지 않을수 있음)
	//
	REG_AFIO_MAPR &= ~(0x07 << 24);
 800b8b6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800b8ba:	681a      	ldr	r2, [r3, #0]
 800b8bc:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 800b8c0:	601a      	str	r2, [r3, #0]
	REG_AFIO_MAPR |=  (0x04 << 24);
 800b8c2:	681a      	ldr	r2, [r3, #0]
 800b8c4:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800b8c8:	601a      	str	r2, [r3, #0]
	
	
	//-- 데이터 버스 기본으로 출력으로 설정
	//
	Hw_VBus_SetDataPortOutput();
 800b8ca:	4b20      	ldr	r3, [pc, #128]	; (800b94c <Hw_VBus_Init+0xe0>)
 800b8cc:	4798      	blx	r3
	
	
	//-- A0 PA.13
	//
	REG_GPIOA_CRH &= ~(0x0F << (20));	// Clear
 800b8ce:	f640 0304 	movw	r3, #2052	; 0x804
 800b8d2:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800b8d6:	6819      	ldr	r1, [r3, #0]
	REG_GPIOA_CRH |=  (0x03 << (28));	// MODE, PA.15 Output mode, max speed 50Mhz
	REG_GPIOA_CRH |=  (0x00 << (30));	// CNF,  PA.15 General purpose output push-pul			

	//-- A3 PC.14
	//
	REG_GPIOC_CRH &= ~(0x0F << (24));	// Clear
 800b8d8:	f241 0204 	movw	r2, #4100	; 0x1004
	Hw_VBus_SetDataPortOutput();
	
	
	//-- A0 PA.13
	//
	REG_GPIOA_CRH &= ~(0x0F << (20));	// Clear
 800b8dc:	f421 0170 	bic.w	r1, r1, #15728640	; 0xf00000
 800b8e0:	6019      	str	r1, [r3, #0]
	REG_GPIOA_CRH |=  (0x03 << (20));	// MODE, PA.13 Output mode, max speed 50Mhz
 800b8e2:	6819      	ldr	r1, [r3, #0]
	REG_GPIOA_CRH |=  (0x03 << (28));	// MODE, PA.15 Output mode, max speed 50Mhz
	REG_GPIOA_CRH |=  (0x00 << (30));	// CNF,  PA.15 General purpose output push-pul			

	//-- A3 PC.14
	//
	REG_GPIOC_CRH &= ~(0x0F << (24));	// Clear
 800b8e4:	f2c4 0201 	movt	r2, #16385	; 0x4001
	
	
	//-- A0 PA.13
	//
	REG_GPIOA_CRH &= ~(0x0F << (20));	// Clear
	REG_GPIOA_CRH |=  (0x03 << (20));	// MODE, PA.13 Output mode, max speed 50Mhz
 800b8e8:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800b8ec:	6019      	str	r1, [r3, #0]
	REG_GPIOA_CRH |=  (0x00 << (22));	// CNF,  PA.13 General purpose output push-pul			
 800b8ee:	6819      	ldr	r1, [r3, #0]
 800b8f0:	6019      	str	r1, [r3, #0]
	

	//-- A1 PA.14
	//
	REG_GPIOA_CRH &= ~(0x0F << (24));	// Clear
 800b8f2:	6819      	ldr	r1, [r3, #0]
 800b8f4:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 800b8f8:	6019      	str	r1, [r3, #0]
	REG_GPIOA_CRH |=  (0x03 << (24));	// MODE, PA.14 Output mode, max speed 50Mhz
 800b8fa:	6819      	ldr	r1, [r3, #0]
 800b8fc:	f041 7140 	orr.w	r1, r1, #50331648	; 0x3000000
 800b900:	6019      	str	r1, [r3, #0]
	REG_GPIOA_CRH |=  (0x00 << (26));	// CNF,  PA.14 General purpose output push-pul			
 800b902:	6819      	ldr	r1, [r3, #0]
 800b904:	6019      	str	r1, [r3, #0]

	//-- A2 PA.15
	//
	REG_GPIOA_CRH &= ~(0x0F << (28));	// Clear
 800b906:	6819      	ldr	r1, [r3, #0]
 800b908:	f021 4170 	bic.w	r1, r1, #4026531840	; 0xf0000000
 800b90c:	6019      	str	r1, [r3, #0]
	REG_GPIOA_CRH |=  (0x03 << (28));	// MODE, PA.15 Output mode, max speed 50Mhz
 800b90e:	6819      	ldr	r1, [r3, #0]
 800b910:	f041 5140 	orr.w	r1, r1, #805306368	; 0x30000000
 800b914:	6019      	str	r1, [r3, #0]
	REG_GPIOA_CRH |=  (0x00 << (30));	// CNF,  PA.15 General purpose output push-pul			
 800b916:	6819      	ldr	r1, [r3, #0]
 800b918:	6019      	str	r1, [r3, #0]

	//-- A3 PC.14
	//
	REG_GPIOC_CRH &= ~(0x0F << (24));	// Clear
 800b91a:	6813      	ldr	r3, [r2, #0]
 800b91c:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800b920:	6013      	str	r3, [r2, #0]
	REG_GPIOC_CRH |=  (0x03 << (24));	// MODE, PC.14 Output mode, max speed 50Mhz
 800b922:	6813      	ldr	r3, [r2, #0]
 800b924:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 800b928:	6013      	str	r3, [r2, #0]
	REG_GPIOC_CRH |=  (0x00 << (26));	// CNF,  PC.14 General purpose output push-pul			
 800b92a:	6813      	ldr	r3, [r2, #0]
 800b92c:	6013      	str	r3, [r2, #0]

	//-- A4 PC.15
	//
	REG_GPIOC_CRH &= ~(0x0F << (28));	// Clear
 800b92e:	6813      	ldr	r3, [r2, #0]
 800b930:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b934:	6013      	str	r3, [r2, #0]
	REG_GPIOC_CRH |=  (0x03 << (28));	// MODE, PC.15 Output mode, max speed 50Mhz
 800b936:	6813      	ldr	r3, [r2, #0]
 800b938:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 800b93c:	6013      	str	r3, [r2, #0]
	REG_GPIOC_CRH |=  (0x00 << (30));	// CNF,  PC.15 General purpose output push-pul		
 800b93e:	6813      	ldr	r3, [r2, #0]
 800b940:	6013      	str	r3, [r2, #0]
	
	
	//-- 버스 상태를 Idle상태로 만든다.
	//
	Hw_VBus_SetIdle();
 800b942:	4b03      	ldr	r3, [pc, #12]	; (800b950 <Hw_VBus_Init+0xe4>)
 800b944:	4798      	blx	r3
 800b946:	bd10      	pop	{r4, pc}
 800b948:	200014a8 	.word	0x200014a8
 800b94c:	0800b655 	.word	0x0800b655
 800b950:	0800b829 	.word	0x0800b829

0800b954 <Hw_VBus_WriteData>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_VBus_WriteData( u32 Address, u8 ByteData )
{
 800b954:	b510      	push	{r4, lr}
	u8 Dir;
	
	Dir = Hw_VBus_AddrTbl[ Address ].Dir;
 800b956:	4b12      	ldr	r3, [pc, #72]	; (800b9a0 <Hw_VBus_WriteData+0x4c>)
 800b958:	f813 4010 	ldrb.w	r4, [r3, r0, lsl #1]
	
	Hw_VBus_AddrTbl[ Address ].Data = ByteData;
 800b95c:	eb03 0340 	add.w	r3, r3, r0, lsl #1
	
	if( Dir == HW_VBUS_PORT_DIR_OUT || Dir == HW_VBUS_PORT_DIR_INOUT )
 800b960:	f014 0ffd 	tst.w	r4, #253	; 0xfd
{
	u8 Dir;
	
	Dir = Hw_VBus_AddrTbl[ Address ].Dir;
	
	Hw_VBus_AddrTbl[ Address ].Data = ByteData;
 800b964:	7059      	strb	r1, [r3, #1]
	
	if( Dir == HW_VBUS_PORT_DIR_OUT || Dir == HW_VBUS_PORT_DIR_INOUT )
 800b966:	d11a      	bne.n	800b99e <Hw_VBus_WriteData+0x4a>
	{ 
		Disable_ISR();
 800b968:	b672      	cpsid	i
		
		#if HW_VBUS_BUG_FIX_FND == 1
		SET_BIT( REG_GPIOC_ODR, 14 );
 800b96a:	f241 030c 	movw	r3, #4108	; 0x100c
 800b96e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800b972:	681c      	ldr	r4, [r3, #0]
---------------------------------------------------------------------------*/
void Hw_VBus_SetData( u8 Data  )
{
	u32 RegData;
	
	RegData  = REG_GPIOB_ODR;
 800b974:	f640 420c 	movw	r2, #3084	; 0xc0c
	if( Dir == HW_VBUS_PORT_DIR_OUT || Dir == HW_VBUS_PORT_DIR_INOUT )
	{ 
		Disable_ISR();
		
		#if HW_VBUS_BUG_FIX_FND == 1
		SET_BIT( REG_GPIOC_ODR, 14 );
 800b978:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 800b97c:	601c      	str	r4, [r3, #0]
		SET_BIT( REG_GPIOC_ODR, 15 );	
 800b97e:	681c      	ldr	r4, [r3, #0]
---------------------------------------------------------------------------*/
void Hw_VBus_SetData( u8 Data  )
{
	u32 RegData;
	
	RegData  = REG_GPIOB_ODR;
 800b980:	f2c4 0201 	movt	r2, #16385	; 0x4001
	{ 
		Disable_ISR();
		
		#if HW_VBUS_BUG_FIX_FND == 1
		SET_BIT( REG_GPIOC_ODR, 14 );
		SET_BIT( REG_GPIOC_ODR, 15 );	
 800b984:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 800b988:	601c      	str	r4, [r3, #0]
---------------------------------------------------------------------------*/
void Hw_VBus_SetData( u8 Data  )
{
	u32 RegData;
	
	RegData  = REG_GPIOB_ODR;
 800b98a:	6813      	ldr	r3, [r2, #0]
	RegData &= ~(0xFF);
 800b98c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
	RegData |= Data;
 800b990:	4319      	orrs	r1, r3
	
	REG_GPIOB_ODR = RegData; 
 800b992:	6011      	str	r1, [r2, #0]
		SET_BIT( REG_GPIOC_ODR, 14 );
		SET_BIT( REG_GPIOC_ODR, 15 );	
		#endif
		
		Hw_VBus_SetData   ( ByteData );
		Hw_VBus_SetAddress( Address  );
 800b994:	4b03      	ldr	r3, [pc, #12]	; (800b9a4 <Hw_VBus_WriteData+0x50>)
 800b996:	4798      	blx	r3
		Hw_VBus_SetIdle();		
 800b998:	4b03      	ldr	r3, [pc, #12]	; (800b9a8 <Hw_VBus_WriteData+0x54>)
 800b99a:	4798      	blx	r3
		Enable_ISR();		
 800b99c:	b662      	cpsie	i
 800b99e:	bd10      	pop	{r4, pc}
 800b9a0:	200014a8 	.word	0x200014a8
 800b9a4:	0800b7ad 	.word	0x0800b7ad
 800b9a8:	0800b829 	.word	0x0800b829

0800b9ac <Hw_VBus_ReadData>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_VBus_ReadData( u32 Address )
{
 800b9ac:	b500      	push	{lr}
	u8 Ret = 0;
	u8 Dir;
	
	Dir = Hw_VBus_AddrTbl[ Address ].Dir;
 800b9ae:	4b17      	ldr	r3, [pc, #92]	; (800ba0c <Hw_VBus_ReadData+0x60>)
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_VBus_ReadData( u32 Address )
{
 800b9b0:	b083      	sub	sp, #12
	u8 Ret = 0;
	u8 Dir;
	
	Dir = Hw_VBus_AddrTbl[ Address ].Dir;
	
	if( Dir == HW_VBUS_PORT_DIR_IN || Dir == HW_VBUS_PORT_DIR_INOUT )
 800b9b2:	f813 2010 	ldrb.w	r2, [r3, r0, lsl #1]
 800b9b6:	3a01      	subs	r2, #1
 800b9b8:	2a01      	cmp	r2, #1
	
		Enable_ISR();
	}
	else
	{
		Ret = Hw_VBus_AddrTbl[ Address ].Data;
 800b9ba:	bf84      	itt	hi
 800b9bc:	eb03 0040 	addhi.w	r0, r3, r0, lsl #1
 800b9c0:	7840      	ldrbhi	r0, [r0, #1]
	u8 Ret = 0;
	u8 Dir;
	
	Dir = Hw_VBus_AddrTbl[ Address ].Dir;
	
	if( Dir == HW_VBUS_PORT_DIR_IN || Dir == HW_VBUS_PORT_DIR_INOUT )
 800b9c2:	d901      	bls.n	800b9c8 <Hw_VBus_ReadData+0x1c>
	{
		Ret = Hw_VBus_AddrTbl[ Address ].Data;
	}
		
	return Ret;	
}
 800b9c4:	b003      	add	sp, #12
 800b9c6:	bd00      	pop	{pc}
	
	Dir = Hw_VBus_AddrTbl[ Address ].Dir;
	
	if( Dir == HW_VBUS_PORT_DIR_IN || Dir == HW_VBUS_PORT_DIR_INOUT )
	{
		Disable_ISR();
 800b9c8:	b672      	cpsid	i
		
		#if HW_VBUS_BUG_FIX_FND == 1
		SET_BIT( REG_GPIOC_ODR, 14 );
 800b9ca:	f241 030c 	movw	r3, #4108	; 0x100c
 800b9ce:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800b9d2:	681a      	ldr	r2, [r3, #0]
 800b9d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b9d8:	601a      	str	r2, [r3, #0]
		SET_BIT( REG_GPIOC_ODR, 15 );
 800b9da:	681a      	ldr	r2, [r3, #0]
 800b9dc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b9e0:	601a      	str	r2, [r3, #0]
		#endif
					
		Hw_VBus_SetDataPortInput();
 800b9e2:	9001      	str	r0, [sp, #4]
 800b9e4:	4b0a      	ldr	r3, [pc, #40]	; (800ba10 <Hw_VBus_ReadData+0x64>)
 800b9e6:	4798      	blx	r3
		Hw_VBus_SetAddress( Address  );
 800b9e8:	9801      	ldr	r0, [sp, #4]
 800b9ea:	4b0a      	ldr	r3, [pc, #40]	; (800ba14 <Hw_VBus_ReadData+0x68>)
 800b9ec:	4798      	blx	r3
---------------------------------------------------------------------------*/
u8 Hw_VBus_GetData( void  )
{
	u8 Data;
		
	Data = (u8)REG_GPIOB_IDR;
 800b9ee:	f640 4308 	movw	r3, #3080	; 0xc08
 800b9f2:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800b9f6:	6818      	ldr	r0, [r3, #0]
		Hw_VBus_SetDataPortInput();
		Hw_VBus_SetAddress( Address  );
		
		Ret = Hw_VBus_GetData();
	
		Hw_VBus_SetIdle();
 800b9f8:	4b07      	ldr	r3, [pc, #28]	; (800ba18 <Hw_VBus_ReadData+0x6c>)
---------------------------------------------------------------------------*/
u8 Hw_VBus_GetData( void  )
{
	u8 Data;
		
	Data = (u8)REG_GPIOB_IDR;
 800b9fa:	b2c0      	uxtb	r0, r0
		Hw_VBus_SetDataPortInput();
		Hw_VBus_SetAddress( Address  );
		
		Ret = Hw_VBus_GetData();
	
		Hw_VBus_SetIdle();
 800b9fc:	9001      	str	r0, [sp, #4]
 800b9fe:	4798      	blx	r3
		
		Hw_VBus_SetDataPortOutput();
 800ba00:	4b06      	ldr	r3, [pc, #24]	; (800ba1c <Hw_VBus_ReadData+0x70>)
 800ba02:	4798      	blx	r3
	
		Enable_ISR();
 800ba04:	b662      	cpsie	i
 800ba06:	9801      	ldr	r0, [sp, #4]
 800ba08:	e7dc      	b.n	800b9c4 <Hw_VBus_ReadData+0x18>
 800ba0a:	bf00      	nop
 800ba0c:	200014a8 	.word	0x200014a8
 800ba10:	0800b701 	.word	0x0800b701
 800ba14:	0800b7ad 	.word	0x0800b7ad
 800ba18:	0800b829 	.word	0x0800b829
 800ba1c:	0800b655 	.word	0x0800b655

0800ba20 <Hw_VBus_SetBit>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_VBus_SetBit( u32 Address, u8 BitNum )
{
 800ba20:	b538      	push	{r3, r4, r5, lr}
	u8 Data;
	
	Data = Hw_VBus_ReadData( Address );
 800ba22:	f64b 13ad 	movw	r3, #47533	; 0xb9ad
 800ba26:	f6c0 0300 	movt	r3, #2048	; 0x800
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_VBus_SetBit( u32 Address, u8 BitNum )
{
 800ba2a:	460d      	mov	r5, r1
 800ba2c:	4604      	mov	r4, r0
	u8 Data;
	
	Data = Hw_VBus_ReadData( Address );
 800ba2e:	4798      	blx	r3
	
	SET_BIT( Data, BitNum );
 800ba30:	2301      	movs	r3, #1
 800ba32:	fa03 f505 	lsl.w	r5, r3, r5
	
	Hw_VBus_WriteData( Address, Data );
 800ba36:	f64b 1355 	movw	r3, #47445	; 0xb955
{
	u8 Data;
	
	Data = Hw_VBus_ReadData( Address );
	
	SET_BIT( Data, BitNum );
 800ba3a:	ea40 0105 	orr.w	r1, r0, r5
	
	Hw_VBus_WriteData( Address, Data );
 800ba3e:	b2c9      	uxtb	r1, r1
 800ba40:	4620      	mov	r0, r4
 800ba42:	f6c0 0300 	movt	r3, #2048	; 0x800
 800ba46:	4798      	blx	r3
 800ba48:	bd38      	pop	{r3, r4, r5, pc}
 800ba4a:	bf00      	nop

0800ba4c <Hw_VBus_ClrBit>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_VBus_ClrBit( u32 Address, u8 BitNum )
{
 800ba4c:	b538      	push	{r3, r4, r5, lr}
	u8 Data;
	
	Data = Hw_VBus_ReadData( Address );
 800ba4e:	f64b 13ad 	movw	r3, #47533	; 0xb9ad
 800ba52:	f6c0 0300 	movt	r3, #2048	; 0x800
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_VBus_ClrBit( u32 Address, u8 BitNum )
{
 800ba56:	460d      	mov	r5, r1
 800ba58:	4604      	mov	r4, r0
	u8 Data;
	
	Data = Hw_VBus_ReadData( Address );
 800ba5a:	4798      	blx	r3
	
	CLR_BIT( Data, BitNum );
 800ba5c:	2301      	movs	r3, #1
 800ba5e:	fa03 f505 	lsl.w	r5, r3, r5
	
	Hw_VBus_WriteData( Address, Data );
 800ba62:	f64b 1355 	movw	r3, #47445	; 0xb955
{
	u8 Data;
	
	Data = Hw_VBus_ReadData( Address );
	
	CLR_BIT( Data, BitNum );
 800ba66:	ea20 0105 	bic.w	r1, r0, r5
	
	Hw_VBus_WriteData( Address, Data );
 800ba6a:	b2c9      	uxtb	r1, r1
 800ba6c:	4620      	mov	r0, r4
 800ba6e:	f6c0 0300 	movt	r3, #2048	; 0x800
 800ba72:	4798      	blx	r3
 800ba74:	bd38      	pop	{r3, r4, r5, pc}
 800ba76:	bf00      	nop

0800ba78 <Hw_VBus_TglBit>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_VBus_TglBit( u32 Address, u8 BitNum )
{
 800ba78:	b538      	push	{r3, r4, r5, lr}
	u8 Data;
	
	Data = Hw_VBus_ReadData( Address );
 800ba7a:	f64b 13ad 	movw	r3, #47533	; 0xb9ad
 800ba7e:	f6c0 0300 	movt	r3, #2048	; 0x800
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_VBus_TglBit( u32 Address, u8 BitNum )
{
 800ba82:	460d      	mov	r5, r1
 800ba84:	4604      	mov	r4, r0
	u8 Data;
	
	Data = Hw_VBus_ReadData( Address );
 800ba86:	4798      	blx	r3
	
	TGL_BIT( Data, BitNum );
 800ba88:	2301      	movs	r3, #1
 800ba8a:	fa03 f505 	lsl.w	r5, r3, r5
	
	Hw_VBus_WriteData( Address, Data );
 800ba8e:	f64b 1355 	movw	r3, #47445	; 0xb955
{
	u8 Data;
	
	Data = Hw_VBus_ReadData( Address );
	
	TGL_BIT( Data, BitNum );
 800ba92:	ea80 0105 	eor.w	r1, r0, r5
	
	Hw_VBus_WriteData( Address, Data );
 800ba96:	b2c9      	uxtb	r1, r1
 800ba98:	4620      	mov	r0, r4
 800ba9a:	f6c0 0300 	movt	r3, #2048	; 0x800
 800ba9e:	4798      	blx	r3
 800baa0:	bd38      	pop	{r3, r4, r5, pc}
 800baa2:	bf00      	nop

0800baa4 <Hw_KeyPad_StateTick>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_KeyPad_StateTick( HW_KEYPAD_LOG *pKey, u8 KeyData, u8 KeyNum  )
{
 800baa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u8  Value = 0;
	
	switch( pKey->State )
 800baa8:	6803      	ldr	r3, [r0, #0]
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_KeyPad_StateTick( HW_KEYPAD_LOG *pKey, u8 KeyData, u8 KeyNum  )
{
 800baaa:	b082      	sub	sp, #8
	u8  Value = 0;
	
	switch( pKey->State )
 800baac:	2b04      	cmp	r3, #4
 800baae:	d804      	bhi.n	800baba <Hw_KeyPad_StateTick+0x16>
 800bab0:	e8df f003 	tbb	[pc, r3]
 800bab4:	5e4f271f 	.word	0x5e4f271f
 800bab8:	07          	.byte	0x07
 800bab9:	00          	.byte	0x00
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_KeyPad_StateTick( HW_KEYPAD_LOG *pKey, u8 KeyData, u8 KeyNum  )
{
	u8  Value = 0;
 800baba:	2000      	movs	r0, #0

			break;
	}

	return Value;
}
 800babc:	b002      	add	sp, #8
 800babe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			
		case HW_KEYPAD_STATE_RELEASING:
			pKey->State = HW_KEYPAD_STATE_IDLE;
			Value       = 0;			
			
			if( Hw_KeyPad_PressedCount > 0 )
 800bac2:	4b4d      	ldr	r3, [pc, #308]	; (800bbf8 <Hw_KeyPad_StateTick+0x154>)
			
			break;

			
		case HW_KEYPAD_STATE_RELEASING:
			pKey->State = HW_KEYPAD_STATE_IDLE;
 800bac4:	2400      	movs	r4, #0
			Value       = 0;			
			
			if( Hw_KeyPad_PressedCount > 0 )
 800bac6:	6819      	ldr	r1, [r3, #0]
			
			break;

			
		case HW_KEYPAD_STATE_RELEASING:
			pKey->State = HW_KEYPAD_STATE_IDLE;
 800bac8:	6004      	str	r4, [r0, #0]
			Value       = 0;			
			
			if( Hw_KeyPad_PressedCount > 0 )
 800baca:	b109      	cbz	r1, 800bad0 <Hw_KeyPad_StateTick+0x2c>
			{
				Hw_KeyPad_PressedCount--;
 800bacc:	3901      	subs	r1, #1
 800bace:	6019      	str	r1, [r3, #0]
			}

			if( IS_CLR_BIT( Hw_KeyPad_EventFlag, HW_KEYPAD_EVENT_RELEASED ) )
 800bad0:	4b4a      	ldr	r3, [pc, #296]	; (800bbfc <Hw_KeyPad_StateTick+0x158>)
 800bad2:	6819      	ldr	r1, [r3, #0]
 800bad4:	f011 0f04 	tst.w	r1, #4
			{
				SET_BIT( Hw_KeyPad_EventFlag, HW_KEYPAD_EVENT_RELEASED );
 800bad8:	bf01      	itttt	eq
 800bada:	f041 0104 	orreq.w	r1, r1, #4
 800bade:	6019      	streq	r1, [r3, #0]
				Hw_KeyPad_EventList[HW_KEYPAD_EVENT_RELEASED] = KeyNum;				
 800bae0:	4b47      	ldreq	r3, [pc, #284]	; (800bc00 <Hw_KeyPad_StateTick+0x15c>)
 800bae2:	609a      	streq	r2, [r3, #8]
			}
			
			if( pKey->EventFnct != NULL )
 800bae4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d0e7      	beq.n	800baba <Hw_KeyPad_StateTick+0x16>
			{
				(*pKey->EventFnct)(HW_KEYPAD_EVENT_RELEASED);
 800baea:	2002      	movs	r0, #2
 800baec:	4798      	blx	r3
			break;

			
		case HW_KEYPAD_STATE_RELEASING:
			pKey->State = HW_KEYPAD_STATE_IDLE;
			Value       = 0;			
 800baee:	2000      	movs	r0, #0
 800baf0:	e7e4      	b.n	800babc <Hw_KeyPad_StateTick+0x18>

		case HW_KEYPAD_STATE_IDLE:
		
			Value = 0;
					
			if( KeyData > 0 )
 800baf2:	2900      	cmp	r1, #0
 800baf4:	d0e1      	beq.n	800baba <Hw_KeyPad_StateTick+0x16>
			{
				pKey->State   = HW_KEYPAD_STATE_PRESSING;
				pKey->Cnt_Dly = 0;
 800baf6:	2300      	movs	r3, #0
		
			Value = 0;
					
			if( KeyData > 0 )
			{
				pKey->State   = HW_KEYPAD_STATE_PRESSING;
 800baf8:	2201      	movs	r2, #1
 800bafa:	6002      	str	r2, [r0, #0]
				pKey->Cnt_Dly = 0;
 800bafc:	60c3      	str	r3, [r0, #12]
	switch( pKey->State )
	{

		case HW_KEYPAD_STATE_IDLE:
		
			Value = 0;
 800bafe:	4618      	mov	r0, r3
 800bb00:	e7dc      	b.n	800babc <Hw_KeyPad_StateTick+0x18>

		case HW_KEYPAD_STATE_PRESSING:
			
			Value = 0;
			
			pKey->Cnt_Dly++;
 800bb02:	68c3      	ldr	r3, [r0, #12]
			
			if( pKey->Cnt_Dly > pKey->Dly_Pressing )
 800bb04:	69c4      	ldr	r4, [r0, #28]

		case HW_KEYPAD_STATE_PRESSING:
			
			Value = 0;
			
			pKey->Cnt_Dly++;
 800bb06:	3301      	adds	r3, #1
			
			if( pKey->Cnt_Dly > pKey->Dly_Pressing )
 800bb08:	42a3      	cmp	r3, r4

		case HW_KEYPAD_STATE_PRESSING:
			
			Value = 0;
			
			pKey->Cnt_Dly++;
 800bb0a:	60c3      	str	r3, [r0, #12]
			
			if( pKey->Cnt_Dly > pKey->Dly_Pressing )
 800bb0c:	d9d5      	bls.n	800baba <Hw_KeyPad_StateTick+0x16>
			{
				pKey->State        = HW_KEYPAD_STATE_PRESSED;
				pKey->Cnt_Pressed  = 0;
				pKey->Cnt_Released = 0;
				Value              = KeyData;	
				Hw_KeyPad_PressedList[ Hw_KeyPad_PressedCount ] = KeyNum;
 800bb0e:	4c3a      	ldr	r4, [pc, #232]	; (800bbf8 <Hw_KeyPad_StateTick+0x154>)
				Hw_KeyPad_PressedCount++;
				
				if( IS_CLR_BIT( Hw_KeyPad_EventFlag, HW_KEYPAD_EVENT_PRESSED ) )
 800bb10:	4e3a      	ldr	r6, [pc, #232]	; (800bbfc <Hw_KeyPad_StateTick+0x158>)
			{
				pKey->State        = HW_KEYPAD_STATE_PRESSED;
				pKey->Cnt_Pressed  = 0;
				pKey->Cnt_Released = 0;
				Value              = KeyData;	
				Hw_KeyPad_PressedList[ Hw_KeyPad_PressedCount ] = KeyNum;
 800bb12:	6823      	ldr	r3, [r4, #0]
			
			pKey->Cnt_Dly++;
			
			if( pKey->Cnt_Dly > pKey->Dly_Pressing )
			{
				pKey->State        = HW_KEYPAD_STATE_PRESSED;
 800bb14:	f04f 0802 	mov.w	r8, #2
				pKey->Cnt_Pressed  = 0;
				pKey->Cnt_Released = 0;
				Value              = KeyData;	
				Hw_KeyPad_PressedList[ Hw_KeyPad_PressedCount ] = KeyNum;
				Hw_KeyPad_PressedCount++;
 800bb18:	f103 0c01 	add.w	ip, r3, #1
				
				if( IS_CLR_BIT( Hw_KeyPad_EventFlag, HW_KEYPAD_EVENT_PRESSED ) )
 800bb1c:	6837      	ldr	r7, [r6, #0]
			
			pKey->Cnt_Dly++;
			
			if( pKey->Cnt_Dly > pKey->Dly_Pressing )
			{
				pKey->State        = HW_KEYPAD_STATE_PRESSED;
 800bb1e:	f8c0 8000 	str.w	r8, [r0]
				pKey->Cnt_Pressed  = 0;
				pKey->Cnt_Released = 0;
				Value              = KeyData;	
				Hw_KeyPad_PressedList[ Hw_KeyPad_PressedCount ] = KeyNum;
				Hw_KeyPad_PressedCount++;
 800bb22:	f8c4 c000 	str.w	ip, [r4]
			{
				pKey->State        = HW_KEYPAD_STATE_PRESSED;
				pKey->Cnt_Pressed  = 0;
				pKey->Cnt_Released = 0;
				Value              = KeyData;	
				Hw_KeyPad_PressedList[ Hw_KeyPad_PressedCount ] = KeyNum;
 800bb26:	4c37      	ldr	r4, [pc, #220]	; (800bc04 <Hw_KeyPad_StateTick+0x160>)
			pKey->Cnt_Dly++;
			
			if( pKey->Cnt_Dly > pKey->Dly_Pressing )
			{
				pKey->State        = HW_KEYPAD_STATE_PRESSED;
				pKey->Cnt_Pressed  = 0;
 800bb28:	2500      	movs	r5, #0
 800bb2a:	6105      	str	r5, [r0, #16]
				pKey->Cnt_Released = 0;
 800bb2c:	6145      	str	r5, [r0, #20]
				Value              = KeyData;	
				Hw_KeyPad_PressedList[ Hw_KeyPad_PressedCount ] = KeyNum;
 800bb2e:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
				Hw_KeyPad_PressedCount++;
				
				if( IS_CLR_BIT( Hw_KeyPad_EventFlag, HW_KEYPAD_EVENT_PRESSED ) )
 800bb32:	07fb      	lsls	r3, r7, #31
				{
					SET_BIT( Hw_KeyPad_EventFlag, HW_KEYPAD_EVENT_PRESSED );
					Hw_KeyPad_EventList[HW_KEYPAD_EVENT_PRESSED] = KeyNum;
 800bb34:	bf5e      	ittt	pl
 800bb36:	4b32      	ldrpl	r3, [pc, #200]	; (800bc00 <Hw_KeyPad_StateTick+0x15c>)
				Hw_KeyPad_PressedList[ Hw_KeyPad_PressedCount ] = KeyNum;
				Hw_KeyPad_PressedCount++;
				
				if( IS_CLR_BIT( Hw_KeyPad_EventFlag, HW_KEYPAD_EVENT_PRESSED ) )
				{
					SET_BIT( Hw_KeyPad_EventFlag, HW_KEYPAD_EVENT_PRESSED );
 800bb38:	f047 0701 	orrpl.w	r7, r7, #1
					Hw_KeyPad_EventList[HW_KEYPAD_EVENT_PRESSED] = KeyNum;
 800bb3c:	601a      	strpl	r2, [r3, #0]
				}
				
				if( pKey->EventFnct != NULL )
 800bb3e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
				Hw_KeyPad_PressedList[ Hw_KeyPad_PressedCount ] = KeyNum;
				Hw_KeyPad_PressedCount++;
				
				if( IS_CLR_BIT( Hw_KeyPad_EventFlag, HW_KEYPAD_EVENT_PRESSED ) )
				{
					SET_BIT( Hw_KeyPad_EventFlag, HW_KEYPAD_EVENT_PRESSED );
 800bb40:	bf58      	it	pl
 800bb42:	6037      	strpl	r7, [r6, #0]
					Hw_KeyPad_EventList[HW_KEYPAD_EVENT_PRESSED] = KeyNum;
				}
				
				if( pKey->EventFnct != NULL )
 800bb44:	b30b      	cbz	r3, 800bb8a <Hw_KeyPad_StateTick+0xe6>
				{
					(*pKey->EventFnct)(HW_KEYPAD_EVENT_PRESSED);
 800bb46:	2000      	movs	r0, #0
 800bb48:	9101      	str	r1, [sp, #4]
 800bb4a:	4798      	blx	r3
 800bb4c:	9901      	ldr	r1, [sp, #4]
 800bb4e:	4608      	mov	r0, r1
 800bb50:	e7b4      	b.n	800babc <Hw_KeyPad_StateTick+0x18>

		case HW_KEYPAD_STATE_PRESSED:
			
			Value = KeyData;

			pKey->Cnt_Pressed++;
 800bb52:	6903      	ldr	r3, [r0, #16]
 800bb54:	3301      	adds	r3, #1
 800bb56:	6103      	str	r3, [r0, #16]
			
			if( KeyData == 0 )	pKey->Cnt_Released++;
 800bb58:	2900      	cmp	r1, #0
 800bb5a:	d136      	bne.n	800bbca <Hw_KeyPad_StateTick+0x126>
 800bb5c:	6944      	ldr	r4, [r0, #20]
			else			    pKey->Cnt_Released = 0;			

			if( pKey->Cnt_Released > pKey->Dly_Releasing )
 800bb5e:	6a05      	ldr	r5, [r0, #32]
			
			Value = KeyData;

			pKey->Cnt_Pressed++;
			
			if( KeyData == 0 )	pKey->Cnt_Released++;
 800bb60:	3401      	adds	r4, #1
			else			    pKey->Cnt_Released = 0;			

			if( pKey->Cnt_Released > pKey->Dly_Releasing )
 800bb62:	42ac      	cmp	r4, r5
			
			Value = KeyData;

			pKey->Cnt_Pressed++;
			
			if( KeyData == 0 )	pKey->Cnt_Released++;
 800bb64:	6144      	str	r4, [r0, #20]
			else			    pKey->Cnt_Released = 0;			

			if( pKey->Cnt_Released > pKey->Dly_Releasing )
 800bb66:	d932      	bls.n	800bbce <Hw_KeyPad_StateTick+0x12a>
			{
				pKey->State = HW_KEYPAD_STATE_RELEASING;
 800bb68:	2304      	movs	r3, #4
 800bb6a:	6003      	str	r3, [r0, #0]
				Value       = 0;
 800bb6c:	4608      	mov	r0, r1
 800bb6e:	e7a5      	b.n	800babc <Hw_KeyPad_StateTick+0x18>

		case HW_KEYPAD_STATE_REPEAT:

			Value = KeyData;

			pKey->Cnt_Pressed++;
 800bb70:	6903      	ldr	r3, [r0, #16]
 800bb72:	3301      	adds	r3, #1
 800bb74:	6103      	str	r3, [r0, #16]
			
			if( KeyData == 0 )	pKey->Cnt_Released++;
 800bb76:	b951      	cbnz	r1, 800bb8e <Hw_KeyPad_StateTick+0xea>
 800bb78:	6944      	ldr	r4, [r0, #20]
			else			    pKey->Cnt_Released = 0;			

			if( pKey->Cnt_Released > pKey->Dly_Releasing )
 800bb7a:	6a05      	ldr	r5, [r0, #32]

			Value = KeyData;

			pKey->Cnt_Pressed++;
			
			if( KeyData == 0 )	pKey->Cnt_Released++;
 800bb7c:	3401      	adds	r4, #1
			else			    pKey->Cnt_Released = 0;			

			if( pKey->Cnt_Released > pKey->Dly_Releasing )
 800bb7e:	42ac      	cmp	r4, r5

			Value = KeyData;

			pKey->Cnt_Pressed++;
			
			if( KeyData == 0 )	pKey->Cnt_Released++;
 800bb80:	6144      	str	r4, [r0, #20]
			else			    pKey->Cnt_Released = 0;			

			if( pKey->Cnt_Released > pKey->Dly_Releasing )
 800bb82:	d906      	bls.n	800bb92 <Hw_KeyPad_StateTick+0xee>
			{
				pKey->State      = HW_KEYPAD_STATE_RELEASING;
 800bb84:	2304      	movs	r3, #4
 800bb86:	6003      	str	r3, [r0, #0]
				Value            = 0;
				pKey->Cnt_Repeat = 0;
 800bb88:	6181      	str	r1, [r0, #24]
			else			    pKey->Cnt_Released = 0;			

			if( pKey->Cnt_Released > pKey->Dly_Releasing )
			{
				pKey->State      = HW_KEYPAD_STATE_RELEASING;
				Value            = 0;
 800bb8a:	4608      	mov	r0, r1
 800bb8c:	e796      	b.n	800babc <Hw_KeyPad_StateTick+0x18>
			Value = KeyData;

			pKey->Cnt_Pressed++;
			
			if( KeyData == 0 )	pKey->Cnt_Released++;
			else			    pKey->Cnt_Released = 0;			
 800bb8e:	2400      	movs	r4, #0
 800bb90:	6144      	str	r4, [r0, #20]
				Value            = 0;
				pKey->Cnt_Repeat = 0;
			}
			else
			{			
				if( pKey->Cnt_Pressed > pKey->Dly_Repeat )
 800bb92:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800bb94:	42a3      	cmp	r3, r4
 800bb96:	d9f8      	bls.n	800bb8a <Hw_KeyPad_StateTick+0xe6>
				{
					pKey->Cnt_Pressed  = 0;
					pKey->Cnt_Repeat++;

					if( IS_CLR_BIT( Hw_KeyPad_EventFlag, HW_KEYPAD_EVENT_REPEAT ) )
 800bb98:	4b18      	ldr	r3, [pc, #96]	; (800bbfc <Hw_KeyPad_StateTick+0x158>)
			else
			{			
				if( pKey->Cnt_Pressed > pKey->Dly_Repeat )
				{
					pKey->Cnt_Pressed  = 0;
					pKey->Cnt_Repeat++;
 800bb9a:	6985      	ldr	r5, [r0, #24]

					if( IS_CLR_BIT( Hw_KeyPad_EventFlag, HW_KEYPAD_EVENT_REPEAT ) )
 800bb9c:	681c      	ldr	r4, [r3, #0]
			else
			{			
				if( pKey->Cnt_Pressed > pKey->Dly_Repeat )
				{
					pKey->Cnt_Pressed  = 0;
					pKey->Cnt_Repeat++;
 800bb9e:	3501      	adds	r5, #1
			}
			else
			{			
				if( pKey->Cnt_Pressed > pKey->Dly_Repeat )
				{
					pKey->Cnt_Pressed  = 0;
 800bba0:	2600      	movs	r6, #0
					pKey->Cnt_Repeat++;

					if( IS_CLR_BIT( Hw_KeyPad_EventFlag, HW_KEYPAD_EVENT_REPEAT ) )
 800bba2:	f014 0f02 	tst.w	r4, #2
					{
						SET_BIT( Hw_KeyPad_EventFlag, HW_KEYPAD_EVENT_REPEAT );
 800bba6:	bf02      	ittt	eq
 800bba8:	f044 0402 	orreq.w	r4, r4, #2
 800bbac:	601c      	streq	r4, [r3, #0]
						Hw_KeyPad_EventList[HW_KEYPAD_EVENT_REPEAT] = KeyNum;						
 800bbae:	4b14      	ldreq	r3, [pc, #80]	; (800bc00 <Hw_KeyPad_StateTick+0x15c>)
			}
			else
			{			
				if( pKey->Cnt_Pressed > pKey->Dly_Repeat )
				{
					pKey->Cnt_Pressed  = 0;
 800bbb0:	6106      	str	r6, [r0, #16]
					pKey->Cnt_Repeat++;
 800bbb2:	6185      	str	r5, [r0, #24]

					if( IS_CLR_BIT( Hw_KeyPad_EventFlag, HW_KEYPAD_EVENT_REPEAT ) )
					{
						SET_BIT( Hw_KeyPad_EventFlag, HW_KEYPAD_EVENT_REPEAT );
						Hw_KeyPad_EventList[HW_KEYPAD_EVENT_REPEAT] = KeyNum;						
 800bbb4:	bf08      	it	eq
 800bbb6:	605a      	streq	r2, [r3, #4]
					}
					
					if( pKey->EventFnct != NULL )
 800bbb8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d0e5      	beq.n	800bb8a <Hw_KeyPad_StateTick+0xe6>
					{
						(*pKey->EventFnct)(HW_KEYPAD_EVENT_REPEAT);
 800bbbe:	2001      	movs	r0, #1
 800bbc0:	9101      	str	r1, [sp, #4]
 800bbc2:	4798      	blx	r3
 800bbc4:	9901      	ldr	r1, [sp, #4]
 800bbc6:	4608      	mov	r0, r1
 800bbc8:	e778      	b.n	800babc <Hw_KeyPad_StateTick+0x18>
			Value = KeyData;

			pKey->Cnt_Pressed++;
			
			if( KeyData == 0 )	pKey->Cnt_Released++;
			else			    pKey->Cnt_Released = 0;			
 800bbca:	2400      	movs	r4, #0
 800bbcc:	6144      	str	r4, [r0, #20]
				pKey->State = HW_KEYPAD_STATE_RELEASING;
				Value       = 0;
			}
			else
			{			
				if( pKey->Cnt_Pressed > pKey->Dly_Pressed )
 800bbce:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800bbd0:	42a3      	cmp	r3, r4
 800bbd2:	d9da      	bls.n	800bb8a <Hw_KeyPad_StateTick+0xe6>
					pKey->State        = HW_KEYPAD_STATE_REPEAT;
					pKey->Cnt_Pressed  = 0;
					pKey->Cnt_Released = 0;
					pKey->Cnt_Repeat   = 1;
					
					if( IS_CLR_BIT( Hw_KeyPad_EventFlag, HW_KEYPAD_EVENT_REPEAT ) )
 800bbd4:	4c09      	ldr	r4, [pc, #36]	; (800bbfc <Hw_KeyPad_StateTick+0x158>)
			else
			{			
				if( pKey->Cnt_Pressed > pKey->Dly_Pressed )
				{
					pKey->State        = HW_KEYPAD_STATE_REPEAT;
					pKey->Cnt_Pressed  = 0;
 800bbd6:	2300      	movs	r3, #0
					pKey->Cnt_Released = 0;
					pKey->Cnt_Repeat   = 1;
					
					if( IS_CLR_BIT( Hw_KeyPad_EventFlag, HW_KEYPAD_EVENT_REPEAT ) )
 800bbd8:	6825      	ldr	r5, [r4, #0]
			else
			{			
				if( pKey->Cnt_Pressed > pKey->Dly_Pressed )
				{
					pKey->State        = HW_KEYPAD_STATE_REPEAT;
					pKey->Cnt_Pressed  = 0;
 800bbda:	6103      	str	r3, [r0, #16]
					pKey->Cnt_Released = 0;
 800bbdc:	6143      	str	r3, [r0, #20]
					pKey->Cnt_Repeat   = 1;
 800bbde:	2301      	movs	r3, #1
			}
			else
			{			
				if( pKey->Cnt_Pressed > pKey->Dly_Pressed )
				{
					pKey->State        = HW_KEYPAD_STATE_REPEAT;
 800bbe0:	2603      	movs	r6, #3
					pKey->Cnt_Pressed  = 0;
					pKey->Cnt_Released = 0;
					pKey->Cnt_Repeat   = 1;
 800bbe2:	6183      	str	r3, [r0, #24]
					
					if( IS_CLR_BIT( Hw_KeyPad_EventFlag, HW_KEYPAD_EVENT_REPEAT ) )
 800bbe4:	07ab      	lsls	r3, r5, #30
			}
			else
			{			
				if( pKey->Cnt_Pressed > pKey->Dly_Pressed )
				{
					pKey->State        = HW_KEYPAD_STATE_REPEAT;
 800bbe6:	6006      	str	r6, [r0, #0]
					pKey->Cnt_Pressed  = 0;
					pKey->Cnt_Released = 0;
					pKey->Cnt_Repeat   = 1;
					
					if( IS_CLR_BIT( Hw_KeyPad_EventFlag, HW_KEYPAD_EVENT_REPEAT ) )
 800bbe8:	d4e6      	bmi.n	800bbb8 <Hw_KeyPad_StateTick+0x114>
					{
						SET_BIT( Hw_KeyPad_EventFlag, HW_KEYPAD_EVENT_REPEAT );
						Hw_KeyPad_EventList[HW_KEYPAD_EVENT_REPEAT] = KeyNum;
 800bbea:	4b05      	ldr	r3, [pc, #20]	; (800bc00 <Hw_KeyPad_StateTick+0x15c>)
					pKey->Cnt_Released = 0;
					pKey->Cnt_Repeat   = 1;
					
					if( IS_CLR_BIT( Hw_KeyPad_EventFlag, HW_KEYPAD_EVENT_REPEAT ) )
					{
						SET_BIT( Hw_KeyPad_EventFlag, HW_KEYPAD_EVENT_REPEAT );
 800bbec:	f045 0502 	orr.w	r5, r5, #2
 800bbf0:	6025      	str	r5, [r4, #0]
						Hw_KeyPad_EventList[HW_KEYPAD_EVENT_REPEAT] = KeyNum;
 800bbf2:	605a      	str	r2, [r3, #4]
 800bbf4:	e7e0      	b.n	800bbb8 <Hw_KeyPad_StateTick+0x114>
 800bbf6:	bf00      	nop
 800bbf8:	20000ab8 	.word	0x20000ab8
 800bbfc:	20000ab4 	.word	0x20000ab4
 800bc00:	200016ac 	.word	0x200016ac
 800bc04:	20001778 	.word	0x20001778

0800bc08 <Hw_KeyPad_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_KeyPad_Init( void )
{
 800bc08:	b530      	push	{r4, r5, lr}
	u8 i;
	
	Hw_KeyPad_Data = 0;
 800bc0a:	4913      	ldr	r1, [pc, #76]	; (800bc58 <Hw_KeyPad_Init+0x50>)
 800bc0c:	4b13      	ldr	r3, [pc, #76]	; (800bc5c <Hw_KeyPad_Init+0x54>)
 800bc0e:	2200      	movs	r2, #0
 800bc10:	600a      	str	r2, [r1, #0]
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_KeyPad_Init( void )
{
 800bc12:	b083      	sub	sp, #12
     TITLE   : Hw_KeyPad_Init
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_KeyPad_Init( void )
 800bc14:	f103 05c0 	add.w	r5, r3, #192	; 0xc0
		Hw_KeyPad_Log[i].Cnt_Dly       = 0;
		Hw_KeyPad_Log[i].Cnt_Pressed   = 0; 
		Hw_KeyPad_Log[i].Cnt_Released  = 0;
		Hw_KeyPad_Log[i].Cnt_Repeat    = 0;
		
		Hw_KeyPad_Log[i].Dly_Pressing  = 50  /10; // 50ms
 800bc18:	2105      	movs	r1, #5
		Hw_KeyPad_Log[i].Dly_Releasing = 50  /10; // 50ms
		Hw_KeyPad_Log[i].Dly_Pressed   = 1000/10; // 1000ms
 800bc1a:	2464      	movs	r4, #100	; 0x64
		Hw_KeyPad_Log[i].Dly_Repeat    = 500 /10; // 500ms	
 800bc1c:	2032      	movs	r0, #50	; 0x32
	Hw_KeyPad_Data = 0;


	for( i=0; i<HW_KEYPAD_MAX; i++ )
	{	
		Hw_KeyPad_Log[i].State         = HW_KEYPAD_STATE_IDLE;
 800bc1e:	601a      	str	r2, [r3, #0]
		Hw_KeyPad_Log[i].Event		   = 0;
 800bc20:	609a      	str	r2, [r3, #8]
		Hw_KeyPad_Log[i].Value         = 0;
 800bc22:	711a      	strb	r2, [r3, #4]
		Hw_KeyPad_Log[i].Cnt_Dly       = 0;
 800bc24:	60da      	str	r2, [r3, #12]
		Hw_KeyPad_Log[i].Cnt_Pressed   = 0; 
 800bc26:	611a      	str	r2, [r3, #16]
		Hw_KeyPad_Log[i].Cnt_Released  = 0;
 800bc28:	615a      	str	r2, [r3, #20]
		Hw_KeyPad_Log[i].Cnt_Repeat    = 0;
 800bc2a:	619a      	str	r2, [r3, #24]
		
		Hw_KeyPad_Log[i].Dly_Pressing  = 50  /10; // 50ms
 800bc2c:	61d9      	str	r1, [r3, #28]
		Hw_KeyPad_Log[i].Dly_Releasing = 50  /10; // 50ms
 800bc2e:	6219      	str	r1, [r3, #32]
		Hw_KeyPad_Log[i].Dly_Pressed   = 1000/10; // 1000ms
 800bc30:	625c      	str	r4, [r3, #36]	; 0x24
		Hw_KeyPad_Log[i].Dly_Repeat    = 500 /10; // 500ms	
 800bc32:	6298      	str	r0, [r3, #40]	; 0x28
		
		Hw_KeyPad_Log[i].EventFnct     = NULL;				
 800bc34:	62da      	str	r2, [r3, #44]	; 0x2c
 800bc36:	3330      	adds	r3, #48	; 0x30
	u8 i;
	
	Hw_KeyPad_Data = 0;


	for( i=0; i<HW_KEYPAD_MAX; i++ )
 800bc38:	42ab      	cmp	r3, r5
 800bc3a:	d1f0      	bne.n	800bc1e <Hw_KeyPad_Init+0x16>
	}

	
	//-- KeyPad 처리용 타이머 시작
	//
	Hw_Timer_Set  ( HW_TIMER_CH_KEYPAD, 10, LOOP_TIME, Hw_KeyPad_Tick, NULL );
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	2004      	movs	r0, #4
 800bc40:	9300      	str	r3, [sp, #0]
 800bc42:	210a      	movs	r1, #10
 800bc44:	2202      	movs	r2, #2
 800bc46:	4b06      	ldr	r3, [pc, #24]	; (800bc60 <Hw_KeyPad_Init+0x58>)
 800bc48:	4c06      	ldr	r4, [pc, #24]	; (800bc64 <Hw_KeyPad_Init+0x5c>)
 800bc4a:	47a0      	blx	r4
	Hw_Timer_Start( HW_TIMER_CH_KEYPAD );
 800bc4c:	2004      	movs	r0, #4
 800bc4e:	4b06      	ldr	r3, [pc, #24]	; (800bc68 <Hw_KeyPad_Init+0x60>)
 800bc50:	4798      	blx	r3
}
 800bc52:	b003      	add	sp, #12
 800bc54:	bd30      	pop	{r4, r5, pc}
 800bc56:	bf00      	nop
 800bc58:	200016a8 	.word	0x200016a8
 800bc5c:	200016b8 	.word	0x200016b8
 800bc60:	0800bc7d 	.word	0x0800bc7d
 800bc64:	0800b315 	.word	0x0800b315
 800bc68:	0800b335 	.word	0x0800b335

0800bc6c <Hw_KeyPad_Scan>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 Hw_KeyPad_Scan( void )
{
 800bc6c:	b508      	push	{r3, lr}
	u32 ScanData = 0;
	
	
	ScanData = Hw_VBus_ReadData( HW_VBUS_CS_KEY );
 800bc6e:	f64b 13ad 	movw	r3, #47533	; 0xb9ad
 800bc72:	2011      	movs	r0, #17
 800bc74:	f6c0 0300 	movt	r3, #2048	; 0x800
 800bc78:	4798      	blx	r3
		    
	return ScanData;
}
 800bc7a:	bd08      	pop	{r3, pc}

0800bc7c <Hw_KeyPad_Tick>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_KeyPad_Tick( void )
{
 800bc7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	u32 i;
	u32 scan_data = 0;
	u32 key_data  = 0;
	u32 Cnt = 0;
	
	scan_data = Hw_KeyPad_Scan();
 800bc80:	4b12      	ldr	r3, [pc, #72]	; (800bccc <Hw_KeyPad_Tick+0x50>)
 800bc82:	4798      	blx	r3
---------------------------------------------------------------------------*/
void Hw_KeyPad_Tick( void )
{
	u32 i;
	u32 scan_data = 0;
	u32 key_data  = 0;
 800bc84:	2500      	movs	r5, #0
 800bc86:	4f12      	ldr	r7, [pc, #72]	; (800bcd0 <Hw_KeyPad_Tick+0x54>)
 800bc88:	f8df 904c 	ldr.w	r9, [pc, #76]	; 800bcd8 <Hw_KeyPad_Tick+0x5c>
	u32 Cnt = 0;
	
	scan_data = Hw_KeyPad_Scan();
 800bc8c:	4606      	mov	r6, r0
	

	
	for( i=0; i<HW_KEYPAD_MAX; i++ )
 800bc8e:	462c      	mov	r4, r5
	{
		if( scan_data & (1<<i) )  key_data |= Hw_KeyPad_StateTick( &Hw_KeyPad_Log[i], 1, i ) << i; 
 800bc90:	f04f 0801 	mov.w	r8, #1
 800bc94:	fa08 f304 	lsl.w	r3, r8, r4
 800bc98:	eb04 0044 	add.w	r0, r4, r4, lsl #1
		else					  key_data |= Hw_KeyPad_StateTick( &Hw_KeyPad_Log[i], 0, i ) << i; 		
 800bc9c:	4686      	mov	lr, r0
	

	
	for( i=0; i<HW_KEYPAD_MAX; i++ )
	{
		if( scan_data & (1<<i) )  key_data |= Hw_KeyPad_StateTick( &Hw_KeyPad_Log[i], 1, i ) << i; 
 800bc9e:	2101      	movs	r1, #1
 800bca0:	4033      	ands	r3, r6
 800bca2:	b2e2      	uxtb	r2, r4
		else					  key_data |= Hw_KeyPad_StateTick( &Hw_KeyPad_Log[i], 0, i ) << i; 		
 800bca4:	bf04      	itt	eq
 800bca6:	4619      	moveq	r1, r3
 800bca8:	b2e2      	uxtbeq	r2, r4
	

	
	for( i=0; i<HW_KEYPAD_MAX; i++ )
	{
		if( scan_data & (1<<i) )  key_data |= Hw_KeyPad_StateTick( &Hw_KeyPad_Log[i], 1, i ) << i; 
 800bcaa:	eb07 1000 	add.w	r0, r7, r0, lsl #4
		else					  key_data |= Hw_KeyPad_StateTick( &Hw_KeyPad_Log[i], 0, i ) << i; 		
 800bcae:	bf08      	it	eq
 800bcb0:	eb07 100e 	addeq.w	r0, r7, lr, lsl #4
 800bcb4:	47c8      	blx	r9
 800bcb6:	fa00 f004 	lsl.w	r0, r0, r4
	
	scan_data = Hw_KeyPad_Scan();
	

	
	for( i=0; i<HW_KEYPAD_MAX; i++ )
 800bcba:	3401      	adds	r4, #1
 800bcbc:	2c04      	cmp	r4, #4
	{
		if( scan_data & (1<<i) )  key_data |= Hw_KeyPad_StateTick( &Hw_KeyPad_Log[i], 1, i ) << i; 
		else					  key_data |= Hw_KeyPad_StateTick( &Hw_KeyPad_Log[i], 0, i ) << i; 		
 800bcbe:	ea45 0500 	orr.w	r5, r5, r0
	
	scan_data = Hw_KeyPad_Scan();
	

	
	for( i=0; i<HW_KEYPAD_MAX; i++ )
 800bcc2:	d1e7      	bne.n	800bc94 <Hw_KeyPad_Tick+0x18>
		else					  key_data |= Hw_KeyPad_StateTick( &Hw_KeyPad_Log[i], 0, i ) << i; 		
		
		if( key_data & (1<<i) ) Cnt++;
	}
	
	Hw_KeyPad_Data         = key_data;
 800bcc4:	4b03      	ldr	r3, [pc, #12]	; (800bcd4 <Hw_KeyPad_Tick+0x58>)
 800bcc6:	601d      	str	r5, [r3, #0]
 800bcc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bccc:	0800bc6d 	.word	0x0800bc6d
 800bcd0:	200016b8 	.word	0x200016b8
 800bcd4:	200016a8 	.word	0x200016a8
 800bcd8:	0800baa5 	.word	0x0800baa5

0800bcdc <Hw_KeyPad_SetEventFunc>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_KeyPad_SetEventFunc( u8 KeyNum, void (*EventFnct)(u32 Event) )
{
	if( KeyNum >= HW_KEYPAD_MAX ) return;
 800bcdc:	2803      	cmp	r0, #3
	
	Hw_KeyPad_Log[KeyNum].EventFnct = EventFnct;
 800bcde:	bf9f      	itttt	ls
 800bce0:	4b03      	ldrls	r3, [pc, #12]	; (800bcf0 <Hw_KeyPad_SetEventFunc+0x14>)
 800bce2:	eb00 0040 	addls.w	r0, r0, r0, lsl #1
 800bce6:	eb03 1000 	addls.w	r0, r3, r0, lsl #4
 800bcea:	62c1      	strls	r1, [r0, #44]	; 0x2c
 800bcec:	4770      	bx	lr
 800bcee:	bf00      	nop
 800bcf0:	200016b8 	.word	0x200016b8

0800bcf4 <Hw_KeyPad_GetRepeatCnt>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 Hw_KeyPad_GetRepeatCnt( u8 KeyNum )
{
	if( KeyNum >= HW_KEYPAD_MAX ) return 0;
 800bcf4:	2803      	cmp	r0, #3
	
	
	return Hw_KeyPad_Log[ KeyNum ].Cnt_Repeat;
 800bcf6:	bf9f      	itttt	ls
 800bcf8:	4b04      	ldrls	r3, [pc, #16]	; (800bd0c <Hw_KeyPad_GetRepeatCnt+0x18>)
 800bcfa:	eb00 0040 	addls.w	r0, r0, r0, lsl #1
 800bcfe:	eb03 1000 	addls.w	r0, r3, r0, lsl #4
 800bd02:	6980      	ldrls	r0, [r0, #24]
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 Hw_KeyPad_GetRepeatCnt( u8 KeyNum )
{
	if( KeyNum >= HW_KEYPAD_MAX ) return 0;
 800bd04:	bf88      	it	hi
 800bd06:	2000      	movhi	r0, #0
	
	
	return Hw_KeyPad_Log[ KeyNum ].Cnt_Repeat;
}
 800bd08:	4770      	bx	lr
 800bd0a:	bf00      	nop
 800bd0c:	200016b8 	.word	0x200016b8

0800bd10 <Hw_KeyPad_GetPressedCnt>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 Hw_KeyPad_GetPressedCnt( void )
{
	return Hw_KeyPad_PressedCount;
 800bd10:	f640 23b8 	movw	r3, #2744	; 0xab8
 800bd14:	f2c2 0300 	movt	r3, #8192	; 0x2000
}
 800bd18:	6818      	ldr	r0, [r3, #0]
 800bd1a:	4770      	bx	lr

0800bd1c <Hw_KeyPad_WaitForEvent>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 Hw_KeyPad_WaitForEvent( u32 TimeOut )
{
 800bd1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u32 TimeStart;
	u32 TimeEnd;
	u32 Ret = 0;
	
	TimeStart = Hw_Timer_Get_CountValue();
 800bd20:	4e0a      	ldr	r6, [pc, #40]	; (800bd4c <Hw_KeyPad_WaitForEvent+0x30>)
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 Hw_KeyPad_WaitForEvent( u32 TimeOut )
{
 800bd22:	4605      	mov	r5, r0
	u32 TimeStart;
	u32 TimeEnd;
	u32 Ret = 0;
	
	TimeStart = Hw_Timer_Get_CountValue();
 800bd24:	47b0      	blx	r6

	Hw_KeyPad_EventFlag = 0;
 800bd26:	4f0a      	ldr	r7, [pc, #40]	; (800bd50 <Hw_KeyPad_WaitForEvent+0x34>)
 800bd28:	2400      	movs	r4, #0
{
	u32 TimeStart;
	u32 TimeEnd;
	u32 Ret = 0;
	
	TimeStart = Hw_Timer_Get_CountValue();
 800bd2a:	4680      	mov	r8, r0

	Hw_KeyPad_EventFlag = 0;
 800bd2c:	603c      	str	r4, [r7, #0]
	
	while(1)
	{	
		if( Hw_KeyPad_EventFlag > 0 )
 800bd2e:	b94c      	cbnz	r4, 800bd44 <Hw_KeyPad_WaitForEvent+0x28>
			break;
		}
	
		//-- 타임 아웃 처리
		//
		if( TimeOut > 0 )
 800bd30:	b905      	cbnz	r5, 800bd34 <Hw_KeyPad_WaitForEvent+0x18>
 800bd32:	e7fe      	b.n	800bd32 <Hw_KeyPad_WaitForEvent+0x16>
		{
			TimeEnd = Hw_Timer_Get_CountValue();
 800bd34:	47b0      	blx	r6
			
			if( (TimeEnd - TimeStart) > TimeOut )
 800bd36:	ebc8 0000 	rsb	r0, r8, r0
 800bd3a:	4285      	cmp	r5, r0
 800bd3c:	d302      	bcc.n	800bd44 <Hw_KeyPad_WaitForEvent+0x28>
 800bd3e:	683c      	ldr	r4, [r7, #0]

	Hw_KeyPad_EventFlag = 0;
	
	while(1)
	{	
		if( Hw_KeyPad_EventFlag > 0 )
 800bd40:	2c00      	cmp	r4, #0
 800bd42:	d0f5      	beq.n	800bd30 <Hw_KeyPad_WaitForEvent+0x14>
			}
		}
	}

	return Ret;
}
 800bd44:	4620      	mov	r0, r4
 800bd46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd4a:	bf00      	nop
 800bd4c:	0800b35d 	.word	0x0800b35d
 800bd50:	20000ab4 	.word	0x20000ab4

0800bd54 <Hw_KeyPad_GetEventKeyData>:
u32 Hw_KeyPad_GetEventKeyData( u32 EventFlag )
{
	u32 EventKey = 0;
	u32 Ret = 0;
	
	EventKey = Hw_KeyPad_EventList[EventFlag];
 800bd54:	f241 63ac 	movw	r3, #5804	; 0x16ac
 800bd58:	f2c2 0300 	movt	r3, #8192	; 0x2000
	Ret      = (1<<EventKey);
 800bd5c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800bd60:	2001      	movs	r0, #1
	
	return Ret;
}
 800bd62:	fa00 f003 	lsl.w	r0, r0, r3
 800bd66:	4770      	bx	lr

0800bd68 <Hw_KeyPad_GetEventKeyNum>:
u32 Hw_KeyPad_GetEventKeyNum( u32 EventFlag )
{
	u32 EventKey = 0;
	u32 Ret = 0;
	
	EventKey = Hw_KeyPad_EventList[EventFlag];
 800bd68:	f241 63ac 	movw	r3, #5804	; 0x16ac
 800bd6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
	Ret      = EventKey;
	
	return Ret;
 800bd70:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800bd74:	4770      	bx	lr
 800bd76:	bf00      	nop

0800bd78 <Hw_7Seg_Tick>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_7Seg_Tick( void )
{
 800bd78:	b538      	push	{r3, r4, r5, lr}
	static u8 Column_Cnt = 0;
	
	
	//-- 7Seg 데이터 출력
	//
	Hw_VBus_WriteData( HW_VBUS_CS_FND_0, Hw_7Seg_Data[Column_Cnt] );
 800bd7a:	4c0b      	ldr	r4, [pc, #44]	; (800bda8 <Hw_7Seg_Tick+0x30>)
 800bd7c:	4a0b      	ldr	r2, [pc, #44]	; (800bdac <Hw_7Seg_Tick+0x34>)
 800bd7e:	7823      	ldrb	r3, [r4, #0]
 800bd80:	200a      	movs	r0, #10
 800bd82:	5cd1      	ldrb	r1, [r2, r3]
 800bd84:	4d0a      	ldr	r5, [pc, #40]	; (800bdb0 <Hw_7Seg_Tick+0x38>)
 800bd86:	47a8      	blx	r5
	
	
	//-- 7Seg 4개를 번갈아가며 On 시켜준다.
	//
	Hw_VBus_WriteData( HW_VBUS_CS_FND_2, ~(1<<Column_Cnt) );
 800bd88:	7823      	ldrb	r3, [r4, #0]
 800bd8a:	2101      	movs	r1, #1
 800bd8c:	fa01 f103 	lsl.w	r1, r1, r3
 800bd90:	43c9      	mvns	r1, r1
 800bd92:	200c      	movs	r0, #12
 800bd94:	b2c9      	uxtb	r1, r1
 800bd96:	47a8      	blx	r5
	
	Column_Cnt++;
 800bd98:	7823      	ldrb	r3, [r4, #0]
 800bd9a:	3301      	adds	r3, #1
 800bd9c:	b2db      	uxtb	r3, r3
	
	if( Column_Cnt>=HW_7SEG_MAX )
 800bd9e:	2b03      	cmp	r3, #3
	{
		Column_Cnt = 0;
 800bda0:	bf88      	it	hi
 800bda2:	2300      	movhi	r3, #0
 800bda4:	7023      	strb	r3, [r4, #0]
 800bda6:	bd38      	pop	{r3, r4, r5, pc}
 800bda8:	20000abc 	.word	0x20000abc
 800bdac:	20001788 	.word	0x20001788
 800bdb0:	0800b955 	.word	0x0800b955

0800bdb4 <Hw_7Seg_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_7Seg_Init( void )
{
 800bdb4:	b530      	push	{r4, r5, lr}
	
	//-- 7Seg 값 초기화
	//
	for( i=0; i<HW_7SEG_MAX; i++ )
	{
		Hw_7Seg_Data[i] = 0x00;
 800bdb6:	f241 7388 	movw	r3, #6024	; 0x1788
 800bdba:	2400      	movs	r4, #0
	}
	
	
	Hw_VBus_WriteData( HW_VBUS_CS_FND_0, 0x00 );
 800bdbc:	f64b 1555 	movw	r5, #47445	; 0xb955
	
	//-- 7Seg 값 초기화
	//
	for( i=0; i<HW_7SEG_MAX; i++ )
	{
		Hw_7Seg_Data[i] = 0x00;
 800bdc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_7Seg_Init( void )
{
 800bdc4:	b083      	sub	sp, #12
	{
		Hw_7Seg_Data[i] = 0x00;
	}
	
	
	Hw_VBus_WriteData( HW_VBUS_CS_FND_0, 0x00 );
 800bdc6:	200a      	movs	r0, #10
 800bdc8:	4621      	mov	r1, r4
 800bdca:	f6c0 0500 	movt	r5, #2048	; 0x800
	
	//-- 7Seg 값 초기화
	//
	for( i=0; i<HW_7SEG_MAX; i++ )
	{
		Hw_7Seg_Data[i] = 0x00;
 800bdce:	701c      	strb	r4, [r3, #0]
 800bdd0:	705c      	strb	r4, [r3, #1]
 800bdd2:	709c      	strb	r4, [r3, #2]
 800bdd4:	70dc      	strb	r4, [r3, #3]
	}
	
	
	Hw_VBus_WriteData( HW_VBUS_CS_FND_0, 0x00 );
 800bdd6:	47a8      	blx	r5
	Hw_VBus_WriteData( HW_VBUS_CS_FND_2, 0x0F );
 800bdd8:	200c      	movs	r0, #12
 800bdda:	210f      	movs	r1, #15
 800bddc:	47a8      	blx	r5
			
	
	//-- 7Seg 처리용 타이머 시작(50Hz x 4 = 200Hz)
	//
	Hw_Timer_Set  ( HW_TIMER_CH_7SEG, 1000/200, LOOP_TIME, Hw_7Seg_Tick, NULL );
 800bdde:	2005      	movs	r0, #5
 800bde0:	f24b 3515 	movw	r5, #45845	; 0xb315
 800bde4:	f64b 5379 	movw	r3, #48505	; 0xbd79
 800bde8:	4601      	mov	r1, r0
 800bdea:	9400      	str	r4, [sp, #0]
 800bdec:	2202      	movs	r2, #2
 800bdee:	f6c0 0300 	movt	r3, #2048	; 0x800
 800bdf2:	f6c0 0500 	movt	r5, #2048	; 0x800
 800bdf6:	47a8      	blx	r5
	Hw_Timer_Start( HW_TIMER_CH_7SEG );
 800bdf8:	f24b 3335 	movw	r3, #45877	; 0xb335
 800bdfc:	2005      	movs	r0, #5
 800bdfe:	f6c0 0300 	movt	r3, #2048	; 0x800
 800be02:	4798      	blx	r3
}
 800be04:	b003      	add	sp, #12
 800be06:	bd30      	pop	{r4, r5, pc}

0800be08 <Hw_7Seg_SetNumber>:
---------------------------------------------------------------------------*/
void Hw_7Seg_SetNumber( u8 Index, u8 Number  )
{
	u8 SegOut;
	
	if( Index >= HW_7SEG_MAX ) return;
 800be08:	2803      	cmp	r0, #3
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_7Seg_SetNumber( u8 Index, u8 Number  )
{
 800be0a:	b410      	push	{r4}
	u8 SegOut;
	
	if( Index >= HW_7SEG_MAX ) return;
 800be0c:	d82d      	bhi.n	800be6a <Hw_7Seg_SetNumber+0x62>


	if( Number == ' ' )
 800be0e:	2920      	cmp	r1, #32
 800be10:	d02d      	beq.n	800be6e <Hw_7Seg_SetNumber+0x66>
				
		Hw_7Seg_Data[ Index ] = SegOut;
	}


	if( Number == '-' )
 800be12:	292d      	cmp	r1, #45	; 0x2d
 800be14:	d031      	beq.n	800be7a <Hw_7Seg_SetNumber+0x72>
				
		Hw_7Seg_Data[ Index ] = SegOut;
	}

	
	if( Number >= '0' && Number <= '9' )
 800be16:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800be1a:	2b09      	cmp	r3, #9
 800be1c:	d809      	bhi.n	800be32 <Hw_7Seg_SetNumber+0x2a>
	{
		SegOut  = Hw_7Seg_Data[ Index ] & (1<<7);	// Dot 데이터는 건드리지 않는다.
 800be1e:	4b1b      	ldr	r3, [pc, #108]	; (800be8c <Hw_7Seg_SetNumber+0x84>)
		SegOut |= Hw_7Seg_DotTbl[ Number - '0' ];
 800be20:	4c1b      	ldr	r4, [pc, #108]	; (800be90 <Hw_7Seg_SetNumber+0x88>)
	}

	
	if( Number >= '0' && Number <= '9' )
	{
		SegOut  = Hw_7Seg_Data[ Index ] & (1<<7);	// Dot 데이터는 건드리지 않는다.
 800be22:	5c1a      	ldrb	r2, [r3, r0]
		SegOut |= Hw_7Seg_DotTbl[ Number - '0' ];
 800be24:	1864      	adds	r4, r4, r1
 800be26:	f814 4c30 	ldrb.w	r4, [r4, #-48]
	}

	
	if( Number >= '0' && Number <= '9' )
	{
		SegOut  = Hw_7Seg_Data[ Index ] & (1<<7);	// Dot 데이터는 건드리지 않는다.
 800be2a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
		SegOut |= Hw_7Seg_DotTbl[ Number - '0' ];
 800be2e:	4322      	orrs	r2, r4
		
		Hw_7Seg_Data[ Index ] = SegOut;
 800be30:	541a      	strb	r2, [r3, r0]
	}	

	
	if( Number >= 'A' && Number <= 'F' )
 800be32:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
 800be36:	2b05      	cmp	r3, #5
 800be38:	d809      	bhi.n	800be4e <Hw_7Seg_SetNumber+0x46>
	{
		SegOut  = Hw_7Seg_Data[ Index ] & (1<<7);	// Dot 데이터는 건드리지 않는다.
 800be3a:	4b14      	ldr	r3, [pc, #80]	; (800be8c <Hw_7Seg_SetNumber+0x84>)
		SegOut |= Hw_7Seg_DotTbl[ Number - 'A' + 10 ];
 800be3c:	4c14      	ldr	r4, [pc, #80]	; (800be90 <Hw_7Seg_SetNumber+0x88>)
	}	

	
	if( Number >= 'A' && Number <= 'F' )
	{
		SegOut  = Hw_7Seg_Data[ Index ] & (1<<7);	// Dot 데이터는 건드리지 않는다.
 800be3e:	5c1a      	ldrb	r2, [r3, r0]
		SegOut |= Hw_7Seg_DotTbl[ Number - 'A' + 10 ];
 800be40:	1864      	adds	r4, r4, r1
 800be42:	f814 4c37 	ldrb.w	r4, [r4, #-55]
	}	

	
	if( Number >= 'A' && Number <= 'F' )
	{
		SegOut  = Hw_7Seg_Data[ Index ] & (1<<7);	// Dot 데이터는 건드리지 않는다.
 800be46:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
		SegOut |= Hw_7Seg_DotTbl[ Number - 'A' + 10 ];
 800be4a:	4322      	orrs	r2, r4
		
		Hw_7Seg_Data[ Index ] = SegOut;
 800be4c:	541a      	strb	r2, [r3, r0]
	}	


	if( Number >= 'a' && Number <= 'f' )
 800be4e:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
 800be52:	2b05      	cmp	r3, #5
 800be54:	d809      	bhi.n	800be6a <Hw_7Seg_SetNumber+0x62>
	{
		SegOut  = Hw_7Seg_Data[ Index ] & (1<<7);	// Dot 데이터는 건드리지 않는다.
 800be56:	4b0d      	ldr	r3, [pc, #52]	; (800be8c <Hw_7Seg_SetNumber+0x84>)
		SegOut |= Hw_7Seg_DotTbl[ Number - 'a' + 10 ];
 800be58:	4c0d      	ldr	r4, [pc, #52]	; (800be90 <Hw_7Seg_SetNumber+0x88>)
	}	


	if( Number >= 'a' && Number <= 'f' )
	{
		SegOut  = Hw_7Seg_Data[ Index ] & (1<<7);	// Dot 데이터는 건드리지 않는다.
 800be5a:	5c1a      	ldrb	r2, [r3, r0]
		SegOut |= Hw_7Seg_DotTbl[ Number - 'a' + 10 ];
 800be5c:	1861      	adds	r1, r4, r1
 800be5e:	f811 1c57 	ldrb.w	r1, [r1, #-87]
	}	


	if( Number >= 'a' && Number <= 'f' )
	{
		SegOut  = Hw_7Seg_Data[ Index ] & (1<<7);	// Dot 데이터는 건드리지 않는다.
 800be62:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
		SegOut |= Hw_7Seg_DotTbl[ Number - 'a' + 10 ];
 800be66:	430a      	orrs	r2, r1
		
		Hw_7Seg_Data[ Index ] = SegOut;
 800be68:	541a      	strb	r2, [r3, r0]
	}	
	
}
 800be6a:	bc10      	pop	{r4}
 800be6c:	4770      	bx	lr
	if( Number == ' ' )
	{
		SegOut  = Hw_7Seg_Data[ Index ] & (1<<7);	// Dot 데이터는 건드리지 않는다.
		SegOut |= 0x00;
				
		Hw_7Seg_Data[ Index ] = SegOut;
 800be6e:	4b07      	ldr	r3, [pc, #28]	; (800be8c <Hw_7Seg_SetNumber+0x84>)
	if( Index >= HW_7SEG_MAX ) return;


	if( Number == ' ' )
	{
		SegOut  = Hw_7Seg_Data[ Index ] & (1<<7);	// Dot 데이터는 건드리지 않는다.
 800be70:	5c1a      	ldrb	r2, [r3, r0]
 800be72:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
		SegOut |= 0x00;
				
		Hw_7Seg_Data[ Index ] = SegOut;
 800be76:	541a      	strb	r2, [r3, r0]
 800be78:	e7db      	b.n	800be32 <Hw_7Seg_SetNumber+0x2a>
	}


	if( Number == '-' )
	{
		SegOut  = Hw_7Seg_Data[ Index ] & (1<<7);	// Dot 데이터는 건드리지 않는다.
 800be7a:	4b04      	ldr	r3, [pc, #16]	; (800be8c <Hw_7Seg_SetNumber+0x84>)
 800be7c:	5c1a      	ldrb	r2, [r3, r0]
 800be7e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
		SegOut |= (1<<6);
 800be82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
				
		Hw_7Seg_Data[ Index ] = SegOut;
 800be86:	541a      	strb	r2, [r3, r0]
 800be88:	e7d3      	b.n	800be32 <Hw_7Seg_SetNumber+0x2a>
 800be8a:	bf00      	nop
 800be8c:	20001788 	.word	0x20001788
 800be90:	20000004 	.word	0x20000004

0800be94 <Hw_7Seg_Printf>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_7Seg_Printf( u8 Index, char *format, ... )
{
 800be94:	b40e      	push	{r1, r2, r3}
 800be96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be9a:	b0b3      	sub	sp, #204	; 0xcc
		
	Lb_va_list ap;

	Lb_va_start( ap, format );
		
	Lb_vsprintf(Str, format, ap);	
 800be9c:	aa39      	add	r2, sp, #228	; 0xe4
 800be9e:	f852 1b04 	ldr.w	r1, [r2], #4
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_7Seg_Printf( u8 Index, char *format, ... )
{
 800bea2:	4605      	mov	r5, r0
		
	Lb_va_list ap;

	Lb_va_start( ap, format );
		
	Lb_vsprintf(Str, format, ap);	
 800bea4:	4b15      	ldr	r3, [pc, #84]	; (800befc <Hw_7Seg_Printf+0x68>)
 800bea6:	4668      	mov	r0, sp
 800bea8:	4798      	blx	r3
	
	StrSize = 0;
	
	for( i=0; i<100; i++ )
 800beaa:	2400      	movs	r4, #0
 800beac:	e002      	b.n	800beb4 <Hw_7Seg_Printf+0x20>
 800beae:	3401      	adds	r4, #1
 800beb0:	2c64      	cmp	r4, #100	; 0x64
 800beb2:	d01d      	beq.n	800bef0 <Hw_7Seg_Printf+0x5c>
	{
		if( Str[i] == 0 ) break;
 800beb4:	f81d 3004 	ldrb.w	r3, [sp, r4]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d1f8      	bne.n	800beae <Hw_7Seg_Printf+0x1a>
	}
	
	StrSize = i;
	
	if( StrSize > 0 && StrSize < 100 )
 800bebc:	1e62      	subs	r2, r4, #1
 800bebe:	2a62      	cmp	r2, #98	; 0x62
 800bec0:	d816      	bhi.n	800bef0 <Hw_7Seg_Printf+0x5c>
	{
		for( i=Index; i<HW_7SEG_MAX; i++)
 800bec2:	2d03      	cmp	r5, #3
 800bec4:	d814      	bhi.n	800bef0 <Hw_7Seg_Printf+0x5c>
     TITLE   : Hw_7Seg_Print
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_7Seg_Printf( u8 Index, char *format, ... )
 800bec6:	eba4 0845 	sub.w	r8, r4, r5, lsl #1
 800beca:	aa00      	add	r2, sp, #0
 800becc:	4f0c      	ldr	r7, [pc, #48]	; (800bf00 <Hw_7Seg_Printf+0x6c>)
 800bece:	4490      	add	r8, r2
 800bed0:	461e      	mov	r6, r3
	
	if( StrSize > 0 && StrSize < 100 )
	{
		for( i=Index; i<HW_7SEG_MAX; i++)
		{
			if( i < StrSize ) 
 800bed2:	42ac      	cmp	r4, r5
     TITLE   : Hw_7Seg_Print
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_7Seg_Printf( u8 Index, char *format, ... )
 800bed4:	bf88      	it	hi
 800bed6:	eb08 0306 	addhi.w	r3, r8, r6
		for( i=Index; i<HW_7SEG_MAX; i++)
		{
			if( i < StrSize ) 
				Hw_7Seg_SetNumber( i, Str[StrSize-i-Index-1] ); 
			else
				Hw_7Seg_SetNumber( i, ' ' ); 
 800beda:	b2e8      	uxtb	r0, r5
 800bedc:	f04f 0120 	mov.w	r1, #32
	if( StrSize > 0 && StrSize < 100 )
	{
		for( i=Index; i<HW_7SEG_MAX; i++)
		{
			if( i < StrSize ) 
				Hw_7Seg_SetNumber( i, Str[StrSize-i-Index-1] ); 
 800bee0:	bf88      	it	hi
 800bee2:	f813 1c01 	ldrbhi.w	r1, [r3, #-1]
	
	StrSize = i;
	
	if( StrSize > 0 && StrSize < 100 )
	{
		for( i=Index; i<HW_7SEG_MAX; i++)
 800bee6:	3501      	adds	r5, #1
		{
			if( i < StrSize ) 
				Hw_7Seg_SetNumber( i, Str[StrSize-i-Index-1] ); 
			else
				Hw_7Seg_SetNumber( i, ' ' ); 
 800bee8:	47b8      	blx	r7
 800beea:	3e01      	subs	r6, #1
	
	StrSize = i;
	
	if( StrSize > 0 && StrSize < 100 )
	{
		for( i=Index; i<HW_7SEG_MAX; i++)
 800beec:	2d04      	cmp	r5, #4
 800beee:	d1f0      	bne.n	800bed2 <Hw_7Seg_Printf+0x3e>
		}
	} 
	
	Lb_va_end(ap);		
	
 800bef0:	b033      	add	sp, #204	; 0xcc
 800bef2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bef6:	b003      	add	sp, #12
 800bef8:	4770      	bx	lr
 800befa:	bf00      	nop
 800befc:	0800abc1 	.word	0x0800abc1
 800bf00:	0800be09 	.word	0x0800be09

0800bf04 <Hw_CLcd_WriteCmd>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_CLcd_WriteCmd( u8 CmdData )
{
 800bf04:	b538      	push	{r3, r4, r5, lr}
	u16 Ret = ERR_NONE;
	
	HW_CLCD_RS_CLR();
 800bf06:	f64b 244d 	movw	r4, #47693	; 0xba4d
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_CLcd_WriteCmd( u8 CmdData )
{
 800bf0a:	4605      	mov	r5, r0
	u16 Ret = ERR_NONE;
	
	HW_CLCD_RS_CLR();
 800bf0c:	2101      	movs	r1, #1
 800bf0e:	2014      	movs	r0, #20
 800bf10:	f6c0 0400 	movt	r4, #2048	; 0x800
 800bf14:	47a0      	blx	r4
	HW_CLCD_EN_SET();
 800bf16:	f64b 2321 	movw	r3, #47649	; 0xba21
 800bf1a:	2014      	movs	r0, #20
 800bf1c:	2100      	movs	r1, #0
 800bf1e:	f6c0 0300 	movt	r3, #2048	; 0x800
 800bf22:	4798      	blx	r3
	
	HW_CLCD_BUS_WRITE( CmdData );
 800bf24:	f64b 1355 	movw	r3, #47445	; 0xb955
 800bf28:	2010      	movs	r0, #16
 800bf2a:	4629      	mov	r1, r5
 800bf2c:	f6c0 0300 	movt	r3, #2048	; 0x800
 800bf30:	4798      	blx	r3
	
	HW_CLCD_EN_CLR();
 800bf32:	2014      	movs	r0, #20
 800bf34:	2100      	movs	r1, #0
 800bf36:	47a0      	blx	r4
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_CLcd_Delay(u32 DlyData)
{
	Hw_Wait_Usec(DlyData);
 800bf38:	f64a 632d 	movw	r3, #44589	; 0xae2d
 800bf3c:	2032      	movs	r0, #50	; 0x32
 800bf3e:	f6c0 0300 	movt	r3, #2048	; 0x800
 800bf42:	4798      	blx	r3
	HW_CLCD_EN_CLR();
	
	Hw_CLcd_Delay(50);
	
	return Ret;
}
 800bf44:	2000      	movs	r0, #0
 800bf46:	bd38      	pop	{r3, r4, r5, pc}

0800bf48 <Hw_CLcd_WriteByte>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_CLcd_WriteByte( u8 ByteData )
{
 800bf48:	b538      	push	{r3, r4, r5, lr}
	u16 Ret = ERR_NONE;

	HW_CLCD_RS_SET();
 800bf4a:	f64b 2421 	movw	r4, #47649	; 0xba21
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_CLcd_WriteByte( u8 ByteData )
{
 800bf4e:	4605      	mov	r5, r0
	u16 Ret = ERR_NONE;

	HW_CLCD_RS_SET();
 800bf50:	2101      	movs	r1, #1
 800bf52:	2014      	movs	r0, #20
 800bf54:	f6c0 0400 	movt	r4, #2048	; 0x800
 800bf58:	47a0      	blx	r4
	HW_CLCD_EN_SET();
 800bf5a:	2014      	movs	r0, #20
 800bf5c:	2100      	movs	r1, #0
 800bf5e:	47a0      	blx	r4
	
	HW_CLCD_BUS_WRITE( ByteData );
 800bf60:	f64b 1355 	movw	r3, #47445	; 0xb955
 800bf64:	2010      	movs	r0, #16
 800bf66:	4629      	mov	r1, r5
 800bf68:	f6c0 0300 	movt	r3, #2048	; 0x800
 800bf6c:	4798      	blx	r3
	
	HW_CLCD_EN_CLR();
 800bf6e:	f64b 234d 	movw	r3, #47693	; 0xba4d
 800bf72:	2014      	movs	r0, #20
 800bf74:	2100      	movs	r1, #0
 800bf76:	f6c0 0300 	movt	r3, #2048	; 0x800
 800bf7a:	4798      	blx	r3
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_CLcd_Delay(u32 DlyData)
{
	Hw_Wait_Usec(DlyData);
 800bf7c:	f64a 632d 	movw	r3, #44589	; 0xae2d
 800bf80:	2032      	movs	r0, #50	; 0x32
 800bf82:	f6c0 0300 	movt	r3, #2048	; 0x800
 800bf86:	4798      	blx	r3
	HW_CLCD_EN_CLR();
	
	Hw_CLcd_Delay(50);
			
	return Ret;
}
 800bf88:	2000      	movs	r0, #0
 800bf8a:	bd38      	pop	{r3, r4, r5, pc}

0800bf8c <Hw_CLcd_Goto>:
u16 Hw_CLcd_Goto( u8 x, u8 y )
{
	u16 Ret = ERR_NONE;
	u8  Cmd;
	
	Cmd = 0x80 | 0x40*y | x;
 800bf8c:	f060 007f 	orn	r0, r0, #127	; 0x7f
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_CLcd_Goto( u8 x, u8 y )
{
 800bf90:	b508      	push	{r3, lr}
	u16 Ret = ERR_NONE;
	u8  Cmd;
	
	Cmd = 0x80 | 0x40*y | x;
 800bf92:	ea40 1081 	orr.w	r0, r0, r1, lsl #6
	
	Hw_CLcd_WriteCmd( Cmd );
 800bf96:	f64b 7305 	movw	r3, #48901	; 0xbf05
 800bf9a:	f6c0 0300 	movt	r3, #2048	; 0x800
 800bf9e:	b2c0      	uxtb	r0, r0
 800bfa0:	4798      	blx	r3

	return Ret;
}
 800bfa2:	2000      	movs	r0, #0
 800bfa4:	bd08      	pop	{r3, pc}
 800bfa6:	bf00      	nop

0800bfa8 <Hw_CLcd_Clear>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_CLcd_Clear( void )
{
 800bfa8:	b508      	push	{r3, lr}
	u16 Ret = ERR_NONE;
	
	Hw_CLcd_WriteCmd(0x01);
 800bfaa:	f64b 7305 	movw	r3, #48901	; 0xbf05
 800bfae:	2001      	movs	r0, #1
 800bfb0:	f6c0 0300 	movt	r3, #2048	; 0x800
 800bfb4:	4798      	blx	r3
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_CLcd_Delay(u32 DlyData)
{
	Hw_Wait_Usec(DlyData);
 800bfb6:	f64a 632d 	movw	r3, #44589	; 0xae2d
 800bfba:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800bfbe:	f6c0 0300 	movt	r3, #2048	; 0x800
 800bfc2:	4798      	blx	r3
	
	Hw_CLcd_WriteCmd(0x01);
	Hw_CLcd_Delay(2000);
	
	return Ret;
}
 800bfc4:	2000      	movs	r0, #0
 800bfc6:	bd08      	pop	{r3, pc}

0800bfc8 <Hw_CLcd_WriteStr>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_CLcd_WriteStr( char *pStr )
{
 800bfc8:	b570      	push	{r4, r5, r6, lr}
	u16 Ret = ERR_NONE;
		
	while( *pStr != '\0' )
 800bfca:	7803      	ldrb	r3, [r0, #0]
 800bfcc:	b163      	cbz	r3, 800bfe8 <Hw_CLcd_WriteStr+0x20>
 800bfce:	4e07      	ldr	r6, [pc, #28]	; (800bfec <Hw_CLcd_WriteStr+0x24>)
 800bfd0:	4605      	mov	r5, r0
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_CLcd_WriteStr( char *pStr )
{
	u16 Ret = ERR_NONE;
 800bfd2:	2400      	movs	r4, #0
---------------------------------------------------------------------------*/
u16 Hw_CLcd_WriteChar( u8 CharData )
{
	u16 Ret = ERR_NONE;
	
	Ret = Hw_CLcd_WriteByte(CharData);
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	47b0      	blx	r6
---------------------------------------------------------------------------*/
u16 Hw_CLcd_WriteStr( char *pStr )
{
	u16 Ret = ERR_NONE;
		
	while( *pStr != '\0' )
 800bfd8:	f815 3f01 	ldrb.w	r3, [r5, #1]!
	{
		Ret |= Hw_CLcd_WriteChar( *pStr );
 800bfdc:	4320      	orrs	r0, r4
 800bfde:	b284      	uxth	r4, r0
---------------------------------------------------------------------------*/
u16 Hw_CLcd_WriteStr( char *pStr )
{
	u16 Ret = ERR_NONE;
		
	while( *pStr != '\0' )
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d1f7      	bne.n	800bfd4 <Hw_CLcd_WriteStr+0xc>
		Ret |= Hw_CLcd_WriteChar( *pStr );
		pStr++;
	}
		
	return Ret;
}
 800bfe4:	4620      	mov	r0, r4
 800bfe6:	bd70      	pop	{r4, r5, r6, pc}
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_CLcd_WriteStr( char *pStr )
{
	u16 Ret = ERR_NONE;
 800bfe8:	461c      	mov	r4, r3
 800bfea:	e7fb      	b.n	800bfe4 <Hw_CLcd_WriteStr+0x1c>
 800bfec:	0800bf49 	.word	0x0800bf49

0800bff0 <Hw_CLcd_Printf>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_CLcd_Printf( u8 x_str, u8 y_str,  char *format, ... )
{
 800bff0:	b40c      	push	{r2, r3}
 800bff2:	b530      	push	{r4, r5, lr}
 800bff4:	b0b3      	sub	sp, #204	; 0xcc
	char Str[200];
	Lb_va_list ap;

	Lb_va_start( ap, format );
		
	Lb_vsprintf(Str, format, ap);	
 800bff6:	aa36      	add	r2, sp, #216	; 0xd8
 800bff8:	f64a 33c1 	movw	r3, #43969	; 0xabc1
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_CLcd_Printf( u8 x_str, u8 y_str,  char *format, ... )
{
 800bffc:	460c      	mov	r4, r1
 800bffe:	4605      	mov	r5, r0
	char Str[200];
	Lb_va_list ap;

	Lb_va_start( ap, format );
		
	Lb_vsprintf(Str, format, ap);	
 800c000:	f852 1b04 	ldr.w	r1, [r2], #4
 800c004:	4668      	mov	r0, sp
 800c006:	f6c0 0300 	movt	r3, #2048	; 0x800
 800c00a:	4798      	blx	r3

	Hw_CLcd_Goto( x_str, y_str );
 800c00c:	f64b 738d 	movw	r3, #49037	; 0xbf8d
 800c010:	4621      	mov	r1, r4
 800c012:	4628      	mov	r0, r5
 800c014:	f6c0 0300 	movt	r3, #2048	; 0x800
 800c018:	4798      	blx	r3
	Hw_CLcd_WriteStr( Str );		
 800c01a:	f64b 73c9 	movw	r3, #49097	; 0xbfc9
 800c01e:	4668      	mov	r0, sp
 800c020:	f6c0 0300 	movt	r3, #2048	; 0x800
 800c024:	4798      	blx	r3
		
	Lb_va_end(ap);		
	
	return Ret;
}
 800c026:	2000      	movs	r0, #0
 800c028:	b033      	add	sp, #204	; 0xcc
 800c02a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c02e:	b002      	add	sp, #8
 800c030:	4770      	bx	lr
 800c032:	bf00      	nop

0800c034 <Hw_CLcd_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_CLcd_Init(void)
{	
 800c034:	b538      	push	{r3, r4, r5, lr}
	HW_CLCD_EN_CLR();
 800c036:	f64b 244d 	movw	r4, #47693	; 0xba4d
 800c03a:	2014      	movs	r0, #20
 800c03c:	2100      	movs	r1, #0
 800c03e:	f6c0 0400 	movt	r4, #2048	; 0x800
 800c042:	47a0      	blx	r4
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_CLcd_Delay(u32 DlyData)
{
	Hw_Wait_Usec(DlyData);
 800c044:	f64a 652d 	movw	r5, #44589	; 0xae2d
     RET     : void
---------------------------------------------------------------------------*/
void Hw_CLcd_Init(void)
{	
	HW_CLCD_EN_CLR();
	HW_CLCD_RS_CLR();
 800c048:	2101      	movs	r1, #1
 800c04a:	2014      	movs	r0, #20
 800c04c:	47a0      	blx	r4
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_CLcd_Delay(u32 DlyData)
{
	Hw_Wait_Usec(DlyData);
 800c04e:	f6c0 0500 	movt	r5, #2048	; 0x800
 800c052:	f242 7010 	movw	r0, #10000	; 0x2710
	HW_CLCD_EN_CLR();
	HW_CLCD_RS_CLR();
	
	Hw_CLcd_Delay(10000);	// delay 10ms
	
	Hw_CLcd_WriteCmd(0x3C);	// 2-line mode, display on
 800c056:	f64b 7405 	movw	r4, #48901	; 0xbf05
 800c05a:	f6c0 0400 	movt	r4, #2048	; 0x800
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_CLcd_Delay(u32 DlyData)
{
	Hw_Wait_Usec(DlyData);
 800c05e:	47a8      	blx	r5
	HW_CLCD_EN_CLR();
	HW_CLCD_RS_CLR();
	
	Hw_CLcd_Delay(10000);	// delay 10ms
	
	Hw_CLcd_WriteCmd(0x3C);	// 2-line mode, display on
 800c060:	203c      	movs	r0, #60	; 0x3c
 800c062:	47a0      	blx	r4
	Hw_CLcd_WriteCmd(0x0C);	// display on, cursor off, blink off
 800c064:	200c      	movs	r0, #12
 800c066:	47a0      	blx	r4
	Hw_CLcd_WriteCmd(0x01);	// Display Clear
 800c068:	2001      	movs	r0, #1
 800c06a:	47a0      	blx	r4
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_CLcd_Delay(u32 DlyData)
{
	Hw_Wait_Usec(DlyData);
 800c06c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c070:	47a8      	blx	r5
	
	Hw_CLcd_WriteCmd(0x3C);	// 2-line mode, display on
	Hw_CLcd_WriteCmd(0x0C);	// display on, cursor off, blink off
	Hw_CLcd_WriteCmd(0x01);	// Display Clear
	Hw_CLcd_Delay(2000);	// delay 2ms
	Hw_CLcd_WriteCmd(0x06);	// increment mode, entire shift off
 800c072:	2006      	movs	r0, #6
 800c074:	47a0      	blx	r4
	u16 Ret = ERR_NONE;
	u8  Cmd;
	
	Cmd = 0x80 | 0x40*y | x;
	
	Hw_CLcd_WriteCmd( Cmd );
 800c076:	2080      	movs	r0, #128	; 0x80
 800c078:	47a0      	blx	r4
	Hw_CLcd_WriteCmd(0x01);	// Display Clear
	Hw_CLcd_Delay(2000);	// delay 2ms
	Hw_CLcd_WriteCmd(0x06);	// increment mode, entire shift off

	Hw_CLcd_Goto(0,0);		
	Hw_CLcd_Clear();	
 800c07a:	f64b 73a9 	movw	r3, #49065	; 0xbfa9
 800c07e:	f6c0 0300 	movt	r3, #2048	; 0x800
 800c082:	4798      	blx	r3
	
	Hw_CLcd_Printf( 0, 0, "SmartRobot BD");
 800c084:	f64b 74f1 	movw	r4, #49137	; 0xbff1
 800c088:	2000      	movs	r0, #0
 800c08a:	f24e 12f4 	movw	r2, #57844	; 0xe1f4
 800c08e:	4601      	mov	r1, r0
 800c090:	f6c0 0200 	movt	r2, #2048	; 0x800
 800c094:	f6c0 0400 	movt	r4, #2048	; 0x800
 800c098:	47a0      	blx	r4
	Hw_CLcd_Printf( 0, 1, "Baram");
 800c09a:	f24e 2204 	movw	r2, #57860	; 0xe204
 800c09e:	2000      	movs	r0, #0
 800c0a0:	2101      	movs	r1, #1
 800c0a2:	f6c0 0200 	movt	r2, #2048	; 0x800
 800c0a6:	47a0      	blx	r4
 800c0a8:	bd38      	pop	{r3, r4, r5, pc}
 800c0aa:	bf00      	nop

0800c0ac <Hw_Cds_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Cds_Init( void )
{
 800c0ac:	4770      	bx	lr
 800c0ae:	bf00      	nop

0800c0b0 <Hw_Cds_GetData>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_Cds_GetData( void )
{
 800c0b0:	b508      	push	{r3, lr}
	u16 AdcValue;
	u16 RetValue;

	AdcValue = Hw_Adc_GetData(7);
 800c0b2:	f24b 5305 	movw	r3, #46341	; 0xb505
 800c0b6:	2007      	movs	r0, #7
 800c0b8:	f6c0 0300 	movt	r3, #2048	; 0x800
 800c0bc:	4798      	blx	r3

	RetValue = AdcValue * HW_CDS_MAX_LIMIT / HW_ADC_MAX_LIMIT;
 800c0be:	2364      	movs	r3, #100	; 0x64
 800c0c0:	fb03 f000 	mul.w	r0, r3, r0
 800c0c4:	2381      	movs	r3, #129	; 0x81
 800c0c6:	f2c8 0308 	movt	r3, #32776	; 0x8008
 800c0ca:	fb83 2300 	smull	r2, r3, r3, r0
 800c0ce:	17c2      	asrs	r2, r0, #31
 800c0d0:	1818      	adds	r0, r3, r0
 800c0d2:	ebc2 20d0 	rsb	r0, r2, r0, lsr #11

	return RetValue;
}
 800c0d6:	b280      	uxth	r0, r0
 800c0d8:	bd08      	pop	{r3, pc}
 800c0da:	bf00      	nop

0800c0dc <Hw_DHT11_Tick>:
	u32 i;
	u32 RegNum;
	u32 BitNum;
	u8  CheckSum;

	switch( State )
 800c0dc:	4956      	ldr	r1, [pc, #344]	; (800c238 <Hw_DHT11_Tick+0x15c>)
HW_DHT11_DATA_OBJ Hw_DHT11_Log;



void Hw_DHT11_Tick(void)
{
 800c0de:	b4f0      	push	{r4, r5, r6, r7}
	u32 i;
	u32 RegNum;
	u32 BitNum;
	u8  CheckSum;

	switch( State )
 800c0e0:	680b      	ldr	r3, [r1, #0]

		//-- Start Pulse (20ms)
		//
		case 1:

			if( Cnt == 1 )
 800c0e2:	4f56      	ldr	r7, [pc, #344]	; (800c23c <Hw_DHT11_Tick+0x160>)
	u32 i;
	u32 RegNum;
	u32 BitNum;
	u8  CheckSum;

	switch( State )
 800c0e4:	2b01      	cmp	r3, #1
 800c0e6:	d03a      	beq.n	800c15e <Hw_DHT11_Tick+0x82>
 800c0e8:	d206      	bcs.n	800c0f8 <Hw_DHT11_Tick+0x1c>
	{
		//-- PowerON 후 1초를 기다린다.
		//
		case 0:

			if( Cnt > 1000/10 )
 800c0ea:	683b      	ldr	r3, [r7, #0]
 800c0ec:	2b64      	cmp	r3, #100	; 0x64
 800c0ee:	d867      	bhi.n	800c1c0 <Hw_DHT11_Tick+0xe4>
 800c0f0:	3301      	adds	r3, #1
			}
			
			break;
	}

	Cnt++;
 800c0f2:	603b      	str	r3, [r7, #0]
}
 800c0f4:	bcf0      	pop	{r4, r5, r6, r7}
 800c0f6:	4770      	bx	lr
	u32 i;
	u32 RegNum;
	u32 BitNum;
	u8  CheckSum;

	switch( State )
 800c0f8:	2b02      	cmp	r3, #2
			break;

		//-- End 
		//
		case 2:
			if( Cnt == 500/10 )
 800c0fa:	683b      	ldr	r3, [r7, #0]
	u32 i;
	u32 RegNum;
	u32 BitNum;
	u8  CheckSum;

	switch( State )
 800c0fc:	d1f8      	bne.n	800c0f0 <Hw_DHT11_Tick+0x14>
			break;

		//-- End 
		//
		case 2:
			if( Cnt == 500/10 )
 800c0fe:	2b32      	cmp	r3, #50	; 0x32
 800c100:	d06b      	beq.n	800c1da <Hw_DHT11_Tick+0xfe>
				Hw_DHT11_IO_SetOutput();
			}

			//-- 1초마다 센서 데이터를 업데이트 한다.
			//
			if( Cnt >= 1200/10 )
 800c102:	2b77      	cmp	r3, #119	; 0x77
 800c104:	d9f4      	bls.n	800c0f0 <Hw_DHT11_Tick+0x14>
			{
				Cnt   = 0;
				State = 1;
				Hw_DHT11_Log.Data[0] = 0;
 800c106:	4c4e      	ldr	r4, [pc, #312]	; (800c240 <Hw_DHT11_Tick+0x164>)

			//-- 1초마다 센서 데이터를 업데이트 한다.
			//
			if( Cnt >= 1200/10 )
			{
				Cnt   = 0;
 800c108:	2300      	movs	r3, #0
				State = 1;
 800c10a:	2601      	movs	r6, #1
 800c10c:	4a4d      	ldr	r2, [pc, #308]	; (800c244 <Hw_DHT11_Tick+0x168>)

			//-- 1초마다 센서 데이터를 업데이트 한다.
			//
			if( Cnt >= 1200/10 )
			{
				Cnt   = 0;
 800c10e:	603b      	str	r3, [r7, #0]
				State = 1;
 800c110:	600e      	str	r6, [r1, #0]
				Hw_DHT11_Log.Data[0] = 0;
 800c112:	7023      	strb	r3, [r4, #0]
				Hw_DHT11_Log.Data[1] = 0;
 800c114:	7063      	strb	r3, [r4, #1]
				Hw_DHT11_Log.Data[2] = 0;
 800c116:	70a3      	strb	r3, [r4, #2]
				Hw_DHT11_Log.Data[3] = 0;
 800c118:	70e3      	strb	r3, [r4, #3]
				Hw_DHT11_Log.Data[4] = 0;
 800c11a:	7123      	strb	r3, [r4, #4]
				for( i=0; i<40; i++ )
				{
					RegNum = i/8;
					BitNum = i%8;

					if( Hw_DHT11_BitTbl[i] > 100 )
 800c11c:	f832 1f02 	ldrh.w	r1, [r2, #2]!
				Hw_DHT11_Log.Data[4] = 0;

				for( i=0; i<40; i++ )
				{
					RegNum = i/8;
					BitNum = i%8;
 800c120:	f003 0007 	and.w	r0, r3, #7

					if( Hw_DHT11_BitTbl[i] > 100 )
 800c124:	2964      	cmp	r1, #100	; 0x64
					{
						SET_BIT( Hw_DHT11_Log.Data[RegNum], 7-BitNum );
 800c126:	f1c0 0007 	rsb	r0, r0, #7
				for( i=0; i<40; i++ )
				{
					RegNum = i/8;
					BitNum = i%8;

					if( Hw_DHT11_BitTbl[i] > 100 )
 800c12a:	d905      	bls.n	800c138 <Hw_DHT11_Tick+0x5c>
					{
						SET_BIT( Hw_DHT11_Log.Data[RegNum], 7-BitNum );
 800c12c:	fa06 f000 	lsl.w	r0, r6, r0
				Hw_DHT11_Log.Data[3] = 0;
				Hw_DHT11_Log.Data[4] = 0;

				for( i=0; i<40; i++ )
				{
					RegNum = i/8;
 800c130:	08d9      	lsrs	r1, r3, #3
					BitNum = i%8;

					if( Hw_DHT11_BitTbl[i] > 100 )
					{
						SET_BIT( Hw_DHT11_Log.Data[RegNum], 7-BitNum );
 800c132:	5c65      	ldrb	r5, [r4, r1]
 800c134:	4328      	orrs	r0, r5
 800c136:	5460      	strb	r0, [r4, r1]
				Hw_DHT11_Log.Data[1] = 0;
				Hw_DHT11_Log.Data[2] = 0;
				Hw_DHT11_Log.Data[3] = 0;
				Hw_DHT11_Log.Data[4] = 0;

				for( i=0; i<40; i++ )
 800c138:	3301      	adds	r3, #1
 800c13a:	2b28      	cmp	r3, #40	; 0x28
 800c13c:	d1ee      	bne.n	800c11c <Hw_DHT11_Tick+0x40>

				CheckSum = 0;

				for( i=0; i<4; i++ )
				{
					CheckSum += Hw_DHT11_Log.Data[i];
 800c13e:	7821      	ldrb	r1, [r4, #0]
 800c140:	7860      	ldrb	r0, [r4, #1]
 800c142:	78a3      	ldrb	r3, [r4, #2]
 800c144:	78e2      	ldrb	r2, [r4, #3]
 800c146:	1808      	adds	r0, r1, r0
 800c148:	18c0      	adds	r0, r0, r3
 800c14a:	1880      	adds	r0, r0, r2
				}

				// CheckSum 확인 
				if( CheckSum == Hw_DHT11_Log.Data[4] )
 800c14c:	7924      	ldrb	r4, [r4, #4]
 800c14e:	f000 00ff 	and.w	r0, r0, #255	; 0xff
 800c152:	4284      	cmp	r4, r0

				CheckSum = 0;

				for( i=0; i<4; i++ )
				{
					CheckSum += Hw_DHT11_Log.Data[i];
 800c154:	4a3a      	ldr	r2, [pc, #232]	; (800c240 <Hw_DHT11_Tick+0x164>)
				}

				// CheckSum 확인 
				if( CheckSum == Hw_DHT11_Log.Data[4] )
 800c156:	d068      	beq.n	800c22a <Hw_DHT11_Tick+0x14e>
					Lb_printf("H %d T %d \n", Hw_DHT11_Log.Humidity, Hw_DHT11_Log.Temperature );
					#endif
				}
				else
				{
					Hw_DHT11_Log.Error = 1;
 800c158:	2301      	movs	r3, #1
 800c15a:	7153      	strb	r3, [r2, #5]
 800c15c:	e7c9      	b.n	800c0f2 <Hw_DHT11_Tick+0x16>

		//-- Start Pulse (20ms)
		//
		case 1:

			if( Cnt == 1 )
 800c15e:	683d      	ldr	r5, [r7, #0]
 800c160:	2d01      	cmp	r5, #1
 800c162:	d030      	beq.n	800c1c6 <Hw_DHT11_Tick+0xea>
			{
				Hw_DHT11_IO_SetLow();	
			}
			
			if( Cnt >= 20/10 )	
 800c164:	d9c5      	bls.n	800c0f2 <Hw_DHT11_Tick+0x16>
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_DHT11_IO_SetHigh(void)
{
	SET_BIT( REG_GPIOA_ODR, 6 );		
 800c166:	f640 000c 	movw	r0, #2060	; 0x80c
 800c16a:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800c16e:	6803      	ldr	r3, [r0, #0]
				Hw_DHT11_IO_SetLow();	
			}
			
			if( Cnt >= 20/10 )	
			{
				Hw_DHT11_BitIndex = 0;
 800c170:	4c35      	ldr	r4, [pc, #212]	; (800c248 <Hw_DHT11_Tick+0x16c>)
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_DHT11_IO_SetHigh(void)
{
	SET_BIT( REG_GPIOA_ODR, 6 );		
 800c172:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_DHT11_IO_SetInput(void)
{
	REG_GPIOA_CRL &= ~(0x0F << (24));	// Clear
 800c176:	f44f 6200 	mov.w	r2, #2048	; 0x800
				Hw_DHT11_IO_SetLow();	
			}
			
			if( Cnt >= 20/10 )	
			{
				Hw_DHT11_BitIndex = 0;
 800c17a:	2600      	movs	r6, #0
 800c17c:	6026      	str	r6, [r4, #0]
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_DHT11_IO_SetInput(void)
{
	REG_GPIOA_CRL &= ~(0x0F << (24));	// Clear
 800c17e:	f2c4 0201 	movt	r2, #16385	; 0x4001
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_DHT11_IO_SetHigh(void)
{
	SET_BIT( REG_GPIOA_ODR, 6 );		
 800c182:	6003      	str	r3, [r0, #0]
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_DHT11_IO_SetInput(void)
{
	REG_GPIOA_CRL &= ~(0x0F << (24));	// Clear
 800c184:	6813      	ldr	r3, [r2, #0]
---------------------------------------------------------------------------*/
void Hw_DHT11_IO_EnableISR(void)
{
	// EXTI6 Enable
	// 
	REG_EXTI_EMR |= (1<<6);	// Event Enable
 800c186:	f240 4404 	movw	r4, #1028	; 0x404
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_DHT11_IO_SetInput(void)
{
	REG_GPIOA_CRL &= ~(0x0F << (24));	// Clear
 800c18a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800c18e:	6013      	str	r3, [r2, #0]
	REG_GPIOA_CRL |=  (0x00 << (24));	// MODE, PA.6 Input Mode
 800c190:	6813      	ldr	r3, [r2, #0]
---------------------------------------------------------------------------*/
void Hw_DHT11_IO_EnableISR(void)
{
	// EXTI6 Enable
	// 
	REG_EXTI_EMR |= (1<<6);	// Event Enable
 800c192:	f2c4 0401 	movt	r4, #16385	; 0x4001
     RET     : void
---------------------------------------------------------------------------*/
void Hw_DHT11_IO_SetInput(void)
{
	REG_GPIOA_CRL &= ~(0x0F << (24));	// Clear
	REG_GPIOA_CRL |=  (0x00 << (24));	// MODE, PA.6 Input Mode
 800c196:	6013      	str	r3, [r2, #0]
	REG_GPIOA_CRL |=  (0x01 << (26));	// CNF,  PA.6 Floating input	
 800c198:	6813      	ldr	r3, [r2, #0]
void Hw_DHT11_IO_EnableISR(void)
{
	// EXTI6 Enable
	// 
	REG_EXTI_EMR |= (1<<6);	// Event Enable
	REG_EXTI_IMR |= (1<<6);	// Interrupt nable	
 800c19a:	f44f 6080 	mov.w	r0, #1024	; 0x400
---------------------------------------------------------------------------*/
void Hw_DHT11_IO_SetInput(void)
{
	REG_GPIOA_CRL &= ~(0x0F << (24));	// Clear
	REG_GPIOA_CRL |=  (0x00 << (24));	// MODE, PA.6 Input Mode
	REG_GPIOA_CRL |=  (0x01 << (26));	// CNF,  PA.6 Floating input	
 800c19e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c1a2:	6013      	str	r3, [r2, #0]
---------------------------------------------------------------------------*/
void Hw_DHT11_IO_EnableISR(void)
{
	// EXTI6 Enable
	// 
	REG_EXTI_EMR |= (1<<6);	// Event Enable
 800c1a4:	6823      	ldr	r3, [r4, #0]
	REG_EXTI_IMR |= (1<<6);	// Interrupt nable	
 800c1a6:	f2c4 0001 	movt	r0, #16385	; 0x4001
---------------------------------------------------------------------------*/
void Hw_DHT11_IO_EnableISR(void)
{
	// EXTI6 Enable
	// 
	REG_EXTI_EMR |= (1<<6);	// Event Enable
 800c1aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c1ae:	6023      	str	r3, [r4, #0]
	REG_EXTI_IMR |= (1<<6);	// Interrupt nable	
 800c1b0:	6803      	ldr	r3, [r0, #0]
			{
				Hw_DHT11_BitIndex = 0;
				Hw_DHT11_IO_SetHigh();
				Hw_DHT11_IO_SetInput();				
				Hw_DHT11_IO_EnableISR();				
				State = 2;	
 800c1b2:	2202      	movs	r2, #2
void Hw_DHT11_IO_EnableISR(void)
{
	// EXTI6 Enable
	// 
	REG_EXTI_EMR |= (1<<6);	// Event Enable
	REG_EXTI_IMR |= (1<<6);	// Interrupt nable	
 800c1b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c1b8:	6003      	str	r3, [r0, #0]
 800c1ba:	1c6b      	adds	r3, r5, #1
			{
				Hw_DHT11_BitIndex = 0;
				Hw_DHT11_IO_SetHigh();
				Hw_DHT11_IO_SetInput();				
				Hw_DHT11_IO_EnableISR();				
				State = 2;	
 800c1bc:	600a      	str	r2, [r1, #0]
 800c1be:	e798      	b.n	800c0f2 <Hw_DHT11_Tick+0x16>
		case 0:

			if( Cnt > 1000/10 )
			{
				Cnt   = 0;
				State = 1;
 800c1c0:	2301      	movs	r3, #1
 800c1c2:	600b      	str	r3, [r1, #0]
 800c1c4:	e795      	b.n	800c0f2 <Hw_DHT11_Tick+0x16>
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_DHT11_IO_SetLow(void)
{
	CLR_BIT( REG_GPIOA_ODR, 6 );		
 800c1c6:	f640 020c 	movw	r2, #2060	; 0x80c
 800c1ca:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800c1ce:	6811      	ldr	r1, [r2, #0]
 800c1d0:	2302      	movs	r3, #2
 800c1d2:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 800c1d6:	6011      	str	r1, [r2, #0]
 800c1d8:	e78b      	b.n	800c0f2 <Hw_DHT11_Tick+0x16>
---------------------------------------------------------------------------*/
void Hw_DHT11_IO_DisableISR(void)
{
	// EXTI6 Disable
	// 
	REG_EXTI_EMR &= ~(1<<6);	// Event Enable
 800c1da:	f240 4304 	movw	r3, #1028	; 0x404
 800c1de:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800c1e2:	6819      	ldr	r1, [r3, #0]
	REG_EXTI_IMR &= ~(1<<6);	// Interrupt nable	
 800c1e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
---------------------------------------------------------------------------*/
void Hw_DHT11_IO_DisableISR(void)
{
	// EXTI6 Disable
	// 
	REG_EXTI_EMR &= ~(1<<6);	// Event Enable
 800c1e8:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 800c1ec:	6019      	str	r1, [r3, #0]
	REG_EXTI_IMR &= ~(1<<6);	// Interrupt nable	
 800c1ee:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800c1f2:	6811      	ldr	r1, [r2, #0]
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_DHT11_IO_SetHigh(void)
{
	SET_BIT( REG_GPIOA_ODR, 6 );		
 800c1f4:	f640 030c 	movw	r3, #2060	; 0x80c
void Hw_DHT11_IO_DisableISR(void)
{
	// EXTI6 Disable
	// 
	REG_EXTI_EMR &= ~(1<<6);	// Event Enable
	REG_EXTI_IMR &= ~(1<<6);	// Interrupt nable	
 800c1f8:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 800c1fc:	6011      	str	r1, [r2, #0]
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_DHT11_IO_SetHigh(void)
{
	SET_BIT( REG_GPIOA_ODR, 6 );		
 800c1fe:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800c202:	6819      	ldr	r1, [r3, #0]
---------------------------------------------------------------------------*/
void Hw_DHT11_IO_SetOutput(void)
{
	//-- PA.6
	//
	REG_GPIOA_CRL &= ~(0x0F << (24));	// Clear
 800c204:	f44f 6200 	mov.w	r2, #2048	; 0x800
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_DHT11_IO_SetHigh(void)
{
	SET_BIT( REG_GPIOA_ODR, 6 );		
 800c208:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800c20c:	6019      	str	r1, [r3, #0]
---------------------------------------------------------------------------*/
void Hw_DHT11_IO_SetOutput(void)
{
	//-- PA.6
	//
	REG_GPIOA_CRL &= ~(0x0F << (24));	// Clear
 800c20e:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800c212:	6811      	ldr	r1, [r2, #0]
	REG_GPIOA_CRL |=  (0x03 << (24));	// MODE, PA.6 Output mode, max speed 50Mhz
	REG_GPIOA_CRL |=  (0x00 << (26));	// CNF,  PA.6 General purpose output push-pul		
 800c214:	2333      	movs	r3, #51	; 0x33
---------------------------------------------------------------------------*/
void Hw_DHT11_IO_SetOutput(void)
{
	//-- PA.6
	//
	REG_GPIOA_CRL &= ~(0x0F << (24));	// Clear
 800c216:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 800c21a:	6011      	str	r1, [r2, #0]
	REG_GPIOA_CRL |=  (0x03 << (24));	// MODE, PA.6 Output mode, max speed 50Mhz
 800c21c:	6811      	ldr	r1, [r2, #0]
 800c21e:	f041 7140 	orr.w	r1, r1, #50331648	; 0x3000000
 800c222:	6011      	str	r1, [r2, #0]
	REG_GPIOA_CRL |=  (0x00 << (26));	// CNF,  PA.6 General purpose output push-pul		
 800c224:	6811      	ldr	r1, [r2, #0]
 800c226:	6011      	str	r1, [r2, #0]
 800c228:	e763      	b.n	800c0f2 <Hw_DHT11_Tick+0x16>
				}

				// CheckSum 확인 
				if( CheckSum == Hw_DHT11_Log.Data[4] )
				{
					Hw_DHT11_Log.Error       = 0;
 800c22a:	2000      	movs	r0, #0
					Hw_DHT11_Log.Humidity    = Hw_DHT11_Log.Data[0];
					Hw_DHT11_Log.Temperature = Hw_DHT11_Log.Data[2];
 800c22c:	7213      	strb	r3, [r2, #8]
				}

				// CheckSum 확인 
				if( CheckSum == Hw_DHT11_Log.Data[4] )
				{
					Hw_DHT11_Log.Error       = 0;
 800c22e:	7150      	strb	r0, [r2, #5]
					Hw_DHT11_Log.Humidity    = Hw_DHT11_Log.Data[0];
 800c230:	71d1      	strb	r1, [r2, #7]
					Hw_DHT11_Log.Temperature = Hw_DHT11_Log.Data[2];
 800c232:	2301      	movs	r3, #1
 800c234:	e75d      	b.n	800c0f2 <Hw_DHT11_Tick+0x16>
 800c236:	bf00      	nop
 800c238:	20000ac4 	.word	0x20000ac4
 800c23c:	20000ac8 	.word	0x20000ac8
 800c240:	200017e8 	.word	0x200017e8
 800c244:	2000178a 	.word	0x2000178a
 800c248:	20000ac0 	.word	0x20000ac0

0800c24c <Hw_DHT11_IO_ISR>:
	//-- 인터럽트 팬딩 레지스터 Clear
	//
	REG_EXTI_PR = (1<<6);


	if( Hw_DHT11_BitIndex >= 2 && Hw_DHT11_BitIndex <= 41 )
 800c24c:	4b11      	ldr	r3, [pc, #68]	; (800c294 <Hw_DHT11_IO_ISR+0x48>)
	static u16 TimerCntSaved = 0;
	u16 TimerCntCur;

	//-- 인터럽트 팬딩 레지스터 Clear
	//
	REG_EXTI_PR = (1<<6);
 800c24e:	f240 4114 	movw	r1, #1044	; 0x414


	if( Hw_DHT11_BitIndex >= 2 && Hw_DHT11_BitIndex <= 41 )
 800c252:	681a      	ldr	r2, [r3, #0]




void Hw_DHT11_IO_ISR(void)
{
 800c254:	b430      	push	{r4, r5}
	//-- 인터럽트 팬딩 레지스터 Clear
	//
	REG_EXTI_PR = (1<<6);


	if( Hw_DHT11_BitIndex >= 2 && Hw_DHT11_BitIndex <= 41 )
 800c256:	1e90      	subs	r0, r2, #2
	static u16 TimerCntSaved = 0;
	u16 TimerCntCur;

	//-- 인터럽트 팬딩 레지스터 Clear
	//
	REG_EXTI_PR = (1<<6);
 800c258:	2440      	movs	r4, #64	; 0x40
 800c25a:	f2c4 0101 	movt	r1, #16385	; 0x4001


	if( Hw_DHT11_BitIndex >= 2 && Hw_DHT11_BitIndex <= 41 )
 800c25e:	2827      	cmp	r0, #39	; 0x27
	static u16 TimerCntSaved = 0;
	u16 TimerCntCur;

	//-- 인터럽트 팬딩 레지스터 Clear
	//
	REG_EXTI_PR = (1<<6);
 800c260:	600c      	str	r4, [r1, #0]


	if( Hw_DHT11_BitIndex >= 2 && Hw_DHT11_BitIndex <= 41 )
 800c262:	d90c      	bls.n	800c27e <Hw_DHT11_IO_ISR+0x32>
 800c264:	490c      	ldr	r1, [pc, #48]	; (800c298 <Hw_DHT11_IO_ISR+0x4c>)
			
		Hw_DHT11_BitTbl[Hw_DHT11_BitIndex-2] = TimerCntCur - TimerCntSaved;
	}


	Hw_DHT11_BitIndex++;
 800c266:	3201      	adds	r2, #1


	if( Hw_DHT11_BitIndex >= 42 )
 800c268:	2a29      	cmp	r2, #41	; 0x29
	{
		Hw_DHT11_BitIndex = 42;	
 800c26a:	bf88      	it	hi
 800c26c:	222a      	movhi	r2, #42	; 0x2a
 800c26e:	601a      	str	r2, [r3, #0]
	}

	TimerCntSaved = REG_TIM2_CNT;
 800c270:	2324      	movs	r3, #36	; 0x24
 800c272:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	800b      	strh	r3, [r1, #0]
}
 800c27a:	bc30      	pop	{r4, r5}
 800c27c:	4770      	bx	lr
	REG_EXTI_PR = (1<<6);


	if( Hw_DHT11_BitIndex >= 2 && Hw_DHT11_BitIndex <= 41 )
	{
		TimerCntCur = REG_TIM2_CNT;
 800c27e:	2424      	movs	r4, #36	; 0x24
			
		Hw_DHT11_BitTbl[Hw_DHT11_BitIndex-2] = TimerCntCur - TimerCntSaved;
 800c280:	4905      	ldr	r1, [pc, #20]	; (800c298 <Hw_DHT11_IO_ISR+0x4c>)
	REG_EXTI_PR = (1<<6);


	if( Hw_DHT11_BitIndex >= 2 && Hw_DHT11_BitIndex <= 41 )
	{
		TimerCntCur = REG_TIM2_CNT;
 800c282:	f2c4 0400 	movt	r4, #16384	; 0x4000
 800c286:	6825      	ldr	r5, [r4, #0]
			
		Hw_DHT11_BitTbl[Hw_DHT11_BitIndex-2] = TimerCntCur - TimerCntSaved;
 800c288:	880c      	ldrh	r4, [r1, #0]
 800c28a:	1b2d      	subs	r5, r5, r4
 800c28c:	4c03      	ldr	r4, [pc, #12]	; (800c29c <Hw_DHT11_IO_ISR+0x50>)
 800c28e:	f824 5010 	strh.w	r5, [r4, r0, lsl #1]
 800c292:	e7e8      	b.n	800c266 <Hw_DHT11_IO_ISR+0x1a>
 800c294:	20000ac0 	.word	0x20000ac0
 800c298:	20000abe 	.word	0x20000abe
 800c29c:	2000178c 	.word	0x2000178c

0800c2a0 <Hw_DHT11_GetHumidity>:
u8 Hw_DHT11_GetHumidity(void)
{
	u8 Humidity;

	
	Disable_ISR();
 800c2a0:	b672      	cpsid	i
	Humidity = Hw_DHT11_Log.Humidity;
	Enable_ISR();
 800c2a2:	b662      	cpsie	i
{
	u8 Humidity;

	
	Disable_ISR();
	Humidity = Hw_DHT11_Log.Humidity;
 800c2a4:	f241 73e8 	movw	r3, #6120	; 0x17e8
 800c2a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
	Enable_ISR();

	return Humidity;
}
 800c2ac:	79d8      	ldrb	r0, [r3, #7]
 800c2ae:	4770      	bx	lr

0800c2b0 <Hw_DHT11_GetTemperature>:
u8 Hw_DHT11_GetTemperature(void)
{
	u8 Temperature;

	
	Disable_ISR();
 800c2b0:	b672      	cpsid	i
	Temperature = Hw_DHT11_Log.Temperature;
	Enable_ISR();
 800c2b2:	b662      	cpsie	i
{
	u8 Temperature;

	
	Disable_ISR();
	Temperature = Hw_DHT11_Log.Temperature;
 800c2b4:	f241 73e8 	movw	r3, #6120	; 0x17e8
 800c2b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
	Enable_ISR();

	return Temperature;
}
 800c2bc:	7a18      	ldrb	r0, [r3, #8]
 800c2be:	4770      	bx	lr

0800c2c0 <Hw_DHT11_IO_SetupISR>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_DHT11_IO_SetupISR(void)
{
 800c2c0:	b508      	push	{r3, lr}

	// 1. 인터럽트 핀 설정 
	//
	REG_AFIO_EXTICR2 &= ~(0x0F<<8);
 800c2c2:	230c      	movs	r3, #12
 800c2c4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800c2c8:	6819      	ldr	r1, [r3, #0]
	REG_AFIO_EXTICR2 |=  (0x00<<8);	// EXTI6, PA.6을 외부 인터럽트로 설정 

	// 2. Falling trigger로 설정
	// 
	REG_EXTI_FTSR |= (1<<6);	 
 800c2ca:	f240 420c 	movw	r2, #1036	; 0x40c
void Hw_DHT11_IO_SetupISR(void)
{

	// 1. 인터럽트 핀 설정 
	//
	REG_AFIO_EXTICR2 &= ~(0x0F<<8);
 800c2ce:	f421 6170 	bic.w	r1, r1, #3840	; 0xf00
 800c2d2:	6019      	str	r1, [r3, #0]
	REG_AFIO_EXTICR2 |=  (0x00<<8);	// EXTI6, PA.6을 외부 인터럽트로 설정 
 800c2d4:	6819      	ldr	r1, [r3, #0]

	// 2. Falling trigger로 설정
	// 
	REG_EXTI_FTSR |= (1<<6);	 
 800c2d6:	f2c4 0201 	movt	r2, #16385	; 0x4001
{

	// 1. 인터럽트 핀 설정 
	//
	REG_AFIO_EXTICR2 &= ~(0x0F<<8);
	REG_AFIO_EXTICR2 |=  (0x00<<8);	// EXTI6, PA.6을 외부 인터럽트로 설정 
 800c2da:	6019      	str	r1, [r3, #0]

	// 2. Falling trigger로 설정
	// 
	REG_EXTI_FTSR |= (1<<6);	 
 800c2dc:	6811      	ldr	r1, [r2, #0]


	Hw_ISR_SetIRQFunc( 23, (u32)Hw_DHT11_IO_ISR, 0 );	
 800c2de:	f24b 13e1 	movw	r3, #45537	; 0xb1e1
	REG_AFIO_EXTICR2 &= ~(0x0F<<8);
	REG_AFIO_EXTICR2 |=  (0x00<<8);	// EXTI6, PA.6을 외부 인터럽트로 설정 

	// 2. Falling trigger로 설정
	// 
	REG_EXTI_FTSR |= (1<<6);	 
 800c2e2:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800c2e6:	6011      	str	r1, [r2, #0]


	Hw_ISR_SetIRQFunc( 23, (u32)Hw_DHT11_IO_ISR, 0 );	
 800c2e8:	f24c 214d 	movw	r1, #49741	; 0xc24d
 800c2ec:	2200      	movs	r2, #0
 800c2ee:	f6c0 0300 	movt	r3, #2048	; 0x800
 800c2f2:	2017      	movs	r0, #23
 800c2f4:	f6c0 0100 	movt	r1, #2048	; 0x800
 800c2f8:	4798      	blx	r3
	SET_BIT( REG_NVIC_ISER( 23/32 ), 23%32 );	// NVIC 37번 EXTI0 인터럽트 활성화
 800c2fa:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 800c2fe:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800c302:	681a      	ldr	r2, [r3, #0]
 800c304:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800c308:	601a      	str	r2, [r3, #0]
 800c30a:	bd08      	pop	{r3, pc}

0800c30c <Hw_DHT11_Init>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_DHT11_Init(void)
{
	Hw_DHT11_Log.Data[0] = 0;
 800c30c:	f241 73e8 	movw	r3, #6120	; 0x17e8
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_DHT11_Init(void)
{
 800c310:	b530      	push	{r4, r5, lr}
	Hw_DHT11_Log.Data[0] = 0;
 800c312:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c316:	2400      	movs	r4, #0
---------------------------------------------------------------------------*/
void Hw_DHT11_IO_SetOutput(void)
{
	//-- PA.6
	//
	REG_GPIOA_CRL &= ~(0x0F << (24));	// Clear
 800c318:	f44f 6200 	mov.w	r2, #2048	; 0x800
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_DHT11_Init(void)
{
	Hw_DHT11_Log.Data[0] = 0;
 800c31c:	701c      	strb	r4, [r3, #0]
	Hw_DHT11_Log.Data[1] = 0;
 800c31e:	705c      	strb	r4, [r3, #1]
	Hw_DHT11_Log.Data[2] = 0;
 800c320:	709c      	strb	r4, [r3, #2]
	Hw_DHT11_Log.Data[3] = 0;
 800c322:	70dc      	strb	r4, [r3, #3]
	Hw_DHT11_Log.Error		 = 0;
 800c324:	715c      	strb	r4, [r3, #5]
	Hw_DHT11_Log.DataValid   = FALSE;
 800c326:	719c      	strb	r4, [r3, #6]
	Hw_DHT11_Log.Humidity    = 0;
 800c328:	71dc      	strb	r4, [r3, #7]
	Hw_DHT11_Log.Temperature = 0;
 800c32a:	721c      	strb	r4, [r3, #8]
---------------------------------------------------------------------------*/
void Hw_DHT11_IO_SetOutput(void)
{
	//-- PA.6
	//
	REG_GPIOA_CRL &= ~(0x0F << (24));	// Clear
 800c32c:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800c330:	6813      	ldr	r3, [r2, #0]
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_DHT11_IO_SetHigh(void)
{
	SET_BIT( REG_GPIOA_ODR, 6 );		
 800c332:	f640 010c 	movw	r1, #2060	; 0x80c
---------------------------------------------------------------------------*/
void Hw_DHT11_IO_SetOutput(void)
{
	//-- PA.6
	//
	REG_GPIOA_CRL &= ~(0x0F << (24));	// Clear
 800c336:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800c33a:	6013      	str	r3, [r2, #0]
	REG_GPIOA_CRL |=  (0x03 << (24));	// MODE, PA.6 Output mode, max speed 50Mhz
 800c33c:	6813      	ldr	r3, [r2, #0]
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_DHT11_IO_SetHigh(void)
{
	SET_BIT( REG_GPIOA_ODR, 6 );		
 800c33e:	f2c4 0101 	movt	r1, #16385	; 0x4001
void Hw_DHT11_IO_SetOutput(void)
{
	//-- PA.6
	//
	REG_GPIOA_CRL &= ~(0x0F << (24));	// Clear
	REG_GPIOA_CRL |=  (0x03 << (24));	// MODE, PA.6 Output mode, max speed 50Mhz
 800c342:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 800c346:	6013      	str	r3, [r2, #0]
	REG_GPIOA_CRL |=  (0x00 << (26));	// CNF,  PA.6 General purpose output push-pul		
 800c348:	6810      	ldr	r0, [r2, #0]
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_DHT11_Timer_Setup(void)
{
	SET_BIT( REG_RCC_APB1ENR, 0 );		// TIM2 Clock Enable APB1 = 36Mhz
 800c34a:	f241 031c 	movw	r3, #4124	; 0x101c
{
	//-- PA.6
	//
	REG_GPIOA_CRL &= ~(0x0F << (24));	// Clear
	REG_GPIOA_CRL |=  (0x03 << (24));	// MODE, PA.6 Output mode, max speed 50Mhz
	REG_GPIOA_CRL |=  (0x00 << (26));	// CNF,  PA.6 General purpose output push-pul		
 800c34e:	6010      	str	r0, [r2, #0]
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_DHT11_IO_SetHigh(void)
{
	SET_BIT( REG_GPIOA_ODR, 6 );		
 800c350:	680a      	ldr	r2, [r1, #0]
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_DHT11_Timer_Setup(void)
{
	SET_BIT( REG_RCC_APB1ENR, 0 );		// TIM2 Clock Enable APB1 = 36Mhz
 800c352:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_DHT11_IO_SetHigh(void)
{
	SET_BIT( REG_GPIOA_ODR, 6 );		
 800c356:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c35a:	600a      	str	r2, [r1, #0]
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_DHT11_Timer_Setup(void)
{
	SET_BIT( REG_RCC_APB1ENR, 0 );		// TIM2 Clock Enable APB1 = 36Mhz
 800c35c:	681a      	ldr	r2, [r3, #0]

	REG_TIM2_PSC = 72-1; 				// 36Mhz/36 = 1Mhz
 800c35e:	2128      	movs	r1, #40	; 0x28
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_DHT11_Timer_Setup(void)
{
	SET_BIT( REG_RCC_APB1ENR, 0 );		// TIM2 Clock Enable APB1 = 36Mhz
 800c360:	f042 0201 	orr.w	r2, r2, #1
 800c364:	601a      	str	r2, [r3, #0]

	REG_TIM2_PSC = 72-1; 				// 36Mhz/36 = 1Mhz
 800c366:	f2c4 0100 	movt	r1, #16384	; 0x4000
 800c36a:	2347      	movs	r3, #71	; 0x47

	SET_BIT( REG_TIM2_CR1, 0 );			// Counter Enable 		 
 800c36c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
---------------------------------------------------------------------------*/
void Hw_DHT11_Timer_Setup(void)
{
	SET_BIT( REG_RCC_APB1ENR, 0 );		// TIM2 Clock Enable APB1 = 36Mhz

	REG_TIM2_PSC = 72-1; 				// 36Mhz/36 = 1Mhz
 800c370:	600b      	str	r3, [r1, #0]

	SET_BIT( REG_TIM2_CR1, 0 );			// Counter Enable 		 
 800c372:	6811      	ldr	r1, [r2, #0]


	Hw_DHT11_IO_Setup();
	Hw_DHT11_Timer_Setup();

	Hw_DHT11_IO_SetupISR();
 800c374:	f24c 23c1 	movw	r3, #49857	; 0xc2c1
{
	SET_BIT( REG_RCC_APB1ENR, 0 );		// TIM2 Clock Enable APB1 = 36Mhz

	REG_TIM2_PSC = 72-1; 				// 36Mhz/36 = 1Mhz

	SET_BIT( REG_TIM2_CR1, 0 );			// Counter Enable 		 
 800c378:	f041 0101 	orr.w	r1, r1, #1
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_DHT11_Init(void)
{
 800c37c:	b083      	sub	sp, #12
{
	SET_BIT( REG_RCC_APB1ENR, 0 );		// TIM2 Clock Enable APB1 = 36Mhz

	REG_TIM2_PSC = 72-1; 				// 36Mhz/36 = 1Mhz

	SET_BIT( REG_TIM2_CR1, 0 );			// Counter Enable 		 
 800c37e:	6011      	str	r1, [r2, #0]


	Hw_DHT11_IO_Setup();
	Hw_DHT11_Timer_Setup();

	Hw_DHT11_IO_SetupISR();
 800c380:	f6c0 0300 	movt	r3, #2048	; 0x800
 800c384:	4798      	blx	r3


	Hw_Timer_Set  ( HW_TIMER_CH_DHT11, 10, LOOP_TIME, Hw_DHT11_Tick, NULL );	
 800c386:	f24b 3515 	movw	r5, #45845	; 0xb315
 800c38a:	f24c 03dd 	movw	r3, #49373	; 0xc0dd
 800c38e:	2006      	movs	r0, #6
 800c390:	9400      	str	r4, [sp, #0]
 800c392:	210a      	movs	r1, #10
 800c394:	2202      	movs	r2, #2
 800c396:	f6c0 0300 	movt	r3, #2048	; 0x800
 800c39a:	f6c0 0500 	movt	r5, #2048	; 0x800
 800c39e:	47a8      	blx	r5
	Hw_Timer_Start( HW_TIMER_CH_DHT11 );
 800c3a0:	f24b 3335 	movw	r3, #45877	; 0xb335
 800c3a4:	2006      	movs	r0, #6
 800c3a6:	f6c0 0300 	movt	r3, #2048	; 0x800
 800c3aa:	4798      	blx	r3
}
 800c3ac:	b003      	add	sp, #12
 800c3ae:	bd30      	pop	{r4, r5, pc}

0800c3b0 <EP1_IN_Callback>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void EP1_IN_Callback (void)
{
 800c3b0:	b538      	push	{r3, r4, r5, lr}
  uint16_t USB_Tx_ptr;
  uint16_t USB_Tx_length;
  
  if (USB_Tx_State == 1)
 800c3b2:	4b15      	ldr	r3, [pc, #84]	; (800c408 <EP1_IN_Callback+0x58>)
 800c3b4:	781a      	ldrb	r2, [r3, #0]
 800c3b6:	2a01      	cmp	r2, #1
 800c3b8:	d000      	beq.n	800c3bc <EP1_IN_Callback+0xc>
 800c3ba:	bd38      	pop	{r3, r4, r5, pc}
  {
    if (USART_Rx_length == 0) 
 800c3bc:	4c13      	ldr	r4, [pc, #76]	; (800c40c <EP1_IN_Callback+0x5c>)
 800c3be:	6820      	ldr	r0, [r4, #0]
 800c3c0:	b300      	cbz	r0, 800c404 <EP1_IN_Callback+0x54>
    {
      USB_Tx_State = 0;
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
 800c3c2:	2840      	cmp	r0, #64	; 0x40
        USB_Tx_ptr = USART_Rx_ptr_out;
 800c3c4:	4a12      	ldr	r2, [pc, #72]	; (800c410 <EP1_IN_Callback+0x60>)
    {
      USB_Tx_State = 0;
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
 800c3c6:	d814      	bhi.n	800c3f2 <EP1_IN_Callback+0x42>
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
        USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;    
      }
      else 
      {
        USB_Tx_ptr = USART_Rx_ptr_out;
 800c3c8:	6813      	ldr	r3, [r2, #0]
        USB_Tx_length = USART_Rx_length;
 800c3ca:	b285      	uxth	r5, r0
        
        USART_Rx_ptr_out += USART_Rx_length;
 800c3cc:	1818      	adds	r0, r3, r0
 800c3ce:	6010      	str	r0, [r2, #0]
        USART_Rx_length = 0;
 800c3d0:	2200      	movs	r2, #0
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
        USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;    
      }
      else 
      {
        USB_Tx_ptr = USART_Rx_ptr_out;
 800c3d2:	b29b      	uxth	r3, r3
        USB_Tx_length = USART_Rx_length;
        
        USART_Rx_ptr_out += USART_Rx_length;
        USART_Rx_length = 0;
 800c3d4:	6022      	str	r2, [r4, #0]
      }
      UserToPMABufferCopy(&USART_Rx_Buffer[USB_Tx_ptr], ENDP1_TXADDR, USB_Tx_length);
 800c3d6:	480f      	ldr	r0, [pc, #60]	; (800c414 <EP1_IN_Callback+0x64>)
 800c3d8:	21c0      	movs	r1, #192	; 0xc0
 800c3da:	18c0      	adds	r0, r0, r3
 800c3dc:	462a      	mov	r2, r5
 800c3de:	4b0e      	ldr	r3, [pc, #56]	; (800c418 <EP1_IN_Callback+0x68>)
 800c3e0:	4798      	blx	r3
      SetEPTxCount(ENDP1, USB_Tx_length);
 800c3e2:	2001      	movs	r0, #1
 800c3e4:	4629      	mov	r1, r5
 800c3e6:	4b0d      	ldr	r3, [pc, #52]	; (800c41c <EP1_IN_Callback+0x6c>)
 800c3e8:	4798      	blx	r3
      SetEPTxValid(ENDP1); 
 800c3ea:	2001      	movs	r0, #1
 800c3ec:	4b0c      	ldr	r3, [pc, #48]	; (800c420 <EP1_IN_Callback+0x70>)
 800c3ee:	4798      	blx	r3
 800c3f0:	bd38      	pop	{r3, r4, r5, pc}
      USB_Tx_State = 0;
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
        USB_Tx_ptr = USART_Rx_ptr_out;
 800c3f2:	6813      	ldr	r3, [r2, #0]
        USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
        
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
        USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;    
 800c3f4:	3840      	subs	r0, #64	; 0x40
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
        USB_Tx_ptr = USART_Rx_ptr_out;
        USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
        
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
 800c3f6:	f103 0140 	add.w	r1, r3, #64	; 0x40
        USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;    
 800c3fa:	6020      	str	r0, [r4, #0]
      USB_Tx_State = 0;
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
        USB_Tx_ptr = USART_Rx_ptr_out;
 800c3fc:	b29b      	uxth	r3, r3
        USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
        
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
 800c3fe:	6011      	str	r1, [r2, #0]
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
        USB_Tx_ptr = USART_Rx_ptr_out;
        USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
 800c400:	2540      	movs	r5, #64	; 0x40
 800c402:	e7e8      	b.n	800c3d6 <EP1_IN_Callback+0x26>
  
  if (USB_Tx_State == 1)
  {
    if (USART_Rx_length == 0) 
    {
      USB_Tx_State = 0;
 800c404:	7018      	strb	r0, [r3, #0]
 800c406:	bd38      	pop	{r3, r4, r5, pc}
 800c408:	20000aec 	.word	0x20000aec
 800c40c:	20000af8 	.word	0x20000af8
 800c410:	20000af4 	.word	0x20000af4
 800c414:	2000185c 	.word	0x2000185c
 800c418:	0800d7a5 	.word	0x0800d7a5
 800c41c:	0800d9e5 	.word	0x0800d9e5
 800c420:	0800d8a9 	.word	0x0800d8a9

0800c424 <EP3_OUT_Callback>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void EP3_OUT_Callback(void)
{
 800c424:	b510      	push	{r4, lr}
  uint16_t USB_Rx_Cnt;
  
  /* Get the received data buffer and update the counter */
  USB_Rx_Cnt = USB_SIL_Read(EP3_OUT, USB_Rx_Buffer);
 800c426:	f241 74f4 	movw	r4, #6132	; 0x17f4
 800c42a:	f2c2 0400 	movt	r4, #8192	; 0x2000
 800c42e:	f64d 23a5 	movw	r3, #55973	; 0xdaa5
 800c432:	4621      	mov	r1, r4
 800c434:	2003      	movs	r0, #3
 800c436:	f6c0 0300 	movt	r3, #2048	; 0x800
 800c43a:	4798      	blx	r3
  
  /* USB data will be immediately processed, this allow next USB traffic being 
  NAKed till the end of the USART Xfer */
  
  USB_To_USART_Send_Data(USB_Rx_Buffer, USB_Rx_Cnt);
 800c43c:	f64c 43cd 	movw	r3, #52429	; 0xcccd
 800c440:	b2c1      	uxtb	r1, r0
 800c442:	f6c0 0300 	movt	r3, #2048	; 0x800
 800c446:	4620      	mov	r0, r4
 800c448:	4798      	blx	r3
 
  /* Enable the receive of data on EP3 */
  SetEPRxValid(ENDP3);
 800c44a:	f64d 03cd 	movw	r3, #55501	; 0xd8cd
 800c44e:	2003      	movs	r0, #3
 800c450:	f6c0 0300 	movt	r3, #2048	; 0x800
 800c454:	4798      	blx	r3
 800c456:	bd10      	pop	{r4, pc}

0800c458 <SOF_Callback>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SOF_Callback(void)
{
 800c458:	b508      	push	{r3, lr}
  static uint32_t FrameCount = 0;
  
  if(bDeviceState == CONFIGURED)
 800c45a:	4b08      	ldr	r3, [pc, #32]	; (800c47c <SOF_Callback+0x24>)
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	2b05      	cmp	r3, #5
 800c460:	d000      	beq.n	800c464 <SOF_Callback+0xc>
 800c462:	bd08      	pop	{r3, pc}
  {
    if (FrameCount++ == VCOMPORT_IN_FRAME_INTERVAL)
 800c464:	4b06      	ldr	r3, [pc, #24]	; (800c480 <SOF_Callback+0x28>)
 800c466:	681a      	ldr	r2, [r3, #0]
 800c468:	1c51      	adds	r1, r2, #1
 800c46a:	2a05      	cmp	r2, #5
 800c46c:	6019      	str	r1, [r3, #0]
 800c46e:	d1f8      	bne.n	800c462 <SOF_Callback+0xa>
    {
      /* Reset the frame counter */
      FrameCount = 0;
 800c470:	2200      	movs	r2, #0
 800c472:	601a      	str	r2, [r3, #0]
      
      /* Check the data to be sent through IN pipe */
      Handle_USBAsynchXfer();
 800c474:	4b03      	ldr	r3, [pc, #12]	; (800c484 <SOF_Callback+0x2c>)
 800c476:	4798      	blx	r3
 800c478:	e7f3      	b.n	800c462 <SOF_Callback+0xa>
 800c47a:	bf00      	nop
 800c47c:	20000ae0 	.word	0x20000ae0
 800c480:	20000acc 	.word	0x20000acc
 800c484:	0800ccf9 	.word	0x0800ccf9

0800c488 <USB_Istr>:
void USB_Istr(void)
{
    uint32_t i=0;
 __IO uint32_t EP[8];
  
  wIstr = _GetISTR();
 800c488:	f645 4244 	movw	r2, #23620	; 0x5c44
 800c48c:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800c490:	6813      	ldr	r3, [r2, #0]
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Istr(void)
{
 800c492:	b570      	push	{r4, r5, r6, lr}
    uint32_t i=0;
 __IO uint32_t EP[8];
  
  wIstr = _GetISTR();
 800c494:	4c6b      	ldr	r4, [pc, #428]	; (800c644 <USB_Istr+0x1bc>)
 800c496:	b29b      	uxth	r3, r3

  //printf("%x %x %x %x  ", wIstr >> 16, wIstr & 0x0000FFFF, wInterrupt_Mask >> 16, wInterrupt_Mask&0x0000FFFF);

#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
 800c498:	4d6b      	ldr	r5, [pc, #428]	; (800c648 <USB_Istr+0x1c0>)
void USB_Istr(void)
{
    uint32_t i=0;
 __IO uint32_t EP[8];
  
  wIstr = _GetISTR();
 800c49a:	8023      	strh	r3, [r4, #0]

  //printf("%x %x %x %x  ", wIstr >> 16, wIstr & 0x0000FFFF, wInterrupt_Mask >> 16, wInterrupt_Mask&0x0000FFFF);

#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
 800c49c:	8821      	ldrh	r1, [r4, #0]
 800c49e:	882b      	ldrh	r3, [r5, #0]
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Istr(void)
{
 800c4a0:	b088      	sub	sp, #32
  wIstr = _GetISTR();

  //printf("%x %x %x %x  ", wIstr >> 16, wIstr & 0x0000FFFF, wInterrupt_Mask >> 16, wInterrupt_Mask&0x0000FFFF);

#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
 800c4a2:	4019      	ands	r1, r3
 800c4a4:	f401 7100 	and.w	r1, r1, #512	; 0x200
 800c4a8:	b289      	uxth	r1, r1
 800c4aa:	2900      	cmp	r1, #0
 800c4ac:	d168      	bne.n	800c580 <USB_Istr+0xf8>
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  
  
#if (IMR_MSK & ISTR_CTR)
  if (wIstr & ISTR_CTR & wInterrupt_Mask)
 800c4ae:	8822      	ldrh	r2, [r4, #0]
 800c4b0:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 800c4b4:	4213      	tst	r3, r2
 800c4b6:	d15f      	bne.n	800c578 <USB_Istr+0xf0>
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  
#if (IMR_MSK & ISTR_RESET)
  if (wIstr & ISTR_RESET & wInterrupt_Mask)
 800c4b8:	8822      	ldrh	r2, [r4, #0]
 800c4ba:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 800c4be:	4213      	tst	r3, r2
 800c4c0:	d14e      	bne.n	800c560 <USB_Istr+0xd8>
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_ERR)
  if (wIstr & ISTR_ERR & wInterrupt_Mask)
 800c4c2:	8822      	ldrh	r2, [r4, #0]
 800c4c4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800c4c8:	4213      	tst	r3, r2
  {
    _SetISTR((uint16_t)CLR_ERR);
 800c4ca:	bf1f      	itttt	ne
 800c4cc:	f645 4244 	movwne	r2, #23620	; 0x5c44
 800c4d0:	f2c4 0200 	movtne	r2, #16384	; 0x4000
 800c4d4:	f64d 71ff 	movwne	r1, #57343	; 0xdfff
 800c4d8:	6011      	strne	r1, [r2, #0]
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_WKUP)
  if (wIstr & ISTR_WKUP & wInterrupt_Mask)
 800c4da:	8822      	ldrh	r2, [r4, #0]
 800c4dc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800c4e0:	4213      	tst	r3, r2
 800c4e2:	d131      	bne.n	800c548 <USB_Istr+0xc0>
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_SUSP)
  if (wIstr & ISTR_SUSP & wInterrupt_Mask)
 800c4e4:	8822      	ldrh	r2, [r4, #0]
 800c4e6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800c4ea:	4213      	tst	r3, r2
 800c4ec:	d00e      	beq.n	800c50c <USB_Istr+0x84>
  {
	//printf(" in susp ");
    /* check if SUSPEND is possible */
    if(fSuspendEnabled)
 800c4ee:	4b57      	ldr	r3, [pc, #348]	; (800c64c <USB_Istr+0x1c4>)
 800c4f0:	781b      	ldrb	r3, [r3, #0]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d125      	bne.n	800c542 <USB_Istr+0xba>
    }
    else
    {
      //printf("l\n");    	
      /* if not possible then resume after xx ms */
      Resume(RESUME_LATER);
 800c4f6:	2002      	movs	r0, #2
 800c4f8:	4b55      	ldr	r3, [pc, #340]	; (800c650 <USB_Istr+0x1c8>)
 800c4fa:	4798      	blx	r3
    }
    
    //printf(" out susp ");
    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    _SetISTR((uint16_t)CLR_SUSP);
 800c4fc:	f645 4244 	movw	r2, #23620	; 0x5c44
 800c500:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800c504:	f24f 71ff 	movw	r1, #63487	; 0xf7ff
 800c508:	882b      	ldrh	r3, [r5, #0]
 800c50a:	6011      	str	r1, [r2, #0]
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/

#if (IMR_MSK & ISTR_ESOF)
  if (wIstr & ISTR_ESOF & wInterrupt_Mask)
 800c50c:	8822      	ldrh	r2, [r4, #0]
 800c50e:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800c512:	4213      	tst	r3, r2
 800c514:	d013      	beq.n	800c53e <USB_Istr+0xb6>
  {
    /* clear ESOF flag in ISTR */
    _SetISTR((uint16_t)CLR_ESOF);
 800c516:	f645 4244 	movw	r2, #23620	; 0x5c44
 800c51a:	f64f 61ff 	movw	r1, #65279	; 0xfeff
 800c51e:	f2c4 0200 	movt	r2, #16384	; 0x4000
    
    if ((_GetFNR()&FNR_RXDP)!=0)
 800c522:	f645 4348 	movw	r3, #23624	; 0x5c48

#if (IMR_MSK & ISTR_ESOF)
  if (wIstr & ISTR_ESOF & wInterrupt_Mask)
  {
    /* clear ESOF flag in ISTR */
    _SetISTR((uint16_t)CLR_ESOF);
 800c526:	6011      	str	r1, [r2, #0]
    
    if ((_GetFNR()&FNR_RXDP)!=0)
 800c528:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	0419      	lsls	r1, r3, #16
 800c530:	d432      	bmi.n	800c598 <USB_Istr+0x110>
        esof_counter = 0;
      }
    }
    else
    {
        esof_counter = 0;
 800c532:	4b48      	ldr	r3, [pc, #288]	; (800c654 <USB_Istr+0x1cc>)
 800c534:	2200      	movs	r2, #0
 800c536:	601a      	str	r2, [r3, #0]
    }
    
    /* resume handling timing is made with ESOFs */
    Resume(RESUME_ESOF); /* request without change of the machine state */
 800c538:	2007      	movs	r0, #7
 800c53a:	4b45      	ldr	r3, [pc, #276]	; (800c650 <USB_Istr+0x1c8>)
 800c53c:	4798      	blx	r3
#ifdef ESOF_CALLBACK
    ESOF_Callback();
#endif
  }
#endif
} /* USB_Istr */
 800c53e:	b008      	add	sp, #32
 800c540:	bd70      	pop	{r4, r5, r6, pc}
	//printf(" in susp ");
    /* check if SUSPEND is possible */
    if(fSuspendEnabled)
    {
      //printf("k\n");
      Suspend();
 800c542:	4b45      	ldr	r3, [pc, #276]	; (800c658 <USB_Istr+0x1d0>)
 800c544:	4798      	blx	r3
 800c546:	e7d9      	b.n	800c4fc <USB_Istr+0x74>
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_WKUP)
  if (wIstr & ISTR_WKUP & wInterrupt_Mask)
  {
    _SetISTR((uint16_t)CLR_WKUP);
 800c548:	f645 4344 	movw	r3, #23620	; 0x5c44
 800c54c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c550:	f64e 72ff 	movw	r2, #61439	; 0xefff
 800c554:	601a      	str	r2, [r3, #0]
    Resume(RESUME_EXTERNAL);
 800c556:	2000      	movs	r0, #0
 800c558:	4b3d      	ldr	r3, [pc, #244]	; (800c650 <USB_Istr+0x1c8>)
 800c55a:	4798      	blx	r3
 800c55c:	882b      	ldrh	r3, [r5, #0]
 800c55e:	e7c1      	b.n	800c4e4 <USB_Istr+0x5c>
#if (IMR_MSK & ISTR_RESET)
  if (wIstr & ISTR_RESET & wInterrupt_Mask)
  {
  	//printf(" ISTR_RESET ");
  	
    _SetISTR((uint16_t)CLR_RESET);
 800c560:	f645 4344 	movw	r3, #23620	; 0x5c44
 800c564:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c568:	f64f 32ff 	movw	r2, #64511	; 0xfbff
 800c56c:	601a      	str	r2, [r3, #0]
    Device_Property.Reset();
 800c56e:	4b3b      	ldr	r3, [pc, #236]	; (800c65c <USB_Istr+0x1d4>)
 800c570:	685b      	ldr	r3, [r3, #4]
 800c572:	4798      	blx	r3
 800c574:	882b      	ldrh	r3, [r5, #0]
 800c576:	e7a4      	b.n	800c4c2 <USB_Istr+0x3a>
#if (IMR_MSK & ISTR_CTR)
  if (wIstr & ISTR_CTR & wInterrupt_Mask)
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    CTR_LP();
 800c578:	4b39      	ldr	r3, [pc, #228]	; (800c660 <USB_Istr+0x1d8>)
 800c57a:	4798      	blx	r3
 800c57c:	882b      	ldrh	r3, [r5, #0]
 800c57e:	e79b      	b.n	800c4b8 <USB_Istr+0x30>
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
  {
	//printf(" ISTR_SOF ");

    _SetISTR((uint16_t)CLR_SOF);
    bIntPackSOF++;
 800c580:	4b38      	ldr	r3, [pc, #224]	; (800c664 <USB_Istr+0x1dc>)
#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
  {
	//printf(" ISTR_SOF ");

    _SetISTR((uint16_t)CLR_SOF);
 800c582:	f64f 51ff 	movw	r1, #65023	; 0xfdff
 800c586:	6011      	str	r1, [r2, #0]
    bIntPackSOF++;
 800c588:	781a      	ldrb	r2, [r3, #0]
 800c58a:	3201      	adds	r2, #1
 800c58c:	b2d2      	uxtb	r2, r2
 800c58e:	701a      	strb	r2, [r3, #0]

#ifdef SOF_CALLBACK
    SOF_Callback();
 800c590:	4b35      	ldr	r3, [pc, #212]	; (800c668 <USB_Istr+0x1e0>)
 800c592:	4798      	blx	r3
 800c594:	882b      	ldrh	r3, [r5, #0]
 800c596:	e78a      	b.n	800c4ae <USB_Istr+0x26>
    _SetISTR((uint16_t)CLR_ESOF);
    
    if ((_GetFNR()&FNR_RXDP)!=0)
    {
      /* increment ESOF counter */
      esof_counter ++;
 800c598:	492e      	ldr	r1, [pc, #184]	; (800c654 <USB_Istr+0x1cc>)
 800c59a:	680b      	ldr	r3, [r1, #0]
 800c59c:	3301      	adds	r3, #1
 800c59e:	600b      	str	r3, [r1, #0]
      
      /* test if we enter in ESOF more than 3 times with FSUSP =0 and RXDP =1=>> possible missing SUSP flag*/
      if ((esof_counter >3)&&((_GetCNTR()&CNTR_FSUSP)==0))
 800c5a0:	680b      	ldr	r3, [r1, #0]
 800c5a2:	2b03      	cmp	r3, #3
 800c5a4:	d9c8      	bls.n	800c538 <USB_Istr+0xb0>
 800c5a6:	f645 4240 	movw	r2, #23616	; 0x5c40
 800c5aa:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800c5ae:	6813      	ldr	r3, [r2, #0]
 800c5b0:	f013 0308 	ands.w	r3, r3, #8
 800c5b4:	d1c0      	bne.n	800c538 <USB_Istr+0xb0>
      {           
        /* this a sequence to apply a force RESET*/
      
        /*Store CNTR value */
        wCNTR = _GetCNTR(); 
 800c5b6:	6810      	ldr	r0, [r2, #0]
 800c5b8:	4d2c      	ldr	r5, [pc, #176]	; (800c66c <USB_Istr+0x1e4>)
 800c5ba:	b280      	uxth	r0, r0
 800c5bc:	f44f 42b8 	mov.w	r2, #23552	; 0x5c00
 800c5c0:	6028      	str	r0, [r5, #0]
 800c5c2:	f2c4 0200 	movt	r2, #16384	; 0x4000
      
        /*Store endpoints registers status */
        for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 800c5c6:	f852 4b04 	ldr.w	r4, [r2], #4
 800c5ca:	ae08      	add	r6, sp, #32
 800c5cc:	eb06 0083 	add.w	r0, r6, r3, lsl #2
 800c5d0:	3301      	adds	r3, #1
 800c5d2:	b2a4      	uxth	r4, r4
 800c5d4:	2b08      	cmp	r3, #8
 800c5d6:	f840 4c20 	str.w	r4, [r0, #-32]
 800c5da:	d1f4      	bne.n	800c5c6 <USB_Istr+0x13e>
      
        /*apply FRES */
        wCNTR|=CNTR_FRES;
 800c5dc:	682a      	ldr	r2, [r5, #0]
        _SetCNTR(wCNTR);
 800c5de:	f645 4340 	movw	r3, #23616	; 0x5c40
      
        /*Store endpoints registers status */
        for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
      
        /*apply FRES */
        wCNTR|=CNTR_FRES;
 800c5e2:	f042 0201 	orr.w	r2, r2, #1
 800c5e6:	602a      	str	r2, [r5, #0]
        _SetCNTR(wCNTR);
 800c5e8:	682a      	ldr	r2, [r5, #0]
 800c5ea:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c5ee:	b292      	uxth	r2, r2
 800c5f0:	601a      	str	r2, [r3, #0]
 
        /*clear FRES*/
        wCNTR&=~CNTR_FRES;
 800c5f2:	682a      	ldr	r2, [r5, #0]
        _SetCNTR(wCNTR);
      
        /*poll for RESET flag in ISTR*/
        while((_GetISTR()&ISTR_RESET) == 0);
 800c5f4:	f645 4044 	movw	r0, #23620	; 0x5c44
        /*apply FRES */
        wCNTR|=CNTR_FRES;
        _SetCNTR(wCNTR);
 
        /*clear FRES*/
        wCNTR&=~CNTR_FRES;
 800c5f8:	f022 0201 	bic.w	r2, r2, #1
 800c5fc:	602a      	str	r2, [r5, #0]
        _SetCNTR(wCNTR);
 800c5fe:	682a      	ldr	r2, [r5, #0]
      
        /*poll for RESET flag in ISTR*/
        while((_GetISTR()&ISTR_RESET) == 0);
 800c600:	f2c4 0000 	movt	r0, #16384	; 0x4000
        wCNTR|=CNTR_FRES;
        _SetCNTR(wCNTR);
 
        /*clear FRES*/
        wCNTR&=~CNTR_FRES;
        _SetCNTR(wCNTR);
 800c604:	b292      	uxth	r2, r2
 800c606:	601a      	str	r2, [r3, #0]
      
        /*poll for RESET flag in ISTR*/
        while((_GetISTR()&ISTR_RESET) == 0);
 800c608:	6802      	ldr	r2, [r0, #0]
 800c60a:	f645 4344 	movw	r3, #23620	; 0x5c44
 800c60e:	0552      	lsls	r2, r2, #21
 800c610:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c614:	d5f8      	bpl.n	800c608 <USB_Istr+0x180>
  
        /* clear RESET flag in ISTR */
        _SetISTR((uint16_t)CLR_RESET);
 800c616:	f44f 42b8 	mov.w	r2, #23552	; 0x5c00
 800c61a:	f64f 30ff 	movw	r0, #64511	; 0xfbff
 800c61e:	6018      	str	r0, [r3, #0]
 800c620:	f2c4 0200 	movt	r2, #16384	; 0x4000
   
       /*restore Enpoints*/
        for (i=0;i<8;i++)
 800c624:	2300      	movs	r3, #0
        _SetENDPOINT(i, EP[i]);
 800c626:	ac08      	add	r4, sp, #32
 800c628:	eb04 0083 	add.w	r0, r4, r3, lsl #2
 800c62c:	f850 0c20 	ldr.w	r0, [r0, #-32]
  
        /* clear RESET flag in ISTR */
        _SetISTR((uint16_t)CLR_RESET);
   
       /*restore Enpoints*/
        for (i=0;i<8;i++)
 800c630:	3301      	adds	r3, #1
        _SetENDPOINT(i, EP[i]);
 800c632:	b280      	uxth	r0, r0
  
        /* clear RESET flag in ISTR */
        _SetISTR((uint16_t)CLR_RESET);
   
       /*restore Enpoints*/
        for (i=0;i<8;i++)
 800c634:	2b08      	cmp	r3, #8
        _SetENDPOINT(i, EP[i]);
 800c636:	f842 0b04 	str.w	r0, [r2], #4
  
        /* clear RESET flag in ISTR */
        _SetISTR((uint16_t)CLR_RESET);
   
       /*restore Enpoints*/
        for (i=0;i<8;i++)
 800c63a:	d1f4      	bne.n	800c626 <USB_Istr+0x19e>
        _SetENDPOINT(i, EP[i]);
      
        esof_counter = 0;
 800c63c:	2300      	movs	r3, #0
 800c63e:	600b      	str	r3, [r1, #0]
 800c640:	e77a      	b.n	800c538 <USB_Istr+0xb0>
 800c642:	bf00      	nop
 800c644:	20001834 	.word	0x20001834
 800c648:	20002090 	.word	0x20002090
 800c64c:	20000ae4 	.word	0x20000ae4
 800c650:	0800ca85 	.word	0x0800ca85
 800c654:	20000ad8 	.word	0x20000ad8
 800c658:	0800c955 	.word	0x0800c955
 800c65c:	20000070 	.word	0x20000070
 800c660:	0800dadd 	.word	0x0800dadd
 800c664:	20000ad4 	.word	0x20000ad4
 800c668:	0800c459 	.word	0x0800c459
 800c66c:	20000ad0 	.word	0x20000ad0

0800c670 <Virtual_Com_Port_SetConfiguration>:
*******************************************************************************/
void Virtual_Com_Port_SetConfiguration(void)
{
  DEVICE_INFO *pInfo = &Device_Info;

  if (pInfo->Current_Configuration != 0)
 800c670:	4b03      	ldr	r3, [pc, #12]	; (800c680 <Virtual_Com_Port_SetConfiguration+0x10>)
 800c672:	7a9b      	ldrb	r3, [r3, #10]
 800c674:	b113      	cbz	r3, 800c67c <Virtual_Com_Port_SetConfiguration+0xc>
  {
    /* Device configured */
    bDeviceState = CONFIGURED;
 800c676:	4b03      	ldr	r3, [pc, #12]	; (800c684 <Virtual_Com_Port_SetConfiguration+0x14>)
 800c678:	2205      	movs	r2, #5
 800c67a:	601a      	str	r2, [r3, #0]
 800c67c:	4770      	bx	lr
 800c67e:	bf00      	nop
 800c680:	2000206c 	.word	0x2000206c
 800c684:	20000ae0 	.word	0x20000ae0

0800c688 <Virtual_Com_Port_SetDeviceAddress>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_SetDeviceAddress (void)
{
  bDeviceState = ADDRESSED;
 800c688:	f640 23e0 	movw	r3, #2784	; 0xae0
 800c68c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c690:	2204      	movs	r2, #4
 800c692:	601a      	str	r2, [r3, #0]
 800c694:	4770      	bx	lr
 800c696:	bf00      	nop

0800c698 <Virtual_Com_Port_Status_In>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Status_In(void)
{
  if (Request == SET_LINE_CODING)
 800c698:	4b03      	ldr	r3, [pc, #12]	; (800c6a8 <Virtual_Com_Port_Status_In+0x10>)
 800c69a:	781a      	ldrb	r2, [r3, #0]
 800c69c:	2a20      	cmp	r2, #32
 800c69e:	d101      	bne.n	800c6a4 <Virtual_Com_Port_Status_In+0xc>
  {
    //USART_Config();
    Request = 0;
 800c6a0:	2200      	movs	r2, #0
 800c6a2:	701a      	strb	r2, [r3, #0]
 800c6a4:	4770      	bx	lr
 800c6a6:	bf00      	nop
 800c6a8:	20000adc 	.word	0x20000adc

0800c6ac <Virtual_Com_Port_Status_Out>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Status_Out(void)
{}
 800c6ac:	4770      	bx	lr
 800c6ae:	bf00      	nop

0800c6b0 <Virtual_Com_Port_Data_Setup>:
{
  uint8_t    *(*CopyRoutine)(uint16_t);

  CopyRoutine = NULL;

  if (RequestNo == GET_LINE_CODING)
 800c6b0:	2821      	cmp	r0, #33	; 0x21
* Input          : Request Nb.
* Output         : None.
* Return         : USB_UNSUPPORT or USB_SUCCESS.
*******************************************************************************/
RESULT Virtual_Com_Port_Data_Setup(uint8_t RequestNo)
{
 800c6b2:	b510      	push	{r4, lr}
 800c6b4:	4603      	mov	r3, r0
  uint8_t    *(*CopyRoutine)(uint16_t);

  CopyRoutine = NULL;

  if (RequestNo == GET_LINE_CODING)
 800c6b6:	d003      	beq.n	800c6c0 <Virtual_Com_Port_Data_Setup+0x10>
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    {
      CopyRoutine = Virtual_Com_Port_GetLineCoding;
    }
  }
  else if (RequestNo == SET_LINE_CODING)
 800c6b8:	2820      	cmp	r0, #32
 800c6ba:	d011      	beq.n	800c6e0 <Virtual_Com_Port_Data_Setup+0x30>
    Request = SET_LINE_CODING;
  }

  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
 800c6bc:	2002      	movs	r0, #2
 800c6be:	bd10      	pop	{r4, pc}

  CopyRoutine = NULL;

  if (RequestNo == GET_LINE_CODING)
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 800c6c0:	4a0f      	ldr	r2, [pc, #60]	; (800c700 <Virtual_Com_Port_Data_Setup+0x50>)
 800c6c2:	6813      	ldr	r3, [r2, #0]
 800c6c4:	781b      	ldrb	r3, [r3, #0]
 800c6c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c6ca:	2b21      	cmp	r3, #33	; 0x21
 800c6cc:	d1f6      	bne.n	800c6bc <Virtual_Com_Port_Data_Setup+0xc>
    {
      CopyRoutine = Virtual_Com_Port_GetLineCoding;
 800c6ce:	490d      	ldr	r1, [pc, #52]	; (800c704 <Virtual_Com_Port_Data_Setup+0x54>)
  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
  }

  pInformation->Ctrl_Info.CopyData = CopyRoutine;
 800c6d0:	6813      	ldr	r3, [r2, #0]
  pInformation->Ctrl_Info.Usb_wOffset = 0;
 800c6d2:	2400      	movs	r4, #0
  (*CopyRoutine)(0);
 800c6d4:	4620      	mov	r0, r4
  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
  }

  pInformation->Ctrl_Info.CopyData = CopyRoutine;
 800c6d6:	6199      	str	r1, [r3, #24]
  pInformation->Ctrl_Info.Usb_wOffset = 0;
 800c6d8:	825c      	strh	r4, [r3, #18]
  (*CopyRoutine)(0);
 800c6da:	4788      	blx	r1
  return USB_SUCCESS;
 800c6dc:	4620      	mov	r0, r4
 800c6de:	bd10      	pop	{r4, pc}
      CopyRoutine = Virtual_Com_Port_GetLineCoding;
    }
  }
  else if (RequestNo == SET_LINE_CODING)
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 800c6e0:	4a07      	ldr	r2, [pc, #28]	; (800c700 <Virtual_Com_Port_Data_Setup+0x50>)
 800c6e2:	6811      	ldr	r1, [r2, #0]
 800c6e4:	7809      	ldrb	r1, [r1, #0]
 800c6e6:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800c6ea:	2921      	cmp	r1, #33	; 0x21
 800c6ec:	d003      	beq.n	800c6f6 <Virtual_Com_Port_Data_Setup+0x46>
    {
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
    }
    Request = SET_LINE_CODING;
 800c6ee:	4a06      	ldr	r2, [pc, #24]	; (800c708 <Virtual_Com_Port_Data_Setup+0x58>)
  }

  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
 800c6f0:	2002      	movs	r0, #2
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    {
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
    }
    Request = SET_LINE_CODING;
 800c6f2:	7013      	strb	r3, [r2, #0]

  pInformation->Ctrl_Info.CopyData = CopyRoutine;
  pInformation->Ctrl_Info.Usb_wOffset = 0;
  (*CopyRoutine)(0);
  return USB_SUCCESS;
}
 800c6f4:	bd10      	pop	{r4, pc}
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    {
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
    }
    Request = SET_LINE_CODING;
 800c6f6:	4804      	ldr	r0, [pc, #16]	; (800c708 <Virtual_Com_Port_Data_Setup+0x58>)
  }
  else if (RequestNo == SET_LINE_CODING)
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    {
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
 800c6f8:	4904      	ldr	r1, [pc, #16]	; (800c70c <Virtual_Com_Port_Data_Setup+0x5c>)
    }
    Request = SET_LINE_CODING;
 800c6fa:	7003      	strb	r3, [r0, #0]
 800c6fc:	e7e8      	b.n	800c6d0 <Virtual_Com_Port_Data_Setup+0x20>
 800c6fe:	bf00      	nop
 800c700:	2000208c 	.word	0x2000208c
 800c704:	0800c745 	.word	0x0800c745
 800c708:	20000adc 	.word	0x20000adc
 800c70c:	0800c75d 	.word	0x0800c75d

0800c710 <Virtual_Com_Port_NoData_Setup>:
* Return         : USB_UNSUPPORT or USB_SUCCESS.
*******************************************************************************/
RESULT Virtual_Com_Port_NoData_Setup(uint8_t RequestNo)
{

  if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 800c710:	4b07      	ldr	r3, [pc, #28]	; (800c730 <Virtual_Com_Port_NoData_Setup+0x20>)
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	781b      	ldrb	r3, [r3, #0]
 800c716:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c71a:	2b21      	cmp	r3, #33	; 0x21
 800c71c:	d001      	beq.n	800c722 <Virtual_Com_Port_NoData_Setup+0x12>
    {
      return USB_SUCCESS;
    }
  }

  return USB_UNSUPPORT;
 800c71e:	2002      	movs	r0, #2
}
 800c720:	4770      	bx	lr
RESULT Virtual_Com_Port_NoData_Setup(uint8_t RequestNo)
{

  if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
  {
    if (RequestNo == SET_COMM_FEATURE)
 800c722:	2802      	cmp	r0, #2
 800c724:	d001      	beq.n	800c72a <Virtual_Com_Port_NoData_Setup+0x1a>
    {
      return USB_SUCCESS;
    }
    else if (RequestNo == SET_CONTROL_LINE_STATE)
 800c726:	2822      	cmp	r0, #34	; 0x22
 800c728:	d1f9      	bne.n	800c71e <Virtual_Com_Port_NoData_Setup+0xe>

  if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
  {
    if (RequestNo == SET_COMM_FEATURE)
    {
      return USB_SUCCESS;
 800c72a:	2000      	movs	r0, #0
 800c72c:	4770      	bx	lr
 800c72e:	bf00      	nop
 800c730:	2000208c 	.word	0x2000208c

0800c734 <Virtual_Com_Port_Get_Interface_Setting>:
* Output         : None.
* Return         : The address of the string descriptors.
*******************************************************************************/
RESULT Virtual_Com_Port_Get_Interface_Setting(uint8_t Interface, uint8_t AlternateSetting)
{
  if (AlternateSetting > 0)
 800c734:	b109      	cbz	r1, 800c73a <Virtual_Com_Port_Get_Interface_Setting+0x6>
  {
    return USB_UNSUPPORT;
 800c736:	2002      	movs	r0, #2
 800c738:	4770      	bx	lr
  }
  else if (Interface > 1)
 800c73a:	2801      	cmp	r0, #1
 800c73c:	d8fb      	bhi.n	800c736 <Virtual_Com_Port_Get_Interface_Setting+0x2>
  {
    return USB_UNSUPPORT;
  }
  return USB_SUCCESS;
 800c73e:	4608      	mov	r0, r1
}
 800c740:	4770      	bx	lr
 800c742:	bf00      	nop

0800c744 <Virtual_Com_Port_GetLineCoding>:
* Output         : None.
* Return         : Linecoding structure base address.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetLineCoding(uint16_t Length)
{
  if (Length == 0)
 800c744:	b108      	cbz	r0, 800c74a <Virtual_Com_Port_GetLineCoding+0x6>
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
    return NULL;
  }
  return(uint8_t *)&linecoding;
 800c746:	4803      	ldr	r0, [pc, #12]	; (800c754 <Virtual_Com_Port_GetLineCoding+0x10>)
}
 800c748:	4770      	bx	lr
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetLineCoding(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
 800c74a:	4b03      	ldr	r3, [pc, #12]	; (800c758 <Virtual_Com_Port_GetLineCoding+0x14>)
 800c74c:	2208      	movs	r2, #8
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	821a      	strh	r2, [r3, #16]
    return NULL;
 800c752:	4770      	bx	lr
 800c754:	200000ec 	.word	0x200000ec
 800c758:	2000208c 	.word	0x2000208c

0800c75c <Virtual_Com_Port_SetLineCoding>:
* Output         : None.
* Return         : Linecoding structure base address.
*******************************************************************************/
uint8_t *Virtual_Com_Port_SetLineCoding(uint16_t Length)
{
  if (Length == 0)
 800c75c:	b108      	cbz	r0, 800c762 <Virtual_Com_Port_SetLineCoding+0x6>
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
    return NULL;
  }
  return(uint8_t *)&linecoding;
 800c75e:	4803      	ldr	r0, [pc, #12]	; (800c76c <Virtual_Com_Port_SetLineCoding+0x10>)
}
 800c760:	4770      	bx	lr
*******************************************************************************/
uint8_t *Virtual_Com_Port_SetLineCoding(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
 800c762:	4b03      	ldr	r3, [pc, #12]	; (800c770 <Virtual_Com_Port_SetLineCoding+0x14>)
 800c764:	2208      	movs	r2, #8
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	821a      	strh	r2, [r3, #16]
    return NULL;
 800c76a:	4770      	bx	lr
 800c76c:	200000ec 	.word	0x200000ec
 800c770:	2000208c 	.word	0x2000208c

0800c774 <Virtual_Com_Port_GetStringDescriptor>:
* Input          : Length.
* Output         : None.
* Return         : The address of the string descriptors.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetStringDescriptor(uint16_t Length)
{
 800c774:	b508      	push	{r3, lr}
  uint8_t wValue0 = pInformation->USBwValue0;
 800c776:	4b06      	ldr	r3, [pc, #24]	; (800c790 <Virtual_Com_Port_GetStringDescriptor+0x1c>)
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	78db      	ldrb	r3, [r3, #3]
  if (wValue0 > 4)
 800c77c:	2b04      	cmp	r3, #4
 800c77e:	d805      	bhi.n	800c78c <Virtual_Com_Port_GetStringDescriptor+0x18>
  {
    return NULL;
  }
  else
  {
    return Standard_GetDescriptorData(Length, &String_Descriptor[wValue0]);
 800c780:	4904      	ldr	r1, [pc, #16]	; (800c794 <Virtual_Com_Port_GetStringDescriptor+0x20>)
 800c782:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c786:	4b04      	ldr	r3, [pc, #16]	; (800c798 <Virtual_Com_Port_GetStringDescriptor+0x24>)
 800c788:	4798      	blx	r3
 800c78a:	bd08      	pop	{r3, pc}
uint8_t *Virtual_Com_Port_GetStringDescriptor(uint16_t Length)
{
  uint8_t wValue0 = pInformation->USBwValue0;
  if (wValue0 > 4)
  {
    return NULL;
 800c78c:	2000      	movs	r0, #0
  }
  else
  {
    return Standard_GetDescriptorData(Length, &String_Descriptor[wValue0]);
  }
}
 800c78e:	bd08      	pop	{r3, pc}
 800c790:	2000208c 	.word	0x2000208c
 800c794:	200000cc 	.word	0x200000cc
 800c798:	0800d1b9 	.word	0x0800d1b9

0800c79c <Virtual_Com_Port_GetConfigDescriptor>:
* Input          : Length.
* Output         : None.
* Return         : The address of the configuration descriptor.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetConfigDescriptor(uint16_t Length)
{
 800c79c:	b508      	push	{r3, lr}
  return Standard_GetDescriptorData(Length, &Config_Descriptor);
 800c79e:	f240 0168 	movw	r1, #104	; 0x68
 800c7a2:	f24d 13b9 	movw	r3, #53689	; 0xd1b9
 800c7a6:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800c7aa:	f6c0 0300 	movt	r3, #2048	; 0x800
 800c7ae:	4798      	blx	r3
}
 800c7b0:	bd08      	pop	{r3, pc}
 800c7b2:	bf00      	nop

0800c7b4 <Virtual_Com_Port_GetDeviceDescriptor>:
* Input          : Length.
* Output         : None.
* Return         : The address of the device descriptor.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetDeviceDescriptor(uint16_t Length)
{
 800c7b4:	b508      	push	{r3, lr}
  return Standard_GetDescriptorData(Length, &Device_Descriptor);
 800c7b6:	f240 01c4 	movw	r1, #196	; 0xc4
 800c7ba:	f24d 13b9 	movw	r3, #53689	; 0xd1b9
 800c7be:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800c7c2:	f6c0 0300 	movt	r3, #2048	; 0x800
 800c7c6:	4798      	blx	r3
}
 800c7c8:	bd08      	pop	{r3, pc}
 800c7ca:	bf00      	nop

0800c7cc <Virtual_Com_Port_Reset>:
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 800c7cc:	f242 028c 	movw	r2, #8332	; 0x208c

  /* Current Feature initialization */
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 800c7d0:	f24e 2380 	movw	r3, #57984	; 0xe280
 800c7d4:	f6c0 0300 	movt	r3, #2048	; 0x800
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 800c7d8:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800c7dc:	6812      	ldr	r2, [r2, #0]

  /* Current Feature initialization */
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 800c7de:	79d9      	ldrb	r1, [r3, #7]
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
 800c7e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];

  /* Set Virtual_Com_Port DEVICE with the default Interface*/
  pInformation->Current_Interface = 0;

  SetBTABLE(BTABLE_ADDRESS);
 800c7e4:	f24d 73fd 	movw	r3, #55293	; 0xd7fd
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 800c7e8:	2400      	movs	r4, #0

  /* Current Feature initialization */
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 800c7ea:	7251      	strb	r1, [r2, #9]
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 800c7ec:	7294      	strb	r4, [r2, #10]

  /* Current Feature initialization */
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];

  /* Set Virtual_Com_Port DEVICE with the default Interface*/
  pInformation->Current_Interface = 0;
 800c7ee:	72d4      	strb	r4, [r2, #11]

  SetBTABLE(BTABLE_ADDRESS);
 800c7f0:	f6c0 0300 	movt	r3, #2048	; 0x800
 800c7f4:	4620      	mov	r0, r4

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
 800c7f6:	f64d 0611 	movw	r6, #55313	; 0xd811
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];

  /* Set Virtual_Com_Port DEVICE with the default Interface*/
  pInformation->Current_Interface = 0;

  SetBTABLE(BTABLE_ADDRESS);
 800c7fa:	4798      	blx	r3

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
 800c7fc:	f6c0 0600 	movt	r6, #2048	; 0x800
 800c800:	4620      	mov	r0, r4
 800c802:	f44f 7100 	mov.w	r1, #512	; 0x200
  SetEPTxStatus(ENDP0, EP_TX_STALL);
 800c806:	f64d 0529 	movw	r5, #55337	; 0xd829
  pInformation->Current_Interface = 0;

  SetBTABLE(BTABLE_ADDRESS);

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
 800c80a:	47b0      	blx	r6
  SetEPTxStatus(ENDP0, EP_TX_STALL);
 800c80c:	f6c0 0500 	movt	r5, #2048	; 0x800
 800c810:	2110      	movs	r1, #16
 800c812:	4620      	mov	r0, r4
  SetEPRxAddr(ENDP0, ENDP0_RXADDR);
 800c814:	f64d 1a7d 	movw	sl, #55677	; 0xd97d

  SetBTABLE(BTABLE_ADDRESS);

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
  SetEPTxStatus(ENDP0, EP_TX_STALL);
 800c818:	47a8      	blx	r5
  SetEPRxAddr(ENDP0, ENDP0_RXADDR);
 800c81a:	f6c0 0a00 	movt	sl, #2048	; 0x800
 800c81e:	2140      	movs	r1, #64	; 0x40
 800c820:	4620      	mov	r0, r4
  SetEPTxAddr(ENDP0, ENDP0_TXADDR);
 800c822:	f64d 1859 	movw	r8, #55641	; 0xd959
  SetBTABLE(BTABLE_ADDRESS);

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
  SetEPTxStatus(ENDP0, EP_TX_STALL);
  SetEPRxAddr(ENDP0, ENDP0_RXADDR);
 800c826:	47d0      	blx	sl
  SetEPTxAddr(ENDP0, ENDP0_TXADDR);
 800c828:	f6c0 0800 	movt	r8, #2048	; 0x800
 800c82c:	2180      	movs	r1, #128	; 0x80
 800c82e:	4620      	mov	r0, r4
 800c830:	47c0      	blx	r8
  Clear_Status_Out(ENDP0);
 800c832:	f64d 03f1 	movw	r3, #55537	; 0xd8f1
 800c836:	4620      	mov	r0, r4
 800c838:	f6c0 0300 	movt	r3, #2048	; 0x800
 800c83c:	4798      	blx	r3
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 800c83e:	f240 0370 	movw	r3, #112	; 0x70
 800c842:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c846:	f64d 2905 	movw	r9, #55813	; 0xda05
 800c84a:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
 800c84e:	f6c0 0900 	movt	r9, #2048	; 0x800
 800c852:	4620      	mov	r0, r4
 800c854:	47c8      	blx	r9
  SetEPRxValid(ENDP0);
 800c856:	f64d 03cd 	movw	r3, #55501	; 0xd8cd
 800c85a:	f6c0 0300 	movt	r3, #2048	; 0x800
 800c85e:	4620      	mov	r0, r4
 800c860:	4798      	blx	r3

  /* Initialize Endpoint 1 */
  SetEPType(ENDP1, EP_BULK);
 800c862:	2001      	movs	r0, #1
 800c864:	4621      	mov	r1, r4
 800c866:	47b0      	blx	r6
  SetEPTxAddr(ENDP1, ENDP1_TXADDR);
 800c868:	2001      	movs	r0, #1
 800c86a:	21c0      	movs	r1, #192	; 0xc0
 800c86c:	47c0      	blx	r8
  SetEPTxStatus(ENDP1, EP_TX_NAK);
  SetEPRxStatus(ENDP1, EP_RX_DIS);
 800c86e:	f64d 0769 	movw	r7, #55401	; 0xd869
  SetEPRxValid(ENDP0);

  /* Initialize Endpoint 1 */
  SetEPType(ENDP1, EP_BULK);
  SetEPTxAddr(ENDP1, ENDP1_TXADDR);
  SetEPTxStatus(ENDP1, EP_TX_NAK);
 800c872:	2001      	movs	r0, #1
 800c874:	2120      	movs	r1, #32
 800c876:	47a8      	blx	r5
  SetEPRxStatus(ENDP1, EP_RX_DIS);
 800c878:	f6c0 0700 	movt	r7, #2048	; 0x800
 800c87c:	2001      	movs	r0, #1
 800c87e:	4621      	mov	r1, r4
 800c880:	47b8      	blx	r7

  /* Initialize Endpoint 2 */
  SetEPType(ENDP2, EP_INTERRUPT);
 800c882:	2002      	movs	r0, #2
 800c884:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800c888:	47b0      	blx	r6
  SetEPTxAddr(ENDP2, ENDP2_TXADDR);
 800c88a:	2002      	movs	r0, #2
 800c88c:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c890:	47c0      	blx	r8
  SetEPRxStatus(ENDP2, EP_RX_DIS);
 800c892:	2002      	movs	r0, #2
 800c894:	4621      	mov	r1, r4
 800c896:	47b8      	blx	r7
  SetEPTxStatus(ENDP2, EP_TX_NAK);
 800c898:	2002      	movs	r0, #2
 800c89a:	2120      	movs	r1, #32
 800c89c:	47a8      	blx	r5

  /* Initialize Endpoint 3 */
  SetEPType(ENDP3, EP_BULK);
 800c89e:	2003      	movs	r0, #3
 800c8a0:	4621      	mov	r1, r4
 800c8a2:	47b0      	blx	r6
  SetEPRxAddr(ENDP3, ENDP3_RXADDR);
 800c8a4:	2003      	movs	r0, #3
 800c8a6:	f44f 7188 	mov.w	r1, #272	; 0x110
 800c8aa:	47d0      	blx	sl
  SetEPRxCount(ENDP3, VIRTUAL_COM_PORT_DATA_SIZE);
 800c8ac:	2003      	movs	r0, #3
 800c8ae:	2140      	movs	r1, #64	; 0x40
 800c8b0:	47c8      	blx	r9
  SetEPRxStatus(ENDP3, EP_RX_VALID);
 800c8b2:	2003      	movs	r0, #3
 800c8b4:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800c8b8:	47b8      	blx	r7
  SetEPTxStatus(ENDP3, EP_TX_DIS);
 800c8ba:	4621      	mov	r1, r4
 800c8bc:	2003      	movs	r0, #3
 800c8be:	47a8      	blx	r5

  /* Set this device to response on default address */
  SetDeviceAddress(0);
 800c8c0:	f24d 63ad 	movw	r3, #54957	; 0xd6ad
 800c8c4:	f6c0 0300 	movt	r3, #2048	; 0x800
 800c8c8:	4620      	mov	r0, r4
 800c8ca:	4798      	blx	r3
  
  bDeviceState = ATTACHED;
 800c8cc:	f640 23e0 	movw	r3, #2784	; 0xae0
 800c8d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c8d4:	2201      	movs	r2, #1
 800c8d6:	601a      	str	r2, [r3, #0]
 800c8d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800c8dc <Virtual_Com_Port_init>:
void Virtual_Com_Port_init(void)
{

  /* Update the serial number string descriptor with the data from the unique
  ID*/
  Get_SerialNum();
 800c8dc:	f64c 539d 	movw	r3, #52637	; 0xcd9d
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_init(void)
{
 800c8e0:	b510      	push	{r4, lr}

  /* Update the serial number string descriptor with the data from the unique
  ID*/
  Get_SerialNum();
 800c8e2:	f6c0 0300 	movt	r3, #2048	; 0x800
 800c8e6:	4798      	blx	r3

  pInformation->Current_Configuration = 0;
 800c8e8:	f242 038c 	movw	r3, #8332	; 0x208c
 800c8ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c8f0:	681a      	ldr	r2, [r3, #0]
 800c8f2:	2400      	movs	r4, #0

  /* Connect the device */
  PowerOn();
 800c8f4:	f64c 1319 	movw	r3, #51481	; 0xc919

  /* Update the serial number string descriptor with the data from the unique
  ID*/
  Get_SerialNum();

  pInformation->Current_Configuration = 0;
 800c8f8:	7294      	strb	r4, [r2, #10]

  /* Connect the device */
  PowerOn();
 800c8fa:	f6c0 0300 	movt	r3, #2048	; 0x800
 800c8fe:	4798      	blx	r3

  /* Perform basic device initialization operations */
  USB_SIL_Init();
 800c900:	f64d 2379 	movw	r3, #55929	; 0xda79
 800c904:	f6c0 0300 	movt	r3, #2048	; 0x800
 800c908:	4798      	blx	r3

  /* configure the USART to the default settings */
  //USART_Config_Default();

  bDeviceState = UNCONNECTED;
 800c90a:	f640 23e0 	movw	r3, #2784	; 0xae0
 800c90e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c912:	601c      	str	r4, [r3, #0]
 800c914:	bd10      	pop	{r4, pc}
 800c916:	bf00      	nop

0800c918 <PowerOn>:
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
RESULT PowerOn(void)
{
 800c918:	b538      	push	{r3, r4, r5, lr}
  uint16_t wRegVal;

  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);
 800c91a:	f64c 43b1 	movw	r3, #52401	; 0xccb1
 800c91e:	2001      	movs	r0, #1
 800c920:	f6c0 0300 	movt	r3, #2048	; 0x800
 800c924:	4798      	blx	r3

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
  /*** Clear pending interrupts ***/
  _SetISTR(0);
 800c926:	f645 4544 	movw	r5, #23620	; 0x5c44
  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);

  /*** CNTR_PWDN = 0 ***/
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);
 800c92a:	f645 4340 	movw	r3, #23616	; 0x5c40
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
  /*** Clear pending interrupts ***/
  _SetISTR(0);
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 800c92e:	f242 0290 	movw	r2, #8336	; 0x2090
  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);

  /*** CNTR_PWDN = 0 ***/
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);
 800c932:	f2c4 0300 	movt	r3, #16384	; 0x4000

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
 800c936:	2100      	movs	r1, #0
  /*** Clear pending interrupts ***/
  _SetISTR(0);
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 800c938:	f44f 54e0 	mov.w	r4, #7168	; 0x1c00
  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);

  /*** CNTR_PWDN = 0 ***/
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);
 800c93c:	2001      	movs	r0, #1

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
  /*** Clear pending interrupts ***/
  _SetISTR(0);
 800c93e:	f2c4 0500 	movt	r5, #16384	; 0x4000
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 800c942:	f2c2 0200 	movt	r2, #8192	; 0x2000
  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);

  /*** CNTR_PWDN = 0 ***/
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);
 800c946:	6018      	str	r0, [r3, #0]

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
 800c948:	6019      	str	r1, [r3, #0]
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
  _SetCNTR(wInterrupt_Mask);
  
  return USB_SUCCESS;
}
 800c94a:	4608      	mov	r0, r1

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
  /*** Clear pending interrupts ***/
  _SetISTR(0);
 800c94c:	6029      	str	r1, [r5, #0]
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 800c94e:	8014      	strh	r4, [r2, #0]
  _SetCNTR(wInterrupt_Mask);
 800c950:	601c      	str	r4, [r3, #0]
  
  return USB_SUCCESS;
}
 800c952:	bd38      	pop	{r3, r4, r5, pc}

0800c954 <Suspend>:
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
void Suspend(void)
{
 800c954:	b570      	push	{r4, r5, r6, lr}
	uint32_t i =0;
	uint16_t wCNTR;
	uint32_t tmpreg = 0;
  __IO uint32_t savePWR_CR=0;
 800c956:	2300      	movs	r3, #0
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
void Suspend(void)
{
 800c958:	b082      	sub	sp, #8
  __IO uint32_t savePWR_CR=0;
	/* suspend preparation */
	/* ... */
	
	/*Store CNTR value */
	wCNTR = _GetCNTR();  
 800c95a:	f645 4140 	movw	r1, #23616	; 0x5c40
 800c95e:	f2c4 0100 	movt	r1, #16384	; 0x4000
void Suspend(void)
{
	uint32_t i =0;
	uint16_t wCNTR;
	uint32_t tmpreg = 0;
  __IO uint32_t savePWR_CR=0;
 800c962:	9301      	str	r3, [sp, #4]
	/* suspend preparation */
	/* ... */
	
	/*Store CNTR value */
	wCNTR = _GetCNTR();  
 800c964:	f44f 42b8 	mov.w	r2, #23552	; 0x5c00
 800c968:	680d      	ldr	r5, [r1, #0]
 800c96a:	493a      	ldr	r1, [pc, #232]	; (800ca54 <Suspend+0x100>)
 800c96c:	f2c4 0200 	movt	r2, #16384	; 0x4000

    /* This a sequence to apply a force RESET to handle a robustness case */
    
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 800c970:	f852 0b04 	ldr.w	r0, [r2], #4
 800c974:	b280      	uxth	r0, r0
 800c976:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 800c97a:	3301      	adds	r3, #1
 800c97c:	2b08      	cmp	r3, #8
 800c97e:	d1f7      	bne.n	800c970 <Suspend+0x1c>
	
	/* unmask RESET flag */
	wCNTR|=CNTR_RESETM;
	_SetCNTR(wCNTR);
 800c980:	b2aa      	uxth	r2, r5
	/*apply FRES */
	wCNTR|=CNTR_FRES;
	_SetCNTR(wCNTR);
	
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
 800c982:	f64f 74fe 	movw	r4, #65534	; 0xfffe
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
	
	/* unmask RESET flag */
	wCNTR|=CNTR_RESETM;
	_SetCNTR(wCNTR);
 800c986:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c98a:	f645 4340 	movw	r3, #23616	; 0x5c40
	/*apply FRES */
	wCNTR|=CNTR_FRES;
	_SetCNTR(wCNTR);
	
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
 800c98e:	402c      	ands	r4, r5
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
	
	/* unmask RESET flag */
	wCNTR|=CNTR_RESETM;
	_SetCNTR(wCNTR);
 800c990:	f2c4 0300 	movt	r3, #16384	; 0x4000
	
	/*apply FRES */
	wCNTR|=CNTR_FRES;
	_SetCNTR(wCNTR);
 800c994:	f042 0601 	orr.w	r6, r2, #1
	
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
 800c998:	f444 6580 	orr.w	r5, r4, #1024	; 0x400
	_SetCNTR(wCNTR);
	
	/*poll for RESET flag in ISTR*/
	while((_GetISTR()&ISTR_RESET) == 0);
 800c99c:	f645 4044 	movw	r0, #23620	; 0x5c44
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
	
	/* unmask RESET flag */
	wCNTR|=CNTR_RESETM;
	_SetCNTR(wCNTR);
 800c9a0:	601a      	str	r2, [r3, #0]
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
	_SetCNTR(wCNTR);
	
	/*poll for RESET flag in ISTR*/
	while((_GetISTR()&ISTR_RESET) == 0);
 800c9a2:	f2c4 0000 	movt	r0, #16384	; 0x4000
	wCNTR|=CNTR_RESETM;
	_SetCNTR(wCNTR);
	
	/*apply FRES */
	wCNTR|=CNTR_FRES;
	_SetCNTR(wCNTR);
 800c9a6:	601e      	str	r6, [r3, #0]
	
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
	_SetCNTR(wCNTR);
 800c9a8:	601d      	str	r5, [r3, #0]
	
	/*poll for RESET flag in ISTR*/
	while((_GetISTR()&ISTR_RESET) == 0);
 800c9aa:	6802      	ldr	r2, [r0, #0]
 800c9ac:	f645 4344 	movw	r3, #23620	; 0x5c44
 800c9b0:	0552      	lsls	r2, r2, #21
 800c9b2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c9b6:	d5f8      	bpl.n	800c9aa <Suspend+0x56>
	
	/* clear RESET flag in ISTR */
	_SetISTR((uint16_t)CLR_RESET);
 800c9b8:	f44f 42b8 	mov.w	r2, #23552	; 0x5c00
 800c9bc:	f64f 30ff 	movw	r0, #64511	; 0xfbff
 800c9c0:	6018      	str	r0, [r3, #0]
 800c9c2:	f2c4 0200 	movt	r2, #16384	; 0x4000
	
	/*restore Enpoints*/
	for (i=0;i<8;i++)
 800c9c6:	2300      	movs	r3, #0
	_SetENDPOINT(i, EP[i]);
 800c9c8:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
	
	/* clear RESET flag in ISTR */
	_SetISTR((uint16_t)CLR_RESET);
	
	/*restore Enpoints*/
	for (i=0;i<8;i++)
 800c9cc:	3301      	adds	r3, #1
	_SetENDPOINT(i, EP[i]);
 800c9ce:	b280      	uxth	r0, r0
	
	/* clear RESET flag in ISTR */
	_SetISTR((uint16_t)CLR_RESET);
	
	/*restore Enpoints*/
	for (i=0;i<8;i++)
 800c9d0:	2b08      	cmp	r3, #8
	_SetENDPOINT(i, EP[i]);
 800c9d2:	f842 0b04 	str.w	r0, [r2], #4
	
	/* clear RESET flag in ISTR */
	_SetISTR((uint16_t)CLR_RESET);
	
	/*restore Enpoints*/
	for (i=0;i<8;i++)
 800c9d6:	d1f7      	bne.n	800c9c8 <Suspend+0x74>
	_SetENDPOINT(i, EP[i]);
	
	/* Now it is safe to enter macrocell in suspend mode */
	wCNTR |= CNTR_FSUSP;
	_SetCNTR(wCNTR);
 800c9d8:	f645 4340 	movw	r3, #23616	; 0x5c40
 800c9dc:	f2c4 0300 	movt	r3, #16384	; 0x4000
	/*restore Enpoints*/
	for (i=0;i<8;i++)
	_SetENDPOINT(i, EP[i]);
	
	/* Now it is safe to enter macrocell in suspend mode */
	wCNTR |= CNTR_FSUSP;
 800c9e0:	f444 6481 	orr.w	r4, r4, #1032	; 0x408
	_SetCNTR(wCNTR);
 800c9e4:	601c      	str	r4, [r3, #0]
	
	/* force low-power mode in the macrocell */
	wCNTR = _GetCNTR();
 800c9e6:	6819      	ldr	r1, [r3, #0]
	wCNTR |= CNTR_LPMODE;
	_SetCNTR(wCNTR);
	
	/*prepare entry in low power mode (STOP mode)*/
	/* Select the regulator state in STOP mode*/
	savePWR_CR = REG_PWR_CR;
 800c9e8:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
	_SetCNTR(wCNTR);
	
	/* force low-power mode in the macrocell */
	wCNTR = _GetCNTR();
	wCNTR |= CNTR_LPMODE;
	_SetCNTR(wCNTR);
 800c9ec:	b289      	uxth	r1, r1
 800c9ee:	f041 0104 	orr.w	r1, r1, #4
 800c9f2:	6019      	str	r1, [r3, #0]
	
	/*prepare entry in low power mode (STOP mode)*/
	/* Select the regulator state in STOP mode*/
	savePWR_CR = REG_PWR_CR;
 800c9f4:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800c9f8:	6811      	ldr	r1, [r2, #0]
	REG_PWR_CR = tmpreg;
	/* Set SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)
        SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
#else
		REG_SCB_SCR |= SCB_SCR_SLEEPDEEP;       
 800c9fa:	f64e 5410 	movw	r4, #60688	; 0xed10
	wCNTR |= CNTR_LPMODE;
	_SetCNTR(wCNTR);
	
	/*prepare entry in low power mode (STOP mode)*/
	/* Select the regulator state in STOP mode*/
	savePWR_CR = REG_PWR_CR;
 800c9fe:	9101      	str	r1, [sp, #4]
	
	tmpreg = REG_PWR_CR;
 800ca00:	6811      	ldr	r1, [r2, #0]
	REG_PWR_CR = tmpreg;
	/* Set SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)
        SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
#else
		REG_SCB_SCR |= SCB_SCR_SLEEPDEEP;       
 800ca02:	f2ce 0400 	movt	r4, #57344	; 0xe000
	/* Select the regulator state in STOP mode*/
	savePWR_CR = REG_PWR_CR;
	
	tmpreg = REG_PWR_CR;
	/* Clear PDDS and LPDS bits */
	tmpreg &= ((uint32_t)0xFFFFFFFC);
 800ca06:	f021 0103 	bic.w	r1, r1, #3
	/* Set LPDS bit according to PWR_Regulator value */
	tmpreg |= PWR_Regulator_LowPower;
 800ca0a:	f041 0101 	orr.w	r1, r1, #1
	/* Store the new value */
	REG_PWR_CR = tmpreg;
 800ca0e:	6011      	str	r1, [r2, #0]
	/* Set SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)
        SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
#else
		REG_SCB_SCR |= SCB_SCR_SLEEPDEEP;       
 800ca10:	6820      	ldr	r0, [r4, #0]
#endif
	
	/* enter system in STOP mode, only when wakeup flag in not set */
	if((_GetISTR()&ISTR_WKUP)==0)
 800ca12:	f645 4144 	movw	r1, #23620	; 0x5c44
	REG_PWR_CR = tmpreg;
	/* Set SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)
        SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
#else
		REG_SCB_SCR |= SCB_SCR_SLEEPDEEP;       
 800ca16:	f040 0004 	orr.w	r0, r0, #4
 800ca1a:	6020      	str	r0, [r4, #0]
#endif
	
	/* enter system in STOP mode, only when wakeup flag in not set */
	if((_GetISTR()&ISTR_WKUP)==0)
 800ca1c:	f2c4 0100 	movt	r1, #16384	; 0x4000
 800ca20:	6808      	ldr	r0, [r1, #0]
 800ca22:	04c0      	lsls	r0, r0, #19
 800ca24:	d50f      	bpl.n	800ca46 <Suspend+0xf2>
#endif
	}
	else
	{
		/* Clear Wakeup flag */
		_SetISTR(CLR_WKUP);
 800ca26:	f64e 70ff 	movw	r0, #61439	; 0xefff
 800ca2a:	6008      	str	r0, [r1, #0]
		/* clear FSUSP to abort entry in suspend mode  */
        wCNTR = _GetCNTR();
 800ca2c:	6818      	ldr	r0, [r3, #0]
        wCNTR&=~CNTR_FSUSP;
 800ca2e:	f64f 71f7 	movw	r1, #65527	; 0xfff7
 800ca32:	4001      	ands	r1, r0
        _SetCNTR(wCNTR);
 800ca34:	6019      	str	r1, [r3, #0]
		
		/*restore sleep mode configuration */ 
		/* restore Power regulator config in sleep mode*/
		REG_PWR_CR = savePWR_CR;
 800ca36:	9b01      	ldr	r3, [sp, #4]
 800ca38:	6013      	str	r3, [r2, #0]
		
		/* Reset SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)		
                SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
#else
                REG_SCB_SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP);
 800ca3a:	6823      	ldr	r3, [r4, #0]
 800ca3c:	f023 0304 	bic.w	r3, r3, #4
 800ca40:	6023      	str	r3, [r4, #0]
#endif
    }
}
 800ca42:	b002      	add	sp, #8
 800ca44:	bd70      	pop	{r4, r5, r6, pc}
#endif
	
	/* enter system in STOP mode, only when wakeup flag in not set */
	if((_GetISTR()&ISTR_WKUP)==0)
	{
		__WFI();
 800ca46:	4b04      	ldr	r3, [pc, #16]	; (800ca58 <Suspend+0x104>)
 800ca48:	4798      	blx	r3
		/* Reset SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)
                SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk); 
#else
                REG_SCB_SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP); 
 800ca4a:	6823      	ldr	r3, [r4, #0]
 800ca4c:	f023 0304 	bic.w	r3, r3, #4
 800ca50:	6023      	str	r3, [r4, #0]
 800ca52:	e7f6      	b.n	800ca42 <Suspend+0xee>
 800ca54:	2000183c 	.word	0x2000183c
 800ca58:	0800cde1 	.word	0x0800cde1

0800ca5c <Resume_Init>:
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
void Resume_Init(void)
{
 800ca5c:	b510      	push	{r4, lr}
  /* ------------------ ONLY WITH BUS-POWERED DEVICES ---------------------- */
  /* restart the clocks */
  /* ...  */

  /* CNTR_LPMODE = 0 */
  wCNTR = _GetCNTR();
 800ca5e:	f645 4440 	movw	r4, #23616	; 0x5c40
 800ca62:	f2c4 0400 	movt	r4, #16384	; 0x4000
 800ca66:	6823      	ldr	r3, [r4, #0]
  wCNTR &= (~CNTR_LPMODE);
 800ca68:	f64f 72fb 	movw	r2, #65531	; 0xfffb
 800ca6c:	401a      	ands	r2, r3
  _SetCNTR(wCNTR);    
  
  /* restore full power */
  /* ... on connected devices */
  Leave_LowPowerMode();
 800ca6e:	f64c 33e1 	movw	r3, #52193	; 0xcbe1
 800ca72:	f6c0 0300 	movt	r3, #2048	; 0x800
  /* ...  */

  /* CNTR_LPMODE = 0 */
  wCNTR = _GetCNTR();
  wCNTR &= (~CNTR_LPMODE);
  _SetCNTR(wCNTR);    
 800ca76:	6022      	str	r2, [r4, #0]
  
  /* restore full power */
  /* ... on connected devices */
  Leave_LowPowerMode();
 800ca78:	4798      	blx	r3

  /* reset FSUSP bit */
  _SetCNTR(IMR_MSK);
 800ca7a:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800ca7e:	6023      	str	r3, [r4, #0]
 800ca80:	bd10      	pop	{r4, pc}
 800ca82:	bf00      	nop

0800ca84 <Resume>:
*                  decrementing of the ESOF counter in different states.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Resume(RESUME_STATE eResumeSetVal)
{
 800ca84:	b510      	push	{r4, lr}
  uint16_t wCNTR;

  if (eResumeSetVal != RESUME_ESOF)
    ResumeS.eState = eResumeSetVal;
 800ca86:	4c2b      	ldr	r4, [pc, #172]	; (800cb34 <Resume+0xb0>)
*******************************************************************************/
void Resume(RESUME_STATE eResumeSetVal)
{
  uint16_t wCNTR;

  if (eResumeSetVal != RESUME_ESOF)
 800ca88:	2807      	cmp	r0, #7
    ResumeS.eState = eResumeSetVal;
 800ca8a:	bf18      	it	ne
 800ca8c:	7020      	strbne	r0, [r4, #0]
  switch (ResumeS.eState)
 800ca8e:	7823      	ldrb	r3, [r4, #0]
 800ca90:	2b05      	cmp	r3, #5
 800ca92:	d819      	bhi.n	800cac8 <Resume+0x44>
 800ca94:	e8df f003 	tbb	[pc, r3]
 800ca98:	2f2a221b 	.word	0x2f2a221b
 800ca9c:	033a      	.short	0x033a
      _SetCNTR(wCNTR);
      ResumeS.eState = RESUME_ON;
      ResumeS.bESOFcnt = 10;
      break;
    case RESUME_ON:    
      ResumeS.bESOFcnt--;
 800ca9e:	7863      	ldrb	r3, [r4, #1]
 800caa0:	3b01      	subs	r3, #1
 800caa2:	b2db      	uxtb	r3, r3
 800caa4:	7063      	strb	r3, [r4, #1]
      if (ResumeS.bESOFcnt == 0)
 800caa6:	7863      	ldrb	r3, [r4, #1]
 800caa8:	b983      	cbnz	r3, 800cacc <Resume+0x48>
      {
        wCNTR = _GetCNTR();
 800caaa:	f645 4240 	movw	r2, #23616	; 0x5c40
 800caae:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800cab2:	6810      	ldr	r0, [r2, #0]
        wCNTR &= (~CNTR_RESUME);
 800cab4:	f64f 71ef 	movw	r1, #65519	; 0xffef
 800cab8:	4001      	ands	r1, r0
        _SetCNTR(wCNTR);
 800caba:	6011      	str	r1, [r2, #0]
        ResumeS.eState = RESUME_OFF;
 800cabc:	4a1d      	ldr	r2, [pc, #116]	; (800cb34 <Resume+0xb0>)
 800cabe:	2106      	movs	r1, #6
 800cac0:	7011      	strb	r1, [r2, #0]
        remotewakeupon = 0;
 800cac2:	4a1d      	ldr	r2, [pc, #116]	; (800cb38 <Resume+0xb4>)
 800cac4:	6013      	str	r3, [r2, #0]
 800cac6:	bd10      	pop	{r4, pc}
      }
      break;
    case RESUME_OFF:
    case RESUME_ESOF:
    default:
      ResumeS.eState = RESUME_OFF;
 800cac8:	2306      	movs	r3, #6
 800caca:	7023      	strb	r3, [r4, #0]
 800cacc:	bd10      	pop	{r4, pc}
  if (eResumeSetVal != RESUME_ESOF)
    ResumeS.eState = eResumeSetVal;
  switch (ResumeS.eState)
  {
    case RESUME_EXTERNAL:
      if (remotewakeupon ==0)
 800cace:	4b1a      	ldr	r3, [pc, #104]	; (800cb38 <Resume+0xb4>)
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d028      	beq.n	800cb28 <Resume+0xa4>
        Resume_Init();
        ResumeS.eState = RESUME_OFF;
      }
      else /* RESUME detected during the RemoteWAkeup signalling => keep RemoteWakeup handling*/
      {
        ResumeS.eState = RESUME_ON;
 800cad6:	2305      	movs	r3, #5
 800cad8:	7023      	strb	r3, [r4, #0]
 800cada:	bd10      	pop	{r4, pc}
      }
      break;
    case RESUME_INTERNAL:
      Resume_Init();
 800cadc:	4b17      	ldr	r3, [pc, #92]	; (800cb3c <Resume+0xb8>)
 800cade:	4798      	blx	r3
      ResumeS.eState = RESUME_START;
 800cae0:	2304      	movs	r3, #4
 800cae2:	7023      	strb	r3, [r4, #0]
      remotewakeupon = 1;
 800cae4:	4b14      	ldr	r3, [pc, #80]	; (800cb38 <Resume+0xb4>)
 800cae6:	2201      	movs	r2, #1
 800cae8:	601a      	str	r2, [r3, #0]
      break;
 800caea:	bd10      	pop	{r4, pc}
    case RESUME_LATER:
      ResumeS.bESOFcnt = 2;
 800caec:	2302      	movs	r3, #2
 800caee:	7063      	strb	r3, [r4, #1]
      ResumeS.eState = RESUME_WAIT;
 800caf0:	2303      	movs	r3, #3
 800caf2:	7023      	strb	r3, [r4, #0]
      break;
 800caf4:	bd10      	pop	{r4, pc}
    case RESUME_WAIT:
      ResumeS.bESOFcnt--;
 800caf6:	7863      	ldrb	r3, [r4, #1]
 800caf8:	3b01      	subs	r3, #1
 800cafa:	b2db      	uxtb	r3, r3
 800cafc:	7063      	strb	r3, [r4, #1]
      if (ResumeS.bESOFcnt == 0)
 800cafe:	7863      	ldrb	r3, [r4, #1]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d1e3      	bne.n	800cacc <Resume+0x48>
        ResumeS.eState = RESUME_START;
 800cb04:	4b0b      	ldr	r3, [pc, #44]	; (800cb34 <Resume+0xb0>)
 800cb06:	2204      	movs	r2, #4
 800cb08:	701a      	strb	r2, [r3, #0]
 800cb0a:	bd10      	pop	{r4, pc}
      break;
    case RESUME_START:
      wCNTR = _GetCNTR();
 800cb0c:	f645 4340 	movw	r3, #23616	; 0x5c40
 800cb10:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800cb14:	681a      	ldr	r2, [r3, #0]
      wCNTR |= CNTR_RESUME;
      _SetCNTR(wCNTR);
 800cb16:	b292      	uxth	r2, r2
 800cb18:	f042 0210 	orr.w	r2, r2, #16
 800cb1c:	601a      	str	r2, [r3, #0]
      ResumeS.eState = RESUME_ON;
 800cb1e:	2305      	movs	r3, #5
 800cb20:	7023      	strb	r3, [r4, #0]
      ResumeS.bESOFcnt = 10;
 800cb22:	230a      	movs	r3, #10
 800cb24:	7063      	strb	r3, [r4, #1]
      break;
 800cb26:	bd10      	pop	{r4, pc}
  switch (ResumeS.eState)
  {
    case RESUME_EXTERNAL:
      if (remotewakeupon ==0)
      {
        Resume_Init();
 800cb28:	4b04      	ldr	r3, [pc, #16]	; (800cb3c <Resume+0xb8>)
 800cb2a:	4798      	blx	r3
        ResumeS.eState = RESUME_OFF;
 800cb2c:	2306      	movs	r3, #6
 800cb2e:	7023      	strb	r3, [r4, #0]
 800cb30:	bd10      	pop	{r4, pc}
 800cb32:	bf00      	nop
 800cb34:	20001838 	.word	0x20001838
 800cb38:	20000ae8 	.word	0x20000ae8
 800cb3c:	0800ca5d 	.word	0x0800ca5d

0800cb40 <USBWakeUp_IRQHandler>:


void USBWakeUp_IRQHandler(void)
{
	//EXTI_ClearITPendingBit(EXTI_Line18);
	REG_EXTI_PR = (1 << 18 );
 800cb40:	f240 4314 	movw	r3, #1044	; 0x414
 800cb44:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800cb48:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800cb4c:	601a      	str	r2, [r3, #0]
 800cb4e:	4770      	bx	lr

0800cb50 <IntToUnicode>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
 800cb50:	b430      	push	{r4, r5}
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 800cb52:	b1ca      	cbz	r2, 800cb88 <IntToUnicode+0x38>
* Description    : Convert Hex 32Bits value into char.
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
 800cb54:	1e55      	subs	r5, r2, #1
 800cb56:	b2ed      	uxtb	r5, r5
 800cb58:	3501      	adds	r5, #1
 800cb5a:	2300      	movs	r3, #0
 800cb5c:	006d      	lsls	r5, r5, #1
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 800cb5e:	461c      	mov	r4, r3
 800cb60:	e007      	b.n	800cb72 <IntToUnicode+0x22>
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
 800cb62:	3230      	adds	r2, #48	; 0x30
 800cb64:	54ca      	strb	r2, [r1, r3]
* Description    : Convert Hex 32Bits value into char.
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
 800cb66:	18ca      	adds	r2, r1, r3
 800cb68:	3302      	adds	r3, #2
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
 800cb6a:	0100      	lsls	r0, r0, #4
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 800cb6c:	42ab      	cmp	r3, r5
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 800cb6e:	7054      	strb	r4, [r2, #1]
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 800cb70:	d00a      	beq.n	800cb88 <IntToUnicode+0x38>
  {
    if( ((value >> 28)) < 0xA )
 800cb72:	0f02      	lsrs	r2, r0, #28
 800cb74:	2a09      	cmp	r2, #9
 800cb76:	d9f4      	bls.n	800cb62 <IntToUnicode+0x12>
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 800cb78:	3237      	adds	r2, #55	; 0x37
 800cb7a:	54ca      	strb	r2, [r1, r3]
* Description    : Convert Hex 32Bits value into char.
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
 800cb7c:	18ca      	adds	r2, r1, r3
 800cb7e:	3302      	adds	r3, #2
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
 800cb80:	0100      	lsls	r0, r0, #4
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 800cb82:	42ab      	cmp	r3, r5
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 800cb84:	7054      	strb	r4, [r2, #1]
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 800cb86:	d1f4      	bne.n	800cb72 <IntToUnicode+0x22>
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
  }
}
 800cb88:	bc30      	pop	{r4, r5}
 800cb8a:	4770      	bx	lr

0800cb8c <USB_LP_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void USB_LP_IRQHandler(void)
{
 800cb8c:	b508      	push	{r3, lr}
	//printf("USB\n");	
	USB_Istr();
 800cb8e:	f24c 4389 	movw	r3, #50313	; 0xc489
 800cb92:	f6c0 0300 	movt	r3, #2048	; 0x800
 800cb96:	4798      	blx	r3
 800cb98:	bd08      	pop	{r3, pc}
 800cb9a:	bf00      	nop

0800cb9c <Set_System>:
*******************************************************************************/
void Set_System(void)
{  	
	#if HW_USE_USB_SMARTROBOT_BD == 1
	//-- PC.13
	REG_GPIOC_CRH &= ~(0x0F << (20));	// Clear
 800cb9c:	f241 0304 	movw	r3, #4100	; 0x1004
 800cba0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800cba4:	681a      	ldr	r2, [r3, #0]
 800cba6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800cbaa:	601a      	str	r2, [r3, #0]
	REG_GPIOC_CRH |=  (0x02 << (20));	// MODE, PC.13 Output mode, max speed 2Mhz
 800cbac:	681a      	ldr	r2, [r3, #0]
 800cbae:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800cbb2:	601a      	str	r2, [r3, #0]
	REG_GPIOC_CRH |=  (0x00 << (22));	// CNF,  PC.13 General purpose output push-pul
 800cbb4:	681a      	ldr	r2, [r3, #0]
 800cbb6:	601a      	str	r2, [r3, #0]
 800cbb8:	4770      	bx	lr
 800cbba:	bf00      	nop

0800cbbc <Set_USBClock>:
*******************************************************************************/
void Set_USBClock(void)
{
	//-- USB 72M * 2 / 3 = 48Mhz
	//
	CLR_BIT( REG_RCC_CFGR, 22 );	
 800cbbc:	f241 0204 	movw	r2, #4100	; 0x1004
 800cbc0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800cbc4:	6811      	ldr	r1, [r2, #0]
	
	//-- USB Clock Enable 
	//
	SET_BIT( REG_RCC_APB1ENR, 23 );
 800cbc6:	f241 031c 	movw	r3, #4124	; 0x101c
*******************************************************************************/
void Set_USBClock(void)
{
	//-- USB 72M * 2 / 3 = 48Mhz
	//
	CLR_BIT( REG_RCC_CFGR, 22 );	
 800cbca:	f421 0180 	bic.w	r1, r1, #4194304	; 0x400000
 800cbce:	6011      	str	r1, [r2, #0]
	
	//-- USB Clock Enable 
	//
	SET_BIT( REG_RCC_APB1ENR, 23 );
 800cbd0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800cbd4:	681a      	ldr	r2, [r3, #0]
 800cbd6:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800cbda:	601a      	str	r2, [r3, #0]
 800cbdc:	4770      	bx	lr
 800cbde:	bf00      	nop

0800cbe0 <Leave_LowPowerMode>:
void Leave_LowPowerMode(void)
{
  DEVICE_INFO *pInfo = &Device_Info;

  /* Set the device state to the correct state */
  if (pInfo->Current_Configuration != 0)
 800cbe0:	4b05      	ldr	r3, [pc, #20]	; (800cbf8 <Leave_LowPowerMode+0x18>)
 800cbe2:	7a9b      	ldrb	r3, [r3, #10]
 800cbe4:	b91b      	cbnz	r3, 800cbee <Leave_LowPowerMode+0xe>
    /* Device configured */
    bDeviceState = CONFIGURED;
  }
  else
  {
    bDeviceState = ATTACHED;
 800cbe6:	4b05      	ldr	r3, [pc, #20]	; (800cbfc <Leave_LowPowerMode+0x1c>)
 800cbe8:	2201      	movs	r2, #1
 800cbea:	601a      	str	r2, [r3, #0]
 800cbec:	4770      	bx	lr

  /* Set the device state to the correct state */
  if (pInfo->Current_Configuration != 0)
  {
    /* Device configured */
    bDeviceState = CONFIGURED;
 800cbee:	4b03      	ldr	r3, [pc, #12]	; (800cbfc <Leave_LowPowerMode+0x1c>)
 800cbf0:	2205      	movs	r2, #5
 800cbf2:	601a      	str	r2, [r3, #0]
 800cbf4:	4770      	bx	lr
 800cbf6:	bf00      	nop
 800cbf8:	2000206c 	.word	0x2000206c
 800cbfc:	20000ae0 	.word	0x20000ae0

0800cc00 <USB_Interrupts_Config>:
void USB_Interrupts_Config(void)
{

	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
 800cc00:	f240 4214 	movw	r2, #1044	; 0x414
* Description    : Configures the USB interrupts
* Input          : None.
* Return         : None.
*******************************************************************************/
void USB_Interrupts_Config(void)
{
 800cc04:	b538      	push	{r3, r4, r5, lr}

	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
 800cc06:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800cc0a:	f44f 2180 	mov.w	r1, #262144	; 0x40000
	
	CLR_BIT( REG_EXTI_IMR,  18 );
 800cc0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
void USB_Interrupts_Config(void)
{

	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
 800cc12:	6011      	str	r1, [r2, #0]
	
	CLR_BIT( REG_EXTI_IMR,  18 );
 800cc14:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800cc18:	6819      	ldr	r1, [r3, #0]
	CLR_BIT( REG_EXTI_EMR,  18 );
 800cc1a:	f240 4204 	movw	r2, #1028	; 0x404

	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
	
	CLR_BIT( REG_EXTI_IMR,  18 );
 800cc1e:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 800cc22:	6019      	str	r1, [r3, #0]
	CLR_BIT( REG_EXTI_EMR,  18 );
 800cc24:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800cc28:	6810      	ldr	r0, [r2, #0]
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
 800cc2a:	f44f 6181 	mov.w	r1, #1032	; 0x408
	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
	
	CLR_BIT( REG_EXTI_IMR,  18 );
	CLR_BIT( REG_EXTI_EMR,  18 );
 800cc2e:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 800cc32:	6010      	str	r0, [r2, #0]
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
 800cc34:	f2c4 0101 	movt	r1, #16385	; 0x4001
 800cc38:	6808      	ldr	r0, [r1, #0]
	CLR_BIT( REG_EXTI_FTSR, 18 );
 800cc3a:	f240 420c 	movw	r2, #1036	; 0x40c
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
	
	CLR_BIT( REG_EXTI_IMR,  18 );
	CLR_BIT( REG_EXTI_EMR,  18 );
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
 800cc3e:	f440 2080 	orr.w	r0, r0, #262144	; 0x40000
 800cc42:	6008      	str	r0, [r1, #0]
	CLR_BIT( REG_EXTI_FTSR, 18 );
 800cc44:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800cc48:	6811      	ldr	r1, [r2, #0]
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
 800cc4a:	f24b 14f1 	movw	r4, #45553	; 0xb1f1
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
	
	CLR_BIT( REG_EXTI_IMR,  18 );
	CLR_BIT( REG_EXTI_EMR,  18 );
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
	CLR_BIT( REG_EXTI_FTSR, 18 );
 800cc4e:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 800cc52:	6011      	str	r1, [r2, #0]
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable
 800cc54:	681d      	ldr	r5, [r3, #0]

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
 800cc56:	f64c 318d 	movw	r1, #52109	; 0xcb8d
	
	CLR_BIT( REG_EXTI_IMR,  18 );
	CLR_BIT( REG_EXTI_EMR,  18 );
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
	CLR_BIT( REG_EXTI_FTSR, 18 );
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable
 800cc5a:	f445 2580 	orr.w	r5, r5, #262144	; 0x40000

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
 800cc5e:	2090      	movs	r0, #144	; 0x90
 800cc60:	f6c0 0100 	movt	r1, #2048	; 0x800
 800cc64:	2200      	movs	r2, #0
 800cc66:	f6c0 0400 	movt	r4, #2048	; 0x800
	
	CLR_BIT( REG_EXTI_IMR,  18 );
	CLR_BIT( REG_EXTI_EMR,  18 );
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
	CLR_BIT( REG_EXTI_FTSR, 18 );
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable
 800cc6a:	601d      	str	r5, [r3, #0]

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
 800cc6c:	47a0      	blx	r4
	SET_BIT( REG_NVIC_ISER( 20/32 ), 20%32 );	// NVIC 20번 USB_LP 인터럽트 활성화 
 800cc6e:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 800cc72:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800cc76:	681a      	ldr	r2, [r3, #0]
	
	Hw_ISR_SetIRQFuncByAddr( 0x00E8, (u32)USBWakeUp_IRQHandler, 0 );
 800cc78:	f64c 3141 	movw	r1, #52033	; 0xcb41
	CLR_BIT( REG_EXTI_FTSR, 18 );
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
	SET_BIT( REG_NVIC_ISER( 20/32 ), 20%32 );	// NVIC 20번 USB_LP 인터럽트 활성화 
 800cc7c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800cc80:	601a      	str	r2, [r3, #0]
	
	Hw_ISR_SetIRQFuncByAddr( 0x00E8, (u32)USBWakeUp_IRQHandler, 0 );
 800cc82:	f6c0 0100 	movt	r1, #2048	; 0x800
 800cc86:	2200      	movs	r2, #0
 800cc88:	20e8      	movs	r0, #232	; 0xe8
 800cc8a:	47a0      	blx	r4
	SET_BIT( REG_NVIC_ISER( 42/32 ), 42%32 );	// NVIC 42번 USB Wake Up 인터럽트 활성화 
 800cc8c:	f24e 1204 	movw	r2, #57604	; 0xe104
 800cc90:	f2ce 0200 	movt	r2, #57344	; 0xe000
 800cc94:	6811      	ldr	r1, [r2, #0]

	SET_BIT( REG_EXTI_SWIER, 18 );
 800cc96:	f44f 6382 	mov.w	r3, #1040	; 0x410
  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
	SET_BIT( REG_NVIC_ISER( 20/32 ), 20%32 );	// NVIC 20번 USB_LP 인터럽트 활성화 
	
	Hw_ISR_SetIRQFuncByAddr( 0x00E8, (u32)USBWakeUp_IRQHandler, 0 );
	SET_BIT( REG_NVIC_ISER( 42/32 ), 42%32 );	// NVIC 42번 USB Wake Up 인터럽트 활성화 
 800cc9a:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 800cc9e:	6011      	str	r1, [r2, #0]

	SET_BIT( REG_EXTI_SWIER, 18 );
 800cca0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800cca4:	681a      	ldr	r2, [r3, #0]
 800cca6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800ccaa:	601a      	str	r2, [r3, #0]
 800ccac:	bd38      	pop	{r3, r4, r5, pc}
 800ccae:	bf00      	nop

0800ccb0 <USB_Cable_Config>:
void USB_Cable_Config (char NewState)
{
  if (NewState != DISABLE)
  {
  	#if HW_USE_USB_SMARTROBOT_BD == 1
	CLR_BIT( REG_GPIOC_ODR, 13 );
 800ccb0:	f241 030c 	movw	r3, #4108	; 0x100c
 800ccb4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800ccb8:	681a      	ldr	r2, [r3, #0]
* Input          : None.
* Return         : Status
*******************************************************************************/
void USB_Cable_Config (char NewState)
{
  if (NewState != DISABLE)
 800ccba:	b918      	cbnz	r0, 800ccc4 <USB_Cable_Config+0x14>
	#endif
  }
  else
  {
  	#if HW_USE_USB_SMARTROBOT_BD == 1
	SET_BIT( REG_GPIOC_ODR, 13 );    
 800ccbc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ccc0:	601a      	str	r2, [r3, #0]
 800ccc2:	4770      	bx	lr
void USB_Cable_Config (char NewState)
{
  if (NewState != DISABLE)
  {
  	#if HW_USE_USB_SMARTROBOT_BD == 1
	CLR_BIT( REG_GPIOC_ODR, 13 );
 800ccc4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ccc8:	601a      	str	r2, [r3, #0]
 800ccca:	4770      	bx	lr

0800cccc <USB_To_USART_Send_Data>:
* Input          : data_buffer: data address.
                   Nb_bytes: number of bytes to send.
* Return         : none.
*******************************************************************************/
void USB_To_USART_Send_Data(uint8_t* data_buffer, uint8_t Nb_bytes)
{
 800cccc:	b5f0      	push	{r4, r5, r6, r7, lr}
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 800ccce:	460d      	mov	r5, r1
* Input          : data_buffer: data address.
                   Nb_bytes: number of bytes to send.
* Return         : none.
*******************************************************************************/
void USB_To_USART_Send_Data(uint8_t* data_buffer, uint8_t Nb_bytes)
{
 800ccd0:	b083      	sub	sp, #12
 800ccd2:	4606      	mov	r6, r0
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 800ccd4:	b159      	cbz	r1, 800ccee <USB_To_USART_Send_Data+0x22>
 800ccd6:	4f07      	ldr	r7, [pc, #28]	; (800ccf4 <USB_To_USART_Send_Data+0x28>)
 800ccd8:	2400      	movs	r4, #0
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 800ccda:	5d33      	ldrb	r3, [r6, r4]
    Hw_Uart_Q_Push( 5, &UartData );	//
 800ccdc:	2005      	movs	r0, #5
 800ccde:	f10d 0107 	add.w	r1, sp, #7
{
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 800cce2:	3401      	adds	r4, #1
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 800cce4:	f88d 3007 	strb.w	r3, [sp, #7]
    Hw_Uart_Q_Push( 5, &UartData );	//
 800cce8:	47b8      	blx	r7
{
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 800ccea:	42ac      	cmp	r4, r5
 800ccec:	d3f5      	bcc.n	800ccda <USB_To_USART_Send_Data+0xe>
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
    Hw_Uart_Q_Push( 5, &UartData );	//
  }  
}
 800ccee:	b003      	add	sp, #12
 800ccf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ccf2:	bf00      	nop
 800ccf4:	0800b3b1 	.word	0x0800b3b1

0800ccf8 <Handle_USBAsynchXfer>:
* Description    : send data to USB.
* Input          : None.
* Return         : none.
*******************************************************************************/
void Handle_USBAsynchXfer (void)
{
 800ccf8:	b570      	push	{r4, r5, r6, lr}
  
  uint16_t USB_Tx_ptr;
  uint16_t USB_Tx_length;
  
  if(USB_Tx_State != 1)
 800ccfa:	4c20      	ldr	r4, [pc, #128]	; (800cd7c <Handle_USBAsynchXfer+0x84>)
 800ccfc:	7823      	ldrb	r3, [r4, #0]
 800ccfe:	2b01      	cmp	r3, #1
 800cd00:	d026      	beq.n	800cd50 <Handle_USBAsynchXfer+0x58>
  {
    if (USART_Rx_ptr_out == USART_RX_DATA_SIZE)
 800cd02:	4d1f      	ldr	r5, [pc, #124]	; (800cd80 <Handle_USBAsynchXfer+0x88>)
 800cd04:	682b      	ldr	r3, [r5, #0]
 800cd06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cd0a:	d022      	beq.n	800cd52 <Handle_USBAsynchXfer+0x5a>
    {
      USART_Rx_ptr_out = 0;
    }
    
    if(USART_Rx_ptr_out == USART_Rx_ptr_in) 
 800cd0c:	4a1d      	ldr	r2, [pc, #116]	; (800cd84 <Handle_USBAsynchXfer+0x8c>)
 800cd0e:	6811      	ldr	r1, [r2, #0]
 800cd10:	428b      	cmp	r3, r1
 800cd12:	d02f      	beq.n	800cd74 <Handle_USBAsynchXfer+0x7c>
 800cd14:	bf98      	it	ls
 800cd16:	b298      	uxthls	r0, r3
    {
      USB_Tx_State = 0; 
      return;
    }
    
    if(USART_Rx_ptr_out > USART_Rx_ptr_in) /* rollback */
 800cd18:	d921      	bls.n	800cd5e <Handle_USBAsynchXfer+0x66>
    { 
      USART_Rx_length = USART_RX_DATA_SIZE - USART_Rx_ptr_out;
 800cd1a:	f5c3 6100 	rsb	r1, r3, #2048	; 0x800
 800cd1e:	4a1a      	ldr	r2, [pc, #104]	; (800cd88 <Handle_USBAsynchXfer+0x90>)
    else 
    {
      USART_Rx_length = USART_Rx_ptr_in - USART_Rx_ptr_out;
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
 800cd20:	2940      	cmp	r1, #64	; 0x40
      return;
    }
    
    if(USART_Rx_ptr_out > USART_Rx_ptr_in) /* rollback */
    { 
      USART_Rx_length = USART_RX_DATA_SIZE - USART_Rx_ptr_out;
 800cd22:	6011      	str	r1, [r2, #0]
 800cd24:	b298      	uxth	r0, r3
    else 
    {
      USART_Rx_length = USART_Rx_ptr_in - USART_Rx_ptr_out;
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
 800cd26:	d91f      	bls.n	800cd68 <Handle_USBAsynchXfer+0x70>
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
      
      USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;	
 800cd28:	3340      	adds	r3, #64	; 0x40
      USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;	
 800cd2a:	3940      	subs	r1, #64	; 0x40
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
      
      USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;	
 800cd2c:	602b      	str	r3, [r5, #0]
      USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;	
 800cd2e:	6011      	str	r1, [r2, #0]
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
 800cd30:	2640      	movs	r6, #64	; 0x40
      
      USART_Rx_ptr_out += USART_Rx_length;
      USART_Rx_length = 0;
    }
    USB_Tx_State = 1; 
    UserToPMABufferCopy(&USART_Rx_Buffer[USB_Tx_ptr], ENDP1_TXADDR, USB_Tx_length);
 800cd32:	4b16      	ldr	r3, [pc, #88]	; (800cd8c <Handle_USBAsynchXfer+0x94>)
      USB_Tx_length = USART_Rx_length;
      
      USART_Rx_ptr_out += USART_Rx_length;
      USART_Rx_length = 0;
    }
    USB_Tx_State = 1; 
 800cd34:	2501      	movs	r5, #1
    UserToPMABufferCopy(&USART_Rx_Buffer[USB_Tx_ptr], ENDP1_TXADDR, USB_Tx_length);
 800cd36:	1818      	adds	r0, r3, r0
 800cd38:	4632      	mov	r2, r6
 800cd3a:	21c0      	movs	r1, #192	; 0xc0
 800cd3c:	4b14      	ldr	r3, [pc, #80]	; (800cd90 <Handle_USBAsynchXfer+0x98>)
      USB_Tx_length = USART_Rx_length;
      
      USART_Rx_ptr_out += USART_Rx_length;
      USART_Rx_length = 0;
    }
    USB_Tx_State = 1; 
 800cd3e:	7025      	strb	r5, [r4, #0]
    UserToPMABufferCopy(&USART_Rx_Buffer[USB_Tx_ptr], ENDP1_TXADDR, USB_Tx_length);
 800cd40:	4798      	blx	r3
    SetEPTxCount(ENDP1, USB_Tx_length);
 800cd42:	4628      	mov	r0, r5
 800cd44:	4b13      	ldr	r3, [pc, #76]	; (800cd94 <Handle_USBAsynchXfer+0x9c>)
 800cd46:	4631      	mov	r1, r6
 800cd48:	4798      	blx	r3
    SetEPTxValid(ENDP1); 
 800cd4a:	4628      	mov	r0, r5
 800cd4c:	4b12      	ldr	r3, [pc, #72]	; (800cd98 <Handle_USBAsynchXfer+0xa0>)
 800cd4e:	4798      	blx	r3
 800cd50:	bd70      	pop	{r4, r5, r6, pc}
    if (USART_Rx_ptr_out == USART_RX_DATA_SIZE)
    {
      USART_Rx_ptr_out = 0;
    }
    
    if(USART_Rx_ptr_out == USART_Rx_ptr_in) 
 800cd52:	4b0c      	ldr	r3, [pc, #48]	; (800cd84 <Handle_USBAsynchXfer+0x8c>)
  
  if(USB_Tx_State != 1)
  {
    if (USART_Rx_ptr_out == USART_RX_DATA_SIZE)
    {
      USART_Rx_ptr_out = 0;
 800cd54:	2000      	movs	r0, #0
    }
    
    if(USART_Rx_ptr_out == USART_Rx_ptr_in) 
 800cd56:	6819      	ldr	r1, [r3, #0]
  
  if(USB_Tx_State != 1)
  {
    if (USART_Rx_ptr_out == USART_RX_DATA_SIZE)
    {
      USART_Rx_ptr_out = 0;
 800cd58:	6028      	str	r0, [r5, #0]
    }
    
    if(USART_Rx_ptr_out == USART_Rx_ptr_in) 
 800cd5a:	4603      	mov	r3, r0
 800cd5c:	b151      	cbz	r1, 800cd74 <Handle_USBAsynchXfer+0x7c>
    { 
      USART_Rx_length = USART_RX_DATA_SIZE - USART_Rx_ptr_out;
    }
    else 
    {
      USART_Rx_length = USART_Rx_ptr_in - USART_Rx_ptr_out;
 800cd5e:	1ac9      	subs	r1, r1, r3
 800cd60:	4a09      	ldr	r2, [pc, #36]	; (800cd88 <Handle_USBAsynchXfer+0x90>)
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
 800cd62:	2940      	cmp	r1, #64	; 0x40
    { 
      USART_Rx_length = USART_RX_DATA_SIZE - USART_Rx_ptr_out;
    }
    else 
    {
      USART_Rx_length = USART_Rx_ptr_in - USART_Rx_ptr_out;
 800cd64:	6011      	str	r1, [r2, #0]
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
 800cd66:	d8df      	bhi.n	800cd28 <Handle_USBAsynchXfer+0x30>
    else
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = USART_Rx_length;
      
      USART_Rx_ptr_out += USART_Rx_length;
 800cd68:	18cb      	adds	r3, r1, r3
 800cd6a:	602b      	str	r3, [r5, #0]
      USART_Rx_length = 0;
 800cd6c:	2300      	movs	r3, #0
      USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;	
    }
    else
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = USART_Rx_length;
 800cd6e:	b28e      	uxth	r6, r1
      
      USART_Rx_ptr_out += USART_Rx_length;
      USART_Rx_length = 0;
 800cd70:	6013      	str	r3, [r2, #0]
 800cd72:	e7de      	b.n	800cd32 <Handle_USBAsynchXfer+0x3a>
      USART_Rx_ptr_out = 0;
    }
    
    if(USART_Rx_ptr_out == USART_Rx_ptr_in) 
    {
      USB_Tx_State = 0; 
 800cd74:	2300      	movs	r3, #0
 800cd76:	7023      	strb	r3, [r4, #0]
      return;
 800cd78:	bd70      	pop	{r4, r5, r6, pc}
 800cd7a:	bf00      	nop
 800cd7c:	20000aec 	.word	0x20000aec
 800cd80:	20000af4 	.word	0x20000af4
 800cd84:	20000af0 	.word	0x20000af0
 800cd88:	20000af8 	.word	0x20000af8
 800cd8c:	2000185c 	.word	0x2000185c
 800cd90:	0800d7a5 	.word	0x0800d7a5
 800cd94:	0800d9e5 	.word	0x0800d9e5
 800cd98:	0800d8a9 	.word	0x0800d8a9

0800cd9c <Get_SerialNum>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Get_SerialNum(void)
{
 800cd9c:	b538      	push	{r3, r4, r5, lr}
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(uint32_t*)ID1;
 800cd9e:	f24f 72e8 	movw	r2, #63464	; 0xf7e8
  Device_Serial1 = *(uint32_t*)ID2;
  Device_Serial2 = *(uint32_t*)ID3;  
 800cda2:	f24f 73f0 	movw	r3, #63472	; 0xf7f0
*******************************************************************************/
void Get_SerialNum(void)
{
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(uint32_t*)ID1;
 800cda6:	f6c1 72ff 	movt	r2, #8191	; 0x1fff
  Device_Serial1 = *(uint32_t*)ID2;
  Device_Serial2 = *(uint32_t*)ID3;  
 800cdaa:	f6c1 73ff 	movt	r3, #8191	; 0x1fff
*******************************************************************************/
void Get_SerialNum(void)
{
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(uint32_t*)ID1;
 800cdae:	6812      	ldr	r2, [r2, #0]
  Device_Serial1 = *(uint32_t*)ID2;
  Device_Serial2 = *(uint32_t*)ID3;  

  Device_Serial0 += Device_Serial2;
 800cdb0:	681b      	ldr	r3, [r3, #0]
void Get_SerialNum(void)
{
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(uint32_t*)ID1;
  Device_Serial1 = *(uint32_t*)ID2;
 800cdb2:	f24f 71ec 	movw	r1, #63468	; 0xf7ec
 800cdb6:	f6c1 71ff 	movt	r1, #8191	; 0x1fff
  Device_Serial2 = *(uint32_t*)ID3;  

  Device_Serial0 += Device_Serial2;

  if (Device_Serial0 != 0)
 800cdba:	18d0      	adds	r0, r2, r3
void Get_SerialNum(void)
{
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(uint32_t*)ID1;
  Device_Serial1 = *(uint32_t*)ID2;
 800cdbc:	680c      	ldr	r4, [r1, #0]
  Device_Serial2 = *(uint32_t*)ID3;  

  Device_Serial0 += Device_Serial2;

  if (Device_Serial0 != 0)
 800cdbe:	d007      	beq.n	800cdd0 <Get_SerialNum+0x34>
  {
    IntToUnicode (Device_Serial0, &Virtual_Com_Port_StringSerial[2] , 8);
 800cdc0:	4904      	ldr	r1, [pc, #16]	; (800cdd4 <Get_SerialNum+0x38>)
 800cdc2:	2208      	movs	r2, #8
 800cdc4:	4d04      	ldr	r5, [pc, #16]	; (800cdd8 <Get_SerialNum+0x3c>)
 800cdc6:	47a8      	blx	r5
    IntToUnicode (Device_Serial1, &Virtual_Com_Port_StringSerial[18], 4);
 800cdc8:	4620      	mov	r0, r4
 800cdca:	4904      	ldr	r1, [pc, #16]	; (800cddc <Get_SerialNum+0x40>)
 800cdcc:	2204      	movs	r2, #4
 800cdce:	47a8      	blx	r5
 800cdd0:	bd38      	pop	{r3, r4, r5, pc}
 800cdd2:	bf00      	nop
 800cdd4:	20000016 	.word	0x20000016
 800cdd8:	0800cb51 	.word	0x0800cb51
 800cddc:	20000026 	.word	0x20000026

0800cde0 <__WFI>:
}


void __WFI(void)
{
	 __asm("wfi");
 800cde0:	bf30      	wfi
 800cde2:	4770      	bx	lr

0800cde4 <Standard_GetConfiguration>:
* Output         : None.
* Return         : Return 1 , if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
uint8_t *Standard_GetConfiguration(uint16_t Length)
{
 800cde4:	b508      	push	{r3, lr}
  if (Length == 0)
 800cde6:	b138      	cbz	r0, 800cdf8 <Standard_GetConfiguration+0x14>
  {
    pInformation->Ctrl_Info.Usb_wLength =
      sizeof(pInformation->Current_Configuration);
    return 0;
  }
  pUser_Standard_Requests->User_GetConfiguration();
 800cde8:	4b06      	ldr	r3, [pc, #24]	; (800ce04 <Standard_GetConfiguration+0x20>)
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	4798      	blx	r3
  return (uint8_t *)&pInformation->Current_Configuration;
 800cdf0:	4b05      	ldr	r3, [pc, #20]	; (800ce08 <Standard_GetConfiguration+0x24>)
 800cdf2:	6818      	ldr	r0, [r3, #0]
 800cdf4:	300a      	adds	r0, #10
}
 800cdf6:	bd08      	pop	{r3, pc}
*******************************************************************************/
uint8_t *Standard_GetConfiguration(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength =
 800cdf8:	4b03      	ldr	r3, [pc, #12]	; (800ce08 <Standard_GetConfiguration+0x24>)
 800cdfa:	2201      	movs	r2, #1
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	821a      	strh	r2, [r3, #16]
      sizeof(pInformation->Current_Configuration);
    return 0;
 800ce00:	bd08      	pop	{r3, pc}
 800ce02:	bf00      	nop
 800ce04:	20002088 	.word	0x20002088
 800ce08:	2000208c 	.word	0x2000208c

0800ce0c <Standard_GetInterface>:
* Output         : None.
* Return         : Return 0, if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
uint8_t *Standard_GetInterface(uint16_t Length)
{
 800ce0c:	b508      	push	{r3, lr}
  if (Length == 0)
 800ce0e:	b138      	cbz	r0, 800ce20 <Standard_GetInterface+0x14>
  {
    pInformation->Ctrl_Info.Usb_wLength =
      sizeof(pInformation->Current_AlternateSetting);
    return 0;
  }
  pUser_Standard_Requests->User_GetInterface();
 800ce10:	4b06      	ldr	r3, [pc, #24]	; (800ce2c <Standard_GetInterface+0x20>)
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	689b      	ldr	r3, [r3, #8]
 800ce16:	4798      	blx	r3
  return (uint8_t *)&pInformation->Current_AlternateSetting;
 800ce18:	4b05      	ldr	r3, [pc, #20]	; (800ce30 <Standard_GetInterface+0x24>)
 800ce1a:	6818      	ldr	r0, [r3, #0]
 800ce1c:	300c      	adds	r0, #12
}
 800ce1e:	bd08      	pop	{r3, pc}
*******************************************************************************/
uint8_t *Standard_GetInterface(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength =
 800ce20:	4b03      	ldr	r3, [pc, #12]	; (800ce30 <Standard_GetInterface+0x24>)
 800ce22:	2201      	movs	r2, #1
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	821a      	strh	r2, [r3, #16]
      sizeof(pInformation->Current_AlternateSetting);
    return 0;
 800ce28:	bd08      	pop	{r3, pc}
 800ce2a:	bf00      	nop
 800ce2c:	20002088 	.word	0x20002088
 800ce30:	2000208c 	.word	0x2000208c

0800ce34 <Standard_GetStatus>:
* Output         : None.
* Return         : Return 0, if the request is at end of data block,
*                  or is invalid when "Length" is 0.
*******************************************************************************/
uint8_t *Standard_GetStatus(uint16_t Length)
{
 800ce34:	b508      	push	{r3, lr}
  if (Length == 0)
 800ce36:	2800      	cmp	r0, #0
 800ce38:	d037      	beq.n	800ceaa <Standard_GetStatus+0x76>
  }

  /* Reset Status Information */
  StatusInfo.w = 0;

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800ce3a:	4b21      	ldr	r3, [pc, #132]	; (800cec0 <Standard_GetStatus+0x8c>)
    pInformation->Ctrl_Info.Usb_wLength = 2;
    return 0;
  }

  /* Reset Status Information */
  StatusInfo.w = 0;
 800ce3c:	4821      	ldr	r0, [pc, #132]	; (800cec4 <Standard_GetStatus+0x90>)
 800ce3e:	2100      	movs	r1, #0

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800ce40:	681a      	ldr	r2, [r3, #0]
    pInformation->Ctrl_Info.Usb_wLength = 2;
    return 0;
  }

  /* Reset Status Information */
  StatusInfo.w = 0;
 800ce42:	8001      	strh	r1, [r0, #0]

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800ce44:	7813      	ldrb	r3, [r2, #0]
 800ce46:	f013 037f 	ands.w	r3, r3, #127	; 0x7f
 800ce4a:	d017      	beq.n	800ce7c <Standard_GetStatus+0x48>
    {
      ClrBit(StatusInfo0, 0);
    }
  }
  /*Interface Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 800ce4c:	2b01      	cmp	r3, #1
 800ce4e:	d02b      	beq.n	800cea8 <Standard_GetStatus+0x74>
  {
    return (uint8_t *)&StatusInfo;
  }
  /*Get EndPoint Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 800ce50:	2b02      	cmp	r3, #2
 800ce52:	d128      	bne.n	800cea6 <Standard_GetStatus+0x72>
  {
    uint8_t Related_Endpoint;
    uint8_t wIndex0 = pInformation->USBwIndex0;
 800ce54:	7953      	ldrb	r3, [r2, #5]

    Related_Endpoint = (wIndex0 & 0x0f);
 800ce56:	f003 020f 	and.w	r2, r3, #15
    if (ValBit(wIndex0, 7))
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 800ce5a:	0092      	lsls	r2, r2, #2
 800ce5c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800ce60:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
  {
    uint8_t Related_Endpoint;
    uint8_t wIndex0 = pInformation->USBwIndex0;

    Related_Endpoint = (wIndex0 & 0x0f);
    if (ValBit(wIndex0, 7))
 800ce64:	f013 0f80 	tst.w	r3, #128	; 0x80
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 800ce68:	6813      	ldr	r3, [r2, #0]
  {
    uint8_t Related_Endpoint;
    uint8_t wIndex0 = pInformation->USBwIndex0;

    Related_Endpoint = (wIndex0 & 0x0f);
    if (ValBit(wIndex0, 7))
 800ce6a:	d123      	bne.n	800ceb4 <Standard_GetStatus+0x80>
      }
    }
    else
    {
      /* OUT endpoint */
      if (_GetRxStallStatus(Related_Endpoint))
 800ce6c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800ce70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ce74:	d111      	bne.n	800ce9a <Standard_GetStatus+0x66>
      {
        SetBit(StatusInfo0, 0); /* OUT Endpoint stalled */
 800ce76:	2301      	movs	r3, #1
 800ce78:	7003      	strb	r3, [r0, #0]
 800ce7a:	e00e      	b.n	800ce9a <Standard_GetStatus+0x66>
  StatusInfo.w = 0;

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
  {
    /*Get Device Status */
    uint8_t Feature = pInformation->Current_Feature;
 800ce7c:	7a52      	ldrb	r2, [r2, #9]

    /* Remote Wakeup enabled */
    if (ValBit(Feature, 5))
 800ce7e:	f002 0320 	and.w	r3, r2, #32
 800ce82:	b2db      	uxtb	r3, r3
    {
      ClrBit(StatusInfo0, 1);
    }      

    /* Bus-powered */
    if (ValBit(Feature, 6))
 800ce84:	f002 0240 	and.w	r2, r2, #64	; 0x40
    uint8_t Feature = pInformation->Current_Feature;

    /* Remote Wakeup enabled */
    if (ValBit(Feature, 5))
    {
      SetBit(StatusInfo0, 1);
 800ce88:	428b      	cmp	r3, r1
    {
      ClrBit(StatusInfo0, 1);
    }      

    /* Bus-powered */
    if (ValBit(Feature, 6))
 800ce8a:	b2d2      	uxtb	r2, r2
    uint8_t Feature = pInformation->Current_Feature;

    /* Remote Wakeup enabled */
    if (ValBit(Feature, 5))
    {
      SetBit(StatusInfo0, 1);
 800ce8c:	bf18      	it	ne
 800ce8e:	2302      	movne	r3, #2
    {
      ClrBit(StatusInfo0, 1);
    }      

    /* Bus-powered */
    if (ValBit(Feature, 6))
 800ce90:	2a00      	cmp	r2, #0
 800ce92:	d0f1      	beq.n	800ce78 <Standard_GetStatus+0x44>
    {
      SetBit(StatusInfo0, 0);
 800ce94:	f043 0301 	orr.w	r3, r3, #1
 800ce98:	7003      	strb	r3, [r0, #0]
  }
  else
  {
    return NULL;
  }
  pUser_Standard_Requests->User_GetStatus();
 800ce9a:	4b0b      	ldr	r3, [pc, #44]	; (800cec8 <Standard_GetStatus+0x94>)
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	691b      	ldr	r3, [r3, #16]
 800cea0:	4798      	blx	r3
  return (uint8_t *)&StatusInfo;
 800cea2:	4808      	ldr	r0, [pc, #32]	; (800cec4 <Standard_GetStatus+0x90>)
 800cea4:	bd08      	pop	{r3, pc}
    }

  }
  else
  {
    return NULL;
 800cea6:	4608      	mov	r0, r1
  }
  pUser_Standard_Requests->User_GetStatus();
  return (uint8_t *)&StatusInfo;
}
 800cea8:	bd08      	pop	{r3, pc}
*******************************************************************************/
uint8_t *Standard_GetStatus(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength = 2;
 800ceaa:	4b05      	ldr	r3, [pc, #20]	; (800cec0 <Standard_GetStatus+0x8c>)
 800ceac:	2202      	movs	r2, #2
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	821a      	strh	r2, [r3, #16]
    return 0;
 800ceb2:	bd08      	pop	{r3, pc}

    Related_Endpoint = (wIndex0 & 0x0f);
    if (ValBit(wIndex0, 7))
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 800ceb4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800ceb8:	2b10      	cmp	r3, #16
 800ceba:	d1ee      	bne.n	800ce9a <Standard_GetStatus+0x66>
 800cebc:	e7db      	b.n	800ce76 <Standard_GetStatus+0x42>
 800cebe:	bf00      	nop
 800cec0:	2000208c 	.word	0x2000208c
 800cec4:	2000205c 	.word	0x2000205c
 800cec8:	20002088 	.word	0x20002088

0800cecc <DataStageIn>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void DataStageIn(void)
{
 800cecc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
 800ced0:	4e2b      	ldr	r6, [pc, #172]	; (800cf80 <DataStageIn+0xb4>)
 800ced2:	6834      	ldr	r4, [r6, #0]
  uint32_t save_wLength = pEPinfo->Usb_wLength;
 800ced4:	8a23      	ldrh	r3, [r4, #16]
  uint32_t ControlState = pInformation->ControlState;

  uint8_t *DataBuffer;
  uint32_t Length;

  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
 800ced6:	7a20      	ldrb	r0, [r4, #8]
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	bf08      	it	eq
 800cedc:	2804      	cmpeq	r0, #4
 800cede:	bf14      	ite	ne
 800cee0:	f04f 0800 	movne.w	r8, #0
 800cee4:	f04f 0801 	moveq.w	r8, #1
 800cee8:	d10a      	bne.n	800cf00 <DataStageIn+0x34>
  {
    if(Data_Mul_MaxPacketSize == TRUE)
 800ceea:	4b26      	ldr	r3, [pc, #152]	; (800cf84 <DataStageIn+0xb8>)
 800ceec:	781a      	ldrb	r2, [r3, #0]
 800ceee:	2a01      	cmp	r2, #1
 800cef0:	d030      	beq.n	800cf54 <DataStageIn+0x88>
    }
    else 
    {
      /* No more data to send so STALL the TX Status*/
      ControlState = WAIT_STATUS_OUT;
      vSetEPTxStatus(EP_TX_STALL);
 800cef2:	4b25      	ldr	r3, [pc, #148]	; (800cf88 <DataStageIn+0xbc>)
 800cef4:	2210      	movs	r2, #16
 800cef6:	2707      	movs	r7, #7
 800cef8:	801a      	strh	r2, [r3, #0]
  vSetEPTxStatus(EP_TX_VALID);

  USB_StatusOut();/* Expect the host to abort the data IN stage */

Expect_Status_Out:
  pInformation->ControlState = ControlState;
 800cefa:	7227      	strb	r7, [r4, #8]
 800cefc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    }
    
    goto Expect_Status_Out;
  }

  Length = pEPinfo->PacketSize;
 800cf00:	8aa7      	ldrh	r7, [r4, #20]
  if (Length > save_wLength)
  {
    Length = save_wLength;
  }

  DataBuffer = (*pEPinfo->CopyData)(Length);
 800cf02:	69a2      	ldr	r2, [r4, #24]
 800cf04:	429f      	cmp	r7, r3
 800cf06:	bf34      	ite	cc
 800cf08:	463d      	movcc	r5, r7
 800cf0a:	461d      	movcs	r5, r3
 800cf0c:	4628      	mov	r0, r5
    
    goto Expect_Status_Out;
  }

  Length = pEPinfo->PacketSize;
  ControlState = (save_wLength <= Length) ? LAST_IN_DATA : IN_DATA;
 800cf0e:	42bb      	cmp	r3, r7
 800cf10:	bf8c      	ite	hi
 800cf12:	2702      	movhi	r7, #2
 800cf14:	2704      	movls	r7, #4
  if (Length > save_wLength)
  {
    Length = save_wLength;
  }

  DataBuffer = (*pEPinfo->CopyData)(Length);
 800cf16:	4790      	blx	r2
  
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);
 800cf18:	4b1c      	ldr	r3, [pc, #112]	; (800cf8c <DataStageIn+0xc0>)
  if (Length > save_wLength)
  {
    Length = save_wLength;
  }

  DataBuffer = (*pEPinfo->CopyData)(Length);
 800cf1a:	4681      	mov	r9, r0
  
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);
 800cf1c:	4640      	mov	r0, r8
 800cf1e:	4798      	blx	r3
 800cf20:	462a      	mov	r2, r5
 800cf22:	4601      	mov	r1, r0
 800cf24:	4b1a      	ldr	r3, [pc, #104]	; (800cf90 <DataStageIn+0xc4>)
 800cf26:	4648      	mov	r0, r9
 800cf28:	4798      	blx	r3

  SetEPTxCount(ENDP0, Length);
 800cf2a:	4629      	mov	r1, r5
 800cf2c:	4b19      	ldr	r3, [pc, #100]	; (800cf94 <DataStageIn+0xc8>)
 800cf2e:	4640      	mov	r0, r8
 800cf30:	4798      	blx	r3

  pEPinfo->Usb_wLength -= Length;
 800cf32:	8a23      	ldrh	r3, [r4, #16]
  pEPinfo->Usb_wOffset += Length;
 800cf34:	8a62      	ldrh	r2, [r4, #18]
  
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);

  SetEPTxCount(ENDP0, Length);

  pEPinfo->Usb_wLength -= Length;
 800cf36:	1b5b      	subs	r3, r3, r5
 800cf38:	8223      	strh	r3, [r4, #16]
  pEPinfo->Usb_wOffset += Length;
  vSetEPTxStatus(EP_TX_VALID);
 800cf3a:	4b13      	ldr	r3, [pc, #76]	; (800cf88 <DataStageIn+0xbc>)
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);

  SetEPTxCount(ENDP0, Length);

  pEPinfo->Usb_wLength -= Length;
  pEPinfo->Usb_wOffset += Length;
 800cf3c:	18ad      	adds	r5, r5, r2
  vSetEPTxStatus(EP_TX_VALID);
 800cf3e:	2230      	movs	r2, #48	; 0x30
 800cf40:	801a      	strh	r2, [r3, #0]
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);

  SetEPTxCount(ENDP0, Length);

  pEPinfo->Usb_wLength -= Length;
  pEPinfo->Usb_wOffset += Length;
 800cf42:	8265      	strh	r5, [r4, #18]
  vSetEPTxStatus(EP_TX_VALID);

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 800cf44:	4b14      	ldr	r3, [pc, #80]	; (800cf98 <DataStageIn+0xcc>)
 800cf46:	6834      	ldr	r4, [r6, #0]
 800cf48:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800cf4c:	801a      	strh	r2, [r3, #0]

Expect_Status_Out:
  pInformation->ControlState = ControlState;
 800cf4e:	7227      	strb	r7, [r4, #8]
 800cf50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
  {
    if(Data_Mul_MaxPacketSize == TRUE)
    {
      /* No more data to send and empty packet */
      Send0LengthData();
 800cf54:	f645 4250 	movw	r2, #23632	; 0x5c50
 800cf58:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800cf5c:	6811      	ldr	r1, [r2, #0]
 800cf5e:	f243 0202 	movw	r2, #12290	; 0x3002
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
}
 800cf62:	b289      	uxth	r1, r1
  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
  {
    if(Data_Mul_MaxPacketSize == TRUE)
    {
      /* No more data to send and empty packet */
      Send0LengthData();
 800cf64:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800cf68:	188a      	adds	r2, r1, r2
 800cf6a:	0052      	lsls	r2, r2, #1
 800cf6c:	2100      	movs	r1, #0
 800cf6e:	6011      	str	r1, [r2, #0]
 800cf70:	4a05      	ldr	r2, [pc, #20]	; (800cf88 <DataStageIn+0xbc>)
      ControlState = LAST_IN_DATA;
      Data_Mul_MaxPacketSize = FALSE;
 800cf72:	2704      	movs	r7, #4
  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
  {
    if(Data_Mul_MaxPacketSize == TRUE)
    {
      /* No more data to send and empty packet */
      Send0LengthData();
 800cf74:	2030      	movs	r0, #48	; 0x30
 800cf76:	8010      	strh	r0, [r2, #0]
      ControlState = LAST_IN_DATA;
      Data_Mul_MaxPacketSize = FALSE;
 800cf78:	7019      	strb	r1, [r3, #0]
  vSetEPTxStatus(EP_TX_VALID);

  USB_StatusOut();/* Expect the host to abort the data IN stage */

Expect_Status_Out:
  pInformation->ControlState = ControlState;
 800cf7a:	7227      	strb	r7, [r4, #8]
 800cf7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf80:	2000208c 	.word	0x2000208c
 800cf84:	20000afc 	.word	0x20000afc
 800cf88:	20002094 	.word	0x20002094
 800cf8c:	0800d9a5 	.word	0x0800d9a5
 800cf90:	0800d7a5 	.word	0x0800d7a5
 800cf94:	0800d9e5 	.word	0x0800d9e5
 800cf98:	20002092 	.word	0x20002092

0800cf9c <Standard_SetConfiguration>:
* Output         : None.
* Return         : Return USB_SUCCESS, if the request is performed.
*                  Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetConfiguration(void)
{
 800cf9c:	b510      	push	{r4, lr}

  if ((pInformation->USBwValue0 <=
 800cf9e:	4b0b      	ldr	r3, [pc, #44]	; (800cfcc <Standard_SetConfiguration+0x30>)
 800cfa0:	4a0b      	ldr	r2, [pc, #44]	; (800cfd0 <Standard_SetConfiguration+0x34>)
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	7851      	ldrb	r1, [r2, #1]
 800cfa6:	78da      	ldrb	r2, [r3, #3]
 800cfa8:	4291      	cmp	r1, r2
 800cfaa:	d201      	bcs.n	800cfb0 <Standard_SetConfiguration+0x14>
    pUser_Standard_Requests->User_SetConfiguration();
    return USB_SUCCESS;
  }
  else
  {
    return USB_UNSUPPORT;
 800cfac:	2002      	movs	r0, #2
  }
}
 800cfae:	bd10      	pop	{r4, pc}
*******************************************************************************/
RESULT Standard_SetConfiguration(void)
{

  if ((pInformation->USBwValue0 <=
      Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
 800cfb0:	7899      	ldrb	r1, [r3, #2]
 800cfb2:	2900      	cmp	r1, #0
 800cfb4:	d1fa      	bne.n	800cfac <Standard_SetConfiguration+0x10>
      && (pInformation->USBwIndex == 0)) /*call Back usb spec 2.0*/
 800cfb6:	889c      	ldrh	r4, [r3, #4]
 800cfb8:	2c00      	cmp	r4, #0
 800cfba:	d1f7      	bne.n	800cfac <Standard_SetConfiguration+0x10>
  {
    pInformation->Current_Configuration = pInformation->USBwValue0;
 800cfbc:	729a      	strb	r2, [r3, #10]
    pUser_Standard_Requests->User_SetConfiguration();
 800cfbe:	4b05      	ldr	r3, [pc, #20]	; (800cfd4 <Standard_SetConfiguration+0x38>)
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	685b      	ldr	r3, [r3, #4]
 800cfc4:	4798      	blx	r3
    return USB_SUCCESS;
 800cfc6:	4620      	mov	r0, r4
 800cfc8:	bd10      	pop	{r4, pc}
 800cfca:	bf00      	nop
 800cfcc:	2000208c 	.word	0x2000208c
 800cfd0:	200000f4 	.word	0x200000f4
 800cfd4:	20002088 	.word	0x20002088

0800cfd8 <Standard_SetInterface>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetInterface(void)
{
 800cfd8:	b538      	push	{r3, r4, r5, lr}
  RESULT Re;
  /*Test if the specified Interface and Alternate Setting are supported by
    the application Firmware*/
  Re = (*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, pInformation->USBwValue0);
 800cfda:	4a10      	ldr	r2, [pc, #64]	; (800d01c <Standard_SetInterface+0x44>)
 800cfdc:	4c10      	ldr	r4, [pc, #64]	; (800d020 <Standard_SetInterface+0x48>)
 800cfde:	6812      	ldr	r2, [r2, #0]
 800cfe0:	6823      	ldr	r3, [r4, #0]
 800cfe2:	6992      	ldr	r2, [r2, #24]
 800cfe4:	7958      	ldrb	r0, [r3, #5]
 800cfe6:	78d9      	ldrb	r1, [r3, #3]
 800cfe8:	4790      	blx	r2

  if (pInformation->Current_Configuration != 0)
 800cfea:	6823      	ldr	r3, [r4, #0]
 800cfec:	7a9a      	ldrb	r2, [r3, #10]
 800cfee:	b90a      	cbnz	r2, 800cff4 <Standard_SetInterface+0x1c>
      return USB_SUCCESS;
    }

  }

  return USB_UNSUPPORT;
 800cff0:	2002      	movs	r0, #2
}
 800cff2:	bd38      	pop	{r3, r4, r5, pc}
    the application Firmware*/
  Re = (*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, pInformation->USBwValue0);

  if (pInformation->Current_Configuration != 0)
  {
    if ((Re != USB_SUCCESS) || (pInformation->USBwIndex1 != 0)
 800cff4:	2800      	cmp	r0, #0
 800cff6:	d1fb      	bne.n	800cff0 <Standard_SetInterface+0x18>
 800cff8:	791a      	ldrb	r2, [r3, #4]
 800cffa:	2a00      	cmp	r2, #0
 800cffc:	d1f8      	bne.n	800cff0 <Standard_SetInterface+0x18>
        || (pInformation->USBwValue1 != 0))
 800cffe:	789d      	ldrb	r5, [r3, #2]
 800d000:	2d00      	cmp	r5, #0
 800d002:	d1f5      	bne.n	800cff0 <Standard_SetInterface+0x18>
    {
      return  USB_UNSUPPORT;
    }
    else if (Re == USB_SUCCESS)
    {
      pUser_Standard_Requests->User_SetInterface();
 800d004:	4b07      	ldr	r3, [pc, #28]	; (800d024 <Standard_SetInterface+0x4c>)
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	68db      	ldr	r3, [r3, #12]
 800d00a:	4798      	blx	r3
      pInformation->Current_Interface = pInformation->USBwIndex0;
 800d00c:	6823      	ldr	r3, [r4, #0]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
      return USB_SUCCESS;
 800d00e:	4628      	mov	r0, r5
      return  USB_UNSUPPORT;
    }
    else if (Re == USB_SUCCESS)
    {
      pUser_Standard_Requests->User_SetInterface();
      pInformation->Current_Interface = pInformation->USBwIndex0;
 800d010:	7959      	ldrb	r1, [r3, #5]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
 800d012:	78da      	ldrb	r2, [r3, #3]
      return  USB_UNSUPPORT;
    }
    else if (Re == USB_SUCCESS)
    {
      pUser_Standard_Requests->User_SetInterface();
      pInformation->Current_Interface = pInformation->USBwIndex0;
 800d014:	72d9      	strb	r1, [r3, #11]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
 800d016:	731a      	strb	r2, [r3, #12]
      return USB_SUCCESS;
 800d018:	bd38      	pop	{r3, r4, r5, pc}
 800d01a:	bf00      	nop
 800d01c:	20002064 	.word	0x20002064
 800d020:	2000208c 	.word	0x2000208c
 800d024:	20002088 	.word	0x20002088

0800d028 <Standard_ClearFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_ClearFeature(void)
{
 800d028:	b538      	push	{r3, r4, r5, lr}
  uint32_t     Type_Rec = Type_Recipient;
 800d02a:	4b35      	ldr	r3, [pc, #212]	; (800d100 <Standard_ClearFeature+0xd8>)
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	7818      	ldrb	r0, [r3, #0]
  uint32_t     Status;


  if (Type_Rec == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800d030:	f010 007f 	ands.w	r0, r0, #127	; 0x7f
 800d034:	d003      	beq.n	800d03e <Standard_ClearFeature+0x16>
  {/*Device Clear Feature*/
    ClrBit(pInformation->Current_Feature, 5);
    return USB_SUCCESS;
  }
  else if (Type_Rec == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 800d036:	2802      	cmp	r0, #2
 800d038:	d006      	beq.n	800d048 <Standard_ClearFeature+0x20>
    }
    pUser_Standard_Requests->User_ClearFeature();
    return USB_SUCCESS;
  }

  return USB_UNSUPPORT;
 800d03a:	2002      	movs	r0, #2
}
 800d03c:	bd38      	pop	{r3, r4, r5, pc}
  uint32_t     Status;


  if (Type_Rec == (STANDARD_REQUEST | DEVICE_RECIPIENT))
  {/*Device Clear Feature*/
    ClrBit(pInformation->Current_Feature, 5);
 800d03e:	7a5a      	ldrb	r2, [r3, #9]
 800d040:	f022 0220 	bic.w	r2, r2, #32
 800d044:	725a      	strb	r2, [r3, #9]
    return USB_SUCCESS;
 800d046:	bd38      	pop	{r3, r4, r5, pc}
    DEVICE* pDev;
    uint32_t Related_Endpoint;
    uint32_t wIndex0;
    uint32_t rEP;

    if ((pInformation->USBwValue != ENDPOINT_STALL)
 800d048:	885a      	ldrh	r2, [r3, #2]
 800d04a:	2a00      	cmp	r2, #0
 800d04c:	d1f6      	bne.n	800d03c <Standard_ClearFeature+0x14>
        || (pInformation->USBwIndex1 != 0))
 800d04e:	791a      	ldrb	r2, [r3, #4]
 800d050:	2a00      	cmp	r2, #0
 800d052:	d1f3      	bne.n	800d03c <Standard_ClearFeature+0x14>
    {
      return USB_UNSUPPORT;
    }

    pDev = &Device_Table;
    wIndex0 = pInformation->USBwIndex0;
 800d054:	795a      	ldrb	r2, [r3, #5]
    rEP = wIndex0 & ~0x80;
 800d056:	f022 0080 	bic.w	r0, r2, #128	; 0x80

    if (ValBit(pInformation->USBwIndex0, 7))
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 800d05a:	0081      	lsls	r1, r0, #2
 800d05c:	f101 4480 	add.w	r4, r1, #1073741824	; 0x40000000
    pDev = &Device_Table;
    wIndex0 = pInformation->USBwIndex0;
    rEP = wIndex0 & ~0x80;
    Related_Endpoint = ENDP0 + rEP;

    if (ValBit(pInformation->USBwIndex0, 7))
 800d060:	0615      	lsls	r5, r2, #24
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 800d062:	f504 44b8 	add.w	r4, r4, #23552	; 0x5c00
    }
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
 800d066:	bf56      	itet	pl
 800d068:	6824      	ldrpl	r4, [r4, #0]

    if (ValBit(pInformation->USBwIndex0, 7))
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 800d06a:	6825      	ldrmi	r5, [r4, #0]
    }
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
 800d06c:	f404 5540 	andpl.w	r5, r4, #12288	; 0x3000
    }

    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 800d070:	4c24      	ldr	r4, [pc, #144]	; (800d104 <Standard_ClearFeature+0xdc>)

    if (ValBit(pInformation->USBwIndex0, 7))
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 800d072:	bf48      	it	mi
 800d074:	f005 0530 	andmi.w	r5, r5, #48	; 0x30
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
    }

    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 800d078:	7824      	ldrb	r4, [r4, #0]
 800d07a:	42a0      	cmp	r0, r4
 800d07c:	d2dd      	bcs.n	800d03a <Standard_ClearFeature+0x12>
 800d07e:	2d00      	cmp	r5, #0
 800d080:	d0db      	beq.n	800d03a <Standard_ClearFeature+0x12>
        || (pInformation->Current_Configuration == 0))
 800d082:	7a9b      	ldrb	r3, [r3, #10]
 800d084:	2b00      	cmp	r3, #0
 800d086:	d0d8      	beq.n	800d03a <Standard_ClearFeature+0x12>
    {
      return USB_UNSUPPORT;
    }


    if (wIndex0 & 0x80)
 800d088:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800d08c:	b2db      	uxtb	r3, r3
 800d08e:	b173      	cbz	r3, 800d0ae <Standard_ClearFeature+0x86>
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint ))
 800d090:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
 800d094:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800d09e:	2b10      	cmp	r3, #16
 800d0a0:	d021      	beq.n	800d0e6 <Standard_ClearFeature+0xbe>
          ClearDTOG_RX(Related_Endpoint);
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
        }
      }
    }
    pUser_Standard_Requests->User_ClearFeature();
 800d0a2:	4b19      	ldr	r3, [pc, #100]	; (800d108 <Standard_ClearFeature+0xe0>)
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	695b      	ldr	r3, [r3, #20]
 800d0a8:	4798      	blx	r3
    return USB_SUCCESS;
 800d0aa:	2000      	movs	r0, #0
 800d0ac:	bd38      	pop	{r3, r4, r5, pc}
      }
    }
    else
    {
      /* OUT endpoint */
      if (_GetRxStallStatus(Related_Endpoint))
 800d0ae:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800d0b2:	f501 44b8 	add.w	r4, r1, #23552	; 0x5c00
 800d0b6:	6823      	ldr	r3, [r4, #0]
 800d0b8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800d0bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d0c0:	d1ef      	bne.n	800d0a2 <Standard_ClearFeature+0x7a>
      {
        if (Related_Endpoint == ENDP0)
 800d0c2:	b9c8      	cbnz	r0, 800d0f8 <Standard_ClearFeature+0xd0>
        {
          /* After clear the STALL, enable the default endpoint receiver */
          SetEPRxCount(Related_Endpoint, Device_Property.MaxPacketSize);
 800d0c4:	4b11      	ldr	r3, [pc, #68]	; (800d10c <Standard_ClearFeature+0xe4>)
 800d0c6:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
 800d0ca:	4b11      	ldr	r3, [pc, #68]	; (800d110 <Standard_ClearFeature+0xe8>)
 800d0cc:	4798      	blx	r3
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
        }
        else
        {
          ClearDTOG_RX(Related_Endpoint);
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
 800d0ce:	6822      	ldr	r2, [r4, #0]
 800d0d0:	f64b 738f 	movw	r3, #49039	; 0xbf8f
 800d0d4:	4013      	ands	r3, r2
 800d0d6:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800d0da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d0de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d0e2:	6023      	str	r3, [r4, #0]
 800d0e4:	e7dd      	b.n	800d0a2 <Standard_ClearFeature+0x7a>
    if (wIndex0 & 0x80)
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint ))
      {
        ClearDTOG_TX(Related_Endpoint);
 800d0e6:	b2c4      	uxtb	r4, r0
 800d0e8:	4620      	mov	r0, r4
 800d0ea:	4b0a      	ldr	r3, [pc, #40]	; (800d114 <Standard_ClearFeature+0xec>)
 800d0ec:	4798      	blx	r3
        SetEPTxStatus(Related_Endpoint, EP_TX_VALID);
 800d0ee:	4620      	mov	r0, r4
 800d0f0:	2130      	movs	r1, #48	; 0x30
 800d0f2:	4b09      	ldr	r3, [pc, #36]	; (800d118 <Standard_ClearFeature+0xf0>)
 800d0f4:	4798      	blx	r3
 800d0f6:	e7d4      	b.n	800d0a2 <Standard_ClearFeature+0x7a>
          SetEPRxCount(Related_Endpoint, Device_Property.MaxPacketSize);
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
        }
        else
        {
          ClearDTOG_RX(Related_Endpoint);
 800d0f8:	4b08      	ldr	r3, [pc, #32]	; (800d11c <Standard_ClearFeature+0xf4>)
 800d0fa:	4798      	blx	r3
 800d0fc:	e7e7      	b.n	800d0ce <Standard_ClearFeature+0xa6>
 800d0fe:	bf00      	nop
 800d100:	2000208c 	.word	0x2000208c
 800d104:	200000f4 	.word	0x200000f4
 800d108:	20002088 	.word	0x20002088
 800d10c:	20000070 	.word	0x20000070
 800d110:	0800da05 	.word	0x0800da05
 800d114:	0800d935 	.word	0x0800d935
 800d118:	0800d829 	.word	0x0800d829
 800d11c:	0800d911 	.word	0x0800d911

0800d120 <Standard_SetEndPointFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetEndPointFeature(void)
{
 800d120:	b538      	push	{r3, r4, r5, lr}
  uint32_t    wIndex0;
  uint32_t    Related_Endpoint;
  uint32_t    rEP;
  uint32_t    Status;

  wIndex0 = pInformation->USBwIndex0;
 800d122:	4b22      	ldr	r3, [pc, #136]	; (800d1ac <Standard_SetEndPointFeature+0x8c>)
 800d124:	6819      	ldr	r1, [r3, #0]
 800d126:	794b      	ldrb	r3, [r1, #5]
  rEP = wIndex0 & ~0x80;
 800d128:	f023 0280 	bic.w	r2, r3, #128	; 0x80

  if (ValBit(pInformation->USBwIndex0, 7))
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 800d12c:	0090      	lsls	r0, r2, #2
 800d12e:	f100 4480 	add.w	r4, r0, #1073741824	; 0x40000000

  wIndex0 = pInformation->USBwIndex0;
  rEP = wIndex0 & ~0x80;
  Related_Endpoint = ENDP0 + rEP;

  if (ValBit(pInformation->USBwIndex0, 7))
 800d132:	061d      	lsls	r5, r3, #24
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 800d134:	f504 44b8 	add.w	r4, r4, #23552	; 0x5c00
  }
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
 800d138:	bf56      	itet	pl
 800d13a:	6824      	ldrpl	r4, [r4, #0]

  if (ValBit(pInformation->USBwIndex0, 7))
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 800d13c:	6825      	ldrmi	r5, [r4, #0]
  }
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
 800d13e:	f404 5540 	andpl.w	r5, r4, #12288	; 0x3000
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
 800d142:	4c1b      	ldr	r4, [pc, #108]	; (800d1b0 <Standard_SetEndPointFeature+0x90>)

  if (ValBit(pInformation->USBwIndex0, 7))
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 800d144:	bf48      	it	mi
 800d146:	f005 0530 	andmi.w	r5, r5, #48	; 0x30
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
 800d14a:	7824      	ldrb	r4, [r4, #0]
 800d14c:	42a2      	cmp	r2, r4
 800d14e:	d301      	bcc.n	800d154 <Standard_SetEndPointFeature+0x34>
      || pInformation->USBwValue != 0 || Status == 0
      || pInformation->Current_Configuration == 0)
  {
    return USB_UNSUPPORT;
 800d150:	2002      	movs	r0, #2
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
    }
  }
  pUser_Standard_Requests->User_SetEndPointFeature();
  return USB_SUCCESS;
}
 800d152:	bd38      	pop	{r3, r4, r5, pc}
  {
    Status = _GetEPRxStatus(Related_Endpoint);
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
      || pInformation->USBwValue != 0 || Status == 0
 800d154:	884a      	ldrh	r2, [r1, #2]
 800d156:	2a00      	cmp	r2, #0
 800d158:	d1fa      	bne.n	800d150 <Standard_SetEndPointFeature+0x30>
 800d15a:	2d00      	cmp	r5, #0
 800d15c:	d0f8      	beq.n	800d150 <Standard_SetEndPointFeature+0x30>
      || pInformation->Current_Configuration == 0)
 800d15e:	7a8a      	ldrb	r2, [r1, #10]
 800d160:	2a00      	cmp	r2, #0
 800d162:	d0f5      	beq.n	800d150 <Standard_SetEndPointFeature+0x30>
  {
    return USB_UNSUPPORT;
  }
  else
  {
    if (wIndex0 & 0x80)
 800d164:	f003 0380 	and.w	r3, r3, #128	; 0x80
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 800d168:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 800d16c:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
  {
    return USB_UNSUPPORT;
  }
  else
  {
    if (wIndex0 & 0x80)
 800d170:	b2db      	uxtb	r3, r3
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 800d172:	6811      	ldr	r1, [r2, #0]
  {
    return USB_UNSUPPORT;
  }
  else
  {
    if (wIndex0 & 0x80)
 800d174:	b17b      	cbz	r3, 800d196 <Standard_SetEndPointFeature+0x76>
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 800d176:	f648 73bf 	movw	r3, #36799	; 0x8fbf
 800d17a:	400b      	ands	r3, r1
 800d17c:	f083 0310 	eor.w	r3, r3, #16
 800d180:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d184:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d188:	6013      	str	r3, [r2, #0]
    {
      /* OUT endpoint */
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
    }
  }
  pUser_Standard_Requests->User_SetEndPointFeature();
 800d18a:	4b0a      	ldr	r3, [pc, #40]	; (800d1b4 <Standard_SetEndPointFeature+0x94>)
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	699b      	ldr	r3, [r3, #24]
 800d190:	4798      	blx	r3
  return USB_SUCCESS;
 800d192:	2000      	movs	r0, #0
 800d194:	bd38      	pop	{r3, r4, r5, pc}
    }

    else
    {
      /* OUT endpoint */
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
 800d196:	f64b 738f 	movw	r3, #49039	; 0xbf8f
 800d19a:	400b      	ands	r3, r1
 800d19c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800d1a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d1a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d1a8:	6013      	str	r3, [r2, #0]
 800d1aa:	e7ee      	b.n	800d18a <Standard_SetEndPointFeature+0x6a>
 800d1ac:	2000208c 	.word	0x2000208c
 800d1b0:	200000f4 	.word	0x200000f4
 800d1b4:	20002088 	.word	0x20002088

0800d1b8 <Standard_GetDescriptorData>:
*******************************************************************************/
uint8_t *Standard_GetDescriptorData(uint16_t Length, ONE_DESCRIPTOR *pDesc)
{
  uint32_t  wOffset;

  wOffset = pInformation->Ctrl_Info.Usb_wOffset;
 800d1b8:	4b05      	ldr	r3, [pc, #20]	; (800d1d0 <Standard_GetDescriptorData+0x18>)
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	8a5a      	ldrh	r2, [r3, #18]
  if (Length == 0)
 800d1be:	b110      	cbz	r0, 800d1c6 <Standard_GetDescriptorData+0xe>
  {
    pInformation->Ctrl_Info.Usb_wLength = pDesc->Descriptor_Size - wOffset;
    return 0;
  }

  return pDesc->Descriptor + wOffset;
 800d1c0:	6808      	ldr	r0, [r1, #0]
 800d1c2:	1880      	adds	r0, r0, r2
}
 800d1c4:	4770      	bx	lr
  uint32_t  wOffset;

  wOffset = pInformation->Ctrl_Info.Usb_wOffset;
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength = pDesc->Descriptor_Size - wOffset;
 800d1c6:	8889      	ldrh	r1, [r1, #4]
 800d1c8:	1a8a      	subs	r2, r1, r2
 800d1ca:	821a      	strh	r2, [r3, #16]
    return 0;
 800d1cc:	4770      	bx	lr
 800d1ce:	bf00      	nop
 800d1d0:	2000208c 	.word	0x2000208c

0800d1d4 <Post0_Process>:
* Output         : None.
* Return         : - 0 if the control State is in PAUSE
*                  - 1 if not.
*******************************************************************************/
uint8_t Post0_Process(void)
{
 800d1d4:	b508      	push	{r3, lr}
   
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 800d1d6:	4b0c      	ldr	r3, [pc, #48]	; (800d208 <Post0_Process+0x34>)
 800d1d8:	2000      	movs	r0, #0
 800d1da:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
 800d1de:	4b0b      	ldr	r3, [pc, #44]	; (800d20c <Post0_Process+0x38>)
 800d1e0:	4798      	blx	r3

  if (pInformation->ControlState == STALLED)
 800d1e2:	4b0b      	ldr	r3, [pc, #44]	; (800d210 <Post0_Process+0x3c>)
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	7a18      	ldrb	r0, [r3, #8]
 800d1e8:	2808      	cmp	r0, #8
 800d1ea:	d106      	bne.n	800d1fa <Post0_Process+0x26>
  {
    vSetEPRxStatus(EP_RX_STALL);
 800d1ec:	4b09      	ldr	r3, [pc, #36]	; (800d214 <Post0_Process+0x40>)
 800d1ee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d1f2:	801a      	strh	r2, [r3, #0]
    vSetEPTxStatus(EP_TX_STALL);
 800d1f4:	4b08      	ldr	r3, [pc, #32]	; (800d218 <Post0_Process+0x44>)
 800d1f6:	2210      	movs	r2, #16
 800d1f8:	801a      	strh	r2, [r3, #0]
  }

  return (pInformation->ControlState == PAUSE);
}
 800d1fa:	f1b0 0c09 	subs.w	ip, r0, #9
 800d1fe:	f1dc 0000 	rsbs	r0, ip, #0
 800d202:	eb50 000c 	adcs.w	r0, r0, ip
 800d206:	bd08      	pop	{r3, pc}
 800d208:	20000070 	.word	0x20000070
 800d20c:	0800da05 	.word	0x0800da05
 800d210:	2000208c 	.word	0x2000208c
 800d214:	20002092 	.word	0x20002092
 800d218:	20002094 	.word	0x20002094

0800d21c <Out0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t Out0_Process(void)
{
 800d21c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t ControlState = pInformation->ControlState;
 800d220:	4d35      	ldr	r5, [pc, #212]	; (800d2f8 <Out0_Process+0xdc>)
 800d222:	682c      	ldr	r4, [r5, #0]
 800d224:	7a23      	ldrb	r3, [r4, #8]

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
 800d226:	2b02      	cmp	r3, #2
 800d228:	bf18      	it	ne
 800d22a:	2b04      	cmpne	r3, #4
 800d22c:	bf14      	ite	ne
 800d22e:	2600      	movne	r6, #0
 800d230:	2601      	moveq	r6, #1
 800d232:	d005      	beq.n	800d240 <Out0_Process+0x24>
  {
    /* host aborts the transfer before finish */
    ControlState = STALLED;
  }
  else if ((ControlState == OUT_DATA) || (ControlState == LAST_OUT_DATA))
 800d234:	2b03      	cmp	r3, #3
 800d236:	bf18      	it	ne
 800d238:	2b05      	cmpne	r3, #5
 800d23a:	d007      	beq.n	800d24c <Out0_Process+0x30>
  {
    DataStageOut();
    ControlState = pInformation->ControlState; /* may be changed outside the function */
  }

  else if (ControlState == WAIT_STATUS_OUT)
 800d23c:	2b07      	cmp	r3, #7
 800d23e:	d00e      	beq.n	800d25e <Out0_Process+0x42>
 800d240:	2308      	movs	r3, #8
  else
  {
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;
 800d242:	7223      	strb	r3, [r4, #8]

  return Post0_Process();
 800d244:	4b2d      	ldr	r3, [pc, #180]	; (800d2fc <Out0_Process+0xe0>)
 800d246:	4798      	blx	r3
 800d248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
  uint32_t save_rLength;

  save_rLength = pEPinfo->Usb_rLength;

  if (pEPinfo->CopyData && save_rLength)
 800d24c:	69a1      	ldr	r1, [r4, #24]
void DataStageOut(void)
{
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
  uint32_t save_rLength;

  save_rLength = pEPinfo->Usb_rLength;
 800d24e:	8a23      	ldrh	r3, [r4, #16]

  if (pEPinfo->CopyData && save_rLength)
 800d250:	b311      	cbz	r1, 800d298 <Out0_Process+0x7c>
 800d252:	b95b      	cbnz	r3, 800d26c <Out0_Process+0x50>
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
    SetEPTxCount(ENDP0, 0);
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 800d254:	8aa3      	ldrh	r3, [r4, #20]
 800d256:	2b00      	cmp	r3, #0
 800d258:	d049      	beq.n	800d2ee <Out0_Process+0xd2>
 800d25a:	4a29      	ldr	r2, [pc, #164]	; (800d300 <Out0_Process+0xe4>)
 800d25c:	e02e      	b.n	800d2bc <Out0_Process+0xa0>
    ControlState = pInformation->ControlState; /* may be changed outside the function */
  }

  else if (ControlState == WAIT_STATUS_OUT)
  {
    (*pProperty->Process_Status_OUT)();
 800d25e:	4b29      	ldr	r3, [pc, #164]	; (800d304 <Out0_Process+0xe8>)
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	68db      	ldr	r3, [r3, #12]
 800d264:	4798      	blx	r3
 800d266:	682c      	ldr	r4, [r5, #0]
 800d268:	2308      	movs	r3, #8
 800d26a:	e7ea      	b.n	800d242 <Out0_Process+0x26>
  if (pEPinfo->CopyData && save_rLength)
  {
    uint8_t *Buffer;
    uint32_t Length;

    Length = pEPinfo->PacketSize;
 800d26c:	8aa7      	ldrh	r7, [r4, #20]
    if (Length > save_rLength)
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
 800d26e:	429f      	cmp	r7, r3
 800d270:	bf28      	it	cs
 800d272:	461f      	movcs	r7, r3
 800d274:	4638      	mov	r0, r7
 800d276:	4788      	blx	r1
    pEPinfo->Usb_rLength -= Length;
 800d278:	8a22      	ldrh	r2, [r4, #16]
    pEPinfo->Usb_rOffset += Length;
 800d27a:	8a63      	ldrh	r3, [r4, #18]
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
    pEPinfo->Usb_rLength -= Length;
 800d27c:	1bd2      	subs	r2, r2, r7
    pEPinfo->Usb_rOffset += Length;
 800d27e:	18fb      	adds	r3, r7, r3
    if (Length > save_rLength)
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
 800d280:	4680      	mov	r8, r0
    pEPinfo->Usb_rLength -= Length;
 800d282:	8222      	strh	r2, [r4, #16]
    pEPinfo->Usb_rOffset += Length;
 800d284:	8263      	strh	r3, [r4, #18]
    PMAToUserBufferCopy(Buffer, GetEPRxAddr(ENDP0), Length);
 800d286:	4630      	mov	r0, r6
 800d288:	4b1f      	ldr	r3, [pc, #124]	; (800d308 <Out0_Process+0xec>)
 800d28a:	4798      	blx	r3
 800d28c:	4b1f      	ldr	r3, [pc, #124]	; (800d30c <Out0_Process+0xf0>)
 800d28e:	4601      	mov	r1, r0
 800d290:	463a      	mov	r2, r7
 800d292:	4640      	mov	r0, r8
 800d294:	4798      	blx	r3
 800d296:	8a23      	ldrh	r3, [r4, #16]

  }

  if (pEPinfo->Usb_rLength != 0)
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d0db      	beq.n	800d254 <Out0_Process+0x38>
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 800d29c:	4b1c      	ldr	r3, [pc, #112]	; (800d310 <Out0_Process+0xf4>)
    SetEPTxCount(ENDP0, 0);
 800d29e:	2000      	movs	r0, #0

  }

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 800d2a0:	f44f 5240 	mov.w	r2, #12288	; 0x3000
    SetEPTxCount(ENDP0, 0);
 800d2a4:	4601      	mov	r1, r0

  }

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 800d2a6:	801a      	strh	r2, [r3, #0]
    SetEPTxCount(ENDP0, 0);
 800d2a8:	4b1a      	ldr	r3, [pc, #104]	; (800d314 <Out0_Process+0xf8>)
 800d2aa:	4798      	blx	r3
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 800d2ac:	8a23      	ldrh	r3, [r4, #16]
 800d2ae:	8aa1      	ldrh	r1, [r4, #20]

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
    SetEPTxCount(ENDP0, 0);
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
 800d2b0:	4a13      	ldr	r2, [pc, #76]	; (800d300 <Out0_Process+0xe4>)
 800d2b2:	2030      	movs	r0, #48	; 0x30
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 800d2b4:	4299      	cmp	r1, r3

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
    SetEPTxCount(ENDP0, 0);
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
 800d2b6:	8010      	strh	r0, [r2, #0]
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 800d2b8:	d919      	bls.n	800d2ee <Out0_Process+0xd2>
  {
    pInformation->ControlState = OUT_DATA;
  }
  else
  {
    if (pEPinfo->Usb_rLength > 0)
 800d2ba:	b9a3      	cbnz	r3, 800d2e6 <Out0_Process+0xca>
    {
      pInformation->ControlState = LAST_OUT_DATA;
    }
    else if (pEPinfo->Usb_rLength == 0)
    {
      pInformation->ControlState = WAIT_STATUS_IN;
 800d2bc:	682c      	ldr	r4, [r5, #0]
 800d2be:	2106      	movs	r1, #6
      USB_StatusIn();
 800d2c0:	f645 4350 	movw	r3, #23632	; 0x5c50
    {
      pInformation->ControlState = LAST_OUT_DATA;
    }
    else if (pEPinfo->Usb_rLength == 0)
    {
      pInformation->ControlState = WAIT_STATUS_IN;
 800d2c4:	7221      	strb	r1, [r4, #8]
      USB_StatusIn();
 800d2c6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d2ca:	6819      	ldr	r1, [r3, #0]
 800d2cc:	f243 0302 	movw	r3, #12290	; 0x3002
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
}
 800d2d0:	b289      	uxth	r1, r1
      pInformation->ControlState = LAST_OUT_DATA;
    }
    else if (pEPinfo->Usb_rLength == 0)
    {
      pInformation->ControlState = WAIT_STATUS_IN;
      USB_StatusIn();
 800d2d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d2d6:	18cb      	adds	r3, r1, r3
 800d2d8:	005b      	lsls	r3, r3, #1
 800d2da:	2100      	movs	r1, #0
 800d2dc:	6019      	str	r1, [r3, #0]
 800d2de:	2330      	movs	r3, #48	; 0x30
 800d2e0:	8013      	strh	r3, [r2, #0]
 800d2e2:	7a23      	ldrb	r3, [r4, #8]
 800d2e4:	e7ad      	b.n	800d242 <Out0_Process+0x26>
  }
  else
  {
    if (pEPinfo->Usb_rLength > 0)
    {
      pInformation->ControlState = LAST_OUT_DATA;
 800d2e6:	682c      	ldr	r4, [r5, #0]
 800d2e8:	2305      	movs	r3, #5
 800d2ea:	7223      	strb	r3, [r4, #8]
 800d2ec:	e7a9      	b.n	800d242 <Out0_Process+0x26>
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
  {
    pInformation->ControlState = OUT_DATA;
 800d2ee:	682c      	ldr	r4, [r5, #0]
 800d2f0:	2303      	movs	r3, #3
 800d2f2:	7223      	strb	r3, [r4, #8]
 800d2f4:	e7a5      	b.n	800d242 <Out0_Process+0x26>
 800d2f6:	bf00      	nop
 800d2f8:	2000208c 	.word	0x2000208c
 800d2fc:	0800d1d5 	.word	0x0800d1d5
 800d300:	20002094 	.word	0x20002094
 800d304:	20002064 	.word	0x20002064
 800d308:	0800d9c5 	.word	0x0800d9c5
 800d30c:	0800d7d9 	.word	0x0800d7d9
 800d310:	20002092 	.word	0x20002092
 800d314:	0800d9e5 	.word	0x0800d9e5

0800d318 <Setup0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t Setup0_Process(void)
{
 800d318:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 800d31a:	f645 4350 	movw	r3, #23632	; 0x5c50
 800d31e:	f2c4 0300 	movt	r3, #16384	; 0x4000

  if (pInformation->ControlState != PAUSE)
 800d322:	4d9d      	ldr	r5, [pc, #628]	; (800d598 <Setup0_Process+0x280>)
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 800d324:	681a      	ldr	r2, [r3, #0]

  if (pInformation->ControlState != PAUSE)
 800d326:	682c      	ldr	r4, [r5, #0]
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 800d328:	f243 0304 	movw	r3, #12292	; 0x3004
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
}
 800d32c:	b292      	uxth	r2, r2
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 800d32e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d332:	18d3      	adds	r3, r2, r3

  if (pInformation->ControlState != PAUSE)
 800d334:	7a22      	ldrb	r2, [r4, #8]
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 800d336:	005b      	lsls	r3, r3, #1

  if (pInformation->ControlState != PAUSE)
 800d338:	2a09      	cmp	r2, #9
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t Setup0_Process(void)
{
 800d33a:	b083      	sub	sp, #12
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 800d33c:	681e      	ldr	r6, [r3, #0]

  if (pInformation->ControlState != PAUSE)
 800d33e:	d044      	beq.n	800d3ca <Setup0_Process+0xb2>
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
}
 800d340:	b2b6      	uxth	r6, r6
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 800d342:	0076      	lsls	r6, r6, #1
 800d344:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 800d348:	f506 46c0 	add.w	r6, r6, #24576	; 0x6000

  if (pInformation->ControlState != PAUSE)
  {
    pInformation->USBbmRequestType = *pBuf.b++; /* bmRequestType */
 800d34c:	7833      	ldrb	r3, [r6, #0]
    pInformation->USBbRequest = *pBuf.b++; /* bRequest */
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwValue = ByteSwap(*pBuf.w++); /* wValue */
 800d34e:	4f93      	ldr	r7, [pc, #588]	; (800d59c <Setup0_Process+0x284>)
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */

  if (pInformation->ControlState != PAUSE)
  {
    pInformation->USBbmRequestType = *pBuf.b++; /* bmRequestType */
 800d350:	7023      	strb	r3, [r4, #0]
    pInformation->USBbRequest = *pBuf.b++; /* bRequest */
 800d352:	7873      	ldrb	r3, [r6, #1]
 800d354:	7063      	strb	r3, [r4, #1]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwValue = ByteSwap(*pBuf.w++); /* wValue */
 800d356:	88b0      	ldrh	r0, [r6, #4]
 800d358:	47b8      	blx	r7
 800d35a:	8060      	strh	r0, [r4, #2]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
 800d35c:	8930      	ldrh	r0, [r6, #8]
 800d35e:	682c      	ldr	r4, [r5, #0]
 800d360:	47b8      	blx	r7
 800d362:	80a0      	strh	r0, [r4, #4]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwLength = *pBuf.w; /* wLength */
 800d364:	89b3      	ldrh	r3, [r6, #12]
 800d366:	682c      	ldr	r4, [r5, #0]
  }

  pInformation->ControlState = SETTING_UP;
 800d368:	2201      	movs	r2, #1
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwValue = ByteSwap(*pBuf.w++); /* wValue */
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwLength = *pBuf.w; /* wLength */
 800d36a:	80e3      	strh	r3, [r4, #6]
  }

  pInformation->ControlState = SETTING_UP;
 800d36c:	7222      	strb	r2, [r4, #8]
  if (pInformation->USBwLength == 0)
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d030      	beq.n	800d3d4 <Setup0_Process+0xbc>
*******************************************************************************/
void Data_Setup0(void)
{
  uint8_t *(*CopyRoutine)(uint16_t);
  RESULT Result;
  uint32_t Request_No = pInformation->USBbRequest;
 800d372:	7861      	ldrb	r1, [r4, #1]

  CopyRoutine = NULL;
  wOffset = 0;

  /*GET DESCRIPTOR*/
  if (Request_No == GET_DESCRIPTOR)
 800d374:	2906      	cmp	r1, #6
 800d376:	f000 8087 	beq.w	800d488 <Setup0_Process+0x170>
      }  /* End of GET_DESCRIPTOR */
    }
  }

  /*GET STATUS*/
  else if ((Request_No == GET_STATUS) && (pInformation->USBwValue == 0)
 800d37a:	2900      	cmp	r1, #0
 800d37c:	d15e      	bne.n	800d43c <Setup0_Process+0x124>
 800d37e:	8863      	ldrh	r3, [r4, #2]
 800d380:	2b00      	cmp	r3, #0
 800d382:	f000 8094 	beq.w	800d4ae <Setup0_Process+0x196>
 800d386:	4e86      	ldr	r6, [pc, #536]	; (800d5a0 <Setup0_Process+0x288>)
    (*CopyRoutine)(0);
    Result = USB_SUCCESS;
  }
  else
  {
    Result = (*pProperty->Class_Data_Setup)(pInformation->USBbRequest);
 800d388:	6833      	ldr	r3, [r6, #0]
 800d38a:	4608      	mov	r0, r1
 800d38c:	691b      	ldr	r3, [r3, #16]
 800d38e:	4798      	blx	r3
    if (Result == USB_NOT_READY)
 800d390:	2803      	cmp	r0, #3
    {
      pInformation->ControlState = PAUSE;
 800d392:	682b      	ldr	r3, [r5, #0]
    Result = USB_SUCCESS;
  }
  else
  {
    Result = (*pProperty->Class_Data_Setup)(pInformation->USBbRequest);
    if (Result == USB_NOT_READY)
 800d394:	d062      	beq.n	800d45c <Setup0_Process+0x144>
      pInformation->ControlState = PAUSE;
      return;
    }
  }

  if (pInformation->Ctrl_Info.Usb_wLength == 0xFFFF)
 800d396:	8a1a      	ldrh	r2, [r3, #16]
 800d398:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d39c:	428a      	cmp	r2, r1
 800d39e:	d05d      	beq.n	800d45c <Setup0_Process+0x144>
  {
    /* Data is not ready, wait it */
    pInformation->ControlState = PAUSE;
    return;
  }
  if ((Result == USB_UNSUPPORT) || (pInformation->Ctrl_Info.Usb_wLength == 0))
 800d3a0:	2802      	cmp	r0, #2
 800d3a2:	d00c      	beq.n	800d3be <Setup0_Process+0xa6>
 800d3a4:	b15a      	cbz	r2, 800d3be <Setup0_Process+0xa6>
    pInformation->ControlState = STALLED;
    return;
  }


  if (ValBit(pInformation->USBbmRequestType, 7))
 800d3a6:	f993 1000 	ldrsb.w	r1, [r3]
 800d3aa:	2900      	cmp	r1, #0
 800d3ac:	f2c0 80b5 	blt.w	800d51a <Setup0_Process+0x202>
    pInformation->Ctrl_Info.PacketSize = pProperty->MaxPacketSize;
    DataStageIn();
  }
  else
  {
    pInformation->ControlState = OUT_DATA;
 800d3b0:	2203      	movs	r2, #3
 800d3b2:	721a      	strb	r2, [r3, #8]
    vSetEPRxStatus(EP_RX_VALID); /* enable for next data reception */
 800d3b4:	4b7b      	ldr	r3, [pc, #492]	; (800d5a4 <Setup0_Process+0x28c>)
 800d3b6:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800d3ba:	801a      	strh	r2, [r3, #0]
 800d3bc:	e001      	b.n	800d3c2 <Setup0_Process+0xaa>
    return;
  }
  if ((Result == USB_UNSUPPORT) || (pInformation->Ctrl_Info.Usb_wLength == 0))
  {
    /* Unsupported request */
    pInformation->ControlState = STALLED;
 800d3be:	2208      	movs	r2, #8
 800d3c0:	721a      	strb	r2, [r3, #8]
  else
  {
    /* Setup with data stage */
    Data_Setup0();
  }
  return Post0_Process();
 800d3c2:	4b79      	ldr	r3, [pc, #484]	; (800d5a8 <Setup0_Process+0x290>)
 800d3c4:	4798      	blx	r3
}
 800d3c6:	b003      	add	sp, #12
 800d3c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d3ca:	88e3      	ldrh	r3, [r4, #6]
    pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwLength = *pBuf.w; /* wLength */
  }

  pInformation->ControlState = SETTING_UP;
 800d3cc:	2201      	movs	r2, #1
 800d3ce:	7222      	strb	r2, [r4, #8]
  if (pInformation->USBwLength == 0)
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d1ce      	bne.n	800d372 <Setup0_Process+0x5a>
{
  RESULT Result = USB_UNSUPPORT;
  uint32_t RequestNo = pInformation->USBbRequest;
  uint32_t ControlState;

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800d3d4:	7823      	ldrb	r3, [r4, #0]
* Return         : None.
*******************************************************************************/
void NoData_Setup0(void)
{
  RESULT Result = USB_UNSUPPORT;
  uint32_t RequestNo = pInformation->USBbRequest;
 800d3d6:	7866      	ldrb	r6, [r4, #1]
  uint32_t ControlState;

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800d3d8:	f013 037f 	ands.w	r3, r3, #127	; 0x7f
 800d3dc:	d141      	bne.n	800d462 <Setup0_Process+0x14a>
  {
    /* Device Request*/
    /* SET_CONFIGURATION*/
    if (RequestNo == SET_CONFIGURATION)
 800d3de:	2e09      	cmp	r6, #9
 800d3e0:	f000 8108 	beq.w	800d5f4 <Setup0_Process+0x2dc>
    {
      Result = Standard_SetConfiguration();
    }

    /*SET ADDRESS*/
    else if (RequestNo == SET_ADDRESS)
 800d3e4:	2e05      	cmp	r6, #5
 800d3e6:	f000 80bf 	beq.w	800d568 <Setup0_Process+0x250>
      {
        Result = USB_SUCCESS;
      }
    }
    /*SET FEATURE for Device*/
    else if (RequestNo == SET_FEATURE)
 800d3ea:	2e03      	cmp	r6, #3
 800d3ec:	f000 80f0 	beq.w	800d5d0 <Setup0_Process+0x2b8>
      {
        Result = USB_UNSUPPORT;
      }
    }
    /*Clear FEATURE for Device */
    else if (RequestNo == CLEAR_FEATURE)
 800d3f0:	2e01      	cmp	r6, #1
 800d3f2:	d13b      	bne.n	800d46c <Setup0_Process+0x154>
    {
      if (pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP
 800d3f4:	78e3      	ldrb	r3, [r4, #3]
 800d3f6:	2b01      	cmp	r3, #1
 800d3f8:	d138      	bne.n	800d46c <Setup0_Process+0x154>
          && pInformation->USBwIndex == 0
 800d3fa:	88a3      	ldrh	r3, [r4, #4]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d135      	bne.n	800d46c <Setup0_Process+0x154>
          && ValBit(pInformation->Current_Feature, 5))
 800d400:	7a63      	ldrb	r3, [r4, #9]
 800d402:	f003 0320 	and.w	r3, r3, #32
 800d406:	b2db      	uxtb	r3, r3
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d02f      	beq.n	800d46c <Setup0_Process+0x154>
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
  {
    /*CLEAR FEATURE for EndPoint*/
    if (RequestNo == CLEAR_FEATURE)
    {
      Result = Standard_ClearFeature();
 800d40c:	4b67      	ldr	r3, [pc, #412]	; (800d5ac <Setup0_Process+0x294>)
 800d40e:	4798      	blx	r3
  {
    Result = USB_UNSUPPORT;
  }


  if (Result != USB_SUCCESS)
 800d410:	bb60      	cbnz	r0, 800d46c <Setup0_Process+0x154>
 800d412:	682c      	ldr	r4, [r5, #0]
    goto exit_NoData_Setup0;
  }

  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();
 800d414:	f645 4350 	movw	r3, #23632	; 0x5c50
 800d418:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d41c:	681a      	ldr	r2, [r3, #0]
 800d41e:	f243 0302 	movw	r3, #12290	; 0x3002
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
}
 800d422:	b292      	uxth	r2, r2
    goto exit_NoData_Setup0;
  }

  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();
 800d424:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d428:	18d3      	adds	r3, r2, r3
 800d42a:	005b      	lsls	r3, r3, #1
 800d42c:	2200      	movs	r2, #0
 800d42e:	601a      	str	r2, [r3, #0]
 800d430:	4a5f      	ldr	r2, [pc, #380]	; (800d5b0 <Setup0_Process+0x298>)
 800d432:	2306      	movs	r3, #6
 800d434:	2130      	movs	r1, #48	; 0x30
 800d436:	8011      	strh	r1, [r2, #0]

exit_NoData_Setup0:
  pInformation->ControlState = ControlState;
 800d438:	7223      	strb	r3, [r4, #8]
 800d43a:	e7c2      	b.n	800d3c2 <Setup0_Process+0xaa>
    }

  }

  /*GET CONFIGURATION*/
  else if (Request_No == GET_CONFIGURATION)
 800d43c:	2908      	cmp	r1, #8
 800d43e:	d148      	bne.n	800d4d2 <Setup0_Process+0x1ba>
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800d440:	7823      	ldrb	r3, [r4, #0]
 800d442:	065b      	lsls	r3, r3, #25
 800d444:	d19f      	bne.n	800d386 <Setup0_Process+0x6e>
    {
      CopyRoutine = Standard_GetConfiguration;
 800d446:	4b5b      	ldr	r3, [pc, #364]	; (800d5b4 <Setup0_Process+0x29c>)

  }
  
  if (CopyRoutine)
  {
    pInformation->Ctrl_Info.Usb_wOffset = wOffset;
 800d448:	2000      	movs	r0, #0
    pInformation->Ctrl_Info.CopyData = CopyRoutine;
 800d44a:	61a3      	str	r3, [r4, #24]

  }
  
  if (CopyRoutine)
  {
    pInformation->Ctrl_Info.Usb_wOffset = wOffset;
 800d44c:	8260      	strh	r0, [r4, #18]
    pInformation->Ctrl_Info.CopyData = CopyRoutine;
    /* sb in the original the cast to word was directly */
    /* now the cast is made step by step */
    (*CopyRoutine)(0);
 800d44e:	4798      	blx	r3
      pInformation->ControlState = PAUSE;
      return;
    }
  }

  if (pInformation->Ctrl_Info.Usb_wLength == 0xFFFF)
 800d450:	682b      	ldr	r3, [r5, #0]
 800d452:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d456:	8a1a      	ldrh	r2, [r3, #16]
 800d458:	428a      	cmp	r2, r1
 800d45a:	d1a3      	bne.n	800d3a4 <Setup0_Process+0x8c>
  {
    /* Data is not ready, wait it */
    pInformation->ControlState = PAUSE;
 800d45c:	2209      	movs	r2, #9
 800d45e:	721a      	strb	r2, [r3, #8]
 800d460:	e7af      	b.n	800d3c2 <Setup0_Process+0xaa>
    }

  }

  /* Interface Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 800d462:	2b01      	cmp	r3, #1
 800d464:	d071      	beq.n	800d54a <Setup0_Process+0x232>
      Result = Standard_SetInterface();
    }
  }

  /* EndPoint Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 800d466:	2b02      	cmp	r3, #2
 800d468:	f000 808d 	beq.w	800d586 <Setup0_Process+0x26e>
  }


  if (Result != USB_SUCCESS)
  {
    Result = (*pProperty->Class_NoData_Setup)(RequestNo);
 800d46c:	4b4c      	ldr	r3, [pc, #304]	; (800d5a0 <Setup0_Process+0x288>)
 800d46e:	4630      	mov	r0, r6
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	695b      	ldr	r3, [r3, #20]
 800d474:	4798      	blx	r3
    if (Result == USB_NOT_READY)
 800d476:	2803      	cmp	r0, #3
 800d478:	f000 80c5 	beq.w	800d606 <Setup0_Process+0x2ee>
 800d47c:	682c      	ldr	r4, [r5, #0]
      ControlState = PAUSE;
      goto exit_NoData_Setup0;
    }
  }

  if (Result != USB_SUCCESS)
 800d47e:	2800      	cmp	r0, #0
 800d480:	d0c8      	beq.n	800d414 <Setup0_Process+0xfc>
    /*SET ADDRESS*/
    else if (RequestNo == SET_ADDRESS)
    {
      if ((pInformation->USBwValue0 > 127) || (pInformation->USBwValue1 != 0)
          || (pInformation->USBwIndex != 0)
          || (pInformation->Current_Configuration != 0))
 800d482:	2308      	movs	r3, #8
  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();

exit_NoData_Setup0:
  pInformation->ControlState = ControlState;
 800d484:	7223      	strb	r3, [r4, #8]
 800d486:	e79c      	b.n	800d3c2 <Setup0_Process+0xaa>
  wOffset = 0;

  /*GET DESCRIPTOR*/
  if (Request_No == GET_DESCRIPTOR)
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800d488:	7823      	ldrb	r3, [r4, #0]
 800d48a:	065b      	lsls	r3, r3, #25
 800d48c:	f47f af7b 	bne.w	800d386 <Setup0_Process+0x6e>
    {
      uint8_t wValue1 = pInformation->USBwValue1;
 800d490:	78a3      	ldrb	r3, [r4, #2]
      if (wValue1 == DEVICE_DESCRIPTOR)
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
 800d492:	4e43      	ldr	r6, [pc, #268]	; (800d5a0 <Setup0_Process+0x288>)
  if (Request_No == GET_DESCRIPTOR)
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
    {
      uint8_t wValue1 = pInformation->USBwValue1;
      if (wValue1 == DEVICE_DESCRIPTOR)
 800d494:	2b01      	cmp	r3, #1
 800d496:	f000 80b0 	beq.w	800d5fa <Setup0_Process+0x2e2>
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
      }
      else if (wValue1 == CONFIG_DESCRIPTOR)
 800d49a:	2b02      	cmp	r3, #2
 800d49c:	d05e      	beq.n	800d55c <Setup0_Process+0x244>
      {
        CopyRoutine = pProperty->GetConfigDescriptor;
      }
      else if (wValue1 == STRING_DESCRIPTOR)
 800d49e:	2b03      	cmp	r3, #3
 800d4a0:	f47f af72 	bne.w	800d388 <Setup0_Process+0x70>
      {
        CopyRoutine = pProperty->GetStringDescriptor;
 800d4a4:	6833      	ldr	r3, [r6, #0]
 800d4a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      CopyRoutine = Standard_GetInterface;
    }

  }
  
  if (CopyRoutine)
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d1cd      	bne.n	800d448 <Setup0_Process+0x130>
 800d4ac:	e76c      	b.n	800d388 <Setup0_Process+0x70>
  }

  /*GET STATUS*/
  else if ((Request_No == GET_STATUS) && (pInformation->USBwValue == 0)
           && (pInformation->USBwLength == 0x0002)
           && (pInformation->USBwIndex1 == 0))
 800d4ae:	6863      	ldr	r3, [r4, #4]
 800d4b0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d4b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d4b8:	f47f af65 	bne.w	800d386 <Setup0_Process+0x6e>
  {
    /* GET STATUS for Device*/
    if ((Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800d4bc:	7823      	ldrb	r3, [r4, #0]
 800d4be:	f013 037f 	ands.w	r3, r3, #127	; 0x7f
 800d4c2:	f040 80a4 	bne.w	800d60e <Setup0_Process+0x2f6>
        && (pInformation->USBwIndex == 0))
 800d4c6:	88a3      	ldrh	r3, [r4, #4]
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	f47f af5c 	bne.w	800d386 <Setup0_Process+0x6e>
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
          && (Status != 0))
      {
        CopyRoutine = Standard_GetStatus;
 800d4ce:	4b3a      	ldr	r3, [pc, #232]	; (800d5b8 <Setup0_Process+0x2a0>)
 800d4d0:	e7ba      	b.n	800d448 <Setup0_Process+0x130>
    {
      CopyRoutine = Standard_GetConfiguration;
    }
  }
  /*GET INTERFACE*/
  else if (Request_No == GET_INTERFACE)
 800d4d2:	290a      	cmp	r1, #10
 800d4d4:	f47f af57 	bne.w	800d386 <Setup0_Process+0x6e>
  {
    if ((Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 800d4d8:	7823      	ldrb	r3, [r4, #0]
 800d4da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d4de:	2b01      	cmp	r3, #1
 800d4e0:	f47f af51 	bne.w	800d386 <Setup0_Process+0x6e>
        && (pInformation->Current_Configuration != 0) && (pInformation->USBwValue == 0)
 800d4e4:	7aa3      	ldrb	r3, [r4, #10]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	f43f af4d 	beq.w	800d386 <Setup0_Process+0x6e>
 800d4ec:	8863      	ldrh	r3, [r4, #2]
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	f47f af49 	bne.w	800d386 <Setup0_Process+0x6e>
        && (pInformation->USBwIndex1 == 0) && (pInformation->USBwLength == 0x0001)
 800d4f4:	6862      	ldr	r2, [r4, #4]
        && ((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS))
 800d4f6:	4e2a      	ldr	r6, [pc, #168]	; (800d5a0 <Setup0_Process+0x288>)
  /*GET INTERFACE*/
  else if (Request_No == GET_INTERFACE)
  {
    if ((Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
        && (pInformation->Current_Configuration != 0) && (pInformation->USBwValue == 0)
        && (pInformation->USBwIndex1 == 0) && (pInformation->USBwLength == 0x0001)
 800d4f8:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800d4fc:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800d500:	f47f af42 	bne.w	800d388 <Setup0_Process+0x70>
        && ((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS))
 800d504:	6832      	ldr	r2, [r6, #0]
 800d506:	4619      	mov	r1, r3
 800d508:	7960      	ldrb	r0, [r4, #5]
 800d50a:	6993      	ldr	r3, [r2, #24]
 800d50c:	4798      	blx	r3
 800d50e:	2800      	cmp	r0, #0
 800d510:	f040 80be 	bne.w	800d690 <Setup0_Process+0x378>
 800d514:	682c      	ldr	r4, [r5, #0]
    {
      CopyRoutine = Standard_GetInterface;
 800d516:	4b29      	ldr	r3, [pc, #164]	; (800d5bc <Setup0_Process+0x2a4>)
 800d518:	e796      	b.n	800d448 <Setup0_Process+0x130>


  if (ValBit(pInformation->USBbmRequestType, 7))
  {
    /* Device ==> Host */
    __IO uint32_t wLength = pInformation->USBwLength;
 800d51a:	88d9      	ldrh	r1, [r3, #6]
 800d51c:	9101      	str	r1, [sp, #4]
     
    /* Restrict the data length to be the one host asks for */
    if (pInformation->Ctrl_Info.Usb_wLength > wLength)
 800d51e:	9801      	ldr	r0, [sp, #4]
 800d520:	4282      	cmp	r2, r0
 800d522:	d817      	bhi.n	800d554 <Setup0_Process+0x23c>
    {
      pInformation->Ctrl_Info.Usb_wLength = wLength;
    }
    
    else if (pInformation->Ctrl_Info.Usb_wLength < pInformation->USBwLength)
 800d524:	428a      	cmp	r2, r1
    {
      if (pInformation->Ctrl_Info.Usb_wLength < pProperty->MaxPacketSize)
 800d526:	4e1e      	ldr	r6, [pc, #120]	; (800d5a0 <Setup0_Process+0x288>)
    if (pInformation->Ctrl_Info.Usb_wLength > wLength)
    {
      pInformation->Ctrl_Info.Usb_wLength = wLength;
    }
    
    else if (pInformation->Ctrl_Info.Usb_wLength < pInformation->USBwLength)
 800d528:	d208      	bcs.n	800d53c <Setup0_Process+0x224>
    {
      if (pInformation->Ctrl_Info.Usb_wLength < pProperty->MaxPacketSize)
 800d52a:	6831      	ldr	r1, [r6, #0]
 800d52c:	f891 102c 	ldrb.w	r1, [r1, #44]	; 0x2c
 800d530:	428a      	cmp	r2, r1
 800d532:	f080 8095 	bcs.w	800d660 <Setup0_Process+0x348>
      {
        Data_Mul_MaxPacketSize = FALSE;
 800d536:	4a22      	ldr	r2, [pc, #136]	; (800d5c0 <Setup0_Process+0x2a8>)
 800d538:	2100      	movs	r1, #0
 800d53a:	7011      	strb	r1, [r2, #0]
      {
        Data_Mul_MaxPacketSize = TRUE;
      }
    }   

    pInformation->Ctrl_Info.PacketSize = pProperty->MaxPacketSize;
 800d53c:	6832      	ldr	r2, [r6, #0]
 800d53e:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800d542:	829a      	strh	r2, [r3, #20]
    DataStageIn();
 800d544:	4b1f      	ldr	r3, [pc, #124]	; (800d5c4 <Setup0_Process+0x2ac>)
 800d546:	4798      	blx	r3
 800d548:	e73b      	b.n	800d3c2 <Setup0_Process+0xaa>

  /* Interface Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
  {
    /*SET INTERFACE*/
    if (RequestNo == SET_INTERFACE)
 800d54a:	2e0b      	cmp	r6, #11
 800d54c:	d18e      	bne.n	800d46c <Setup0_Process+0x154>
    {
      Result = Standard_SetInterface();
 800d54e:	4b1e      	ldr	r3, [pc, #120]	; (800d5c8 <Setup0_Process+0x2b0>)
 800d550:	4798      	blx	r3
 800d552:	e75d      	b.n	800d410 <Setup0_Process+0xf8>
    __IO uint32_t wLength = pInformation->USBwLength;
     
    /* Restrict the data length to be the one host asks for */
    if (pInformation->Ctrl_Info.Usb_wLength > wLength)
    {
      pInformation->Ctrl_Info.Usb_wLength = wLength;
 800d554:	9a01      	ldr	r2, [sp, #4]
 800d556:	4e12      	ldr	r6, [pc, #72]	; (800d5a0 <Setup0_Process+0x288>)
 800d558:	821a      	strh	r2, [r3, #16]
 800d55a:	e7ef      	b.n	800d53c <Setup0_Process+0x224>
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
      }
      else if (wValue1 == CONFIG_DESCRIPTOR)
      {
        CopyRoutine = pProperty->GetConfigDescriptor;
 800d55c:	6833      	ldr	r3, [r6, #0]
 800d55e:	6a1b      	ldr	r3, [r3, #32]
      CopyRoutine = Standard_GetInterface;
    }

  }
  
  if (CopyRoutine)
 800d560:	2b00      	cmp	r3, #0
 800d562:	f47f af71 	bne.w	800d448 <Setup0_Process+0x130>
 800d566:	e70f      	b.n	800d388 <Setup0_Process+0x70>
    }

    /*SET ADDRESS*/
    else if (RequestNo == SET_ADDRESS)
    {
      if ((pInformation->USBwValue0 > 127) || (pInformation->USBwValue1 != 0)
 800d568:	f994 3003 	ldrsb.w	r3, [r4, #3]
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	db88      	blt.n	800d482 <Setup0_Process+0x16a>
 800d570:	78a3      	ldrb	r3, [r4, #2]
 800d572:	2b00      	cmp	r3, #0
 800d574:	d185      	bne.n	800d482 <Setup0_Process+0x16a>
          || (pInformation->USBwIndex != 0)
 800d576:	88a3      	ldrh	r3, [r4, #4]
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d182      	bne.n	800d482 <Setup0_Process+0x16a>
          || (pInformation->Current_Configuration != 0))
 800d57c:	7aa3      	ldrb	r3, [r4, #10]
 800d57e:	2b00      	cmp	r3, #0
 800d580:	f43f af48 	beq.w	800d414 <Setup0_Process+0xfc>
 800d584:	e77d      	b.n	800d482 <Setup0_Process+0x16a>

  /* EndPoint Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
  {
    /*CLEAR FEATURE for EndPoint*/
    if (RequestNo == CLEAR_FEATURE)
 800d586:	2e01      	cmp	r6, #1
 800d588:	f43f af40 	beq.w	800d40c <Setup0_Process+0xf4>
    {
      Result = Standard_ClearFeature();
    }
    /* SET FEATURE for EndPoint*/
    else if (RequestNo == SET_FEATURE)
 800d58c:	2e03      	cmp	r6, #3
 800d58e:	f47f af6d 	bne.w	800d46c <Setup0_Process+0x154>
    {
      Result = Standard_SetEndPointFeature();
 800d592:	4b0e      	ldr	r3, [pc, #56]	; (800d5cc <Setup0_Process+0x2b4>)
 800d594:	4798      	blx	r3
 800d596:	e73b      	b.n	800d410 <Setup0_Process+0xf8>
 800d598:	2000208c 	.word	0x2000208c
 800d59c:	0800da6d 	.word	0x0800da6d
 800d5a0:	20002064 	.word	0x20002064
 800d5a4:	20002092 	.word	0x20002092
 800d5a8:	0800d1d5 	.word	0x0800d1d5
 800d5ac:	0800d029 	.word	0x0800d029
 800d5b0:	20002094 	.word	0x20002094
 800d5b4:	0800cde5 	.word	0x0800cde5
 800d5b8:	0800ce35 	.word	0x0800ce35
 800d5bc:	0800ce0d 	.word	0x0800ce0d
 800d5c0:	20000afc 	.word	0x20000afc
 800d5c4:	0800cecd 	.word	0x0800cecd
 800d5c8:	0800cfd9 	.word	0x0800cfd9
 800d5cc:	0800d121 	.word	0x0800d121
      }
    }
    /*SET FEATURE for Device*/
    else if (RequestNo == SET_FEATURE)
    {
      if ((pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP) \
 800d5d0:	78e3      	ldrb	r3, [r4, #3]
 800d5d2:	2b01      	cmp	r3, #1
 800d5d4:	f47f af4a 	bne.w	800d46c <Setup0_Process+0x154>
          && (pInformation->USBwIndex == 0))
 800d5d8:	88a3      	ldrh	r3, [r4, #4]
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	f47f af46 	bne.w	800d46c <Setup0_Process+0x154>
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetDeviceFeature(void)
{
  SetBit(pInformation->Current_Feature, 5);
 800d5e0:	7a62      	ldrb	r2, [r4, #9]
  pUser_Standard_Requests->User_SetDeviceFeature();
 800d5e2:	4b2d      	ldr	r3, [pc, #180]	; (800d698 <Setup0_Process+0x380>)
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetDeviceFeature(void)
{
  SetBit(pInformation->Current_Feature, 5);
 800d5e4:	f042 0220 	orr.w	r2, r2, #32
  pUser_Standard_Requests->User_SetDeviceFeature();
 800d5e8:	681b      	ldr	r3, [r3, #0]
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetDeviceFeature(void)
{
  SetBit(pInformation->Current_Feature, 5);
 800d5ea:	7262      	strb	r2, [r4, #9]
  pUser_Standard_Requests->User_SetDeviceFeature();
 800d5ec:	69db      	ldr	r3, [r3, #28]
 800d5ee:	4798      	blx	r3
 800d5f0:	682c      	ldr	r4, [r5, #0]
 800d5f2:	e70f      	b.n	800d414 <Setup0_Process+0xfc>
  {
    /* Device Request*/
    /* SET_CONFIGURATION*/
    if (RequestNo == SET_CONFIGURATION)
    {
      Result = Standard_SetConfiguration();
 800d5f4:	4b29      	ldr	r3, [pc, #164]	; (800d69c <Setup0_Process+0x384>)
 800d5f6:	4798      	blx	r3
 800d5f8:	e70a      	b.n	800d410 <Setup0_Process+0xf8>
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
    {
      uint8_t wValue1 = pInformation->USBwValue1;
      if (wValue1 == DEVICE_DESCRIPTOR)
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
 800d5fa:	6833      	ldr	r3, [r6, #0]
 800d5fc:	69db      	ldr	r3, [r3, #28]
      CopyRoutine = Standard_GetInterface;
    }

  }
  
  if (CopyRoutine)
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	f47f af22 	bne.w	800d448 <Setup0_Process+0x130>
 800d604:	e6c0      	b.n	800d388 <Setup0_Process+0x70>
 800d606:	682c      	ldr	r4, [r5, #0]


  if (Result != USB_SUCCESS)
  {
    Result = (*pProperty->Class_NoData_Setup)(RequestNo);
    if (Result == USB_NOT_READY)
 800d608:	2309      	movs	r3, #9
  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();

exit_NoData_Setup0:
  pInformation->ControlState = ControlState;
 800d60a:	7223      	strb	r3, [r4, #8]
 800d60c:	e6d9      	b.n	800d3c2 <Setup0_Process+0xaa>
    {
      CopyRoutine = Standard_GetStatus;
    }

    /* GET STATUS for Interface*/
    else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 800d60e:	2b01      	cmp	r3, #1
 800d610:	d031      	beq.n	800d676 <Setup0_Process+0x35e>
        CopyRoutine = Standard_GetStatus;
      }
    }

    /* GET STATUS for EndPoint*/
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 800d612:	2b02      	cmp	r3, #2
 800d614:	f47f aeb7 	bne.w	800d386 <Setup0_Process+0x6e>
    {
      Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
 800d618:	7963      	ldrb	r3, [r4, #5]
 800d61a:	f003 020f 	and.w	r2, r3, #15

      if (ValBit(pInformation->USBwIndex0, 7))
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 800d61e:	0090      	lsls	r0, r2, #2
 800d620:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
    {
      Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
      Reserved = pInformation->USBwIndex0 & 0x70;

      if (ValBit(pInformation->USBwIndex0, 7))
 800d624:	061e      	lsls	r6, r3, #24
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 800d626:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
      }
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
 800d62a:	bf56      	itet	pl
 800d62c:	6800      	ldrpl	r0, [r0, #0]

      if (ValBit(pInformation->USBwIndex0, 7))
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 800d62e:	6806      	ldrmi	r6, [r0, #0]
      }
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
 800d630:	f400 5640 	andpl.w	r6, r0, #12288	; 0x3000
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 800d634:	481a      	ldr	r0, [pc, #104]	; (800d6a0 <Setup0_Process+0x388>)

      if (ValBit(pInformation->USBwIndex0, 7))
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 800d636:	bf48      	it	mi
 800d638:	f006 0630 	andmi.w	r6, r6, #48	; 0x30
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 800d63c:	7800      	ldrb	r0, [r0, #0]
 800d63e:	4282      	cmp	r2, r0
 800d640:	f4bf aea1 	bcs.w	800d386 <Setup0_Process+0x6e>
 800d644:	f013 0f70 	tst.w	r3, #112	; 0x70
 800d648:	bf14      	ite	ne
 800d64a:	2300      	movne	r3, #0
 800d64c:	2301      	moveq	r3, #1
          && (Status != 0))
 800d64e:	2e00      	cmp	r6, #0
 800d650:	bf0c      	ite	eq
 800d652:	2600      	moveq	r6, #0
 800d654:	f003 0601 	andne.w	r6, r3, #1
 800d658:	2e00      	cmp	r6, #0
 800d65a:	f47f af38 	bne.w	800d4ce <Setup0_Process+0x1b6>
 800d65e:	e692      	b.n	800d386 <Setup0_Process+0x6e>
    {
      if (pInformation->Ctrl_Info.Usb_wLength < pProperty->MaxPacketSize)
      {
        Data_Mul_MaxPacketSize = FALSE;
      }
      else if ((pInformation->Ctrl_Info.Usb_wLength % pProperty->MaxPacketSize) == 0)
 800d660:	fb92 f0f1 	sdiv	r0, r2, r1
 800d664:	fb01 2210 	mls	r2, r1, r0, r2
 800d668:	2a00      	cmp	r2, #0
 800d66a:	f47f af67 	bne.w	800d53c <Setup0_Process+0x224>
      {
        Data_Mul_MaxPacketSize = TRUE;
 800d66e:	4a0d      	ldr	r2, [pc, #52]	; (800d6a4 <Setup0_Process+0x38c>)
 800d670:	2101      	movs	r1, #1
 800d672:	7011      	strb	r1, [r2, #0]
 800d674:	e762      	b.n	800d53c <Setup0_Process+0x224>
    }

    /* GET STATUS for Interface*/
    else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
    {
      if (((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS)
 800d676:	4e0c      	ldr	r6, [pc, #48]	; (800d6a8 <Setup0_Process+0x390>)
 800d678:	7960      	ldrb	r0, [r4, #5]
 800d67a:	6833      	ldr	r3, [r6, #0]
 800d67c:	699b      	ldr	r3, [r3, #24]
 800d67e:	4798      	blx	r3
 800d680:	b930      	cbnz	r0, 800d690 <Setup0_Process+0x378>
          && (pInformation->Current_Configuration != 0))
 800d682:	682c      	ldr	r4, [r5, #0]
 800d684:	7aa3      	ldrb	r3, [r4, #10]
 800d686:	2b00      	cmp	r3, #0
 800d688:	f47f af21 	bne.w	800d4ce <Setup0_Process+0x1b6>
 800d68c:	7861      	ldrb	r1, [r4, #1]
 800d68e:	e67b      	b.n	800d388 <Setup0_Process+0x70>
 800d690:	682b      	ldr	r3, [r5, #0]
 800d692:	7859      	ldrb	r1, [r3, #1]
 800d694:	e678      	b.n	800d388 <Setup0_Process+0x70>
 800d696:	bf00      	nop
 800d698:	20002088 	.word	0x20002088
 800d69c:	0800cf9d 	.word	0x0800cf9d
 800d6a0:	200000f4 	.word	0x200000f4
 800d6a4:	20000afc 	.word	0x20000afc
 800d6a8:	20002064 	.word	0x20002064

0800d6ac <SetDeviceAddress>:
* Input          : - Val: device address.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetDeviceAddress(uint8_t Val)
{
 800d6ac:	b470      	push	{r4, r5, r6}
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;
 800d6ae:	4b0f      	ldr	r3, [pc, #60]	; (800d6ec <SetDeviceAddress+0x40>)
 800d6b0:	781e      	ldrb	r6, [r3, #0]

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 800d6b2:	b196      	cbz	r6, 800d6da <SetDeviceAddress+0x2e>
 800d6b4:	f44f 44b8 	mov.w	r4, #23552	; 0x5c00
 800d6b8:	f2c4 0400 	movt	r4, #16384	; 0x4000
 800d6bc:	2300      	movs	r3, #0
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 800d6be:	6825      	ldr	r5, [r4, #0]
 800d6c0:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 800d6c4:	f640 720f 	movw	r2, #3855	; 0xf0f
 800d6c8:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800d6cc:	402a      	ands	r2, r5
{
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 800d6ce:	3301      	adds	r3, #1
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 800d6d0:	430a      	orrs	r2, r1
{
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 800d6d2:	429e      	cmp	r6, r3
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 800d6d4:	f844 2b04 	str.w	r2, [r4], #4
{
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 800d6d8:	d8f1      	bhi.n	800d6be <SetDeviceAddress+0x12>
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
  } /* for */
  _SetDADDR(Val | DADDR_EF); /* set device address and enable function */ 
 800d6da:	f645 434c 	movw	r3, #23628	; 0x5c4c
 800d6de:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 800d6e2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d6e6:	6018      	str	r0, [r3, #0]
}
 800d6e8:	bc70      	pop	{r4, r5, r6}
 800d6ea:	4770      	bx	lr
 800d6ec:	200000f4 	.word	0x200000f4

0800d6f0 <In0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t In0_Process(void)
{
 800d6f0:	b510      	push	{r4, lr}
  uint32_t ControlState = pInformation->ControlState;
 800d6f2:	4c14      	ldr	r4, [pc, #80]	; (800d744 <In0_Process+0x54>)
 800d6f4:	6823      	ldr	r3, [r4, #0]
 800d6f6:	7a1a      	ldrb	r2, [r3, #8]

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
 800d6f8:	2a02      	cmp	r2, #2
 800d6fa:	bf18      	it	ne
 800d6fc:	2a04      	cmpne	r2, #4
 800d6fe:	d010      	beq.n	800d722 <In0_Process+0x32>
    DataStageIn();
    /* ControlState may be changed outside the function */
    ControlState = pInformation->ControlState;
  }

  else if (ControlState == WAIT_STATUS_IN)
 800d700:	2a06      	cmp	r2, #6
 800d702:	d004      	beq.n	800d70e <In0_Process+0x1e>
 800d704:	2208      	movs	r2, #8
  else
  {
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;
 800d706:	721a      	strb	r2, [r3, #8]

  return Post0_Process();
 800d708:	4b0f      	ldr	r3, [pc, #60]	; (800d748 <In0_Process+0x58>)
 800d70a:	4798      	blx	r3
}
 800d70c:	bd10      	pop	{r4, pc}
    ControlState = pInformation->ControlState;
  }

  else if (ControlState == WAIT_STATUS_IN)
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 800d70e:	785a      	ldrb	r2, [r3, #1]
 800d710:	2a05      	cmp	r2, #5
 800d712:	d00b      	beq.n	800d72c <In0_Process+0x3c>
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
    {
      SetDeviceAddress(pInformation->USBwValue0);
      pUser_Standard_Requests->User_SetDeviceAddress();
    }
    (*pProperty->Process_Status_IN)();
 800d714:	4b0d      	ldr	r3, [pc, #52]	; (800d74c <In0_Process+0x5c>)
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	689b      	ldr	r3, [r3, #8]
 800d71a:	4798      	blx	r3
 800d71c:	6823      	ldr	r3, [r4, #0]
 800d71e:	2208      	movs	r2, #8
 800d720:	e7f1      	b.n	800d706 <In0_Process+0x16>
{
  uint32_t ControlState = pInformation->ControlState;

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
  {
    DataStageIn();
 800d722:	4b0b      	ldr	r3, [pc, #44]	; (800d750 <In0_Process+0x60>)
 800d724:	4798      	blx	r3
    /* ControlState may be changed outside the function */
    ControlState = pInformation->ControlState;
 800d726:	6823      	ldr	r3, [r4, #0]
 800d728:	7a1a      	ldrb	r2, [r3, #8]
 800d72a:	e7ec      	b.n	800d706 <In0_Process+0x16>
  }

  else if (ControlState == WAIT_STATUS_IN)
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
 800d72c:	781a      	ldrb	r2, [r3, #0]
    ControlState = pInformation->ControlState;
  }

  else if (ControlState == WAIT_STATUS_IN)
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 800d72e:	0652      	lsls	r2, r2, #25
 800d730:	d1f0      	bne.n	800d714 <In0_Process+0x24>
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
    {
      SetDeviceAddress(pInformation->USBwValue0);
 800d732:	78d8      	ldrb	r0, [r3, #3]
 800d734:	4b07      	ldr	r3, [pc, #28]	; (800d754 <In0_Process+0x64>)
 800d736:	4798      	blx	r3
      pUser_Standard_Requests->User_SetDeviceAddress();
 800d738:	4b07      	ldr	r3, [pc, #28]	; (800d758 <In0_Process+0x68>)
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	6a1b      	ldr	r3, [r3, #32]
 800d73e:	4798      	blx	r3
 800d740:	e7e8      	b.n	800d714 <In0_Process+0x24>
 800d742:	bf00      	nop
 800d744:	2000208c 	.word	0x2000208c
 800d748:	0800d1d5 	.word	0x0800d1d5
 800d74c:	20002064 	.word	0x20002064
 800d750:	0800cecd 	.word	0x0800cecd
 800d754:	0800d6ad 	.word	0x0800d6ad
 800d758:	20002088 	.word	0x20002088

0800d75c <NOP_Process>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
 800d75c:	4770      	bx	lr
 800d75e:	bf00      	nop

0800d760 <USB_Init>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Init(void)
{
 800d760:	b510      	push	{r4, lr}
  pInformation = &Device_Info;
 800d762:	f242 026c 	movw	r2, #8300	; 0x206c
 800d766:	f242 048c 	movw	r4, #8332	; 0x208c
 800d76a:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800d76e:	f2c2 0400 	movt	r4, #8192	; 0x2000
 800d772:	6022      	str	r2, [r4, #0]
  pInformation->ControlState = 2;
 800d774:	2402      	movs	r4, #2
 800d776:	7214      	strb	r4, [r2, #8]
  pProperty = &Device_Property;
 800d778:	f242 0064 	movw	r0, #8292	; 0x2064
 800d77c:	f240 0370 	movw	r3, #112	; 0x70
  pUser_Standard_Requests = &User_Standard_Requests;
 800d780:	f242 0188 	movw	r1, #8328	; 0x2088
 800d784:	f240 02a0 	movw	r2, #160	; 0xa0
*******************************************************************************/
void USB_Init(void)
{
  pInformation = &Device_Info;
  pInformation->ControlState = 2;
  pProperty = &Device_Property;
 800d788:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d78c:	f2c2 0000 	movt	r0, #8192	; 0x2000
  pUser_Standard_Requests = &User_Standard_Requests;
 800d790:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800d794:	f2c2 0200 	movt	r2, #8192	; 0x2000
*******************************************************************************/
void USB_Init(void)
{
  pInformation = &Device_Info;
  pInformation->ControlState = 2;
  pProperty = &Device_Property;
 800d798:	6003      	str	r3, [r0, #0]
  pUser_Standard_Requests = &User_Standard_Requests;
 800d79a:	600a      	str	r2, [r1, #0]
  /* Initialize devices one by one */
  pProperty->Init();
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	4798      	blx	r3
 800d7a0:	bd10      	pop	{r4, pc}
 800d7a2:	bf00      	nop

0800d7a4 <UserToPMABufferCopy>:
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
 800d7a4:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
 800d7a8:	f501 5140 	add.w	r1, r1, #12288	; 0x3000
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 800d7ac:	3201      	adds	r2, #1
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
 800d7ae:	0049      	lsls	r1, r1, #1
  for (i = n; i != 0; i--)
 800d7b0:	1053      	asrs	r3, r2, #1
*                  - wNBytes: no. of bytes to be copied.
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800d7b2:	b410      	push	{r4}
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 800d7b4:	d00d      	beq.n	800d7d2 <UserToPMABufferCopy+0x2e>
 800d7b6:	1d0a      	adds	r2, r1, #4
*                  - wPMABufAddr: address into PMA.
*                  - wNBytes: no. of bytes to be copied.
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
 800d7b8:	3002      	adds	r0, #2
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
  {
    temp1 = (uint16_t) * pbUsrBuf;
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 800d7ba:	f810 4c01 	ldrb.w	r4, [r0, #-1]
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
  {
    temp1 = (uint16_t) * pbUsrBuf;
 800d7be:	f810 1c02 	ldrb.w	r1, [r0, #-2]
 800d7c2:	3002      	adds	r0, #2
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 800d7c4:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
    *pdwVal++ = temp2;
 800d7c8:	f822 1c04 	strh.w	r1, [r2, #-4]
 800d7cc:	3204      	adds	r2, #4
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 800d7ce:	3b01      	subs	r3, #1
 800d7d0:	d1f3      	bne.n	800d7ba <UserToPMABufferCopy+0x16>
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
    *pdwVal++ = temp2;
    pdwVal++;
    pbUsrBuf++;
  }
}
 800d7d2:	bc10      	pop	{r4}
 800d7d4:	4770      	bx	lr
 800d7d6:	bf00      	nop

0800d7d8 <PMAToUserBufferCopy>:
void PMAToUserBufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
 800d7d8:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
 800d7dc:	f501 5140 	add.w	r1, r1, #12288	; 0x3000
* Output         : None.
* Return         : None.
*******************************************************************************/
void PMAToUserBufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
 800d7e0:	3201      	adds	r2, #1
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
 800d7e2:	0049      	lsls	r1, r1, #1
  for (i = n; i != 0; i--)
 800d7e4:	1053      	asrs	r3, r2, #1
 800d7e6:	d008      	beq.n	800d7fa <PMAToUserBufferCopy+0x22>
*                  - wPMABufAddr = address into PMA.
*                  - wNBytes     = no. of bytes to be copied.
* Output         : None.
* Return         : None.
*******************************************************************************/
void PMAToUserBufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
 800d7e8:	3002      	adds	r0, #2
 800d7ea:	1f0a      	subs	r2, r1, #4
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 800d7ec:	f852 1f04 	ldr.w	r1, [r2, #4]!
 800d7f0:	f820 1c02 	strh.w	r1, [r0, #-2]
 800d7f4:	3002      	adds	r0, #2
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 800d7f6:	3b01      	subs	r3, #1
 800d7f8:	d1f8      	bne.n	800d7ec <PMAToUserBufferCopy+0x14>
 800d7fa:	4770      	bx	lr

0800d7fc <SetBTABLE>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetBTABLE(uint16_t wRegValue)
{
  _SetBTABLE(wRegValue);
 800d7fc:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 800d800:	f645 4250 	movw	r2, #23632	; 0x5c50
 800d804:	4003      	ands	r3, r0
 800d806:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800d80a:	6013      	str	r3, [r2, #0]
 800d80c:	4770      	bx	lr
 800d80e:	bf00      	nop

0800d810 <SetEPType>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPType(uint8_t bEpNum, uint16_t wType)
{
  _SetEPType(bEpNum, wType);
 800d810:	0080      	lsls	r0, r0, #2
 800d812:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 800d816:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 800d81a:	6810      	ldr	r0, [r2, #0]
 800d81c:	f648 138f 	movw	r3, #35215	; 0x898f
 800d820:	4003      	ands	r3, r0
 800d822:	4319      	orrs	r1, r3
 800d824:	6011      	str	r1, [r2, #0]
 800d826:	4770      	bx	lr

0800d828 <SetEPTxStatus>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxStatus(uint8_t bEpNum, uint16_t wState)
{
  _SetEPTxStatus(bEpNum, wState);
 800d828:	0080      	lsls	r0, r0, #2
 800d82a:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 800d82e:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
*                  wState: new state.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxStatus(uint8_t bEpNum, uint16_t wState)
{
 800d832:	b410      	push	{r4}
  _SetEPTxStatus(bEpNum, wState);
 800d834:	f001 0010 	and.w	r0, r1, #16
 800d838:	6814      	ldr	r4, [r2, #0]
 800d83a:	f648 73bf 	movw	r3, #36799	; 0x8fbf
 800d83e:	b280      	uxth	r0, r0
 800d840:	4023      	ands	r3, r4
 800d842:	b968      	cbnz	r0, 800d860 <SetEPTxStatus+0x38>
 800d844:	b29b      	uxth	r3, r3
 800d846:	f001 0120 	and.w	r1, r1, #32
 800d84a:	b289      	uxth	r1, r1
 800d84c:	b109      	cbz	r1, 800d852 <SetEPTxStatus+0x2a>
 800d84e:	f083 0320 	eor.w	r3, r3, #32
 800d852:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d856:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d85a:	6013      	str	r3, [r2, #0]
}
 800d85c:	bc10      	pop	{r4}
 800d85e:	4770      	bx	lr
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxStatus(uint8_t bEpNum, uint16_t wState)
{
  _SetEPTxStatus(bEpNum, wState);
 800d860:	f083 0310 	eor.w	r3, r3, #16
 800d864:	e7ef      	b.n	800d846 <SetEPTxStatus+0x1e>
 800d866:	bf00      	nop

0800d868 <SetEPRxStatus>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxStatus(uint8_t bEpNum, uint16_t wState)
{
  _SetEPRxStatus(bEpNum, wState);
 800d868:	0080      	lsls	r0, r0, #2
 800d86a:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 800d86e:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
*                  wState: new state.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxStatus(uint8_t bEpNum, uint16_t wState)
{
 800d872:	b410      	push	{r4}
  _SetEPRxStatus(bEpNum, wState);
 800d874:	f401 5080 	and.w	r0, r1, #4096	; 0x1000
 800d878:	6814      	ldr	r4, [r2, #0]
 800d87a:	f64b 738f 	movw	r3, #49039	; 0xbf8f
 800d87e:	b280      	uxth	r0, r0
 800d880:	4023      	ands	r3, r4
 800d882:	b968      	cbnz	r0, 800d8a0 <SetEPRxStatus+0x38>
 800d884:	b29b      	uxth	r3, r3
 800d886:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 800d88a:	b289      	uxth	r1, r1
 800d88c:	b109      	cbz	r1, 800d892 <SetEPRxStatus+0x2a>
 800d88e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800d892:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d896:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d89a:	6013      	str	r3, [r2, #0]
}
 800d89c:	bc10      	pop	{r4}
 800d89e:	4770      	bx	lr
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxStatus(uint8_t bEpNum, uint16_t wState)
{
  _SetEPRxStatus(bEpNum, wState);
 800d8a0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800d8a4:	e7ef      	b.n	800d886 <SetEPRxStatus+0x1e>
 800d8a6:	bf00      	nop

0800d8a8 <SetEPTxValid>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxValid(uint8_t bEpNum)
{
  _SetEPTxStatus(bEpNum, EP_TX_VALID);
 800d8a8:	0080      	lsls	r0, r0, #2
 800d8aa:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 800d8ae:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 800d8b2:	6811      	ldr	r1, [r2, #0]
 800d8b4:	f648 73bf 	movw	r3, #36799	; 0x8fbf
 800d8b8:	400b      	ands	r3, r1
 800d8ba:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 800d8be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d8c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d8c6:	6013      	str	r3, [r2, #0]
 800d8c8:	4770      	bx	lr
 800d8ca:	bf00      	nop

0800d8cc <SetEPRxValid>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxValid(uint8_t bEpNum)
{
  _SetEPRxStatus(bEpNum, EP_RX_VALID);
 800d8cc:	0080      	lsls	r0, r0, #2
 800d8ce:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 800d8d2:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 800d8d6:	6811      	ldr	r1, [r2, #0]
 800d8d8:	f64b 738f 	movw	r3, #49039	; 0xbf8f
 800d8dc:	400b      	ands	r3, r1
 800d8de:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800d8e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d8e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d8ea:	6013      	str	r3, [r2, #0]
 800d8ec:	4770      	bx	lr
 800d8ee:	bf00      	nop

0800d8f0 <Clear_Status_Out>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Clear_Status_Out(uint8_t bEpNum)
{
  _ClearEP_KIND(bEpNum);
 800d8f0:	0080      	lsls	r0, r0, #2
 800d8f2:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 800d8f6:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 800d8fa:	6811      	ldr	r1, [r2, #0]
 800d8fc:	f640 630f 	movw	r3, #3599	; 0xe0f
 800d900:	400b      	ands	r3, r1
 800d902:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d906:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d90a:	6013      	str	r3, [r2, #0]
 800d90c:	4770      	bx	lr
 800d90e:	bf00      	nop

0800d910 <ClearDTOG_RX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_RX(uint8_t bEpNum)
{
  _ClearDTOG_RX(bEpNum);
 800d910:	0080      	lsls	r0, r0, #2
 800d912:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 800d916:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800d91a:	681a      	ldr	r2, [r3, #0]
 800d91c:	0451      	lsls	r1, r2, #17
 800d91e:	d508      	bpl.n	800d932 <ClearDTOG_RX+0x22>
 800d920:	6819      	ldr	r1, [r3, #0]
 800d922:	f640 720f 	movw	r2, #3855	; 0xf0f
 800d926:	400a      	ands	r2, r1
 800d928:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800d92c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d930:	601a      	str	r2, [r3, #0]
 800d932:	4770      	bx	lr

0800d934 <ClearDTOG_TX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_TX(uint8_t bEpNum)
{
  _ClearDTOG_TX(bEpNum);
 800d934:	0080      	lsls	r0, r0, #2
 800d936:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 800d93a:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800d93e:	681a      	ldr	r2, [r3, #0]
 800d940:	0650      	lsls	r0, r2, #25
 800d942:	d508      	bpl.n	800d956 <ClearDTOG_TX+0x22>
 800d944:	6819      	ldr	r1, [r3, #0]
 800d946:	f640 720f 	movw	r2, #3855	; 0xf0f
 800d94a:	400a      	ands	r2, r1
 800d94c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d950:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800d954:	601a      	str	r2, [r3, #0]
 800d956:	4770      	bx	lr

0800d958 <SetEPTxAddr>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxAddr(uint8_t bEpNum, uint16_t wAddr)
{
  _SetEPTxAddr(bEpNum, wAddr);
 800d958:	f645 4350 	movw	r3, #23632	; 0x5c50
 800d95c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d960:	681a      	ldr	r2, [r3, #0]
 800d962:	f64f 73fe 	movw	r3, #65534	; 0xfffe
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 800d966:	b292      	uxth	r2, r2
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxAddr(uint8_t bEpNum, uint16_t wAddr)
{
  _SetEPTxAddr(bEpNum, wAddr);
 800d968:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 800d96c:	f100 5200 	add.w	r2, r0, #536870912	; 0x20000000
 800d970:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 800d974:	0052      	lsls	r2, r2, #1
 800d976:	400b      	ands	r3, r1
 800d978:	6013      	str	r3, [r2, #0]
 800d97a:	4770      	bx	lr

0800d97c <SetEPRxAddr>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxAddr(uint8_t bEpNum, uint16_t wAddr)
{
  _SetEPRxAddr(bEpNum, wAddr);
 800d97c:	f645 4350 	movw	r3, #23632	; 0x5c50
 800d980:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d984:	681a      	ldr	r2, [r3, #0]
 800d986:	f243 0304 	movw	r3, #12292	; 0x3004
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 800d98a:	b292      	uxth	r2, r2
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxAddr(uint8_t bEpNum, uint16_t wAddr)
{
  _SetEPRxAddr(bEpNum, wAddr);
 800d98c:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 800d990:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d994:	18c3      	adds	r3, r0, r3
 800d996:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800d99a:	005b      	lsls	r3, r3, #1
 800d99c:	400a      	ands	r2, r1
 800d99e:	601a      	str	r2, [r3, #0]
 800d9a0:	4770      	bx	lr
 800d9a2:	bf00      	nop

0800d9a4 <GetEPTxAddr>:
* Output         : None.
* Return         : Rx buffer address. 
*******************************************************************************/
uint16_t GetEPTxAddr(uint8_t bEpNum)
{
  return(_GetEPTxAddr(bEpNum));
 800d9a4:	f645 4350 	movw	r3, #23632	; 0x5c50
 800d9a8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d9ac:	681b      	ldr	r3, [r3, #0]
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 800d9ae:	b29b      	uxth	r3, r3
* Output         : None.
* Return         : Rx buffer address. 
*******************************************************************************/
uint16_t GetEPTxAddr(uint8_t bEpNum)
{
  return(_GetEPTxAddr(bEpNum));
 800d9b0:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800d9b4:	f100 5300 	add.w	r3, r0, #536870912	; 0x20000000
 800d9b8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800d9bc:	005b      	lsls	r3, r3, #1
}
 800d9be:	8818      	ldrh	r0, [r3, #0]
 800d9c0:	4770      	bx	lr
 800d9c2:	bf00      	nop

0800d9c4 <GetEPRxAddr>:
* Output         : None.
* Return         : Rx buffer address.
*******************************************************************************/
uint16_t GetEPRxAddr(uint8_t bEpNum)
{
  return(_GetEPRxAddr(bEpNum));
 800d9c4:	f645 4350 	movw	r3, #23632	; 0x5c50
 800d9c8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d9cc:	681a      	ldr	r2, [r3, #0]
 800d9ce:	f243 0304 	movw	r3, #12292	; 0x3004
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 800d9d2:	b292      	uxth	r2, r2
* Output         : None.
* Return         : Rx buffer address.
*******************************************************************************/
uint16_t GetEPRxAddr(uint8_t bEpNum)
{
  return(_GetEPRxAddr(bEpNum));
 800d9d4:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 800d9d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d9dc:	18c3      	adds	r3, r0, r3
 800d9de:	005b      	lsls	r3, r3, #1
}
 800d9e0:	8818      	ldrh	r0, [r3, #0]
 800d9e2:	4770      	bx	lr

0800d9e4 <SetEPTxCount>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPTxCount(bEpNum, wCount);
 800d9e4:	f645 4350 	movw	r3, #23632	; 0x5c50
 800d9e8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d9ec:	681a      	ldr	r2, [r3, #0]
 800d9ee:	f243 0302 	movw	r3, #12290	; 0x3002
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 800d9f2:	b292      	uxth	r2, r2
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPTxCount(bEpNum, wCount);
 800d9f4:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 800d9f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d9fc:	18c3      	adds	r3, r0, r3
 800d9fe:	005b      	lsls	r3, r3, #1
 800da00:	6019      	str	r1, [r3, #0]
 800da02:	4770      	bx	lr

0800da04 <SetEPRxCount>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPRxCount(bEpNum, wCount);
 800da04:	f645 4350 	movw	r3, #23632	; 0x5c50
 800da08:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800da0c:	681a      	ldr	r2, [r3, #0]
 800da0e:	f243 0306 	movw	r3, #12294	; 0x3006
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 800da12:	b292      	uxth	r2, r2
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPRxCount(bEpNum, wCount);
 800da14:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 800da18:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800da1c:	18c3      	adds	r3, r0, r3
 800da1e:	005b      	lsls	r3, r3, #1
 800da20:	293e      	cmp	r1, #62	; 0x3e
 800da22:	d909      	bls.n	800da38 <SetEPRxCount+0x34>
 800da24:	094a      	lsrs	r2, r1, #5
 800da26:	06c9      	lsls	r1, r1, #27
 800da28:	d101      	bne.n	800da2e <SetEPRxCount+0x2a>
 800da2a:	3a01      	subs	r2, #1
 800da2c:	b292      	uxth	r2, r2
 800da2e:	0292      	lsls	r2, r2, #10
 800da30:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800da34:	601a      	str	r2, [r3, #0]
 800da36:	4770      	bx	lr
 800da38:	084a      	lsrs	r2, r1, #1
 800da3a:	07c8      	lsls	r0, r1, #31
 800da3c:	bf48      	it	mi
 800da3e:	3201      	addmi	r2, #1
 800da40:	0292      	lsls	r2, r2, #10
 800da42:	601a      	str	r2, [r3, #0]
 800da44:	4770      	bx	lr
 800da46:	bf00      	nop

0800da48 <GetEPRxCount>:
* Output         : None.
* Return         : Rx count value.
*******************************************************************************/
uint16_t GetEPRxCount(uint8_t bEpNum)
{
  return(_GetEPRxCount(bEpNum));
 800da48:	f645 4350 	movw	r3, #23632	; 0x5c50
 800da4c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800da50:	681a      	ldr	r2, [r3, #0]
 800da52:	f243 0306 	movw	r3, #12294	; 0x3006
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 800da56:	b292      	uxth	r2, r2
* Output         : None.
* Return         : Rx count value.
*******************************************************************************/
uint16_t GetEPRxCount(uint8_t bEpNum)
{
  return(_GetEPRxCount(bEpNum));
 800da58:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 800da5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800da60:	18c3      	adds	r3, r0, r3
 800da62:	005b      	lsls	r3, r3, #1
 800da64:	6818      	ldr	r0, [r3, #0]
}
 800da66:	0580      	lsls	r0, r0, #22
 800da68:	0d80      	lsrs	r0, r0, #22
 800da6a:	4770      	bx	lr

0800da6c <ByteSwap>:
uint16_t ByteSwap(uint16_t wSwW)
{
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
 800da6c:	b2c3      	uxtb	r3, r0
 800da6e:	0a00      	lsrs	r0, r0, #8
  return(wRet);
}
 800da70:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 800da74:	4770      	bx	lr
 800da76:	bf00      	nop

0800da78 <USB_SIL_Init>:
* Input          : None.
* Output         : None.
* Return         : Status.
*******************************************************************************/
uint32_t USB_SIL_Init(void)
{
 800da78:	b410      	push	{r4}
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
  wInterrupt_Mask = IMR_MSK;
 800da7a:	f242 0390 	movw	r3, #8336	; 0x2090
*******************************************************************************/
uint32_t USB_SIL_Init(void)
{
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
 800da7e:	f645 4444 	movw	r4, #23620	; 0x5c44
  wInterrupt_Mask = IMR_MSK;
  /* set interrupts mask */
  _SetCNTR(wInterrupt_Mask);
 800da82:	f645 4240 	movw	r2, #23616	; 0x5c40
uint32_t USB_SIL_Init(void)
{
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
  wInterrupt_Mask = IMR_MSK;
 800da86:	f44f 413f 	mov.w	r1, #48896	; 0xbf00
*******************************************************************************/
uint32_t USB_SIL_Init(void)
{
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
 800da8a:	2000      	movs	r0, #0
 800da8c:	f2c4 0400 	movt	r4, #16384	; 0x4000
  wInterrupt_Mask = IMR_MSK;
 800da90:	f2c2 0300 	movt	r3, #8192	; 0x2000
  /* set interrupts mask */
  _SetCNTR(wInterrupt_Mask);
 800da94:	f2c4 0200 	movt	r2, #16384	; 0x4000
*******************************************************************************/
uint32_t USB_SIL_Init(void)
{
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
 800da98:	6020      	str	r0, [r4, #0]
  wInterrupt_Mask = IMR_MSK;
 800da9a:	8019      	strh	r1, [r3, #0]
  /* set interrupts mask */
  _SetCNTR(wInterrupt_Mask);
 800da9c:	6011      	str	r1, [r2, #0]
  return 0;
}
 800da9e:	bc10      	pop	{r4}
 800daa0:	4770      	bx	lr
 800daa2:	bf00      	nop

0800daa4 <USB_SIL_Read>:
*                     received data buffer.
* Output         : None.
* Return         : Number of received data (in Bytes).
*******************************************************************************/
uint32_t USB_SIL_Read(uint8_t bEpAddr, uint8_t* pBufferPointer)
{
 800daa4:	b570      	push	{r4, r5, r6, lr}
  uint32_t DataLength = 0;

  /* Get the number of received data on the selected Endpoint */
  DataLength = GetEPRxCount(bEpAddr & 0x7F);
 800daa6:	f64d 2349 	movw	r3, #55881	; 0xda49
 800daaa:	f000 057f 	and.w	r5, r0, #127	; 0x7f
 800daae:	4628      	mov	r0, r5
 800dab0:	f6c0 0300 	movt	r3, #2048	; 0x800
*                     received data buffer.
* Output         : None.
* Return         : Number of received data (in Bytes).
*******************************************************************************/
uint32_t USB_SIL_Read(uint8_t bEpAddr, uint8_t* pBufferPointer)
{
 800dab4:	460e      	mov	r6, r1
  uint32_t DataLength = 0;

  /* Get the number of received data on the selected Endpoint */
  DataLength = GetEPRxCount(bEpAddr & 0x7F);
 800dab6:	4798      	blx	r3
  
  /* Use the memory interface function to write to the selected endpoint */
  PMAToUserBufferCopy(pBufferPointer, GetEPRxAddr(bEpAddr & 0x7F), DataLength);
 800dab8:	f64d 13c5 	movw	r3, #55749	; 0xd9c5
uint32_t USB_SIL_Read(uint8_t bEpAddr, uint8_t* pBufferPointer)
{
  uint32_t DataLength = 0;

  /* Get the number of received data on the selected Endpoint */
  DataLength = GetEPRxCount(bEpAddr & 0x7F);
 800dabc:	4604      	mov	r4, r0
  
  /* Use the memory interface function to write to the selected endpoint */
  PMAToUserBufferCopy(pBufferPointer, GetEPRxAddr(bEpAddr & 0x7F), DataLength);
 800dabe:	f6c0 0300 	movt	r3, #2048	; 0x800
 800dac2:	4628      	mov	r0, r5
 800dac4:	4798      	blx	r3
 800dac6:	f24d 73d9 	movw	r3, #55257	; 0xd7d9
 800daca:	4601      	mov	r1, r0
 800dacc:	4622      	mov	r2, r4
 800dace:	4630      	mov	r0, r6
 800dad0:	f6c0 0300 	movt	r3, #2048	; 0x800
 800dad4:	4798      	blx	r3

  /* Return the number of received data */
  return DataLength;
}
 800dad6:	4620      	mov	r0, r4
 800dad8:	bd70      	pop	{r4, r5, r6, pc}
 800dada:	bf00      	nop

0800dadc <CTR_LP>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void CTR_LP(void)
{
 800dadc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dae0:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 800dc90 <CTR_LP+0x1b4>
 800dae4:	b083      	sub	sp, #12
  __IO uint16_t wEPVal = 0;
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 800dae6:	f645 4b44 	movw	fp, #23620	; 0x5c44
* Output         : None.
* Return         : None.
*******************************************************************************/
void CTR_LP(void)
{
  __IO uint16_t wEPVal = 0;
 800daea:	2300      	movs	r3, #0
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 800daec:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 800dc94 <CTR_LP+0x1b8>
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 800daf0:	4d62      	ldr	r5, [pc, #392]	; (800dc7c <CTR_LP+0x1a0>)
* Output         : None.
* Return         : None.
*******************************************************************************/
void CTR_LP(void)
{
  __IO uint16_t wEPVal = 0;
 800daf2:	f8ad 3006 	strh.w	r3, [sp, #6]
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 800daf6:	f2c4 0b00 	movt	fp, #16384	; 0x4000
 800dafa:	46d0      	mov	r8, sl
 800dafc:	f8db 3000 	ldr.w	r3, [fp]
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 800db00:	f44f 44b8 	mov.w	r4, #23552	; 0x5c00
*******************************************************************************/
void CTR_LP(void)
{
  __IO uint16_t wEPVal = 0;
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 800db04:	b29a      	uxth	r2, r3
 800db06:	041b      	lsls	r3, r3, #16
 800db08:	f8aa 2000 	strh.w	r2, [sl]
 800db0c:	f140 80ab 	bpl.w	800dc66 <CTR_LP+0x18a>
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 800db10:	f8b8 2000 	ldrh.w	r2, [r8]
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 800db14:	f2c4 0400 	movt	r4, #16384	; 0x4000
  __IO uint16_t wEPVal = 0;
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 800db18:	f002 020f 	and.w	r2, r2, #15
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
 800db1c:	0090      	lsls	r0, r2, #2
 800db1e:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
	    SaveTState = SaveRState & EPTX_STAT;
 800db22:	4e57      	ldr	r6, [pc, #348]	; (800dc80 <CTR_LP+0x1a4>)
	    SaveRState &=  EPRX_STAT;	

	    _SetEPRxTxStatus(ENDP0,EP_RX_NAK,EP_TX_NAK);
 800db24:	f64b 71bf 	movw	r1, #49087	; 0xbfbf
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 800db28:	4f54      	ldr	r7, [pc, #336]	; (800dc7c <CTR_LP+0x1a0>)
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
    if (EPindex == 0)
 800db2a:	4613      	mov	r3, r2
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
 800db2c:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
  __IO uint16_t wEPVal = 0;
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 800db30:	f889 2000 	strb.w	r2, [r9]
    if (EPindex == 0)
 800db34:	2a00      	cmp	r2, #0
 800db36:	d133      	bne.n	800dba0 <CTR_LP+0xc4>
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 800db38:	6823      	ldr	r3, [r4, #0]
 800db3a:	b29b      	uxth	r3, r3
 800db3c:	802b      	strh	r3, [r5, #0]
	    SaveTState = SaveRState & EPTX_STAT;
 800db3e:	882b      	ldrh	r3, [r5, #0]
 800db40:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800db44:	8033      	strh	r3, [r6, #0]
	    SaveRState &=  EPRX_STAT;	
 800db46:	882b      	ldrh	r3, [r5, #0]
 800db48:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800db4c:	802b      	strh	r3, [r5, #0]

	    _SetEPRxTxStatus(ENDP0,EP_RX_NAK,EP_TX_NAK);
 800db4e:	6823      	ldr	r3, [r4, #0]
 800db50:	4019      	ands	r1, r3
 800db52:	f481 5100 	eor.w	r1, r1, #8192	; 0x2000
 800db56:	f081 0120 	eor.w	r1, r1, #32
 800db5a:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800db5e:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800db62:	6021      	str	r1, [r4, #0]

      /* DIR bit = origin of the interrupt */

      if ((wIstr & ISTR_DIR) == 0)
 800db64:	f8b8 3000 	ldrh.w	r3, [r8]
 800db68:	f003 0310 	and.w	r3, r3, #16
 800db6c:	b29b      	uxth	r3, r3
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d049      	beq.n	800dc06 <CTR_LP+0x12a>
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */

        wEPVal = _GetENDPOINT(ENDP0);
 800db72:	6823      	ldr	r3, [r4, #0]
 800db74:	b29b      	uxth	r3, r3
 800db76:	f8ad 3006 	strh.w	r3, [sp, #6]
        
        if ((wEPVal &EP_SETUP) != 0)
 800db7a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800db7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800db82:	b29b      	uxth	r3, r3
 800db84:	2b00      	cmp	r3, #0
 800db86:	d171      	bne.n	800dc6c <CTR_LP+0x190>

		      _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
          return;
        }

        else if ((wEPVal & EP_CTR_RX) != 0)
 800db88:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800db8c:	b21b      	sxth	r3, r3
 800db8e:	2b00      	cmp	r3, #0
 800db90:	dab4      	bge.n	800dafc <CTR_LP+0x20>
        {
          _ClearEP_CTR_RX(ENDP0);
 800db92:	6822      	ldr	r2, [r4, #0]
 800db94:	f640 738f 	movw	r3, #3983	; 0xf8f
 800db98:	4013      	ands	r3, r2
 800db9a:	6023      	str	r3, [r4, #0]
          Out0_Process();
 800db9c:	4b39      	ldr	r3, [pc, #228]	; (800dc84 <CTR_LP+0x1a8>)
 800db9e:	e038      	b.n	800dc12 <CTR_LP+0x136>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
 800dba0:	6802      	ldr	r2, [r0, #0]
 800dba2:	b292      	uxth	r2, r2
 800dba4:	f8ad 2006 	strh.w	r2, [sp, #6]
      if ((wEPVal & EP_CTR_RX) != 0)
 800dba8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800dbac:	b212      	sxth	r2, r2
 800dbae:	2a00      	cmp	r2, #0
 800dbb0:	db1b      	blt.n	800dbea <CTR_LP+0x10e>
        /* call OUT service function */
        (*pEpInt_OUT[EPindex-1])();

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & EP_CTR_TX) != 0)
 800dbb2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800dbb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dbba:	b29b      	uxth	r3, r3
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d09d      	beq.n	800dafc <CTR_LP+0x20>
      {
        /* clear int flag */
        _ClearEP_CTR_TX(EPindex);
 800dbc0:	f899 1000 	ldrb.w	r1, [r9]
 800dbc4:	f648 730f 	movw	r3, #36623	; 0x8f0f
 800dbc8:	008a      	lsls	r2, r1, #2
 800dbca:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800dbce:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 800dbd2:	6810      	ldr	r0, [r2, #0]

        /* call IN service function */
        (*pEpInt_IN[EPindex-1])();
 800dbd4:	3901      	subs	r1, #1
      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & EP_CTR_TX) != 0)
      {
        /* clear int flag */
        _ClearEP_CTR_TX(EPindex);
 800dbd6:	4003      	ands	r3, r0
 800dbd8:	6013      	str	r3, [r2, #0]

        /* call IN service function */
        (*pEpInt_IN[EPindex-1])();
 800dbda:	f240 0230 	movw	r2, #48	; 0x30
 800dbde:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800dbe2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dbe6:	4798      	blx	r3
 800dbe8:	e788      	b.n	800dafc <CTR_LP+0x20>
      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
      if ((wEPVal & EP_CTR_RX) != 0)
      {
        /* clear int flag */
        _ClearEP_CTR_RX(EPindex);
 800dbea:	6801      	ldr	r1, [r0, #0]
 800dbec:	f640 728f 	movw	r2, #3983	; 0xf8f
 800dbf0:	400a      	ands	r2, r1
 800dbf2:	6002      	str	r2, [r0, #0]

        /* call OUT service function */
        (*pEpInt_OUT[EPindex-1])();
 800dbf4:	f240 024c 	movw	r2, #76	; 0x4c
 800dbf8:	3b01      	subs	r3, #1
 800dbfa:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800dbfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dc02:	4798      	blx	r3
 800dc04:	e7d5      	b.n	800dbb2 <CTR_LP+0xd6>
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */

        _ClearEP_CTR_TX(ENDP0);
 800dc06:	6822      	ldr	r2, [r4, #0]
 800dc08:	f648 730f 	movw	r3, #36623	; 0x8f0f
 800dc0c:	4013      	ands	r3, r2
 800dc0e:	6023      	str	r3, [r4, #0]
        In0_Process();
 800dc10:	4b1d      	ldr	r3, [pc, #116]	; (800dc88 <CTR_LP+0x1ac>)
        }

        else if ((wEPVal & EP_CTR_RX) != 0)
        {
          _ClearEP_CTR_RX(ENDP0);
          Out0_Process();
 800dc12:	4798      	blx	r3
          /* before terminate set Tx & Rx status */
     
		     _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
 800dc14:	6821      	ldr	r1, [r4, #0]
 800dc16:	883a      	ldrh	r2, [r7, #0]
 800dc18:	f64b 73bf 	movw	r3, #49087	; 0xbfbf
 800dc1c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800dc20:	b292      	uxth	r2, r2
 800dc22:	400b      	ands	r3, r1
 800dc24:	b10a      	cbz	r2, 800dc2a <CTR_LP+0x14e>
 800dc26:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800dc2a:	883a      	ldrh	r2, [r7, #0]
 800dc2c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800dc30:	b292      	uxth	r2, r2
 800dc32:	b10a      	cbz	r2, 800dc38 <CTR_LP+0x15c>
 800dc34:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800dc38:	8832      	ldrh	r2, [r6, #0]
 800dc3a:	f002 0210 	and.w	r2, r2, #16
 800dc3e:	b292      	uxth	r2, r2
 800dc40:	b10a      	cbz	r2, 800dc46 <CTR_LP+0x16a>
 800dc42:	f083 0310 	eor.w	r3, r3, #16
 800dc46:	8832      	ldrh	r2, [r6, #0]
 800dc48:	f002 0220 	and.w	r2, r2, #32
 800dc4c:	b292      	uxth	r2, r2
 800dc4e:	b10a      	cbz	r2, 800dc54 <CTR_LP+0x178>
 800dc50:	f083 0320 	eor.w	r3, r3, #32
 800dc54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dc58:	f44f 42b8 	mov.w	r2, #23552	; 0x5c00
 800dc5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dc60:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800dc64:	6013      	str	r3, [r2, #0]
      } /* if((wEPVal & EP_CTR_TX) != 0) */

    }/* if(EPindex == 0) else */

  }/* while(...) */
}
 800dc66:	b003      	add	sp, #12
 800dc68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

        wEPVal = _GetENDPOINT(ENDP0);
        
        if ((wEPVal &EP_SETUP) != 0)
        {
          _ClearEP_CTR_RX(ENDP0); /* SETUP bit kept frozen while CTR_RX = 1 */
 800dc6c:	6822      	ldr	r2, [r4, #0]
 800dc6e:	f640 738f 	movw	r3, #3983	; 0xf8f
 800dc72:	4013      	ands	r3, r2
 800dc74:	6023      	str	r3, [r4, #0]
          Setup0_Process();
 800dc76:	4b05      	ldr	r3, [pc, #20]	; (800dc8c <CTR_LP+0x1b0>)
 800dc78:	e7cb      	b.n	800dc12 <CTR_LP+0x136>
 800dc7a:	bf00      	nop
 800dc7c:	20002092 	.word	0x20002092
 800dc80:	20002094 	.word	0x20002094
 800dc84:	0800d21d 	.word	0x0800d21d
 800dc88:	0800d6f1 	.word	0x0800d6f1
 800dc8c:	0800d319 	.word	0x0800d319
 800dc90:	20001834 	.word	0x20001834
 800dc94:	20002068 	.word	0x20002068

0800dc98 <____aeabi_idiv0_from_arm>:
 800dc98:	e51ff004 	ldr	pc, [pc, #-4]	; 800dc9c <____aeabi_idiv0_from_arm+0x4>
 800dc9c:	08008ef9 	.word	0x08008ef9
 800dca0:	504c4548 	.word	0x504c4548
 800dca4:	00000000 	.word	0x00000000
 800dca8:	756e654d 	.word	0x756e654d
 800dcac:	6c654820 	.word	0x6c654820
 800dcb0:	00000070 	.word	0x00000070
 800dcb4:	554e454d 	.word	0x554e454d
 800dcb8:	00000000 	.word	0x00000000
 800dcbc:	70736944 	.word	0x70736944
 800dcc0:	2079616c 	.word	0x2079616c
 800dcc4:	756e654d 	.word	0x756e654d
 800dcc8:	00000000 	.word	0x00000000
 800dccc:	4f464e49 	.word	0x4f464e49
 800dcd0:	00000000 	.word	0x00000000
 800dcd4:	6f666e49 	.word	0x6f666e49
 800dcd8:	00000000 	.word	0x00000000
 800dcdc:	4f484345 	.word	0x4f484345
 800dce0:	00000000 	.word	0x00000000
 800dce4:	6f686345 	.word	0x6f686345
 800dce8:	00000000 	.word	0x00000000
 800dcec:	253c6325 	.word	0x253c6325
 800dcf0:	2d203e73 	.word	0x2d203e73
 800dcf4:	0a732520 	.word	0x0a732520
 800dcf8:	00000000 	.word	0x00000000
 800dcfc:	73256325 	.word	0x73256325
 800dd00:	0000000a 	.word	0x0000000a
 800dd04:	25207325 	.word	0x25207325
 800dd08:	00000073 	.word	0x00000073
 800dd0c:	00004e4f 	.word	0x00004e4f
 800dd10:	63456325 	.word	0x63456325
 800dd14:	6f206f68 	.word	0x6f206f68
 800dd18:	00000a6e 	.word	0x00000a6e
 800dd1c:	63456325 	.word	0x63456325
 800dd20:	6f206f68 	.word	0x6f206f68
 800dd24:	000a6666 	.word	0x000a6666
 800dd28:	2d2d6325 	.word	0x2d2d6325
 800dd2c:	2d2d2d2d 	.word	0x2d2d2d2d
 800dd30:	2d2d2d2d 	.word	0x2d2d2d2d
 800dd34:	2d2d2d2d 	.word	0x2d2d2d2d
 800dd38:	2d2d2d2d 	.word	0x2d2d2d2d
 800dd3c:	2d2d2d2d 	.word	0x2d2d2d2d
 800dd40:	2d2d2d2d 	.word	0x2d2d2d2d
 800dd44:	2d2d2d2d 	.word	0x2d2d2d2d
 800dd48:	2d2d2d2d 	.word	0x2d2d2d2d
 800dd4c:	2d2d2d2d 	.word	0x2d2d2d2d
 800dd50:	202d2d2d 	.word	0x202d2d2d
 800dd54:	00000a0d 	.word	0x00000a0d
 800dd58:	20206325 	.word	0x20206325
 800dd5c:	20202020 	.word	0x20202020
 800dd60:	20202020 	.word	0x20202020
 800dd64:	41202020 	.word	0x41202020
 800dd68:	74535f70 	.word	0x74535f70
 800dd6c:	646d4372 	.word	0x646d4372
 800dd70:	2e307620 	.word	0x2e307620
 800dd74:	20202031 	.word	0x20202031
 800dd78:	20202020 	.word	0x20202020
 800dd7c:	20202020 	.word	0x20202020
 800dd80:	20202020 	.word	0x20202020
 800dd84:	00000a0d 	.word	0x00000a0d
 800dd88:	20206325 	.word	0x20206325
 800dd8c:	20202020 	.word	0x20202020
 800dd90:	20202020 	.word	0x20202020
 800dd94:	20202020 	.word	0x20202020
 800dd98:	20202020 	.word	0x20202020
 800dd9c:	20202020 	.word	0x20202020
 800dda0:	20202020 	.word	0x20202020
 800dda4:	20202020 	.word	0x20202020
 800dda8:	20202020 	.word	0x20202020
 800ddac:	20202020 	.word	0x20202020
 800ddb0:	20202020 	.word	0x20202020
 800ddb4:	00000a0d 	.word	0x00000a0d
 800ddb8:	20206325 	.word	0x20206325
 800ddbc:	20202020 	.word	0x20202020
 800ddc0:	616d2020 	.word	0x616d2020
 800ddc4:	62206564 	.word	0x62206564
 800ddc8:	203a2079 	.word	0x203a2079
 800ddcc:	206f6843 	.word	0x206f6843
 800ddd0:	206e6148 	.word	0x206e6148
 800ddd4:	6f656843 	.word	0x6f656843
 800ddd8:	2020206c 	.word	0x2020206c
 800dddc:	20202020 	.word	0x20202020
 800dde0:	20202020 	.word	0x20202020
 800dde4:	00000a0d 	.word	0x00000a0d
 800dde8:	00000a0a 	.word	0x00000a0a
 800ddec:	2a2a2a2a 	.word	0x2a2a2a2a
 800ddf0:	2a2a2a2a 	.word	0x2a2a2a2a
 800ddf4:	2a2a2a2a 	.word	0x2a2a2a2a
 800ddf8:	2a2a2a2a 	.word	0x2a2a2a2a
 800ddfc:	2a2a2a2a 	.word	0x2a2a2a2a
 800de00:	2a2a2a2a 	.word	0x2a2a2a2a
 800de04:	2a2a2a2a 	.word	0x2a2a2a2a
 800de08:	2a2a2a2a 	.word	0x2a2a2a2a
 800de0c:	2a2a2a2a 	.word	0x2a2a2a2a
 800de10:	2a2a2a2a 	.word	0x2a2a2a2a
 800de14:	2a2a2a2a 	.word	0x2a2a2a2a
 800de18:	2a2a2a2a 	.word	0x2a2a2a2a
 800de1c:	2a2a2a2a 	.word	0x2a2a2a2a
 800de20:	0a2a2a2a 	.word	0x0a2a2a2a
 800de24:	00000000 	.word	0x00000000
 800de28:	20202020 	.word	0x20202020
 800de2c:	20202020 	.word	0x20202020
 800de30:	20202020 	.word	0x20202020
 800de34:	20202020 	.word	0x20202020
 800de38:	20202020 	.word	0x20202020
 800de3c:	64452020 	.word	0x64452020
 800de40:	30562075 	.word	0x30562075
 800de44:	2020372e 	.word	0x2020372e
 800de48:	20202020 	.word	0x20202020
 800de4c:	20202020 	.word	0x20202020
 800de50:	20202020 	.word	0x20202020
 800de54:	20202020 	.word	0x20202020
 800de58:	20202020 	.word	0x20202020
 800de5c:	0a202020 	.word	0x0a202020
 800de60:	00000000 	.word	0x00000000
 800de64:	2e31202a 	.word	0x2e31202a
 800de68:	73655420 	.word	0x73655420
 800de6c:	202e2e74 	.word	0x202e2e74
 800de70:	2044454c 	.word	0x2044454c
 800de74:	20202020 	.word	0x20202020
 800de78:	20202020 	.word	0x20202020
 800de7c:	20202020 	.word	0x20202020
 800de80:	20202020 	.word	0x20202020
 800de84:	20202020 	.word	0x20202020
 800de88:	20202020 	.word	0x20202020
 800de8c:	20202020 	.word	0x20202020
 800de90:	20202020 	.word	0x20202020
 800de94:	20202020 	.word	0x20202020
 800de98:	0a2a2020 	.word	0x0a2a2020
 800de9c:	00000000 	.word	0x00000000
 800dea0:	2e32202a 	.word	0x2e32202a
 800dea4:	73655420 	.word	0x73655420
 800dea8:	202e2e74 	.word	0x202e2e74
 800deac:	5079654b 	.word	0x5079654b
 800deb0:	20206461 	.word	0x20206461
 800deb4:	20202020 	.word	0x20202020
 800deb8:	20202020 	.word	0x20202020
 800debc:	20202020 	.word	0x20202020
 800dec0:	20202020 	.word	0x20202020
 800dec4:	20202020 	.word	0x20202020
 800dec8:	20202020 	.word	0x20202020
 800decc:	20202020 	.word	0x20202020
 800ded0:	20202020 	.word	0x20202020
 800ded4:	0a2a2020 	.word	0x0a2a2020
 800ded8:	00000000 	.word	0x00000000
 800dedc:	2e33202a 	.word	0x2e33202a
 800dee0:	73655420 	.word	0x73655420
 800dee4:	202e2e74 	.word	0x202e2e74
 800dee8:	67655337 	.word	0x67655337
 800deec:	20202020 	.word	0x20202020
 800def0:	20202020 	.word	0x20202020
 800def4:	20202020 	.word	0x20202020
 800def8:	20202020 	.word	0x20202020
 800defc:	20202020 	.word	0x20202020
 800df00:	20202020 	.word	0x20202020
 800df04:	20202020 	.word	0x20202020
 800df08:	20202020 	.word	0x20202020
 800df0c:	20202020 	.word	0x20202020
 800df10:	0a2a2020 	.word	0x0a2a2020
 800df14:	00000000 	.word	0x00000000
 800df18:	2e34202a 	.word	0x2e34202a
 800df1c:	73655420 	.word	0x73655420
 800df20:	202e2e74 	.word	0x202e2e74
 800df24:	64634c43 	.word	0x64634c43
 800df28:	20202020 	.word	0x20202020
 800df2c:	20202020 	.word	0x20202020
 800df30:	20202020 	.word	0x20202020
 800df34:	20202020 	.word	0x20202020
 800df38:	20202020 	.word	0x20202020
 800df3c:	20202020 	.word	0x20202020
 800df40:	20202020 	.word	0x20202020
 800df44:	20202020 	.word	0x20202020
 800df48:	20202020 	.word	0x20202020
 800df4c:	0a2a2020 	.word	0x0a2a2020
 800df50:	00000000 	.word	0x00000000
 800df54:	2e35202a 	.word	0x2e35202a
 800df58:	73655420 	.word	0x73655420
 800df5c:	202e2e74 	.word	0x202e2e74
 800df60:	20205442 	.word	0x20205442
 800df64:	20202020 	.word	0x20202020
 800df68:	20202020 	.word	0x20202020
 800df6c:	20202020 	.word	0x20202020
 800df70:	20202020 	.word	0x20202020
 800df74:	20202020 	.word	0x20202020
 800df78:	20202020 	.word	0x20202020
 800df7c:	20202020 	.word	0x20202020
 800df80:	20202020 	.word	0x20202020
 800df84:	20202020 	.word	0x20202020
 800df88:	0a2a2020 	.word	0x0a2a2020
 800df8c:	00000000 	.word	0x00000000
 800df90:	2e36202a 	.word	0x2e36202a
 800df94:	73655420 	.word	0x73655420
 800df98:	202e2e74 	.word	0x202e2e74
 800df9c:	20736443 	.word	0x20736443
 800dfa0:	20202020 	.word	0x20202020
 800dfa4:	20202020 	.word	0x20202020
 800dfa8:	20202020 	.word	0x20202020
 800dfac:	20202020 	.word	0x20202020
 800dfb0:	20202020 	.word	0x20202020
 800dfb4:	20202020 	.word	0x20202020
 800dfb8:	20202020 	.word	0x20202020
 800dfbc:	20202020 	.word	0x20202020
 800dfc0:	20202020 	.word	0x20202020
 800dfc4:	0a2a2020 	.word	0x0a2a2020
 800dfc8:	00000000 	.word	0x00000000
 800dfcc:	2e37202a 	.word	0x2e37202a
 800dfd0:	73655420 	.word	0x73655420
 800dfd4:	202e2e74 	.word	0x202e2e74
 800dfd8:	31544844 	.word	0x31544844
 800dfdc:	20202031 	.word	0x20202031
 800dfe0:	20202020 	.word	0x20202020
 800dfe4:	20202020 	.word	0x20202020
 800dfe8:	20202020 	.word	0x20202020
 800dfec:	20202020 	.word	0x20202020
 800dff0:	20202020 	.word	0x20202020
 800dff4:	20202020 	.word	0x20202020
 800dff8:	20202020 	.word	0x20202020
 800dffc:	20202020 	.word	0x20202020
 800e000:	0a2a2020 	.word	0x0a2a2020
 800e004:	00000000 	.word	0x00000000
 800e008:	2e38202a 	.word	0x2e38202a
 800e00c:	20202020 	.word	0x20202020
 800e010:	20202020 	.word	0x20202020
 800e014:	20202020 	.word	0x20202020
 800e018:	20202020 	.word	0x20202020
 800e01c:	20202020 	.word	0x20202020
 800e020:	20202020 	.word	0x20202020
 800e024:	20202020 	.word	0x20202020
 800e028:	20202020 	.word	0x20202020
 800e02c:	20202020 	.word	0x20202020
 800e030:	20202020 	.word	0x20202020
 800e034:	20202020 	.word	0x20202020
 800e038:	20202020 	.word	0x20202020
 800e03c:	0a2a2020 	.word	0x0a2a2020
 800e040:	00000000 	.word	0x00000000
 800e044:	2e39202a 	.word	0x2e39202a
 800e048:	20202020 	.word	0x20202020
 800e04c:	20202020 	.word	0x20202020
 800e050:	20202020 	.word	0x20202020
 800e054:	20202020 	.word	0x20202020
 800e058:	20202020 	.word	0x20202020
 800e05c:	20202020 	.word	0x20202020
 800e060:	20202020 	.word	0x20202020
 800e064:	20202020 	.word	0x20202020
 800e068:	20202020 	.word	0x20202020
 800e06c:	20202020 	.word	0x20202020
 800e070:	20202020 	.word	0x20202020
 800e074:	20202020 	.word	0x20202020
 800e078:	0a2a2020 	.word	0x0a2a2020
 800e07c:	00000000 	.word	0x00000000
 800e080:	2e6d202a 	.word	0x2e6d202a
 800e084:	654d2020 	.word	0x654d2020
 800e088:	2020756e 	.word	0x2020756e
 800e08c:	20202020 	.word	0x20202020
 800e090:	20202020 	.word	0x20202020
 800e094:	20202020 	.word	0x20202020
 800e098:	20202020 	.word	0x20202020
 800e09c:	20202020 	.word	0x20202020
 800e0a0:	20202020 	.word	0x20202020
 800e0a4:	20202020 	.word	0x20202020
 800e0a8:	20202020 	.word	0x20202020
 800e0ac:	20202020 	.word	0x20202020
 800e0b0:	20202020 	.word	0x20202020
 800e0b4:	0a2a2020 	.word	0x0a2a2020
 800e0b8:	00000000 	.word	0x00000000
 800e0bc:	00203e3e 	.word	0x00203e3e
 800e0c0:	25203e3e 	.word	0x25203e3e
 800e0c4:	00000a63 	.word	0x00000a63
 800e0c8:	5079654b 	.word	0x5079654b
 800e0cc:	53206461 	.word	0x53206461
 800e0d0:	74726174 	.word	0x74726174
 800e0d4:	70203a20 	.word	0x70203a20
 800e0d8:	73736572 	.word	0x73736572
 800e0dc:	6f777420 	.word	0x6f777420
 800e0e0:	79656b20 	.word	0x79656b20
 800e0e4:	6f742073 	.word	0x6f742073
 800e0e8:	69786520 	.word	0x69786520
 800e0ec:	00000a74 	.word	0x00000a74
 800e0f0:	4b207825 	.word	0x4b207825
 800e0f4:	72507965 	.word	0x72507965
 800e0f8:	65737365 	.word	0x65737365
 800e0fc:	00000a64 	.word	0x00000a64
 800e100:	4b207825 	.word	0x4b207825
 800e104:	65527965 	.word	0x65527965
 800e108:	7361656c 	.word	0x7361656c
 800e10c:	000a6465 	.word	0x000a6465
 800e110:	4b207825 	.word	0x4b207825
 800e114:	65527965 	.word	0x65527965
 800e118:	74616570 	.word	0x74616570
 800e11c:	746e4320 	.word	0x746e4320
 800e120:	25203a20 	.word	0x25203a20
 800e124:	00000a64 	.word	0x00000a64
 800e128:	2079654b 	.word	0x2079654b
 800e12c:	74697845 	.word	0x74697845
 800e130:	0000000a 	.word	0x0000000a
 800e134:	20746e43 	.word	0x20746e43
 800e138:	6425203a 	.word	0x6425203a
 800e13c:	00000000 	.word	0x00000000
 800e140:	54205442 	.word	0x54205442
 800e144:	20747365 	.word	0x20747365
 800e148:	72617453 	.word	0x72617453
 800e14c:	70202c74 	.word	0x70202c74
 800e150:	73736572 	.word	0x73736572
 800e154:	74207820 	.word	0x74207820
 800e158:	7865206f 	.word	0x7865206f
 800e15c:	000a7469 	.word	0x000a7469
 800e160:	52205442 	.word	0x52205442
 800e164:	3a206478 	.word	0x3a206478
 800e168:	20632520 	.word	0x20632520
 800e16c:	0000000a 	.word	0x0000000a
 800e170:	756e654d 	.word	0x756e654d
 800e174:	6e65533a 	.word	0x6e65533a
 800e178:	203a2064 	.word	0x203a2064
 800e17c:	0a0d6325 	.word	0x0a0d6325
 800e180:	00000000 	.word	0x00000000
 800e184:	54205442 	.word	0x54205442
 800e188:	20747365 	.word	0x20747365
 800e18c:	74697845 	.word	0x74697845
 800e190:	0000000a 	.word	0x0000000a
 800e194:	20736443 	.word	0x20736443
 800e198:	74736554 	.word	0x74736554
 800e19c:	61745320 	.word	0x61745320
 800e1a0:	202c7472 	.word	0x202c7472
 800e1a4:	73657270 	.word	0x73657270
 800e1a8:	20782073 	.word	0x20782073
 800e1ac:	65206f74 	.word	0x65206f74
 800e1b0:	0a746978 	.word	0x0a746978
 800e1b4:	00000000 	.word	0x00000000
 800e1b8:	20736443 	.word	0x20736443
 800e1bc:	6425203a 	.word	0x6425203a
 800e1c0:	00000000 	.word	0x00000000
 800e1c4:	20736443 	.word	0x20736443
 800e1c8:	74736554 	.word	0x74736554
 800e1cc:	69784520 	.word	0x69784520
 800e1d0:	00000a74 	.word	0x00000a74
 800e1d4:	203a2048 	.word	0x203a2048
 800e1d8:	202c6425 	.word	0x202c6425
 800e1dc:	203a2054 	.word	0x203a2054
 800e1e0:	0a206425 	.word	0x0a206425
 800e1e4:	00000000 	.word	0x00000000
 800e1e8:	64253a48 	.word	0x64253a48
 800e1ec:	3a54202c 	.word	0x3a54202c
 800e1f0:	00006425 	.word	0x00006425
 800e1f4:	72616d53 	.word	0x72616d53
 800e1f8:	626f5274 	.word	0x626f5274
 800e1fc:	4220746f 	.word	0x4220746f
 800e200:	00000044 	.word	0x00000044
 800e204:	61726142 	.word	0x61726142
 800e208:	0000006d 	.word	0x0000006d

0800e20c <Virtual_Com_Port_StringVendor>:
 800e20c:	00530326 004d0054 00630069 006f0072     &.S.T.M.i.c.r.o.
 800e21c:	006c0065 00630065 00720074 006e006f     e.l.e.c.t.r.o.n.
 800e22c:	00630069 00000073                       i.c.s...

0800e234 <Virtual_Com_Port_DeviceDescriptor>:
 800e234:	02000112 40000002 57400483 02010200     .......@..@W....
 800e244:	00000103                                ....

0800e248 <Virtual_Com_Port_StringLangID>:
 800e248:	04090304                                ....

0800e24c <Virtual_Com_Port_StringProduct>:
 800e24c:	00530332 004d0054 00320033 00560020     2.S.T.M.3.2. .V.
 800e25c:	00720069 00750074 006c0061 00430020     i.r.t.u.a.l. .C.
 800e26c:	004d004f 00500020 0072006f 00200074     O.M. .P.o.r.t. .
 800e27c:	00000020                                 ...

0800e280 <Virtual_Com_Port_ConfigDescriptor>:
 800e280:	00430209 c0000102 00040932 02020100     ..C.....2.......
 800e290:	24050001 05011000 01000124 02022404     ...$....$....$..
 800e2a0:	00062405 82050701 ff000803 00010409     .$..............
 800e2b0:	00000a02 03050700 00004002 02810507     .........@......
 800e2c0:	00000040                                @...

0800e2c4 <_ctype_>:
 800e2c4:	20202000 20202020 28282020 20282828     .         ((((( 
 800e2d4:	20202020 20202020 20202020 20202020                     
 800e2e4:	10108820 10101010 10101010 10101010      ...............
 800e2f4:	04040410 04040404 10040404 10101010     ................
 800e304:	41411010 41414141 01010101 01010101     ..AAAAAA........
 800e314:	01010101 01010101 01010101 10101010     ................
 800e324:	42421010 42424242 02020202 02020202     ..BBBBBB........
 800e334:	02020202 02020202 02020202 10101010     ................
 800e344:	00000020 00000000 00000000 00000000      ...............
	...
 800e3c8:	08000412 08000316 08000316 08000316     ................
 800e3d8:	08000316 08000316 08000316 08000316     ................
 800e3e8:	08000316 08000316 08000316 08000316     ................
 800e3f8:	08000316 08000316 08000316 08000316     ................
 800e408:	08000316 08000316 08000316 08000316     ................
 800e418:	08000316 08000316 08000316 08000316     ................
 800e428:	08000316 08000316 08000316 08000316     ................
 800e438:	08000316 08000316 08000316 08000316     ................
 800e448:	08000316 08000316 08000316 08000316     ................
 800e458:	08000316 08000c94 08000316 08000316     ................
 800e468:	08000316 08000316 08000c3c 08000316     ........<.......
 800e478:	08000316 08000316 08000316 08000316     ................
 800e488:	08000c48 08000c48 08000c48 08000c48     H...H...H...H...
 800e498:	08000c48 08000c48 08000c48 08000c48     H...H...H...H...
 800e4a8:	08000c48 08000c48 08000316 08000316     H...H...........
 800e4b8:	08000316 08000316 08000316 08000316     ................
 800e4c8:	08000316 08000316 08000316 08000316     ................
 800e4d8:	08000c04 08000c88 08000316 08000c88     ................
 800e4e8:	08000316 08000316 08000316 08000316     ................
 800e4f8:	08000c14 08000316 08000316 08000c20     ............ ...
 800e508:	08000316 08000316 08000316 08000316     ................
 800e518:	08000316 08000316 08000316 08000316     ................
 800e528:	08000b4e 08000316 08000316 08000b6c     N...........l...
 800e538:	08000316 08000316 08000316 08000316     ................
 800e548:	08000316 08000316 08000316 08000b8e     ................
 800e558:	08000ba2 08000c88 08000c88 08000c88     ................
 800e568:	08000baa 08000bb6 08000316 08000316     ................
 800e578:	08000bca 08000316 08000bd6 08000c64     ............d...
 800e588:	08000c6a 08000316 08000316 08000c72     j...........r...
 800e598:	08000316 08000c7e 08000316 08000316     ....~...........
 800e5a8:	08000b4e 08000636 0800049a 08000636     N...6.......6...
 800e5b8:	08000620 0800049a 08000592 0800059a      ...............
 800e5c8:	0800059a 0800059a 0800059a 0800059a     ................
 800e5d8:	0800059a 0800059a 0800059a 0800059a     ................
 800e5e8:	0800049a 0800049a 0800049a 0800049a     ................
 800e5f8:	0800049a 0800049a 0800049a 080006c4     ................
 800e608:	0800049a 0800049a 0800049a 0800067c     ............|...
 800e618:	08000670 0800049a 0800049a 08000646     p...........F...
 800e628:	0800049a 0800049a 0800049a 0800049a     ................
 800e638:	080005e8 0800049a 0800049a 0800049a     ................
 800e648:	0800049a 0800049a 080005dc 0800049a     ................
 800e658:	0800049a 0800049a 0800049a 08000614     ................
 800e668:	0800049a 0800049a 0800049a 0800049a     ................
 800e678:	0800049a 0800049a 0800049a 080006c4     ................
 800e688:	0800049a 0800049a 0800049a 0800067c     ............|...
 800e698:	08000670 0800049a 0800049a 08000646     p...........F...
 800e6a8:	0800049a 0800049a 0800049a 0800049a     ................
 800e6b8:	080005e8 0800049a 0800049a 0800049a     ................
 800e6c8:	0800049a 0800049a 080005dc 0800049a     ................
 800e6d8:	0800049a 0800049a 0800049a 08000614     ................
 800e6e8:	08000816 08000726 08000816 08000726     ....&.......&...
 800e6f8:	08000726 080007ea 080007d6 080007d6     &...............
 800e708:	080007d6 080007d6 080007d6 080007d6     ................
 800e718:	080007d6 080007c6 080007c6 08000726     ............&...
 800e728:	08000726 08000726 08000726 08000726     &...&...&...&...
 800e738:	08000726 08000726 080007b6 080007b6     &...&...........
 800e748:	080007b6 080007b6 080007b6 080007b6     ................
 800e758:	08000726 08000726 08000726 08000726     &...&...&...&...
 800e768:	08000726 08000726 08000726 08000726     &...&...&...&...
 800e778:	08000726 08000726 08000726 08000726     &...&...&...&...
 800e788:	08000726 08000726 08000726 08000726     &...&...&...&...
 800e798:	08000726 08000774 08000726 08000726     &...t...&...&...
 800e7a8:	08000726 08000726 08000726 08000726     &...&...&...&...
 800e7b8:	08000726 08000726 080007b6 080007b6     &...&...........
 800e7c8:	080007b6 080007b6 080007b6 080007b6     ................
 800e7d8:	08000726 08000726 08000726 08000726     &...&...&...&...
 800e7e8:	08000726 08000726 08000726 08000726     &...&...&...&...
 800e7f8:	08000726 08000726 08000726 08000726     &...&...&...&...
 800e808:	08000726 08000726 08000726 08000726     &...&...&...&...
 800e818:	08000726 08000774                       &...t...

0800e820 <basefix.6646>:
 800e820:	0001000a 00030002 00050004 00070006     ................
 800e830:	00090008 000b000a 000d000c 000f000e     ................
 800e840:	00000010 646c2565 00000000              ....e%ld....

0800e84c <_global_impure_ptr>:
 800e84c:	20000108 00000043 49534f50 00000058     ... C...POSIX...
 800e85c:	0000002e 0800169a 0800153a 0800153a     ........:...:...
 800e86c:	0800153a 0800153a 0800153a 0800153a     :...:...:...:...
 800e87c:	0800153a 0800153a 08001694 08001694     :...:...........
 800e88c:	08001694 08001694 08001694 0800153a     ............:...
 800e89c:	0800153a 0800153a 0800153a 0800153a     :...:...:...:...
 800e8ac:	0800153a 0800153a 0800153a 0800153a     :...:...:...:...
 800e8bc:	0800153a 0800153a 0800153a 0800153a     :...:...:...:...
 800e8cc:	0800153a 0800153a 0800153a 0800153a     :...:...:...:...
 800e8dc:	0800153a 08001694 0800153a 0800153a     :.......:...:...
 800e8ec:	0800153a 0800153a 0800153a 0800153a     :...:...:...:...
 800e8fc:	0800153a 0800153a 0800153a 0800153a     :...:...:...:...
 800e90c:	0800168e 0800153a 08001640 08002126     ....:...@...&!..
 800e91c:	08002144 0800215a 0800213e 0800211c     D!..Z!..>!...!..
 800e92c:	08002144                                D!..

0800e930 <tinytens>:
 800e930:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
 800e940:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
 800e950:	64ac6f43 0e180628 0000666e 74696e69     Co.d(...nf..init
 800e960:	00000079 00006e61 08002a82 0800298c     y...an...*...)..
 800e970:	0800298c 0800298c 0800298c 0800298c     .)...)...)...)..
 800e980:	0800298c 0800298c 0800298c 0800298c     .)...)...)...)..
 800e990:	0800298c 0800298c 0800298c 0800298c     .)...)...)...)..
 800e9a0:	0800298c 0800298c 0800298c 0800298c     .)...)...)...)..
 800e9b0:	0800298c 0800298c 0800298c 0800298c     .)...)...)...)..
 800e9c0:	0800298c 0800298c 0800298c 0800298c     .)...)...)...)..
 800e9d0:	0800298c 0800298c 0800298c 0800298c     .)...)...)...)..
 800e9e0:	0800298c 0800298c 0800298c 0800298c     .)...)...)...)..
 800e9f0:	0800298c 0800298c 0800298c 08002f80     .)...)...).../..
 800ea00:	0800298c 0800298c 0800298c 0800298c     .)...)...)...)..
 800ea10:	08002f42 0800298c 0800298c 0800298c     B/...)...)...)..
 800ea20:	0800298c 0800298c 08002f4c 08002f4c     .)...)..L/..L/..
 800ea30:	08002f4c 08002f4c 08002f4c 08002f4c     L/..L/..L/..L/..
 800ea40:	08002f4c 08002f4c 08002f4c 08002f4c     L/..L/..L/..L/..
 800ea50:	0800298c 0800298c 0800298c 0800298c     .)...)...)...)..
 800ea60:	0800298c 0800298c 0800298c 0800298c     .)...)...)...)..
 800ea70:	0800298c 0800298c 08002f18 0800298c     .)...).../...)..
 800ea80:	0800298c 0800298c 0800298c 0800298c     .)...)...)...)..
 800ea90:	0800298c 0800298c 08002f00 0800298c     .)...).../...)..
 800eaa0:	0800298c 08002f0a 0800298c 0800298c     .).../...)...)..
 800eab0:	0800298c 0800298c 0800298c 0800298c     .)...)...)...)..
 800eac0:	0800298c 0800298c 08002f26 0800298c     .)...)..&/...)..
 800ead0:	0800298c 08002e66 0800298c 0800298c     .)..f....)...)..
 800eae0:	0800298c 0800298c 0800298c 0800298c     .)...)...)...)..
 800eaf0:	0800298c 08002e86 08002e98 0800298c     .)...........)..
 800eb00:	0800298c 0800298c 08002e9e 08002ea8     .)...)..........
 800eb10:	0800298c 0800298c 08002eba 0800298c     .)...).......)..
 800eb20:	08002ec4 08002eee 08002f66 0800298c     ........f/...)..
 800eb30:	0800298c 08002f6e 0800298c 08002f78     .)..n/...)..x/..
 800eb40:	0800298c 0800298c 08002f26 08002cb2     .)...)..&/...,..
 800eb50:	08002c20 08002cb2 08002c20 08002c20      ,...,.. ,.. ,..
 800eb60:	08002cd4 08002cc0 08002cc0 08002cc0     .,...,...,...,..
 800eb70:	08002cc0 08002cc0 08002cc0 08002cc0     .,...,...,...,..
 800eb80:	08002d00 08002d00 08002c20 08002c20     .-...-.. ,.. ,..
 800eb90:	08002c20 08002c20 08002c20 08002c20      ,.. ,.. ,.. ,..
 800eba0:	08002c20 08002ca2 08002ca2 08002ca2      ,...,...,...,..
 800ebb0:	08002ca2 08002ca2 08002ca2 08002c20     .,...,...,.. ,..
 800ebc0:	08002c20 08002c20 08002c20 08002c20      ,.. ,.. ,.. ,..
 800ebd0:	08002c20 08002c20 08002c20 08002c20      ,.. ,.. ,.. ,..
 800ebe0:	08002c20 08002c20 08002c20 08002c20      ,.. ,.. ,.. ,..
 800ebf0:	08002c20 08002c20 08002c20 08002c20      ,.. ,.. ,.. ,..
 800ec00:	08002c62 08002c20 08002c20 08002c20     b,.. ,.. ,.. ,..
 800ec10:	08002c20 08002c20 08002c20 08002c20      ,.. ,.. ,.. ,..
 800ec20:	08002c20 08002ca2 08002ca2 08002ca2      ,...,...,...,..
 800ec30:	08002ca2 08002ca2 08002ca2 08002c20     .,...,...,.. ,..
 800ec40:	08002c20 08002c20 08002c20 08002c20      ,.. ,.. ,.. ,..
 800ec50:	08002c20 08002c20 08002c20 08002c20      ,.. ,.. ,.. ,..
 800ec60:	08002c20 08002c20 08002c20 08002c20      ,.. ,.. ,.. ,..
 800ec70:	08002c20 08002c20 08002c20 08002c20      ,.. ,.. ,.. ,..
 800ec80:	08002c62                                b,..

0800ec84 <basefix.6146>:
 800ec84:	0001000a 00030002 00050004 00070006     ................
 800ec94:	00090008 000b000a 000d000c 000f000e     ................
 800eca4:	00000010 08003c48 080032fe 080032fe     ....H<...2...2..
 800ecb4:	08003c5e 080032fe 080032fe 080032fe     ^<...2...2...2..
 800ecc4:	080032fe 080032fe 080032fe 08003410     .2...2...2...4..
 800ecd4:	08003c6a 080032fe 08003426 08003d38     j<...2..&4..8=..
 800ece4:	080032fe 08003ba8 08003bb4 08003bb4     .2...;...;...;..
 800ecf4:	08003bb4 08003bb4 08003bb4 08003bb4     .;...;...;...;..
 800ed04:	08003bb4 08003bb4 08003bb4 080032fe     .;...;...;...2..
 800ed14:	080032fe 080032fe 080032fe 080032fe     .2...2...2...2..
 800ed24:	080032fe 080032fe 080032fe 080032fe     .2...2...2...2..
 800ed34:	080032fe 080033e6 08003b40 080032fe     .2...3..@;...2..
 800ed44:	08003b40 080032fe 080032fe 080032fe     @;...2...2...2..
 800ed54:	080032fe 08003bda 080032fe 080032fe     .2...;...2...2..
 800ed64:	080033ba 080032fe 080032fe 080032fe     .3...2...2...2..
 800ed74:	080032fe 080032fe 0800332e 080032fe     .2...2...3...2..
 800ed84:	080032fe 08003be6 080032fe 080032fe     .2...;...2...2..
 800ed94:	080032fe 080032fe 080032fe 080032fe     .2...2...2...2..
 800eda4:	080032fe 080032fe 080032fe 080032fe     .2...2...2...2..
 800edb4:	08003c0e 080033ee 08003b40 08003b40     .<...3..@;..@;..
 800edc4:	08003b40 08003d22 080033ee 080032fe     @;.."=...3...2..
 800edd4:	080032fe 08003d2e 080032fe 08003c20     .2...=...2.. <..
 800ede4:	080033c2 08003cca 08003cfa 080032fe     .3...<...<...2..
 800edf4:	08003c74 080032fe 08003336 080032fe     t<...2..63...2..
 800ee04:	080032fe 08003d04                       .2...=..

0800ee0c <blanks.6732>:
 800ee0c:	20202020 20202020 20202020 20202020                     

0800ee1c <zeroes.6733>:
 800ee1c:	30303030 30303030 30303030 30303030     0000000000000000
 800ee2c:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
 800ee3c:	33323130 37363534 42413938 46454443     0123456789ABCDEF
 800ee4c:	00000000 33323130 37363534 62613938     ....0123456789ab
 800ee5c:	66656463 00000000 6c756e28 0000296c     cdef....(null)..
 800ee6c:	00000030 0074743a 69666e49 7974696e     0...:tt.Infinity
 800ee7c:	00000000 004e614e 44434241 00004645     ....NaN.ABCDEF..
 800ee8c:	64636261 00006665 33323130 37363534     abcdef..01234567
 800ee9c:	00003938                                89..

0800eea0 <p05.5251>:
 800eea0:	00000005 00000019 0000007d 00000000     ........}.......

0800eeb0 <__mprec_tens>:
 800eeb0:	00000000 3ff00000 00000000 40240000     .......?......$@
 800eec0:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
 800eed0:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
 800eee0:	00000000 412e8480 00000000 416312d0     .......A......cA
 800eef0:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
 800ef00:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
 800ef10:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
 800ef20:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
 800ef30:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
 800ef40:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
 800ef50:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
 800ef60:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
 800ef70:	79d99db4 44ea7843                       ...yCx.D

0800ef78 <__mprec_tinytens>:
 800ef78:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
 800ef88:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
 800ef98:	64ac6f43 0ac80628                       Co.d(...

0800efa0 <__mprec_bigtens>:
 800efa0:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
 800efb0:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
 800efc0:	7f73bf3c 75154fdd 08008794 080082b6     <.s..O.u........
 800efd0:	080082b6 0800878a 080082b6 080082b6     ................
 800efe0:	080082b6 080082b6 080082b6 080082b6     ................
 800eff0:	080085b0 08008724 080082b6 080085c8     ....$...........
 800f000:	080086ec 080082b6 08008756 08008738     ........V...8...
 800f010:	08008738 08008738 08008738 08008738     8...8...8...8...
 800f020:	08008738 08008738 08008738 08008738     8...8...8...8...
 800f030:	080082b6 080082b6 080082b6 080082b6     ................
 800f040:	080082b6 080082b6 080082b6 080082b6     ................
 800f050:	080082b6 080082b6 08008728 080082b6     ........(.......
 800f060:	080082b6 080082b6 080082b6 080082b6     ................
 800f070:	080082b6 080082b6 080082b6 080082b6     ................
 800f080:	080082b6 080084f6 080082b6 080082b6     ................
 800f090:	080082b6 080082b6 080082b6 0800851e     ................
 800f0a0:	080082b6 080082b6 0800862e 080082b6     ................
 800f0b0:	080082b6 080082b6 080082b6 080082b6     ................
 800f0c0:	080082b6 080082b6 080082b6 080082b6     ................
 800f0d0:	080082b6 0800860e 080085dc 080082b6     ................
 800f0e0:	080082b6 080082b6 0800866c 080085dc     ........l.......
 800f0f0:	080082b6 080082b6 080084ee 080082b6     ................
 800f100:	08008676 080084fe 08008760 080084ee     v.......`.......
 800f110:	080082b6 080086a2 080082b6 08008526     ............&...
 800f120:	080082b6 080082b6 08008660              ........`...

0800f12c <blanks.6676>:
 800f12c:	20202020 20202020 20202020 20202020                     

0800f13c <zeroes.6677>:
 800f13c:	30303030 30303030 30303030 30303030     0000000000000000
