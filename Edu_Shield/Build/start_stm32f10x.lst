   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"Ap_EduMenu.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.KeyPad_DownKeyEvent,"ax",%progbits
  19              		.align	2
  20              		.global	KeyPad_DownKeyEvent
  21              		.thumb
  22              		.thumb_func
  24              	KeyPad_DownKeyEvent:
  25              	.LFB1:
  26              		.file 1 "../LIB_AP/Ap_EduMenu.c"
   1:../LIB_AP/Ap_EduMenu.c **** //----------------------------------------------------------------------------
   2:../LIB_AP/Ap_EduMenu.c **** //    프로그램명 	: Edu Menu 관련 함수
   3:../LIB_AP/Ap_EduMenu.c **** //
   4:../LIB_AP/Ap_EduMenu.c **** //    만든이     	: Cho Han Cheol
   5:../LIB_AP/Ap_EduMenu.c **** //
   6:../LIB_AP/Ap_EduMenu.c **** //    날  짜     	: 
   7:../LIB_AP/Ap_EduMenu.c **** //    
   8:../LIB_AP/Ap_EduMenu.c **** //    최종 수정  	: 
   9:../LIB_AP/Ap_EduMenu.c **** //
  10:../LIB_AP/Ap_EduMenu.c **** //    MPU_Type		:
  11:../LIB_AP/Ap_EduMenu.c **** //
  12:../LIB_AP/Ap_EduMenu.c **** //    파일명     	: Ap_EduMenu.h
  13:../LIB_AP/Ap_EduMenu.c **** //----------------------------------------------------------------------------
  14:../LIB_AP/Ap_EduMenu.c **** 
  15:../LIB_AP/Ap_EduMenu.c **** 
  16:../LIB_AP/Ap_EduMenu.c **** 
  17:../LIB_AP/Ap_EduMenu.c **** //----- 헤더파일 열기
  18:../LIB_AP/Ap_EduMenu.c **** //
  19:../LIB_AP/Ap_EduMenu.c **** #define  AP_EDUMENU_LOCAL
  20:../LIB_AP/Ap_EduMenu.c **** 
  21:../LIB_AP/Ap_EduMenu.c **** #include "Ap_EduMenu.h"
  22:../LIB_AP/Ap_EduMenu.c **** 
  23:../LIB_AP/Ap_EduMenu.c **** 
  24:../LIB_AP/Ap_EduMenu.c **** 
  25:../LIB_AP/Ap_EduMenu.c **** //-- 내부 선언
  26:../LIB_AP/Ap_EduMenu.c **** //
  27:../LIB_AP/Ap_EduMenu.c **** 
  28:../LIB_AP/Ap_EduMenu.c **** 
  29:../LIB_AP/Ap_EduMenu.c **** 
  30:../LIB_AP/Ap_EduMenu.c **** //-- 내부 변수
  31:../LIB_AP/Ap_EduMenu.c **** //
  32:../LIB_AP/Ap_EduMenu.c **** u16 Seg_Count = 0;
  33:../LIB_AP/Ap_EduMenu.c **** 
  34:../LIB_AP/Ap_EduMenu.c **** 
  35:../LIB_AP/Ap_EduMenu.c **** //-- 내부 함수
  36:../LIB_AP/Ap_EduMenu.c **** //
  37:../LIB_AP/Ap_EduMenu.c **** void Ap_EduMenu_ShowMenu(void);
  38:../LIB_AP/Ap_EduMenu.c **** 
  39:../LIB_AP/Ap_EduMenu.c **** 
  40:../LIB_AP/Ap_EduMenu.c **** 
  41:../LIB_AP/Ap_EduMenu.c **** void KeyPad_UpKeyEvent( u32 Event )
  42:../LIB_AP/Ap_EduMenu.c **** {
  43:../LIB_AP/Ap_EduMenu.c **** 	if( Event == HW_KEYPAD_EVENT_RELEASED || Event == HW_KEYPAD_EVENT_REPEAT )
  44:../LIB_AP/Ap_EduMenu.c **** 	{
  45:../LIB_AP/Ap_EduMenu.c **** 		Hw_7Seg_Print( 0, "%d", Seg_Count++ );
  46:../LIB_AP/Ap_EduMenu.c **** 	}
  47:../LIB_AP/Ap_EduMenu.c **** }
  48:../LIB_AP/Ap_EduMenu.c **** 
  49:../LIB_AP/Ap_EduMenu.c **** void KeyPad_DownKeyEvent( u32 Event )
  50:../LIB_AP/Ap_EduMenu.c **** {
  27              		.loc 1 50 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              	.LVL0:
  51:../LIB_AP/Ap_EduMenu.c **** 	if( Event == HW_KEYPAD_EVENT_RELEASED || Event == HW_KEYPAD_EVENT_REPEAT )
  32              		.loc 1 51 0
  33 0000 0138     		subs	r0, r0, #1
  34              	.LVL1:
  35 0002 0128     		cmp	r0, #1
  50:../LIB_AP/Ap_EduMenu.c **** {
  36              		.loc 1 50 0
  37 0004 10B5     		push	{r4, lr}
  38              	.LCFI0:
  39              		.cfi_def_cfa_offset 8
  40              		.cfi_offset 4, -8
  41              		.cfi_offset 14, -4
  42              		.loc 1 51 0
  43 0006 00D9     		bls	.L4
  44 0008 10BD     		pop	{r4, pc}
  45              	.L4:
  46              	.LBB4:
  47              	.LBB5:
  52:../LIB_AP/Ap_EduMenu.c **** 	{
  53:../LIB_AP/Ap_EduMenu.c **** 		Seg_Count -= 2;
  48              		.loc 1 53 0
  49 000a 054B     		ldr	r3, .L5
  54:../LIB_AP/Ap_EduMenu.c **** 		
  55:../LIB_AP/Ap_EduMenu.c **** 		
  56:../LIB_AP/Ap_EduMenu.c **** 		Hw_7Seg_Print( 0, "%d", Seg_Count++ );
  50              		.loc 1 56 0
  51 000c 0020     		movs	r0, #0
  52              	.LVL2:
  53:../LIB_AP/Ap_EduMenu.c **** 		Seg_Count -= 2;
  53              		.loc 1 53 0
  54 000e 1C88     		ldrh	r4, [r3, #0]
  55              		.loc 1 56 0
  56 0010 0449     		ldr	r1, .L5+4
  53:../LIB_AP/Ap_EduMenu.c **** 		Seg_Count -= 2;
  57              		.loc 1 53 0
  58 0012 A21E     		subs	r2, r4, #2
  59              		.loc 1 56 0
  60 0014 013C     		subs	r4, r4, #1
  61 0016 1C80     		strh	r4, [r3, #0]	@ movhi
  62 0018 92B2     		uxth	r2, r2
  63 001a 034B     		ldr	r3, .L5+8
  64 001c 9847     		blx	r3
  65              	.LVL3:
  66 001e 10BD     		pop	{r4, pc}
  67              	.L6:
  68              		.align	2
  69              	.L5:
  70 0020 00000000 		.word	.LANCHOR0
  71 0024 00000000 		.word	.LC0
  72 0028 00000000 		.word	Hw_7Seg_Print
  73              	.LBE5:
  74              	.LBE4:
  75              		.cfi_endproc
  76              	.LFE1:
  78              		.section	.text.KeyPad_UpKeyEvent,"ax",%progbits
  79              		.align	2
  80              		.global	KeyPad_UpKeyEvent
  81              		.thumb
  82              		.thumb_func
  84              	KeyPad_UpKeyEvent:
  85              	.LFB0:
  42:../LIB_AP/Ap_EduMenu.c **** {
  86              		.loc 1 42 0
  87              		.cfi_startproc
  88              		@ args = 0, pretend = 0, frame = 0
  89              		@ frame_needed = 0, uses_anonymous_args = 0
  90              	.LVL4:
  43:../LIB_AP/Ap_EduMenu.c **** 	if( Event == HW_KEYPAD_EVENT_RELEASED || Event == HW_KEYPAD_EVENT_REPEAT )
  91              		.loc 1 43 0
  92 0000 0138     		subs	r0, r0, #1
  93              	.LVL5:
  94 0002 0128     		cmp	r0, #1
  42:../LIB_AP/Ap_EduMenu.c **** {
  95              		.loc 1 42 0
  96 0004 10B5     		push	{r4, lr}
  97              	.LCFI1:
  98              		.cfi_def_cfa_offset 8
  99              		.cfi_offset 4, -8
 100              		.cfi_offset 14, -4
  43:../LIB_AP/Ap_EduMenu.c **** 	if( Event == HW_KEYPAD_EVENT_RELEASED || Event == HW_KEYPAD_EVENT_REPEAT )
 101              		.loc 1 43 0
 102 0006 00D9     		bls	.L9
 103 0008 10BD     		pop	{r4, pc}
 104              	.L9:
 105              	.LBB8:
 106              	.LBB9:
  45:../LIB_AP/Ap_EduMenu.c **** 		Hw_7Seg_Print( 0, "%d", Seg_Count++ );
 107              		.loc 1 45 0
 108 000a 044B     		ldr	r3, .L10
 109 000c 0020     		movs	r0, #0
 110              	.LVL6:
 111 000e 1A88     		ldrh	r2, [r3, #0]
 112 0010 0349     		ldr	r1, .L10+4
 113 0012 541C     		adds	r4, r2, #1
 114 0014 1C80     		strh	r4, [r3, #0]	@ movhi
 115 0016 034B     		ldr	r3, .L10+8
 116 0018 9847     		blx	r3
 117              	.LVL7:
 118 001a 10BD     		pop	{r4, pc}
 119              	.L11:
 120              		.align	2
 121              	.L10:
 122 001c 00000000 		.word	.LANCHOR0
 123 0020 00000000 		.word	.LC0
 124 0024 00000000 		.word	Hw_7Seg_Print
 125              	.LBE9:
 126              	.LBE8:
 127              		.cfi_endproc
 128              	.LFE0:
 130              		.section	.text.Ap_EduMenu_ShowMenu,"ax",%progbits
 131              		.align	2
 132              		.global	Ap_EduMenu_ShowMenu
 133              		.thumb
 134              		.thumb_func
 136              	Ap_EduMenu_ShowMenu:
 137              	.LFB2:
  57:../LIB_AP/Ap_EduMenu.c **** 	}	
  58:../LIB_AP/Ap_EduMenu.c **** }
  59:../LIB_AP/Ap_EduMenu.c **** 
  60:../LIB_AP/Ap_EduMenu.c **** 
  61:../LIB_AP/Ap_EduMenu.c **** 
  62:../LIB_AP/Ap_EduMenu.c **** /*---------------------------------------------------------------------------
  63:../LIB_AP/Ap_EduMenu.c ****      TITLE   : Ap_EduMenu_ShowMenu
  64:../LIB_AP/Ap_EduMenu.c ****      WORK    : 
  65:../LIB_AP/Ap_EduMenu.c ****      ARG     : void
  66:../LIB_AP/Ap_EduMenu.c ****      RET     : void
  67:../LIB_AP/Ap_EduMenu.c **** ---------------------------------------------------------------------------*/
  68:../LIB_AP/Ap_EduMenu.c **** void Ap_EduMenu_ShowMenu(void)
  69:../LIB_AP/Ap_EduMenu.c **** {
 138              		.loc 1 69 0
 139              		.cfi_startproc
 140              		@ args = 0, pretend = 0, frame = 0
 141              		@ frame_needed = 0, uses_anonymous_args = 0
 142 0000 38B5     		push	{r3, r4, r5, lr}
 143              	.LCFI2:
 144              		.cfi_def_cfa_offset 16
 145              		.cfi_offset 3, -16
 146              		.cfi_offset 4, -12
 147              		.cfi_offset 5, -8
 148              		.cfi_offset 14, -4
  70:../LIB_AP/Ap_EduMenu.c **** 	u8 key;
  71:../LIB_AP/Ap_EduMenu.c **** 
  72:../LIB_AP/Ap_EduMenu.c **** 	Lb_printf("\n\n");
 149              		.loc 1 72 0
 150 0002 40F20000 		movw	r0, #:lower16:.LC1
 151 0006 40F20004 		movw	r4, #:lower16:Lb_printf
  73:../LIB_AP/Ap_EduMenu.c **** 	Lb_printf("*******************************************************\n");
 152              		.loc 1 73 0
 153 000a 40F20005 		movw	r5, #:lower16:.LC2
  72:../LIB_AP/Ap_EduMenu.c **** 	Lb_printf("\n\n");
 154              		.loc 1 72 0
 155 000e C0F20004 		movt	r4, #:upper16:Lb_printf
 156              		.loc 1 73 0
 157 0012 C0F20005 		movt	r5, #:upper16:.LC2
  72:../LIB_AP/Ap_EduMenu.c **** 	Lb_printf("\n\n");
 158              		.loc 1 72 0
 159 0016 C0F20000 		movt	r0, #:upper16:.LC1
 160 001a A047     		blx	r4
 161              	.LVL8:
 162              		.loc 1 73 0
 163 001c 2846     		mov	r0, r5
 164 001e A047     		blx	r4
 165              	.LVL9:
  74:../LIB_AP/Ap_EduMenu.c **** 	Lb_printf("                      Edu V0.5                         \n");
 166              		.loc 1 74 0
 167 0020 40F20000 		movw	r0, #:lower16:.LC3
 168 0024 C0F20000 		movt	r0, #:upper16:.LC3
 169 0028 A047     		blx	r4
 170              	.LVL10:
  75:../LIB_AP/Ap_EduMenu.c **** 	Lb_printf("*******************************************************\n");
 171              		.loc 1 75 0
 172 002a 2846     		mov	r0, r5
 173 002c A047     		blx	r4
 174              	.LVL11:
  76:../LIB_AP/Ap_EduMenu.c **** 	Lb_printf("* 1. LED Test                                         *\n");
 175              		.loc 1 76 0
 176 002e 40F20000 		movw	r0, #:lower16:.LC4
 177 0032 C0F20000 		movt	r0, #:upper16:.LC4
 178 0036 A047     		blx	r4
 179              	.LVL12:
  77:../LIB_AP/Ap_EduMenu.c **** 	Lb_printf("* 2. KeyPad Test                                      *\n");
 180              		.loc 1 77 0
 181 0038 40F20000 		movw	r0, #:lower16:.LC5
 182 003c C0F20000 		movt	r0, #:upper16:.LC5
 183 0040 A047     		blx	r4
 184              	.LVL13:
  78:../LIB_AP/Ap_EduMenu.c **** 	Lb_printf("* 3. 7Seg Test                                        *\n");
 185              		.loc 1 78 0
 186 0042 40F20000 		movw	r0, #:lower16:.LC6
 187 0046 C0F20000 		movt	r0, #:upper16:.LC6
 188 004a A047     		blx	r4
 189              	.LVL14:
  79:../LIB_AP/Ap_EduMenu.c **** 	Lb_printf("* 4. CLcd Test                                        *\n");
 190              		.loc 1 79 0
 191 004c 40F20000 		movw	r0, #:lower16:.LC7
 192 0050 C0F20000 		movt	r0, #:upper16:.LC7
 193 0054 A047     		blx	r4
 194              	.LVL15:
  80:../LIB_AP/Ap_EduMenu.c **** 	Lb_printf("* 5. BT Test                                          *\n");
 195              		.loc 1 80 0
 196 0056 40F20000 		movw	r0, #:lower16:.LC8
 197 005a C0F20000 		movt	r0, #:upper16:.LC8
 198 005e A047     		blx	r4
 199              	.LVL16:
  81:../LIB_AP/Ap_EduMenu.c **** 	Lb_printf("* 6.                                                  *\n");
 200              		.loc 1 81 0
 201 0060 40F20000 		movw	r0, #:lower16:.LC9
 202 0064 C0F20000 		movt	r0, #:upper16:.LC9
 203 0068 A047     		blx	r4
 204              	.LVL17:
  82:../LIB_AP/Ap_EduMenu.c **** 	Lb_printf("* 7.                                                  *\n");
 205              		.loc 1 82 0
 206 006a 40F20000 		movw	r0, #:lower16:.LC10
 207 006e C0F20000 		movt	r0, #:upper16:.LC10
 208 0072 A047     		blx	r4
 209              	.LVL18:
  83:../LIB_AP/Ap_EduMenu.c **** 	Lb_printf("* 8.                                                  *\n");
 210              		.loc 1 83 0
 211 0074 40F20000 		movw	r0, #:lower16:.LC11
 212 0078 C0F20000 		movt	r0, #:upper16:.LC11
 213 007c A047     		blx	r4
 214              	.LVL19:
  84:../LIB_AP/Ap_EduMenu.c **** 	Lb_printf("* 9.                                                  *\n");
 215              		.loc 1 84 0
 216 007e 40F20000 		movw	r0, #:lower16:.LC12
 217 0082 C0F20000 		movt	r0, #:upper16:.LC12
 218 0086 A047     		blx	r4
 219              	.LVL20:
  85:../LIB_AP/Ap_EduMenu.c **** 	Lb_printf("* m.  Menu                                            *\n");
 220              		.loc 1 85 0
 221 0088 40F20000 		movw	r0, #:lower16:.LC13
 222 008c C0F20000 		movt	r0, #:upper16:.LC13
 223 0090 A047     		blx	r4
 224              	.LVL21:
  86:../LIB_AP/Ap_EduMenu.c **** 	Lb_printf("*******************************************************\n");
 225              		.loc 1 86 0
 226 0092 2846     		mov	r0, r5
 227 0094 A047     		blx	r4
 228              	.LVL22:
  87:../LIB_AP/Ap_EduMenu.c **** 	Lb_printf("\n");
 229              		.loc 1 87 0
 230 0096 40F20000 		movw	r0, #:lower16:.LC14
 231 009a C0F20000 		movt	r0, #:upper16:.LC14
 232 009e A047     		blx	r4
 233              	.LVL23:
 234 00a0 38BD     		pop	{r3, r4, r5, pc}
 235              		.cfi_endproc
 236              	.LFE2:
 238 00a2 00BF     		.section	.text.Ap_EduMenu_GetCmd,"ax",%progbits
 239              		.align	2
 240              		.global	Ap_EduMenu_GetCmd
 241              		.thumb
 242              		.thumb_func
 244              	Ap_EduMenu_GetCmd:
 245              	.LFB3:
  88:../LIB_AP/Ap_EduMenu.c **** }
  89:../LIB_AP/Ap_EduMenu.c **** 
  90:../LIB_AP/Ap_EduMenu.c **** 
  91:../LIB_AP/Ap_EduMenu.c **** 
  92:../LIB_AP/Ap_EduMenu.c **** 
  93:../LIB_AP/Ap_EduMenu.c **** 
  94:../LIB_AP/Ap_EduMenu.c **** /*---------------------------------------------------------------------------
  95:../LIB_AP/Ap_EduMenu.c ****      TITLE   : Ap_EduMenu_GetCmd
  96:../LIB_AP/Ap_EduMenu.c ****      WORK    : 
  97:../LIB_AP/Ap_EduMenu.c ****      ARG     : void
  98:../LIB_AP/Ap_EduMenu.c ****      RET     : 
  99:../LIB_AP/Ap_EduMenu.c **** 				u8 : 눌려진 메뉴키 데이터 
 100:../LIB_AP/Ap_EduMenu.c **** ---------------------------------------------------------------------------*/
 101:../LIB_AP/Ap_EduMenu.c **** u8 Ap_EduMenu_GetCmd(void)
 102:../LIB_AP/Ap_EduMenu.c **** {
 246              		.loc 1 102 0
 247              		.cfi_startproc
 248              		@ args = 0, pretend = 0, frame = 0
 249              		@ frame_needed = 0, uses_anonymous_args = 0
 250 0000 38B5     		push	{r3, r4, r5, lr}
 251              	.LCFI3:
 252              		.cfi_def_cfa_offset 16
 253              		.cfi_offset 3, -16
 254              		.cfi_offset 4, -12
 255              		.cfi_offset 5, -8
 256              		.cfi_offset 14, -4
 103:../LIB_AP/Ap_EduMenu.c **** 	u8  key;
 104:../LIB_AP/Ap_EduMenu.c **** 	
 105:../LIB_AP/Ap_EduMenu.c **** 
 106:../LIB_AP/Ap_EduMenu.c **** 	Lb_printf(">> ");
 257              		.loc 1 106 0
 258 0002 40F20000 		movw	r0, #:lower16:.LC15
 259 0006 40F20004 		movw	r4, #:lower16:Lb_printf
 260 000a C0F20004 		movt	r4, #:upper16:Lb_printf
 261 000e C0F20000 		movt	r0, #:upper16:.LC15
 262 0012 A047     		blx	r4
 263              	.LVL24:
 107:../LIB_AP/Ap_EduMenu.c **** 
 108:../LIB_AP/Ap_EduMenu.c ****     key=get_byte();
 264              		.loc 1 108 0
 265 0014 40F20003 		movw	r3, #:lower16:get_byte
 266 0018 C0F20003 		movt	r3, #:upper16:get_byte
 267 001c 9847     		blx	r3
 268              	.LVL25:
 269 001e 0546     		mov	r5, r0
 270              	.LVL26:
 109:../LIB_AP/Ap_EduMenu.c **** 	
 110:../LIB_AP/Ap_EduMenu.c **** 	Lb_printf("\n");
 271              		.loc 1 110 0
 272 0020 40F20000 		movw	r0, #:lower16:.LC14
 273              	.LVL27:
 274 0024 C0F20000 		movt	r0, #:upper16:.LC14
 275 0028 A047     		blx	r4
 276              	.LVL28:
 111:../LIB_AP/Ap_EduMenu.c **** 	
 112:../LIB_AP/Ap_EduMenu.c ****     return key;
 113:../LIB_AP/Ap_EduMenu.c **** }
 277              		.loc 1 113 0
 278 002a 2846     		mov	r0, r5
 279 002c 38BD     		pop	{r3, r4, r5, pc}
 280              		.cfi_endproc
 281              	.LFE3:
 283 002e 00BF     		.section	.text.Ap_EduMenu_ExeCmd,"ax",%progbits
 284              		.align	2
 285              		.global	Ap_EduMenu_ExeCmd
 286              		.thumb
 287              		.thumb_func
 289              	Ap_EduMenu_ExeCmd:
 290              	.LFB4:
 114:../LIB_AP/Ap_EduMenu.c **** 
 115:../LIB_AP/Ap_EduMenu.c **** 
 116:../LIB_AP/Ap_EduMenu.c **** 
 117:../LIB_AP/Ap_EduMenu.c **** 
 118:../LIB_AP/Ap_EduMenu.c **** /*---------------------------------------------------------------------------
 119:../LIB_AP/Ap_EduMenu.c ****      TITLE   : Ap_EduMenu_ExeCmd
 120:../LIB_AP/Ap_EduMenu.c ****      WORK    : 
 121:../LIB_AP/Ap_EduMenu.c ****      ARG     : void
 122:../LIB_AP/Ap_EduMenu.c ****      RET     : 
 123:../LIB_AP/Ap_EduMenu.c **** 				u8 : 눌려진 메뉴키 데이터 
 124:../LIB_AP/Ap_EduMenu.c **** ---------------------------------------------------------------------------*/
 125:../LIB_AP/Ap_EduMenu.c **** u8 Ap_EduMenu_ExeCmd(void)
 126:../LIB_AP/Ap_EduMenu.c **** {
 291              		.loc 1 126 0
 292              		.cfi_startproc
 293              		@ args = 0, pretend = 0, frame = 16
 294              		@ frame_needed = 0, uses_anonymous_args = 0
 295              	.LVL29:
 296 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 297              	.LCFI4:
 298              		.cfi_def_cfa_offset 36
 299              		.cfi_offset 4, -36
 300              		.cfi_offset 5, -32
 301              		.cfi_offset 6, -28
 302              		.cfi_offset 7, -24
 303              		.cfi_offset 8, -20
 304              		.cfi_offset 9, -16
 305              		.cfi_offset 10, -12
 306              		.cfi_offset 11, -8
 307              		.cfi_offset 14, -4
 127:../LIB_AP/Ap_EduMenu.c **** 	u8  key;
 128:../LIB_AP/Ap_EduMenu.c **** 	u8  UartData;
 129:../LIB_AP/Ap_EduMenu.c **** 	u8  i;
 130:../LIB_AP/Ap_EduMenu.c **** 	u32 KeyPressedCnt;
 131:../LIB_AP/Ap_EduMenu.c **** 	u32 KeyEvent;
 132:../LIB_AP/Ap_EduMenu.c **** 	u32 KeyNum;
 133:../LIB_AP/Ap_EduMenu.c **** 	u16 SegCnt = 0;
 134:../LIB_AP/Ap_EduMenu.c **** 	
 135:../LIB_AP/Ap_EduMenu.c **** 	static u8 ExeFirst = TRUE;
 136:../LIB_AP/Ap_EduMenu.c **** 	u16 Ret = ERR_NONE;
 137:../LIB_AP/Ap_EduMenu.c **** 			
 138:../LIB_AP/Ap_EduMenu.c **** 	
 139:../LIB_AP/Ap_EduMenu.c **** 	if( ExeFirst == TRUE )
 140:../LIB_AP/Ap_EduMenu.c **** 	{
 141:../LIB_AP/Ap_EduMenu.c **** 		Ap_EduMenu_ShowMenu();		
 308              		.loc 1 141 0
 309 0004 40F20003 		movw	r3, #:lower16:Ap_EduMenu_ShowMenu
 126:../LIB_AP/Ap_EduMenu.c **** {
 310              		.loc 1 126 0
 311 0008 85B0     		sub	sp, sp, #20
 312              	.LCFI5:
 313              		.cfi_def_cfa_offset 56
 314              		.loc 1 141 0
 315 000a C0F20003 		movt	r3, #:upper16:Ap_EduMenu_ShowMenu
 316 000e 9847     		blx	r3
 317              	.LVL30:
 142:../LIB_AP/Ap_EduMenu.c **** 		
 143:../LIB_AP/Ap_EduMenu.c **** 		Hw_KeyPad_SetEventFunc( 2, KeyPad_UpKeyEvent );
 318              		.loc 1 143 0
 319 0010 944C     		ldr	r4, .L49
 320 0012 0220     		movs	r0, #2
 321 0014 9449     		ldr	r1, .L49+4
 322 0016 A047     		blx	r4
 323              	.LVL31:
 144:../LIB_AP/Ap_EduMenu.c **** 		Hw_KeyPad_SetEventFunc( 0, KeyPad_DownKeyEvent );	
 324              		.loc 1 144 0
 325 0018 0020     		movs	r0, #0
 326 001a 9449     		ldr	r1, .L49+8
 327 001c A047     		blx	r4
 328              	.LVL32:
 329 001e DFF8A0A2 		ldr	sl, .L49+92
 145:../LIB_AP/Ap_EduMenu.c **** 	}
 146:../LIB_AP/Ap_EduMenu.c **** 
 147:../LIB_AP/Ap_EduMenu.c ****     while( (key = Ap_EduMenu_GetCmd()) != 0 )
 148:../LIB_AP/Ap_EduMenu.c ****     {
 149:../LIB_AP/Ap_EduMenu.c ****         switch(key)
 150:../LIB_AP/Ap_EduMenu.c ****         {
 151:../LIB_AP/Ap_EduMenu.c ****            case '1':
 152:../LIB_AP/Ap_EduMenu.c ****            		Hw_Led_Toggle( 0 );
 153:../LIB_AP/Ap_EduMenu.c ****            		Hw_Timer_Delay_ms(500);
 154:../LIB_AP/Ap_EduMenu.c ****            		Hw_Led_Toggle( 1 );
 155:../LIB_AP/Ap_EduMenu.c ****            		Hw_Timer_Delay_ms(500);
 156:../LIB_AP/Ap_EduMenu.c ****            		Hw_Led_Toggle( 2 );;
 157:../LIB_AP/Ap_EduMenu.c ****            		Hw_Timer_Delay_ms(500);
 158:../LIB_AP/Ap_EduMenu.c ****            		Hw_Led_Toggle( 3 );
 159:../LIB_AP/Ap_EduMenu.c ****            		Hw_Timer_Delay_ms(500);
 160:../LIB_AP/Ap_EduMenu.c ****                	break;
 161:../LIB_AP/Ap_EduMenu.c **** 
 162:../LIB_AP/Ap_EduMenu.c ****            case '2':
 163:../LIB_AP/Ap_EduMenu.c ****            		Lb_printf("KeyPad Start : press two keys to exit\n");
 164:../LIB_AP/Ap_EduMenu.c ****            		while(1)
 165:../LIB_AP/Ap_EduMenu.c ****            		{
 166:../LIB_AP/Ap_EduMenu.c ****            			KeyEvent = Hw_KeyPad_WaitForEvent(1000);
 167:../LIB_AP/Ap_EduMenu.c ****            			 
 168:../LIB_AP/Ap_EduMenu.c ****            			if( IS_SET_BIT( KeyEvent, HW_KEYPAD_EVENT_PRESSED) )
 169:../LIB_AP/Ap_EduMenu.c ****            			{ 
 170:../LIB_AP/Ap_EduMenu.c ****            				Lb_printf("%x KeyPressed\n", Hw_KeyPad_GetEventKeyData(HW_KEYPAD_EVENT_PRESSED) );  
 171:../LIB_AP/Ap_EduMenu.c **** 					}										
 172:../LIB_AP/Ap_EduMenu.c **** 					else
 173:../LIB_AP/Ap_EduMenu.c **** 					if( IS_SET_BIT( KeyEvent, HW_KEYPAD_EVENT_RELEASED) )
 174:../LIB_AP/Ap_EduMenu.c **** 					{
 175:../LIB_AP/Ap_EduMenu.c **** 						Lb_printf("%x KeyReleased\n", Hw_KeyPad_GetEventKeyData(HW_KEYPAD_EVENT_RELEASED) );         
 176:../LIB_AP/Ap_EduMenu.c **** 					}
 177:../LIB_AP/Ap_EduMenu.c **** 					else
 178:../LIB_AP/Ap_EduMenu.c **** 					if( IS_SET_BIT( KeyEvent, HW_KEYPAD_EVENT_REPEAT) )
 179:../LIB_AP/Ap_EduMenu.c **** 					{
 180:../LIB_AP/Ap_EduMenu.c **** 						KeyNum = Hw_KeyPad_GetEventKeyNum(HW_KEYPAD_EVENT_REPEAT);
 181:../LIB_AP/Ap_EduMenu.c **** 						
 182:../LIB_AP/Ap_EduMenu.c **** 						Lb_printf("%x KeyRepeat Cnt : %d\n",Hw_KeyPad_GetEventKeyData(HW_KEYPAD_EVENT_REPEAT), Hw_Key
 183:../LIB_AP/Ap_EduMenu.c **** 					}
 184:../LIB_AP/Ap_EduMenu.c **** 					
 185:../LIB_AP/Ap_EduMenu.c **** 					KeyPressedCnt = Hw_KeyPad_GetPressedCnt();
 186:../LIB_AP/Ap_EduMenu.c **** 						
 187:../LIB_AP/Ap_EduMenu.c **** 					if( KeyPressedCnt >= 2 )
 188:../LIB_AP/Ap_EduMenu.c **** 					{
 189:../LIB_AP/Ap_EduMenu.c **** 						Lb_printf("Key Exit\n");
 190:../LIB_AP/Ap_EduMenu.c **** 						break;
 191:../LIB_AP/Ap_EduMenu.c **** 					}	
 192:../LIB_AP/Ap_EduMenu.c **** 				}
 193:../LIB_AP/Ap_EduMenu.c **** 				break;
 194:../LIB_AP/Ap_EduMenu.c **** 
 195:../LIB_AP/Ap_EduMenu.c ****            case '3':	
 196:../LIB_AP/Ap_EduMenu.c ****            		Hw_7Seg_Print( 0, "%d", Seg_Count++ );
 197:../LIB_AP/Ap_EduMenu.c ****                break; 
 198:../LIB_AP/Ap_EduMenu.c **** 
 199:../LIB_AP/Ap_EduMenu.c ****            case '4':
 200:../LIB_AP/Ap_EduMenu.c ****            		Hw_CLcd_Print( 0, 1, "Cnt : %d", Seg_Count++);
 201:../LIB_AP/Ap_EduMenu.c **** 				break;  
 202:../LIB_AP/Ap_EduMenu.c **** 
 203:../LIB_AP/Ap_EduMenu.c ****            case '5':
 204:../LIB_AP/Ap_EduMenu.c ****            		Lb_printf("BT Test Start, press x to exit\n");
 330              		.loc 1 204 0
 331 0022 934D     		ldr	r5, .L49+12
 332 0024 934C     		ldr	r4, .L49+16
 205:../LIB_AP/Ap_EduMenu.c **** 
 206:../LIB_AP/Ap_EduMenu.c ****            		while(1)
 207:../LIB_AP/Ap_EduMenu.c ****            		{
 208:../LIB_AP/Ap_EduMenu.c ****            			if( Hw_Uart_GetchNoWait( HW_USE_UART_CH_BT, &UartData) == TRUE )
 209:../LIB_AP/Ap_EduMenu.c ****            			{
 210:../LIB_AP/Ap_EduMenu.c ****            				Lb_printf( "BT Rxd : %c \n", UartData );
 211:../LIB_AP/Ap_EduMenu.c ****            			}
 212:../LIB_AP/Ap_EduMenu.c **** 
 213:../LIB_AP/Ap_EduMenu.c ****            			if( Hw_Uart_GetchNoWait( HW_USE_UART_CH_MENU, &UartData ) == TRUE )
 214:../LIB_AP/Ap_EduMenu.c ****            			{
 215:../LIB_AP/Ap_EduMenu.c ****            				if( UartData == 'x' )
 216:../LIB_AP/Ap_EduMenu.c ****            				{
 217:../LIB_AP/Ap_EduMenu.c ****            					break;
 218:../LIB_AP/Ap_EduMenu.c ****            				}
 219:../LIB_AP/Ap_EduMenu.c ****            				else
 220:../LIB_AP/Ap_EduMenu.c ****            				{
 221:../LIB_AP/Ap_EduMenu.c ****            					Hw_Uart_Print( HW_USE_UART_CH_BT, "Menu:Send : %c\r\n",UartData );
 333              		.loc 1 221 0
 334 0026 DFF89C82 		ldr	r8, .L49+96
 335              	.LVL33:
 336              	.L42:
 147:../LIB_AP/Ap_EduMenu.c ****     while( (key = Ap_EduMenu_GetCmd()) != 0 )
 337              		.loc 1 147 0 discriminator 1
 338 002a D047     		blx	sl
 339              	.LVL34:
 340 002c 0346     		mov	r3, r0
 341 002e 0028     		cmp	r0, #0
 342 0030 00F0B080 		beq	.L44
 343              	.L33:
 149:../LIB_AP/Ap_EduMenu.c ****         switch(key)
 344              		.loc 1 149 0
 345 0034 A3F13100 		sub	r0, r3, #49
 346              	.LVL35:
 347 0038 3C28     		cmp	r0, #60
 348 003a F6D8     		bhi	.L42
 349 003c 01A3     		adr	r3, .L23
 350 003e 53F820F0 		ldr	pc, [r3, r0, lsl #2]
 351 0042 00BF     		.align	2
 352              	.L23:
 353 0044 E9010000 		.word	.L17+1
 354 0048 AD010000 		.word	.L18+1
 355 004c 9B010000 		.word	.L19+1
 356 0050 79010000 		.word	.L20+1
 357 0054 39010000 		.word	.L21+1
 358 0058 2B000000 		.word	.L42+1
 359 005c 2B000000 		.word	.L42+1
 360 0060 2B000000 		.word	.L42+1
 361 0064 2B000000 		.word	.L42+1
 362 0068 2B000000 		.word	.L42+1
 363 006c 2B000000 		.word	.L42+1
 364 0070 2B000000 		.word	.L42+1
 365 0074 2B000000 		.word	.L42+1
 366 0078 2B000000 		.word	.L42+1
 367 007c 2B000000 		.word	.L42+1
 368 0080 2B000000 		.word	.L42+1
 369 0084 2B000000 		.word	.L42+1
 370 0088 2B000000 		.word	.L42+1
 371 008c 2B000000 		.word	.L42+1
 372 0090 2B000000 		.word	.L42+1
 373 0094 2B000000 		.word	.L42+1
 374 0098 2B000000 		.word	.L42+1
 375 009c 2B000000 		.word	.L42+1
 376 00a0 2B000000 		.word	.L42+1
 377 00a4 2B000000 		.word	.L42+1
 378 00a8 2B000000 		.word	.L42+1
 379 00ac 2B000000 		.word	.L42+1
 380 00b0 2B000000 		.word	.L42+1
 381 00b4 17020000 		.word	.L22+1
 382 00b8 2B000000 		.word	.L42+1
 383 00bc 2B000000 		.word	.L42+1
 384 00c0 2B000000 		.word	.L42+1
 385 00c4 2B000000 		.word	.L42+1
 386 00c8 2B000000 		.word	.L42+1
 387 00cc 2B000000 		.word	.L42+1
 388 00d0 2B000000 		.word	.L42+1
 389 00d4 2B000000 		.word	.L42+1
 390 00d8 2B000000 		.word	.L42+1
 391 00dc 2B000000 		.word	.L42+1
 392 00e0 2B000000 		.word	.L42+1
 393 00e4 2B000000 		.word	.L42+1
 394 00e8 2B000000 		.word	.L42+1
 395 00ec 2B000000 		.word	.L42+1
 396 00f0 2B000000 		.word	.L42+1
 397 00f4 2B000000 		.word	.L42+1
 398 00f8 2B000000 		.word	.L42+1
 399 00fc 2B000000 		.word	.L42+1
 400 0100 2B000000 		.word	.L42+1
 401 0104 2B000000 		.word	.L42+1
 402 0108 2B000000 		.word	.L42+1
 403 010c 2B000000 		.word	.L42+1
 404 0110 2B000000 		.word	.L42+1
 405 0114 2B000000 		.word	.L42+1
 406 0118 2B000000 		.word	.L42+1
 407 011c 2B000000 		.word	.L42+1
 408 0120 2B000000 		.word	.L42+1
 409 0124 2B000000 		.word	.L42+1
 410 0128 2B000000 		.word	.L42+1
 411 012c 2B000000 		.word	.L42+1
 412 0130 2B000000 		.word	.L42+1
 413 0134 17020000 		.word	.L22+1
 414              	.L21:
 204:../LIB_AP/Ap_EduMenu.c ****            		Lb_printf("BT Test Start, press x to exit\n");
 415              		.loc 1 204 0
 416 0138 4F48     		ldr	r0, .L49+20
 417 013a A847     		blx	r5
 418              	.LVL36:
 419 013c 05E0     		b	.L43
 420              	.L29:
 213:../LIB_AP/Ap_EduMenu.c ****            			if( Hw_Uart_GetchNoWait( HW_USE_UART_CH_MENU, &UartData ) == TRUE )
 421              		.loc 1 213 0
 422 013e 0020     		movs	r0, #0
 423 0140 0DF10F01 		add	r1, sp, #15
 424 0144 A047     		blx	r4
 425              	.LVL37:
 426 0146 0128     		cmp	r0, #1
 427 0148 0FD0     		beq	.L45
 428              	.L43:
 208:../LIB_AP/Ap_EduMenu.c ****            			if( Hw_Uart_GetchNoWait( HW_USE_UART_CH_BT, &UartData) == TRUE )
 429              		.loc 1 208 0
 430 014a 0120     		movs	r0, #1
 431 014c 0DF10F01 		add	r1, sp, #15
 432 0150 A047     		blx	r4
 433              	.LVL38:
 434 0152 0128     		cmp	r0, #1
 435 0154 F3D1     		bne	.L29
 210:../LIB_AP/Ap_EduMenu.c ****            				Lb_printf( "BT Rxd : %c \n", UartData );
 436              		.loc 1 210 0
 437 0156 9DF80F10 		ldrb	r1, [sp, #15]	@ zero_extendqisi2
 438 015a 4848     		ldr	r0, .L49+24
 439 015c A847     		blx	r5
 440              	.LVL39:
 213:../LIB_AP/Ap_EduMenu.c ****            			if( Hw_Uart_GetchNoWait( HW_USE_UART_CH_MENU, &UartData ) == TRUE )
 441              		.loc 1 213 0
 442 015e 0020     		movs	r0, #0
 443 0160 0DF10F01 		add	r1, sp, #15
 444 0164 A047     		blx	r4
 445              	.LVL40:
 446 0166 0128     		cmp	r0, #1
 447 0168 EFD1     		bne	.L43
 448              	.L45:
 215:../LIB_AP/Ap_EduMenu.c ****            				if( UartData == 'x' )
 449              		.loc 1 215 0
 450 016a 9DF80F20 		ldrb	r2, [sp, #15]	@ zero_extendqisi2
 451              		.loc 1 221 0
 452 016e 4449     		ldr	r1, .L49+28
 215:../LIB_AP/Ap_EduMenu.c ****            				if( UartData == 'x' )
 453              		.loc 1 215 0
 454 0170 782A     		cmp	r2, #120
 455 0172 73D0     		beq	.L31
 456              		.loc 1 221 0
 457 0174 C047     		blx	r8
 458              	.LVL41:
 459 0176 E8E7     		b	.L43
 460              	.L20:
 200:../LIB_AP/Ap_EduMenu.c ****            		Hw_CLcd_Print( 0, 1, "Cnt : %d", Seg_Count++);
 461              		.loc 1 200 0
 462 0178 424E     		ldr	r6, .L49+32
 463 017a 0121     		movs	r1, #1
 464 017c 3388     		ldrh	r3, [r6, #0]
 465 017e 424A     		ldr	r2, .L49+36
 466 0180 5F18     		adds	r7, r3, r1
 467 0182 3780     		strh	r7, [r6, #0]	@ movhi
 468 0184 0020     		movs	r0, #0
 469 0186 414E     		ldr	r6, .L49+40
 470 0188 B047     		blx	r6
 471              	.LVL42:
 147:../LIB_AP/Ap_EduMenu.c ****     while( (key = Ap_EduMenu_GetCmd()) != 0 )
 472              		.loc 1 147 0
 473 018a D047     		blx	sl
 474              	.LVL43:
 475 018c 0346     		mov	r3, r0
 476 018e 0028     		cmp	r0, #0
 477 0190 7FF450AF 		bne	.L33
 478              	.L44:
 222:../LIB_AP/Ap_EduMenu.c ****            				}
 223:../LIB_AP/Ap_EduMenu.c ****            			}
 224:../LIB_AP/Ap_EduMenu.c **** 
 225:../LIB_AP/Ap_EduMenu.c **** 				}
 226:../LIB_AP/Ap_EduMenu.c **** 				
 227:../LIB_AP/Ap_EduMenu.c **** 				Lb_printf("BT Test Exit\n");
 228:../LIB_AP/Ap_EduMenu.c **** 				break; 
 229:../LIB_AP/Ap_EduMenu.c **** 
 230:../LIB_AP/Ap_EduMenu.c ****            case '6':
 231:../LIB_AP/Ap_EduMenu.c ****                break;  
 232:../LIB_AP/Ap_EduMenu.c **** 
 233:../LIB_AP/Ap_EduMenu.c ****            case '7':
 234:../LIB_AP/Ap_EduMenu.c ****                break;  
 235:../LIB_AP/Ap_EduMenu.c **** 
 236:../LIB_AP/Ap_EduMenu.c ****            case '8':           		
 237:../LIB_AP/Ap_EduMenu.c ****                break;
 238:../LIB_AP/Ap_EduMenu.c **** 
 239:../LIB_AP/Ap_EduMenu.c ****            case '9': 
 240:../LIB_AP/Ap_EduMenu.c ****                break;
 241:../LIB_AP/Ap_EduMenu.c **** 
 242:../LIB_AP/Ap_EduMenu.c ****            case '0':
 243:../LIB_AP/Ap_EduMenu.c ****                break;
 244:../LIB_AP/Ap_EduMenu.c **** 
 245:../LIB_AP/Ap_EduMenu.c **** 			case 'm':
 246:../LIB_AP/Ap_EduMenu.c **** 			case 'M':
 247:../LIB_AP/Ap_EduMenu.c **** 				Ap_EduMenu_ShowMenu();
 248:../LIB_AP/Ap_EduMenu.c **** 				break;
 249:../LIB_AP/Ap_EduMenu.c **** 				
 250:../LIB_AP/Ap_EduMenu.c ****            default :
 251:../LIB_AP/Ap_EduMenu.c ****                break;
 252:../LIB_AP/Ap_EduMenu.c ****         }
 253:../LIB_AP/Ap_EduMenu.c ****     }
 254:../LIB_AP/Ap_EduMenu.c ****     
 255:../LIB_AP/Ap_EduMenu.c ****     return Ret;
 256:../LIB_AP/Ap_EduMenu.c **** }
 479              		.loc 1 256 0
 480 0194 05B0     		add	sp, sp, #20
 481 0196 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 482              	.LVL44:
 483              	.L19:
 196:../LIB_AP/Ap_EduMenu.c ****            		Hw_7Seg_Print( 0, "%d", Seg_Count++ );
 484              		.loc 1 196 0
 485 019a 3A4B     		ldr	r3, .L49+32
 486 019c 0020     		movs	r0, #0
 487 019e 1A88     		ldrh	r2, [r3, #0]
 488 01a0 3B49     		ldr	r1, .L49+44
 489 01a2 561C     		adds	r6, r2, #1
 490 01a4 1E80     		strh	r6, [r3, #0]	@ movhi
 491 01a6 3B4B     		ldr	r3, .L49+48
 492 01a8 9847     		blx	r3
 493              	.LVL45:
 197:../LIB_AP/Ap_EduMenu.c ****                break; 
 494              		.loc 1 197 0
 495 01aa 3EE7     		b	.L42
 496              	.L18:
 163:../LIB_AP/Ap_EduMenu.c ****            		Lb_printf("KeyPad Start : press two keys to exit\n");
 497              		.loc 1 163 0
 498 01ac 3A48     		ldr	r0, .L49+52
 499 01ae A847     		blx	r5
 500              	.LVL46:
 501 01b0 3A4F     		ldr	r7, .L49+56
 502 01b2 3B4E     		ldr	r6, .L49+60
 182:../LIB_AP/Ap_EduMenu.c **** 						Lb_printf("%x KeyRepeat Cnt : %d\n",Hw_KeyPad_GetEventKeyData(HW_KEYPAD_EVENT_REPEAT), Hw_Key
 503              		.loc 1 182 0
 504 01b4 DFF81091 		ldr	r9, .L49+100
 505 01b8 06E0     		b	.L28
 506              	.LVL47:
 507              	.L25:
 173:../LIB_AP/Ap_EduMenu.c **** 					if( IS_SET_BIT( KeyEvent, HW_KEYPAD_EVENT_RELEASED) )
 508              		.loc 1 173 0
 509 01ba 4207     		lsls	r2, r0, #29
 510 01bc 31D4     		bmi	.L46
 178:../LIB_AP/Ap_EduMenu.c **** 					if( IS_SET_BIT( KeyEvent, HW_KEYPAD_EVENT_REPEAT) )
 511              		.loc 1 178 0
 512 01be 8307     		lsls	r3, r0, #30
 513 01c0 35D4     		bmi	.L47
 514              	.LVL48:
 515              	.L26:
 185:../LIB_AP/Ap_EduMenu.c **** 					KeyPressedCnt = Hw_KeyPad_GetPressedCnt();
 516              		.loc 1 185 0
 517 01c2 B047     		blx	r6
 518              	.LVL49:
 187:../LIB_AP/Ap_EduMenu.c **** 					if( KeyPressedCnt >= 2 )
 519              		.loc 1 187 0
 520 01c4 0128     		cmp	r0, #1
 521 01c6 0CD8     		bhi	.L48
 522              	.LVL50:
 523              	.L28:
 166:../LIB_AP/Ap_EduMenu.c ****            			KeyEvent = Hw_KeyPad_WaitForEvent(1000);
 524              		.loc 1 166 0
 525 01c8 4FF47A70 		mov	r0, #1000
 526 01cc B847     		blx	r7
 527              	.LVL51:
 168:../LIB_AP/Ap_EduMenu.c ****            			if( IS_SET_BIT( KeyEvent, HW_KEYPAD_EVENT_PRESSED) )
 528              		.loc 1 168 0
 529 01ce C107     		lsls	r1, r0, #31
 530 01d0 F3D5     		bpl	.L25
 170:../LIB_AP/Ap_EduMenu.c ****            				Lb_printf("%x KeyPressed\n", Hw_KeyPad_GetEventKeyData(HW_KEYPAD_EVENT_PRESSED) );  
 531              		.loc 1 170 0
 532 01d2 0020     		movs	r0, #0
 533              	.LVL52:
 534 01d4 C847     		blx	r9
 535              	.LVL53:
 536 01d6 0146     		mov	r1, r0
 537 01d8 3248     		ldr	r0, .L49+64
 538 01da A847     		blx	r5
 539              	.LVL54:
 185:../LIB_AP/Ap_EduMenu.c **** 					KeyPressedCnt = Hw_KeyPad_GetPressedCnt();
 540              		.loc 1 185 0
 541 01dc B047     		blx	r6
 542              	.LVL55:
 187:../LIB_AP/Ap_EduMenu.c **** 					if( KeyPressedCnt >= 2 )
 543              		.loc 1 187 0
 544 01de 0128     		cmp	r0, #1
 545 01e0 F2D9     		bls	.L28
 546              	.L48:
 189:../LIB_AP/Ap_EduMenu.c **** 						Lb_printf("Key Exit\n");
 547              		.loc 1 189 0
 548 01e2 3148     		ldr	r0, .L49+68
 549              	.LVL56:
 550 01e4 A847     		blx	r5
 551              	.LVL57:
 193:../LIB_AP/Ap_EduMenu.c **** 				break;
 552              		.loc 1 193 0
 553 01e6 20E7     		b	.L42
 554              	.L17:
 152:../LIB_AP/Ap_EduMenu.c ****            		Hw_Led_Toggle( 0 );
 555              		.loc 1 152 0
 556 01e8 304F     		ldr	r7, .L49+72
 557 01ea 0020     		movs	r0, #0
 153:../LIB_AP/Ap_EduMenu.c ****            		Hw_Timer_Delay_ms(500);
 558              		.loc 1 153 0
 559 01ec 304E     		ldr	r6, .L49+76
 152:../LIB_AP/Ap_EduMenu.c ****            		Hw_Led_Toggle( 0 );
 560              		.loc 1 152 0
 561 01ee B847     		blx	r7
 562              	.LVL58:
 153:../LIB_AP/Ap_EduMenu.c ****            		Hw_Timer_Delay_ms(500);
 563              		.loc 1 153 0
 564 01f0 4FF4FA70 		mov	r0, #500
 565 01f4 B047     		blx	r6
 566              	.LVL59:
 154:../LIB_AP/Ap_EduMenu.c ****            		Hw_Led_Toggle( 1 );
 567              		.loc 1 154 0
 568 01f6 0120     		movs	r0, #1
 569 01f8 B847     		blx	r7
 570              	.LVL60:
 155:../LIB_AP/Ap_EduMenu.c ****            		Hw_Timer_Delay_ms(500);
 571              		.loc 1 155 0
 572 01fa 4FF4FA70 		mov	r0, #500
 573 01fe B047     		blx	r6
 574              	.LVL61:
 156:../LIB_AP/Ap_EduMenu.c ****            		Hw_Led_Toggle( 2 );;
 575              		.loc 1 156 0
 576 0200 0220     		movs	r0, #2
 577 0202 B847     		blx	r7
 578              	.LVL62:
 157:../LIB_AP/Ap_EduMenu.c ****            		Hw_Timer_Delay_ms(500);
 579              		.loc 1 157 0
 580 0204 4FF4FA70 		mov	r0, #500
 581 0208 B047     		blx	r6
 582              	.LVL63:
 158:../LIB_AP/Ap_EduMenu.c ****            		Hw_Led_Toggle( 3 );
 583              		.loc 1 158 0
 584 020a 0320     		movs	r0, #3
 585 020c B847     		blx	r7
 586              	.LVL64:
 159:../LIB_AP/Ap_EduMenu.c ****            		Hw_Timer_Delay_ms(500);
 587              		.loc 1 159 0
 588 020e 4FF4FA70 		mov	r0, #500
 589 0212 B047     		blx	r6
 590              	.LVL65:
 160:../LIB_AP/Ap_EduMenu.c ****                	break;
 591              		.loc 1 160 0
 592 0214 09E7     		b	.L42
 593              	.L22:
 247:../LIB_AP/Ap_EduMenu.c **** 				Ap_EduMenu_ShowMenu();
 594              		.loc 1 247 0
 595 0216 40F20003 		movw	r3, #:lower16:Ap_EduMenu_ShowMenu
 596 021a C0F20003 		movt	r3, #:upper16:Ap_EduMenu_ShowMenu
 597 021e 9847     		blx	r3
 598              	.LVL66:
 248:../LIB_AP/Ap_EduMenu.c **** 				break;
 599              		.loc 1 248 0
 600 0220 03E7     		b	.L42
 601              	.LVL67:
 602              	.L46:
 175:../LIB_AP/Ap_EduMenu.c **** 						Lb_printf("%x KeyReleased\n", Hw_KeyPad_GetEventKeyData(HW_KEYPAD_EVENT_RELEASED) );         
 603              		.loc 1 175 0
 604 0222 0220     		movs	r0, #2
 605              	.LVL68:
 606 0224 C847     		blx	r9
 607              	.LVL69:
 608 0226 0146     		mov	r1, r0
 609 0228 2248     		ldr	r0, .L49+80
 610 022a A847     		blx	r5
 611              	.LVL70:
 612 022c C9E7     		b	.L26
 613              	.LVL71:
 614              	.L47:
 180:../LIB_AP/Ap_EduMenu.c **** 						KeyNum = Hw_KeyPad_GetEventKeyNum(HW_KEYPAD_EVENT_REPEAT);
 615              		.loc 1 180 0
 616 022e 40F20003 		movw	r3, #:lower16:Hw_KeyPad_GetEventKeyNum
 617 0232 0120     		movs	r0, #1
 618              	.LVL72:
 619 0234 C0F20003 		movt	r3, #:upper16:Hw_KeyPad_GetEventKeyNum
 620 0238 9847     		blx	r3
 621              	.LVL73:
 622 023a 0346     		mov	r3, r0
 623              	.LVL74:
 182:../LIB_AP/Ap_EduMenu.c **** 						Lb_printf("%x KeyRepeat Cnt : %d\n",Hw_KeyPad_GetEventKeyData(HW_KEYPAD_EVENT_REPEAT), Hw_Key
 624              		.loc 1 182 0
 625 023c 0120     		movs	r0, #1
 626              	.LVL75:
 627 023e 0193     		str	r3, [sp, #4]
 628 0240 C847     		blx	r9
 629              	.LVL76:
 630 0242 019B     		ldr	r3, [sp, #4]
 631 0244 8346     		mov	fp, r0
 632 0246 D8B2     		uxtb	r0, r3
 633 0248 40F20003 		movw	r3, #:lower16:Hw_KeyPad_GetRepeatCnt
 634 024c C0F20003 		movt	r3, #:upper16:Hw_KeyPad_GetRepeatCnt
 635 0250 9847     		blx	r3
 636              	.LVL77:
 637 0252 5946     		mov	r1, fp
 638 0254 0246     		mov	r2, r0
 639 0256 1848     		ldr	r0, .L49+84
 640 0258 A847     		blx	r5
 641              	.LVL78:
 642 025a B2E7     		b	.L26
 643              	.L31:
 227:../LIB_AP/Ap_EduMenu.c **** 				Lb_printf("BT Test Exit\n");
 644              		.loc 1 227 0
 645 025c 1748     		ldr	r0, .L49+88
 646 025e A847     		blx	r5
 647              	.LVL79:
 228:../LIB_AP/Ap_EduMenu.c **** 				break; 
 648              		.loc 1 228 0
 649 0260 E3E6     		b	.L42
 650              	.L50:
 651 0262 00BF     		.align	2
 652              	.L49:
 653 0264 00000000 		.word	Hw_KeyPad_SetEventFunc
 654 0268 00000000 		.word	KeyPad_UpKeyEvent
 655 026c 00000000 		.word	KeyPad_DownKeyEvent
 656 0270 00000000 		.word	Lb_printf
 657 0274 00000000 		.word	Hw_Uart_GetchNoWait
 658 0278 58030000 		.word	.LC22
 659 027c 78030000 		.word	.LC23
 660 0280 88030000 		.word	.LC24
 661 0284 00000000 		.word	.LANCHOR0
 662 0288 4C030000 		.word	.LC21
 663 028c 00000000 		.word	Hw_CLcd_Print
 664 0290 00000000 		.word	.LC0
 665 0294 00000000 		.word	Hw_7Seg_Print
 666 0298 E0020000 		.word	.LC16
 667 029c 00000000 		.word	Hw_KeyPad_WaitForEvent
 668 02a0 00000000 		.word	Hw_KeyPad_GetPressedCnt
 669 02a4 08030000 		.word	.LC17
 670 02a8 40030000 		.word	.LC20
 671 02ac 00000000 		.word	Hw_Led_Toggle
 672 02b0 00000000 		.word	Hw_Timer_Delay_ms
 673 02b4 18030000 		.word	.LC18
 674 02b8 28030000 		.word	.LC19
 675 02bc 9C030000 		.word	.LC25
 676 02c0 00000000 		.word	Ap_EduMenu_GetCmd
 677 02c4 00000000 		.word	Hw_Uart_Print
 678 02c8 00000000 		.word	Hw_KeyPad_GetEventKeyData
 679              		.cfi_endproc
 680              	.LFE4:
 682              		.global	Seg_Count
 683              		.section	.rodata.str1.4,"aMS",%progbits,1
 684              		.align	2
 685              	.LC0:
 686 0000 256400   		.ascii	"%d\000"
 687 0003 00       		.space	1
 688              	.LC1:
 689 0004 0A0A00   		.ascii	"\012\012\000"
 690 0007 00       		.space	1
 691              	.LC2:
 692 0008 2A2A2A2A 		.ascii	"***************************************************"
 692      2A2A2A2A 
 692      2A2A2A2A 
 692      2A2A2A2A 
 692      2A2A2A2A 
 693 003b 2A2A2A2A 		.ascii	"****\012\000"
 693      0A00
 694 0041 000000   		.space	3
 695              	.LC3:
 696 0044 20202020 		.ascii	"                      Edu V0.5                     "
 696      20202020 
 696      20202020 
 696      20202020 
 696      20202020 
 697 0077 20202020 		.ascii	"    \012\000"
 697      0A00
 698 007d 000000   		.space	3
 699              	.LC4:
 700 0080 2A20312E 		.ascii	"* 1. LED Test                                      "
 700      204C4544 
 700      20546573 
 700      74202020 
 700      20202020 
 701 00b3 2020202A 		.ascii	"   *\012\000"
 701      0A00
 702 00b9 000000   		.space	3
 703              	.LC5:
 704 00bc 2A20322E 		.ascii	"* 2. KeyPad Test                                   "
 704      204B6579 
 704      50616420 
 704      54657374 
 704      20202020 
 705 00ef 2020202A 		.ascii	"   *\012\000"
 705      0A00
 706 00f5 000000   		.space	3
 707              	.LC6:
 708 00f8 2A20332E 		.ascii	"* 3. 7Seg Test                                     "
 708      20375365 
 708      67205465 
 708      73742020 
 708      20202020 
 709 012b 2020202A 		.ascii	"   *\012\000"
 709      0A00
 710 0131 000000   		.space	3
 711              	.LC7:
 712 0134 2A20342E 		.ascii	"* 4. CLcd Test                                     "
 712      20434C63 
 712      64205465 
 712      73742020 
 712      20202020 
 713 0167 2020202A 		.ascii	"   *\012\000"
 713      0A00
 714 016d 000000   		.space	3
 715              	.LC8:
 716 0170 2A20352E 		.ascii	"* 5. BT Test                                       "
 716      20425420 
 716      54657374 
 716      20202020 
 716      20202020 
 717 01a3 2020202A 		.ascii	"   *\012\000"
 717      0A00
 718 01a9 000000   		.space	3
 719              	.LC9:
 720 01ac 2A20362E 		.ascii	"* 6.                                               "
 720      20202020 
 720      20202020 
 720      20202020 
 720      20202020 
 721 01df 2020202A 		.ascii	"   *\012\000"
 721      0A00
 722 01e5 000000   		.space	3
 723              	.LC10:
 724 01e8 2A20372E 		.ascii	"* 7.                                               "
 724      20202020 
 724      20202020 
 724      20202020 
 724      20202020 
 725 021b 2020202A 		.ascii	"   *\012\000"
 725      0A00
 726 0221 000000   		.space	3
 727              	.LC11:
 728 0224 2A20382E 		.ascii	"* 8.                                               "
 728      20202020 
 728      20202020 
 728      20202020 
 728      20202020 
 729 0257 2020202A 		.ascii	"   *\012\000"
 729      0A00
 730 025d 000000   		.space	3
 731              	.LC12:
 732 0260 2A20392E 		.ascii	"* 9.                                               "
 732      20202020 
 732      20202020 
 732      20202020 
 732      20202020 
 733 0293 2020202A 		.ascii	"   *\012\000"
 733      0A00
 734 0299 000000   		.space	3
 735              	.LC13:
 736 029c 2A206D2E 		.ascii	"* m.  Menu                                         "
 736      20204D65 
 736      6E752020 
 736      20202020 
 736      20202020 
 737 02cf 2020202A 		.ascii	"   *\012\000"
 737      0A00
 738 02d5 000000   		.space	3
 739              	.LC14:
 740 02d8 0A00     		.ascii	"\012\000"
 741 02da 0000     		.space	2
 742              	.LC15:
 743 02dc 3E3E2000 		.ascii	">> \000"
 744              	.LC16:
 745 02e0 4B657950 		.ascii	"KeyPad Start : press two keys to exit\012\000"
 745      61642053 
 745      74617274 
 745      203A2070 
 745      72657373 
 746 0307 00       		.space	1
 747              	.LC17:
 748 0308 2578204B 		.ascii	"%x KeyPressed\012\000"
 748      65795072 
 748      65737365 
 748      640A00
 749 0317 00       		.space	1
 750              	.LC18:
 751 0318 2578204B 		.ascii	"%x KeyReleased\012\000"
 751      65795265 
 751      6C656173 
 751      65640A00 
 752              	.LC19:
 753 0328 2578204B 		.ascii	"%x KeyRepeat Cnt : %d\012\000"
 753      65795265 
 753      70656174 
 753      20436E74 
 753      203A2025 
 754 033f 00       		.space	1
 755              	.LC20:
 756 0340 4B657920 		.ascii	"Key Exit\012\000"
 756      45786974 
 756      0A00
 757 034a 0000     		.space	2
 758              	.LC21:
 759 034c 436E7420 		.ascii	"Cnt : %d\000"
 759      3A202564 
 759      00
 760 0355 000000   		.space	3
 761              	.LC22:
 762 0358 42542054 		.ascii	"BT Test Start, press x to exit\012\000"
 762      65737420 
 762      53746172 
 762      742C2070 
 762      72657373 
 763              	.LC23:
 764 0378 42542052 		.ascii	"BT Rxd : %c \012\000"
 764      7864203A 
 764      20256320 
 764      0A00
 765 0386 0000     		.space	2
 766              	.LC24:
 767 0388 4D656E75 		.ascii	"Menu:Send : %c\015\012\000"
 767      3A53656E 
 767      64203A20 
 767      25630D0A 
 767      00
 768 0399 000000   		.space	3
 769              	.LC25:
 770 039c 42542054 		.ascii	"BT Test Exit\012\000"
 770      65737420 
 770      45786974 
 770      0A00
 771 03aa 0000     		.section	.bss.Seg_Count,"aw",%nobits
 772              		.align	1
 773              		.set	.LANCHOR0,. + 0
 776              	Seg_Count:
 777 0000 0000     		.space	2
 778              		.text
 779              	.Letext0:
 780              		.file 2 "../LIB_HW/Hw_Define.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 Ap_EduMenu.c
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//ccViZ9E8.s:19     .text.KeyPad_DownKeyEvent:0000000000000000 $t
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//ccViZ9E8.s:24     .text.KeyPad_DownKeyEvent:0000000000000000 KeyPad_DownKeyEvent
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//ccViZ9E8.s:70     .text.KeyPad_DownKeyEvent:0000000000000020 $d
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//ccViZ9E8.s:79     .text.KeyPad_UpKeyEvent:0000000000000000 $t
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//ccViZ9E8.s:84     .text.KeyPad_UpKeyEvent:0000000000000000 KeyPad_UpKeyEvent
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//ccViZ9E8.s:122    .text.KeyPad_UpKeyEvent:000000000000001c $d
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//ccViZ9E8.s:131    .text.Ap_EduMenu_ShowMenu:0000000000000000 $t
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//ccViZ9E8.s:136    .text.Ap_EduMenu_ShowMenu:0000000000000000 Ap_EduMenu_ShowMenu
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//ccViZ9E8.s:688    .rodata.str1.4:0000000000000004 .LC1
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//ccViZ9E8.s:691    .rodata.str1.4:0000000000000008 .LC2
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//ccViZ9E8.s:695    .rodata.str1.4:0000000000000044 .LC3
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//ccViZ9E8.s:699    .rodata.str1.4:0000000000000080 .LC4
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//ccViZ9E8.s:703    .rodata.str1.4:00000000000000bc .LC5
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//ccViZ9E8.s:707    .rodata.str1.4:00000000000000f8 .LC6
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//ccViZ9E8.s:711    .rodata.str1.4:0000000000000134 .LC7
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//ccViZ9E8.s:715    .rodata.str1.4:0000000000000170 .LC8
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//ccViZ9E8.s:719    .rodata.str1.4:00000000000001ac .LC9
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//ccViZ9E8.s:723    .rodata.str1.4:00000000000001e8 .LC10
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//ccViZ9E8.s:727    .rodata.str1.4:0000000000000224 .LC11
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//ccViZ9E8.s:731    .rodata.str1.4:0000000000000260 .LC12
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//ccViZ9E8.s:735    .rodata.str1.4:000000000000029c .LC13
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//ccViZ9E8.s:739    .rodata.str1.4:00000000000002d8 .LC14
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//ccViZ9E8.s:239    .text.Ap_EduMenu_GetCmd:0000000000000000 $t
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//ccViZ9E8.s:244    .text.Ap_EduMenu_GetCmd:0000000000000000 Ap_EduMenu_GetCmd
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//ccViZ9E8.s:742    .rodata.str1.4:00000000000002dc .LC15
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//ccViZ9E8.s:284    .text.Ap_EduMenu_ExeCmd:0000000000000000 $t
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//ccViZ9E8.s:289    .text.Ap_EduMenu_ExeCmd:0000000000000000 Ap_EduMenu_ExeCmd
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//ccViZ9E8.s:353    .text.Ap_EduMenu_ExeCmd:0000000000000044 $d
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//ccViZ9E8.s:416    .text.Ap_EduMenu_ExeCmd:0000000000000138 $t
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//ccViZ9E8.s:653    .text.Ap_EduMenu_ExeCmd:0000000000000264 $d
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//ccViZ9E8.s:776    .bss.Seg_Count:0000000000000000 Seg_Count
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//ccViZ9E8.s:684    .rodata.str1.4:0000000000000000 $d
/var/folders/bz/nn5481rn5xq59rb0mbj7x0880000gn/T//ccViZ9E8.s:772    .bss.Seg_Count:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
Hw_7Seg_Print
Lb_printf
get_byte
Hw_KeyPad_GetEventKeyNum
Hw_KeyPad_GetRepeatCnt
Hw_KeyPad_SetEventFunc
Hw_Uart_GetchNoWait
Hw_CLcd_Print
Hw_KeyPad_WaitForEvent
Hw_KeyPad_GetPressedCnt
Hw_Led_Toggle
Hw_Timer_Delay_ms
Hw_Uart_Print
Hw_KeyPad_GetEventKeyData
